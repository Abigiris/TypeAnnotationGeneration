{
    "digikey-api-master/setup.py": {},
    "digikey-api-master/digikey/constants.py": {},
    "digikey-api-master/digikey/decorators.py": {
        "wrap_exception_in": {
            "name": "wrap_exception_in",
            "location": 12,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "exc_type": [
                    "str",
                    "bool"
                ],
                "catch": [
                    "Exception",
                    "str",
                    "bool"
                ]
            }
        },
        "retry": {
            "name": "retry",
            "location": 52,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[...,None]"
                ]
            }
        },
        "wrap_exception_in.wrapper": {
            "name": "wrapper",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "retry.inner": {
            "name": "inner",
            "location": 61,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {}
        },
        "wrap_exception_in.wrapper.inner": {
            "name": "inner",
            "location": 23,
            "return": [],
            "arguments": {}
        }
    },
    "digikey-api-master/digikey/exceptions.py": {},
    "digikey-api-master/digikey/utils.py": {
        "chunked": {
            "name": "chunked",
            "location": 16,
            "return": [
                "list"
            ],
            "arguments": {
                "list_": [
                    "list",
                    "int",
                    "List[Tuple[str, int]]",
                    "List[float]",
                    "List[List[int]]",
                    "List[int]"
                ],
                "chunksize": [
                    "int",
                    "List",
                    "List[Tuple[str,int]]",
                    "List[float]",
                    "List[List[int]]",
                    "List[int]"
                ]
            }
        },
        "chunk_queries": {
            "name": "chunk_queries",
            "location": 33,
            "return": [
                "list"
            ],
            "arguments": {
                "queries": [
                    "str",
                    "List",
                    "Callable"
                ]
            }
        },
        "split_chunk": {
            "name": "split_chunk",
            "location": 49,
            "return": [
                "list"
            ],
            "arguments": {
                "chunk": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "bool",
                    "dict",
                    "str"
                ]
            }
        },
        "flatten": {
            "name": "flatten",
            "location": 69,
            "return": [
                "list"
            ],
            "arguments": {
                "list_of_lists": [
                    "List[List]",
                    "int",
                    "List[list]",
                    "float",
                    "str"
                ]
            }
        },
        "unique": {
            "name": "unique",
            "location": 77,
            "return": [
                "list"
            ],
            "arguments": {
                "list_": [
                    "List",
                    "Dict"
                ]
            }
        },
        "sortby_param_str_from_list": {
            "name": "sortby_param_str_from_list",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "sortby": [
                    "List[Tuple[str,str]]",
                    "int",
                    "None",
                    "List[tuple[Union[str,str]]]",
                    "List[Tuple[int,int,str]]",
                    "List[tuple[Union[int,int,str]]]"
                ]
            }
        },
        "sortby_param_str_from_list.exc_from_entry": {
            "name": "exc_from_entry",
            "location": 97,
            "return": [
                "DigikeyTypeError"
            ],
            "arguments": {
                "entry": [
                    "list",
                    "str",
                    "Type"
                ]
            }
        }
    },
    "digikey-api-master/digikey/__init__.py": {},
    "digikey-api-master/digikey/oauth/oauth2.py": {
        "Oauth2Token.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Oauth2Token.access_token": {
            "name": "access_token",
            "location": 42,
            "return": [
                "dict",
                "Dict[str, str]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Oauth2Token.refresh_token": {
            "name": "refresh_token",
            "location": 46,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Oauth2Token.expires": {
            "name": "expires",
            "location": 50,
            "return": [
                "datetime.datetime",
                "Optional[bool]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Oauth2Token.type": {
            "name": "type",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Oauth2Token.expired": {
            "name": "expired",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Oauth2Token.get_authorization": {
            "name": "get_authorization",
            "location": 60,
            "return": [
                "bool",
                "Type",
                "Type[Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Oauth2Token.__repr__": {
            "name": "__repr__",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPServerHandler.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "str",
                    "django.http.HttpRequest"
                ],
                "address": [
                    "int",
                    "str",
                    "django.http.HttpRequest"
                ],
                "server": [
                    "int",
                    "str",
                    "django.http.HttpRequest"
                ],
                "a_id": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[int]",
                    "None",
                    "Optional[str]"
                ],
                "a_secret": [
                    "str",
                    "int",
                    "List[str]",
                    "float"
                ]
            }
        },
        "HTTPServerHandler.do_GET": {
            "name": "do_GET",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPServerHandler.log_message": {
            "name": "log_message",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "format": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "TokenHandler.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a_id": [
                    "None",
                    "str",
                    "Optional[str]",
                    "int",
                    "constants.Rank",
                    "Union[None,str,int]"
                ],
                "a_secret": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[Type]",
                    "Type"
                ],
                "a_token_storage_path": [
                    "str",
                    "None"
                ],
                "version": [
                    "int",
                    "str",
                    "Path",
                    "bool"
                ],
                "sandbox": [
                    "bool",
                    "str",
                    "Union[str,dict]",
                    "Optional[str]",
                    "int",
                    "Optional[List[str]]"
                ]
            }
        },
        "TokenHandler.__generate_certificate": {
            "name": "__generate_certificate",
            "location": 149,
            "return": [
                "bool",
                "str",
                "Union[str, Pattern]",
                "int",
                "Optional[int]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenHandler.__build_authorization_url": {
            "name": "__build_authorization_url",
            "location": 153,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenHandler.__exchange_for_token": {
            "name": "__exchange_for_token",
            "location": 163,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "int"
                ]
            }
        },
        "TokenHandler.__refresh_token": {
            "name": "__refresh_token",
            "location": 191,
            "return": [
                "dict",
                "datetime.datetime",
                "bool",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "refresh_token": [
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "TokenHandler.save": {
            "name": "save",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "json_data": [
                    "Dict",
                    "bytes",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "TokenHandler.get_access_token": {
            "name": "get_access_token",
            "location": 222,
            "return": [
                "Oauth2Token"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "digikey-api-master/digikey/oauth/__init__.py": {},
    "digikey-api-master/digikey/v2/api.py": {
        "search": {
            "name": "search",
            "location": 11,
            "return": [
                "models.KeywordSearchResult"
            ],
            "arguments": {
                "query": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "None"
                ],
                "start": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Dict[str,Any]"
                ],
                "limit": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "part": {
            "name": "part",
            "location": 34,
            "return": [
                "models.Part"
            ],
            "arguments": {
                "partnr": [
                    "bool",
                    "str"
                ],
                "include_associated": [
                    "bool",
                    "str"
                ],
                "include_for_use_with": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v2/client.py": {
        "DigikeyClient.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a_id": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Union[str,Callable]",
                    "Callable"
                ],
                "a_secret": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "a_token_storage_path": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "base_url": [
                    "str",
                    "Text"
                ]
            }
        },
        "DigikeyClient.client_key_param": {
            "name": "client_key_param",
            "location": 57,
            "return": [
                "Dict[Text,]",
                "int",
                "IO",
                "Dict[str,str]",
                "str",
                "users.models.CustomUser",
                "tests.models.Customer"
            ],
            "arguments": {
                "self": []
            }
        },
        "DigikeyClient._request": {
            "name": "_request",
            "location": 62,
            "return": [
                "dict",
                "Optional[str]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Dict[str,Any]",
                    "str",
                    "Dict",
                    "List[str]"
                ],
                "data": [
                    "Dict[str,Any]",
                    "None",
                    "str",
                    "Dict",
                    "List[str]"
                ]
            }
        },
        "DigikeyClient.search": {
            "name": "search",
            "location": 81,
            "return": [
                "dict",
                "int",
                "Dict[str, float]",
                "tartare.core.models.Job",
                "Dict[str, Union[str, int]]",
                "bytes",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "int",
                    "str",
                    "float",
                    "constants.Status"
                ],
                "start": [
                    "int",
                    "constants.Status",
                    "str",
                    "float"
                ],
                "limit": [
                    "int",
                    "constants.Status",
                    "str",
                    "float"
                ]
            }
        },
        "DigikeyClient.part": {
            "name": "part",
            "location": 117,
            "return": [
                "dict",
                "str",
                "bytes",
                "Optional[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "partnr": [
                    "str",
                    "float",
                    "Optional[str]",
                    "bool",
                    "None"
                ],
                "include_associated": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "float"
                ],
                "include_for_use_with": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "float"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v2/directives.py": {
        "include_directives_from_kwargs": {
            "name": "include_directives_from_kwargs",
            "location": 23,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        }
    },
    "digikey-api-master/digikey/v2/models.py": {
        "BaseModel.errors": {
            "name": "errors",
            "location": 16,
            "return": [
                "None",
                "str",
                "Optional[int]",
                "bool",
                "Optional[object]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str,str]",
                    "int",
                    "Optional[str]",
                    "str",
                    "Type[T]",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "Type"
                ],
                "dict_": [
                    "Dict[str,str]",
                    "int",
                    "Optional[str]",
                    "str",
                    "Type[T]",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "Type"
                ]
            }
        },
        "BaseModel.errors_list": {
            "name": "errors_list",
            "location": 30,
            "return": [
                "List",
                "None",
                "List[str]",
                "str",
                "Iterable",
                "Optional[dict]"
            ],
            "arguments": {
                "cls": [
                    "Dict",
                    "Dict[str,str]",
                    "Mapping",
                    "int",
                    "Optional[int]",
                    "None",
                    "Dict[str,Any]",
                    "asgard.models.spec.container.ContainerParameterSpec"
                ],
                "list_": [
                    "Dict",
                    "Dict[str,str]",
                    "Mapping",
                    "Optional[int]",
                    "Dict[str,Any]",
                    "asgard.models.spec.container.ContainerParameterSpec"
                ]
            }
        },
        "BaseModel.is_valid": {
            "name": "is_valid",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Optional[dict]",
                    "str",
                    "Exception",
                    "Optional[list]",
                    "T"
                ],
                "dict_": [
                    "Optional[dict]",
                    "Dict",
                    "str",
                    "Exception",
                    "None",
                    "Optional[list]",
                    "T",
                    "List"
                ]
            }
        },
        "BaseModel.is_valid_list": {
            "name": "is_valid_list",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "List[Dict]",
                    "Type",
                    "List[dict]"
                ],
                "list_": [
                    "List[dict]",
                    "List[Dict]",
                    "Type"
                ]
            }
        },
        "BaseModel.camelize": {
            "name": "camelize",
            "location": 58,
            "return": [
                "dict"
            ],
            "arguments": {
                "cls": [
                    "Callable",
                    "Type",
                    "Iterable",
                    "Callable[,Any]"
                ],
                "dict_": [
                    "Dict[str,str]",
                    "Dict",
                    "Dict[str,Any]",
                    "Sequence",
                    "Type[T]"
                ]
            }
        },
        "KeywordSearchResult.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "Counter",
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "List",
                    "bool",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]"
                ]
            }
        },
        "KeywordSearchResult.parts": {
            "name": "parts",
            "location": 111,
            "return": [
                "List[Part]",
                "List[str]",
                "List",
                "int",
                "List[Dict[str,Any]]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeywordSearchResult.__repr__": {
            "name": "__repr__",
            "location": 117,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeywordSearchResult.pretty_print": {
            "name": "pretty_print",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PriceBreak.__init__": {
            "name": "__init__",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pricebreak": [
                    "int",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ]
            }
        },
        "PriceBreak.breakquantity": {
            "name": "breakquantity",
            "location": 136,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]",
                "allennlp.models.Model"
            ],
            "arguments": {
                "self": []
            }
        },
        "PriceBreak.unitprice": {
            "name": "unitprice",
            "location": 140,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]",
                "allennlp.models.Model"
            ],
            "arguments": {
                "self": []
            }
        },
        "PriceBreak.totalprice": {
            "name": "totalprice",
            "location": 144,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]",
                "allennlp.models.Model"
            ],
            "arguments": {
                "self": []
            }
        },
        "IdTextPair.__init__": {
            "name": "__init__",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idtextpair": [
                    "int",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ]
            }
        },
        "IdTextPair.id": {
            "name": "id",
            "location": 153,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IdTextPair.text": {
            "name": "text",
            "location": 157,
            "return": [
                "str",
                "Union[str, int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PidVid.__init__": {
            "name": "__init__",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pidvid": [
                    "int",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ]
            }
        },
        "PidVid.parameter_id": {
            "name": "parameter_id",
            "location": 166,
            "return": [
                "str",
                "Union[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PidVid.value_id": {
            "name": "value_id",
            "location": 170,
            "return": [
                "str",
                "int",
                "zerver.models.Realm",
                "bytes",
                "tracim.models.data.Workspace"
            ],
            "arguments": {
                "self": []
            }
        },
        "PidVid.parameter": {
            "name": "parameter",
            "location": 174,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PidVid.value": {
            "name": "value",
            "location": 178,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "int",
                "Dict[str, Dict[str, Any]]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PidVid.__repr__": {
            "name": "__repr__",
            "location": 181,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Family.__init__": {
            "name": "__init__",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "family": [
                    "int",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ]
            }
        },
        "Family.id": {
            "name": "id",
            "location": 190,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Family.name": {
            "name": "name",
            "location": 194,
            "return": [
                "Optional[BaseException]",
                "Optional[str]",
                "Type[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Family.part_count": {
            "name": "part_count",
            "location": 198,
            "return": [
                "str",
                "int",
                "bool",
                "List[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.__init__": {
            "name": "__init__",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "part": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "Part.standard_pricing": {
            "name": "standard_pricing",
            "location": 207,
            "return": [
                "List[PriceBreak]",
                "str",
                "List",
                "List[str]",
                "int",
                "Sequence[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.category": {
            "name": "category",
            "location": 214,
            "return": [
                "IdTextPair",
                "str",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.family": {
            "name": "family",
            "location": 218,
            "return": [
                "IdTextPair",
                "str",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.manufacturer": {
            "name": "manufacturer",
            "location": 222,
            "return": [
                "Optional[mypy.types.Type]",
                "bytes",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.mpn": {
            "name": "mpn",
            "location": 226,
            "return": [
                "str",
                "int",
                "bool",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.part_status": {
            "name": "part_status",
            "location": 230,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.digikey_pn": {
            "name": "digikey_pn",
            "location": 234,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.digikey_url": {
            "name": "digikey_url",
            "location": 238,
            "return": [
                "str",
                "Optional[bool]",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.in_stock": {
            "name": "in_stock",
            "location": 242,
            "return": [
                "bool",
                "Optional[bool]",
                "Optional[str]",
                "Tuple[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.moq": {
            "name": "moq",
            "location": 246,
            "return": [
                "bool",
                "str",
                "Optional[bool]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.parameters": {
            "name": "parameters",
            "location": 250,
            "return": [
                "Dict",
                "str",
                "int",
                "bool",
                "Iterable",
                "Optional[Union[str,Any]]",
                "Tuple",
                "Dict[str,Dict[str,int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.description_product": {
            "name": "description_product",
            "location": 255,
            "return": [
                "Optional[str]",
                "django.contrib.auth.models.AbstractBaseUser",
                "str",
                "Optional[zerver.models.UserProfile]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.description_detailed": {
            "name": "description_detailed",
            "location": 259,
            "return": [
                "Optional[str]",
                "Optional[List[str]]",
                "str",
                "exporwiki.types.PrimalEngramEntry"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.datasheet": {
            "name": "datasheet",
            "location": 263,
            "return": [
                "str",
                "Optional[str]",
                "Optional[BaseException]",
                "List[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.__repr__": {
            "name": "__repr__",
            "location": 266,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "digikey-api-master/digikey/v2/__init__.py": {},
    "digikey-api-master/digikey/v3/api.py": {
        "keyword_search": {
            "name": "keyword_search",
            "location": 109,
            "return": [
                "Dict[str, Any]",
                "str",
                "dict"
            ],
            "arguments": {}
        },
        "product_details": {
            "name": "product_details",
            "location": 120,
            "return": [
                "dict"
            ],
            "arguments": {}
        },
        "digi_reel_pricing": {
            "name": "digi_reel_pricing",
            "location": 128,
            "return": [
                "dict"
            ],
            "arguments": {}
        },
        "suggested_parts": {
            "name": "suggested_parts",
            "location": 136,
            "return": [
                "Dict[str, Any]",
                "str",
                "dict"
            ],
            "arguments": {}
        },
        "manufacturer_product_details": {
            "name": "manufacturer_product_details",
            "location": 144,
            "return": [
                "dict"
            ],
            "arguments": {}
        },
        "status_salesorder_id": {
            "name": "status_salesorder_id",
            "location": 154,
            "return": [
                "Dict[str, Any]",
                "Optional[\"permissions_doc\"]",
                "dict",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "salesorder_history": {
            "name": "salesorder_history",
            "location": 162,
            "return": [
                "dict"
            ],
            "arguments": {}
        },
        "batch_product_details": {
            "name": "batch_product_details",
            "location": 173,
            "return": [
                "dict"
            ],
            "arguments": {}
        },
        "DigikeyApiWrapper.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wrapped_function": [
                    "str",
                    "Sequence[str]",
                    "Set[str]",
                    "Optional[bool]",
                    "bool",
                    "None"
                ],
                "module": [
                    "str",
                    "list",
                    "Dict[str, Any]"
                ]
            }
        },
        "DigikeyApiWrapper._remaining_requests": {
            "name": "_remaining_requests",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "header": [
                    "str",
                    "Dict[str,str]"
                ],
                "api_limits": [
                    "str",
                    "Iterable[Callable]"
                ]
            }
        },
        "DigikeyApiWrapper._store_api_statuscode": {
            "name": "_store_api_statuscode",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "statuscode": [
                    "int"
                ],
                "status": [
                    "int",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[BaseException]"
                ]
            }
        },
        "DigikeyApiWrapper.call_api_function": {
            "name": "call_api_function",
            "location": 91,
            "return": [
                "str",
                "\"TransactionModel\"",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "digikey-api-master/digikey/v3/__init__.py": {},
    "digikey-api-master/digikey/v3/batchproductdetails/api_client.py": {
        "ApiClient.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "configuration": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "header_name": [
                    "str",
                    "None",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "List[str]"
                ],
                "header_value": [
                    "str",
                    "None",
                    "bytes",
                    "Optional[str]"
                ],
                "cookie": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "ApiClient.__del__": {
            "name": "__del__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiClient.pool": {
            "name": "pool",
            "location": 85,
            "return": [
                "int",
                "Callable",
                "str",
                "Final",
                "Dict",
                "Set[str]",
                "OrderedDict",
                "ThreadPool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiClient.user_agent": {
            "name": "user_agent",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[str]",
                    "T",
                    "float",
                    "int"
                ]
            }
        },
        "ApiClient.set_default_header": {
            "name": "set_default_header",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "header_name": [
                    "str"
                ],
                "header_value": [
                    "str"
                ]
            }
        },
        "ApiClient.__call_api": {
            "name": "__call_api",
            "location": 102,
            "return": [
                "Optional[Exception]",
                "None",
                "Union[object,type]",
                "Tuple[None]"
            ],
            "arguments": {
                "self": [],
                "resource_path": [
                    "bool",
                    "str"
                ],
                "method": [
                    "str",
                    "int",
                    "bool"
                ],
                "path_params": [
                    "bool",
                    "None",
                    "str",
                    "List",
                    "Callable[[dict],dict]",
                    "Callable[dict,dict]",
                    "Optional[str]",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]",
                    "Callable[[Any],datetime.datetime]"
                ],
                "query_params": [
                    "bool",
                    "float",
                    "None",
                    "str"
                ],
                "header_params": [
                    "bytes",
                    "None",
                    "float",
                    "MutableSet[T]",
                    "int",
                    "MutableSet",
                    "List[Dict]",
                    "List[dict]"
                ],
                "body": [
                    "bool",
                    "None",
                    "Optional[int]",
                    "int",
                    "request_response"
                ],
                "post_params": [
                    "bool",
                    "List[str]",
                    "None"
                ],
                "files": [
                    "bool",
                    "None",
                    "TextIO",
                    "int",
                    "Optional[str]",
                    "str"
                ],
                "response_type": [
                    "bool",
                    "None",
                    "str",
                    "List[str]",
                    "int",
                    "Optional[str]"
                ],
                "auth_settings": [
                    "bool",
                    "str",
                    "None"
                ],
                "_return_http_data_only": [
                    "bool",
                    "None",
                    "Optional[int]"
                ],
                "collection_formats": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "_preload_content": [
                    "bool",
                    "str",
                    "int"
                ],
                "_request_timeout": [
                    "str",
                    "None",
                    "int",
                    "bool"
                ]
            }
        },
        "ApiClient.sanitize_for_serialization": {
            "name": "sanitize_for_serialization",
            "location": 179,
            "return": [
                "Optional[str]",
                "int",
                "None",
                "self_@_PRIMITIVE_TYPES",
                "List",
                "Tuple",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Optional[AbstractSet[str]]",
                    "Dict",
                    "AbstractSet",
                    "None"
                ]
            }
        },
        "ApiClient.deserialize": {
            "name": "deserialize",
            "location": 221,
            "return": [
                "str",
                "dict",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "Union[bytes,bytearray]",
                    "bytes",
                    "bytearray",
                    "Optional[dict]",
                    "None"
                ],
                "response_type": [
                    "str"
                ]
            }
        },
        "ApiClient.__deserialize": {
            "name": "__deserialize",
            "location": 243,
            "return": [
                "str",
                "None",
                "Optional[str]",
                "List",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str,Any]",
                    "bytes",
                    "Dict[str,Union[str,Any]]",
                    "Dict",
                    "Optional[dict]",
                    "int",
                    "Optional[int]",
                    "Iterable"
                ],
                "klass": [
                    "bytes",
                    "str"
                ]
            }
        },
        "ApiClient.call_api": {
            "name": "call_api",
            "location": 282,
            "return": [
                "str",
                "Tuple[Union[Any,Any]]",
                "Optional[Mapping[str,Any]]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "resource_path": [
                    "bool",
                    "str",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "method": [
                    "bool",
                    "str",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "path_params": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "query_params": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "header_params": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "body": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "post_params": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "files": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "response_type": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "auth_settings": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "async_req": [
                    "bool",
                    "None",
                    "Optional[int]"
                ],
                "_return_http_data_only": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "collection_formats": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "_preload_content": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "_request_timeout": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "ApiClient.request": {
            "name": "request",
            "location": 342,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "bool",
                    "List[str]",
                    "AbstractSet",
                    "Callable",
                    "AbstractSet[int]",
                    "AbstractSet[str]"
                ],
                "url": [
                    "str",
                    "Dict[str,Any]",
                    "bool",
                    "Sequence[str]",
                    "Dict",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "None"
                ],
                "query_params": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "bool",
                    "Sequence[str]",
                    "Dict",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]"
                ],
                "headers": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "bool",
                    "Sequence[str]",
                    "Dict",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]"
                ],
                "post_params": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "bool",
                    "Dict[str,str]"
                ],
                "body": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "bool",
                    "Dict[str,str]"
                ],
                "_preload_content": [
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "Sequence[str]",
                    "Dict",
                    "Optional[Dict[str,str]]"
                ],
                "_request_timeout": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "bool",
                    "Sequence[str]",
                    "Dict",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]"
                ]
            }
        },
        "ApiClient.parameters_to_tuples": {
            "name": "parameters_to_tuples",
            "location": 403,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "str",
                    "Iterable[str]",
                    "Dict"
                ],
                "collection_formats": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ApiClient.prepare_post_parameters": {
            "name": "prepare_post_parameters",
            "location": 433,
            "return": [
                "Union[(List[tuple], _T0)]"
            ],
            "arguments": {
                "self": [],
                "post_params": [
                    "str"
                ],
                "files": [
                    "str",
                    "None",
                    "List[str]",
                    "DefaultDict[str,List[Any]]",
                    "DefaultDict"
                ]
            }
        },
        "ApiClient.select_header_accept": {
            "name": "select_header_accept",
            "location": 461,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "accepts": [
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Dict[str,Union[str,bool]]",
                    "Optional[Dict[str,str]]"
                ]
            }
        },
        "ApiClient.select_header_content_type": {
            "name": "select_header_content_type",
            "location": 477,
            "return": [
                "str",
                "Text",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "content_types": [
                    "str"
                ]
            }
        },
        "ApiClient.update_params_for_auth": {
            "name": "update_params_for_auth",
            "location": 493,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "Callable",
                    "bool"
                ],
                "querys": [
                    "List[str]",
                    "Dict"
                ],
                "auth_settings": [
                    "Dict[str,Any]",
                    "Dict",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "ApiClient.__deserialize_file": {
            "name": "__deserialize_file",
            "location": 517,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "ApiClient.__deserialize_primitive": {
            "name": "__deserialize_primitive",
            "location": 541,
            "return": [
                "Dict[str,Dict[str,Any]]",
                "Dict",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict",
                    "bytes",
                    "str"
                ],
                "klass": [
                    "Dict",
                    "bytes",
                    "Union[bytes,bytearray,memoryview]",
                    "bytearray",
                    "memoryview"
                ]
            }
        },
        "ApiClient.__deserialize_object": {
            "name": "__deserialize_object",
            "location": 556,
            "return": [
                "int",
                "str",
                "Tuple[Union[str,int]]",
                "Dict[str,Any]",
                "complex",
                "List"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "complex",
                    "Tuple[str,int]",
                    "List",
                    "Tuple[Union[str,int]]"
                ]
            }
        },
        "ApiClient.__deserialize_date": {
            "name": "__deserialize_date",
            "location": 563,
            "return": [
                "str",
                "Optional[int]",
                "Optional[str]",
                "Optional[bool]",
                "Optional[Type]",
                "Dict[int,int]"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ]
            }
        },
        "ApiClient.__deserialize_datatime": {
            "name": "__deserialize_datatime",
            "location": 580,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ]
            }
        },
        "ApiClient.__hasattr": {
            "name": "__hasattr",
            "location": 602,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "object": [
                    "str",
                    "Optional[str]",
                    "None",
                    "FrozenSet[str]",
                    "frozenset"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "FrozenSet[str]",
                    "frozenset"
                ]
            }
        },
        "ApiClient.__deserialize_model": {
            "name": "__deserialize_model",
            "location": 605,
            "return": [
                "Dict",
                "Dict[str,Any]",
                "str",
                "Dict[AbstractSet,set[Any]]",
                "float",
                "Sequence",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[AbstractSet,set[Any]]",
                    "Dict[AbstractSet[str],Set[Any]]",
                    "Union[None,int,str]"
                ],
                "klass": [
                    "Callable",
                    "Union[str,int]",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/batchproductdetails/configuration.py": {
        "Configuration.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration.set_default": {
            "name": "set_default",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[str]",
                    "Callable[[dict],None]",
                    "str",
                    "Callable[dict,None]",
                    "Dict[str,Any]",
                    "Optional[Dict]",
                    "Dict",
                    "None"
                ],
                "default": [
                    "int",
                    "List[str]",
                    "Callable[[dict],None]",
                    "str",
                    "Callable[dict,None]",
                    "Dict[str,Any]",
                    "Optional[Dict]",
                    "Dict",
                    "None"
                ]
            }
        },
        "Configuration.logger_file": {
            "name": "logger_file",
            "location": 117,
            "return": [
                "str",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict[str, str]",
                    "dict",
                    "int"
                ]
            }
        },
        "Configuration.debug": {
            "name": "debug",
            "location": 156,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict[str, Any]",
                    "int",
                    "Set[str]",
                    "str"
                ]
            }
        },
        "Configuration.logger_format": {
            "name": "logger_format",
            "location": 189,
            "return": [
                "str",
                "typing.Final"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[bytes, str]"
                ]
            }
        },
        "Configuration.get_api_key_with_prefix": {
            "name": "get_api_key_with_prefix",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Configuration.get_basic_auth_token": {
            "name": "get_basic_auth_token",
            "location": 212,
            "return": [
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration.auth_settings": {
            "name": "auth_settings",
            "location": 221,
            "return": [
                "Dict[(str, Dict[(str, Optional[str])])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration.to_debug_report": {
            "name": "to_debug_report",
            "location": 245,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "digikey-api-master/digikey/v3/batchproductdetails/rest.py": {
        "RESTResponse.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resp": [
                    "FrozenSet[bytes]",
                    "frozenset",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "RESTResponse.getheaders": {
            "name": "getheaders",
            "location": 44,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "Dict[str, dict]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RESTResponse.getheader": {
            "name": "getheader",
            "location": 48,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Dict[str,Any]"
                ],
                "default": [
                    "str",
                    "List[str]",
                    "None",
                    "Dict[str,Any]"
                ]
            }
        },
        "RESTClientObject.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "configuration": [
                    "Mapping[str,Tuple[float,float,float]]",
                    "Mapping"
                ],
                "pools_size": [
                    "int",
                    "bool"
                ],
                "maxsize": [
                    "int",
                    "None",
                    "Tuple[str,int]",
                    "Optional[int]",
                    "Tuple[Union[str,int]]"
                ]
            }
        },
        "RESTClientObject.request": {
            "name": "request",
            "location": 108,
            "return": [
                "Set[str]",
                "Dict[str,Union[Any,Any,str]]",
                "List[str]",
                "bytes",
                "List[Match]",
                "Dict[str,str]",
                "Generator[Union[Any,None,None]]",
                "Dict[str,Any]",
                "str",
                "bool",
                "None",
                "List",
                "Tuple[Union[str,str,str]]",
                "RESTResponse"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Dict",
                    "Optional[dict]"
                ],
                "url": [
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "str",
                    "urllib.requesRequest",
                    "None"
                ],
                "query_params": [
                    "str",
                    "None",
                    "bytes",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "Optional[Dict[str,Any]]"
                ],
                "headers": [
                    "str",
                    "None",
                    "bytes",
                    "Dict",
                    "Dict[str,Any]"
                ],
                "body": [
                    "str",
                    "Dict[str,Any]",
                    "None",
                    "int"
                ],
                "post_params": [
                    "bool",
                    "None",
                    "Optional[Dict[str,str]]",
                    "Dict[str,Any]",
                    "Dict[str,str]"
                ],
                "_preload_content": [
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "int",
                    "Dict"
                ],
                "_request_timeout": [
                    "int",
                    "Union[int, float]"
                ]
            }
        },
        "RESTClientObject.GET": {
            "name": "GET",
            "location": 232,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Optional[str]",
                    "Dict",
                    "Callable",
                    "None"
                ],
                "headers": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Dict",
                    "Callable"
                ],
                "query_params": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Dict",
                    "Callable"
                ],
                "_preload_content": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Dict",
                    "Callable"
                ],
                "_request_timeout": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Dict",
                    "Callable"
                ]
            }
        },
        "RESTClientObject.HEAD": {
            "name": "HEAD",
            "location": 240,
            "return": [
                "int",
                "dict",
                "Dict[str, Any]",
                "Dict[str, Dict[str, str]]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Dict",
                    "str",
                    "Optional[str]",
                    "bytes",
                    "Dict[str,Any]",
                    "None"
                ],
                "headers": [
                    "Dict",
                    "None",
                    "str",
                    "Optional[str]",
                    "bytes",
                    "Dict[str,Any]"
                ],
                "query_params": [
                    "Dict",
                    "None",
                    "str",
                    "Optional[str]",
                    "bytes",
                    "Dict[str,Any]"
                ],
                "_preload_content": [
                    "bool",
                    "Dict",
                    "Optional[str]",
                    "str",
                    "bytes",
                    "Dict[str,Any]"
                ],
                "_request_timeout": [
                    "Dict",
                    "None",
                    "str",
                    "Optional[str]",
                    "bytes",
                    "Dict[str,Any]"
                ]
            }
        },
        "RESTClientObject.OPTIONS": {
            "name": "OPTIONS",
            "location": 248,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "int",
                    "str"
                ],
                "headers": [
                    "int",
                    "str",
                    "None"
                ],
                "query_params": [
                    "int",
                    "str",
                    "None"
                ],
                "post_params": [
                    "int",
                    "str",
                    "None"
                ],
                "body": [
                    "int",
                    "str",
                    "None"
                ],
                "_preload_content": [
                    "bool",
                    "int",
                    "str"
                ],
                "_request_timeout": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "RESTClientObject.DELETE": {
            "name": "DELETE",
            "location": 258,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Callable"
                ],
                "headers": [
                    "str",
                    "Callable",
                    "None"
                ],
                "query_params": [
                    "str",
                    "Callable",
                    "None"
                ],
                "body": [
                    "str",
                    "Callable",
                    "None"
                ],
                "_preload_content": [
                    "bool",
                    "str",
                    "Callable"
                ],
                "_request_timeout": [
                    "str",
                    "Callable",
                    "None"
                ]
            }
        },
        "RESTClientObject.POST": {
            "name": "POST",
            "location": 267,
            "return": [
                "set",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "int"
                ],
                "headers": [
                    "int",
                    "None"
                ],
                "query_params": [
                    "int",
                    "None"
                ],
                "post_params": [
                    "int",
                    "None"
                ],
                "body": [
                    "int",
                    "None"
                ],
                "_preload_content": [
                    "int",
                    "bool"
                ],
                "_request_timeout": [
                    "int",
                    "None"
                ]
            }
        },
        "RESTClientObject.PUT": {
            "name": "PUT",
            "location": 277,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Optional[Dict[str, Any]]",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Callable",
                    "float",
                    "MutableMapping"
                ],
                "headers": [
                    "Callable",
                    "float",
                    "None",
                    "MutableMapping"
                ],
                "query_params": [
                    "Callable",
                    "float",
                    "None",
                    "MutableMapping"
                ],
                "post_params": [
                    "Callable",
                    "float",
                    "None",
                    "MutableMapping"
                ],
                "body": [
                    "Callable",
                    "float",
                    "None",
                    "MutableMapping"
                ],
                "_preload_content": [
                    "bool",
                    "Callable",
                    "float",
                    "MutableMapping"
                ],
                "_request_timeout": [
                    "Callable",
                    "float",
                    "None",
                    "MutableMapping"
                ]
            }
        },
        "RESTClientObject.PATCH": {
            "name": "PATCH",
            "location": 287,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Union[bool, str]]",
                "bytes",
                "Dict[str, Set[str]]",
                "Dict[str, List[str]]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "int",
                    "str",
                    "float",
                    "Dict",
                    "MutableMapping",
                    "Optional[int]",
                    "None"
                ],
                "headers": [
                    "int",
                    "None",
                    "str",
                    "float",
                    "Dict",
                    "MutableMapping",
                    "Optional[int]"
                ],
                "query_params": [
                    "int",
                    "None",
                    "str",
                    "float",
                    "Dict",
                    "MutableMapping",
                    "Optional[int]"
                ],
                "post_params": [
                    "int",
                    "None",
                    "str",
                    "float",
                    "Dict",
                    "MutableMapping",
                    "Optional[int]"
                ],
                "body": [
                    "int",
                    "None",
                    "str",
                    "float",
                    "Dict",
                    "MutableMapping",
                    "Optional[int]"
                ],
                "_preload_content": [
                    "bool",
                    "int",
                    "str",
                    "float",
                    "Dict",
                    "MutableMapping",
                    "Optional[int]"
                ],
                "_request_timeout": [
                    "int",
                    "None",
                    "str",
                    "float",
                    "Dict",
                    "MutableMapping",
                    "Optional[int]"
                ]
            }
        },
        "ApiException.__init__": {
            "name": "__init__",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "List[dict]",
                    "None",
                    "int",
                    "List[str]",
                    "str",
                    "bool"
                ],
                "reason": [
                    "str",
                    "Callable",
                    "None"
                ],
                "http_resp": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "ApiException.__str__": {
            "name": "__str__",
            "location": 312,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "digikey-api-master/digikey/v3/batchproductdetails/__init__.py": {},
    "digikey-api-master/digikey/v3/batchproductdetails/api/batch_search_api.py": {
        "BatchSearchApi.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_client": [
                    "None"
                ]
            }
        },
        "BatchSearchApi.batch_product_details": {
            "name": "batch_product_details",
            "location": 36,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "authorization": [
                    "str",
                    "bytes",
                    "Dict[str,str]",
                    "Union[int,None]",
                    "int",
                    "List[Dict[str,Any]]",
                    "None",
                    "List[dict[str,Any]]"
                ],
                "x_digikey_client_id": [
                    "str",
                    "bytes",
                    "Dict[str,str]",
                    "Union[int,None]",
                    "int",
                    "List[Dict[str,Any]]",
                    "None",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "BatchSearchApi.batch_product_details_with_http_info": {
            "name": "batch_product_details_with_http_info",
            "location": 66,
            "return": [
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "authorization": [
                    "str",
                    "bool",
                    "float",
                    "Callable[[Any],bool]",
                    "Callable[Any,bool]"
                ],
                "x_digikey_client_id": [
                    "str",
                    "bool",
                    "float",
                    "Callable[[Any],bool]",
                    "Callable[Any,bool]"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/batchproductdetails/api/__init__.py": {},
    "digikey-api-master/digikey/v3/batchproductdetails/models/api_error_response.py": {
        "ApiErrorResponse.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error_response_version": [
                    "Optional[str]",
                    "None",
                    "Optional[Set[int]]",
                    "bool",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Set[int]",
                    "Dict[str,Any]"
                ],
                "status_code": [
                    "int",
                    "None",
                    "List[str]",
                    "str",
                    "Union[None,int]",
                    "Optional[str]"
                ],
                "error_message": [
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "str",
                    "bool",
                    "int"
                ],
                "error_details": [
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "str",
                    "bool",
                    "int"
                ],
                "request_id": [
                    "Optional[str]",
                    "None",
                    "str"
                ],
                "validation_errors": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Optional[Union[str,Any]]",
                    "Any"
                ]
            }
        },
        "ApiErrorResponse.error_response_version": {
            "name": "error_response_version",
            "location": 86,
            "return": [
                "dict[tuple[typing.Union[int,int]], str]",
                "str",
                "dict[str, typing.Any]",
                "typing.Pattern",
                "set[str]",
                "dict[str, list[typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "error_response_version": [
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "Union[None, Dict[str, str]]"
                ]
            }
        },
        "ApiErrorResponse.status_code": {
            "name": "status_code",
            "location": 107,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "status_code": [
                    "int"
                ]
            }
        },
        "ApiErrorResponse.error_message": {
            "name": "error_message",
            "location": 128,
            "return": [
                "str",
                "int",
                "bytes",
                "set[str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "error_message": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Optional[str]]",
                    "Exception",
                    "Callable[[str], bool]",
                    "List[str]"
                ]
            }
        },
        "ApiErrorResponse.error_details": {
            "name": "error_details",
            "location": 149,
            "return": [
                "str",
                "int",
                "bytes",
                "set[str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "error_details": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Optional[str]]",
                    "Exception",
                    "Callable[[str], bool]",
                    "List[str]"
                ]
            }
        },
        "ApiErrorResponse.request_id": {
            "name": "request_id",
            "location": 170,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "request_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "ApiErrorResponse.validation_errors": {
            "name": "validation_errors",
            "location": 191,
            "return": [
                "str",
                "int",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "validation_errors": [
                    "str",
                    "int"
                ]
            }
        },
        "ApiErrorResponse.to_dict": {
            "name": "to_dict",
            "location": 201,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiErrorResponse.to_str": {
            "name": "to_str",
            "location": 228,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiErrorResponse.__repr__": {
            "name": "__repr__",
            "location": 232,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiErrorResponse.__eq__": {
            "name": "__eq__",
            "location": 236,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ApiErrorResponse.__ne__": {
            "name": "__ne__",
            "location": 243,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/batchproductdetails/models/api_validation_error.py": {
        "ApiValidationError.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "bool",
                    "None",
                    "Optional[str]",
                    "Optional[Entity]",
                    "str",
                    "Optional[Exception]",
                    "Exception"
                ],
                "message": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "Optional[float]",
                    "float",
                    "Optional[Callable[[Any],bool]]",
                    "Callable[Any,bool]"
                ]
            }
        },
        "ApiValidationError.field": {
            "name": "field",
            "location": 66,
            "return": [
                "tuple[str]",
                "dict[str, tuple[typing.Union[str,str]]]",
                "typing.Mapping",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Container[str]",
                    "Dict[str, Any]",
                    "AbstractSet[str]",
                    "deque",
                    "str"
                ]
            }
        },
        "ApiValidationError.message": {
            "name": "message",
            "location": 87,
            "return": [
                "typing.TextIO",
                "str",
                "typing.Deque",
                "typing.Type"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ApiValidationError.to_dict": {
            "name": "to_dict",
            "location": 97,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiValidationError.to_str": {
            "name": "to_str",
            "location": 124,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiValidationError.__repr__": {
            "name": "__repr__",
            "location": 128,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiValidationError.__eq__": {
            "name": "__eq__",
            "location": 132,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Union[List[str],List[Any]]",
                    "List[str]",
                    "MutableMapping[str,Any]",
                    "MutableMapping"
                ]
            }
        },
        "ApiValidationError.__ne__": {
            "name": "__ne__",
            "location": 139,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/batchproductdetails/models/associated_product.py": {
        "AssociatedProduct.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "product_url": [
                    "Optional[float]",
                    "None",
                    "bool",
                    "Optional[bool]",
                    "str",
                    "float"
                ],
                "manufacturer_part_number": [
                    "Optional[bool]",
                    "None",
                    "Mapping",
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[Union[str,Any]]",
                    "Any"
                ],
                "minimum_order_quantity": [
                    "Optional[str]",
                    "None",
                    "Optional[float]",
                    "Sequence[str]",
                    "str",
                    "Optional[bool]",
                    "float",
                    "bool"
                ],
                "non_stock": [
                    "Optional[float]",
                    "None",
                    "Optional[str]",
                    "float",
                    "Optional[bool]",
                    "str",
                    "bool"
                ],
                "packaging": [
                    "Optional[str]",
                    "None",
                    "Optional[float]",
                    "str",
                    "Optional[bool]",
                    "float",
                    "bool"
                ],
                "quantity_available": [
                    "Optional[float]",
                    "None",
                    "Optional[str]",
                    "float",
                    "Optional[bool]",
                    "str",
                    "bool"
                ],
                "digi_key_part_number": [
                    "None",
                    "Optional[int]",
                    "int",
                    "str",
                    "Optional[str]",
                    "Dict[cirq.Qid,int]",
                    "Optional[Dict[cirq.Qid,int]]",
                    "bool",
                    "Optional[bool]",
                    "Union[int,str]"
                ],
                "product_description": [
                    "Optional[float]",
                    "None",
                    "Optional[bool]",
                    "float",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "unit_price": [
                    "Optional[float]",
                    "None",
                    "Optional[str]",
                    "float",
                    "Optional[bool]",
                    "str",
                    "bool"
                ],
                "manufacturer": [
                    "Optional[str]",
                    "None",
                    "Optional[float]",
                    "str",
                    "Optional[bool]",
                    "float",
                    "bool"
                ],
                "manufacturer_public_quantity": [
                    "Optional[str]",
                    "None",
                    "Optional[float]",
                    "Sequence[str]",
                    "str",
                    "Optional[bool]",
                    "float",
                    "bool"
                ],
                "quantity_on_order": [
                    "Optional[float]",
                    "None",
                    "Optional[str]",
                    "float",
                    "Optional[bool]",
                    "str",
                    "bool"
                ],
                "dk_plus_restriction": [
                    "Optional[str]",
                    "None",
                    "Optional[float]",
                    "Sequence[str]",
                    "str",
                    "Optional[bool]",
                    "float",
                    "bool"
                ],
                "supplier_direct_ship": [
                    "Optional[str]",
                    "None",
                    "Optional[float]",
                    "Sequence[str]",
                    "str",
                    "Optional[bool]",
                    "float",
                    "bool"
                ]
            }
        },
        "AssociatedProduct.product_url": {
            "name": "product_url",
            "location": 127,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "product_url": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "AssociatedProduct.manufacturer_part_number": {
            "name": "manufacturer_part_number",
            "location": 150,
            "return": [
                "int",
                "str",
                "list[str]",
                "set[str]",
                "typing.DefaultDict"
            ],
            "arguments": {
                "self": [],
                "manufacturer_part_number": [
                    "str",
                    "bool",
                    "dict",
                    "List[str]",
                    "tuple"
                ]
            }
        },
        "AssociatedProduct.minimum_order_quantity": {
            "name": "minimum_order_quantity",
            "location": 173,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "minimum_order_quantity": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "AssociatedProduct.non_stock": {
            "name": "non_stock",
            "location": 196,
            "return": [
                "typing.DefaultDict",
                "int",
                "dict[str, typing.Any]",
                "set[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "non_stock": [
                    "bool",
                    "str",
                    "float",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "AssociatedProduct.packaging": {
            "name": "packaging",
            "location": 218,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "packaging": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "AssociatedProduct.quantity_available": {
            "name": "quantity_available",
            "location": 240,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "quantity_available": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "AssociatedProduct.digi_key_part_number": {
            "name": "digi_key_part_number",
            "location": 263,
            "return": [
                "typing.Iterator",
                "bytes",
                "set[str]",
                "str",
                "dict[str, bytes]",
                "None",
                "typing.Type"
            ],
            "arguments": {
                "self": [],
                "digi_key_part_number": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "AssociatedProduct.product_description": {
            "name": "product_description",
            "location": 286,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "product_description": [
                    "int",
                    "str"
                ]
            }
        },
        "AssociatedProduct.unit_price": {
            "name": "unit_price",
            "location": 309,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "unit_price": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "AssociatedProduct.manufacturer": {
            "name": "manufacturer",
            "location": 331,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "manufacturer": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "AssociatedProduct.manufacturer_public_quantity": {
            "name": "manufacturer_public_quantity",
            "location": 353,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "manufacturer_public_quantity": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "AssociatedProduct.quantity_on_order": {
            "name": "quantity_on_order",
            "location": 376,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "quantity_on_order": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "AssociatedProduct.dk_plus_restriction": {
            "name": "dk_plus_restriction",
            "location": 399,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "dk_plus_restriction": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "AssociatedProduct.supplier_direct_ship": {
            "name": "supplier_direct_ship",
            "location": 422,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "supplier_direct_ship": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "AssociatedProduct.to_dict": {
            "name": "to_dict",
            "location": 433,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssociatedProduct.to_str": {
            "name": "to_str",
            "location": 460,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssociatedProduct.__repr__": {
            "name": "__repr__",
            "location": 464,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssociatedProduct.__eq__": {
            "name": "__eq__",
            "location": 468,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AbstractSet",
                    "Union[int,float]",
                    "int",
                    "Tuple[int,int]",
                    "float",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "AssociatedProduct.__ne__": {
            "name": "__ne__",
            "location": 475,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/batchproductdetails/models/basic_product.py": {
        "BasicProduct.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manufacturer_part_number": [
                    "None",
                    "Optional[str]",
                    "bool",
                    "str",
                    "Optional[float]",
                    "float",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "minimum_order_quantity": [
                    "None",
                    "Optional[bool]",
                    "bool",
                    "float",
                    "Optional[str]",
                    "str",
                    "Optional[float]",
                    "List[str]",
                    "Optional[List[str]]"
                ],
                "non_stock": [
                    "None",
                    "Optional[bool]",
                    "bool",
                    "str",
                    "float",
                    "Optional[str]",
                    "Optional[float]"
                ],
                "packaging": [
                    "None",
                    "Optional[str]",
                    "str",
                    "float",
                    "Optional[bool]",
                    "bool",
                    "Optional[float]"
                ],
                "quantity_available": [
                    "None",
                    "Optional[bool]",
                    "bool",
                    "str",
                    "float",
                    "Optional[str]",
                    "Optional[float]"
                ],
                "digi_key_part_number": [
                    "Optional[str]",
                    "None",
                    "Dict",
                    "str",
                    "Optional[Set[int]]",
                    "Set[int]"
                ],
                "product_description": [
                    "Optional[bool]",
                    "None",
                    "Optional[List[str]]",
                    "bool",
                    "str",
                    "Optional[List[custom_index]]",
                    "List[str]",
                    "List[custom_index]",
                    "Optional[str]"
                ],
                "unit_price": [
                    "None",
                    "Optional[bool]",
                    "bool",
                    "str",
                    "float",
                    "Optional[str]",
                    "Optional[float]"
                ],
                "manufacturer": [
                    "None",
                    "Optional[str]",
                    "str",
                    "float",
                    "Optional[bool]",
                    "bool",
                    "Optional[float]"
                ],
                "manufacturer_public_quantity": [
                    "None",
                    "Optional[bool]",
                    "bool",
                    "float",
                    "Optional[str]",
                    "str",
                    "Optional[float]",
                    "List[str]",
                    "Optional[List[str]]"
                ],
                "quantity_on_order": [
                    "None",
                    "Optional[bool]",
                    "bool",
                    "str",
                    "float",
                    "Optional[str]",
                    "Optional[float]"
                ],
                "dk_plus_restriction": [
                    "None",
                    "Optional[bool]",
                    "bool",
                    "float",
                    "Optional[str]",
                    "str",
                    "Optional[float]",
                    "List[str]",
                    "Optional[List[str]]"
                ],
                "supplier_direct_ship": [
                    "None",
                    "Optional[bool]",
                    "bool",
                    "float",
                    "Optional[str]",
                    "str",
                    "Optional[float]",
                    "List[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "BasicProduct.manufacturer_part_number": {
            "name": "manufacturer_part_number",
            "location": 122,
            "return": [
                "int",
                "str",
                "list[str]",
                "set[str]",
                "typing.DefaultDict"
            ],
            "arguments": {
                "self": [],
                "manufacturer_part_number": [
                    "str",
                    "bool",
                    "dict",
                    "List[str]",
                    "tuple"
                ]
            }
        },
        "BasicProduct.minimum_order_quantity": {
            "name": "minimum_order_quantity",
            "location": 145,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "minimum_order_quantity": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BasicProduct.non_stock": {
            "name": "non_stock",
            "location": 168,
            "return": [
                "typing.DefaultDict",
                "int",
                "dict[str, typing.Any]",
                "set[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "non_stock": [
                    "bool",
                    "str",
                    "float",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "BasicProduct.packaging": {
            "name": "packaging",
            "location": 190,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "packaging": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BasicProduct.quantity_available": {
            "name": "quantity_available",
            "location": 212,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "quantity_available": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BasicProduct.digi_key_part_number": {
            "name": "digi_key_part_number",
            "location": 235,
            "return": [
                "typing.Iterator",
                "bytes",
                "set[str]",
                "str",
                "dict[str, bytes]",
                "None",
                "typing.Type"
            ],
            "arguments": {
                "self": [],
                "digi_key_part_number": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "BasicProduct.product_description": {
            "name": "product_description",
            "location": 258,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "product_description": [
                    "int",
                    "str"
                ]
            }
        },
        "BasicProduct.unit_price": {
            "name": "unit_price",
            "location": 281,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "unit_price": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BasicProduct.manufacturer": {
            "name": "manufacturer",
            "location": 303,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "manufacturer": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BasicProduct.manufacturer_public_quantity": {
            "name": "manufacturer_public_quantity",
            "location": 325,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "manufacturer_public_quantity": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BasicProduct.quantity_on_order": {
            "name": "quantity_on_order",
            "location": 348,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "quantity_on_order": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BasicProduct.dk_plus_restriction": {
            "name": "dk_plus_restriction",
            "location": 371,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "dk_plus_restriction": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BasicProduct.supplier_direct_ship": {
            "name": "supplier_direct_ship",
            "location": 394,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "supplier_direct_ship": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BasicProduct.to_dict": {
            "name": "to_dict",
            "location": 405,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicProduct.to_str": {
            "name": "to_str",
            "location": 432,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicProduct.__repr__": {
            "name": "__repr__",
            "location": 436,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicProduct.__eq__": {
            "name": "__eq__",
            "location": 440,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AbstractSet",
                    "Union[int,float]",
                    "int",
                    "Tuple[int,int]",
                    "float",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "BasicProduct.__ne__": {
            "name": "__ne__",
            "location": 447,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/batchproductdetails/models/batch_product_details_request.py": {
        "BatchProductDetailsRequest.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "products": [
                    "int",
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "BatchProductDetailsRequest.products": {
            "name": "products",
            "location": 61,
            "return": [
                "str",
                "list[str]",
                "dict[str, str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "products": [
                    "Optional[int]",
                    "Optional[str]",
                    "Union[str, dict]",
                    "dict"
                ]
            }
        },
        "BatchProductDetailsRequest.to_dict": {
            "name": "to_dict",
            "location": 74,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatchProductDetailsRequest.to_str": {
            "name": "to_str",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatchProductDetailsRequest.__repr__": {
            "name": "__repr__",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatchProductDetailsRequest.__eq__": {
            "name": "__eq__",
            "location": 109,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict",
                    "Dict[str,Any]",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "BatchProductDetailsRequest.__ne__": {
            "name": "__ne__",
            "location": 116,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/batchproductdetails/models/batch_product_details_response.py": {
        "BatchProductDetailsResponse.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "product_details": [
                    "Optional[Tuple[str,Any]]",
                    "None",
                    "Optional[str]",
                    "Tuple[Union[str,Any]]",
                    "Optional[int]",
                    "str",
                    "Optional[List[Any]]",
                    "int",
                    "List[Any]"
                ],
                "errors": [
                    "Optional[str]",
                    "None",
                    "Optional[List[Any]]",
                    "str",
                    "Optional[Union[str,Any]]",
                    "List[Any]",
                    "Optional[List[str]]",
                    "Any",
                    "Optional[Dict[str,Any]]",
                    "List[str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "BatchProductDetailsResponse.product_details": {
            "name": "product_details",
            "location": 67,
            "return": [
                "str",
                "dict[str, str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "product_details": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "BatchProductDetailsResponse.errors": {
            "name": "errors",
            "location": 90,
            "return": [
                "typing.Pattern",
                "int",
                "bytes",
                "dict[bytes, str]",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "errors": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Optional[str]]",
                    "Exception",
                    "Callable[[str], bool]",
                    "List[str]"
                ]
            }
        },
        "BatchProductDetailsResponse.to_dict": {
            "name": "to_dict",
            "location": 101,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatchProductDetailsResponse.to_str": {
            "name": "to_str",
            "location": 128,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatchProductDetailsResponse.__repr__": {
            "name": "__repr__",
            "location": 132,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatchProductDetailsResponse.__eq__": {
            "name": "__eq__",
            "location": 136,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict",
                    "str",
                    "Callable",
                    "Dict[str,int]"
                ]
            }
        },
        "BatchProductDetailsResponse.__ne__": {
            "name": "__ne__",
            "location": 143,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/batchproductdetails/models/iso_search_locale.py": {
        "IsoSearchLocale.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "site": [
                    "bool",
                    "None",
                    "float",
                    "Optional[int]",
                    "str",
                    "Optional[Type[Any]]",
                    "Type",
                    "Optional[Tuple[float,float]]",
                    "Tuple[Union[float,float]]"
                ],
                "language": [
                    "bool",
                    "None",
                    "float",
                    "Optional[int]",
                    "str",
                    "Optional[Type[Any]]",
                    "Type",
                    "Optional[Tuple[float,float]]",
                    "Tuple[Union[float,float]]"
                ],
                "currency": [
                    "bool",
                    "None",
                    "float",
                    "Optional[int]",
                    "str",
                    "Optional[Type[Any]]",
                    "Type",
                    "Optional[Tuple[float,float]]",
                    "Tuple[Union[float,float]]"
                ],
                "ship_to_country": [
                    "Optional[int]",
                    "None",
                    "str",
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "IsoSearchLocale.site": {
            "name": "site",
            "location": 77,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "site": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "IsoSearchLocale.language": {
            "name": "language",
            "location": 100,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "language": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "IsoSearchLocale.currency": {
            "name": "currency",
            "location": 123,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "currency": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "IsoSearchLocale.ship_to_country": {
            "name": "ship_to_country",
            "location": 146,
            "return": [
                "float",
                "list[str]",
                "int",
                "str",
                "set[str]",
                "typing.DefaultDict"
            ],
            "arguments": {
                "self": [],
                "ship_to_country": [
                    "int",
                    "str",
                    "List[Dict]"
                ]
            }
        },
        "IsoSearchLocale.to_dict": {
            "name": "to_dict",
            "location": 157,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsoSearchLocale.to_str": {
            "name": "to_str",
            "location": 184,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsoSearchLocale.__repr__": {
            "name": "__repr__",
            "location": 188,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsoSearchLocale.__eq__": {
            "name": "__eq__",
            "location": 192,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "Union[int,BitVec]",
                    "bool"
                ]
            }
        },
        "IsoSearchLocale.__ne__": {
            "name": "__ne__",
            "location": 199,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/batchproductdetails/models/kit_part.py": {
        "KitPart.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "associated_product": [
                    "Optional[str]",
                    "None",
                    "str",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "kit_part_quantity": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Optional[Dict[str,int]]",
                    "Dict[str,int]"
                ]
            }
        },
        "KitPart.associated_product": {
            "name": "associated_product",
            "location": 66,
            "return": [
                "list[]",
                "dict[, ]",
                "list[str]",
                "dict[str, dict[str, typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "associated_product": [
                    "str",
                    "int"
                ]
            }
        },
        "KitPart.kit_part_quantity": {
            "name": "kit_part_quantity",
            "location": 88,
            "return": [
                "int",
                "str",
                "list[str]",
                "set[str]",
                "typing.DefaultDict"
            ],
            "arguments": {
                "self": [],
                "kit_part_quantity": [
                    "str",
                    "bool",
                    "dict",
                    "List[str]",
                    "tuple"
                ]
            }
        },
        "KitPart.to_dict": {
            "name": "to_dict",
            "location": 99,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KitPart.to_str": {
            "name": "to_str",
            "location": 126,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KitPart.__repr__": {
            "name": "__repr__",
            "location": 130,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KitPart.__eq__": {
            "name": "__eq__",
            "location": 134,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int,BitVec]",
                    "int"
                ]
            }
        },
        "KitPart.__ne__": {
            "name": "__ne__",
            "location": 141,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/batchproductdetails/models/limited_taxonomy.py": {
        "LimitedTaxonomy.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "children": [
                    "None",
                    "str",
                    "Optional[str]",
                    "bytes",
                    "int",
                    "Optional[int]"
                ],
                "product_count": [
                    "None",
                    "Optional[int]",
                    "bytes",
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[SupportsFloat]",
                    "bool"
                ],
                "new_product_count": [
                    "None",
                    "Optional[int]",
                    "int",
                    "bytes",
                    "bool",
                    "Mapping",
                    "Optional[Mapping[str,Any]]",
                    "Optional[SupportsFloat]"
                ],
                "parameter_id": [
                    "Optional[List[str]]",
                    "None",
                    "int",
                    "Optional[int]",
                    "List[str]"
                ],
                "value_id": [
                    "Optional[List[str]]",
                    "None",
                    "int",
                    "Optional[int]",
                    "List[str]"
                ],
                "parameter": [
                    "None",
                    "int",
                    "Optional[int]",
                    "bool"
                ],
                "value": [
                    "None",
                    "Optional[int]",
                    "int",
                    "bool",
                    "str",
                    "bytes",
                    "Optional[bool]",
                    "Optional[str]",
                    "Optional[bytes]"
                ]
            }
        },
        "LimitedTaxonomy.children": {
            "name": "children",
            "location": 92,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "children": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "LimitedTaxonomy.product_count": {
            "name": "product_count",
            "location": 115,
            "return": [
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal]]",
                "int",
                "typing.Iterator",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "product_count": [
                    "int",
                    "str",
                    "Tuple[int, int, str]"
                ]
            }
        },
        "LimitedTaxonomy.new_product_count": {
            "name": "new_product_count",
            "location": 138,
            "return": [
                "int",
                "str",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "new_product_count": [
                    "str",
                    "Sequence[Tuple[str, int]]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "LimitedTaxonomy.parameter_id": {
            "name": "parameter_id",
            "location": 161,
            "return": [
                "int",
                "str",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "parameter_id": [
                    "str",
                    "int"
                ]
            }
        },
        "LimitedTaxonomy.value_id": {
            "name": "value_id",
            "location": 184,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value_id": [
                    "str",
                    "int"
                ]
            }
        },
        "LimitedTaxonomy.parameter": {
            "name": "parameter",
            "location": 207,
            "return": [
                "list[]",
                "list[str]",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "parameter": [
                    "dict",
                    "float",
                    "bool"
                ]
            }
        },
        "LimitedTaxonomy.value": {
            "name": "value",
            "location": 230,
            "return": [
                "dict[, ]",
                "str",
                "float",
                "int",
                "list[int]",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "list"
                ]
            }
        },
        "LimitedTaxonomy.to_dict": {
            "name": "to_dict",
            "location": 241,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LimitedTaxonomy.to_str": {
            "name": "to_str",
            "location": 268,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LimitedTaxonomy.__repr__": {
            "name": "__repr__",
            "location": 272,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LimitedTaxonomy.__eq__": {
            "name": "__eq__",
            "location": 276,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int,BitVec]",
                    "int"
                ]
            }
        },
        "LimitedTaxonomy.__ne__": {
            "name": "__ne__",
            "location": 283,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/batchproductdetails/models/media_links.py": {
        "MediaLinks.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "media_type": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[int]",
                    "int"
                ],
                "title": [
                    "Optional[str]",
                    "None",
                    "bytes",
                    "int",
                    "Optional[int]",
                    "str",
                    "Optional[Any]",
                    "Any"
                ],
                "small_photo": [
                    "None",
                    "Optional[str]",
                    "int",
                    "str",
                    "Optional[int]",
                    "Optional[Any]",
                    "Any",
                    "bool"
                ],
                "thumbnail": [
                    "Optional[str]",
                    "None",
                    "bytes",
                    "int",
                    "Optional[int]",
                    "str",
                    "Optional[Any]",
                    "Any"
                ],
                "url": [
                    "Optional[str]",
                    "None",
                    "bytes",
                    "Sequence[str]",
                    "str",
                    "Callable[[int],None]",
                    "Callable[int,None]"
                ]
            }
        },
        "MediaLinks.media_type": {
            "name": "media_type",
            "location": 82,
            "return": [
                "str",
                "dict[str, dict[str, typing.Any]]",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "media_type": [
                    "int",
                    "str"
                ]
            }
        },
        "MediaLinks.title": {
            "name": "title",
            "location": 105,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "MediaLinks.small_photo": {
            "name": "small_photo",
            "location": 128,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "small_photo": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "MediaLinks.thumbnail": {
            "name": "thumbnail",
            "location": 151,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "thumbnail": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "MediaLinks.url": {
            "name": "url",
            "location": 174,
            "return": [
                "str",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "float",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "MediaLinks.to_dict": {
            "name": "to_dict",
            "location": 185,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MediaLinks.to_str": {
            "name": "to_str",
            "location": 212,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MediaLinks.__repr__": {
            "name": "__repr__",
            "location": 216,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MediaLinks.__eq__": {
            "name": "__eq__",
            "location": 220,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AbstractSet",
                    "Dict[str,str]",
                    "bool"
                ]
            }
        },
        "MediaLinks.__ne__": {
            "name": "__ne__",
            "location": 227,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/batchproductdetails/models/pid_vid.py": {
        "PidVid.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parameter_id": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "value_id": [
                    "Optional[str]",
                    "None",
                    "int",
                    "str",
                    "Optional[Any]",
                    "Any"
                ],
                "parameter": [
                    "None",
                    "Optional[int]",
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[float]",
                    "float"
                ],
                "value": [
                    "List[Type]",
                    "None",
                    "str",
                    "float",
                    "Dict",
                    "Optional[Node]",
                    "Optional[Tuple[Any,Any]]",
                    "Tuple[Union[Any,Any]]"
                ]
            }
        },
        "PidVid.parameter_id": {
            "name": "parameter_id",
            "location": 77,
            "return": [
                "int",
                "str",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "parameter_id": [
                    "str",
                    "int"
                ]
            }
        },
        "PidVid.value_id": {
            "name": "value_id",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value_id": [
                    "str",
                    "int"
                ]
            }
        },
        "PidVid.parameter": {
            "name": "parameter",
            "location": 123,
            "return": [
                "list[]",
                "list[str]",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "parameter": [
                    "dict",
                    "float",
                    "bool"
                ]
            }
        },
        "PidVid.value": {
            "name": "value",
            "location": 146,
            "return": [
                "dict[, ]",
                "str",
                "float",
                "int",
                "list[int]",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "list"
                ]
            }
        },
        "PidVid.to_dict": {
            "name": "to_dict",
            "location": 157,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PidVid.to_str": {
            "name": "to_str",
            "location": 184,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PidVid.__repr__": {
            "name": "__repr__",
            "location": 188,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PidVid.__eq__": {
            "name": "__eq__",
            "location": 192,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int,BitVec]",
                    "int"
                ]
            }
        },
        "PidVid.__ne__": {
            "name": "__ne__",
            "location": 199,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/batchproductdetails/models/price_break.py": {
        "PriceBreak.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "break_quantity": [
                    "Optional[int]",
                    "None",
                    "Optional[float]",
                    "int",
                    "Optional[str]",
                    "float",
                    "Optional[Callable]",
                    "str",
                    "Optional[Hashable]",
                    "Callable",
                    "Hashable"
                ],
                "unit_price": [
                    "Optional[int]",
                    "None",
                    "Optional[float]",
                    "int",
                    "Optional[str]",
                    "float",
                    "Optional[Callable]",
                    "str",
                    "Optional[Hashable]",
                    "Callable",
                    "Hashable"
                ],
                "total_price": [
                    "Optional[int]",
                    "None",
                    "Optional[float]",
                    "int",
                    "Optional[str]",
                    "float",
                    "Optional[Callable]",
                    "str",
                    "Optional[Hashable]",
                    "Callable",
                    "Hashable"
                ]
            }
        },
        "PriceBreak.break_quantity": {
            "name": "break_quantity",
            "location": 72,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "break_quantity": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "PriceBreak.unit_price": {
            "name": "unit_price",
            "location": 95,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "unit_price": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "PriceBreak.total_price": {
            "name": "total_price",
            "location": 118,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "total_price": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "PriceBreak.to_dict": {
            "name": "to_dict",
            "location": 129,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PriceBreak.to_str": {
            "name": "to_str",
            "location": 156,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PriceBreak.__repr__": {
            "name": "__repr__",
            "location": 160,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PriceBreak.__eq__": {
            "name": "__eq__",
            "location": 164,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int,BitVec]",
                    "int"
                ]
            }
        },
        "PriceBreak.__ne__": {
            "name": "__ne__",
            "location": 171,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/batchproductdetails/models/product_details.py": {
        "ProductDetails.__init__": {
            "name": "__init__",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "my_pricing": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "obsolete": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "media_links": [
                    "int",
                    "None",
                    "Optional[str]",
                    "List[str]",
                    "Optional[Dict]",
                    "str",
                    "List[List]",
                    "Dict",
                    "List[list]"
                ],
                "standard_package": [
                    "int",
                    "None",
                    "List[Optional[float]]",
                    "Optional[str]",
                    "Optional[Union[Any,Any]]",
                    "str",
                    "Any"
                ],
                "limited_taxonomy": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "kits": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "kit_contents": [
                    "bool",
                    "None",
                    "str",
                    "bytes",
                    "Optional[int]",
                    "List[int]",
                    "int",
                    "Optional[str]"
                ],
                "mating_products": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[float]",
                    "float",
                    "Optional[Dict]",
                    "Dict",
                    "List[List]",
                    "List[list]"
                ],
                "search_locale_used": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "associated_products": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[float]",
                    "float",
                    "Optional[Dict]",
                    "Dict",
                    "List[List]",
                    "List[list]"
                ],
                "for_use_with_products": [
                    "Optional[float]",
                    "None",
                    "bool",
                    "float",
                    "int"
                ],
                "rohs_subs": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "suggested_subs": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "additional_value_fee": [
                    "None",
                    "Optional[str]",
                    "int",
                    "str",
                    "List[int]",
                    "Optional[int]",
                    "float",
                    "Optional[bool]",
                    "Optional[float]",
                    "bool"
                ],
                "reach_effective_date": [
                    "str",
                    "None",
                    "Sequence[str]",
                    "int",
                    "bool"
                ],
                "standard_pricing": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "ro_hs_status": [
                    "None",
                    "Optional[str]",
                    "int",
                    "str",
                    "List[Optional[float]]",
                    "bool"
                ],
                "lead_status": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Optional[float]",
                    "float",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Optional[bool]",
                    "bool",
                    "Optional[Dict]",
                    "Dict",
                    "List[List]",
                    "List[list]"
                ],
                "parameters": [
                    "bool",
                    "None",
                    "List[Optional[float]]",
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "product_url": [
                    "None",
                    "Optional[float]",
                    "Tuple",
                    "float",
                    "str",
                    "Optional[Union[Cite,str]]",
                    "Optional[str]"
                ],
                "primary_datasheet": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "primary_photo": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "primary_video": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "series": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "manufacturer_lead_weeks": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "manufacturer_page_url": [
                    "str",
                    "None",
                    "int",
                    "List[str]",
                    "Dict[str,Any]",
                    "bool"
                ],
                "product_status": [
                    "None",
                    "Optional[int]",
                    "int",
                    "str",
                    "Optional[Union[str,Any]]",
                    "bytes",
                    "bool",
                    "Any",
                    "Optional[float]",
                    "float",
                    "Optional[bool]"
                ],
                "date_last_buy_chance": [
                    "int",
                    "None",
                    "float",
                    "bool",
                    "str"
                ],
                "alternate_packaging": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "detailed_description": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "reach_status": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Optional[float]",
                    "float",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Optional[bool]",
                    "bool",
                    "Optional[Dict]",
                    "Dict",
                    "List[List]",
                    "List[list]"
                ],
                "export_control_class_number": [
                    "str",
                    "None",
                    "int",
                    "Optional[Iterable[str]]",
                    "Iterable[str]",
                    "Dict[str,object]",
                    "Optional[int]"
                ],
                "htsus_code": [
                    "Optional[int]",
                    "None",
                    "int"
                ],
                "tariff_description": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "moisture_sensitivity_level": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "manufacturer_part_number": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "int",
                    "bool"
                ],
                "minimum_order_quantity": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "non_stock": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "packaging": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "quantity_available": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "digi_key_part_number": [
                    "bytes",
                    "None",
                    "str",
                    "Optional[Dict[cirq.Qid,int]]",
                    "bool",
                    "Dict[cirq.Qid,int]"
                ],
                "product_description": [
                    "Optional[int]",
                    "None",
                    "Tuple",
                    "int",
                    "Optional[List[str]]",
                    "Optional[float]",
                    "List[str]",
                    "float"
                ],
                "unit_price": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "manufacturer": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "manufacturer_public_quantity": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "quantity_on_order": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "dk_plus_restriction": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "supplier_direct_ship": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "ProductDetails.my_pricing": {
            "name": "my_pricing",
            "location": 297,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "my_pricing": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.obsolete": {
            "name": "obsolete",
            "location": 320,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "obsolete": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.media_links": {
            "name": "media_links",
            "location": 343,
            "return": [
                "str",
                "dict[str, str]",
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "media_links": [
                    "str",
                    "int"
                ]
            }
        },
        "ProductDetails.standard_package": {
            "name": "standard_package",
            "location": 366,
            "return": [
                "int",
                "typing.Type",
                "dict[, ]",
                "str",
                "set[]"
            ],
            "arguments": {
                "self": [],
                "standard_package": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "ProductDetails.limited_taxonomy": {
            "name": "limited_taxonomy",
            "location": 388,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "limited_taxonomy": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.kits": {
            "name": "kits",
            "location": 410,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "kits": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.kit_contents": {
            "name": "kit_contents",
            "location": 433,
            "return": [
                "str",
                "int",
                "tuple[typing.Union[int,int,int,int]]",
                "list[]",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "kit_contents": [
                    "str",
                    "bytes"
                ]
            }
        },
        "ProductDetails.mating_products": {
            "name": "mating_products",
            "location": 456,
            "return": [
                "list[]",
                "dict[, ]",
                "list[str]",
                "dict[str, dict[str, typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "mating_products": [
                    "str",
                    "int"
                ]
            }
        },
        "ProductDetails.search_locale_used": {
            "name": "search_locale_used",
            "location": 478,
            "return": [
                "int",
                "str",
                "set[int]"
            ],
            "arguments": {
                "self": [],
                "search_locale_used": [
                    "int",
                    "str",
                    "List['cirq.Circuit']"
                ]
            }
        },
        "ProductDetails.associated_products": {
            "name": "associated_products",
            "location": 500,
            "return": [
                "list[]",
                "dict[, ]",
                "list[str]",
                "dict[str, dict[str, typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "associated_products": [
                    "str",
                    "int"
                ]
            }
        },
        "ProductDetails.for_use_with_products": {
            "name": "for_use_with_products",
            "location": 523,
            "return": [
                "list[]",
                "dict[str, list[typing.Any]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "for_use_with_products": [
                    "str",
                    "Optional[int]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "ProductDetails.rohs_subs": {
            "name": "rohs_subs",
            "location": 546,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "rohs_subs": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.suggested_subs": {
            "name": "suggested_subs",
            "location": 569,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "suggested_subs": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.additional_value_fee": {
            "name": "additional_value_fee",
            "location": 592,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "additional_value_fee": [
                    "str",
                    "Union[T, Sequence[T]]",
                    "dict"
                ]
            }
        },
        "ProductDetails.reach_effective_date": {
            "name": "reach_effective_date",
            "location": 615,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "reach_effective_date": [
                    "Sequence[str]",
                    "int",
                    "List[int]"
                ]
            }
        },
        "ProductDetails.standard_pricing": {
            "name": "standard_pricing",
            "location": 638,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "standard_pricing": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.ro_hs_status": {
            "name": "ro_hs_status",
            "location": 661,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ro_hs_status": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "ProductDetails.lead_status": {
            "name": "lead_status",
            "location": 684,
            "return": [
                "str",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "lead_status": [
                    "int",
                    "Union['KspNativeControl', int]",
                    "str"
                ]
            }
        },
        "ProductDetails.parameters": {
            "name": "parameters",
            "location": 707,
            "return": [
                "list[]",
                "list[str]",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "parameters": [
                    "dict",
                    "float",
                    "bool"
                ]
            }
        },
        "ProductDetails.product_url": {
            "name": "product_url",
            "location": 730,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "product_url": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "ProductDetails.primary_datasheet": {
            "name": "primary_datasheet",
            "location": 753,
            "return": [
                "int",
                "float",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "primary_datasheet": [
                    "float"
                ]
            }
        },
        "ProductDetails.primary_photo": {
            "name": "primary_photo",
            "location": 776,
            "return": [
                "int",
                "float",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "primary_photo": [
                    "float"
                ]
            }
        },
        "ProductDetails.primary_video": {
            "name": "primary_video",
            "location": 799,
            "return": [
                "int",
                "float",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "primary_video": [
                    "float"
                ]
            }
        },
        "ProductDetails.series": {
            "name": "series",
            "location": 821,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "series": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.manufacturer_lead_weeks": {
            "name": "manufacturer_lead_weeks",
            "location": 843,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "manufacturer_lead_weeks": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.manufacturer_page_url": {
            "name": "manufacturer_page_url",
            "location": 866,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "typing.Callable[[], typing.Any]"
            ],
            "arguments": {
                "self": [],
                "manufacturer_page_url": [
                    "str"
                ]
            }
        },
        "ProductDetails.product_status": {
            "name": "product_status",
            "location": 889,
            "return": [
                "int",
                "set[]",
                "str"
            ],
            "arguments": {
                "self": [],
                "product_status": [
                    "int",
                    "float"
                ]
            }
        },
        "ProductDetails.date_last_buy_chance": {
            "name": "date_last_buy_chance",
            "location": 912,
            "return": [
                "tuple[typing.Union[str,str,str,str,str,str,str,str,str]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "date_last_buy_chance": [
                    "bool",
                    "Optional[List[\"CustomLineItemDraft\"]]",
                    "str",
                    "Optional[List[Any]]"
                ]
            }
        },
        "ProductDetails.alternate_packaging": {
            "name": "alternate_packaging",
            "location": 935,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "alternate_packaging": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.detailed_description": {
            "name": "detailed_description",
            "location": 958,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "detailed_description": [
                    "str"
                ]
            }
        },
        "ProductDetails.reach_status": {
            "name": "reach_status",
            "location": 981,
            "return": [
                "str",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "reach_status": [
                    "int",
                    "Union['KspNativeControl', int]",
                    "str"
                ]
            }
        },
        "ProductDetails.export_control_class_number": {
            "name": "export_control_class_number",
            "location": 1004,
            "return": [
                "float",
                "int",
                "str",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "export_control_class_number": [
                    "Type",
                    "str"
                ]
            }
        },
        "ProductDetails.htsus_code": {
            "name": "htsus_code",
            "location": 1027,
            "return": [
                "str",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "htsus_code": [
                    "str",
                    "int",
                    "List[int]"
                ]
            }
        },
        "ProductDetails.tariff_description": {
            "name": "tariff_description",
            "location": 1050,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "tariff_description": [
                    "str"
                ]
            }
        },
        "ProductDetails.moisture_sensitivity_level": {
            "name": "moisture_sensitivity_level",
            "location": 1073,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "moisture_sensitivity_level": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.manufacturer_part_number": {
            "name": "manufacturer_part_number",
            "location": 1096,
            "return": [
                "int",
                "str",
                "list[str]",
                "set[str]",
                "typing.DefaultDict"
            ],
            "arguments": {
                "self": [],
                "manufacturer_part_number": [
                    "str",
                    "bool",
                    "dict",
                    "List[str]",
                    "tuple"
                ]
            }
        },
        "ProductDetails.minimum_order_quantity": {
            "name": "minimum_order_quantity",
            "location": 1119,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "minimum_order_quantity": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.non_stock": {
            "name": "non_stock",
            "location": 1142,
            "return": [
                "typing.DefaultDict",
                "int",
                "dict[str, typing.Any]",
                "set[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "non_stock": [
                    "bool",
                    "str",
                    "float",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "ProductDetails.packaging": {
            "name": "packaging",
            "location": 1164,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "packaging": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.quantity_available": {
            "name": "quantity_available",
            "location": 1186,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "quantity_available": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.digi_key_part_number": {
            "name": "digi_key_part_number",
            "location": 1209,
            "return": [
                "typing.Iterator",
                "bytes",
                "set[str]",
                "str",
                "dict[str, bytes]",
                "None",
                "typing.Type"
            ],
            "arguments": {
                "self": [],
                "digi_key_part_number": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "ProductDetails.product_description": {
            "name": "product_description",
            "location": 1232,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "product_description": [
                    "int",
                    "str"
                ]
            }
        },
        "ProductDetails.unit_price": {
            "name": "unit_price",
            "location": 1255,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "unit_price": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.manufacturer": {
            "name": "manufacturer",
            "location": 1277,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "manufacturer": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.manufacturer_public_quantity": {
            "name": "manufacturer_public_quantity",
            "location": 1299,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "manufacturer_public_quantity": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.quantity_on_order": {
            "name": "quantity_on_order",
            "location": 1322,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "quantity_on_order": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.dk_plus_restriction": {
            "name": "dk_plus_restriction",
            "location": 1345,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "dk_plus_restriction": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.supplier_direct_ship": {
            "name": "supplier_direct_ship",
            "location": 1368,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "supplier_direct_ship": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.to_dict": {
            "name": "to_dict",
            "location": 1379,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProductDetails.to_str": {
            "name": "to_str",
            "location": 1406,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProductDetails.__repr__": {
            "name": "__repr__",
            "location": 1410,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProductDetails.__eq__": {
            "name": "__eq__",
            "location": 1414,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ProductDetails.__ne__": {
            "name": "__ne__",
            "location": 1421,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/batchproductdetails/models/__init__.py": {},
    "digikey-api-master/digikey/v3/ordersupport/api_client.py": {
        "ApiClient.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "configuration": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "header_name": [
                    "str",
                    "None",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "List[str]"
                ],
                "header_value": [
                    "str",
                    "None",
                    "bytes",
                    "Optional[str]"
                ],
                "cookie": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "ApiClient.__del__": {
            "name": "__del__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiClient.pool": {
            "name": "pool",
            "location": 85,
            "return": [
                "int",
                "Callable",
                "str",
                "Final",
                "Dict",
                "Set[str]",
                "OrderedDict",
                "ThreadPool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiClient.user_agent": {
            "name": "user_agent",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[str]",
                    "T",
                    "float",
                    "int"
                ]
            }
        },
        "ApiClient.set_default_header": {
            "name": "set_default_header",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "header_name": [
                    "str"
                ],
                "header_value": [
                    "str"
                ]
            }
        },
        "ApiClient.__call_api": {
            "name": "__call_api",
            "location": 102,
            "return": [
                "Optional[Exception]",
                "None",
                "Union[object,type]",
                "Tuple[None]"
            ],
            "arguments": {
                "self": [],
                "resource_path": [
                    "bool",
                    "str"
                ],
                "method": [
                    "str",
                    "int",
                    "bool"
                ],
                "path_params": [
                    "bool",
                    "None",
                    "str",
                    "List",
                    "Callable[[dict],dict]",
                    "Callable[dict,dict]",
                    "Optional[str]",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]",
                    "Callable[[Any],datetime.datetime]"
                ],
                "query_params": [
                    "bool",
                    "float",
                    "None",
                    "str"
                ],
                "header_params": [
                    "bytes",
                    "None",
                    "float",
                    "MutableSet[T]",
                    "int",
                    "MutableSet",
                    "List[Dict]",
                    "List[dict]"
                ],
                "body": [
                    "bool",
                    "None",
                    "Optional[int]",
                    "int",
                    "request_response"
                ],
                "post_params": [
                    "bool",
                    "List[str]",
                    "None"
                ],
                "files": [
                    "bool",
                    "None",
                    "TextIO",
                    "int",
                    "Optional[str]",
                    "str"
                ],
                "response_type": [
                    "bool",
                    "None",
                    "str",
                    "List[str]",
                    "int",
                    "Optional[str]"
                ],
                "auth_settings": [
                    "bool",
                    "str",
                    "None"
                ],
                "_return_http_data_only": [
                    "bool",
                    "None",
                    "Optional[int]"
                ],
                "collection_formats": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "_preload_content": [
                    "bool",
                    "str",
                    "int"
                ],
                "_request_timeout": [
                    "str",
                    "None",
                    "int",
                    "bool"
                ]
            }
        },
        "ApiClient.sanitize_for_serialization": {
            "name": "sanitize_for_serialization",
            "location": 179,
            "return": [
                "Optional[str]",
                "int",
                "None",
                "self_@_PRIMITIVE_TYPES",
                "List",
                "Tuple",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Optional[AbstractSet[str]]",
                    "Dict",
                    "AbstractSet",
                    "None"
                ]
            }
        },
        "ApiClient.deserialize": {
            "name": "deserialize",
            "location": 221,
            "return": [
                "str",
                "dict",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "Union[bytes,bytearray]",
                    "bytes",
                    "bytearray",
                    "Optional[dict]",
                    "None"
                ],
                "response_type": [
                    "str"
                ]
            }
        },
        "ApiClient.__deserialize": {
            "name": "__deserialize",
            "location": 243,
            "return": [
                "str",
                "None",
                "Optional[str]",
                "List",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str,Any]",
                    "bytes",
                    "Dict[str,Union[str,Any]]",
                    "Dict",
                    "Optional[dict]",
                    "int",
                    "Optional[int]",
                    "Iterable"
                ],
                "klass": [
                    "bytes",
                    "str"
                ]
            }
        },
        "ApiClient.call_api": {
            "name": "call_api",
            "location": 282,
            "return": [
                "str",
                "Tuple[Union[Any,Any]]",
                "Optional[Mapping[str,Any]]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "resource_path": [
                    "bool",
                    "str",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "method": [
                    "bool",
                    "str",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "path_params": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "query_params": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "header_params": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "body": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "post_params": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "files": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "response_type": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "auth_settings": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "async_req": [
                    "bool",
                    "None",
                    "Optional[int]"
                ],
                "_return_http_data_only": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "collection_formats": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "_preload_content": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "_request_timeout": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "ApiClient.request": {
            "name": "request",
            "location": 342,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "bool",
                    "List[str]",
                    "AbstractSet",
                    "Callable",
                    "AbstractSet[int]",
                    "AbstractSet[str]"
                ],
                "url": [
                    "str",
                    "Dict[str,Any]",
                    "bool",
                    "Sequence[str]",
                    "Dict",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "None"
                ],
                "query_params": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "bool",
                    "Sequence[str]",
                    "Dict",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]"
                ],
                "headers": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "bool",
                    "Sequence[str]",
                    "Dict",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]"
                ],
                "post_params": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "bool",
                    "Dict[str,str]"
                ],
                "body": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "bool",
                    "Dict[str,str]"
                ],
                "_preload_content": [
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "Sequence[str]",
                    "Dict",
                    "Optional[Dict[str,str]]"
                ],
                "_request_timeout": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "bool",
                    "Sequence[str]",
                    "Dict",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]"
                ]
            }
        },
        "ApiClient.parameters_to_tuples": {
            "name": "parameters_to_tuples",
            "location": 403,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "str",
                    "Iterable[str]",
                    "Dict"
                ],
                "collection_formats": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ApiClient.prepare_post_parameters": {
            "name": "prepare_post_parameters",
            "location": 433,
            "return": [
                "Union[(List[tuple], _T0)]"
            ],
            "arguments": {
                "self": [],
                "post_params": [
                    "str"
                ],
                "files": [
                    "str",
                    "None",
                    "List[str]",
                    "DefaultDict[str,List[Any]]",
                    "DefaultDict"
                ]
            }
        },
        "ApiClient.select_header_accept": {
            "name": "select_header_accept",
            "location": 461,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "accepts": [
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Dict[str,Union[str,bool]]",
                    "Optional[Dict[str,str]]"
                ]
            }
        },
        "ApiClient.select_header_content_type": {
            "name": "select_header_content_type",
            "location": 477,
            "return": [
                "str",
                "Text",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "content_types": [
                    "str"
                ]
            }
        },
        "ApiClient.update_params_for_auth": {
            "name": "update_params_for_auth",
            "location": 493,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "Callable",
                    "bool"
                ],
                "querys": [
                    "List[str]",
                    "Dict"
                ],
                "auth_settings": [
                    "Dict[str,Any]",
                    "Dict",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "ApiClient.__deserialize_file": {
            "name": "__deserialize_file",
            "location": 517,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "ApiClient.__deserialize_primitive": {
            "name": "__deserialize_primitive",
            "location": 541,
            "return": [
                "Dict[str,Dict[str,Any]]",
                "Dict",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict",
                    "bytes",
                    "str"
                ],
                "klass": [
                    "Dict",
                    "bytes",
                    "Union[bytes,bytearray,memoryview]",
                    "bytearray",
                    "memoryview"
                ]
            }
        },
        "ApiClient.__deserialize_object": {
            "name": "__deserialize_object",
            "location": 556,
            "return": [
                "int",
                "str",
                "Tuple[Union[str,int]]",
                "Dict[str,Any]",
                "complex",
                "List"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "complex",
                    "Tuple[str,int]",
                    "List",
                    "Tuple[Union[str,int]]"
                ]
            }
        },
        "ApiClient.__deserialize_date": {
            "name": "__deserialize_date",
            "location": 563,
            "return": [
                "str",
                "Optional[int]",
                "Optional[str]",
                "Optional[bool]",
                "Optional[Type]",
                "Dict[int,int]"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ]
            }
        },
        "ApiClient.__deserialize_datatime": {
            "name": "__deserialize_datatime",
            "location": 580,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ]
            }
        },
        "ApiClient.__hasattr": {
            "name": "__hasattr",
            "location": 602,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "object": [
                    "str",
                    "Optional[str]",
                    "None",
                    "FrozenSet[str]",
                    "frozenset"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "FrozenSet[str]",
                    "frozenset"
                ]
            }
        },
        "ApiClient.__deserialize_model": {
            "name": "__deserialize_model",
            "location": 605,
            "return": [
                "Dict",
                "Dict[str,Any]",
                "str",
                "Dict[AbstractSet,set[Any]]",
                "float",
                "Sequence",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[AbstractSet,set[Any]]",
                    "Dict[AbstractSet[str],Set[Any]]",
                    "Union[None,int,str]"
                ],
                "klass": [
                    "Callable",
                    "Union[str,int]",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/ordersupport/configuration.py": {
        "Configuration.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration.set_default": {
            "name": "set_default",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[str]",
                    "Callable[[dict],None]",
                    "str",
                    "Callable[dict,None]",
                    "Dict[str,Any]",
                    "Optional[Dict]",
                    "Dict",
                    "None"
                ],
                "default": [
                    "int",
                    "List[str]",
                    "Callable[[dict],None]",
                    "str",
                    "Callable[dict,None]",
                    "Dict[str,Any]",
                    "Optional[Dict]",
                    "Dict",
                    "None"
                ]
            }
        },
        "Configuration.logger_file": {
            "name": "logger_file",
            "location": 117,
            "return": [
                "str",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict[str, str]",
                    "dict",
                    "int"
                ]
            }
        },
        "Configuration.debug": {
            "name": "debug",
            "location": 156,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict[str, Any]",
                    "int",
                    "Set[str]",
                    "str"
                ]
            }
        },
        "Configuration.logger_format": {
            "name": "logger_format",
            "location": 189,
            "return": [
                "str",
                "typing.Final"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[bytes, str]"
                ]
            }
        },
        "Configuration.get_api_key_with_prefix": {
            "name": "get_api_key_with_prefix",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Configuration.get_basic_auth_token": {
            "name": "get_basic_auth_token",
            "location": 212,
            "return": [
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration.auth_settings": {
            "name": "auth_settings",
            "location": 221,
            "return": [
                "Dict[(str, Dict[(str, Optional[str])])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration.to_debug_report": {
            "name": "to_debug_report",
            "location": 245,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "digikey-api-master/digikey/v3/ordersupport/rest.py": {
        "RESTResponse.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resp": [
                    "FrozenSet[bytes]",
                    "frozenset",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "RESTResponse.getheaders": {
            "name": "getheaders",
            "location": 44,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "Dict[str, dict]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RESTResponse.getheader": {
            "name": "getheader",
            "location": 48,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Dict[str,Any]"
                ],
                "default": [
                    "str",
                    "List[str]",
                    "None",
                    "Dict[str,Any]"
                ]
            }
        },
        "RESTClientObject.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "configuration": [
                    "Mapping[str,Tuple[float,float,float]]",
                    "Mapping"
                ],
                "pools_size": [
                    "int",
                    "bool"
                ],
                "maxsize": [
                    "int",
                    "None",
                    "Tuple[str,int]",
                    "Optional[int]",
                    "Tuple[Union[str,int]]"
                ]
            }
        },
        "RESTClientObject.request": {
            "name": "request",
            "location": 108,
            "return": [
                "Set[str]",
                "Dict[str,Union[Any,Any,str]]",
                "List[str]",
                "bytes",
                "List[Match]",
                "Dict[str,str]",
                "Generator[Union[Any,None,None]]",
                "Dict[str,Any]",
                "str",
                "bool",
                "None",
                "List",
                "Tuple[Union[str,str,str]]",
                "RESTResponse"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Dict",
                    "Optional[dict]"
                ],
                "url": [
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "str",
                    "urllib.requesRequest",
                    "None"
                ],
                "query_params": [
                    "str",
                    "None",
                    "bytes",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "Optional[Dict[str,Any]]"
                ],
                "headers": [
                    "str",
                    "None",
                    "bytes",
                    "Dict",
                    "Dict[str,Any]"
                ],
                "body": [
                    "str",
                    "Dict[str,Any]",
                    "None",
                    "int"
                ],
                "post_params": [
                    "bool",
                    "None",
                    "Optional[Dict[str,str]]",
                    "Dict[str,Any]",
                    "Dict[str,str]"
                ],
                "_preload_content": [
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "int",
                    "Dict"
                ],
                "_request_timeout": [
                    "int",
                    "Union[int, float]"
                ]
            }
        },
        "RESTClientObject.GET": {
            "name": "GET",
            "location": 232,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Optional[str]",
                    "Dict",
                    "Callable",
                    "None"
                ],
                "headers": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Dict",
                    "Callable"
                ],
                "query_params": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Dict",
                    "Callable"
                ],
                "_preload_content": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Dict",
                    "Callable"
                ],
                "_request_timeout": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Dict",
                    "Callable"
                ]
            }
        },
        "RESTClientObject.HEAD": {
            "name": "HEAD",
            "location": 240,
            "return": [
                "int",
                "dict",
                "Dict[str, Any]",
                "Dict[str, Dict[str, str]]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Dict",
                    "str",
                    "Optional[str]",
                    "bytes",
                    "Dict[str,Any]",
                    "None"
                ],
                "headers": [
                    "Dict",
                    "None",
                    "str",
                    "Optional[str]",
                    "bytes",
                    "Dict[str,Any]"
                ],
                "query_params": [
                    "Dict",
                    "None",
                    "str",
                    "Optional[str]",
                    "bytes",
                    "Dict[str,Any]"
                ],
                "_preload_content": [
                    "bool",
                    "Dict",
                    "Optional[str]",
                    "str",
                    "bytes",
                    "Dict[str,Any]"
                ],
                "_request_timeout": [
                    "Dict",
                    "None",
                    "str",
                    "Optional[str]",
                    "bytes",
                    "Dict[str,Any]"
                ]
            }
        },
        "RESTClientObject.OPTIONS": {
            "name": "OPTIONS",
            "location": 248,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "int",
                    "str"
                ],
                "headers": [
                    "int",
                    "str",
                    "None"
                ],
                "query_params": [
                    "int",
                    "str",
                    "None"
                ],
                "post_params": [
                    "int",
                    "str",
                    "None"
                ],
                "body": [
                    "int",
                    "str",
                    "None"
                ],
                "_preload_content": [
                    "bool",
                    "int",
                    "str"
                ],
                "_request_timeout": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "RESTClientObject.DELETE": {
            "name": "DELETE",
            "location": 258,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Callable"
                ],
                "headers": [
                    "str",
                    "Callable",
                    "None"
                ],
                "query_params": [
                    "str",
                    "Callable",
                    "None"
                ],
                "body": [
                    "str",
                    "Callable",
                    "None"
                ],
                "_preload_content": [
                    "bool",
                    "str",
                    "Callable"
                ],
                "_request_timeout": [
                    "str",
                    "Callable",
                    "None"
                ]
            }
        },
        "RESTClientObject.POST": {
            "name": "POST",
            "location": 267,
            "return": [
                "set",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "int"
                ],
                "headers": [
                    "int",
                    "None"
                ],
                "query_params": [
                    "int",
                    "None"
                ],
                "post_params": [
                    "int",
                    "None"
                ],
                "body": [
                    "int",
                    "None"
                ],
                "_preload_content": [
                    "int",
                    "bool"
                ],
                "_request_timeout": [
                    "int",
                    "None"
                ]
            }
        },
        "RESTClientObject.PUT": {
            "name": "PUT",
            "location": 277,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Optional[Dict[str, Any]]",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Callable",
                    "float",
                    "MutableMapping"
                ],
                "headers": [
                    "Callable",
                    "float",
                    "None",
                    "MutableMapping"
                ],
                "query_params": [
                    "Callable",
                    "float",
                    "None",
                    "MutableMapping"
                ],
                "post_params": [
                    "Callable",
                    "float",
                    "None",
                    "MutableMapping"
                ],
                "body": [
                    "Callable",
                    "float",
                    "None",
                    "MutableMapping"
                ],
                "_preload_content": [
                    "bool",
                    "Callable",
                    "float",
                    "MutableMapping"
                ],
                "_request_timeout": [
                    "Callable",
                    "float",
                    "None",
                    "MutableMapping"
                ]
            }
        },
        "RESTClientObject.PATCH": {
            "name": "PATCH",
            "location": 287,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Union[bool, str]]",
                "bytes",
                "Dict[str, Set[str]]",
                "Dict[str, List[str]]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "int",
                    "str",
                    "float",
                    "Dict",
                    "MutableMapping",
                    "Optional[int]",
                    "None"
                ],
                "headers": [
                    "int",
                    "None",
                    "str",
                    "float",
                    "Dict",
                    "MutableMapping",
                    "Optional[int]"
                ],
                "query_params": [
                    "int",
                    "None",
                    "str",
                    "float",
                    "Dict",
                    "MutableMapping",
                    "Optional[int]"
                ],
                "post_params": [
                    "int",
                    "None",
                    "str",
                    "float",
                    "Dict",
                    "MutableMapping",
                    "Optional[int]"
                ],
                "body": [
                    "int",
                    "None",
                    "str",
                    "float",
                    "Dict",
                    "MutableMapping",
                    "Optional[int]"
                ],
                "_preload_content": [
                    "bool",
                    "int",
                    "str",
                    "float",
                    "Dict",
                    "MutableMapping",
                    "Optional[int]"
                ],
                "_request_timeout": [
                    "int",
                    "None",
                    "str",
                    "float",
                    "Dict",
                    "MutableMapping",
                    "Optional[int]"
                ]
            }
        },
        "ApiException.__init__": {
            "name": "__init__",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "List[dict]",
                    "None",
                    "int",
                    "List[str]",
                    "str",
                    "bool"
                ],
                "reason": [
                    "str",
                    "Callable",
                    "None"
                ],
                "http_resp": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "ApiException.__str__": {
            "name": "__str__",
            "location": 312,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "digikey-api-master/digikey/v3/ordersupport/__init__.py": {},
    "digikey-api-master/digikey/v3/ordersupport/api/order_details_api.py": {
        "OrderDetailsApi.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_client": [
                    "None"
                ]
            }
        },
        "OrderDetailsApi.order_history": {
            "name": "order_history",
            "location": 36,
            "return": [
                "Dict[str, Any]",
                "int",
                "str",
                "dict",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "authorization": [
                    "bytes",
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "x_digikey_client_id": [
                    "bytes",
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "OrderDetailsApi.order_history_with_http_info": {
            "name": "order_history_with_http_info",
            "location": 64,
            "return": [
                "Optional[Dict]",
                "str"
            ],
            "arguments": {
                "self": [],
                "authorization": [
                    "str",
                    "float",
                    "Callable[[Any],bool]",
                    "Callable[Any,bool]"
                ],
                "x_digikey_client_id": [
                    "str",
                    "float",
                    "Callable[[Any],bool]",
                    "Callable[Any,bool]"
                ]
            }
        },
        "OrderDetailsApi.order_status": {
            "name": "order_status",
            "location": 161,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "sales_order_id": [
                    "str",
                    "int",
                    "bytes",
                    "float"
                ],
                "authorization": [
                    "str",
                    "int",
                    "bytes",
                    "float"
                ],
                "x_digikey_client_id": [
                    "str",
                    "int",
                    "bytes",
                    "float"
                ]
            }
        },
        "OrderDetailsApi.order_status_with_http_info": {
            "name": "order_status_with_http_info",
            "location": 185,
            "return": [
                "Dict[str, Any]",
                "Exception",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "sales_order_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "List[dict]",
                    "None",
                    "Type",
                    "Type[Any]",
                    "bool"
                ],
                "authorization": [
                    "str",
                    "int",
                    "Optional[int]",
                    "List[dict]",
                    "None",
                    "Type",
                    "Type[Any]",
                    "bool"
                ],
                "x_digikey_client_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "List[dict]",
                    "None",
                    "Type",
                    "Type[Any]",
                    "bool"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/ordersupport/api/__init__.py": {},
    "digikey-api-master/digikey/v3/ordersupport/models/address.py": {
        "Address.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "company": [
                    "Optional[int]",
                    "None",
                    "Optional[str]",
                    "int",
                    "Optional[bool]",
                    "str"
                ],
                "first_name": [
                    "Optional[List[str]]",
                    "None",
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "last_name": [
                    "Optional[List[str]]",
                    "None",
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "address_line_one": [
                    "None",
                    "bool",
                    "Optional[bool]",
                    "float",
                    "str",
                    "Optional[str]",
                    "Optional[float]"
                ],
                "address_line_two": [
                    "None",
                    "bool",
                    "Optional[bool]",
                    "float",
                    "str",
                    "Optional[str]",
                    "Optional[float]"
                ],
                "address_line_three": [
                    "None",
                    "bool",
                    "Optional[bool]",
                    "float",
                    "str",
                    "Optional[str]",
                    "Optional[float]"
                ],
                "city": [
                    "Optional[int]",
                    "None",
                    "Optional[str]",
                    "int",
                    "Optional[bool]",
                    "str"
                ],
                "province": [
                    "Optional[int]",
                    "None",
                    "Optional[str]",
                    "int",
                    "Optional[bool]",
                    "str"
                ],
                "postal_code": [
                    "None",
                    "Optional[str]",
                    "str",
                    "int",
                    "bool"
                ],
                "country": [
                    "Optional[int]",
                    "None",
                    "Optional[str]",
                    "int",
                    "Optional[bool]",
                    "str"
                ]
            }
        },
        "Address.company": {
            "name": "company",
            "location": 107,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "company": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Address.first_name": {
            "name": "first_name",
            "location": 130,
            "return": [
                "str",
                "list[]",
                "typing.Generator[typing.Union[str,None,None]]"
            ],
            "arguments": {
                "self": [],
                "first_name": [
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Address.last_name": {
            "name": "last_name",
            "location": 153,
            "return": [
                "str",
                "set[str]",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "last_name": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Address.address_line_one": {
            "name": "address_line_one",
            "location": 176,
            "return": [
                "str",
                "int",
                "list[int]",
                "typing.Final",
                "float",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "address_line_one": [
                    "bool",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "Address.address_line_two": {
            "name": "address_line_two",
            "location": 199,
            "return": [
                "str",
                "int",
                "list[int]",
                "typing.Final",
                "float",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "address_line_two": [
                    "bool",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "Address.address_line_three": {
            "name": "address_line_three",
            "location": 222,
            "return": [
                "str",
                "int",
                "list[int]",
                "typing.Final",
                "float",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "address_line_three": [
                    "bool",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "Address.city": {
            "name": "city",
            "location": 245,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "city": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Address.province": {
            "name": "province",
            "location": 268,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "province": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Address.postal_code": {
            "name": "postal_code",
            "location": 291,
            "return": [
                "str",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "postal_code": [
                    "str",
                    "int",
                    "List[int]"
                ]
            }
        },
        "Address.country": {
            "name": "country",
            "location": 314,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "country": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Address.to_dict": {
            "name": "to_dict",
            "location": 325,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Address.to_str": {
            "name": "to_str",
            "location": 352,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Address.__repr__": {
            "name": "__repr__",
            "location": 356,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Address.__eq__": {
            "name": "__eq__",
            "location": 360,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Address.__ne__": {
            "name": "__ne__",
            "location": 367,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/ordersupport/models/api_error_response.py": {
        "ApiErrorResponse.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error_response_version": [
                    "Optional[str]",
                    "None",
                    "Optional[Set[int]]",
                    "bool",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Set[int]",
                    "Dict[str,Any]"
                ],
                "status_code": [
                    "int",
                    "None",
                    "List[str]",
                    "str",
                    "Union[None,int]",
                    "Optional[str]"
                ],
                "error_message": [
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "str",
                    "bool",
                    "int"
                ],
                "error_details": [
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "str",
                    "bool",
                    "int"
                ],
                "request_id": [
                    "Optional[str]",
                    "None",
                    "str"
                ],
                "validation_errors": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Optional[Union[str,Any]]",
                    "Any"
                ]
            }
        },
        "ApiErrorResponse.error_response_version": {
            "name": "error_response_version",
            "location": 86,
            "return": [
                "dict[tuple[typing.Union[int,int]], str]",
                "str",
                "dict[str, typing.Any]",
                "typing.Pattern",
                "set[str]",
                "dict[str, list[typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "error_response_version": [
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "Union[None, Dict[str, str]]"
                ]
            }
        },
        "ApiErrorResponse.status_code": {
            "name": "status_code",
            "location": 107,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "status_code": [
                    "int"
                ]
            }
        },
        "ApiErrorResponse.error_message": {
            "name": "error_message",
            "location": 128,
            "return": [
                "str",
                "int",
                "bytes",
                "set[str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "error_message": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Optional[str]]",
                    "Exception",
                    "Callable[[str], bool]",
                    "List[str]"
                ]
            }
        },
        "ApiErrorResponse.error_details": {
            "name": "error_details",
            "location": 149,
            "return": [
                "str",
                "int",
                "bytes",
                "set[str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "error_details": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Optional[str]]",
                    "Exception",
                    "Callable[[str], bool]",
                    "List[str]"
                ]
            }
        },
        "ApiErrorResponse.request_id": {
            "name": "request_id",
            "location": 170,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "request_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "ApiErrorResponse.validation_errors": {
            "name": "validation_errors",
            "location": 191,
            "return": [
                "str",
                "int",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "validation_errors": [
                    "str",
                    "int"
                ]
            }
        },
        "ApiErrorResponse.to_dict": {
            "name": "to_dict",
            "location": 201,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiErrorResponse.to_str": {
            "name": "to_str",
            "location": 228,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiErrorResponse.__repr__": {
            "name": "__repr__",
            "location": 232,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiErrorResponse.__eq__": {
            "name": "__eq__",
            "location": 236,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ApiErrorResponse.__ne__": {
            "name": "__ne__",
            "location": 243,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/ordersupport/models/api_validation_error.py": {
        "ApiValidationError.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "bool",
                    "None",
                    "Optional[str]",
                    "Optional[Entity]",
                    "str",
                    "Optional[Exception]",
                    "Exception"
                ],
                "message": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "Optional[float]",
                    "float",
                    "Optional[Callable[[Any],bool]]",
                    "Callable[Any,bool]"
                ]
            }
        },
        "ApiValidationError.field": {
            "name": "field",
            "location": 66,
            "return": [
                "tuple[str]",
                "dict[str, tuple[typing.Union[str,str]]]",
                "typing.Mapping",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Container[str]",
                    "Dict[str, Any]",
                    "AbstractSet[str]",
                    "deque",
                    "str"
                ]
            }
        },
        "ApiValidationError.message": {
            "name": "message",
            "location": 87,
            "return": [
                "typing.TextIO",
                "str",
                "typing.Deque",
                "typing.Type"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ApiValidationError.to_dict": {
            "name": "to_dict",
            "location": 97,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiValidationError.to_str": {
            "name": "to_str",
            "location": 124,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiValidationError.__repr__": {
            "name": "__repr__",
            "location": 128,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiValidationError.__eq__": {
            "name": "__eq__",
            "location": 132,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Union[List[str],List[Any]]",
                    "List[str]",
                    "MutableMapping[str,Any]",
                    "MutableMapping"
                ]
            }
        },
        "ApiValidationError.__ne__": {
            "name": "__ne__",
            "location": 139,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/ordersupport/models/back_order_details.py": {
        "BackOrderDetails.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "quantity": [
                    "Optional[float]",
                    "None",
                    "Optional[str]",
                    "float",
                    "int",
                    "Optional[int]",
                    "str",
                    "Optional[Callable]",
                    "Optional[Hashable]",
                    "Callable",
                    "Hashable"
                ],
                "back_order_estimates": [
                    "Optional[int]",
                    "None",
                    "Optional[float]",
                    "int",
                    "Optional[str]",
                    "float",
                    "str"
                ]
            }
        },
        "BackOrderDetails.quantity": {
            "name": "quantity",
            "location": 67,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "quantity": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BackOrderDetails.back_order_estimates": {
            "name": "back_order_estimates",
            "location": 90,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "back_order_estimates": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BackOrderDetails.to_dict": {
            "name": "to_dict",
            "location": 101,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BackOrderDetails.to_str": {
            "name": "to_str",
            "location": 128,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BackOrderDetails.__repr__": {
            "name": "__repr__",
            "location": 132,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BackOrderDetails.__eq__": {
            "name": "__eq__",
            "location": 136,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int,BitVec]",
                    "int"
                ]
            }
        },
        "BackOrderDetails.__ne__": {
            "name": "__ne__",
            "location": 143,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/ordersupport/models/default_shipping.py": {
        "DefaultShipping.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "digi_key_release_date": [
                    "int",
                    "None",
                    "Optional[int]",
                    "Optional[str]",
                    "str"
                ],
                "estimated_in_house_date": [
                    "str",
                    "None"
                ]
            }
        },
        "DefaultShipping.digi_key_release_date": {
            "name": "digi_key_release_date",
            "location": 67,
            "return": [
                "int",
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "digi_key_release_date": [
                    "bool",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "DefaultShipping.estimated_in_house_date": {
            "name": "estimated_in_house_date",
            "location": 90,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "estimated_in_house_date": [
                    "int",
                    "List[int]",
                    "str"
                ]
            }
        },
        "DefaultShipping.to_dict": {
            "name": "to_dict",
            "location": 101,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultShipping.to_str": {
            "name": "to_str",
            "location": 128,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultShipping.__repr__": {
            "name": "__repr__",
            "location": 132,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultShipping.__eq__": {
            "name": "__eq__",
            "location": 136,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int,BitVec]",
                    "int"
                ]
            }
        },
        "DefaultShipping.__ne__": {
            "name": "__ne__",
            "location": 143,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/ordersupport/models/line_item.py": {
        "LineItem.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "po_line_item_number": [
                    "float",
                    "bool",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "digi_key_part_number": [
                    "Optional[Dict[str,Any]]",
                    "None",
                    "Dict[str,Union[str,int]]",
                    "Optional[bool]",
                    "bytes",
                    "Dict[str,Any]",
                    "bool"
                ],
                "manufacturer_part_number": [
                    "None",
                    "str",
                    "Optional[str]",
                    "bool",
                    "Dict[str,int]",
                    "Optional[Dict[str,int]]",
                    "float",
                    "Optional[float]",
                    "Optional[bool]"
                ],
                "product_description": [
                    "Optional[str]",
                    "str",
                    "None",
                    "List[str]",
                    "Optional[Tuple[int,int]]",
                    "Tuple[Union[int,int]]"
                ],
                "manufacturer": [
                    "bool",
                    "None",
                    "float",
                    "Optional[bool]",
                    "Optional[str]",
                    "str"
                ],
                "country_of_origin": [
                    "bool",
                    "None",
                    "Optional[str]",
                    "Optional[bool]",
                    "str"
                ],
                "quantity": [
                    "bool",
                    "None",
                    "float",
                    "Optional[bool]",
                    "Optional[str]",
                    "str"
                ],
                "customer_reference": [
                    "bool",
                    "None",
                    "Optional[str]",
                    "Optional[bool]",
                    "str"
                ],
                "unit_price": [
                    "bool",
                    "None",
                    "Optional[str]",
                    "Optional[bool]",
                    "str"
                ],
                "total_price": [
                    "bool",
                    "None",
                    "Optional[str]",
                    "Optional[bool]",
                    "str"
                ],
                "quantity_backorder": [
                    "bool",
                    "None",
                    "Optional[str]",
                    "Optional[bool]",
                    "str"
                ],
                "back_order_details": [
                    "Sequence[str]",
                    "str",
                    "None",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "quantity_shipped": [
                    "bool",
                    "None",
                    "Optional[str]",
                    "Optional[bool]",
                    "str"
                ],
                "invoice_id": [
                    "str",
                    "None",
                    "Optional[str]",
                    "bytes",
                    "int",
                    "Optional[int]",
                    "List[Any]",
                    "Optional[List[Any]]",
                    "Optional[Iterable[str]]"
                ],
                "default_shipping": [
                    "bool",
                    "None",
                    "Optional[str]",
                    "Optional[bool]",
                    "str"
                ],
                "schedule": [
                    "bool",
                    "None",
                    "float",
                    "Optional[bool]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "LineItem.po_line_item_number": {
            "name": "po_line_item_number",
            "location": 137,
            "return": [
                "str",
                "dict[int, str]",
                "list[str]",
                "set[str]",
                "int",
                "dict[str, tuple[typing.Union[int,int]]]"
            ],
            "arguments": {
                "self": [],
                "po_line_item_number": [
                    "float",
                    "Dict[str, Any]",
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "LineItem.digi_key_part_number": {
            "name": "digi_key_part_number",
            "location": 160,
            "return": [
                "typing.Iterator",
                "bytes",
                "set[str]",
                "str",
                "dict[str, bytes]",
                "None",
                "typing.Type"
            ],
            "arguments": {
                "self": [],
                "digi_key_part_number": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "LineItem.manufacturer_part_number": {
            "name": "manufacturer_part_number",
            "location": 183,
            "return": [
                "int",
                "str",
                "list[str]",
                "set[str]",
                "typing.DefaultDict"
            ],
            "arguments": {
                "self": [],
                "manufacturer_part_number": [
                    "str",
                    "bool",
                    "dict",
                    "List[str]",
                    "tuple"
                ]
            }
        },
        "LineItem.product_description": {
            "name": "product_description",
            "location": 206,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "product_description": [
                    "int",
                    "str"
                ]
            }
        },
        "LineItem.manufacturer": {
            "name": "manufacturer",
            "location": 229,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "manufacturer": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "LineItem.country_of_origin": {
            "name": "country_of_origin",
            "location": 252,
            "return": [
                "str",
                "int",
                "set[int]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "country_of_origin": [
                    "int",
                    "bool",
                    "Optional[Callable]",
                    "Union[str, List[str]]"
                ]
            }
        },
        "LineItem.quantity": {
            "name": "quantity",
            "location": 275,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "quantity": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "LineItem.customer_reference": {
            "name": "customer_reference",
            "location": 298,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "customer_reference": [
                    "float"
                ]
            }
        },
        "LineItem.unit_price": {
            "name": "unit_price",
            "location": 321,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "unit_price": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "LineItem.total_price": {
            "name": "total_price",
            "location": 344,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "total_price": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "LineItem.quantity_backorder": {
            "name": "quantity_backorder",
            "location": 367,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "quantity_backorder": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "LineItem.back_order_details": {
            "name": "back_order_details",
            "location": 389,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "back_order_details": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "LineItem.quantity_shipped": {
            "name": "quantity_shipped",
            "location": 411,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "quantity_shipped": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "LineItem.invoice_id": {
            "name": "invoice_id",
            "location": 434,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "invoice_id": [
                    "str",
                    "int"
                ]
            }
        },
        "LineItem.default_shipping": {
            "name": "default_shipping",
            "location": 456,
            "return": [
                "str",
                "int",
                "list[dict[str, str]]",
                "float",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "default_shipping": [
                    "int",
                    "Sequence[Any]"
                ]
            }
        },
        "LineItem.schedule": {
            "name": "schedule",
            "location": 478,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "schedule": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "LineItem.to_dict": {
            "name": "to_dict",
            "location": 489,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineItem.to_str": {
            "name": "to_str",
            "location": 516,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineItem.__repr__": {
            "name": "__repr__",
            "location": 520,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineItem.__eq__": {
            "name": "__eq__",
            "location": 524,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int,BitVec]",
                    "int"
                ]
            }
        },
        "LineItem.__ne__": {
            "name": "__ne__",
            "location": 531,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/ordersupport/models/order_status_response.py": {
        "OrderStatusResponse.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "salesorder_id": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Optional[int]",
                    "Optional[Any]",
                    "int",
                    "Any"
                ],
                "customer_id": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Optional[int]",
                    "Optional[Any]",
                    "int",
                    "Any"
                ],
                "billing_account": [
                    "Optional[str]",
                    "None",
                    "Optional[Dict[str,str]]",
                    "str",
                    "Dict[str,str]"
                ],
                "email": [
                    "Optional[str]",
                    "None",
                    "Mapping",
                    "Optional[int]",
                    "str",
                    "int",
                    "Optional[Dict[str,str]]",
                    "Optional[List[SoftwareSourceCode]]",
                    "Dict[str,str]",
                    "List[SoftwareSourceCode]"
                ],
                "purchase_order": [
                    "Optional[int]",
                    "None",
                    "Optional[str]",
                    "int",
                    "Optional[Any]",
                    "str",
                    "Optional[Dict[str,str]]",
                    "Any",
                    "Dict[str,str]"
                ],
                "payment_method": [
                    "Optional[int]",
                    "None",
                    "Optional[str]",
                    "int",
                    "Optional[Any]",
                    "str",
                    "Optional[Dict[str,str]]",
                    "Any",
                    "Dict[str,str]"
                ],
                "supplier": [
                    "Optional[int]",
                    "None",
                    "Optional[Dict[str,str]]",
                    "int",
                    "Optional[str]",
                    "Dict[str,str]",
                    "Optional[Any]",
                    "str",
                    "Any"
                ],
                "shipping_method": [
                    "Optional[int]",
                    "None",
                    "Optional[str]",
                    "int",
                    "Optional[Any]",
                    "str",
                    "Optional[Dict[str,str]]",
                    "Any",
                    "Dict[str,str]"
                ],
                "backorder_shipping_method": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Callable",
                    "int",
                    "Optional[Any]",
                    "Any",
                    "bool"
                ],
                "shipper_account_number": [
                    "Optional[str]",
                    "None",
                    "Optional[bool]",
                    "str",
                    "bool"
                ],
                "backorder_shipper_account_number": [
                    "Optional[str]",
                    "None",
                    "Optional[Any]",
                    "str",
                    "Any"
                ],
                "shipment_type": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "currency": [
                    "Optional[int]",
                    "None",
                    "Optional[Dict[str,str]]",
                    "int",
                    "Optional[str]",
                    "Dict[str,str]",
                    "Optional[Any]",
                    "str",
                    "Any"
                ],
                "shipping_address": [
                    "Optional[str]",
                    "None",
                    "Optional[List[str]]",
                    "str",
                    "Optional[Union[str,Any]]",
                    "List[str]",
                    "Any"
                ],
                "billing_address": [
                    "Optional[str]",
                    "None",
                    "Optional[List[str]]",
                    "str",
                    "Optional[Union[str,Any]]",
                    "List[str]",
                    "Any"
                ],
                "shipping_details": [
                    "Optional[int]",
                    "None",
                    "Optional[str]",
                    "int",
                    "Optional[Any]",
                    "str",
                    "Optional[Dict[str,str]]",
                    "Any",
                    "Dict[str,str]"
                ],
                "line_items": [
                    "Optional[int]",
                    "None",
                    "Optional[str]",
                    "int",
                    "Optional[Any]",
                    "str",
                    "Optional[Dict[str,str]]",
                    "Any",
                    "Dict[str,str]"
                ]
            }
        },
        "OrderStatusResponse.salesorder_id": {
            "name": "salesorder_id",
            "location": 142,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "salesorder_id": [
                    "str",
                    "int"
                ]
            }
        },
        "OrderStatusResponse.customer_id": {
            "name": "customer_id",
            "location": 165,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "customer_id": [
                    "str",
                    "int"
                ]
            }
        },
        "OrderStatusResponse.billing_account": {
            "name": "billing_account",
            "location": 188,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "billing_account": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "OrderStatusResponse.email": {
            "name": "email",
            "location": 211,
            "return": [
                "str",
                "bool",
                "bytes",
                "dict[str, str]",
                "typing.Any",
                "None"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "OrderStatusResponse.purchase_order": {
            "name": "purchase_order",
            "location": 234,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "purchase_order": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "OrderStatusResponse.payment_method": {
            "name": "payment_method",
            "location": 257,
            "return": [
                "int",
                "list[str]",
                "list[]",
                "set[str]"
            ],
            "arguments": {
                "self": [],
                "payment_method": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "OrderStatusResponse.supplier": {
            "name": "supplier",
            "location": 280,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "supplier": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "OrderStatusResponse.shipping_method": {
            "name": "shipping_method",
            "location": 303,
            "return": [
                "int",
                "list[str]",
                "list[]",
                "set[str]"
            ],
            "arguments": {
                "self": [],
                "shipping_method": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "OrderStatusResponse.backorder_shipping_method": {
            "name": "backorder_shipping_method",
            "location": 326,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "backorder_shipping_method": [
                    "int",
                    "List[str]",
                    "List[Dict]",
                    "str",
                    "Type",
                    "list"
                ]
            }
        },
        "OrderStatusResponse.shipper_account_number": {
            "name": "shipper_account_number",
            "location": 349,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "shipper_account_number": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "OrderStatusResponse.backorder_shipper_account_number": {
            "name": "backorder_shipper_account_number",
            "location": 372,
            "return": [
                "int",
                "list[int]"
            ],
            "arguments": {
                "self": [],
                "backorder_shipper_account_number": [
                    "str"
                ]
            }
        },
        "OrderStatusResponse.shipment_type": {
            "name": "shipment_type",
            "location": 395,
            "return": [
                "str",
                "dict[str, dict[str, typing.Any]]",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "shipment_type": [
                    "int",
                    "str"
                ]
            }
        },
        "OrderStatusResponse.currency": {
            "name": "currency",
            "location": 418,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "currency": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "OrderStatusResponse.shipping_address": {
            "name": "shipping_address",
            "location": 440,
            "return": [
                "int",
                "str",
                "dict[, ]",
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "shipping_address": [
                    "str",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "OrderStatusResponse.billing_address": {
            "name": "billing_address",
            "location": 461,
            "return": [
                "int",
                "str",
                "dict[, ]",
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "billing_address": [
                    "str",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "OrderStatusResponse.shipping_details": {
            "name": "shipping_details",
            "location": 483,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "shipping_details": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "OrderStatusResponse.line_items": {
            "name": "line_items",
            "location": 506,
            "return": [
                "int",
                "str",
                "dict[, ]",
                "bytes",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "line_items": [
                    "str",
                    "Sized",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "bool"
                ]
            }
        },
        "OrderStatusResponse.to_dict": {
            "name": "to_dict",
            "location": 517,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderStatusResponse.to_str": {
            "name": "to_str",
            "location": 544,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderStatusResponse.__repr__": {
            "name": "__repr__",
            "location": 548,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderStatusResponse.__eq__": {
            "name": "__eq__",
            "location": 552,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict[str,float]",
                    "Callable",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "OrderStatusResponse.__ne__": {
            "name": "__ne__",
            "location": 559,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/ordersupport/models/salesorder_history_item.py": {
        "SalesorderHistoryItem.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "salesorder_id": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "customer_id": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "date_entered": [
                    "str",
                    "None",
                    "int",
                    "Optional[int]"
                ],
                "purchase_order": [
                    "Optional[int]",
                    "None",
                    "int",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "SalesorderHistoryItem.salesorder_id": {
            "name": "salesorder_id",
            "location": 77,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "salesorder_id": [
                    "str",
                    "int"
                ]
            }
        },
        "SalesorderHistoryItem.customer_id": {
            "name": "customer_id",
            "location": 100,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "customer_id": [
                    "str",
                    "int"
                ]
            }
        },
        "SalesorderHistoryItem.date_entered": {
            "name": "date_entered",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "date_entered": [
                    "int"
                ]
            }
        },
        "SalesorderHistoryItem.purchase_order": {
            "name": "purchase_order",
            "location": 146,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "purchase_order": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "SalesorderHistoryItem.to_dict": {
            "name": "to_dict",
            "location": 157,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SalesorderHistoryItem.to_str": {
            "name": "to_str",
            "location": 184,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SalesorderHistoryItem.__repr__": {
            "name": "__repr__",
            "location": 188,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SalesorderHistoryItem.__eq__": {
            "name": "__eq__",
            "location": 192,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int,BitVec]",
                    "int"
                ]
            }
        },
        "SalesorderHistoryItem.__ne__": {
            "name": "__ne__",
            "location": 199,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/ordersupport/models/sales_order_history_item.py": {
        "SalesOrderHistoryItem.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "salesorder_id": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "customer_id": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "date_entered": [
                    "str",
                    "None",
                    "int",
                    "Optional[int]"
                ],
                "purchase_order": [
                    "Optional[int]",
                    "None",
                    "int",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "SalesOrderHistoryItem.salesorder_id": {
            "name": "salesorder_id",
            "location": 77,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "salesorder_id": [
                    "str",
                    "int"
                ]
            }
        },
        "SalesOrderHistoryItem.customer_id": {
            "name": "customer_id",
            "location": 100,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "customer_id": [
                    "str",
                    "int"
                ]
            }
        },
        "SalesOrderHistoryItem.date_entered": {
            "name": "date_entered",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "date_entered": [
                    "int"
                ]
            }
        },
        "SalesOrderHistoryItem.purchase_order": {
            "name": "purchase_order",
            "location": 146,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "purchase_order": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "SalesOrderHistoryItem.to_dict": {
            "name": "to_dict",
            "location": 157,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SalesOrderHistoryItem.to_str": {
            "name": "to_str",
            "location": 184,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SalesOrderHistoryItem.__repr__": {
            "name": "__repr__",
            "location": 188,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SalesOrderHistoryItem.__eq__": {
            "name": "__eq__",
            "location": 192,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int,BitVec]",
                    "int"
                ]
            }
        },
        "SalesOrderHistoryItem.__ne__": {
            "name": "__ne__",
            "location": 199,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/ordersupport/models/schedule.py": {
        "Schedule.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scheduled_quantity": [
                    "Optional[str]",
                    "None",
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "scheduled_date": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "Schedule.scheduled_quantity": {
            "name": "scheduled_quantity",
            "location": 67,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "scheduled_quantity": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Schedule.scheduled_date": {
            "name": "scheduled_date",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "scheduled_date": [
                    "str",
                    "int"
                ]
            }
        },
        "Schedule.to_dict": {
            "name": "to_dict",
            "location": 101,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schedule.to_str": {
            "name": "to_str",
            "location": 128,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schedule.__repr__": {
            "name": "__repr__",
            "location": 132,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schedule.__eq__": {
            "name": "__eq__",
            "location": 136,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Schedule.__ne__": {
            "name": "__ne__",
            "location": 143,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/ordersupport/models/shipping_detail.py": {
        "ShippingDetail.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "carrier": [
                    "Optional[int]",
                    "None",
                    "Optional[str]",
                    "int",
                    "Optional[AnyStr]",
                    "str",
                    "AnyStr"
                ],
                "carrier_package_id": [
                    "bool",
                    "None",
                    "Optional[Union[str,Any]]",
                    "Mapping",
                    "str",
                    "Optional[int]",
                    "Any",
                    "Optional[bool]",
                    "int"
                ],
                "date_transaction": [
                    "None",
                    "Optional[str]",
                    "int",
                    "str",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "float",
                    "Optional[bool]",
                    "Optional[float]",
                    "Optional[int]"
                ],
                "shipping_method": [
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "str",
                    "Optional[AnyStr]",
                    "int",
                    "Optional[bool]",
                    "AnyStr"
                ],
                "tracking_url": [
                    "bool",
                    "None",
                    "str",
                    "Optional[Mapping[str,Any]]",
                    "Mapping",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]"
                ],
                "invoice_id": [
                    "None",
                    "int",
                    "Optional[int]",
                    "Mapping",
                    "Optional[bool]"
                ],
                "canceled_or_voided": [
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "str",
                    "Optional[AnyStr]",
                    "int",
                    "Optional[bool]",
                    "AnyStr"
                ],
                "delivery_date": [
                    "None",
                    "Optional[bool]",
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[Union[Date,str]]",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "ShippingDetail.carrier": {
            "name": "carrier",
            "location": 97,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "carrier": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ShippingDetail.carrier_package_id": {
            "name": "carrier_package_id",
            "location": 120,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "carrier_package_id": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "ShippingDetail.date_transaction": {
            "name": "date_transaction",
            "location": 143,
            "return": [
                "dict[str, list[str]]"
            ],
            "arguments": {
                "self": [],
                "date_transaction": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "ShippingDetail.shipping_method": {
            "name": "shipping_method",
            "location": 166,
            "return": [
                "int",
                "list[str]",
                "list[]",
                "set[str]"
            ],
            "arguments": {
                "self": [],
                "shipping_method": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "ShippingDetail.tracking_url": {
            "name": "tracking_url",
            "location": 188,
            "return": [
                "str",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "tracking_url": [
                    "str"
                ]
            }
        },
        "ShippingDetail.invoice_id": {
            "name": "invoice_id",
            "location": 210,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "invoice_id": [
                    "str",
                    "int"
                ]
            }
        },
        "ShippingDetail.canceled_or_voided": {
            "name": "canceled_or_voided",
            "location": 233,
            "return": [
                "str",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "canceled_or_voided": [
                    "str",
                    "int",
                    "List[Tuple[int, int]]",
                    "float"
                ]
            }
        },
        "ShippingDetail.delivery_date": {
            "name": "delivery_date",
            "location": 256,
            "return": [],
            "arguments": {
                "self": [],
                "delivery_date": [
                    "str",
                    "int"
                ]
            }
        },
        "ShippingDetail.to_dict": {
            "name": "to_dict",
            "location": 267,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShippingDetail.to_str": {
            "name": "to_str",
            "location": 294,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShippingDetail.__repr__": {
            "name": "__repr__",
            "location": 298,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShippingDetail.__eq__": {
            "name": "__eq__",
            "location": 302,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int,BitVec]",
                    "int"
                ]
            }
        },
        "ShippingDetail.__ne__": {
            "name": "__ne__",
            "location": 309,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/ordersupport/models/__init__.py": {},
    "digikey-api-master/digikey/v3/productinformation/api_client.py": {
        "ApiClient.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "configuration": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "header_name": [
                    "str",
                    "None",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "List[str]"
                ],
                "header_value": [
                    "str",
                    "None",
                    "bytes",
                    "Optional[str]"
                ],
                "cookie": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "ApiClient.__del__": {
            "name": "__del__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiClient.pool": {
            "name": "pool",
            "location": 85,
            "return": [
                "int",
                "Callable",
                "str",
                "Final",
                "Dict",
                "Set[str]",
                "OrderedDict",
                "ThreadPool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiClient.user_agent": {
            "name": "user_agent",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[str]",
                    "T",
                    "float",
                    "int"
                ]
            }
        },
        "ApiClient.set_default_header": {
            "name": "set_default_header",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "header_name": [
                    "str"
                ],
                "header_value": [
                    "str"
                ]
            }
        },
        "ApiClient.__call_api": {
            "name": "__call_api",
            "location": 102,
            "return": [
                "Optional[Exception]",
                "None",
                "Union[object,type]",
                "Tuple[None]"
            ],
            "arguments": {
                "self": [],
                "resource_path": [
                    "bool",
                    "str"
                ],
                "method": [
                    "str",
                    "int",
                    "bool"
                ],
                "path_params": [
                    "bool",
                    "None",
                    "str",
                    "List",
                    "Callable[[dict],dict]",
                    "Callable[dict,dict]",
                    "Optional[str]",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]",
                    "Callable[[Any],datetime.datetime]"
                ],
                "query_params": [
                    "bool",
                    "float",
                    "None",
                    "str"
                ],
                "header_params": [
                    "bytes",
                    "None",
                    "float",
                    "MutableSet[T]",
                    "int",
                    "MutableSet",
                    "List[Dict]",
                    "List[dict]"
                ],
                "body": [
                    "bool",
                    "None",
                    "Optional[int]",
                    "int",
                    "request_response"
                ],
                "post_params": [
                    "bool",
                    "List[str]",
                    "None"
                ],
                "files": [
                    "bool",
                    "None",
                    "TextIO",
                    "int",
                    "Optional[str]",
                    "str"
                ],
                "response_type": [
                    "bool",
                    "None",
                    "str",
                    "List[str]",
                    "int",
                    "Optional[str]"
                ],
                "auth_settings": [
                    "bool",
                    "str",
                    "None"
                ],
                "_return_http_data_only": [
                    "bool",
                    "None",
                    "Optional[int]"
                ],
                "collection_formats": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "_preload_content": [
                    "bool",
                    "str",
                    "int"
                ],
                "_request_timeout": [
                    "str",
                    "None",
                    "int",
                    "bool"
                ]
            }
        },
        "ApiClient.sanitize_for_serialization": {
            "name": "sanitize_for_serialization",
            "location": 179,
            "return": [
                "Optional[str]",
                "int",
                "None",
                "self_@_PRIMITIVE_TYPES",
                "List",
                "Tuple",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Optional[AbstractSet[str]]",
                    "Dict",
                    "AbstractSet",
                    "None"
                ]
            }
        },
        "ApiClient.deserialize": {
            "name": "deserialize",
            "location": 221,
            "return": [
                "str",
                "dict",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "Union[bytes,bytearray]",
                    "bytes",
                    "bytearray",
                    "Optional[dict]",
                    "None"
                ],
                "response_type": [
                    "str"
                ]
            }
        },
        "ApiClient.__deserialize": {
            "name": "__deserialize",
            "location": 243,
            "return": [
                "str",
                "None",
                "Optional[str]",
                "List",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str,Any]",
                    "bytes",
                    "Dict[str,Union[str,Any]]",
                    "Dict",
                    "Optional[dict]",
                    "int",
                    "Optional[int]",
                    "Iterable"
                ],
                "klass": [
                    "bytes",
                    "str"
                ]
            }
        },
        "ApiClient.call_api": {
            "name": "call_api",
            "location": 282,
            "return": [
                "str",
                "Tuple[Union[Any,Any]]",
                "Optional[Mapping[str,Any]]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "resource_path": [
                    "bool",
                    "str",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "method": [
                    "bool",
                    "str",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "path_params": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "query_params": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "header_params": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "body": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "post_params": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "files": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "response_type": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "auth_settings": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "async_req": [
                    "bool",
                    "None",
                    "Optional[int]"
                ],
                "_return_http_data_only": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "collection_formats": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "_preload_content": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "_request_timeout": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "ApiClient.request": {
            "name": "request",
            "location": 342,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "bool",
                    "List[str]",
                    "AbstractSet",
                    "Callable",
                    "AbstractSet[int]",
                    "AbstractSet[str]"
                ],
                "url": [
                    "str",
                    "Dict[str,Any]",
                    "bool",
                    "Sequence[str]",
                    "Dict",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "None"
                ],
                "query_params": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "bool",
                    "Sequence[str]",
                    "Dict",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]"
                ],
                "headers": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "bool",
                    "Sequence[str]",
                    "Dict",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]"
                ],
                "post_params": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "bool",
                    "Dict[str,str]"
                ],
                "body": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "bool",
                    "Dict[str,str]"
                ],
                "_preload_content": [
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "Sequence[str]",
                    "Dict",
                    "Optional[Dict[str,str]]"
                ],
                "_request_timeout": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "bool",
                    "Sequence[str]",
                    "Dict",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]"
                ]
            }
        },
        "ApiClient.parameters_to_tuples": {
            "name": "parameters_to_tuples",
            "location": 403,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "str",
                    "Iterable[str]",
                    "Dict"
                ],
                "collection_formats": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ApiClient.prepare_post_parameters": {
            "name": "prepare_post_parameters",
            "location": 433,
            "return": [
                "Union[(List[tuple], _T0)]"
            ],
            "arguments": {
                "self": [],
                "post_params": [
                    "str"
                ],
                "files": [
                    "str",
                    "None",
                    "List[str]",
                    "DefaultDict[str,List[Any]]",
                    "DefaultDict"
                ]
            }
        },
        "ApiClient.select_header_accept": {
            "name": "select_header_accept",
            "location": 461,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "accepts": [
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Dict[str,Union[str,bool]]",
                    "Optional[Dict[str,str]]"
                ]
            }
        },
        "ApiClient.select_header_content_type": {
            "name": "select_header_content_type",
            "location": 477,
            "return": [
                "str",
                "Text",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "content_types": [
                    "str"
                ]
            }
        },
        "ApiClient.update_params_for_auth": {
            "name": "update_params_for_auth",
            "location": 493,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "Callable",
                    "bool"
                ],
                "querys": [
                    "List[str]",
                    "Dict"
                ],
                "auth_settings": [
                    "Dict[str,Any]",
                    "Dict",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "ApiClient.__deserialize_file": {
            "name": "__deserialize_file",
            "location": 517,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "ApiClient.__deserialize_primitive": {
            "name": "__deserialize_primitive",
            "location": 541,
            "return": [
                "Dict[str,Dict[str,Any]]",
                "Dict",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict",
                    "bytes",
                    "str"
                ],
                "klass": [
                    "Dict",
                    "bytes",
                    "Union[bytes,bytearray,memoryview]",
                    "bytearray",
                    "memoryview"
                ]
            }
        },
        "ApiClient.__deserialize_object": {
            "name": "__deserialize_object",
            "location": 556,
            "return": [
                "int",
                "str",
                "Tuple[Union[str,int]]",
                "Dict[str,Any]",
                "complex",
                "List"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "complex",
                    "Tuple[str,int]",
                    "List",
                    "Tuple[Union[str,int]]"
                ]
            }
        },
        "ApiClient.__deserialize_date": {
            "name": "__deserialize_date",
            "location": 563,
            "return": [
                "str",
                "Optional[int]",
                "Optional[str]",
                "Optional[bool]",
                "Optional[Type]",
                "Dict[int,int]"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ]
            }
        },
        "ApiClient.__deserialize_datatime": {
            "name": "__deserialize_datatime",
            "location": 580,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ]
            }
        },
        "ApiClient.__hasattr": {
            "name": "__hasattr",
            "location": 602,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "object": [
                    "str",
                    "Optional[str]",
                    "None",
                    "FrozenSet[str]",
                    "frozenset"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "FrozenSet[str]",
                    "frozenset"
                ]
            }
        },
        "ApiClient.__deserialize_model": {
            "name": "__deserialize_model",
            "location": 605,
            "return": [
                "Dict",
                "Dict[str,Any]",
                "str",
                "Dict[AbstractSet,set[Any]]",
                "float",
                "Sequence",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[AbstractSet,set[Any]]",
                    "Dict[AbstractSet[str],Set[Any]]",
                    "Union[None,int,str]"
                ],
                "klass": [
                    "Callable",
                    "Union[str,int]",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/productinformation/configuration.py": {
        "Configuration.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration.set_default": {
            "name": "set_default",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[str]",
                    "Callable[[dict],None]",
                    "str",
                    "Callable[dict,None]",
                    "Dict[str,Any]",
                    "Optional[Dict]",
                    "Dict",
                    "None"
                ],
                "default": [
                    "int",
                    "List[str]",
                    "Callable[[dict],None]",
                    "str",
                    "Callable[dict,None]",
                    "Dict[str,Any]",
                    "Optional[Dict]",
                    "Dict",
                    "None"
                ]
            }
        },
        "Configuration.logger_file": {
            "name": "logger_file",
            "location": 117,
            "return": [
                "str",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict[str, str]",
                    "dict",
                    "int"
                ]
            }
        },
        "Configuration.debug": {
            "name": "debug",
            "location": 156,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict[str, Any]",
                    "int",
                    "Set[str]",
                    "str"
                ]
            }
        },
        "Configuration.logger_format": {
            "name": "logger_format",
            "location": 189,
            "return": [
                "str",
                "typing.Final"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[bytes, str]"
                ]
            }
        },
        "Configuration.get_api_key_with_prefix": {
            "name": "get_api_key_with_prefix",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Configuration.get_basic_auth_token": {
            "name": "get_basic_auth_token",
            "location": 212,
            "return": [
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration.auth_settings": {
            "name": "auth_settings",
            "location": 221,
            "return": [
                "Dict[(str, Dict[(str, Optional[str])])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration.to_debug_report": {
            "name": "to_debug_report",
            "location": 245,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "digikey-api-master/digikey/v3/productinformation/rest.py": {
        "RESTResponse.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resp": [
                    "FrozenSet[bytes]",
                    "frozenset",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "RESTResponse.getheaders": {
            "name": "getheaders",
            "location": 44,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "Dict[str, dict]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RESTResponse.getheader": {
            "name": "getheader",
            "location": 48,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Dict[str,Any]"
                ],
                "default": [
                    "str",
                    "List[str]",
                    "None",
                    "Dict[str,Any]"
                ]
            }
        },
        "RESTClientObject.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "configuration": [
                    "Mapping[str,Tuple[float,float,float]]",
                    "Mapping"
                ],
                "pools_size": [
                    "int",
                    "bool"
                ],
                "maxsize": [
                    "int",
                    "None",
                    "Tuple[str,int]",
                    "Optional[int]",
                    "Tuple[Union[str,int]]"
                ]
            }
        },
        "RESTClientObject.request": {
            "name": "request",
            "location": 108,
            "return": [
                "Set[str]",
                "Dict[str,Union[Any,Any,str]]",
                "List[str]",
                "bytes",
                "List[Match]",
                "Dict[str,str]",
                "Generator[Union[Any,None,None]]",
                "Dict[str,Any]",
                "str",
                "bool",
                "None",
                "List",
                "Tuple[Union[str,str,str]]",
                "RESTResponse"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Dict",
                    "Optional[dict]"
                ],
                "url": [
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "str",
                    "urllib.requesRequest",
                    "None"
                ],
                "query_params": [
                    "str",
                    "None",
                    "bytes",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "Optional[Dict[str,Any]]"
                ],
                "headers": [
                    "str",
                    "None",
                    "bytes",
                    "Dict",
                    "Dict[str,Any]"
                ],
                "body": [
                    "str",
                    "Dict[str,Any]",
                    "None",
                    "int"
                ],
                "post_params": [
                    "bool",
                    "None",
                    "Optional[Dict[str,str]]",
                    "Dict[str,Any]",
                    "Dict[str,str]"
                ],
                "_preload_content": [
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "int",
                    "Dict"
                ],
                "_request_timeout": [
                    "int",
                    "Union[int, float]"
                ]
            }
        },
        "RESTClientObject.GET": {
            "name": "GET",
            "location": 232,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Optional[str]",
                    "Dict",
                    "Callable",
                    "None"
                ],
                "headers": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Dict",
                    "Callable"
                ],
                "query_params": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Dict",
                    "Callable"
                ],
                "_preload_content": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Dict",
                    "Callable"
                ],
                "_request_timeout": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Dict",
                    "Callable"
                ]
            }
        },
        "RESTClientObject.HEAD": {
            "name": "HEAD",
            "location": 240,
            "return": [
                "int",
                "dict",
                "Dict[str, Any]",
                "Dict[str, Dict[str, str]]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Dict",
                    "str",
                    "Optional[str]",
                    "bytes",
                    "Dict[str,Any]",
                    "None"
                ],
                "headers": [
                    "Dict",
                    "None",
                    "str",
                    "Optional[str]",
                    "bytes",
                    "Dict[str,Any]"
                ],
                "query_params": [
                    "Dict",
                    "None",
                    "str",
                    "Optional[str]",
                    "bytes",
                    "Dict[str,Any]"
                ],
                "_preload_content": [
                    "bool",
                    "Dict",
                    "Optional[str]",
                    "str",
                    "bytes",
                    "Dict[str,Any]"
                ],
                "_request_timeout": [
                    "Dict",
                    "None",
                    "str",
                    "Optional[str]",
                    "bytes",
                    "Dict[str,Any]"
                ]
            }
        },
        "RESTClientObject.OPTIONS": {
            "name": "OPTIONS",
            "location": 248,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "int",
                    "str"
                ],
                "headers": [
                    "int",
                    "str",
                    "None"
                ],
                "query_params": [
                    "int",
                    "str",
                    "None"
                ],
                "post_params": [
                    "int",
                    "str",
                    "None"
                ],
                "body": [
                    "int",
                    "str",
                    "None"
                ],
                "_preload_content": [
                    "bool",
                    "int",
                    "str"
                ],
                "_request_timeout": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "RESTClientObject.DELETE": {
            "name": "DELETE",
            "location": 258,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Callable"
                ],
                "headers": [
                    "str",
                    "Callable",
                    "None"
                ],
                "query_params": [
                    "str",
                    "Callable",
                    "None"
                ],
                "body": [
                    "str",
                    "Callable",
                    "None"
                ],
                "_preload_content": [
                    "bool",
                    "str",
                    "Callable"
                ],
                "_request_timeout": [
                    "str",
                    "Callable",
                    "None"
                ]
            }
        },
        "RESTClientObject.POST": {
            "name": "POST",
            "location": 267,
            "return": [
                "set",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "int"
                ],
                "headers": [
                    "int",
                    "None"
                ],
                "query_params": [
                    "int",
                    "None"
                ],
                "post_params": [
                    "int",
                    "None"
                ],
                "body": [
                    "int",
                    "None"
                ],
                "_preload_content": [
                    "int",
                    "bool"
                ],
                "_request_timeout": [
                    "int",
                    "None"
                ]
            }
        },
        "RESTClientObject.PUT": {
            "name": "PUT",
            "location": 277,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Optional[Dict[str, Any]]",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Callable",
                    "float",
                    "MutableMapping"
                ],
                "headers": [
                    "Callable",
                    "float",
                    "None",
                    "MutableMapping"
                ],
                "query_params": [
                    "Callable",
                    "float",
                    "None",
                    "MutableMapping"
                ],
                "post_params": [
                    "Callable",
                    "float",
                    "None",
                    "MutableMapping"
                ],
                "body": [
                    "Callable",
                    "float",
                    "None",
                    "MutableMapping"
                ],
                "_preload_content": [
                    "bool",
                    "Callable",
                    "float",
                    "MutableMapping"
                ],
                "_request_timeout": [
                    "Callable",
                    "float",
                    "None",
                    "MutableMapping"
                ]
            }
        },
        "RESTClientObject.PATCH": {
            "name": "PATCH",
            "location": 287,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Union[bool, str]]",
                "bytes",
                "Dict[str, Set[str]]",
                "Dict[str, List[str]]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "int",
                    "str",
                    "float",
                    "Dict",
                    "MutableMapping",
                    "Optional[int]",
                    "None"
                ],
                "headers": [
                    "int",
                    "None",
                    "str",
                    "float",
                    "Dict",
                    "MutableMapping",
                    "Optional[int]"
                ],
                "query_params": [
                    "int",
                    "None",
                    "str",
                    "float",
                    "Dict",
                    "MutableMapping",
                    "Optional[int]"
                ],
                "post_params": [
                    "int",
                    "None",
                    "str",
                    "float",
                    "Dict",
                    "MutableMapping",
                    "Optional[int]"
                ],
                "body": [
                    "int",
                    "None",
                    "str",
                    "float",
                    "Dict",
                    "MutableMapping",
                    "Optional[int]"
                ],
                "_preload_content": [
                    "bool",
                    "int",
                    "str",
                    "float",
                    "Dict",
                    "MutableMapping",
                    "Optional[int]"
                ],
                "_request_timeout": [
                    "int",
                    "None",
                    "str",
                    "float",
                    "Dict",
                    "MutableMapping",
                    "Optional[int]"
                ]
            }
        },
        "ApiException.__init__": {
            "name": "__init__",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "List[dict]",
                    "None",
                    "int",
                    "List[str]",
                    "str",
                    "bool"
                ],
                "reason": [
                    "str",
                    "Callable",
                    "None"
                ],
                "http_resp": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "ApiException.__str__": {
            "name": "__str__",
            "location": 312,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "digikey-api-master/digikey/v3/productinformation/__init__.py": {},
    "digikey-api-master/digikey/v3/productinformation/api/part_search_api.py": {
        "PartSearchApi.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_client": [
                    "None"
                ]
            }
        },
        "PartSearchApi.digi_reel_pricing": {
            "name": "digi_reel_pricing",
            "location": 36,
            "return": [
                "List[dict]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "digi_key_part_number": [
                    "Dict"
                ],
                "requested_quantity": [
                    "Dict"
                ],
                "authorization": [
                    "Dict"
                ],
                "x_digikey_client_id": [
                    "Dict"
                ]
            }
        },
        "PartSearchApi.digi_reel_pricing_with_http_info": {
            "name": "digi_reel_pricing_with_http_info",
            "location": 66,
            "return": [
                "Optional[Dict]",
                "str",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "digi_key_part_number": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "requested_quantity": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "authorization": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "x_digikey_client_id": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "PartSearchApi.keyword_search": {
            "name": "keyword_search",
            "location": 177,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "authorization": [
                    "str",
                    "bool",
                    "Dict[str,str]",
                    "Optional[bool]",
                    "None"
                ],
                "x_digikey_client_id": [
                    "str",
                    "bool",
                    "Dict[str,str]",
                    "Optional[bool]",
                    "None"
                ]
            }
        },
        "PartSearchApi.keyword_search_with_http_info": {
            "name": "keyword_search_with_http_info",
            "location": 207,
            "return": [
                "Optional[int]",
                "dict",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "authorization": [
                    "str",
                    "float",
                    "Callable[[Any],bool]",
                    "Callable[Any,bool]"
                ],
                "x_digikey_client_id": [
                    "str",
                    "float",
                    "Callable[[Any],bool]",
                    "Callable[Any,bool]"
                ]
            }
        },
        "PartSearchApi.manufacturer_product_details": {
            "name": "manufacturer_product_details",
            "location": 312,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "authorization": [
                    "str",
                    "bytes",
                    "Dict[str,str]",
                    "Union[int,None]",
                    "int",
                    "List[Dict[str,Any]]",
                    "None",
                    "List[dict[str,Any]]"
                ],
                "x_digikey_client_id": [
                    "str",
                    "bytes",
                    "Dict[str,str]",
                    "Union[int,None]",
                    "int",
                    "List[Dict[str,Any]]",
                    "None",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "PartSearchApi.manufacturer_product_details_with_http_info": {
            "name": "manufacturer_product_details_with_http_info",
            "location": 341,
            "return": [
                "dict",
                "Dict[str, Any]",
                "float"
            ],
            "arguments": {
                "self": [],
                "authorization": [
                    "str",
                    "bool",
                    "float",
                    "Callable[[Any],bool]",
                    "Callable[Any,bool]"
                ],
                "x_digikey_client_id": [
                    "str",
                    "bool",
                    "float",
                    "Callable[[Any],bool]",
                    "Callable[Any,bool]"
                ]
            }
        },
        "PartSearchApi.product_details": {
            "name": "product_details",
            "location": 445,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "digi_key_part_number": [
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ],
                "authorization": [
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ],
                "x_digikey_client_id": [
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ]
            }
        },
        "PartSearchApi.product_details_with_http_info": {
            "name": "product_details_with_http_info",
            "location": 475,
            "return": [
                "dict",
                "Optional[Dict]",
                "Hashable",
                "str"
            ],
            "arguments": {
                "self": [],
                "digi_key_part_number": [
                    "List[Dict[str,Any]]",
                    "bool",
                    "List[dict[str,Any]]",
                    "str",
                    "List",
                    "Dict",
                    "Tuple"
                ],
                "authorization": [
                    "List[Dict[str,Any]]",
                    "bool",
                    "List[dict[str,Any]]",
                    "str",
                    "List",
                    "Dict",
                    "Tuple"
                ],
                "x_digikey_client_id": [
                    "List[Dict[str,Any]]",
                    "bool",
                    "List[dict[str,Any]]",
                    "str",
                    "List",
                    "Dict",
                    "Tuple"
                ]
            }
        },
        "PartSearchApi.suggested_parts": {
            "name": "suggested_parts",
            "location": 580,
            "return": [
                "bool",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "part_number": [
                    "bytes"
                ],
                "authorization": [
                    "bytes"
                ],
                "x_digikey_client_id": [
                    "bytes"
                ]
            }
        },
        "PartSearchApi.suggested_parts_with_http_info": {
            "name": "suggested_parts_with_http_info",
            "location": 609,
            "return": [
                "dict",
                "str",
                "bool",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "part_number": [
                    "int",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "authorization": [
                    "int",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "x_digikey_client_id": [
                    "int",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/productinformation/api/__init__.py": {},
    "digikey-api-master/digikey/v3/productinformation/models/api_error_response.py": {
        "ApiErrorResponse.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error_response_version": [
                    "Optional[str]",
                    "None",
                    "Optional[Set[int]]",
                    "bool",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Set[int]",
                    "Dict[str,Any]"
                ],
                "status_code": [
                    "int",
                    "None",
                    "List[str]",
                    "str",
                    "Union[None,int]",
                    "Optional[str]"
                ],
                "error_message": [
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "str",
                    "bool",
                    "int"
                ],
                "error_details": [
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "str",
                    "bool",
                    "int"
                ],
                "request_id": [
                    "Optional[str]",
                    "None",
                    "str"
                ],
                "validation_errors": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Optional[Union[str,Any]]",
                    "Any"
                ]
            }
        },
        "ApiErrorResponse.error_response_version": {
            "name": "error_response_version",
            "location": 86,
            "return": [
                "dict[tuple[typing.Union[int,int]], str]",
                "str",
                "dict[str, typing.Any]",
                "typing.Pattern",
                "set[str]",
                "dict[str, list[typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "error_response_version": [
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "Union[None, Dict[str, str]]"
                ]
            }
        },
        "ApiErrorResponse.status_code": {
            "name": "status_code",
            "location": 107,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "status_code": [
                    "int"
                ]
            }
        },
        "ApiErrorResponse.error_message": {
            "name": "error_message",
            "location": 128,
            "return": [
                "str",
                "int",
                "bytes",
                "set[str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "error_message": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Optional[str]]",
                    "Exception",
                    "Callable[[str], bool]",
                    "List[str]"
                ]
            }
        },
        "ApiErrorResponse.error_details": {
            "name": "error_details",
            "location": 149,
            "return": [
                "str",
                "int",
                "bytes",
                "set[str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "error_details": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Optional[str]]",
                    "Exception",
                    "Callable[[str], bool]",
                    "List[str]"
                ]
            }
        },
        "ApiErrorResponse.request_id": {
            "name": "request_id",
            "location": 170,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "request_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "ApiErrorResponse.validation_errors": {
            "name": "validation_errors",
            "location": 191,
            "return": [
                "str",
                "int",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "validation_errors": [
                    "str",
                    "int"
                ]
            }
        },
        "ApiErrorResponse.to_dict": {
            "name": "to_dict",
            "location": 201,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiErrorResponse.to_str": {
            "name": "to_str",
            "location": 228,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiErrorResponse.__repr__": {
            "name": "__repr__",
            "location": 232,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiErrorResponse.__eq__": {
            "name": "__eq__",
            "location": 236,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ApiErrorResponse.__ne__": {
            "name": "__ne__",
            "location": 243,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/productinformation/models/api_validation_error.py": {
        "ApiValidationError.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "bool",
                    "None",
                    "Optional[str]",
                    "Optional[Entity]",
                    "str",
                    "Optional[Exception]",
                    "Exception"
                ],
                "message": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "Optional[float]",
                    "float",
                    "Optional[Callable[[Any],bool]]",
                    "Callable[Any,bool]"
                ]
            }
        },
        "ApiValidationError.field": {
            "name": "field",
            "location": 66,
            "return": [
                "tuple[str]",
                "dict[str, tuple[typing.Union[str,str]]]",
                "typing.Mapping",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Container[str]",
                    "Dict[str, Any]",
                    "AbstractSet[str]",
                    "deque",
                    "str"
                ]
            }
        },
        "ApiValidationError.message": {
            "name": "message",
            "location": 87,
            "return": [
                "typing.TextIO",
                "str",
                "typing.Deque",
                "typing.Type"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ApiValidationError.to_dict": {
            "name": "to_dict",
            "location": 97,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiValidationError.to_str": {
            "name": "to_str",
            "location": 124,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiValidationError.__repr__": {
            "name": "__repr__",
            "location": 128,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiValidationError.__eq__": {
            "name": "__eq__",
            "location": 132,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Union[List[str],List[Any]]",
                    "List[str]",
                    "MutableMapping[str,Any]",
                    "MutableMapping"
                ]
            }
        },
        "ApiValidationError.__ne__": {
            "name": "__ne__",
            "location": 139,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/productinformation/models/associated_product.py": {
        "AssociatedProduct.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "product_url": [
                    "Optional[float]",
                    "None",
                    "bool",
                    "Optional[bool]",
                    "str",
                    "float"
                ],
                "manufacturer_part_number": [
                    "Optional[bool]",
                    "None",
                    "Mapping",
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[Union[str,Any]]",
                    "Any"
                ],
                "minimum_order_quantity": [
                    "Optional[str]",
                    "None",
                    "Optional[float]",
                    "Sequence[str]",
                    "str",
                    "Optional[bool]",
                    "float",
                    "bool"
                ],
                "non_stock": [
                    "Optional[float]",
                    "None",
                    "Optional[str]",
                    "float",
                    "Optional[bool]",
                    "str",
                    "bool"
                ],
                "packaging": [
                    "Optional[str]",
                    "None",
                    "Optional[float]",
                    "str",
                    "Optional[bool]",
                    "float",
                    "bool"
                ],
                "quantity_available": [
                    "Optional[float]",
                    "None",
                    "Optional[str]",
                    "float",
                    "Optional[bool]",
                    "str",
                    "bool"
                ],
                "digi_key_part_number": [
                    "None",
                    "Optional[int]",
                    "int",
                    "str",
                    "Optional[str]",
                    "Dict[cirq.Qid,int]",
                    "Optional[Dict[cirq.Qid,int]]",
                    "bool",
                    "Optional[bool]",
                    "Union[int,str]"
                ],
                "product_description": [
                    "Optional[float]",
                    "None",
                    "Optional[bool]",
                    "float",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "unit_price": [
                    "Optional[float]",
                    "None",
                    "Optional[str]",
                    "float",
                    "Optional[bool]",
                    "str",
                    "bool"
                ],
                "manufacturer": [
                    "Optional[str]",
                    "None",
                    "Optional[float]",
                    "str",
                    "Optional[bool]",
                    "float",
                    "bool"
                ],
                "manufacturer_public_quantity": [
                    "Optional[str]",
                    "None",
                    "Optional[float]",
                    "Sequence[str]",
                    "str",
                    "Optional[bool]",
                    "float",
                    "bool"
                ],
                "quantity_on_order": [
                    "Optional[float]",
                    "None",
                    "Optional[str]",
                    "float",
                    "Optional[bool]",
                    "str",
                    "bool"
                ],
                "dk_plus_restriction": [
                    "Optional[str]",
                    "None",
                    "Optional[float]",
                    "Sequence[str]",
                    "str",
                    "Optional[bool]",
                    "float",
                    "bool"
                ],
                "marketplace": [
                    "Optional[str]",
                    "None",
                    "Optional[float]",
                    "str",
                    "Optional[bool]",
                    "float",
                    "bool"
                ],
                "supplier_direct_ship": [
                    "Optional[str]",
                    "None",
                    "Optional[float]",
                    "Sequence[str]",
                    "str",
                    "Optional[bool]",
                    "float",
                    "bool"
                ]
            }
        },
        "AssociatedProduct.product_url": {
            "name": "product_url",
            "location": 132,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "product_url": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "AssociatedProduct.manufacturer_part_number": {
            "name": "manufacturer_part_number",
            "location": 155,
            "return": [
                "int",
                "str",
                "list[str]",
                "set[str]",
                "typing.DefaultDict"
            ],
            "arguments": {
                "self": [],
                "manufacturer_part_number": [
                    "str",
                    "bool",
                    "dict",
                    "List[str]",
                    "tuple"
                ]
            }
        },
        "AssociatedProduct.minimum_order_quantity": {
            "name": "minimum_order_quantity",
            "location": 178,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "minimum_order_quantity": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "AssociatedProduct.non_stock": {
            "name": "non_stock",
            "location": 201,
            "return": [
                "typing.DefaultDict",
                "int",
                "dict[str, typing.Any]",
                "set[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "non_stock": [
                    "bool",
                    "str",
                    "float",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "AssociatedProduct.packaging": {
            "name": "packaging",
            "location": 223,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "packaging": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "AssociatedProduct.quantity_available": {
            "name": "quantity_available",
            "location": 245,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "quantity_available": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "AssociatedProduct.digi_key_part_number": {
            "name": "digi_key_part_number",
            "location": 268,
            "return": [
                "typing.Iterator",
                "bytes",
                "set[str]",
                "str",
                "dict[str, bytes]",
                "None",
                "typing.Type"
            ],
            "arguments": {
                "self": [],
                "digi_key_part_number": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "AssociatedProduct.product_description": {
            "name": "product_description",
            "location": 291,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "product_description": [
                    "int",
                    "str"
                ]
            }
        },
        "AssociatedProduct.unit_price": {
            "name": "unit_price",
            "location": 314,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "unit_price": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "AssociatedProduct.manufacturer": {
            "name": "manufacturer",
            "location": 336,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "manufacturer": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "AssociatedProduct.manufacturer_public_quantity": {
            "name": "manufacturer_public_quantity",
            "location": 358,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "manufacturer_public_quantity": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "AssociatedProduct.quantity_on_order": {
            "name": "quantity_on_order",
            "location": 381,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "quantity_on_order": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "AssociatedProduct.dk_plus_restriction": {
            "name": "dk_plus_restriction",
            "location": 404,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "dk_plus_restriction": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "AssociatedProduct.marketplace": {
            "name": "marketplace",
            "location": 427,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "marketplace": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "AssociatedProduct.supplier_direct_ship": {
            "name": "supplier_direct_ship",
            "location": 450,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "supplier_direct_ship": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "AssociatedProduct.to_dict": {
            "name": "to_dict",
            "location": 461,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssociatedProduct.to_str": {
            "name": "to_str",
            "location": 488,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssociatedProduct.__repr__": {
            "name": "__repr__",
            "location": 492,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssociatedProduct.__eq__": {
            "name": "__eq__",
            "location": 496,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AbstractSet",
                    "Union[int,float]",
                    "int",
                    "Tuple[int,int]",
                    "float",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "AssociatedProduct.__ne__": {
            "name": "__ne__",
            "location": 503,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/productinformation/models/basic_product.py": {
        "BasicProduct.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manufacturer_part_number": [
                    "None",
                    "Optional[str]",
                    "bool",
                    "str",
                    "Optional[float]",
                    "float",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "minimum_order_quantity": [
                    "None",
                    "Optional[bool]",
                    "bool",
                    "float",
                    "Optional[str]",
                    "str",
                    "Optional[float]",
                    "List[str]",
                    "Optional[List[str]]"
                ],
                "non_stock": [
                    "None",
                    "Optional[bool]",
                    "bool",
                    "str",
                    "float",
                    "Optional[str]",
                    "Optional[float]"
                ],
                "packaging": [
                    "None",
                    "Optional[str]",
                    "str",
                    "float",
                    "Optional[bool]",
                    "bool",
                    "Optional[float]"
                ],
                "quantity_available": [
                    "None",
                    "Optional[bool]",
                    "bool",
                    "str",
                    "float",
                    "Optional[str]",
                    "Optional[float]"
                ],
                "digi_key_part_number": [
                    "Optional[str]",
                    "None",
                    "Dict",
                    "str",
                    "Optional[Set[int]]",
                    "Set[int]"
                ],
                "product_description": [
                    "Optional[bool]",
                    "None",
                    "Optional[List[str]]",
                    "bool",
                    "str",
                    "Optional[List[custom_index]]",
                    "List[str]",
                    "List[custom_index]",
                    "Optional[str]"
                ],
                "unit_price": [
                    "None",
                    "Optional[bool]",
                    "bool",
                    "str",
                    "float",
                    "Optional[str]",
                    "Optional[float]"
                ],
                "manufacturer": [
                    "None",
                    "Optional[str]",
                    "str",
                    "float",
                    "Optional[bool]",
                    "bool",
                    "Optional[float]"
                ],
                "manufacturer_public_quantity": [
                    "None",
                    "Optional[bool]",
                    "bool",
                    "float",
                    "Optional[str]",
                    "str",
                    "Optional[float]",
                    "List[str]",
                    "Optional[List[str]]"
                ],
                "quantity_on_order": [
                    "None",
                    "Optional[bool]",
                    "bool",
                    "str",
                    "float",
                    "Optional[str]",
                    "Optional[float]"
                ],
                "dk_plus_restriction": [
                    "None",
                    "Optional[bool]",
                    "bool",
                    "float",
                    "Optional[str]",
                    "str",
                    "Optional[float]",
                    "List[str]",
                    "Optional[List[str]]"
                ],
                "marketplace": [
                    "None",
                    "Optional[str]",
                    "str",
                    "float",
                    "Optional[bool]",
                    "bool",
                    "Optional[float]"
                ],
                "supplier_direct_ship": [
                    "None",
                    "Optional[bool]",
                    "bool",
                    "float",
                    "Optional[str]",
                    "str",
                    "Optional[float]",
                    "List[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "BasicProduct.manufacturer_part_number": {
            "name": "manufacturer_part_number",
            "location": 127,
            "return": [
                "int",
                "str",
                "list[str]",
                "set[str]",
                "typing.DefaultDict"
            ],
            "arguments": {
                "self": [],
                "manufacturer_part_number": [
                    "str",
                    "bool",
                    "dict",
                    "List[str]",
                    "tuple"
                ]
            }
        },
        "BasicProduct.minimum_order_quantity": {
            "name": "minimum_order_quantity",
            "location": 150,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "minimum_order_quantity": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BasicProduct.non_stock": {
            "name": "non_stock",
            "location": 173,
            "return": [
                "typing.DefaultDict",
                "int",
                "dict[str, typing.Any]",
                "set[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "non_stock": [
                    "bool",
                    "str",
                    "float",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "BasicProduct.packaging": {
            "name": "packaging",
            "location": 195,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "packaging": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BasicProduct.quantity_available": {
            "name": "quantity_available",
            "location": 217,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "quantity_available": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BasicProduct.digi_key_part_number": {
            "name": "digi_key_part_number",
            "location": 240,
            "return": [
                "typing.Iterator",
                "bytes",
                "set[str]",
                "str",
                "dict[str, bytes]",
                "None",
                "typing.Type"
            ],
            "arguments": {
                "self": [],
                "digi_key_part_number": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "BasicProduct.product_description": {
            "name": "product_description",
            "location": 263,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "product_description": [
                    "int",
                    "str"
                ]
            }
        },
        "BasicProduct.unit_price": {
            "name": "unit_price",
            "location": 286,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "unit_price": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BasicProduct.manufacturer": {
            "name": "manufacturer",
            "location": 308,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "manufacturer": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BasicProduct.manufacturer_public_quantity": {
            "name": "manufacturer_public_quantity",
            "location": 330,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "manufacturer_public_quantity": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BasicProduct.quantity_on_order": {
            "name": "quantity_on_order",
            "location": 353,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "quantity_on_order": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BasicProduct.dk_plus_restriction": {
            "name": "dk_plus_restriction",
            "location": 376,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "dk_plus_restriction": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BasicProduct.marketplace": {
            "name": "marketplace",
            "location": 399,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "marketplace": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BasicProduct.supplier_direct_ship": {
            "name": "supplier_direct_ship",
            "location": 422,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "supplier_direct_ship": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BasicProduct.to_dict": {
            "name": "to_dict",
            "location": 433,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicProduct.to_str": {
            "name": "to_str",
            "location": 460,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicProduct.__repr__": {
            "name": "__repr__",
            "location": 464,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicProduct.__eq__": {
            "name": "__eq__",
            "location": 468,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AbstractSet",
                    "Union[int,float]",
                    "int",
                    "Tuple[int,int]",
                    "float",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "BasicProduct.__ne__": {
            "name": "__ne__",
            "location": 475,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/productinformation/models/digi_reel_pricing.py": {
        "DigiReelPricing.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reeling_fee": [
                    "bool",
                    "None",
                    "Optional[Tuple[float,float]]",
                    "Optional[float]",
                    "Tuple[Union[float,float]]",
                    "Optional[int]",
                    "float",
                    "Optional[Type[Any]]",
                    "Type"
                ],
                "unit_price": [
                    "bool",
                    "None",
                    "Optional[Tuple[float,float]]",
                    "Optional[float]",
                    "Tuple[Union[float,float]]",
                    "Optional[int]",
                    "float",
                    "Optional[Type[Any]]",
                    "Type"
                ],
                "extended_price": [
                    "bool",
                    "None",
                    "Optional[Tuple[float,float]]",
                    "Optional[float]",
                    "Tuple[Union[float,float]]",
                    "Optional[int]",
                    "float",
                    "Optional[Type[Any]]",
                    "Type"
                ],
                "requested_quantity": [
                    "None",
                    "Optional[float]",
                    "bool",
                    "float",
                    "str",
                    "Optional[str]",
                    "Tuple[Union[Any,Any]]",
                    "int",
                    "Optional[Union[AbstractSetIntStr,MappingIntStrAny]]",
                    "Optional[Tuple[Any,Any]]"
                ],
                "search_locale_used": [
                    "Optional[int]",
                    "None",
                    "Optional[float]",
                    "int",
                    "Optional[Type[Any]]",
                    "float",
                    "Optional[Tuple[float,float]]",
                    "Type",
                    "Tuple[Union[float,float]]"
                ]
            }
        },
        "DigiReelPricing.reeling_fee": {
            "name": "reeling_fee",
            "location": 82,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "reeling_fee": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "DigiReelPricing.unit_price": {
            "name": "unit_price",
            "location": 105,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "unit_price": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "DigiReelPricing.extended_price": {
            "name": "extended_price",
            "location": 128,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "extended_price": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "DigiReelPricing.requested_quantity": {
            "name": "requested_quantity",
            "location": 151,
            "return": [
                "str",
                "int",
                "tuple[typing.Union[typing.Literal,typing.Literal]]",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "requested_quantity": [
                    "Dict[str, str]"
                ]
            }
        },
        "DigiReelPricing.search_locale_used": {
            "name": "search_locale_used",
            "location": 173,
            "return": [
                "int",
                "str",
                "set[int]"
            ],
            "arguments": {
                "self": [],
                "search_locale_used": [
                    "int",
                    "str",
                    "List['cirq.Circuit']"
                ]
            }
        },
        "DigiReelPricing.to_dict": {
            "name": "to_dict",
            "location": 183,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DigiReelPricing.to_str": {
            "name": "to_str",
            "location": 210,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DigiReelPricing.__repr__": {
            "name": "__repr__",
            "location": 214,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DigiReelPricing.__eq__": {
            "name": "__eq__",
            "location": 218,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int,BitVec]",
                    "int"
                ]
            }
        },
        "DigiReelPricing.__ne__": {
            "name": "__ne__",
            "location": 225,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/productinformation/models/filters.py": {
        "Filters.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "taxonomy_ids": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "manufacturer_ids": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "parametric_filters": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Optional[Any]",
                    "Any",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "Filters.taxonomy_ids": {
            "name": "taxonomy_ids",
            "location": 72,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "taxonomy_ids": [
                    "str",
                    "int"
                ]
            }
        },
        "Filters.manufacturer_ids": {
            "name": "manufacturer_ids",
            "location": 95,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "manufacturer_ids": [
                    "str",
                    "int"
                ]
            }
        },
        "Filters.parametric_filters": {
            "name": "parametric_filters",
            "location": 118,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "int",
                "None"
            ],
            "arguments": {
                "self": [],
                "parametric_filters": [
                    "bool",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "Filters.to_dict": {
            "name": "to_dict",
            "location": 129,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Filters.to_str": {
            "name": "to_str",
            "location": 156,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Filters.__repr__": {
            "name": "__repr__",
            "location": 160,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Filters.__eq__": {
            "name": "__eq__",
            "location": 164,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[Cell]",
                    "None"
                ]
            }
        },
        "Filters.__ne__": {
            "name": "__ne__",
            "location": 171,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/productinformation/models/iso_search_locale.py": {
        "IsoSearchLocale.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "site": [
                    "bool",
                    "None",
                    "float",
                    "Optional[int]",
                    "str",
                    "Optional[Type[Any]]",
                    "Type",
                    "Optional[Tuple[float,float]]",
                    "Tuple[Union[float,float]]"
                ],
                "language": [
                    "bool",
                    "None",
                    "float",
                    "Optional[int]",
                    "str",
                    "Optional[Type[Any]]",
                    "Type",
                    "Optional[Tuple[float,float]]",
                    "Tuple[Union[float,float]]"
                ],
                "currency": [
                    "bool",
                    "None",
                    "float",
                    "Optional[int]",
                    "str",
                    "Optional[Type[Any]]",
                    "Type",
                    "Optional[Tuple[float,float]]",
                    "Tuple[Union[float,float]]"
                ],
                "ship_to_country": [
                    "Optional[int]",
                    "None",
                    "str",
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "IsoSearchLocale.site": {
            "name": "site",
            "location": 77,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "site": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "IsoSearchLocale.language": {
            "name": "language",
            "location": 100,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "language": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "IsoSearchLocale.currency": {
            "name": "currency",
            "location": 123,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "currency": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "IsoSearchLocale.ship_to_country": {
            "name": "ship_to_country",
            "location": 146,
            "return": [
                "float",
                "list[str]",
                "int",
                "str",
                "set[str]",
                "typing.DefaultDict"
            ],
            "arguments": {
                "self": [],
                "ship_to_country": [
                    "int",
                    "str",
                    "List[Dict]"
                ]
            }
        },
        "IsoSearchLocale.to_dict": {
            "name": "to_dict",
            "location": 157,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsoSearchLocale.to_str": {
            "name": "to_str",
            "location": 184,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsoSearchLocale.__repr__": {
            "name": "__repr__",
            "location": 188,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsoSearchLocale.__eq__": {
            "name": "__eq__",
            "location": 192,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "Union[int,BitVec]",
                    "bool"
                ]
            }
        },
        "IsoSearchLocale.__ne__": {
            "name": "__ne__",
            "location": 199,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/productinformation/models/keyword_search_request.py": {
        "KeywordSearchRequest.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keywords": [
                    "Optional[dict]",
                    "bool",
                    "None",
                    "Dict"
                ],
                "record_count": [
                    "Optional[str]",
                    "None",
                    "int",
                    "Optional[int]",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "record_start_position": [
                    "float",
                    "None",
                    "int",
                    "Optional[float]",
                    "Optional[int]"
                ],
                "filters": [
                    "None",
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "int"
                ],
                "sort": [
                    "int",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "requested_quantity": [
                    "str",
                    "None",
                    "Dict",
                    "int",
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "search_options": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "Optional[Union[int,float]]",
                    "float",
                    "bool"
                ],
                "exclude_market_place_products": [
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool",
                    "Dict[str,str]",
                    "Optional[str]",
                    "List[str]",
                    "Optional[Dict[str,str]]",
                    "int",
                    "Optional[Dict[str,Any]]",
                    "Optional[List[str]]"
                ]
            }
        },
        "KeywordSearchRequest.keywords": {
            "name": "keywords",
            "location": 96,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "keywords": [
                    "Optional[int]",
                    "Set[str]"
                ]
            }
        },
        "KeywordSearchRequest.record_count": {
            "name": "record_count",
            "location": 125,
            "return": [
                "int",
                "float",
                "set[str]",
                "typing.Callable[typing.Any, tuple[]]"
            ],
            "arguments": {
                "self": [],
                "record_count": [
                    "Optional[int]",
                    "Optional[Any]",
                    "float"
                ]
            }
        },
        "KeywordSearchRequest.record_start_position": {
            "name": "record_start_position",
            "location": 152,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "self": [],
                "record_start_position": [
                    "int",
                    "float",
                    "str",
                    "Optional[int]",
                    "bool",
                    "Tuple[int, int]"
                ]
            }
        },
        "KeywordSearchRequest.filters": {
            "name": "filters",
            "location": 174,
            "return": [
                "dict[str, tuple[typing.Union[typing.Any,typing.Any]]]",
                "list[]",
                "dict[typing.Any, str]",
                "typing.Generator[typing.Union[typing.Any,None,None]]",
                "int",
                "dict[, ]",
                "typing.OrderedDict"
            ],
            "arguments": {
                "self": [],
                "filters": [
                    "float",
                    "bool",
                    "dict"
                ]
            }
        },
        "KeywordSearchRequest.sort": {
            "name": "sort",
            "location": 195,
            "return": [
                "list[int]",
                "int",
                "None",
                "typing.ClassVar"
            ],
            "arguments": {
                "self": [],
                "sort": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "KeywordSearchRequest.requested_quantity": {
            "name": "requested_quantity",
            "location": 217,
            "return": [
                "str",
                "int",
                "tuple[typing.Union[typing.Literal,typing.Literal]]",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "requested_quantity": [
                    "Dict[str, str]"
                ]
            }
        },
        "KeywordSearchRequest.search_options": {
            "name": "search_options",
            "location": 240,
            "return": [
                "float",
                "typing.Pattern",
                "dict[str, str]",
                "dict[str, dict[str, typing.Any]]",
                "dict[str, dict[, ]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "search_options": [
                    "str",
                    "bool",
                    "bytes",
                    "Set[str]"
                ]
            }
        },
        "KeywordSearchRequest.exclude_market_place_products": {
            "name": "exclude_market_place_products",
            "location": 263,
            "return": [
                "dict[str, typing.Any]",
                "dict[str, dict[str, typing.Any]]",
                "dict[int, typing.Any]",
                "int",
                "dict[str, tuple[typing.Union[typing.Any,str]]]"
            ],
            "arguments": {
                "self": [],
                "exclude_market_place_products": [
                    "str",
                    "int"
                ]
            }
        },
        "KeywordSearchRequest.to_dict": {
            "name": "to_dict",
            "location": 274,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeywordSearchRequest.to_str": {
            "name": "to_str",
            "location": 301,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeywordSearchRequest.__repr__": {
            "name": "__repr__",
            "location": 305,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeywordSearchRequest.__eq__": {
            "name": "__eq__",
            "location": 309,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict",
                    "Dict[str,Any]",
                    "MutableMapping",
                    "Mapping",
                    "List[dict]",
                    "List[str]",
                    "T"
                ]
            }
        },
        "KeywordSearchRequest.__ne__": {
            "name": "__ne__",
            "location": 316,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/productinformation/models/keyword_search_response.py": {
        "KeywordSearchResponse.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "limited_taxonomy": [
                    "None",
                    "Optional[int]",
                    "int",
                    "Optional[str]",
                    "str",
                    "Optional[Any]",
                    "Any",
                    "Optional[bool]",
                    "bool"
                ],
                "filter_options": [
                    "Optional[str]",
                    "str",
                    "None",
                    "bool"
                ],
                "products": [
                    "None",
                    "Optional[int]",
                    "int",
                    "Optional[bool]",
                    "List[str]",
                    "Mapping",
                    "str",
                    "Optional[List[str]]",
                    "Optional[Union[str,int]]",
                    "Optional[Union[int,str]]",
                    "Optional[str]"
                ],
                "products_count": [
                    "Optional[int]",
                    "None",
                    "Mapping",
                    "int",
                    "Optional[float]",
                    "Optional[bool]",
                    "float"
                ],
                "exact_manufacturer_products_count": [
                    "None",
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Optional[int]",
                    "Optional[bool]"
                ],
                "exact_manufacturer_products": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "exact_digi_key_product": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Dict[str,str]",
                    "bool"
                ],
                "search_locale_used": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Optional[int]",
                    "Callable",
                    "int",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "KeywordSearchResponse.limited_taxonomy": {
            "name": "limited_taxonomy",
            "location": 96,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "limited_taxonomy": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "KeywordSearchResponse.filter_options": {
            "name": "filter_options",
            "location": 118,
            "return": [
                "dict[str, dict[str, typing.Any]]",
                "dict[str, dict[, ]]",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "filter_options": [
                    "str",
                    "Mapping[str, T]",
                    "Set[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "KeywordSearchResponse.products": {
            "name": "products",
            "location": 141,
            "return": [
                "str",
                "list[str]",
                "dict[str, str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "products": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "KeywordSearchResponse.products_count": {
            "name": "products_count",
            "location": 164,
            "return": [
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal]]",
                "int",
                "typing.Iterator",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "products_count": [
                    "int",
                    "str",
                    "Tuple[int, int, str]"
                ]
            }
        },
        "KeywordSearchResponse.exact_manufacturer_products_count": {
            "name": "exact_manufacturer_products_count",
            "location": 187,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "exact_manufacturer_products_count": [
                    "int",
                    "Iterable[int]"
                ]
            }
        },
        "KeywordSearchResponse.exact_manufacturer_products": {
            "name": "exact_manufacturer_products",
            "location": 210,
            "return": [
                "dict[str, typing.Any]",
                "str",
                "dict[, ]",
                "typing.OrderedDict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "exact_manufacturer_products": [
                    "str",
                    "bytes"
                ]
            }
        },
        "KeywordSearchResponse.exact_digi_key_product": {
            "name": "exact_digi_key_product",
            "location": 232,
            "return": [
                "str",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "exact_digi_key_product": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "KeywordSearchResponse.search_locale_used": {
            "name": "search_locale_used",
            "location": 253,
            "return": [
                "int",
                "str",
                "set[int]"
            ],
            "arguments": {
                "self": [],
                "search_locale_used": [
                    "int",
                    "str",
                    "List['cirq.Circuit']"
                ]
            }
        },
        "KeywordSearchResponse.to_dict": {
            "name": "to_dict",
            "location": 263,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeywordSearchResponse.to_str": {
            "name": "to_str",
            "location": 290,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeywordSearchResponse.__repr__": {
            "name": "__repr__",
            "location": 294,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeywordSearchResponse.__eq__": {
            "name": "__eq__",
            "location": 298,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Mapping[str,Any]",
                    "Mapping",
                    "Dict[str,Any]",
                    "List[Tuple[Any,...]]",
                    "List[tuple[Union[Any,...]]]",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "KeywordSearchResponse.__ne__": {
            "name": "__ne__",
            "location": 305,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/productinformation/models/kit_part.py": {
        "KitPart.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "associated_product": [
                    "Optional[str]",
                    "None",
                    "str",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "kit_part_quantity": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Optional[Dict[str,int]]",
                    "Dict[str,int]"
                ]
            }
        },
        "KitPart.associated_product": {
            "name": "associated_product",
            "location": 66,
            "return": [
                "list[]",
                "dict[, ]",
                "list[str]",
                "dict[str, dict[str, typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "associated_product": [
                    "str",
                    "int"
                ]
            }
        },
        "KitPart.kit_part_quantity": {
            "name": "kit_part_quantity",
            "location": 88,
            "return": [
                "int",
                "str",
                "list[str]",
                "set[str]",
                "typing.DefaultDict"
            ],
            "arguments": {
                "self": [],
                "kit_part_quantity": [
                    "str",
                    "bool",
                    "dict",
                    "List[str]",
                    "tuple"
                ]
            }
        },
        "KitPart.to_dict": {
            "name": "to_dict",
            "location": 99,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KitPart.to_str": {
            "name": "to_str",
            "location": 126,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KitPart.__repr__": {
            "name": "__repr__",
            "location": 130,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KitPart.__eq__": {
            "name": "__eq__",
            "location": 134,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int,BitVec]",
                    "int"
                ]
            }
        },
        "KitPart.__ne__": {
            "name": "__ne__",
            "location": 141,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/productinformation/models/limited_parameter.py": {
        "LimitedParameter.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "str",
                    "None",
                    "List[Type]",
                    "float",
                    "Iterable",
                    "Optional[Node]"
                ],
                "parameter_id": [
                    "Optional[str]",
                    "None",
                    "T",
                    "str",
                    "bytes",
                    "Optional[int]",
                    "int",
                    "Optional[Iterable[str]]",
                    "Iterable[str]"
                ],
                "parameter": [
                    "Optional[int]",
                    "None",
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[Iterable[str]]",
                    "Iterable[str]"
                ]
            }
        },
        "LimitedParameter.values": {
            "name": "values",
            "location": 72,
            "return": [
                "dict[, ]",
                "str",
                "float",
                "int",
                "list[int]",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "float",
                    "str",
                    "list"
                ]
            }
        },
        "LimitedParameter.parameter_id": {
            "name": "parameter_id",
            "location": 95,
            "return": [
                "int",
                "str",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "parameter_id": [
                    "str",
                    "int"
                ]
            }
        },
        "LimitedParameter.parameter": {
            "name": "parameter",
            "location": 118,
            "return": [
                "list[]",
                "list[str]",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "parameter": [
                    "dict",
                    "float",
                    "bool"
                ]
            }
        },
        "LimitedParameter.to_dict": {
            "name": "to_dict",
            "location": 129,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LimitedParameter.to_str": {
            "name": "to_str",
            "location": 156,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LimitedParameter.__repr__": {
            "name": "__repr__",
            "location": 160,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LimitedParameter.__eq__": {
            "name": "__eq__",
            "location": 164,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int,BitVec]",
                    "int"
                ]
            }
        },
        "LimitedParameter.__ne__": {
            "name": "__ne__",
            "location": 171,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/productinformation/models/limited_taxonomy.py": {
        "LimitedTaxonomy.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "children": [
                    "None",
                    "str",
                    "Optional[str]",
                    "bytes",
                    "int",
                    "Optional[int]"
                ],
                "product_count": [
                    "None",
                    "Optional[int]",
                    "bytes",
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[SupportsFloat]",
                    "bool"
                ],
                "new_product_count": [
                    "None",
                    "Optional[int]",
                    "int",
                    "bytes",
                    "bool",
                    "Mapping",
                    "Optional[Mapping[str,Any]]",
                    "Optional[SupportsFloat]"
                ],
                "parameter_id": [
                    "Optional[List[str]]",
                    "None",
                    "int",
                    "Optional[int]",
                    "List[str]"
                ],
                "value_id": [
                    "Optional[List[str]]",
                    "None",
                    "int",
                    "Optional[int]",
                    "List[str]"
                ],
                "parameter": [
                    "None",
                    "int",
                    "Optional[int]",
                    "bool"
                ],
                "value": [
                    "None",
                    "Optional[int]",
                    "int",
                    "bool",
                    "str",
                    "bytes",
                    "Optional[bool]",
                    "Optional[str]",
                    "Optional[bytes]"
                ]
            }
        },
        "LimitedTaxonomy.children": {
            "name": "children",
            "location": 92,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "children": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "LimitedTaxonomy.product_count": {
            "name": "product_count",
            "location": 115,
            "return": [
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal]]",
                "int",
                "typing.Iterator",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "product_count": [
                    "int",
                    "str",
                    "Tuple[int, int, str]"
                ]
            }
        },
        "LimitedTaxonomy.new_product_count": {
            "name": "new_product_count",
            "location": 138,
            "return": [
                "int",
                "str",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "new_product_count": [
                    "str",
                    "Sequence[Tuple[str, int]]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "LimitedTaxonomy.parameter_id": {
            "name": "parameter_id",
            "location": 161,
            "return": [
                "int",
                "str",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "parameter_id": [
                    "str",
                    "int"
                ]
            }
        },
        "LimitedTaxonomy.value_id": {
            "name": "value_id",
            "location": 184,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value_id": [
                    "str",
                    "int"
                ]
            }
        },
        "LimitedTaxonomy.parameter": {
            "name": "parameter",
            "location": 207,
            "return": [
                "list[]",
                "list[str]",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "parameter": [
                    "dict",
                    "float",
                    "bool"
                ]
            }
        },
        "LimitedTaxonomy.value": {
            "name": "value",
            "location": 230,
            "return": [
                "dict[, ]",
                "str",
                "float",
                "int",
                "list[int]",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "list"
                ]
            }
        },
        "LimitedTaxonomy.to_dict": {
            "name": "to_dict",
            "location": 241,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LimitedTaxonomy.to_str": {
            "name": "to_str",
            "location": 268,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LimitedTaxonomy.__repr__": {
            "name": "__repr__",
            "location": 272,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LimitedTaxonomy.__eq__": {
            "name": "__eq__",
            "location": 276,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int,BitVec]",
                    "int"
                ]
            }
        },
        "LimitedTaxonomy.__ne__": {
            "name": "__ne__",
            "location": 283,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/productinformation/models/manufacturer_product_details_request.py": {
        "ManufacturerProductDetailsRequest.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manufacturer_product": [
                    "str",
                    "None",
                    "bool",
                    "List[str]",
                    "int"
                ],
                "record_count": [
                    "Optional[int]",
                    "int",
                    "None",
                    "float",
                    "Optional[str]",
                    "str",
                    "Optional[Sequence[Any]]",
                    "Sequence[Any]",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "record_start_position": [
                    "None",
                    "int",
                    "Optional[int]",
                    "float",
                    "str",
                    "Optional[float]",
                    "bool"
                ],
                "filters": [
                    "Optional[float]",
                    "None",
                    "bool",
                    "float",
                    "Optional[int]"
                ],
                "sort": [
                    "Optional[float]",
                    "None",
                    "Optional[bool]",
                    "float",
                    "bool"
                ],
                "requested_quantity": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "bool",
                    "Optional[int]",
                    "int"
                ],
                "search_options": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "int",
                    "Optional[bool]",
                    "AnyStr",
                    "Optional[AnyStr]",
                    "bool"
                ]
            }
        },
        "ManufacturerProductDetailsRequest.manufacturer_product": {
            "name": "manufacturer_product",
            "location": 91,
            "return": [
                "list[]",
                "dict[, ]",
                "list[str]",
                "dict[str, dict[str, typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "manufacturer_product": [
                    "Optional[int]",
                    "Optional[str]",
                    "Union[str, bool]",
                    "bool"
                ]
            }
        },
        "ManufacturerProductDetailsRequest.record_count": {
            "name": "record_count",
            "location": 120,
            "return": [
                "int",
                "float",
                "set[str]",
                "typing.Callable[typing.Any, tuple[]]"
            ],
            "arguments": {
                "self": [],
                "record_count": [
                    "Optional[int]",
                    "Optional[Any]",
                    "float"
                ]
            }
        },
        "ManufacturerProductDetailsRequest.record_start_position": {
            "name": "record_start_position",
            "location": 147,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "self": [],
                "record_start_position": [
                    "int",
                    "float",
                    "str",
                    "Optional[int]",
                    "bool",
                    "Tuple[int, int]"
                ]
            }
        },
        "ManufacturerProductDetailsRequest.filters": {
            "name": "filters",
            "location": 169,
            "return": [
                "dict[str, tuple[typing.Union[typing.Any,typing.Any]]]",
                "list[]",
                "dict[typing.Any, str]",
                "typing.Generator[typing.Union[typing.Any,None,None]]",
                "int",
                "dict[, ]",
                "typing.OrderedDict"
            ],
            "arguments": {
                "self": [],
                "filters": [
                    "float",
                    "bool",
                    "dict"
                ]
            }
        },
        "ManufacturerProductDetailsRequest.sort": {
            "name": "sort",
            "location": 190,
            "return": [
                "list[int]",
                "int",
                "None",
                "typing.ClassVar"
            ],
            "arguments": {
                "self": [],
                "sort": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ManufacturerProductDetailsRequest.requested_quantity": {
            "name": "requested_quantity",
            "location": 212,
            "return": [
                "str",
                "int",
                "tuple[typing.Union[typing.Literal,typing.Literal]]",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "requested_quantity": [
                    "Dict[str, str]"
                ]
            }
        },
        "ManufacturerProductDetailsRequest.search_options": {
            "name": "search_options",
            "location": 235,
            "return": [
                "float",
                "typing.Pattern",
                "dict[str, str]",
                "dict[str, dict[str, typing.Any]]",
                "dict[str, dict[, ]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "search_options": [
                    "str",
                    "bool",
                    "bytes",
                    "Set[str]"
                ]
            }
        },
        "ManufacturerProductDetailsRequest.to_dict": {
            "name": "to_dict",
            "location": 246,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManufacturerProductDetailsRequest.to_str": {
            "name": "to_str",
            "location": 273,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManufacturerProductDetailsRequest.__repr__": {
            "name": "__repr__",
            "location": 277,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManufacturerProductDetailsRequest.__eq__": {
            "name": "__eq__",
            "location": 281,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict",
                    "Dict[str,Any]",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "ManufacturerProductDetailsRequest.__ne__": {
            "name": "__ne__",
            "location": 288,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/productinformation/models/media_links.py": {
        "MediaLinks.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "media_type": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[int]",
                    "int"
                ],
                "title": [
                    "Optional[str]",
                    "None",
                    "bytes",
                    "int",
                    "Optional[int]",
                    "str",
                    "Optional[Any]",
                    "Any"
                ],
                "small_photo": [
                    "None",
                    "Optional[str]",
                    "int",
                    "str",
                    "Optional[int]",
                    "Optional[Any]",
                    "Any",
                    "bool"
                ],
                "thumbnail": [
                    "Optional[str]",
                    "None",
                    "bytes",
                    "int",
                    "Optional[int]",
                    "str",
                    "Optional[Any]",
                    "Any"
                ],
                "url": [
                    "Optional[str]",
                    "None",
                    "bytes",
                    "Sequence[str]",
                    "str",
                    "Callable[[int],None]",
                    "Callable[int,None]"
                ]
            }
        },
        "MediaLinks.media_type": {
            "name": "media_type",
            "location": 82,
            "return": [
                "str",
                "dict[str, dict[str, typing.Any]]",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "media_type": [
                    "int",
                    "str"
                ]
            }
        },
        "MediaLinks.title": {
            "name": "title",
            "location": 105,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "MediaLinks.small_photo": {
            "name": "small_photo",
            "location": 128,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "small_photo": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "MediaLinks.thumbnail": {
            "name": "thumbnail",
            "location": 151,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "thumbnail": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "MediaLinks.url": {
            "name": "url",
            "location": 174,
            "return": [
                "str",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "float",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "MediaLinks.to_dict": {
            "name": "to_dict",
            "location": 185,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MediaLinks.to_str": {
            "name": "to_str",
            "location": 212,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MediaLinks.__repr__": {
            "name": "__repr__",
            "location": 216,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MediaLinks.__eq__": {
            "name": "__eq__",
            "location": 220,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AbstractSet",
                    "Dict[str,str]",
                    "bool"
                ]
            }
        },
        "MediaLinks.__ne__": {
            "name": "__ne__",
            "location": 227,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/productinformation/models/parametric_filter.py": {
        "ParametricFilter.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parameter_id": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "value_id": [
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "str",
                    "int"
                ]
            }
        },
        "ParametricFilter.parameter_id": {
            "name": "parameter_id",
            "location": 67,
            "return": [
                "int",
                "str",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "parameter_id": [
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "List[Optional[int]]"
                ]
            }
        },
        "ParametricFilter.value_id": {
            "name": "value_id",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value_id": [
                    "Callable",
                    "Optional[str]",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "ParametricFilter.to_dict": {
            "name": "to_dict",
            "location": 109,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParametricFilter.to_str": {
            "name": "to_str",
            "location": 136,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParametricFilter.__repr__": {
            "name": "__repr__",
            "location": 140,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParametricFilter.__eq__": {
            "name": "__eq__",
            "location": 144,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ParametricFilter.__ne__": {
            "name": "__ne__",
            "location": 151,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/productinformation/models/pid_vid.py": {
        "PidVid.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parameter_id": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "value_id": [
                    "Optional[str]",
                    "None",
                    "int",
                    "str",
                    "Optional[Any]",
                    "Any"
                ],
                "parameter": [
                    "None",
                    "Optional[int]",
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[float]",
                    "float"
                ],
                "value": [
                    "List[Type]",
                    "None",
                    "str",
                    "float",
                    "Dict",
                    "Optional[Node]",
                    "Optional[Tuple[Any,Any]]",
                    "Tuple[Union[Any,Any]]"
                ]
            }
        },
        "PidVid.parameter_id": {
            "name": "parameter_id",
            "location": 77,
            "return": [
                "int",
                "str",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "parameter_id": [
                    "str",
                    "int"
                ]
            }
        },
        "PidVid.value_id": {
            "name": "value_id",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value_id": [
                    "str",
                    "int"
                ]
            }
        },
        "PidVid.parameter": {
            "name": "parameter",
            "location": 123,
            "return": [
                "list[]",
                "list[str]",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "parameter": [
                    "dict",
                    "float",
                    "bool"
                ]
            }
        },
        "PidVid.value": {
            "name": "value",
            "location": 146,
            "return": [
                "dict[, ]",
                "str",
                "float",
                "int",
                "list[int]",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "list"
                ]
            }
        },
        "PidVid.to_dict": {
            "name": "to_dict",
            "location": 157,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PidVid.to_str": {
            "name": "to_str",
            "location": 184,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PidVid.__repr__": {
            "name": "__repr__",
            "location": 188,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PidVid.__eq__": {
            "name": "__eq__",
            "location": 192,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int,BitVec]",
                    "int"
                ]
            }
        },
        "PidVid.__ne__": {
            "name": "__ne__",
            "location": 199,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/productinformation/models/price_break.py": {
        "PriceBreak.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "break_quantity": [
                    "Optional[int]",
                    "None",
                    "Optional[float]",
                    "int",
                    "Optional[str]",
                    "float",
                    "Optional[Callable]",
                    "str",
                    "Optional[Hashable]",
                    "Callable",
                    "Hashable"
                ],
                "unit_price": [
                    "Optional[int]",
                    "None",
                    "Optional[float]",
                    "int",
                    "Optional[str]",
                    "float",
                    "Optional[Callable]",
                    "str",
                    "Optional[Hashable]",
                    "Callable",
                    "Hashable"
                ],
                "total_price": [
                    "Optional[int]",
                    "None",
                    "Optional[float]",
                    "int",
                    "Optional[str]",
                    "float",
                    "Optional[Callable]",
                    "str",
                    "Optional[Hashable]",
                    "Callable",
                    "Hashable"
                ]
            }
        },
        "PriceBreak.break_quantity": {
            "name": "break_quantity",
            "location": 72,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "break_quantity": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "PriceBreak.unit_price": {
            "name": "unit_price",
            "location": 95,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "unit_price": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "PriceBreak.total_price": {
            "name": "total_price",
            "location": 118,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "total_price": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "PriceBreak.to_dict": {
            "name": "to_dict",
            "location": 129,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PriceBreak.to_str": {
            "name": "to_str",
            "location": 156,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PriceBreak.__repr__": {
            "name": "__repr__",
            "location": 160,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PriceBreak.__eq__": {
            "name": "__eq__",
            "location": 164,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int,BitVec]",
                    "int"
                ]
            }
        },
        "PriceBreak.__ne__": {
            "name": "__ne__",
            "location": 171,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/productinformation/models/product.py": {
        "Product.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "standard_pricing": [
                    "Optional[str]",
                    "None",
                    "float",
                    "str",
                    "bool",
                    "Optional[Tuple[float,float]]",
                    "Tuple[Union[float,float]]"
                ],
                "ro_hs_status": [
                    "bool",
                    "None",
                    "Optional[float]",
                    "Optional[Dict[str,int]]",
                    "float",
                    "Optional[List[Any]]",
                    "Dict[str,int]",
                    "List[Any]"
                ],
                "lead_status": [
                    "bool",
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[Sequence]",
                    "Sequence",
                    "Optional[List[Any]]",
                    "List[Any]"
                ],
                "parameters": [
                    "Dict",
                    "None",
                    "str",
                    "float",
                    "int",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "product_url": [
                    "None",
                    "Optional[T]",
                    "str",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]",
                    "Optional[str]",
                    "List[Any]",
                    "Optional[List[Any]]",
                    "Sequence",
                    "Dict[str,Any]",
                    "Optional[Sequence]",
                    "Optional[Dict[str,Any]]"
                ],
                "primary_datasheet": [
                    "Optional[str]",
                    "None",
                    "float",
                    "str",
                    "bool",
                    "Optional[Tuple[float,float]]",
                    "Tuple[Union[float,float]]"
                ],
                "primary_photo": [
                    "Optional[str]",
                    "None",
                    "float",
                    "str",
                    "bool",
                    "Optional[Tuple[float,float]]",
                    "Tuple[Union[float,float]]"
                ],
                "primary_video": [
                    "Optional[str]",
                    "None",
                    "float",
                    "str",
                    "bool",
                    "Optional[Tuple[float,float]]",
                    "Tuple[Union[float,float]]"
                ],
                "series": [
                    "float",
                    "None",
                    "str",
                    "bool",
                    "Optional[bool]",
                    "Tuple[Union[float,float]]",
                    "int",
                    "Optional[Tuple[float,float]]",
                    "Union[None,int]",
                    "Optional[str]"
                ],
                "manufacturer_lead_weeks": [
                    "None",
                    "Optional[str]",
                    "str",
                    "float",
                    "Optional[float]",
                    "Sequence[str]",
                    "Optional[AnyStr]",
                    "AnyStr",
                    "Optional[Callable[...,Any]]",
                    "Callable[...,Any]"
                ],
                "manufacturer_page_url": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "product_status": [
                    "str",
                    "None",
                    "float",
                    "Optional[str]"
                ],
                "date_last_buy_chance": [
                    "int",
                    "None",
                    "Optional[int]",
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "alternate_packaging": [
                    "Optional[str]",
                    "None",
                    "float",
                    "str",
                    "bool",
                    "Optional[Tuple[float,float]]",
                    "Tuple[Union[float,float]]"
                ],
                "detailed_description": [
                    "Optional[str]",
                    "None",
                    "float",
                    "str",
                    "bool",
                    "Optional[Tuple[float,float]]",
                    "Tuple[Union[float,float]]"
                ],
                "reach_status": [
                    "bool",
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[Sequence]",
                    "Sequence",
                    "Optional[List[Any]]",
                    "List[Any]"
                ],
                "export_control_class_number": [
                    "int",
                    "None",
                    "Callable",
                    "Hashable",
                    "Optional[Mapping[str,Any]]",
                    "bool",
                    "Mapping",
                    "List[List[int]]",
                    "List[list[int]]"
                ],
                "htsus_code": [
                    "Optional[int]",
                    "None",
                    "Callable",
                    "int",
                    "Union[List[str],List[Any]]",
                    "Dict",
                    "Optional[SupportsFloat]",
                    "List[str]",
                    "Optional[str]",
                    "str"
                ],
                "tariff_description": [
                    "Optional[str]",
                    "None",
                    "float",
                    "str",
                    "bool",
                    "Optional[Tuple[float,float]]",
                    "Tuple[Union[float,float]]"
                ],
                "moisture_sensitivity_level": [
                    "None",
                    "Optional[str]",
                    "str",
                    "float",
                    "Optional[float]",
                    "Sequence[str]",
                    "Optional[AnyStr]",
                    "AnyStr",
                    "Optional[Callable[...,Any]]",
                    "Callable[...,Any]"
                ],
                "family": [
                    "float",
                    "None",
                    "str",
                    "bool",
                    "Optional[bool]",
                    "Tuple[Union[float,float]]",
                    "int",
                    "Optional[Tuple[float,float]]",
                    "Union[None,int]",
                    "Optional[str]"
                ],
                "category": [
                    "float",
                    "None",
                    "str",
                    "bool",
                    "Optional[bool]",
                    "Tuple[Union[float,float]]",
                    "int",
                    "Optional[Tuple[float,float]]",
                    "Union[None,int]",
                    "Optional[str]"
                ],
                "manufacturer_part_number": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[Any]",
                    "Callable",
                    "bool",
                    "Any",
                    "Optional[Dict[str,int]]",
                    "Dict[str,int]",
                    "Tuple[Union[float,float]]",
                    "Optional[bool]",
                    "Optional[Tuple[float,float]]"
                ],
                "minimum_order_quantity": [
                    "None",
                    "Optional[str]",
                    "str",
                    "float",
                    "Optional[float]",
                    "Sequence[str]",
                    "Optional[AnyStr]",
                    "AnyStr",
                    "Optional[Callable[...,Any]]",
                    "Callable[...,Any]"
                ],
                "non_stock": [
                    "Optional[str]",
                    "None",
                    "float",
                    "str",
                    "bool",
                    "Optional[Tuple[float,float]]",
                    "Tuple[Union[float,float]]"
                ],
                "packaging": [
                    "float",
                    "None",
                    "str",
                    "bool",
                    "Optional[bool]",
                    "Tuple[Union[float,float]]",
                    "int",
                    "Optional[Tuple[float,float]]",
                    "Union[None,int]",
                    "Optional[str]"
                ],
                "quantity_available": [
                    "Optional[str]",
                    "None",
                    "float",
                    "str",
                    "bool",
                    "Optional[Tuple[float,float]]",
                    "Tuple[Union[float,float]]"
                ],
                "digi_key_part_number": [
                    "bytes",
                    "None",
                    "Optional[str]",
                    "Optional[Dict[cirq.Qid,int]]",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[cirq.Qid,int]",
                    "Optional[List[str]]",
                    "Dict[str,Any]",
                    "List[str]"
                ],
                "product_description": [
                    "str",
                    "None",
                    "List[str]",
                    "Optional[str]",
                    "Sequence[Any]",
                    "Optional[Sequence[Any]]",
                    "Optional[Texte]"
                ],
                "unit_price": [
                    "Optional[str]",
                    "None",
                    "float",
                    "str",
                    "bool",
                    "Optional[Tuple[float,float]]",
                    "Tuple[Union[float,float]]"
                ],
                "manufacturer": [
                    "float",
                    "None",
                    "str",
                    "bool",
                    "Optional[bool]",
                    "Tuple[Union[float,float]]",
                    "int",
                    "Optional[Tuple[float,float]]",
                    "Union[None,int]",
                    "Optional[str]"
                ],
                "manufacturer_public_quantity": [
                    "None",
                    "Optional[str]",
                    "str",
                    "float",
                    "Optional[float]",
                    "Sequence[str]",
                    "Optional[AnyStr]",
                    "AnyStr",
                    "Optional[Callable[...,Any]]",
                    "Callable[...,Any]"
                ],
                "quantity_on_order": [
                    "Optional[str]",
                    "None",
                    "float",
                    "str",
                    "bool",
                    "Optional[Tuple[float,float]]",
                    "Tuple[Union[float,float]]"
                ],
                "dk_plus_restriction": [
                    "None",
                    "Optional[str]",
                    "str",
                    "float",
                    "Optional[float]",
                    "Sequence[str]",
                    "Optional[AnyStr]",
                    "AnyStr",
                    "Optional[Callable[...,Any]]",
                    "Callable[...,Any]"
                ],
                "marketplace": [
                    "float",
                    "None",
                    "str",
                    "bool",
                    "Optional[bool]",
                    "Tuple[Union[float,float]]",
                    "int",
                    "Optional[Tuple[float,float]]",
                    "Union[None,int]",
                    "Optional[str]"
                ],
                "supplier_direct_ship": [
                    "None",
                    "Optional[str]",
                    "str",
                    "float",
                    "Optional[float]",
                    "Sequence[str]",
                    "Optional[AnyStr]",
                    "AnyStr",
                    "Optional[Callable[...,Any]]",
                    "Callable[...,Any]"
                ]
            }
        },
        "Product.standard_pricing": {
            "name": "standard_pricing",
            "location": 237,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "standard_pricing": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Product.ro_hs_status": {
            "name": "ro_hs_status",
            "location": 260,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ro_hs_status": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "Product.lead_status": {
            "name": "lead_status",
            "location": 283,
            "return": [
                "str",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "lead_status": [
                    "int",
                    "Union['KspNativeControl', int]",
                    "str"
                ]
            }
        },
        "Product.parameters": {
            "name": "parameters",
            "location": 306,
            "return": [
                "list[]",
                "list[str]",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "parameters": [
                    "dict",
                    "float",
                    "bool"
                ]
            }
        },
        "Product.product_url": {
            "name": "product_url",
            "location": 329,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "product_url": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "Product.primary_datasheet": {
            "name": "primary_datasheet",
            "location": 352,
            "return": [
                "int",
                "float",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "primary_datasheet": [
                    "float"
                ]
            }
        },
        "Product.primary_photo": {
            "name": "primary_photo",
            "location": 375,
            "return": [
                "int",
                "float",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "primary_photo": [
                    "float"
                ]
            }
        },
        "Product.primary_video": {
            "name": "primary_video",
            "location": 398,
            "return": [
                "int",
                "float",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "primary_video": [
                    "float"
                ]
            }
        },
        "Product.series": {
            "name": "series",
            "location": 420,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "series": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Product.manufacturer_lead_weeks": {
            "name": "manufacturer_lead_weeks",
            "location": 442,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "manufacturer_lead_weeks": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Product.manufacturer_page_url": {
            "name": "manufacturer_page_url",
            "location": 465,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "typing.Callable[[], typing.Any]"
            ],
            "arguments": {
                "self": [],
                "manufacturer_page_url": [
                    "str"
                ]
            }
        },
        "Product.product_status": {
            "name": "product_status",
            "location": 488,
            "return": [
                "int",
                "set[]",
                "str"
            ],
            "arguments": {
                "self": [],
                "product_status": [
                    "int",
                    "float"
                ]
            }
        },
        "Product.date_last_buy_chance": {
            "name": "date_last_buy_chance",
            "location": 511,
            "return": [
                "tuple[typing.Union[str,str,str,str,str,str,str,str,str]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "date_last_buy_chance": [
                    "bool",
                    "Optional[List[\"CustomLineItemDraft\"]]",
                    "str",
                    "Optional[List[Any]]"
                ]
            }
        },
        "Product.alternate_packaging": {
            "name": "alternate_packaging",
            "location": 534,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "alternate_packaging": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Product.detailed_description": {
            "name": "detailed_description",
            "location": 557,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "detailed_description": [
                    "str"
                ]
            }
        },
        "Product.reach_status": {
            "name": "reach_status",
            "location": 580,
            "return": [
                "str",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "reach_status": [
                    "int",
                    "Union['KspNativeControl', int]",
                    "str"
                ]
            }
        },
        "Product.export_control_class_number": {
            "name": "export_control_class_number",
            "location": 603,
            "return": [
                "float",
                "int",
                "str",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "export_control_class_number": [
                    "Type",
                    "str"
                ]
            }
        },
        "Product.htsus_code": {
            "name": "htsus_code",
            "location": 626,
            "return": [
                "str",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "htsus_code": [
                    "str",
                    "int",
                    "List[int]"
                ]
            }
        },
        "Product.tariff_description": {
            "name": "tariff_description",
            "location": 649,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "tariff_description": [
                    "str"
                ]
            }
        },
        "Product.moisture_sensitivity_level": {
            "name": "moisture_sensitivity_level",
            "location": 672,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "moisture_sensitivity_level": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Product.family": {
            "name": "family",
            "location": 694,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "family": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Product.category": {
            "name": "category",
            "location": 715,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "category": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Product.manufacturer_part_number": {
            "name": "manufacturer_part_number",
            "location": 737,
            "return": [
                "int",
                "str",
                "list[str]",
                "set[str]",
                "typing.DefaultDict"
            ],
            "arguments": {
                "self": [],
                "manufacturer_part_number": [
                    "str",
                    "bool",
                    "dict",
                    "List[str]",
                    "tuple"
                ]
            }
        },
        "Product.minimum_order_quantity": {
            "name": "minimum_order_quantity",
            "location": 760,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "minimum_order_quantity": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Product.non_stock": {
            "name": "non_stock",
            "location": 783,
            "return": [
                "typing.DefaultDict",
                "int",
                "dict[str, typing.Any]",
                "set[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "non_stock": [
                    "bool",
                    "str",
                    "float",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "Product.packaging": {
            "name": "packaging",
            "location": 805,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "packaging": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Product.quantity_available": {
            "name": "quantity_available",
            "location": 827,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "quantity_available": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Product.digi_key_part_number": {
            "name": "digi_key_part_number",
            "location": 850,
            "return": [
                "typing.Iterator",
                "bytes",
                "set[str]",
                "str",
                "dict[str, bytes]",
                "None",
                "typing.Type"
            ],
            "arguments": {
                "self": [],
                "digi_key_part_number": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Product.product_description": {
            "name": "product_description",
            "location": 873,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "product_description": [
                    "int",
                    "str"
                ]
            }
        },
        "Product.unit_price": {
            "name": "unit_price",
            "location": 896,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "unit_price": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Product.manufacturer": {
            "name": "manufacturer",
            "location": 918,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "manufacturer": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Product.manufacturer_public_quantity": {
            "name": "manufacturer_public_quantity",
            "location": 940,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "manufacturer_public_quantity": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Product.quantity_on_order": {
            "name": "quantity_on_order",
            "location": 963,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "quantity_on_order": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Product.dk_plus_restriction": {
            "name": "dk_plus_restriction",
            "location": 986,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "dk_plus_restriction": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Product.marketplace": {
            "name": "marketplace",
            "location": 1009,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "marketplace": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Product.supplier_direct_ship": {
            "name": "supplier_direct_ship",
            "location": 1032,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "supplier_direct_ship": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Product.to_dict": {
            "name": "to_dict",
            "location": 1043,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Product.to_str": {
            "name": "to_str",
            "location": 1070,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Product.__repr__": {
            "name": "__repr__",
            "location": 1074,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Product.__eq__": {
            "name": "__eq__",
            "location": 1078,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Product.__ne__": {
            "name": "__ne__",
            "location": 1085,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/productinformation/models/product_details.py": {
        "ProductDetails.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "my_pricing": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "obsolete": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "media_links": [
                    "int",
                    "None",
                    "Optional[str]",
                    "List[str]",
                    "Optional[Dict]",
                    "str",
                    "List[List]",
                    "Dict",
                    "List[list]"
                ],
                "standard_package": [
                    "int",
                    "None",
                    "List[Optional[float]]",
                    "Optional[str]",
                    "Optional[Union[Any,Any]]",
                    "str",
                    "Any"
                ],
                "limited_taxonomy": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "kits": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "kit_contents": [
                    "bool",
                    "None",
                    "str",
                    "bytes",
                    "Optional[int]",
                    "List[int]",
                    "int",
                    "Optional[str]"
                ],
                "mating_products": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[float]",
                    "float",
                    "Optional[Dict]",
                    "Dict",
                    "List[List]",
                    "List[list]"
                ],
                "search_locale_used": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "associated_products": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[float]",
                    "float",
                    "Optional[Dict]",
                    "Dict",
                    "List[List]",
                    "List[list]"
                ],
                "for_use_with_products": [
                    "Optional[float]",
                    "None",
                    "bool",
                    "float",
                    "int"
                ],
                "rohs_subs": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "suggested_subs": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "additional_value_fee": [
                    "None",
                    "Optional[str]",
                    "int",
                    "str",
                    "List[int]",
                    "Optional[int]",
                    "float",
                    "Optional[bool]",
                    "Optional[float]",
                    "bool"
                ],
                "reach_effective_date": [
                    "str",
                    "None",
                    "Sequence[str]",
                    "int",
                    "bool"
                ],
                "standard_pricing": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "ro_hs_status": [
                    "None",
                    "Optional[str]",
                    "int",
                    "str",
                    "List[Optional[float]]",
                    "bool"
                ],
                "lead_status": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Optional[float]",
                    "float",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Optional[bool]",
                    "bool",
                    "Optional[Dict]",
                    "Dict",
                    "List[List]",
                    "List[list]"
                ],
                "parameters": [
                    "bool",
                    "None",
                    "List[Optional[float]]",
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "product_url": [
                    "None",
                    "Optional[float]",
                    "Tuple",
                    "float",
                    "str",
                    "Optional[Union[Cite,str]]",
                    "Optional[str]"
                ],
                "primary_datasheet": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "primary_photo": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "primary_video": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "series": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "manufacturer_lead_weeks": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "manufacturer_page_url": [
                    "str",
                    "None",
                    "int",
                    "List[str]",
                    "Dict[str,Any]",
                    "bool"
                ],
                "product_status": [
                    "None",
                    "Optional[int]",
                    "int",
                    "str",
                    "Optional[Union[str,Any]]",
                    "bytes",
                    "bool",
                    "Any",
                    "Optional[float]",
                    "float",
                    "Optional[bool]"
                ],
                "date_last_buy_chance": [
                    "int",
                    "None",
                    "float",
                    "bool",
                    "str"
                ],
                "alternate_packaging": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "detailed_description": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "reach_status": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Optional[float]",
                    "float",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Optional[bool]",
                    "bool",
                    "Optional[Dict]",
                    "Dict",
                    "List[List]",
                    "List[list]"
                ],
                "export_control_class_number": [
                    "str",
                    "None",
                    "int",
                    "Optional[Iterable[str]]",
                    "Iterable[str]",
                    "Dict[str,object]",
                    "Optional[int]"
                ],
                "htsus_code": [
                    "Optional[int]",
                    "None",
                    "int"
                ],
                "tariff_description": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "moisture_sensitivity_level": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "family": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "category": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "manufacturer_part_number": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "int",
                    "bool"
                ],
                "minimum_order_quantity": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "non_stock": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "packaging": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "quantity_available": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "digi_key_part_number": [
                    "bytes",
                    "None",
                    "str",
                    "Optional[Dict[cirq.Qid,int]]",
                    "bool",
                    "Dict[cirq.Qid,int]"
                ],
                "product_description": [
                    "Optional[int]",
                    "None",
                    "Tuple",
                    "int",
                    "Optional[List[str]]",
                    "Optional[float]",
                    "List[str]",
                    "float"
                ],
                "unit_price": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "manufacturer": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "manufacturer_public_quantity": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "quantity_on_order": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "dk_plus_restriction": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "marketplace": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "supplier_direct_ship": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "ProductDetails.my_pricing": {
            "name": "my_pricing",
            "location": 312,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "my_pricing": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.obsolete": {
            "name": "obsolete",
            "location": 335,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "obsolete": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.media_links": {
            "name": "media_links",
            "location": 358,
            "return": [
                "str",
                "dict[str, str]",
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "media_links": [
                    "str",
                    "int"
                ]
            }
        },
        "ProductDetails.standard_package": {
            "name": "standard_package",
            "location": 381,
            "return": [
                "int",
                "typing.Type",
                "dict[, ]",
                "str",
                "set[]"
            ],
            "arguments": {
                "self": [],
                "standard_package": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "ProductDetails.limited_taxonomy": {
            "name": "limited_taxonomy",
            "location": 403,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "limited_taxonomy": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.kits": {
            "name": "kits",
            "location": 425,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "kits": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.kit_contents": {
            "name": "kit_contents",
            "location": 448,
            "return": [
                "str",
                "int",
                "tuple[typing.Union[int,int,int,int]]",
                "list[]",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "kit_contents": [
                    "str",
                    "bytes"
                ]
            }
        },
        "ProductDetails.mating_products": {
            "name": "mating_products",
            "location": 471,
            "return": [
                "list[]",
                "dict[, ]",
                "list[str]",
                "dict[str, dict[str, typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "mating_products": [
                    "str",
                    "int"
                ]
            }
        },
        "ProductDetails.search_locale_used": {
            "name": "search_locale_used",
            "location": 493,
            "return": [
                "int",
                "str",
                "set[int]"
            ],
            "arguments": {
                "self": [],
                "search_locale_used": [
                    "int",
                    "str",
                    "List['cirq.Circuit']"
                ]
            }
        },
        "ProductDetails.associated_products": {
            "name": "associated_products",
            "location": 515,
            "return": [
                "list[]",
                "dict[, ]",
                "list[str]",
                "dict[str, dict[str, typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "associated_products": [
                    "str",
                    "int"
                ]
            }
        },
        "ProductDetails.for_use_with_products": {
            "name": "for_use_with_products",
            "location": 538,
            "return": [
                "list[]",
                "dict[str, list[typing.Any]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "for_use_with_products": [
                    "str",
                    "Optional[int]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "ProductDetails.rohs_subs": {
            "name": "rohs_subs",
            "location": 561,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "rohs_subs": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.suggested_subs": {
            "name": "suggested_subs",
            "location": 584,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "suggested_subs": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.additional_value_fee": {
            "name": "additional_value_fee",
            "location": 607,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "additional_value_fee": [
                    "str",
                    "Union[T, Sequence[T]]",
                    "dict"
                ]
            }
        },
        "ProductDetails.reach_effective_date": {
            "name": "reach_effective_date",
            "location": 630,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "reach_effective_date": [
                    "Sequence[str]",
                    "int",
                    "List[int]"
                ]
            }
        },
        "ProductDetails.standard_pricing": {
            "name": "standard_pricing",
            "location": 653,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "standard_pricing": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.ro_hs_status": {
            "name": "ro_hs_status",
            "location": 676,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ro_hs_status": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "ProductDetails.lead_status": {
            "name": "lead_status",
            "location": 699,
            "return": [
                "str",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "lead_status": [
                    "int",
                    "Union['KspNativeControl', int]",
                    "str"
                ]
            }
        },
        "ProductDetails.parameters": {
            "name": "parameters",
            "location": 722,
            "return": [
                "list[]",
                "list[str]",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "parameters": [
                    "dict",
                    "float",
                    "bool"
                ]
            }
        },
        "ProductDetails.product_url": {
            "name": "product_url",
            "location": 745,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "product_url": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "ProductDetails.primary_datasheet": {
            "name": "primary_datasheet",
            "location": 768,
            "return": [
                "int",
                "float",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "primary_datasheet": [
                    "float"
                ]
            }
        },
        "ProductDetails.primary_photo": {
            "name": "primary_photo",
            "location": 791,
            "return": [
                "int",
                "float",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "primary_photo": [
                    "float"
                ]
            }
        },
        "ProductDetails.primary_video": {
            "name": "primary_video",
            "location": 814,
            "return": [
                "int",
                "float",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "primary_video": [
                    "float"
                ]
            }
        },
        "ProductDetails.series": {
            "name": "series",
            "location": 836,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "series": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.manufacturer_lead_weeks": {
            "name": "manufacturer_lead_weeks",
            "location": 858,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "manufacturer_lead_weeks": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.manufacturer_page_url": {
            "name": "manufacturer_page_url",
            "location": 881,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "typing.Callable[[], typing.Any]"
            ],
            "arguments": {
                "self": [],
                "manufacturer_page_url": [
                    "str"
                ]
            }
        },
        "ProductDetails.product_status": {
            "name": "product_status",
            "location": 904,
            "return": [
                "int",
                "set[]",
                "str"
            ],
            "arguments": {
                "self": [],
                "product_status": [
                    "int",
                    "float"
                ]
            }
        },
        "ProductDetails.date_last_buy_chance": {
            "name": "date_last_buy_chance",
            "location": 927,
            "return": [
                "tuple[typing.Union[str,str,str,str,str,str,str,str,str]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "date_last_buy_chance": [
                    "bool",
                    "Optional[List[\"CustomLineItemDraft\"]]",
                    "str",
                    "Optional[List[Any]]"
                ]
            }
        },
        "ProductDetails.alternate_packaging": {
            "name": "alternate_packaging",
            "location": 950,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "alternate_packaging": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.detailed_description": {
            "name": "detailed_description",
            "location": 973,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "detailed_description": [
                    "str"
                ]
            }
        },
        "ProductDetails.reach_status": {
            "name": "reach_status",
            "location": 996,
            "return": [
                "str",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "reach_status": [
                    "int",
                    "Union['KspNativeControl', int]",
                    "str"
                ]
            }
        },
        "ProductDetails.export_control_class_number": {
            "name": "export_control_class_number",
            "location": 1019,
            "return": [
                "float",
                "int",
                "str",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "export_control_class_number": [
                    "Type",
                    "str"
                ]
            }
        },
        "ProductDetails.htsus_code": {
            "name": "htsus_code",
            "location": 1042,
            "return": [
                "str",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "htsus_code": [
                    "str",
                    "int",
                    "List[int]"
                ]
            }
        },
        "ProductDetails.tariff_description": {
            "name": "tariff_description",
            "location": 1065,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "tariff_description": [
                    "str"
                ]
            }
        },
        "ProductDetails.moisture_sensitivity_level": {
            "name": "moisture_sensitivity_level",
            "location": 1088,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "moisture_sensitivity_level": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.family": {
            "name": "family",
            "location": 1110,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "family": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.category": {
            "name": "category",
            "location": 1131,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "category": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.manufacturer_part_number": {
            "name": "manufacturer_part_number",
            "location": 1153,
            "return": [
                "int",
                "str",
                "list[str]",
                "set[str]",
                "typing.DefaultDict"
            ],
            "arguments": {
                "self": [],
                "manufacturer_part_number": [
                    "str",
                    "bool",
                    "dict",
                    "List[str]",
                    "tuple"
                ]
            }
        },
        "ProductDetails.minimum_order_quantity": {
            "name": "minimum_order_quantity",
            "location": 1176,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "minimum_order_quantity": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.non_stock": {
            "name": "non_stock",
            "location": 1199,
            "return": [
                "typing.DefaultDict",
                "int",
                "dict[str, typing.Any]",
                "set[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "non_stock": [
                    "bool",
                    "str",
                    "float",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "ProductDetails.packaging": {
            "name": "packaging",
            "location": 1221,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "packaging": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.quantity_available": {
            "name": "quantity_available",
            "location": 1243,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "quantity_available": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.digi_key_part_number": {
            "name": "digi_key_part_number",
            "location": 1266,
            "return": [
                "typing.Iterator",
                "bytes",
                "set[str]",
                "str",
                "dict[str, bytes]",
                "None",
                "typing.Type"
            ],
            "arguments": {
                "self": [],
                "digi_key_part_number": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "ProductDetails.product_description": {
            "name": "product_description",
            "location": 1289,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "product_description": [
                    "int",
                    "str"
                ]
            }
        },
        "ProductDetails.unit_price": {
            "name": "unit_price",
            "location": 1312,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "unit_price": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.manufacturer": {
            "name": "manufacturer",
            "location": 1334,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "manufacturer": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.manufacturer_public_quantity": {
            "name": "manufacturer_public_quantity",
            "location": 1356,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "manufacturer_public_quantity": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.quantity_on_order": {
            "name": "quantity_on_order",
            "location": 1379,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "quantity_on_order": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.dk_plus_restriction": {
            "name": "dk_plus_restriction",
            "location": 1402,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "dk_plus_restriction": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.marketplace": {
            "name": "marketplace",
            "location": 1425,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "marketplace": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.supplier_direct_ship": {
            "name": "supplier_direct_ship",
            "location": 1448,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "supplier_direct_ship": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductDetails.to_dict": {
            "name": "to_dict",
            "location": 1459,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProductDetails.to_str": {
            "name": "to_str",
            "location": 1486,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProductDetails.__repr__": {
            "name": "__repr__",
            "location": 1490,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProductDetails.__eq__": {
            "name": "__eq__",
            "location": 1494,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ProductDetails.__ne__": {
            "name": "__ne__",
            "location": 1501,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/productinformation/models/product_details_response.py": {
        "ProductDetailsResponse.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "product_details": [
                    "None",
                    "Optional[int]",
                    "str",
                    "int",
                    "bytes",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "ProductDetailsResponse.product_details": {
            "name": "product_details",
            "location": 62,
            "return": [
                "str",
                "dict[str, str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "product_details": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "ProductDetailsResponse.to_dict": {
            "name": "to_dict",
            "location": 73,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProductDetailsResponse.to_str": {
            "name": "to_str",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProductDetailsResponse.__repr__": {
            "name": "__repr__",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProductDetailsResponse.__eq__": {
            "name": "__eq__",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Type"
                ]
            }
        },
        "ProductDetailsResponse.__ne__": {
            "name": "__ne__",
            "location": 115,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/productinformation/models/result_code.py": {
        "ResultCode.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultCode.to_dict": {
            "name": "to_dict",
            "location": 58,
            "return": [
                "Dict[(nothing, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultCode.to_str": {
            "name": "to_str",
            "location": 85,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultCode.__repr__": {
            "name": "__repr__",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultCode.__eq__": {
            "name": "__eq__",
            "location": 93,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ResultCode.__ne__": {
            "name": "__ne__",
            "location": 100,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/productinformation/models/search_option.py": {
        "SearchOption.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchOption.to_dict": {
            "name": "to_dict",
            "location": 56,
            "return": [
                "Dict[(nothing, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchOption.to_str": {
            "name": "to_str",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchOption.__repr__": {
            "name": "__repr__",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchOption.__eq__": {
            "name": "__eq__",
            "location": 91,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SearchOption.__ne__": {
            "name": "__ne__",
            "location": 98,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/productinformation/models/sort_direction.py": {
        "SortDirection.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SortDirection.to_dict": {
            "name": "to_dict",
            "location": 49,
            "return": [
                "Dict[(nothing, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SortDirection.to_str": {
            "name": "to_str",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SortDirection.__repr__": {
            "name": "__repr__",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SortDirection.__eq__": {
            "name": "__eq__",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int,BitVec]",
                    "int"
                ]
            }
        },
        "SortDirection.__ne__": {
            "name": "__ne__",
            "location": 91,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/productinformation/models/sort_option.py": {
        "SortOption.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SortOption.to_dict": {
            "name": "to_dict",
            "location": 55,
            "return": [
                "Dict[(nothing, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SortOption.to_str": {
            "name": "to_str",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SortOption.__repr__": {
            "name": "__repr__",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SortOption.__eq__": {
            "name": "__eq__",
            "location": 90,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SortOption.__ne__": {
            "name": "__ne__",
            "location": 97,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/productinformation/models/sort_parameters.py": {
        "SortParameters.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sort_option": [
                    "str",
                    "None",
                    "bytes",
                    "bool",
                    "List[str]",
                    "Callable[...,T]"
                ],
                "direction": [
                    "str",
                    "bool",
                    "None"
                ],
                "sort_parameter_id": [
                    "None",
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[int]",
                    "T"
                ]
            }
        },
        "SortParameters.sort_option": {
            "name": "sort_option",
            "location": 69,
            "return": [
                "dict[str, dict[str, typing.Any]]",
                "dict[str, dict[, ]]",
                "dict[str, dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "sort_option": [
                    "Optional[List[str]]",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "list",
                    "bool"
                ]
            }
        },
        "SortParameters.direction": {
            "name": "direction",
            "location": 92,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[float]",
                    "bool"
                ]
            }
        },
        "SortParameters.sort_parameter_id": {
            "name": "sort_parameter_id",
            "location": 116,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "sort_parameter_id": [
                    "int",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "SortParameters.to_dict": {
            "name": "to_dict",
            "location": 127,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SortParameters.to_str": {
            "name": "to_str",
            "location": 154,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SortParameters.__repr__": {
            "name": "__repr__",
            "location": 158,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SortParameters.__eq__": {
            "name": "__eq__",
            "location": 162,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int,BitVec]",
                    "int"
                ]
            }
        },
        "SortParameters.__ne__": {
            "name": "__ne__",
            "location": 169,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/productinformation/models/value_pair.py": {
        "ValuePair.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value_id": [
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "str",
                    "int"
                ],
                "value": [
                    "str",
                    "None",
                    "float",
                    "List[Type]",
                    "Optional[Node]",
                    "List[Node]",
                    "Optional[List[Node]]",
                    "int",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "ValuePair.value_id": {
            "name": "value_id",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value_id": [
                    "str",
                    "int"
                ]
            }
        },
        "ValuePair.value": {
            "name": "value",
            "location": 90,
            "return": [
                "dict[, ]",
                "str",
                "float",
                "int",
                "list[int]",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "list"
                ]
            }
        },
        "ValuePair.to_dict": {
            "name": "to_dict",
            "location": 101,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValuePair.to_str": {
            "name": "to_str",
            "location": 128,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValuePair.__repr__": {
            "name": "__repr__",
            "location": 132,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValuePair.__eq__": {
            "name": "__eq__",
            "location": 136,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int,BitVec]",
                    "int"
                ]
            }
        },
        "ValuePair.__ne__": {
            "name": "__ne__",
            "location": 143,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "digikey-api-master/digikey/v3/productinformation/models/__init__.py": {},
    "digikey-api-master/generate-v3-api/generage_client_swagger.py": {
        "getDigikeyAPIswaggerSpecJSON": {
            "name": "getDigikeyAPIswaggerSpecJSON",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "destPath": [
                    "str"
                ]
            }
        },
        "wget": {
            "name": "wget",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "fileName": [
                    "str"
                ],
                "url": [
                    "str",
                    "Dict",
                    "Dict[str,str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "codeGen_api": {
            "name": "codeGen_api",
            "location": 133,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "digikeyAPIdef": [
                    "str",
                    "int",
                    "Dict",
                    "Optional[str]",
                    "None"
                ],
                "swaggerCodeGen_config": [
                    "str",
                    "float"
                ]
            }
        },
        "subprocess_run": {
            "name": "subprocess_run",
            "location": 237,
            "return": [
                "subprocess.CompletedProcess"
            ],
            "arguments": {
                "subprocessCMD": [
                    "str",
                    "List[str]",
                    "float",
                    "bytes",
                    "Optional[bytes]",
                    "None",
                    "Optional[int]",
                    "int",
                    "pathlib.Path",
                    "bool"
                ],
                "shell": [
                    "bool",
                    "str",
                    "List[str]",
                    "Optional[bytes]",
                    "Optional[int]",
                    "float",
                    "pathlib.Path"
                ]
            }
        },
        "copytree": {
            "name": "copytree",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "src": [
                    "str",
                    "pathlib.Path",
                    "pathlib.PurePath"
                ],
                "dst": [
                    "str",
                    "List[str]"
                ],
                "symlinks": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "float",
                    "FrozenSet[int]",
                    "Set[int]"
                ],
                "ignore": [
                    "str",
                    "None",
                    "float",
                    "Optional[str]",
                    "Set[int]",
                    "FrozenSet[int]",
                    "frozenset"
                ]
            }
        },
        "copy_generated_files": {
            "name": "copy_generated_files",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "codeGen_api.overwriteCopy": {
            "name": "overwriteCopy",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "srcFile": [
                    "str"
                ],
                "dstPath": [
                    "str"
                ]
            }
        }
    },
    "digikey-api-master/tests/fixtures.py": {},
    "digikey-api-master/tests/test_oauth2.py": {
        "mock_open_new": {
            "name": "mock_open_new",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "Oauth2Tests.setUp": {
            "name": "setUp",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Oauth2Tests.tearDown": {
            "name": "tearDown",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Oauth2Tests.test_authentication": {
            "name": "test_authentication",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_on": [
                    "mock.Mock",
                    "responses.RequestsMock"
                ]
            }
        }
    },
    "digikey-api-master/tests/utils.py": {
        "digikey_api_mock_response": {
            "name": "digikey_api_mock_response",
            "location": 10,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "data": [
                    "Dict",
                    "None"
                ]
            }
        },
        "digikey_sso_mock_response": {
            "name": "digikey_sso_mock_response",
            "location": 27,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "data": [
                    "Dict",
                    "None"
                ]
            }
        },
        "request_url_from_request_mock": {
            "name": "request_url_from_request_mock",
            "location": 45,
            "return": [
                "Dict[str, Union[str, int]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "reqmock": [
                    "Dict",
                    "Callable",
                    "int",
                    "Union[str,dict]",
                    "str"
                ]
            }
        }
    },
    "digikey-api-master/tests/__init__.py": {},
    "digikey-api-master/tests/v3/ordersupport/test_address.py": {
        "TestAddress.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddress.tearDown": {
            "name": "tearDown",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddress.testAddress": {
            "name": "testAddress",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "digikey-api-master/tests/v3/ordersupport/test_api_error_response.py": {
        "TestApiErrorResponse.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiErrorResponse.tearDown": {
            "name": "tearDown",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiErrorResponse.testApiErrorResponse": {
            "name": "testApiErrorResponse",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "digikey-api-master/tests/v3/ordersupport/test_api_validation_error.py": {
        "TestApiValidationError.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiValidationError.tearDown": {
            "name": "tearDown",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiValidationError.testApiValidationError": {
            "name": "testApiValidationError",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "digikey-api-master/tests/v3/ordersupport/test_line_item.py": {
        "TestLineItem.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLineItem.tearDown": {
            "name": "tearDown",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLineItem.testLineItem": {
            "name": "testLineItem",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "digikey-api-master/tests/v3/ordersupport/test_order_details_api.py": {
        "TestOrderDetailsApi.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOrderDetailsApi.tearDown": {
            "name": "tearDown",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOrderDetailsApi.test_history_get": {
            "name": "test_history_get",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOrderDetailsApi.test_status_salesorder_id_get": {
            "name": "test_status_salesorder_id_get",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "digikey-api-master/tests/v3/ordersupport/test_order_status_response.py": {
        "TestOrderStatusResponse.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOrderStatusResponse.tearDown": {
            "name": "tearDown",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOrderStatusResponse.testOrderStatusResponse": {
            "name": "testOrderStatusResponse",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "digikey-api-master/tests/v3/ordersupport/test_salesorder_history_item.py": {
        "TestSalesorderHistoryItem.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSalesorderHistoryItem.tearDown": {
            "name": "tearDown",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSalesorderHistoryItem.testSalesorderHistoryItem": {
            "name": "testSalesorderHistoryItem",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "digikey-api-master/tests/v3/ordersupport/test_schedule.py": {
        "TestSchedule.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchedule.tearDown": {
            "name": "tearDown",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchedule.testSchedule": {
            "name": "testSchedule",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "digikey-api-master/tests/v3/ordersupport/test_shipping_detail.py": {
        "TestShippingDetail.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShippingDetail.tearDown": {
            "name": "tearDown",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShippingDetail.testShippingDetail": {
            "name": "testShippingDetail",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "digikey-api-master/tests/v3/ordersupport/__init__.py": {},
    "digikey-api-master/tests/v3/productinformation/test_api_error_response.py": {
        "TestApiErrorResponse.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiErrorResponse.tearDown": {
            "name": "tearDown",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiErrorResponse.testApiErrorResponse": {
            "name": "testApiErrorResponse",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "digikey-api-master/tests/v3/productinformation/test_api_validation_error.py": {
        "TestApiValidationError.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiValidationError.tearDown": {
            "name": "tearDown",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiValidationError.testApiValidationError": {
            "name": "testApiValidationError",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "digikey-api-master/tests/v3/productinformation/test_basic_product.py": {
        "TestBasicProduct.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasicProduct.tearDown": {
            "name": "tearDown",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasicProduct.testBasicProduct": {
            "name": "testBasicProduct",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "digikey-api-master/tests/v3/productinformation/test_digi_reel_pricing.py": {
        "TestDigiReelPricing.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDigiReelPricing.tearDown": {
            "name": "tearDown",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDigiReelPricing.testDigiReelPricing": {
            "name": "testDigiReelPricing",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "digikey-api-master/tests/v3/productinformation/test_filters.py": {
        "TestFilters.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFilters.tearDown": {
            "name": "tearDown",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFilters.testFilters": {
            "name": "testFilters",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "digikey-api-master/tests/v3/productinformation/test_iso_search_locale.py": {
        "TestIsoSearchLocale.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsoSearchLocale.tearDown": {
            "name": "tearDown",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsoSearchLocale.testIsoSearchLocale": {
            "name": "testIsoSearchLocale",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "digikey-api-master/tests/v3/productinformation/test_keyword_search_request.py": {
        "TestKeywordSearchRequest.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeywordSearchRequest.tearDown": {
            "name": "tearDown",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeywordSearchRequest.testKeywordSearchRequest": {
            "name": "testKeywordSearchRequest",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "digikey-api-master/tests/v3/productinformation/test_keyword_search_response.py": {
        "TestKeywordSearchResponse.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeywordSearchResponse.tearDown": {
            "name": "tearDown",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeywordSearchResponse.testKeywordSearchResponse": {
            "name": "testKeywordSearchResponse",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "digikey-api-master/tests/v3/productinformation/test_limited_parameter.py": {
        "TestLimitedParameter.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLimitedParameter.tearDown": {
            "name": "tearDown",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLimitedParameter.testLimitedParameter": {
            "name": "testLimitedParameter",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "digikey-api-master/tests/v3/productinformation/test_limited_taxonomy.py": {
        "TestLimitedTaxonomy.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLimitedTaxonomy.tearDown": {
            "name": "tearDown",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLimitedTaxonomy.testLimitedTaxonomy": {
            "name": "testLimitedTaxonomy",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "digikey-api-master/tests/v3/productinformation/test_manufacturer_product_details_request.py": {
        "TestManufacturerProductDetailsRequest.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestManufacturerProductDetailsRequest.tearDown": {
            "name": "tearDown",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestManufacturerProductDetailsRequest.testManufacturerProductDetailsRequest": {
            "name": "testManufacturerProductDetailsRequest",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "digikey-api-master/tests/v3/productinformation/test_parametric_filter.py": {
        "TestParametricFilter.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParametricFilter.tearDown": {
            "name": "tearDown",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParametricFilter.testParametricFilter": {
            "name": "testParametricFilter",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "digikey-api-master/tests/v3/productinformation/test_part_search_api.py": {
        "TestPartSearchApi.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPartSearchApi.tearDown": {
            "name": "tearDown",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPartSearchApi.test_products_digi_key_part_number_digi_reel_pricing_get": {
            "name": "test_products_digi_key_part_number_digi_reel_pricing_get",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPartSearchApi.test_products_digi_key_part_number_get": {
            "name": "test_products_digi_key_part_number_get",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPartSearchApi.test_products_keyword_post": {
            "name": "test_products_keyword_post",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPartSearchApi.test_products_manufacturer_product_details_post": {
            "name": "test_products_manufacturer_product_details_post",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPartSearchApi.test_products_part_number_with_suggested_products_get": {
            "name": "test_products_part_number_with_suggested_products_get",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "digikey-api-master/tests/v3/productinformation/test_pid_vid.py": {
        "TestPidVid.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPidVid.tearDown": {
            "name": "tearDown",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPidVid.testPidVid": {
            "name": "testPidVid",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "digikey-api-master/tests/v3/productinformation/test_price_break.py": {
        "TestPriceBreak.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPriceBreak.tearDown": {
            "name": "tearDown",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPriceBreak.testPriceBreak": {
            "name": "testPriceBreak",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "digikey-api-master/tests/v3/productinformation/test_product.py": {
        "TestProduct.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProduct.tearDown": {
            "name": "tearDown",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProduct.testProduct": {
            "name": "testProduct",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "digikey-api-master/tests/v3/productinformation/test_product_details.py": {
        "TestProductDetails.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProductDetails.tearDown": {
            "name": "tearDown",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProductDetails.testProductDetails": {
            "name": "testProductDetails",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "digikey-api-master/tests/v3/productinformation/test_search_option.py": {
        "TestSearchOption.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchOption.tearDown": {
            "name": "tearDown",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchOption.testSearchOption": {
            "name": "testSearchOption",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "digikey-api-master/tests/v3/productinformation/test_sort_direction.py": {
        "TestSortDirection.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSortDirection.tearDown": {
            "name": "tearDown",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSortDirection.testSortDirection": {
            "name": "testSortDirection",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "digikey-api-master/tests/v3/productinformation/test_sort_option.py": {
        "TestSortOption.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSortOption.tearDown": {
            "name": "tearDown",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSortOption.testSortOption": {
            "name": "testSortOption",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "digikey-api-master/tests/v3/productinformation/test_sort_parameters.py": {
        "TestSortParameters.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSortParameters.tearDown": {
            "name": "tearDown",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSortParameters.testSortParameters": {
            "name": "testSortParameters",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "digikey-api-master/tests/v3/productinformation/test_value_pair.py": {
        "TestValuePair.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValuePair.tearDown": {
            "name": "tearDown",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValuePair.testValuePair": {
            "name": "testValuePair",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "digikey-api-master/tests/v3/productinformation/__init__.py": {}
}
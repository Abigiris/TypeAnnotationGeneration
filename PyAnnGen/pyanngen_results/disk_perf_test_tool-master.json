{
    "disk_perf_test_tool-master/scripts/assumptions_check.py": {
        "linearity_table": {
            "name": "linearity_table",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Dict"
                ],
                "types": [
                    "str",
                    "bool"
                ],
                "vals": [
                    "str",
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]",
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "th_plot": {
            "name": "th_plot",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "Dict",
                    "Tuple[int]",
                    "Optional[str]",
                    "str",
                    "numpy.ndarray",
                    "None"
                ],
                "tt": [
                    "Union[Dict, List]",
                    "Dict[str, List[str]]",
                    "dict"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "str",
                    "bytes",
                    "IO"
                ]
            }
        }
    },
    "disk_perf_test_tool-master/scripts/data.py": {},
    "disk_perf_test_tool-master/scripts/data2.py": {},
    "disk_perf_test_tool-master/scripts/data_extractor.py": {
        "connect": {
            "name": "connect",
            "location": 9,
            "return": [
                "sqlite3.dbapi2.Connection"
            ],
            "arguments": {
                "url": [
                    "str",
                    "float",
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]"
                ]
            }
        },
        "get_all_tables": {
            "name": "get_all_tables",
            "location": 38,
            "return": [
                "int",
                "str",
                "list"
            ],
            "arguments": {
                "conn": [
                    "int",
                    "str",
                    "list"
                ]
            }
        },
        "drop_database": {
            "name": "drop_database",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "init_database": {
            "name": "init_database",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "insert_io_params": {
            "name": "insert_io_params",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [
                    "str",
                    "float",
                    "List[str]"
                ]
            }
        },
        "insert_build": {
            "name": "insert_build",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "cursor": [
                    "str"
                ],
                "build_id": [
                    "str"
                ],
                "build_type": [
                    "str"
                ],
                "iso_md5": [
                    "str"
                ]
            }
        },
        "insert_params": {
            "name": "insert_params",
            "location": 79,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "cursor": [
                    "str",
                    "Callable",
                    "Optional[Union[str, Any]]"
                ]
            }
        },
        "insert_results": {
            "name": "insert_results",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "cursor": [
                    "str",
                    "int",
                    "bool"
                ],
                "build_id": [
                    "str",
                    "int",
                    "bool"
                ],
                "params_id": [
                    "str",
                    "int",
                    "bool"
                ],
                "bw": [
                    "str",
                    "int",
                    "bool"
                ],
                "dev": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "transaction": {
            "name": "transaction",
            "location": 106,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "conn": [
                    "Iterable[T]",
                    "str"
                ]
            }
        },
        "json_to_db": {
            "name": "json_to_db",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "json_data": [
                    "Dict",
                    "str",
                    "bytes",
                    "Optional[bool]",
                    "bool",
                    "None"
                ],
                "conn": [
                    "str",
                    "int",
                    "bool",
                    "Dict",
                    "Optional[Dict]",
                    "None"
                ]
            }
        },
        "to_db": {
            "name": "to_db",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "load_slice": {
            "name": "load_slice",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "cursor": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "build_id": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "y_param": [
                    "int",
                    "str"
                ]
            }
        },
        "from_db": {
            "name": "from_db",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "disk_perf_test_tool-master/scripts/data_generator.py": {},
    "disk_perf_test_tool-master/scripts/disk_io_pp.py": {},
    "disk_perf_test_tool-master/scripts/generate_load.py": {},
    "disk_perf_test_tool-master/scripts/grafana.py": {},
    "disk_perf_test_tool-master/scripts/influx_exporter.py": {
        "connect": {
            "name": "connect",
            "location": 5,
            "return": [
                "InfluxDBClient",
                "str",
                "Dict[str,Dict[str,Any]]",
                "Dict"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "add_data": {
            "name": "add_data",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [
                    "Dict[str, str]",
                    "str",
                    "dict",
                    "list",
                    "bytes"
                ],
                "hostname": [
                    "str",
                    "List",
                    "Dict[str,Any]",
                    "int",
                    "Tuple[str]",
                    "Dict[str,List[str]]",
                    "Dict[str,list[str]]"
                ],
                "data": [
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[str,str]"
                ]
            }
        }
    },
    "disk_perf_test_tool-master/scripts/perf.py": {
        "x": {
            "name": "x",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "disk_perf_test_tool-master/scripts/receiver.py": {},
    "disk_perf_test_tool-master/scripts/run.py": {},
    "disk_perf_test_tool-master/scripts/show_disk_delta.py": {
        "read_dstats": {
            "name": "read_dstats",
            "location": 26,
            "return": [
                "Dict[(str, Dict[(str, int)])]"
            ],
            "arguments": {}
        },
        "diff_stats": {
            "name": "diff_stats",
            "location": 35,
            "return": [
                "dict"
            ],
            "arguments": {
                "obj1": [
                    "Dict",
                    "Dict[str,float]",
                    "Optional[Tuple[str,...]]",
                    "int",
                    "Dict[str,Any]",
                    "Mapping[str,Any]",
                    "float"
                ],
                "obj2": [
                    "Tuple[Union[str,...]]",
                    "Dict",
                    "Dict[str,float]",
                    "Optional[Tuple[str,...]]",
                    "int",
                    "Dict[str,Any]",
                    "Mapping[str,Any]",
                    "float"
                ]
            }
        },
        "run_tool": {
            "name": "run_tool",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd": [
                    "str",
                    "List",
                    "List[list[str]]",
                    "List[str]",
                    "int",
                    "List[List[str]]"
                ],
                "suppress_console": [
                    "bool",
                    "int",
                    "Optional[int]",
                    "List",
                    "List[str]"
                ]
            }
        }
    },
    "disk_perf_test_tool-master/scripts/webui.py": {
        "to_timestamp": {
            "name": "to_timestamp",
            "location": 17,
            "return": [
                "int"
            ],
            "arguments": {
                "str_datetime": [
                    "str"
                ]
            }
        },
        "backfill_thread": {
            "name": "backfill_thread",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "dstore": [
                    "str",
                    "float",
                    "bytes",
                    "List[tuple]",
                    "int",
                    "List[float]"
                ]
            }
        },
        "web_main_thread": {
            "name": "web_main_thread",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "sensors_data_storage": [
                    "List[Tuple[Any,Dict]]",
                    "Dict[str,Any]",
                    "List[tuple[Union[Any,dict]]]",
                    "Callable[,Any]"
                ]
            }
        },
        "web_main_stop": {
            "name": "web_main_stop",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "WebWally.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sensors_data_storage": [
                    "Dict",
                    "bytes",
                    "str",
                    "List[str]",
                    "Dict[str,Dict[str,str]]",
                    "Dict[str,dict[str,str]]"
                ]
            }
        },
        "WebWally.sensors": {
            "name": "sensors",
            "location": 48,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "float",
                    "int",
                    "bytes"
                ],
                "stop": [
                    "int",
                    "str",
                    "bool",
                    "Union[str,int]"
                ],
                "step": [
                    "bool",
                    "Literal",
                    "int"
                ],
                "name": [
                    "bool",
                    "str",
                    "List[str]",
                    "Tuple[Union[int,int,int,int]]",
                    "Tuple[int,int,int,int]",
                    "None",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "WebWally.index": {
            "name": "index",
            "location": 72,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "disk_perf_test_tool-master/scripts/__init__.py": {},
    "disk_perf_test_tool-master/scripts/postprocessing/bottleneck.py": {},
    "disk_perf_test_tool-master/scripts/postprocessing/io_py_result_processor.py": {},
    "disk_perf_test_tool-master/scripts/postprocessing/stat.py": {},
    "disk_perf_test_tool-master/scripts/postprocessing/__init__.py": {},
    "disk_perf_test_tool-master/tests/test_executors.py": {
        "AgentTest.test_ls": {
            "name": "test_ls",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentTest.test_sleep1": {
            "name": "test_sleep1",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentTest.test_sleep2": {
            "name": "test_sleep2",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentTest.test_ssh_executor1": {
            "name": "test_ssh_executor1",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "disk_perf_test_tool-master/tests/test_fio_parser.py": {
        "AgentTest.test_parse_value": {
            "name": "test_parse_value",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentTest.test_compile_simplest": {
            "name": "test_compile_simplest",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentTest.test_compile_defaults": {
            "name": "test_compile_defaults",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentTest.test_defaults": {
            "name": "test_defaults",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentTest.test_external_params": {
            "name": "test_external_params",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentTest.test_cycle": {
            "name": "test_cycle",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentTest.test_cycles": {
            "name": "test_cycles",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentTest.test_time_estimate": {
            "name": "test_time_estimate",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentTest.test_time_estimate_large": {
            "name": "test_time_estimate_large",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentTest.test_time_estimate_large2": {
            "name": "test_time_estimate_large2",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentTest.test_repeat": {
            "name": "test_repeat",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentTest.test_real_tasks": {
            "name": "test_real_tasks",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "disk_perf_test_tool-master/tests/test_hlstorage.py": {
        "in_temp_dir": {
            "name": "in_temp_dir",
            "location": 16,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "test_sensor_ts": {
            "name": "test_sensor_ts",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_result_ts": {
            "name": "test_result_ts",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TJobParams.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TJobParams.summary": {
            "name": "summary",
            "location": 40,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TJobParams.long_summary": {
            "name": "long_summary",
            "location": 44,
            "return": [
                "Text",
                "Optional[str]",
                "Dict[str,Any]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TJobParams.copy": {
            "name": "copy",
            "location": 47,
            "return": [
                "TJobParams"
            ],
            "arguments": {
                "self": [
                    "_TTJobParams@@TJobParams@@"
                ]
            }
        },
        "TJobParams.char_tpl": {
            "name": "char_tpl",
            "location": 51,
            "return": [
                "Tuple[int]",
                "int",
                "str",
                "Tuple[str,int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TJobConfig.storage_id": {
            "name": "storage_id",
            "location": 57,
            "return": [
                "Text",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TJobConfig.params": {
            "name": "params",
            "location": 61,
            "return": [
                "TJobParams",
                "bool",
                "str",
                "Union[numbers.Real,numpy.ndarray]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TJobConfig.raw": {
            "name": "raw",
            "location": 64,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TJobConfig.fromraw": {
            "name": "fromraw",
            "location": 68,
            "return": [
                "TJobConfig"
            ],
            "arguments": {
                "cls": [
                    "Type[_TTJobConfig]"
                ],
                "data": []
            }
        },
        "TSuiteConfig.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "disk_perf_test_tool-master/tests/test_math.py": {
        "array_eq": {
            "name": "array_eq",
            "location": 11,
            "return": [
                "bool",
                "utils.Node",
                "numpy.ndarray"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "numpy.array",
                    "numpy.ndarray"
                ],
                "y": [
                    "float",
                    "int",
                    "numpy.array",
                    "numpy.ndarray"
                ],
                "max_diff": [
                    "float",
                    "numpy.array",
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "test_conversion_coef": {
            "name": "test_conversion_coef",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rebin_histo": {
            "name": "test_rebin_histo",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_interpolate": {
            "name": "test_interpolate",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_interpolate2": {
            "name": "test_interpolate2",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_interpolate_qd": {
            "name": "test_interpolate_qd",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_interpolate_fio": {
            "name": "test_interpolate_fio",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_interpolate_fio_negative": {
            "name": "test_interpolate_fio_negative",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "disk_perf_test_tool-master/tests/test_rpc.py": {
        "rpc_conn_ctx": {
            "name": "rpc_conn_ctx",
            "location": 10,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "uri": [
                    "str",
                    "IO",
                    "List[str]",
                    "IO[bytes]"
                ],
                "log_level": [
                    "int",
                    "Callable",
                    "None"
                ]
            }
        },
        "test_rpc_simple": {
            "name": "test_rpc_simple",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rpc_plugins": {
            "name": "test_rpc_plugins",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "disk_perf_test_tool-master/tests/test_ssh.py": {
        "test_ssh_url_parser": {
            "name": "test_ssh_url_parser",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "conn_ctx": {
            "name": "conn_ctx",
            "location": 45,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "uri": []
            }
        },
        "test_ssh_connect": {
            "name": "test_ssh_connect",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ssh_complex": {
            "name": "test_ssh_complex",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_file_copy": {
            "name": "test_file_copy",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "disk_perf_test_tool-master/tests/__init__.py": {},
    "disk_perf_test_tool-master/wally/ceph.py": {
        "get_osds_info": {
            "name": "get_osds_info",
            "location": 20,
            "return": [
                "dict"
            ],
            "arguments": {
                "node": [
                    "str"
                ],
                "ceph_extra_args": [
                    "str",
                    "Text"
                ],
                "thcount": [
                    "str",
                    "int"
                ]
            }
        },
        "get_mons_ips": {
            "name": "get_mons_ips",
            "location": 26,
            "return": [
                "set"
            ],
            "arguments": {
                "node": [
                    "int",
                    "str",
                    "Tuple"
                ],
                "ceph_extra_args": [
                    "Text",
                    "int",
                    "str",
                    "Tuple"
                ]
            }
        },
        "raw_dev_name": {
            "name": "raw_dev_name",
            "location": 116,
            "return": [
                "str",
                "List[Tuple[int]]",
                "List[str]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Union[List,str]",
                    "npipes.utils.typeshed.pathlike",
                    "Optional[str]"
                ]
            }
        },
        "DiscoverCephStage.run": {
            "name": "run",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "test_run_class.TestRun",
                    "Exception"
                ]
            }
        },
        "CollectCephInfoStage.run": {
            "name": "run",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "bool"
                ]
            }
        }
    },
    "disk_perf_test_tool-master/wally/config.py": {
        "Config.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dct": [
                    "bytes",
                    "Dict",
                    "int",
                    "Dict[str,Dict[str,str]]",
                    "Dict[str,dict[str,str]]",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "None"
                ]
            }
        },
        "Config.fromraw": {
            "name": "fromraw",
            "location": 40,
            "return": [
                "Config"
            ],
            "arguments": {
                "cls": [
                    "Type[_TConfig]"
                ],
                "data": [
                    "Dict[str,Any]",
                    "str",
                    "Type"
                ]
            }
        },
        "Config.raw": {
            "name": "raw",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.get": {
            "name": "get",
            "location": 46,
            "return": [
                "str",
                "List",
                "None",
                "bool",
                "bytes",
                "Dict[str,str]",
                "List[Callable[...,Any]]",
                "Dict[str,int]",
                "frozenset",
                "Dict[tuple[Union[str,int]],str]",
                "Config"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "default": [
                    "bool",
                    "bytes",
                    "None"
                ]
            }
        },
        "Config.__getattr__": {
            "name": "__getattr__",
            "location": 62,
            "return": [
                "int",
                "Dict[str,str]",
                "Callable",
                "Dict[str,list[str]]",
                "str",
                "Dict[str,dict[str,Any]]",
                "Tuple[Union[str,str]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "Config.__setattr__": {
            "name": "__setattr__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "val": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        },
        "Config.__contains__": {
            "name": "__contains__",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "disk_perf_test_tool-master/wally/console_report.py": {
        "get_console_report_table": {
            "name": "get_console_report_table",
            "location": 26,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "suite": [
                    "Dict",
                    "Dict[str,Any]",
                    "result_classes.SuiteConfig"
                ],
                "rstorage": [
                    "result_classes.SuiteConfig",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "ConsoleReportStage.run": {
            "name": "run",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "test_run_class.TestRun"
                ]
            }
        }
    },
    "disk_perf_test_tool-master/wally/data_selectors.py": {
        "find_all_series": {
            "name": "find_all_series",
            "location": 36,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "rstorage": [
                    "str",
                    "result_classes.IWallyStorage",
                    "bytes"
                ],
                "suite_id": [
                    "str",
                    "bytes",
                    "result_classes.IWallyStorage"
                ],
                "job_id": [
                    "str",
                    "bytes",
                    "result_classes.IWallyStorage"
                ],
                "metric": [
                    "str",
                    "bytes",
                    "result_classes.IWallyStorage"
                ]
            }
        },
        "get_aggregated": {
            "name": "get_aggregated",
            "location": 41,
            "return": [
                "str",
                "Sequence[str]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "rstorage": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "suite_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "job_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "metric": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "trange": [
                    "str",
                    "int"
                ]
            }
        },
        "get_nodes": {
            "name": "get_nodes",
            "location": 107,
            "return": [
                "list"
            ],
            "arguments": {
                "storage": [
                    "Iterable[str]",
                    "result_classes.IWallyStorage",
                    "str",
                    "Exception"
                ],
                "roles": [
                    "Iterable[str]",
                    "str",
                    "Exception",
                    "result_classes.IWallyStorage"
                ]
            }
        }
    },
    "disk_perf_test_tool-master/wally/legacy_report.py": {},
    "disk_perf_test_tool-master/wally/logger.py": {
        "color_me": {
            "name": "color_me",
            "location": 6,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "color": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "color_me.closure": {
            "name": "closure",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "ColoredFormatter.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "use_color": [
                    "bool",
                    "float"
                ],
                "datefmt": [
                    "str",
                    "None",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "ColoredFormatter.format": {
            "name": "format",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "Dict",
                    "str"
                ]
            }
        }
    },
    "disk_perf_test_tool-master/wally/main.py": {
        "log_stage": {
            "name": "log_stage",
            "location": 69,
            "return": [
                "Iterator[None]",
                "Generator"
            ],
            "arguments": {
                "stage": [
                    "bool",
                    "int",
                    "logging.Logger"
                ],
                "cleanup": [
                    "bool",
                    "int",
                    "logging.Logger"
                ]
            }
        },
        "list_results": {
            "name": "list_results",
            "location": 80,
            "return": [
                "List[Tuple[(Any, str, str, Any, str)]]"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "limit": [
                    "int",
                    "List",
                    "bool",
                    "List[str]",
                    "str"
                ]
            }
        },
        "log_nodes_statistic_stage": {
            "name": "log_nodes_statistic_stage",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "test_run_class.TestRun"
                ]
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 134,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {
                "argv": [
                    "List[str]",
                    "Optional[List[str]]",
                    "Sequence[str]"
                ]
            }
        },
        "get_config_path": {
            "name": "get_config_path",
            "location": 205,
            "return": [
                "str"
            ],
            "arguments": {
                "config": [
                    "Dict",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "Optional[pyramid.config.Configurator]",
                    "ambianic.config_mgm.config_diff.Config",
                    "config.Config"
                ],
                "opts_value": [
                    "str",
                    "Optional[str]",
                    "Callable",
                    "None",
                    "bool",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "opwen_email_server.services.storage.AzureTextStorage"
                ]
            }
        },
        "find_cfg_file": {
            "name": "find_cfg_file",
            "location": 216,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "included_from": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "load_config": {
            "name": "load_config",
            "location": 231,
            "return": [
                "wally.config.Config"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "get_run_stages": {
            "name": "get_run_stages",
            "location": 249,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 262,
            "return": [
                "int"
            ],
            "arguments": {
                "argv": [
                    "List[str]"
                ]
            }
        }
    },
    "disk_perf_test_tool-master/wally/openstack.py": {
        "get_floating_ip": {
            "name": "get_floating_ip",
            "location": 21,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "vm": [
                    "str",
                    "List[str]",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "ensure_connected_to_openstack": {
            "name": "ensure_connected_to_openstack",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "test_run_class.TestRun"
                ]
            }
        },
        "get_OS_credentials": {
            "name": "get_OS_credentials",
            "location": 39,
            "return": [
                "wally.openstack_api.OSCreds"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "get_vm_keypair_path": {
            "name": "get_vm_keypair_path",
            "location": 89,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "cfg": [
                    "str",
                    "IO"
                ]
            }
        },
        "DiscoverOSStage.validate": {
            "name": "validate",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "conf": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "DiscoverOSStage.run": {
            "name": "run",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "test_run_class.TestRun"
                ]
            }
        },
        "CreateOSVMSStage.run": {
            "name": "run",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "test_run_class.TestRun"
                ]
            }
        },
        "CreateOSVMSStage.cleanup": {
            "name": "cleanup",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "test_run_class.TestRun"
                ]
            }
        }
    },
    "disk_perf_test_tool-master/wally/openstack_api.py": {
        "get_openstack_credentials_from_env": {
            "name": "get_openstack_credentials_from_env",
            "location": 48,
            "return": [
                "OSCreds"
            ],
            "arguments": {}
        },
        "os_connect": {
            "name": "os_connect",
            "location": 69,
            "return": [
                "OSConnection"
            ],
            "arguments": {
                "os_creds": [
                    "str",
                    "bool",
                    "Union[str, bytes]"
                ],
                "version": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "find_vms": {
            "name": "find_vms",
            "location": 84,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "conn": [
                    "str",
                    "int"
                ],
                "name_prefix": [
                    "str"
                ]
            }
        },
        "pause": {
            "name": "pause",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [
                    "int",
                    "str",
                    "Optional[float]",
                    "list",
                    "bytes"
                ],
                "ids": [
                    "concurrenfutures.ThreadPoolExecutor",
                    "Iterable[int]",
                    "str",
                    "Optional[int]"
                ],
                "executor": [
                    "concurrenfutures.ThreadPoolExecutor",
                    "Iterable[int]",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "unpause": {
            "name": "unpause",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [
                    "bool",
                    "int",
                    "Optional[bool]"
                ],
                "ids": [
                    "concurrenfutures.ThreadPoolExecutor",
                    "Iterable[int]",
                    "Optional[int]",
                    "Dict[str, T]",
                    "str",
                    "T"
                ],
                "executor": [
                    "concurrenfutures.ThreadPoolExecutor",
                    "Iterable[int]",
                    "Optional[int]",
                    "Dict[str, T]",
                    "str",
                    "T"
                ],
                "max_resume_time": [
                    "bool",
                    "int",
                    "Optional[bool]"
                ]
            }
        },
        "prepare_os": {
            "name": "prepare_os",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [
                    "Dict[str, Any]",
                    "Optional[float]",
                    "str"
                ],
                "params": [
                    "Dict[str, Any]",
                    "Optional[float]",
                    "str"
                ],
                "max_vm_per_node": [
                    "int",
                    "Tuple[int, int]",
                    "bool"
                ]
            }
        },
        "create_keypair": {
            "name": "create_keypair",
            "location": 166,
            "return": [
                "str",
                "bool",
                "Callable",
                "list"
            ],
            "arguments": {
                "conn": [
                    "str",
                    "Dict[str, str]",
                    "int"
                ],
                "name": [
                    "str",
                    "Dict[str, str]",
                    "int"
                ],
                "pub_key_path": [
                    "str"
                ],
                "priv_key_path": [
                    "str"
                ]
            }
        },
        "get_or_create_aa_group": {
            "name": "get_or_create_aa_group",
            "location": 215,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "conn": [
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "allow_ssh_and_ping": {
            "name": "allow_ssh_and_ping",
            "location": 230,
            "return": [
                "int",
                "str",
                "Tuple[str, int, str]"
            ],
            "arguments": {
                "conn": [
                    "str",
                    "int"
                ],
                "group_name": [
                    "str"
                ]
            }
        },
        "create_image": {
            "name": "create_image",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [
                    "str",
                    "bool",
                    "int"
                ],
                "name": [
                    "str",
                    "type"
                ],
                "url": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "create_flavor": {
            "name": "create_flavor",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [
                    "str",
                    "int"
                ],
                "name": [
                    "str",
                    "int"
                ],
                "ram_size": [
                    "int"
                ],
                "hdd_size": [
                    "int"
                ],
                "cpu_count": [
                    "int"
                ]
            }
        },
        "create_volume": {
            "name": "create_volume",
            "location": 316,
            "return": [
                "str",
                "Sequence[str]"
            ],
            "arguments": {
                "conn": [
                    "str",
                    "int",
                    "bool"
                ],
                "size": [
                    "str",
                    "int",
                    "bool"
                ],
                "name": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "wait_for_server_active": {
            "name": "wait_for_server_active",
            "location": 336,
            "return": [
                "bool"
            ],
            "arguments": {
                "conn": [
                    "str",
                    "Dict[str, int]",
                    "Dict[str, Any]",
                    "Dict[int, dict]",
                    "Dict[str, str]",
                    "int"
                ],
                "server": [
                    "float",
                    "str",
                    "List[Dict[str, Any]]",
                    "Callable"
                ],
                "timeout": [
                    "int",
                    "bytearray"
                ]
            }
        },
        "get_floating_ips": {
            "name": "get_floating_ips",
            "location": 364,
            "return": [
                "list"
            ],
            "arguments": {
                "conn": [
                    "bool",
                    "int",
                    "Dict[str, List['WantedGallery']]"
                ],
                "pool": [
                    "bool",
                    "str",
                    "int",
                    "Optional[int]",
                    "List[str]"
                ],
                "amount": [
                    "int",
                    "bool",
                    "list",
                    "float"
                ]
            }
        },
        "launch_vms": {
            "name": "launch_vms",
            "location": 382,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "conn": [
                    "List[str]"
                ],
                "params": [
                    "Dict[str, Any]",
                    "str",
                    "logging.LogRecord"
                ],
                "executor": [
                    "int",
                    "concurrenfutures.ThreadPoolExecutor"
                ],
                "already_has_count": [
                    "int",
                    "List[allennlp.common.util.JsonDict]",
                    "str",
                    "float"
                ]
            }
        },
        "get_free_server_groups": {
            "name": "get_free_server_groups",
            "location": 467,
            "return": [
                "Generator[(str, Any, None)]"
            ],
            "arguments": {
                "conn": [
                    "int",
                    "str"
                ],
                "template": [
                    "str",
                    "bytes"
                ]
            }
        },
        "create_vms_mt": {
            "name": "create_vms_mt",
            "location": 483,
            "return": [
                "list"
            ],
            "arguments": {
                "conn": [
                    "str",
                    "concurrenfutures.ThreadPoolExecutor",
                    "bool",
                    "Optional[str]"
                ],
                "amount": [
                    "str",
                    "int"
                ],
                "executor": [
                    "str",
                    "concurrenfutures.ThreadPoolExecutor",
                    "bool",
                    "Optional[str]"
                ],
                "group_name": [
                    "str"
                ],
                "keypair_name": [
                    "str",
                    "int"
                ],
                "img_name": [
                    "str",
                    "Optional[float]",
                    "float",
                    "bool"
                ],
                "flavor_name": [
                    "str"
                ],
                "vol_sz": [
                    "str",
                    "int"
                ],
                "network_zone_name": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "bool"
                ],
                "flt_ip_pool": [
                    "str"
                ],
                "name_templ": [
                    "str"
                ],
                "scheduler_hints": [
                    "str"
                ],
                "security_group": [
                    "str",
                    "int"
                ],
                "sec_group_size": [
                    "int",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "create_vm": {
            "name": "create_vm",
            "location": 561,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "conn": [
                    "str",
                    "list",
                    "dict",
                    "List[str]",
                    "Optional[Sequence[Any]]"
                ],
                "name": [
                    "str",
                    "list",
                    "dict",
                    "List[str]",
                    "Optional[Sequence[Any]]"
                ],
                "keypair_name": [
                    "str",
                    "list",
                    "dict",
                    "List[str]",
                    "Optional[Sequence[Any]]"
                ],
                "img": [
                    "str",
                    "list",
                    "dict",
                    "List[str]",
                    "Optional[Sequence[Any]]"
                ],
                "flavor": [
                    "str",
                    "list",
                    "dict",
                    "List[str]",
                    "Optional[Sequence[Any]]"
                ],
                "nics": [
                    "str",
                    "list",
                    "dict",
                    "List[str]",
                    "Optional[Sequence[Any]]"
                ],
                "vol_sz": [
                    "str",
                    "Optional[int]",
                    "bool",
                    "int"
                ],
                "flt_ip": [
                    "str",
                    "allennlp.common.util.JsonDict",
                    "Tuple[int, int]"
                ],
                "scheduler_hints": [
                    "str",
                    "list",
                    "dict",
                    "List[str]",
                    "Optional[Sequence[Any]]"
                ],
                "pool": [
                    "str",
                    "bool",
                    "int",
                    "Optional[bool]",
                    "Iterable[str]"
                ],
                "security_groups": [
                    "str",
                    "list",
                    "dict",
                    "List[str]",
                    "Optional[Sequence[Any]]"
                ],
                "max_retry": [
                    "int",
                    "Callable[[], float]"
                ],
                "delete_timeout": [
                    "int",
                    "str",
                    "Tuple[int, int, int]",
                    "Optional[str]",
                    "Tuple[str]",
                    "bool"
                ]
            }
        },
        "clear_nodes": {
            "name": "clear_nodes",
            "location": 609,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [
                    "List[str]",
                    "Optional[Sequence[str]]",
                    "int",
                    "Iterable[str]",
                    "bool",
                    "str",
                    "Optional[Set[str]]"
                ],
                "ids": [
                    "List[int]",
                    "int",
                    "Optional[str]",
                    "List[Tuple[str, Any]]",
                    "list",
                    "Optional[List[Any]]"
                ],
                "name_templ": [
                    "str",
                    "bool",
                    "int",
                    "float"
                ],
                "max_server_delete_time": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "OSConnection.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nova": [
                    "int",
                    "bool",
                    "float"
                ],
                "cinder": [
                    "int",
                    "bool",
                    "float"
                ],
                "glance": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "pause.pause_vm": {
            "name": "pause_vm",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "vm_id": [
                    "str"
                ]
            }
        },
        "unpause.unpause": {
            "name": "unpause",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "vm_id": []
            }
        },
        "clear_nodes.need_delete": {
            "name": "need_delete",
            "location": 614,
            "return": [
                "str"
            ],
            "arguments": {
                "srv": [
                    "Optional[str]"
                ]
            }
        }
    },
    "disk_perf_test_tool-master/wally/plot.py": {
        "io_chart": {
            "name": "io_chart",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "pp": [
                    "str",
                    "numpy.ndarray",
                    "float",
                    "None",
                    "Hashable",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "legend": [
                    "int",
                    "Dict[str,Any]",
                    "List[int]"
                ],
                "iosums": [
                    "bytes",
                    "Sequence[Sequence[float]]",
                    "Union[int, Tuple[int, int]]",
                    "int"
                ],
                "iops_log_spine": [
                    "bool",
                    "Optional[int]"
                ],
                "lat_log_spine": [
                    "bool",
                    "Optional[int]"
                ]
            }
        }
    },
    "disk_perf_test_tool-master/wally/pretty_yaml.py": {
        "dumps_simple": {
            "name": "dumps_simple",
            "location": 7,
            "return": [
                "bool",
                "str",
                "Text"
            ],
            "arguments": {
                "val": [
                    "str",
                    "int",
                    "Tuple",
                    "List[int]"
                ]
            }
        },
        "is_simple": {
            "name": "is_simple",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "val": []
            }
        },
        "all_nums": {
            "name": "all_nums",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "vals": [
                    "str",
                    "Iterable[Any]",
                    "int",
                    "Union[int,float,str]",
                    "Optional[float]"
                ]
            }
        },
        "dumpv": {
            "name": "dumpv",
            "location": 40,
            "return": [
                "List",
                "str",
                "int",
                "Dict[str,Any]"
            ],
            "arguments": {
                "data": [
                    "int",
                    "str",
                    "float",
                    "Tuple[int, int]"
                ],
                "tab_sz": [
                    "int",
                    "Optional[int]"
                ],
                "width": [
                    "int",
                    "Sequence[int]",
                    "bool"
                ],
                "min_width": [
                    "int",
                    "bool"
                ]
            }
        },
        "dumps": {
            "name": "dumps",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "data": [
                    "int",
                    "str",
                    "bool"
                ],
                "tab_sz": [
                    "int",
                    "bool",
                    "str"
                ],
                "width": [
                    "int",
                    "bool",
                    "str"
                ],
                "min_width": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "disk_perf_test_tool-master/wally/report.py": {
        "is_level_sensor": {
            "name": "is_level_sensor",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "sensor": [
                    "str",
                    "numpy.ndarray",
                    "int"
                ],
                "metric": [
                    "str",
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "is_delta_sensor": {
            "name": "is_delta_sensor",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "sensor": [
                    "str",
                    "numpy.ndarray",
                    "int"
                ],
                "metric": [
                    "str",
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "get_performance_summary": {
            "name": "get_performance_summary",
            "location": 190,
            "return": [
                "Tuple[(StoragePerfSummary, StoragePerfSummary)]"
            ],
            "arguments": {
                "storage": [
                    "int",
                    "str",
                    "numpy.ndarray",
                    "Sequence[str]"
                ],
                "suite": [
                    "int",
                    "str",
                    "numpy.ndarray",
                    "Sequence[str]"
                ],
                "hboxes": [
                    "int",
                    "str",
                    "Dict[str, int]"
                ],
                "large_blocks": [
                    "int",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "get_resources_usage2": {
            "name": "get_resources_usage2",
            "location": 380,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "suite": [
                    "result_classes.SuiteConfig",
                    "Optional[bool]",
                    "Optional[str]",
                    "str",
                    "int"
                ],
                "job": [
                    "str"
                ],
                "rstorage": [
                    "int",
                    "str"
                ],
                "roles": [
                    "bool",
                    "int"
                ],
                "sensor": [
                    "raiden.utils.List[raiden.transfer.mediated_transfer.state.MediationPairState]",
                    "int",
                    "Dict[str, float]",
                    "float",
                    "Optional[str]"
                ],
                "metric": [
                    "raiden.utils.List[raiden.transfer.mediated_transfer.state.MediationPairState]",
                    "int",
                    "Dict[str, float]",
                    "float",
                    "Optional[str]"
                ],
                "test_metric": [
                    "str",
                    "bool",
                    "int",
                    "List[str]",
                    "Optional[bool]"
                ],
                "agg_window": [
                    "str",
                    "bool",
                    "Set[str]",
                    "List[int]",
                    "Callable",
                    "List[numpy.array]"
                ]
            }
        },
        "roles_for_sensors": {
            "name": "roles_for_sensors",
            "location": 765,
            "return": [
                "collections.defaultdict"
            ],
            "arguments": {
                "storage": [
                    "int",
                    "float",
                    "result_classes.IWallyStorage"
                ]
            }
        },
        "get_sources_for_roles": {
            "name": "get_sources_for_roles",
            "location": 789,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "roles": [
                    "Iterable[str]",
                    "Iterable[dict]",
                    "Dict[str, List[str]]",
                    "str",
                    "bool"
                ]
            }
        },
        "add_devroles": {
            "name": "add_devroles",
            "location": 946,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "test_run_class.TestRun"
                ]
            }
        },
        "HTMLBlock.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "dict",
                    "bytes",
                    "Union['Contributor', 'Coverage']",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Optional[Dict[str, Any]]",
                    "list"
                ],
                "order_attr": [
                    "bytes",
                    "str",
                    "numpy.ndarray",
                    "bool",
                    "int",
                    "numpy.array"
                ]
            }
        },
        "HTMLBlock.__eq__": {
            "name": "__eq__",
            "location": 87,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "Optional[str]",
                    "str",
                    "dict"
                ]
            }
        },
        "HTMLBlock.__lt__": {
            "name": "__lt__",
            "location": 90,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "Optional[str]",
                    "str",
                    "dict"
                ]
            }
        },
        "Table.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "header": [
                    "MutableMapping"
                ]
            }
        },
        "Table.add_line": {
            "name": "add_line",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "dict",
                    "str",
                    "T",
                    "List[T]",
                    "Union[str, bytes]"
                ]
            }
        },
        "Table.html": {
            "name": "html",
            "location": 102,
            "return": [
                "List[Callable]",
                "int",
                "List[str]",
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReporterBase.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rstorage": [
                    "int",
                    "bool",
                    "float"
                ],
                "style": [
                    "int",
                    "bool",
                    "float"
                ],
                "colors": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ReporterBase.plt": {
            "name": "plt",
            "location": 141,
            "return": [
                "int",
                "bool",
                "Optional[str]",
                "Callable[[KT], VT]",
                "str"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "numpy.ndarray",
                    "Callable[..., None]",
                    "int"
                ],
                "ds": [
                    "numpy.ndarray",
                    "Callable[..., None]",
                    "int"
                ]
            }
        },
        "SuiteReporter.get_divs": {
            "name": "get_divs",
            "location": 149,
            "return": [
                "typing.Iterator[typing.Tuple[builtins.str, builtins.str, HTMLBlock]]"
            ],
            "arguments": {
                "self": [],
                "suite": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "JobReporter.get_divs": {
            "name": "get_divs",
            "location": 157,
            "return": [
                "typing.Iterator[typing.Tuple[builtins.str, builtins.str, HTMLBlock]]"
            ],
            "arguments": {
                "self": [],
                "suite": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ],
                "job": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "StoragePerfSummary.__init__": {
            "name": "__init__",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PerformanceSummary.get_divs": {
            "name": "get_divs",
            "location": 235,
            "return": [
                "Generator[(Tuple[(str, str, HTMLBlock)], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "suite": [
                    "dict",
                    "str",
                    "List[int]",
                    "Dict[str, Set[str]]"
                ]
            }
        },
        "IOQD.get_divs": {
            "name": "get_divs",
            "location": 295,
            "return": [
                "Generator[(Tuple[(str, str, HTMLBlock)], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "suite": [
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "ResourceQD.get_divs": {
            "name": "get_divs",
            "location": 329,
            "return": [
                "Generator[(Tuple[(str, str, HTMLBlock)], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "suite": [
                    "Dict[str, AsyncGenerator]"
                ]
            }
        },
        "ResourceConsumptionSummary.get_divs": {
            "name": "get_divs",
            "location": 414,
            "return": [
                "Generator[(Tuple[(str, str, HTMLBlock)], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "suite": [
                    "str",
                    "List[str]",
                    "float",
                    "dict"
                ]
            }
        },
        "EngineeringSummary.get_divs": {
            "name": "get_divs",
            "location": 453,
            "return": [
                "Generator[(Tuple[(str, str, HTMLBlock)], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "suite": [
                    "str",
                    "Tuple[Tuple[int, ...]]"
                ]
            }
        },
        "StatInfo.get_divs": {
            "name": "get_divs",
            "location": 464,
            "return": [
                "Generator[(Tuple[(str, Any, HTMLBlock)], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "suite": [
                    "str",
                    "bool"
                ],
                "job": [
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "Resources.get_divs": {
            "name": "get_divs",
            "location": 554,
            "return": [
                "Generator[(Tuple[(str, Any, HTMLBlock)], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "suite": [
                    "suits.job.JobConfig",
                    "result_classes.SuiteConfig",
                    "Sequence[str]",
                    "int"
                ],
                "job": [
                    "suits.job.JobConfig",
                    "Sequence[str]",
                    "result_classes.SuiteConfig",
                    "str",
                    "int"
                ]
            }
        },
        "BottleNeck.get_divs": {
            "name": "get_divs",
            "location": 723,
            "return": [
                "Generator[(Tuple[(str, Any, HTMLBlock)], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "suite": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ],
                "job": [
                    "int",
                    "bool"
                ]
            }
        },
        "CPULoadPlot.get_divs": {
            "name": "get_divs",
            "location": 745,
            "return": [
                "Generator[(Tuple[(str, Any, HTMLBlock)], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "suite": [
                    "str",
                    "result_classes.SuiteConfig",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "int"
                ],
                "job": [
                    "str",
                    "int",
                    "Iterable"
                ]
            }
        },
        "QDIOTimeHeatmap.get_divs": {
            "name": "get_divs",
            "location": 795,
            "return": [
                "Generator[(Tuple[(str, Any, HTMLBlock)], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "suite": [
                    "result_classes.SuiteConfig",
                    "str"
                ],
                "job": [
                    "str",
                    "Mapping",
                    "bool"
                ]
            }
        },
        "LoadToolResults.get_divs": {
            "name": "get_divs",
            "location": 843,
            "return": [
                "Generator[(Tuple[(str, Any, HTMLBlock)], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "suite": [
                    "int",
                    "raiden.utils.Address",
                    "Dict[str, Any]",
                    "bytes",
                    "raiden.utils.TokenNetworkAddress",
                    "dict"
                ],
                "job": [
                    "bool",
                    "suits.job.JobConfig",
                    "str"
                ]
            }
        },
        "ClusterLoad.get_divs": {
            "name": "get_divs",
            "location": 899,
            "return": [
                "Generator[(Tuple[(str, Any, HTMLBlock)], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "suite": [
                    "int",
                    "str"
                ],
                "job": [
                    "suits.job.JobConfig",
                    "str",
                    "bool"
                ]
            }
        },
        "HtmlReportStage.run": {
            "name": "run",
            "location": 978,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "bool",
                    "test_run_class.TestRun"
                ]
            }
        }
    },
    "disk_perf_test_tool-master/wally/report_profiles.py": {},
    "disk_perf_test_tool-master/wally/resources.py": {
        "avg_dev_div": {
            "name": "avg_dev_div",
            "location": 69,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "vec": [
                    "str",
                    "int",
                    "numpy.ndarray",
                    "bool"
                ],
                "denom": [
                    "int",
                    "float",
                    "str",
                    "numpy.ndarray"
                ],
                "avg_ranges": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "make_iosum": {
            "name": "make_iosum",
            "location": 87,
            "return": [
                "IOSummary"
            ],
            "arguments": {
                "rstorage": [
                    "int",
                    "Dict[str,Any]",
                    "result_classes.IWallyStorage"
                ],
                "suite": [
                    "Dict[str,AsyncGenerator]",
                    "Dict[str,collections.abc.AsyncGenerator]"
                ],
                "job": [
                    "Dict[str,AsyncGenerator]",
                    "Dict[str,collections.abc.AsyncGenerator]"
                ],
                "hist_boxes": [
                    "int",
                    "List[str]",
                    "str",
                    "List[float]",
                    "List[int]",
                    "List[List[T]]",
                    "List[list[T]]"
                ],
                "nc": [
                    "bool",
                    "int",
                    "numpy.ndarray",
                    "Union[int,float]"
                ]
            }
        },
        "get_cluster_cpu_load": {
            "name": "get_cluster_cpu_load",
            "location": 112,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "rstorage": [
                    "bool",
                    "dict",
                    "numpy.ndarray",
                    "int"
                ],
                "roles": [
                    "Dict",
                    "numpy.ndarray",
                    "int",
                    "bool",
                    "mode.utils.types.graphs._T"
                ],
                "time_range": [
                    "None",
                    "Dict[str,object]",
                    "Optional[numpy.ndarray]",
                    "int",
                    "numpy.ndarray",
                    "Iterable[Any]"
                ],
                "nc": [
                    "bool",
                    "int",
                    "Set",
                    "float"
                ]
            }
        },
        "get_resources_usage": {
            "name": "get_resources_usage",
            "location": 146,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "suite": [
                    "bool",
                    "float",
                    "result_classes.SuiteConfig",
                    "str",
                    "result_classes.IWallyStorage",
                    "None",
                    "suits.job.JobConfig",
                    "int",
                    "Optional[str]"
                ],
                "job": [
                    "Callable",
                    "suits.job.JobConfig",
                    "List[str]",
                    "str"
                ],
                "rstorage": [
                    "result_classes.SuiteConfig",
                    "result_classes.IWallyStorage",
                    "bool",
                    "suits.job.JobConfig",
                    "int",
                    "float",
                    "Optional[str]"
                ],
                "large_block": [
                    "int",
                    "float"
                ],
                "hist_boxes": [
                    "int",
                    "str",
                    "Tuple",
                    "Tuple[float,float,float,float]"
                ],
                "nc": [
                    "bool",
                    "str",
                    "Tuple[int,int]",
                    "bytes",
                    "Dict",
                    "int"
                ]
            }
        },
        "IOSummary.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qd": [
                    "int",
                    "str",
                    "bool"
                ],
                "block_size": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ],
                "nodes_count": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "bw": [
                    "int",
                    "str",
                    "bool"
                ],
                "lat": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "disk_perf_test_tool-master/wally/result_classes.py": {
        "SuiteConfig.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_type": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "params": [
                    "str",
                    "List[str]",
                    "Dict[str,object]",
                    "Optional[List[str]]",
                    "bool"
                ],
                "run_uuid": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "nodes": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "bytes",
                    "Optional[Any]",
                    "Optional[bytes]",
                    "Optional[T]"
                ],
                "remote_dir": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ],
                "idx": [
                    "str",
                    "int"
                ],
                "keep_raw_files": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Callable[[Any],str]",
                    "Callable[Any,str]"
                ]
            }
        },
        "SuiteConfig.__eq__": {
            "name": "__eq__",
            "location": 46,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "int",
                    "Dict",
                    "str"
                ]
            }
        },
        "IWallyStorage.flush": {
            "name": "flush",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IWallyStorage.put_or_check_suite": {
            "name": "put_or_check_suite",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "suite": [
                    "str"
                ]
            }
        },
        "IWallyStorage.put_job": {
            "name": "put_job",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "suite": [
                    "str"
                ],
                "job": [
                    "str"
                ]
            }
        },
        "IWallyStorage.put_extra": {
            "name": "put_extra",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "List",
                    "str",
                    "List[T]",
                    "Callable",
                    "List[str]"
                ],
                "source": [
                    "List",
                    "str",
                    "List[T]",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "IWallyStorage.put_stat": {
            "name": "put_stat",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bool",
                    "Iterable[str]",
                    "Sequence[str]",
                    "str",
                    "List[str]"
                ],
                "source": [
                    "bool",
                    "Iterable[str]",
                    "Sequence[str]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "IWallyStorage.get_stat": {
            "name": "get_stat",
            "location": 85,
            "return": [
                "cephlib.statistic.StatProps",
                "None"
            ],
            "arguments": {
                "self": [],
                "stat_cls": [
                    "str",
                    "List[str]",
                    "List[Tuple[str,str]]",
                    "List[tuple[Union[str,str]]]",
                    "Optional[str]",
                    "None"
                ],
                "source": [
                    "str",
                    "List[str]",
                    "List[Tuple[str,str]]",
                    "List[tuple[Union[str,str]]]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "IWallyStorage.iter_suite": {
            "name": "iter_suite",
            "location": 89,
            "return": [
                "Iterator[SuiteConfig]",
                "None"
            ],
            "arguments": {
                "self": [],
                "suite_type": [
                    "str",
                    "None",
                    "int",
                    "bool"
                ]
            }
        },
        "IWallyStorage.iter_job": {
            "name": "iter_job",
            "location": 93,
            "return": [
                "Iterator[suits.job.JobConfig]",
                "None"
            ],
            "arguments": {
                "self": [],
                "suite": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "IWallyStorage.put_plot_file": {
            "name": "put_plot_file",
            "location": 98,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "List[str]",
                    "bool",
                    "Iterable[str]",
                    "[str]"
                ],
                "source": [
                    "str",
                    "List[str]",
                    "bool",
                    "Iterable[str]",
                    "[str]"
                ]
            }
        },
        "IWallyStorage.get_job_info": {
            "name": "get_job_info",
            "location": 102,
            "return": [
                "Any",
                "None"
            ],
            "arguments": {
                "self": [],
                "suite": [
                    "float",
                    "Iterable[str]",
                    "str",
                    "bool",
                    "List[str]",
                    "int"
                ],
                "job": [
                    "float",
                    "Iterable[str]",
                    "str",
                    "bool",
                    "List[str]",
                    "int"
                ],
                "key": [
                    "float",
                    "Iterable[str]",
                    "str",
                    "bool",
                    "List[str]",
                    "int"
                ]
            }
        },
        "IWallyStorage.get_ts": {
            "name": "get_ts",
            "location": 106,
            "return": [
                "cephlib.numeric_types.TimeSeries",
                "None"
            ],
            "arguments": {
                "self": [],
                "ds": [
                    "str",
                    "Iterable[tuple[Union[int,int]]]",
                    "Iterable[Tuple[int,int]]",
                    "Dict[str,Any]"
                ]
            }
        },
        "IWallyStorage.put_ts": {
            "name": "put_ts",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ts": [
                    "str",
                    "int",
                    "Dict"
                ]
            }
        },
        "IWallyStorage.iter_ts": {
            "name": "iter_ts",
            "location": 114,
            "return": [
                "Iterator[cephlib.numeric_types.DataSource]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IWallyStorage.put_job_info": {
            "name": "put_job_info",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "suite": [
                    "str"
                ],
                "job": [
                    "str"
                ],
                "key": [
                    "str"
                ],
                "data": [
                    "str"
                ]
            }
        },
        "IWallyStorage.load_nodes": {
            "name": "load_nodes",
            "location": 122,
            "return": [
                "List[cephlib.node.NodeInfo]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "disk_perf_test_tool-master/wally/result_storage.py": {
        "fill_path": {
            "name": "fill_path",
            "location": 25,
            "return": [
                "str",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "os.PathLike"
                ]
            }
        },
        "WallyStorage.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "storage": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "WallyStorage.flush": {
            "name": "flush",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WallyStorage.check_plot_file": {
            "name": "check_plot_file",
            "location": 40,
            "return": [
                "str",
                "List",
                "None",
                "Pattern"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ]
            }
        },
        "WallyStorage.put_or_check_suite": {
            "name": "put_or_check_suite",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "suite": [
                    "bool",
                    "bytes",
                    "List[str]",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "WallyStorage.put_job": {
            "name": "put_job",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "suite": [
                    "bool",
                    "None",
                    "int",
                    "Callable",
                    "Optional[int]",
                    "Optional[Callable]"
                ],
                "job": [
                    "bool",
                    "Optional[Callable]",
                    "Callable",
                    "int",
                    "None"
                ]
            }
        },
        "WallyStorage.put_extra": {
            "name": "put_extra",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str"
                ],
                "source": [
                    "str"
                ]
            }
        },
        "WallyStorage.put_stat": {
            "name": "put_stat",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bool",
                    "int"
                ],
                "source": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "WallyStorage.put_plot_file": {
            "name": "put_plot_file",
            "location": 68,
            "return": [
                "str",
                "Deque"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str"
                ],
                "source": [
                    "str"
                ]
            }
        },
        "WallyStorage.put_report": {
            "name": "put_report",
            "location": 73,
            "return": [
                "bytes",
                "dict",
                "qutebrowser.utils.usertypes.Backend",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "report": [
                    "str",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "Optional[str]",
                    "None"
                ],
                "name": [
                    "str",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "WallyStorage.put_txt_report": {
            "name": "put_txt_report",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "suite": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ],
                "report": [
                    "str",
                    "bool",
                    "Dict"
                ]
            }
        },
        "WallyStorage.put_job_info": {
            "name": "put_job_info",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "suite": [
                    "int",
                    "str"
                ],
                "job": [
                    "int",
                    "str"
                ],
                "key": [
                    "int",
                    "str"
                ],
                "data": [
                    "bytes"
                ]
            }
        },
        "WallyStorage.get_stat": {
            "name": "get_stat",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "stat_cls": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "List[str]",
                    "None",
                    "Literal"
                ],
                "source": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "List[str]",
                    "None",
                    "Literal"
                ]
            }
        },
        "WallyStorage.get_txt_report": {
            "name": "get_txt_report",
            "location": 92,
            "return": [
                "None",
                "str",
                "cmk.utils.type_defs.HostName",
                "int"
            ],
            "arguments": {
                "self": [],
                "suite": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "WallyStorage.get_job_info": {
            "name": "get_job_info",
            "location": 98,
            "return": [
                "str",
                "Optional[dict]",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "suite": [
                    "int",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ],
                "job": [
                    "int",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ],
                "key": [
                    "int",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ]
            }
        },
        "WallyStorage.iter_suite": {
            "name": "iter_suite",
            "location": 103,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "suite_type": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "WallyStorage.iter_job": {
            "name": "iter_job",
            "location": 111,
            "return": [
                "Generator[(wally.suits.job.JobConfig, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "suite": [
                    "int",
                    "slice",
                    "bool"
                ]
            }
        },
        "WallyStorage.load_nodes": {
            "name": "load_nodes",
            "location": 120,
            "return": [
                "Dict",
                "bool",
                "Dict[str,list[str]]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WallyStorage.get_ts": {
            "name": "get_ts",
            "location": 133,
            "return": [
                "TimeSeries",
                "int",
                "bool",
                "numpy.ndarray",
                "raiden.utils.List[raiden.utils.Tuple[str,raiden.utils.Any]]"
            ],
            "arguments": {
                "self": [],
                "ds": [
                    "str",
                    "Callable",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "WallyStorage.put_ts": {
            "name": "put_ts",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ts": [
                    "int",
                    "str"
                ]
            }
        },
        "WallyStorage.iter_ts": {
            "name": "iter_ts",
            "location": 167,
            "return": [
                "Optional[bool]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "disk_perf_test_tool-master/wally/run_test.py": {
        "ConnectStage.run": {
            "name": "run",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "test_run_class.TestRun"
                ]
            }
        },
        "ConnectStage.cleanup": {
            "name": "cleanup",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "test_run_class.TestRun",
                    "str"
                ]
            }
        },
        "CollectInfoStage.run": {
            "name": "run",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "test_run_class.TestRun"
                ]
            }
        },
        "ExplicitNodesStage.run": {
            "name": "run",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "test_run_class.TestRun"
                ]
            }
        },
        "SleepStage.run": {
            "name": "run",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "test_run_class.TestRun",
                    "homeassistant_cli.config.Configuration"
                ]
            }
        },
        "PrepareNodes.__init__": {
            "name": "__init__",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrepareNodes.run": {
            "name": "run",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "Exception",
                    "test_run_class.TestRun"
                ]
            }
        },
        "PrepareNodes.cleanup": {
            "name": "cleanup",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "homeassistant_cli.config.Configuration"
                ]
            }
        },
        "RunTestsStage.run": {
            "name": "run",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "test_run_class.TestRun",
                    "homeassistant_cli.config.Configuration"
                ]
            }
        },
        "RunTestsStage.validate_config": {
            "name": "validate_config",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable",
                    "Optional[bool]",
                    "bool",
                    "List[Dict]",
                    "None",
                    "T",
                    "List[dict]"
                ],
                "cfg": [
                    "str",
                    "Callable",
                    "Optional[bool]",
                    "bool",
                    "List[Dict]",
                    "None",
                    "T",
                    "List[dict]"
                ]
            }
        },
        "SaveNodesStage.run": {
            "name": "run",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "str",
                    "test_run_class.TestRun"
                ]
            }
        },
        "LoadStoredNodesStage.run": {
            "name": "run",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "test_run_class.TestRun"
                ]
            }
        },
        "ConnectStage.run.connect_ext": {
            "name": "connect_ext",
            "location": 34,
            "return": [
                "bool",
                "Tuple[bool]"
            ],
            "arguments": {
                "node_info": [
                    "int",
                    "bool",
                    "nucypher.config.characters.BobConfiguration"
                ]
            }
        },
        "ConnectStage.run.get_time": {
            "name": "get_time",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "node": []
            }
        }
    },
    "disk_perf_test_tool-master/wally/sensors.py": {
        "stop_sensors": {
            "name": "stop_sensors",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "test_run_class.TestRun",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "collect_sensors_data": {
            "name": "collect_sensors_data",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "test_run_class.TestRun",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "before_test": [
                    "bool",
                    "List[Tuple[str,str]]"
                ]
            }
        },
        "StartSensorsStage.run": {
            "name": "run",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "test_run_class.TestRun"
                ]
            }
        },
        "CollectSensorsStage.run": {
            "name": "run",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "str",
                    "test_run_class.TestRun"
                ]
            }
        },
        "StopSensorsStage.run": {
            "name": "run",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "test_run_class.TestRun"
                ]
            }
        },
        "collect_sensors_data.collect": {
            "name": "collect",
            "location": 110,
            "return": [
                "Tuple[None]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "disk_perf_test_tool-master/wally/stage.py": {
        "Stage.name": {
            "name": "name",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Exception",
                    "Type"
                ]
            }
        },
        "Stage.validate_config": {
            "name": "validate_config",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable",
                    "Optional[bool]",
                    "bool",
                    "List[Dict]",
                    "None",
                    "T",
                    "List[dict]"
                ],
                "cfg": [
                    "str",
                    "Callable",
                    "Optional[bool]",
                    "bool",
                    "List[Dict]",
                    "None",
                    "T",
                    "List[dict]"
                ]
            }
        },
        "Stage.run": {
            "name": "run",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "test_run_class.TestRun"
                ]
            }
        },
        "Stage.cleanup": {
            "name": "cleanup",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        }
    },
    "disk_perf_test_tool-master/wally/test_run_class.py": {
        "TestRun.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "sphinx.config.Config",
                    "model.Config",
                    "virgene.config.Config",
                    "config.Config"
                ],
                "storage": [
                    "Dict[str,Any]",
                    "Mapping",
                    "config.Config",
                    "Mapping[str,Any]"
                ],
                "rstorage": [
                    "Dict[str,Any]",
                    "Mapping",
                    "config.Config",
                    "Mapping[str,Any]"
                ]
            }
        },
        "TestRun.get_pool": {
            "name": "get_pool",
            "location": 42,
            "return": [
                "concurrent.futures.thread.ThreadPoolExecutor"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRun.merge_node": {
            "name": "merge_node",
            "location": 45,
            "return": [
                "NodeInfo",
                "str",
                "Type",
                "Dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "creds": [
                    "str",
                    "Callable",
                    "Callable[[str],T]"
                ],
                "roles": [
                    "str",
                    "bool",
                    "List[str]",
                    "None",
                    "Optional[str]",
                    "int"
                ]
            }
        }
    },
    "disk_perf_test_tool-master/wally/utils.py": {
        "log_block": {
            "name": "log_block",
            "location": 54,
            "return": [
                "LogError"
            ],
            "arguments": {
                "message": [
                    "str",
                    "logging.Logger"
                ],
                "exc_logger": [
                    "logging.Logger",
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "check_input_param": {
            "name": "check_input_param",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "is_ok": [
                    "bool",
                    "str"
                ],
                "message": [
                    "str",
                    "int"
                ]
            }
        },
        "yamable": {
            "name": "yamable",
            "location": 65,
            "return": [
                "Union[(dict, Iterator, _T0)]"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "str",
                    "tuple"
                ]
            }
        },
        "get_creds_openrc": {
            "name": "get_creds_openrc",
            "location": 78,
            "return": [
                "Tuple[(Any, Any, Any, Any, bool)]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "os.PathLike"
                ]
            }
        },
        "empty_ctx": {
            "name": "empty_ctx",
            "location": 100,
            "return": [
                "typing.Iterator[typing.Any]"
            ],
            "arguments": {
                "val": []
            }
        },
        "get_uniq_path_uuid": {
            "name": "get_uniq_path_uuid",
            "location": 104,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "max_iter": [
                    "int"
                ]
            }
        },
        "get_time_interval_printable_info": {
            "name": "get_time_interval_printable_info",
            "location": 117,
            "return": [
                "Tuple[(Any, str)]"
            ],
            "arguments": {
                "seconds": [
                    "datetime.timedelta",
                    "str",
                    "datetime.datetime",
                    "float",
                    "Dict[str, str]"
                ]
            }
        },
        "LogError.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "bool"
                ],
                "exc_logger": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "LogError.__enter__": {
            "name": "__enter__",
            "location": 34,
            "return": [
                "LogError"
            ],
            "arguments": {
                "self": [
                    "_TLogError@@LogError@@"
                ]
            }
        },
        "LogError.__exit__": {
            "name": "__exit__",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "Optional[Type[BaseException]]"
                ],
                "value": [
                    "Optional[BaseException]"
                ],
                "traceback": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "pet_generate": {
            "name": "pet_generate",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "_1": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "_2": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "disk_perf_test_tool-master/wally/__init__.py": {},
    "disk_perf_test_tool-master/wally/__main__.py": {},
    "disk_perf_test_tool-master/wally/suits/all_suits.py": {},
    "disk_perf_test_tool-master/wally/suits/itest.py": {
        "PerfTest.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "storage": [
                    "float",
                    "Callable",
                    "Tuple[float,float,float,float]",
                    "Tuple[Union[float,float,float,float]]",
                    "int",
                    "Optional[List[Any]]",
                    "List[Any]",
                    "None"
                ],
                "suite": [
                    "int",
                    "bool"
                ],
                "on_tests_boundry": [
                    "Tuple[int]",
                    "None",
                    "bool",
                    "int",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        },
        "PerfTest.request_stop": {
            "name": "request_stop",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PerfTest.join_remote": {
            "name": "join_remote",
            "location": 40,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "Dict",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "PerfTest.run": {
            "name": "run",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PerfTest.format_for_console": {
            "name": "format_for_console",
            "location": 48,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str,Any]",
                    "str",
                    "Mapping[str,Any]",
                    "List[str]",
                    "Mapping",
                    "bytes",
                    "bool",
                    "List"
                ]
            }
        },
        "ThreadedTest.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadedTest.get_expected_runtime": {
            "name": "get_expected_runtime",
            "location": 66,
            "return": [
                "Optional[int]",
                "None"
            ],
            "arguments": {
                "self": [],
                "iter_cfg": [
                    "int",
                    "str",
                    "bytes",
                    "List[str]",
                    "Dict",
                    "Callable"
                ]
            }
        },
        "ThreadedTest.get_not_done_jobs": {
            "name": "get_not_done_jobs",
            "location": 69,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadedTest.run": {
            "name": "run",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadedTest.config_node": {
            "name": "config_node",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool",
                    "List",
                    "Optional[int]",
                    "None",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "ThreadedTest.prepare_iteration": {
            "name": "prepare_iteration",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[int]"
                ],
                "job": [
                    "List[int]"
                ]
            }
        },
        "ThreadedTest.run_iteration": {
            "name": "run_iteration",
            "location": 202,
            "return": [
                "List[result_classes.TimeSeries]",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ],
                "job": [
                    "int",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "TwoScriptTest.__init__": {
            "name": "__init__",
            "location": 207,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwoScriptTest.get_expected_runtime": {
            "name": "get_expected_runtime",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "str",
                    "bool",
                    "Sequence[int]",
                    "Optional",
                    "Callable"
                ]
            }
        },
        "TwoScriptTest.config_node": {
            "name": "config_node",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Tuple[bytes]"
                ]
            }
        },
        "TwoScriptTest.prepare_iteration": {
            "name": "prepare_iteration",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[int]"
                ],
                "job": [
                    "List[int]"
                ]
            }
        },
        "TwoScriptTest.run_iteration": {
            "name": "run_iteration",
            "location": 230,
            "return": [
                "Awaitable",
                "Iterable[str]",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Dict",
                    "str",
                    "bool",
                    "node.Node"
                ],
                "job": [
                    "int",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "TwoScriptTest.parse_results": {
            "name": "parse_results",
            "location": 237,
            "return": [
                "List[result_classes.TimeSeries]",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Optional[dict]",
                    "Dict",
                    "bytes",
                    "bool",
                    "Set[str]",
                    "None"
                ]
            }
        }
    },
    "disk_perf_test_tool-master/wally/suits/job.py": {
        "JobParams.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobParams.summary": {
            "name": "summary",
            "location": 22,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobParams.long_summary": {
            "name": "long_summary",
            "location": 28,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobParams.copy": {
            "name": "copy",
            "location": 33,
            "return": [
                "JobParams",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobParams.__getitem__": {
            "name": "__getitem__",
            "location": 36,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "JobParams.__setitem__": {
            "name": "__setitem__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "val": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        },
        "JobParams.__hash__": {
            "name": "__hash__",
            "location": 42,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobParams.__eq__": {
            "name": "__eq__",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "JobParams.__lt__": {
            "name": "__lt__",
            "location": 50,
            "return": [
                "bool",
                "Dict",
                "int",
                "FrozenSet[int]"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "str",
                    "List"
                ]
            }
        },
        "JobParams.char_tpl": {
            "name": "char_tpl",
            "location": 57,
            "return": [
                "Tuple[Union[str,int,float,bool],...]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobConfig.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "Tuple[int]",
                    "int",
                    "Tuple"
                ]
            }
        },
        "JobConfig.reliable_info_range_s": {
            "name": "reliable_info_range_s",
            "location": 75,
            "return": [
                "Tuple[int]",
                "Dict",
                "Dict[str,Tuple[Any,Any]]",
                "Dict[str,Any]",
                "Optional[Dict[str,Any]]",
                "Dict[str,Type[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobConfig.storage_id": {
            "name": "storage_id",
            "location": 79,
            "return": [
                "Text",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobConfig.params": {
            "name": "params",
            "location": 85,
            "return": [
                "JobParams",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobConfig.summary": {
            "name": "summary",
            "location": 90,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "disk_perf_test_tool-master/wally/suits/__init__.py": {},
    "disk_perf_test_tool-master/wally/suits/io/fio.py": {
        "FioTest.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FioTest.config_node": {
            "name": "config_node",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "raiden.tests.fuzz.utils.SendUnlockInNode"
                ]
            }
        },
        "FioTest.install_utils": {
            "name": "install_utils",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict"
                ]
            }
        },
        "FioTest.get_expected_runtime": {
            "name": "get_expected_runtime",
            "location": 152,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "job_config": [
                    "int"
                ]
            }
        },
        "FioTest.prepare_iteration": {
            "name": "prepare_iteration",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ],
                "job": [
                    "str"
                ]
            }
        },
        "FioTest.run_iteration": {
            "name": "run_iteration",
            "location": 159,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "job.AbsWorkflow"
                ],
                "job": [
                    "int",
                    "mode.utils.types.graphs._T"
                ]
            }
        },
        "FioTest.format_for_console": {
            "name": "format_for_console",
            "location": 251,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str,Any]",
                    "str",
                    "Mapping",
                    "numpy.ndarray",
                    "List[str]",
                    "bytes",
                    "Mapping[str,Any]",
                    "bool",
                    "List"
                ]
            }
        }
    },
    "disk_perf_test_tool-master/wally/suits/io/fio_hist.py": {
        "_plat_idx_to_val": {
            "name": "_plat_idx_to_val",
            "location": 10,
            "return": [
                "int",
                "str",
                "float",
                "bool",
                "Mapping",
                "Optional[str]"
            ],
            "arguments": {
                "idx": [
                    "List[str]",
                    "int",
                    "bool",
                    "bytes",
                    "str"
                ],
                "edge": [
                    "float",
                    "List"
                ],
                "FIO_IO_U_PLAT_BITS": [
                    "int",
                    "bool",
                    "str",
                    "float"
                ],
                "FIO_IO_U_PLAT_VAL": [
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        },
        "plat_idx_to_val_coarse": {
            "name": "plat_idx_to_val_coarse",
            "location": 37,
            "return": [
                "str",
                "bool",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "idx": [
                    "bool",
                    "str",
                    "Dict",
                    "bytes"
                ],
                "coarseness": [
                    "bool",
                    "Dict[str,str]",
                    "float",
                    "Dict[str,Any]",
                    "List[Exception]"
                ],
                "edge": [
                    "str",
                    "float"
                ]
            }
        },
        "get_lat_vals": {
            "name": "get_lat_vals",
            "location": 52,
            "return": [
                "list"
            ],
            "arguments": {
                "columns": [
                    "int"
                ],
                "coarseness": [
                    "int"
                ]
            }
        }
    },
    "disk_perf_test_tool-master/wally/suits/io/fio_job.py": {
        "is_fio_opt_true": {
            "name": "is_fio_opt_true",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {
                "vl": [
                    "str",
                    "Union[str,int]",
                    "int",
                    "IO[str]",
                    "IO"
                ]
            }
        },
        "FioJobParams.sync_mode_long": {
            "name": "sync_mode_long",
            "location": 34,
            "return": [
                "str",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FioJobParams.summary": {
            "name": "summary",
            "location": 38,
            "return": [
                "Text",
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FioJobParams.long_summary": {
            "name": "long_summary",
            "location": 50,
            "return": [
                "Text",
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FioJobParams.copy": {
            "name": "copy",
            "location": 61,
            "return": [
                "FioJobParams"
            ],
            "arguments": {
                "self": [
                    "_TFioJobParams@@FioJobParams@@"
                ]
            }
        },
        "FioJobParams.char_tpl": {
            "name": "char_tpl",
            "location": 67,
            "return": [
                "Tuple",
                "bool",
                "str",
                "Callable",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FioJobConfig.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "Dict"
                ],
                "idx": [
                    "str",
                    "Tuple[type]",
                    "Tuple[Type]"
                ]
            }
        },
        "FioJobConfig.write_perc": {
            "name": "write_perc",
            "location": 95,
            "return": [
                "int",
                "Optional[int]",
                "None",
                "Optional[str]",
                "List[str]",
                "Optional[List[Callable]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FioJobConfig.qd": {
            "name": "qd",
            "location": 105,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FioJobConfig.bsize": {
            "name": "bsize",
            "location": 109,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FioJobConfig.oper": {
            "name": "oper",
            "location": 115,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FioJobConfig.op_type_short": {
            "name": "op_type_short",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FioJobConfig.thcount": {
            "name": "thcount",
            "location": 124,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FioJobConfig.sync_mode": {
            "name": "sync_mode",
            "location": 128,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FioJobConfig.params": {
            "name": "params",
            "location": 139,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FioJobConfig.__eq__": {
            "name": "__eq__",
            "location": 152,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "str",
                    "Dict[str,str]",
                    "Dict"
                ]
            }
        },
        "FioJobConfig.copy": {
            "name": "copy",
            "location": 157,
            "return": [
                "FioJobConfig"
            ],
            "arguments": {
                "self": [
                    "_TFioJobConfig@@FioJobConfig@@"
                ]
            }
        },
        "FioJobConfig.required_vars": {
            "name": "required_vars",
            "location": 160,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FioJobConfig.is_free": {
            "name": "is_free",
            "location": 165,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FioJobConfig.__str__": {
            "name": "__str__",
            "location": 168,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FioJobConfig.__repr__": {
            "name": "__repr__",
            "location": 181,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FioJobConfig.raw": {
            "name": "raw",
            "location": 184,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FioJobConfig.fromraw": {
            "name": "fromraw",
            "location": 190,
            "return": [
                "FioJobConfig"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFioJobConfig]"
                ],
                "data": [
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        }
    },
    "disk_perf_test_tool-master/wally/suits/io/fio_task_parser.py": {
        "is_name": {
            "name": "is_name",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Pattern"
                ]
            }
        },
        "parse_value": {
            "name": "parse_value",
            "location": 49,
            "return": [
                "Union[(float, int, wally.suits.job.Var, List[nothing], _T0)]"
            ],
            "arguments": {
                "val": [
                    "int",
                    "float"
                ]
            }
        },
        "fio_config_lexer": {
            "name": "fio_config_lexer",
            "location": 74,
            "return": [
                "Generator[(CfgLine, Any, None)]"
            ],
            "arguments": {
                "fio_cfg": [
                    "str"
                ],
                "fname": []
            }
        },
        "fio_config_parse": {
            "name": "fio_config_parse",
            "location": 103,
            "return": [
                "Generator[(wally.suits.io.fio_job.FioJobConfig, Any, None)]"
            ],
            "arguments": {
                "lexer_iter": [
                    "List[list[int]]",
                    "Atom",
                    "List[List[int]]",
                    "int"
                ]
            }
        },
        "process_cycles": {
            "name": "process_cycles",
            "location": 169,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "sec": [
                    "Dict[str,Any]",
                    "Tuple[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "apply_params": {
            "name": "apply_params",
            "location": 205,
            "return": [
                "Dict",
                "int",
                "Dict[str,Any]",
                "Callable",
                "str"
            ],
            "arguments": {
                "sec": [
                    "Dict",
                    "Dict[str,Any]",
                    "Callable[[T],bool]"
                ],
                "params": [
                    "Dict",
                    "Dict[str,bool]",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "abbv_name_to_full": {
            "name": "abbv_name_to_full",
            "location": 225,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "final_process": {
            "name": "final_process",
            "location": 243,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sec": [
                    "bytes",
                    "pathlib.Path"
                ],
                "counter": [
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "execution_time": {
            "name": "execution_time",
            "location": 275,
            "return": [
                "str",
                "bool",
                "int",
                "float"
            ],
            "arguments": {
                "sec": [
                    "Dict[str,Any]",
                    "str",
                    "int",
                    "Dict"
                ]
            }
        },
        "parse_all_in_1": {
            "name": "parse_all_in_1",
            "location": 279,
            "return": [
                "Generator[(wally.suits.io.fio_job.FioJobConfig, Any, None)]"
            ],
            "arguments": {
                "source": [
                    "str",
                    "List[str]",
                    "bool",
                    "IO[str]",
                    "IO"
                ],
                "fname": [
                    "str",
                    "List[str]",
                    "bool",
                    "IO[str]",
                    "IO"
                ]
            }
        },
        "get_log_files": {
            "name": "get_log_files",
            "location": 283,
            "return": [
                "Generator[(Tuple[(str, Any, str)], Any, None)]"
            ],
            "arguments": {
                "sec": [
                    "str",
                    "Dict[str,int]",
                    "Dict[str,Any]"
                ],
                "iops": [
                    "bool",
                    "List[str]",
                    "pathlib.Path",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "fio_cfg_compile": {
            "name": "fio_cfg_compile",
            "location": 295,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "source": [
                    "str",
                    "Union[str,bytes]",
                    "Dict",
                    "bytes",
                    "pathlib.Path"
                ],
                "fname": [
                    "str",
                    "Union[str,bytes]",
                    "Dict",
                    "bytes",
                    "pathlib.Path"
                ],
                "test_params": [
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 309,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {
                "argv": [
                    "List[str]",
                    "Sequence[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 321,
            "return": [
                "int"
            ],
            "arguments": {
                "argv": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "List",
                    "Iterator[Tuple[str,Any,Any]]",
                    "Iterator"
                ]
            }
        },
        "ParseError.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "bool",
                    "str",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "fname": [
                    "str",
                    "List[str]",
                    "int",
                    "pathlib.Path"
                ],
                "lineno": [
                    "int",
                    "List[tuple[Union[pathlib.Path,str]]]",
                    "List[Tuple[pathlib.Path,str]]",
                    "bool"
                ],
                "line_cont": [
                    "Text",
                    "int",
                    "List[Tuple[pathlib.Path,str]]",
                    "bool"
                ]
            }
        },
        "ParseError.__str__": {
            "name": "__str__",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "disk_perf_test_tool-master/wally/suits/io/rpc_plugin.py": {
        "check_file_prefilled": {
            "name": "check_file_prefilled",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[str]",
                    "List[Tuple[int,int]]",
                    "List[Tuple[int,int,int,int]]",
                    "bool"
                ],
                "used_size_mb": [
                    "int",
                    "bytes",
                    "Tuple[bytes,str]",
                    "str",
                    "Optional[Callable]"
                ],
                "blocks_to_check": [
                    "int",
                    "bytes"
                ]
            }
        },
        "rpc_fill_file": {
            "name": "rpc_fill_file",
            "location": 38,
            "return": [
                "Tuple[(bool, Optional[int])]"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "bool"
                ],
                "size": [
                    "str"
                ],
                "force": [
                    "bool",
                    "List",
                    "str"
                ],
                "fio_path": [
                    "Text",
                    "str",
                    "int",
                    "IO",
                    "Iterable[str]"
                ]
            }
        },
        "rpc_install": {
            "name": "rpc_install",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "binary": [
                    "str",
                    "int",
                    "List[ItemShippingTarget]"
                ]
            }
        }
    },
    "disk_perf_test_tool-master/wally/suits/io/__init__.py": {},
    "disk_perf_test_tool-master/wally/suits/mysql/__init__.py": {
        "MysqlTest.format_for_console": {
            "name": "format_for_console",
            "location": 14,
            "return": [
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Dict[str,Any]"
                ],
                "data": [
                    "List[dict]",
                    "List",
                    "List[Dict]",
                    "T",
                    "Dict[str,List[str]]",
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        }
    },
    "disk_perf_test_tool-master/wally/suits/omgbench/__init__.py": {
        "OmgTest.format_for_console": {
            "name": "format_for_console",
            "location": 16,
            "return": [
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Dict[str,Any]"
                ],
                "data": [
                    "str",
                    "bool",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "disk_perf_test_tool-master/wally/suits/postgres/__init__.py": {
        "PgBenchTest.format_for_console": {
            "name": "format_for_console",
            "location": 16,
            "return": [
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Dict[str,Any]"
                ],
                "data": [
                    "List[dict]",
                    "List",
                    "List[Dict]",
                    "T",
                    "Dict[str,List[str]]",
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        }
    },
    "disk_perf_test_tool-master/web_app/app.py": {},
    "disk_perf_test_tool-master/web_app/rest_api.py": {
        "add_test": {
            "name": "add_test",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "test_name": [
                    "str"
                ],
                "test_data": [
                    "Dict[str,str]",
                    "Dict[int,Any]",
                    "str",
                    "bytes",
                    "Dict[str,Union[int,str]]",
                    "Optional[str]",
                    "None"
                ],
                "url": [
                    "str",
                    "Dict[str,List[bytes]]"
                ]
            }
        },
        "get_test": {
            "name": "get_test",
            "location": 11,
            "return": [
                "int",
                "bool",
                "bytes"
            ],
            "arguments": {
                "test_name": [
                    "str"
                ],
                "url": [
                    "str",
                    "Dict[str,List[bytes]]"
                ]
            }
        },
        "get_all_tests": {
            "name": "get_all_tests",
            "location": 20,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        }
    },
    "disk_perf_test_tool-master/web_app/__init__.py": {
        "merge_builds": {
            "name": "merge_builds",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "b1": [
                    "Sequence[str]",
                    "int",
                    "Sequence[Hashable]"
                ],
                "b2": [
                    "Dict",
                    "Dict[str,float]",
                    "Dict[str,str]",
                    "float",
                    "Dict[str,Any]"
                ]
            }
        },
        "index": {
            "name": "index",
            "location": 37,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "get_image": {
            "name": "get_image",
            "location": 47,
            "return": [
                "int",
                "dict",
                "Dict[str, str]",
                "Dict[str, Union[str, int]]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "image_name": [
                    "str",
                    "Sequence[str]",
                    "Iterable[str]"
                ]
            }
        },
        "render_test": {
            "name": "render_test",
            "location": 59,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "test_name": [
                    "str"
                ]
            }
        },
        "render_table": {
            "name": "render_table",
            "location": 77,
            "return": [
                "int",
                "dict",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "test_name": [
                    "str"
                ]
            }
        },
        "add_test": {
            "name": "add_test",
            "location": 108,
            "return": [
                "Tuple[Union[Text,int]]",
                "str",
                "Sequence[str]",
                "Sequence[T]"
            ],
            "arguments": {
                "test_name": [
                    "str",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "get_all_tests": {
            "name": "get_all_tests",
            "location": 114,
            "return": [
                "bytes",
                "Union[str, IO]",
                "dict"
            ],
            "arguments": {}
        },
        "get_test": {
            "name": "get_test",
            "location": 119,
            "return": [
                "bool",
                "str",
                "Callable"
            ],
            "arguments": {
                "test_name": [
                    "str"
                ]
            }
        }
    }
}
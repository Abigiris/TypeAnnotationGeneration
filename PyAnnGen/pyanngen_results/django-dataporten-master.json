{
    "django-dataporten-master/manage.py": {},
    "django-dataporten-master/setup.py": {},
    "django-dataporten-master/dataporten/admin.py": {},
    "django-dataporten-master/dataporten/api.py": {
        "userinfo": {
            "name": "userinfo",
            "location": 40,
            "return": [
                "List[str]",
                "Optional[str]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "token": [
                    "str",
                    "List[str]",
                    "Tuple[int,str]"
                ]
            }
        },
        "usergroups": {
            "name": "usergroups",
            "location": 59,
            "return": [
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "token": [
                    "str",
                    "List[str]",
                    "Tuple[int,str]"
                ]
            }
        }
    },
    "django-dataporten-master/dataporten/apps.py": {},
    "django-dataporten-master/dataporten/middleware.py": {
        "DataportenGroupsMiddleware.process_request": {
            "name": "process_request",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Union[dict,list]",
                    "Dict",
                    "Dict[str,Any]",
                    "django.http.HttpRequest",
                    "List"
                ]
            }
        }
    },
    "django-dataporten-master/dataporten/models.py": {
        "DataportenGroupManager.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "bytes",
                    "Dict[str,Any]"
                ]
            }
        },
        "DataportenGroupManager.is_member_of": {
            "name": "is_member_of",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "Optional[type]",
                    "Type",
                    "str",
                    "None",
                    "Type[T]",
                    "List[zerver.models.Stream]",
                    "List[S]"
                ],
                "active": [
                    "bool"
                ]
            }
        },
        "CourseManager.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "courses": [
                    "Dict",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "CourseManager.active": {
            "name": "active",
            "location": 86,
            "return": [
                "List",
                "bool",
                "int",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CourseManager.finished": {
            "name": "finished",
            "location": 90,
            "return": [
                "List",
                "bool",
                "int",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CourseManager.less_semesters_ago": {
            "name": "less_semesters_ago",
            "location": 93,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "than": [
                    "Iterable[List[T]]",
                    "bool",
                    "Iterable[list[T]]"
                ]
            }
        },
        "DataportenUser.token": {
            "name": "token",
            "location": 109,
            "return": [
                "str",
                "zerver.models.Recipient",
                "Callable",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataportenUser.dataporten": {
            "name": "dataporten",
            "location": 127,
            "return": [
                "DataportenGroupManager",
                "Dict",
                "ajapaik.ajapaik.models.Album"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataportenUser.valid_request": {
            "name": "valid_request",
            "location": 131,
            "return": [
                "bool",
                "Dict",
                "List[str]",
                "int",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "request": [
                    "Dict",
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "django-dataporten-master/dataporten/parsers.py": {
        "datetime_from": {
            "name": "datetime_from",
            "location": 7,
            "return": [
                "datetime.datetime"
            ],
            "arguments": {
                "json_string": [
                    "str",
                    "datetime.datetime"
                ]
            }
        },
        "group_type": {
            "name": "group_type",
            "location": 14,
            "return": [
                "Any"
            ],
            "arguments": {
                "group": [
                    "api.GroupJSON",
                    "str",
                    "Exception"
                ]
            }
        },
        "group_factory": {
            "name": "group_factory",
            "location": 18,
            "return": [
                "Generator[(Union[(Course, Group, MainProfile, OrganisationUnit, StudyProgram)], Any, None)]"
            ],
            "arguments": {}
        },
        "next_holiday": {
            "name": "next_holiday",
            "location": 123,
            "return": [
                "datetime.datetime"
            ],
            "arguments": {}
        },
        "BaseGroup.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "dict",
                    "int",
                    "str",
                    "Mapping[str, Any]",
                    "Union[Dict, str]"
                ]
            }
        },
        "BaseGroup.valid": {
            "name": "valid",
            "location": 61,
            "return": [
                "int",
                "Tuple[str, str]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "api.GroupJSON",
                    "bool",
                    "str",
                    "\"Project\"",
                    "Callable"
                ],
                "group": [
                    "api.GroupJSON",
                    "bool",
                    "str",
                    "\"Project\"",
                    "Callable"
                ]
            }
        },
        "Group.valid": {
            "name": "valid",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "api.GroupJSON",
                    "int",
                    "bool",
                    "Type[T]",
                    "str",
                    "Callable[[None], None]"
                ],
                "group": [
                    "api.GroupJSON",
                    "int",
                    "bool",
                    "Type[T]",
                    "str",
                    "Callable[[None], None]"
                ]
            }
        },
        "Membership.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "membership": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "Membership.__bool__": {
            "name": "__bool__",
            "location": 98,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Membership.__str__": {
            "name": "__str__",
            "location": 113,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Course.__init__": {
            "name": "__init__",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Course.split_on_membership": {
            "name": "split_on_membership",
            "location": 147,
            "return": [
                "Tuple[(dict, dict)]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool"
                ],
                "courses": [
                    "str",
                    "bool"
                ]
            }
        },
        "StudyProgram.__init__": {
            "name": "__init__",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "MainProfile.__init__": {
            "name": "__init__",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Semester.__init__": {
            "name": "__init__",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dt": [
                    "datetime.datetime",
                    "int",
                    "Optional[datetime.datetime]"
                ]
            }
        },
        "Semester.determine_season": {
            "name": "determine_season",
            "location": 198,
            "return": [
                "int"
            ],
            "arguments": {
                "cls": [
                    "type",
                    "int",
                    "bool",
                    "complex",
                    "bytes",
                    "Type"
                ],
                "month": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "Semester.now": {
            "name": "now",
            "location": 205,
            "return": [
                "Semester"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSemester]"
                ]
            }
        },
        "Semester.__sub__": {
            "name": "__sub__",
            "location": 208,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "bool",
                    "float",
                    "str",
                    "Optional[T]"
                ]
            }
        }
    },
    "django-dataporten-master/dataporten/settings.py": {},
    "django-dataporten-master/dataporten/views.py": {},
    "django-dataporten-master/dataporten/__init__.py": {},
    "django-dataporten-master/dataporten/migrations/0001_initial.py": {},
    "django-dataporten-master/dataporten/migrations/__init__.py": {},
    "django-dataporten-master/dataporten/tests/conftest.py": {
        "dataporten": {
            "name": "dataporten",
            "location": 16,
            "return": [
                "DataportenGroupManager"
            ],
            "arguments": {}
        },
        "dataporten_user": {
            "name": "dataporten_user",
            "location": 23,
            "return": [
                "DataportenUserFactory"
            ],
            "arguments": {}
        },
        "user_with_dataporten_token": {
            "name": "user_with_dataporten_token",
            "location": 29,
            "return": [
                "DataportenUserFactory"
            ],
            "arguments": {}
        },
        "study_program_json": {
            "name": "study_program_json",
            "location": 38,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Union[typing.Text,bool,list[typing.Text]]]]]"
            ],
            "arguments": {}
        },
        "course_json": {
            "name": "course_json",
            "location": 57,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Union[typing.Text,bool,list[typing.Text]]]]]"
            ],
            "arguments": {}
        },
        "main_profile_json": {
            "name": "main_profile_json",
            "location": 78,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Union[typing.Text,list[typing.Text],bool]]]]"
            ],
            "arguments": {}
        },
        "organisation_unit_json": {
            "name": "organisation_unit_json",
            "location": 96,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,bool,dict[typing.Text, typing.Union[bool,typing.Text]]]]"
            ],
            "arguments": {}
        },
        "finished_course": {
            "name": "finished_course",
            "location": 111,
            "return": [
                "Course"
            ],
            "arguments": {}
        },
        "non_finished_course": {
            "name": "non_finished_course",
            "location": 135,
            "return": [
                "Course"
            ],
            "arguments": {}
        },
        "ongoing_course": {
            "name": "ongoing_course",
            "location": 156,
            "return": [
                "Course"
            ],
            "arguments": {}
        },
        "course_last_semester": {
            "name": "course_last_semester",
            "location": 179,
            "return": [
                "Course"
            ],
            "arguments": {}
        },
        "organization_json": {
            "name": "organization_json",
            "location": 202,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,bool,list[typing.Text],dict[typing.Text, typing.Union[list[typing.Text],typing.Text]]]]"
            ],
            "arguments": {}
        },
        "membership_json": {
            "name": "membership_json",
            "location": 233,
            "return": [],
            "arguments": {
                "organization_json": []
            }
        }
    },
    "django-dataporten-master/dataporten/tests/factories.py": {},
    "django-dataporten-master/dataporten/tests/test_api.py": {
        "TestUserInfo.test_valid_case": {
            "name": "test_valid_case",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroups.test_valid_case": {
            "name": "test_valid_case",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-dataporten-master/dataporten/tests/test_middleware.py": {
        "test_dataporten_middleware_with_anonymous_user": {
            "name": "test_dataporten_middleware_with_anonymous_user",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "rf": [],
                "monkeypatch": []
            }
        },
        "test_dataporten_middleware_with_plain_django_user": {
            "name": "test_dataporten_middleware_with_plain_django_user",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "rf": [],
                "django_user_model": [
                    "Iterable[Any]",
                    "Optional[Iterable[Any]]",
                    "None",
                    "str",
                    "core.models.Recipe",
                    "Mapping",
                    "Mapping[str,Any]",
                    "accounts.models.User"
                ],
                "monkeypatch": [
                    "app.models.user.UserInDB",
                    "ultron8.api.models.user.UserInDB",
                    "unittesmock.Mock"
                ]
            }
        },
        "test_dataporten_middleware_with_user_with_dataporten_credentials": {
            "name": "test_dataporten_middleware_with_user_with_dataporten_credentials",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "rf": [
                    "Dict[Hashable,Any]",
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "Optional[Dict[Hashable,Any]]",
                    "Optional[Dict[str,Any]]"
                ],
                "user_with_dataporten_token": [
                    "int",
                    "Type[models.taxonomies.T]",
                    "Type"
                ],
                "monkeypatch": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "django-dataporten-master/dataporten/tests/test_models.py": {
        "token_import_function": {
            "name": "token_import_function",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "user": [
                    "bool",
                    "Dict",
                    "str",
                    "int"
                ]
            }
        },
        "test_dataporten_user_groups": {
            "name": "test_dataporten_user_groups",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "dataporten_user": [
                    "deeplearning.ml4pl.models.logger.Logger"
                ]
            }
        },
        "test_dataporten_user_validation": {
            "name": "test_dataporten_user_validation",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "rf": [],
                "django_user_model": [
                    "Iterable[Any]",
                    "core.models.Recipe",
                    "None",
                    "Optional[Iterable[Any]]",
                    "accounts.models.User"
                ],
                "dataporten_user": [
                    "zerver.models.UserProfile"
                ]
            }
        },
        "TestDataportenGroupManager.test_dataporten_courses": {
            "name": "test_dataporten_courses",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataporten": []
            }
        },
        "TestDataportenGroupManager.test_dataporten_study_program": {
            "name": "test_dataporten_study_program",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataporten": [
                    "str",
                    "float"
                ]
            }
        },
        "TestDataportenGroupManager.test_dataporten_main_profile": {
            "name": "test_dataporten_main_profile",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataporten": [
                    "str",
                    "int",
                    "Type"
                ]
            }
        },
        "TestDataportenGroupManager.test_dataporten_organisation_units": {
            "name": "test_dataporten_organisation_units",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataporten": [
                    "bool"
                ]
            }
        },
        "TestCourseManager.test_less_semesters_ago": {
            "name": "test_less_semesters_ago",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "finished_course": [
                    "meeshkan.core.sagemaker_monitor.SageMakerJobMonitor"
                ],
                "course_last_semester": [
                    "meeshkan.core.sagemaker_monitor.SageMakerJobMonitor"
                ],
                "ongoing_course": [
                    "meeshkan.core.sagemaker_monitor.SageMakerJobMonitor"
                ]
            }
        },
        "TestCourseManager.test_semester_in_future": {
            "name": "test_semester_in_future",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ongoing_course": []
            }
        },
        "TestTokenImport.test_token_not_configured": {
            "name": "test_token_not_configured",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "Callable",
                    "zerver.models.UserProfile"
                ],
                "dataporten_user": [
                    "str",
                    "core.models.Recipe",
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "TestTokenImport.test_token_unimportable_path": {
            "name": "test_token_unimportable_path",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "bool",
                    "models.user.User"
                ],
                "dataporten_user": [
                    "str",
                    "core.models.Recipe",
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "TestTokenImport.test_token_properly_configured": {
            "name": "test_token_properly_configured",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "Callable",
                    "zerver.models.UserProfile"
                ],
                "dataporten_user": [
                    "str",
                    "core.models.Recipe",
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        }
    },
    "django-dataporten-master/dataporten/tests/test_parsers.py": {
        "TestDatetimeFrom.test_basic_correctness": {
            "name": "test_basic_correctness",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupFactory.test_study_program_factory": {
            "name": "test_study_program_factory",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "study_program_json": []
            }
        },
        "TestGroupFactory.test_course_factory": {
            "name": "test_course_factory",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "course_json": []
            }
        },
        "TestGroupFactory.test_main_profile_factory": {
            "name": "test_main_profile_factory",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "main_profile_json": []
            }
        },
        "TestGroupFactory.test_group_factory_given_iterable_argument": {
            "name": "test_group_factory_given_iterable_argument",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "study_program_json": [],
                "course_json": []
            }
        },
        "TestGroup.test_properties_present": {
            "name": "test_properties_present",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "study_program_json": []
            }
        },
        "TestGroup.test_active_membership": {
            "name": "test_active_membership",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "study_program_json": []
            }
        },
        "TestMembership.test_perpetual_membership": {
            "name": "test_perpetual_membership",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMembership.test_inactive_membership": {
            "name": "test_inactive_membership",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMembership.test_limited_membership": {
            "name": "test_limited_membership",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMembership.test_expired_membership": {
            "name": "test_expired_membership",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMembership.test_retrieval_of_json_from_membership_object": {
            "name": "test_retrieval_of_json_from_membership_object",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "membership_json": []
            }
        },
        "TestMembership.test_string_representation_of_membership": {
            "name": "test_string_representation_of_membership",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "membership_json": []
            }
        },
        "TestMembership.test_primary_affiliation_property": {
            "name": "test_primary_affiliation_property",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "membership_json": []
            }
        },
        "TestCourse.test_course_code": {
            "name": "test_course_code",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "finished_course": []
            }
        },
        "TestCourse.test_finished_course": {
            "name": "test_finished_course",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "finished_course": []
            }
        },
        "TestCourse.test_ongoing_course_with_end_time": {
            "name": "test_ongoing_course_with_end_time",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ongoing_course": []
            }
        },
        "TestCourse.test_ongoing_course_without_end_time": {
            "name": "test_ongoing_course_without_end_time",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "non_finished_course": []
            }
        },
        "TestCourse.test_split_on_membership": {
            "name": "test_split_on_membership",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "finished_course": [],
                "non_finished_course": [],
                "ongoing_course": []
            }
        },
        "TestStudyProgram.test_study_program_basic_properties": {
            "name": "test_study_program_basic_properties",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "study_program_json": []
            }
        },
        "TestMainProfile.test_main_profile_basic_properties": {
            "name": "test_main_profile_basic_properties",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "main_profile_json": []
            }
        },
        "TestOrganisationUnit.test_organisation_unit_basic_properties": {
            "name": "test_organisation_unit_basic_properties",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "organisation_unit_json": []
            }
        },
        "TestSemester.setUp": {
            "name": "setUp",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSemester.test_year_of_semester": {
            "name": "test_year_of_semester",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSemester.test_semester_season": {
            "name": "test_semester_season",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSemester.test_subtracting_semesters": {
            "name": "test_subtracting_semesters",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-dataporten-master/dataporten/tests/utils.py": {
        "mock_userinfo_request": {
            "name": "mock_userinfo_request",
            "location": 9,
            "return": [
                "bool",
                "Callable[[bytes], None]",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "mock_usergroups_request": {
            "name": "mock_usergroups_request",
            "location": 27,
            "return": [
                "bool",
                "Callable[[bytes], None]",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "dummy_token_function": {
            "name": "dummy_token_function",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "user": [
                    "bool",
                    "Dict",
                    "str",
                    "int",
                    "User"
                ]
            }
        }
    },
    "django-dataporten-master/dataporten/tests/__init__.py": {}
}
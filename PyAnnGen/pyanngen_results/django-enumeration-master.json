{
    "django-enumeration-master/enumeration/apps.py": {},
    "django-enumeration-master/enumeration/const.py": {},
    "django-enumeration-master/enumeration/formatter.py": {
        "format_number": {
            "name": "format_number",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "format_string": [
                    "str",
                    "float",
                    "List[List[str]]",
                    "int",
                    "List[list[str]]"
                ],
                "position": [
                    "int",
                    "str",
                    "Set[str]",
                    "List"
                ]
            }
        }
    },
    "django-enumeration-master/enumeration/manager.py": {
        "truncate_date": {
            "name": "truncate_date",
            "location": 37,
            "return": [
                "str",
                "datetime.datetime",
                "Optional[str]",
                "datetime.date"
            ],
            "arguments": {
                "period": [
                    "bool",
                    "Dict",
                    "str",
                    "int",
                    "T",
                    "datetime.date",
                    "datetime.datetime"
                ],
                "date": [
                    "str",
                    "datetime.date",
                    "Optional[datetime.datetime]",
                    "Union[datetime.datetime,datetime.date]"
                ]
            }
        },
        "get_next_position": {
            "name": "get_next_position",
            "location": 47,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "sequence": [
                    "bool",
                    "enumeration.models.Sequence",
                    "None",
                    "datetime.date",
                    "Optional[bool]"
                ],
                "date": [
                    "None",
                    "Optional[datetime.date]",
                    "Set[str]",
                    "str",
                    "datetime.date",
                    "Dict[datetime.date,dict[str,Any]]",
                    "Dict[datetime.date,Dict[str,Any]]"
                ]
            }
        },
        "consume_gap": {
            "name": "consume_gap",
            "location": 83,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "sequence": [
                    "bool",
                    "enumeration.models.Sequence",
                    "None",
                    "datetime.date",
                    "Optional[bool]"
                ],
                "date": [
                    "None",
                    "Optional[datetime.date]",
                    "datetime.date",
                    "datetime"
                ]
            }
        },
        "increment": {
            "name": "increment",
            "location": 110,
            "return": [
                "Tuple[int, int]",
                "float",
                "bool",
                "int"
            ],
            "arguments": {
                "sequence": [
                    "bool",
                    "enumeration.models.Sequence",
                    "None",
                    "datetime.date",
                    "Optional[bool]"
                ],
                "date": [
                    "None",
                    "Optional[datetime.date]",
                    "datetime.datetime",
                    "datetime",
                    "datetime.date"
                ]
            }
        },
        "get_number": {
            "name": "get_number",
            "location": 140,
            "return": [
                "Tuple[(str, Any)]"
            ],
            "arguments": {
                "sequence": [
                    "models.Payment"
                ],
                "fill_gap": [
                    "bool",
                    "str",
                    "T",
                    "Dict"
                ]
            }
        }
    },
    "django-enumeration-master/enumeration/models.py": {
        "Sequence.clean": {
            "name": "clean",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-enumeration-master/enumeration/validators.py": {
        "validate_format": {
            "name": "validate_format",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "format_string": [
                    "str"
                ],
                "period": [
                    "str",
                    "int",
                    "float"
                ]
            }
        }
    },
    "django-enumeration-master/enumeration/__init__.py": {},
    "django-enumeration-master/enumeration/migrations/0001_initial.py": {},
    "django-enumeration-master/enumeration/migrations/__init__.py": {},
    "django-enumeration-master/tests/settings.py": {},
    "django-enumeration-master/tests/test_consume_gap.py": {
        "ConsumeGapTestCase.setUpClass": {
            "name": "setUpClass",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[Callable]",
                    "Callable",
                    "Match[str]",
                    "None",
                    "Match"
                ]
            }
        },
        "ConsumeGapTestCase.test_no_counter": {
            "name": "test_no_counter",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsumeGapTestCase.test_has_counter_no_gaps": {
            "name": "test_has_counter_no_gaps",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsumeGapTestCase.test_gaps_consumed": {
            "name": "test_gaps_consumed",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsumeGapTestCase.test_right_counter_consumed": {
            "name": "test_right_counter_consumed",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-enumeration-master/tests/test_format.py": {
        "FormatTestCase.test": {
            "name": "test",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormatTestCase.test_ascii": {
            "name": "test_ascii",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormatTestCase.test_literal": {
            "name": "test_literal",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-enumeration-master/tests/test_format_validator.py": {
        "FormatValidatorTestCase.test_number_required": {
            "name": "test_number_required",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormatValidatorTestCase.test_year": {
            "name": "test_year",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormatValidatorTestCase.test_month": {
            "name": "test_month",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormatValidatorTestCase.test_day": {
            "name": "test_day",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-enumeration-master/tests/test_get_next.py": {
        "GetNextTestCase.test_no_reset": {
            "name": "test_no_reset",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetNextTestCase.test_daily_reset": {
            "name": "test_daily_reset",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetNextTestCase.test_monthly_reset": {
            "name": "test_monthly_reset",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetNextTestCase.test_yearly_reset": {
            "name": "test_yearly_reset",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-enumeration-master/tests/test_increment.py": {
        "IncrementTestCase.test_never": {
            "name": "test_never",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IncrementTestCase.test_daily_counter_created": {
            "name": "test_daily_counter_created",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IncrementTestCase.test_monthly_counter_created": {
            "name": "test_monthly_counter_created",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IncrementTestCase.test_yearly_counter_created": {
            "name": "test_yearly_counter_created",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-enumeration-master/tests/test_misc.py": {
        "MiscTestCase.test_counter_constraint_same_date": {
            "name": "test_counter_constraint_same_date",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MiscTestCase.test_counter_constaint_nod_date": {
            "name": "test_counter_constaint_nod_date",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-enumeration-master/tests/__init__.py": {}
}
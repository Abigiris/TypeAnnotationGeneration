{
    "django-exiffield-master/exiffield/exceptions.py": {},
    "django-exiffield-master/exiffield/fields.py": {
        "get_exif": {
            "name": "get_exif",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "file_": [
                    "pathlib.Path",
                    "List[str]",
                    "str",
                    "BinaryIO",
                    "pathlib.PurePosixPath"
                ]
            }
        },
        "ExifField.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExifField.check": {
            "name": "check",
            "location": 55,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExifField._check_for_exiftool": {
            "name": "_check_for_exiftool",
            "location": 66,
            "return": [
                "Generator[(Any, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExifField._check_for_source": {
            "name": "_check_for_source",
            "location": 78,
            "return": [
                "Generator[(Any, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExifField._check_fields": {
            "name": "_check_fields",
            "location": 109,
            "return": [
                "Generator[(Any, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExifField.contribute_to_class": {
            "name": "contribute_to_class",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "django.db.models.Model",
                    "type",
                    "str",
                    "Sequence[type]",
                    "Iterable[str]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "ExifField.denormalize_exif": {
            "name": "denormalize_exif",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Exception",
                    "Dict[str, str]",
                    "leagues.models.League"
                ]
            }
        },
        "ExifField.update_exif": {
            "name": "update_exif",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "jumeaux.models.Res2DictAddOnPayload",
                    "bool"
                ],
                "force": [
                    "bool"
                ],
                "commit": [
                    "bool"
                ]
            }
        }
    },
    "django-exiffield-master/exiffield/getters.py": {
        "exifgetter": {
            "name": "exifgetter",
            "location": 24,
            "return": [
                "Callable[([Dict[(str, Dict[(str, Any)])]], Any)]"
            ],
            "arguments": {
                "field": [
                    "str"
                ]
            }
        },
        "get_type": {
            "name": "get_type",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "exif": [
                    "Dict[(str, Dict[(str, Any)])]"
                ]
            }
        },
        "get_datetaken": {
            "name": "get_datetaken",
            "location": 43,
            "return": [
                "Optional[datetime.datetime]"
            ],
            "arguments": {
                "exif": [
                    "Dict[(str, Dict[(str, Any)])]"
                ]
            }
        },
        "get_orientation": {
            "name": "get_orientation",
            "location": 63,
            "return": [
                "Orientation"
            ],
            "arguments": {
                "exif": [
                    "Dict[(str, Dict[(str, Any)])]"
                ]
            }
        },
        "get_sequencetype": {
            "name": "get_sequencetype",
            "location": 78,
            "return": [
                "Mode"
            ],
            "arguments": {
                "exif": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_sequencenumber": {
            "name": "get_sequencenumber",
            "location": 104,
            "return": [
                "int"
            ],
            "arguments": {
                "exif": [
                    "str",
                    "bool",
                    "T",
                    "dict"
                ]
            }
        },
        "exifgetter.inner": {
            "name": "inner",
            "location": 29,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "exif": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "django-exiffield-master/exiffield/__init__.py": {},
    "django-exiffield-master/tests/conftest.py": {
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "django-exiffield-master/tests/models.py": {},
    "django-exiffield-master/tests/test_checks.py": {
        "mocked_which": {
            "name": "mocked_which",
            "location": 8,
            "return": [
                "str",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "mocker": [
                    "float",
                    "Callable[[bytes], None]",
                    "bool",
                    "str"
                ]
            }
        },
        "test_exiftool": {
            "name": "test_exiftool",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mocked_which": []
            }
        },
        "test_source": {
            "name": "test_source",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mocked_which": [
                    "bool",
                    "str",
                    "salon.models.Stylist"
                ],
                "kwargs": [],
                "error": [
                    "Exception",
                    "str"
                ]
            }
        },
        "test_fields": {
            "name": "test_fields",
            "location": 88,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mocked_which": [],
                "denormalized_fields": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "models.Project"
                ],
                "error": [
                    "Collection[str]",
                    "bool",
                    "typing.Collection"
                ]
            }
        },
        "test_valid_definition": {
            "name": "test_valid_definition",
            "location": 110,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mocked_which": []
            }
        }
    },
    "django-exiffield-master/tests/test_field.py": {
        "uncommitted_img": {
            "name": "uncommitted_img",
            "location": 18,
            "return": [
                "",
                "typing.Generator[Image]"
            ],
            "arguments": {}
        },
        "committed_img": {
            "name": "committed_img",
            "location": 48,
            "return": [
                "",
                "typing.Generator[typing.Union[int,typing.Callable[, ],str]]"
            ],
            "arguments": {
                "uncommitted_img": [
                    "int",
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "models.Question"
                ]
            }
        },
        "img": {
            "name": "img",
            "location": 63,
            "return": [
                "typing.Callable[, ]",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "request": [
                    "typing.Callable[, ]",
                    "django.http.HttpRequest",
                    "Callable"
                ],
                "uncommitted_img": [
                    "typing.Callable[, ]",
                    "django.http.HttpRequest",
                    "Callable"
                ]
            }
        },
        "remotestorage": {
            "name": "remotestorage",
            "location": 75,
            "return": [
                "",
                "typing.Generator[FileSystemStorage]"
            ],
            "arguments": {
                "mocker": [
                    "str"
                ]
            }
        },
        "img_remotestorage": {
            "name": "img_remotestorage",
            "location": 94,
            "return": [
                "",
                "typing.Generator[typing.Union[str,list[str],None]]"
            ],
            "arguments": {
                "remotestorage": [
                    "str",
                    "bool",
                    "int"
                ],
                "img": [
                    "str",
                    "list[str]",
                    "None",
                    "starfish.core.imagestack.parser.TileKey",
                    "models.User",
                    "List[str]",
                    "Optional[str]",
                    "zerver.models.Stream"
                ]
            }
        },
        "test_unsupported_file": {
            "name": "test_unsupported_file",
            "location": 108,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_extract_exif": {
            "name": "test_extract_exif",
            "location": 137,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ],
                "img": []
            }
        },
        "test_exif_should_contain_filename": {
            "name": "test_exif_should_contain_filename",
            "location": 154,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mocker": [
                    "pathlib.Path"
                ],
                "committed_img": [
                    "Callable",
                    "str",
                    "Tuple[float, float, float, float, float]",
                    "float"
                ]
            }
        },
        "test_do_not_reextract_exif_if_filename_is_known": {
            "name": "test_do_not_reextract_exif_if_filename_is_known",
            "location": 165,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "str",
                    "pathlib.Path"
                ],
                "committed_img": [
                    "int",
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "test_do_reextract_exif_if_new_file_is_uncommited": {
            "name": "test_do_reextract_exif_if_new_file_is_uncommited",
            "location": 180,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "pathlib.Path",
                    "typing.Type",
                    "Type"
                ],
                "committed_img": [
                    "pathlib.Path",
                    "str",
                    "Type"
                ]
            }
        },
        "test_do_not_extract_exif_without_file": {
            "name": "test_do_not_extract_exif_without_file",
            "location": 192,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mocker": [
                    "typing.Callable[, ]",
                    "pathlib.Path",
                    "Callable"
                ]
            }
        },
        "test_extract_remote_backend": {
            "name": "test_extract_remote_backend",
            "location": 204,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "float"
                ],
                "img_remotestorage": [
                    "str",
                    "float"
                ]
            }
        },
        "test_extract_exif_if_missing": {
            "name": "test_extract_exif_if_missing",
            "location": 215,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "float"
                ],
                "img": [
                    "Dict[str, Any]",
                    "blurr.core.schema_loader.SchemaLoader"
                ]
            }
        },
        "test_extract_exif_if_forced": {
            "name": "test_extract_exif_if_forced",
            "location": 229,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "float"
                ],
                "img": [
                    "blurr.core.schema_loader.SchemaLoader",
                    "meeshkan.core.sagemaker_monitor.SageMakerJobMonitor",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_extract_exif_if_file_changes": {
            "name": "test_extract_exif_if_file_changes",
            "location": 243,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mocker": [
                    "typing.Generator[]",
                    "pathlib.Path",
                    "Generator"
                ],
                "img": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "test_extract_exif_and_save": {
            "name": "test_extract_exif_and_save",
            "location": 254,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mocker": [
                    "pathlib.Path"
                ],
                "img": [
                    "meeshkan.core.sagemaker_monitor.SageMakerJobMonitor"
                ]
            }
        },
        "test_denormalization": {
            "name": "test_denormalization",
            "location": 266,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "img": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "test_denormalization_invalid_exif": {
            "name": "test_denormalization_invalid_exif",
            "location": 272,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "img": [
                    "pathlib.Path",
                    "Dict[str, Sequence[str]]"
                ],
                "caplog": [
                    "str",
                    "meeshkan.core.sagemaker_monitor.SageMakerJobMonitor"
                ]
            }
        },
        "test_async": {
            "name": "test_async",
            "location": 292,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "remotestorage.remote_open": {
            "name": "remote_open",
            "location": 81,
            "return": [
                "typing.IO",
                "str",
                "List[str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "float",
                    "int"
                ],
                "mode": [
                    "str",
                    "int"
                ]
            }
        },
        "remotestorage.remote_path": {
            "name": "remote_path",
            "location": 85,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "django-exiffield-master/tests/test_getters.py": {
        "test_exifgetter": {
            "name": "test_exifgetter",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ],
                "expected": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_get_type": {
            "name": "test_get_type",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "typing.Callable[[], typing.Any]",
                    "Callable[[], Any]",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "typing.Mapping",
                    "Union[str, Dict[str, Any]]",
                    "dict[, ]",
                    "Mapping[str, Any]",
                    "dict"
                ],
                "expected": [
                    "str",
                    "bool",
                    "Union[Type, Tuple[Type, ...]]",
                    "typing.Type",
                    "tuple[typing.Union[typing.Type,...]]",
                    "Union[str, Dict[str, Any]]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_get_datetaken": {
            "name": "test_get_datetaken",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "exif_data": [
                    "str",
                    "bytes",
                    "Optional[Exception]",
                    "Exception",
                    "None"
                ],
                "expected": [
                    "str",
                    "bytes",
                    "Optional[Exception]",
                    "Exception",
                    "None"
                ]
            }
        },
        "test_get_datetaken_invalid_data": {
            "name": "test_get_datetaken_invalid_data",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "exif_data": [
                    "List[List[int]]",
                    "str",
                    "list[list[int]]"
                ],
                "error_msg": [
                    "str",
                    "TextIO",
                    "typing.TextIO"
                ]
            }
        },
        "test_get_orientation": {
            "name": "test_get_orientation",
            "location": 82,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "width": [
                    "int",
                    "float",
                    "str"
                ],
                "height": [
                    "int",
                    "float",
                    "str"
                ],
                "orientation": [
                    "int",
                    "float",
                    "str"
                ],
                "expected": [
                    "set",
                    "bool",
                    "set[]"
                ]
            }
        },
        "test_get_sequencetype": {
            "name": "test_get_sequencetype",
            "location": 101,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "exif_data": [
                    "str",
                    "bytes",
                    "Optional[Exception]",
                    "Exception",
                    "None"
                ],
                "expected": [
                    "str",
                    "bytes",
                    "Optional[Exception]",
                    "Exception",
                    "None"
                ]
            }
        },
        "test_get_sequencenumber": {
            "name": "test_get_sequencenumber",
            "location": 109,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "exif_data": [
                    "str",
                    "bytes",
                    "Optional[Exception]",
                    "Exception",
                    "None"
                ],
                "expected": [
                    "str",
                    "bytes",
                    "Optional[Exception]",
                    "Exception",
                    "None"
                ]
            }
        }
    },
    "django-exiffield-master/tests/urls.py": {},
    "django-exiffield-master/tests/__init__.py": {}
}
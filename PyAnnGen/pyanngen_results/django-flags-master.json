{
    "django-flags-master/makemigrations.py": {},
    "django-flags-master/runtests.py": {
        "run_tests": {
            "name": "run_tests",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "django-flags-master/setup.py": {},
    "django-flags-master/tasks.py": {
        "format_python": {
            "name": "format_python",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str"
                ]
            }
        },
        "lint_python": {
            "name": "lint_python",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "test_python": {
            "name": "test_python",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        }
    },
    "django-flags-master/flags/api.py": {
        "FlagViewSet.list": {
            "name": "list",
            "location": 14,
            "return": [
                "Response",
                "bool",
                "str",
                "bytes",
                "Dict[str, Any]",
                "Dict[str, Union[str, int]]",
                "int",
                "Optional[Callable[[Dict], bool]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, str]",
                    "rest_framework.requesRequest",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        }
    },
    "django-flags-master/flags/apps.py": {},
    "django-flags-master/flags/flag.py": {
        "Flag.create_from_config": {
            "name": "create_from_config",
            "location": 15,
            "return": [
                "Flag"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFlag]"
                ],
                "config": [
                    "dict"
                ]
            }
        },
        "Flag.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "flag_type": [
                    "str"
                ],
                "default_value": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]",
                    "type",
                    "typing.Type"
                ]
            }
        },
        "Flag.cast_string": {
            "name": "cast_string",
            "location": 27,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ]
            }
        }
    },
    "django-flags-master/flags/flag_overrider.py": {
        "FlagOverrider.should_override": {
            "name": "should_override",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "flag": [
                    "flags.flag.Flag"
                ]
            }
        },
        "FlagOverrider.get_override": {
            "name": "get_override",
            "location": 21,
            "return": [
                "typing.Any",
                "None"
            ],
            "arguments": {
                "self": [],
                "flag": [
                    "flags.flag.Flag"
                ]
            }
        }
    },
    "django-flags-master/flags/flag_set.py": {
        "FlagSet.create_from_config": {
            "name": "create_from_config",
            "location": 12,
            "return": [
                "FlagSet"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFlagSet]"
                ],
                "config": [
                    "List[Dict[(str, Any)]]"
                ],
                "overriders": [
                    "List[flags.flag_overrider.FlagOverrider]"
                ]
            }
        },
        "FlagSet.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flags": [
                    "List[flags.flag.Flag]"
                ],
                "overriders": [
                    "List[flags.flag_overrider.FlagOverrider]"
                ]
            }
        },
        "FlagSet.get_flag": {
            "name": "get_flag",
            "location": 21,
            "return": [
                "flags.flag.Flag"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "FlagSet.get_flag_value": {
            "name": "get_flag_value",
            "location": 25,
            "return": [
                "dict",
                "Optional[Dict]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "FlagSet.__iter__": {
            "name": "__iter__",
            "location": 33,
            "return": [
                "Generator[(str, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-flags-master/flags/models.py": {},
    "django-flags-master/flags/overriders.py": {
        "SiteFlagOverrider.should_override": {
            "name": "should_override",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "flag": [
                    "flags.flag.Flag"
                ]
            }
        },
        "SiteFlagOverrider.get_override": {
            "name": "get_override",
            "location": 16,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "flag": [
                    "flags.flag.Flag"
                ]
            }
        }
    },
    "django-flags-master/flags/utils.py": {
        "get_overriders": {
            "name": "get_overriders",
            "location": 16,
            "return": [
                "List[flags.flag_overrider.FlagOverrider]"
            ],
            "arguments": {}
        },
        "load_flag_set": {
            "name": "load_flag_set",
            "location": 23,
            "return": [
                "flags.flag_set.FlagSet"
            ],
            "arguments": {
                "fin": [
                    "IO"
                ]
            }
        },
        "load_flag_set_path": {
            "name": "load_flag_set_path",
            "location": 28,
            "return": [
                "flags.flag_set.FlagSet"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "get_flag_set": {
            "name": "get_flag_set",
            "location": 33,
            "return": [
                "flags.flag_set.FlagSet"
            ],
            "arguments": {}
        },
        "get_flag_value": {
            "name": "get_flag_value",
            "location": 38,
            "return": [
                "bool",
                "Optional[Union[Any, str]]",
                "Optional[str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Set[str]",
                    "bool",
                    "set[str]",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "django-flags-master/flags/__init__.py": {},
    "django-flags-master/flags/migrations/0001_initial.py": {},
    "django-flags-master/flags/migrations/__init__.py": {},
    "django-flags-master/flags/tests/overriders.py": {
        "SimpleOverrider.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "SimpleOverrider.should_override": {
            "name": "should_override",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "flag": [
                    "dict[str, str]",
                    "Dict[str, str]",
                    "str",
                    "memoryview",
                    "Iterable[Tuple[int, int]]",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "SimpleOverrider.get_override": {
            "name": "get_override",
            "location": 15,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "flag": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "Type[T]",
                    "typing.Type"
                ]
            }
        },
        "NeverOverride.should_override": {
            "name": "should_override",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "flag": [
                    "dict[str, str]",
                    "Dict[str, str]",
                    "str",
                    "memoryview",
                    "Iterable[Tuple[int, int]]",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "NeverOverride.get_override": {
            "name": "get_override",
            "location": 26,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "flag": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "Type[T]",
                    "typing.Type"
                ]
            }
        }
    },
    "django-flags-master/flags/tests/test_api.py": {
        "FlagsApiTestCase.setUp": {
            "name": "setUp",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlagsApiTestCase.test_get_all_flag_values": {
            "name": "test_get_all_flag_values",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "get_flag_set": [
                    "bytes",
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "django-flags-master/flags/tests/test_flag.py": {
        "FlagTestCase.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlagTestCase.test_create_from_config": {
            "name": "test_create_from_config",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlagTestCase.test_cast_string_int": {
            "name": "test_cast_string_int",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlagTestCase.test_cast_string_failure": {
            "name": "test_cast_string_failure",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-flags-master/flags/tests/test_flag_set.py": {
        "FlagSetTestCase.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlagSetTestCase.test_empty_config": {
            "name": "test_empty_config",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlagSetTestCase.test_single_flag": {
            "name": "test_single_flag",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlagSetTestCase.test_get_default_value": {
            "name": "test_get_default_value",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlagSetTestCase.test_with_single_overrider": {
            "name": "test_with_single_overrider",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlagSetTestCase.test_multiple_overriders": {
            "name": "test_multiple_overriders",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlagSetTestCase.test_overrider_fall_thorugh": {
            "name": "test_overrider_fall_thorugh",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlagSetTestCase.test_allows_iteration": {
            "name": "test_allows_iteration",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-flags-master/flags/tests/test_overriders.py": {
        "SiteFlagOverriderTestCase.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SiteFlagOverriderTestCase.test_checks_existence": {
            "name": "test_checks_existence",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SiteFlagOverriderTestCase.test_applies_override": {
            "name": "test_applies_override",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-flags-master/flags/tests/test_utils.py": {
        "UtilsTestCase.test_get_overriders": {
            "name": "test_get_overriders",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTestCase.test_load_flag_set": {
            "name": "test_load_flag_set",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTestCase.test_get_flag_set": {
            "name": "test_get_flag_set",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patched_load": [
                    "unittesmock.MagicMock",
                    "int",
                    "str",
                    "Iterable",
                    "Dict[str, Any]"
                ]
            }
        },
        "UtilsTestCase.test_get_flag_value": {
            "name": "test_get_flag_value",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patched_get": [
                    "list[str]",
                    "str",
                    "unittesmock.MagicMock",
                    "List[str]"
                ]
            }
        }
    },
    "django-flags-master/flags/tests/urls.py": {},
    "django-flags-master/flags/tests/__init__.py": {}
}
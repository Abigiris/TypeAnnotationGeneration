{
    "django-test-migrations-master/mypy_django_settings.py": {},
    "django-test-migrations-master/setup.py": {
        "_read": {
            "name": "_read",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "filepath": []
            }
        },
        "get_version": {
            "name": "get_version",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "package": []
            }
        }
    },
    "django-test-migrations-master/tests/integration/testing_project/manage.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "django-test-migrations-master/tests/integration/testing_project/apps/__init__.py": {},
    "django-test-migrations-master/tests/integration/testing_project/apps/polls/apps.py": {},
    "django-test-migrations-master/tests/integration/testing_project/apps/polls/enums.py": {
        "DifficultyLevel.choices": {
            "name": "choices",
            "location": 12,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "str",
                    "Dict",
                    "Mapping"
                ]
            }
        }
    },
    "django-test-migrations-master/tests/integration/testing_project/apps/polls/factories.py": {
        "QuestionFactory.choices": {
            "name": "choices",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "create": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ],
                "extracted": [
                    "List",
                    "Set[T]",
                    "Set",
                    "int"
                ]
            }
        }
    },
    "django-test-migrations-master/tests/integration/testing_project/apps/polls/models.py": {
        "Question.__str__": {
            "name": "__str__",
            "location": 15,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Choice.__str__": {
            "name": "__str__",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-test-migrations-master/tests/integration/testing_project/apps/polls/__init__.py": {},
    "django-test-migrations-master/tests/integration/testing_project/apps/polls/migrations/0001_initial.py": {},
    "django-test-migrations-master/tests/integration/testing_project/apps/polls/migrations/0002_question_is_hard.py": {},
    "django-test-migrations-master/tests/integration/testing_project/apps/polls/migrations/0003_question_difficulty_level.py": {},
    "django-test-migrations-master/tests/integration/testing_project/apps/polls/migrations/0004_populate_question_difficulty_level_field.py": {
        "populate_difficulty_level": {
            "name": "populate_difficulty_level",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "str",
                    "bool",
                    "django.db.migrations.state.StateApps",
                    "int"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "reverse_difficulty_level_to_is_hard": {
            "name": "reverse_difficulty_level_to_is_hard",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "str",
                    "bool"
                ],
                "schema_editor": [
                    "bool",
                    "str",
                    "django.db.backends.postgresql_psycopg2.schema.DatabaseSchemaEditor"
                ]
            }
        }
    },
    "django-test-migrations-master/tests/integration/testing_project/apps/polls/migrations/0005_censor_cheesy_words.py": {
        "censore_cheesy_words": {
            "name": "censore_cheesy_words",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "int",
                    "str",
                    "Sequence[int]",
                    "bytes"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "_censore_all_cheesy_words": {
            "name": "_censore_all_cheesy_words",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "model_class": [
                    "str",
                    "bytes",
                    "int",
                    "conductor.planner.models.Student"
                ],
                "text_field": [
                    "str",
                    "int",
                    "bytes",
                    "tracim.models.data.Content"
                ]
            }
        },
        "_censore_cheesy_word": {
            "name": "_censore_cheesy_word",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "matchobj": [
                    "int",
                    "Optional[Tuple[int, int]]",
                    "jumeaux.models.Log2ReqsAddOnPayload",
                    "bool"
                ]
            }
        }
    },
    "django-test-migrations-master/tests/integration/testing_project/apps/polls/migrations/__init__.py": {},
    "django-test-migrations-master/tests/integration/testing_project/apps/polls/tests/__init__.py": {},
    "django-test-migrations-master/tests/integration/testing_project/apps/polls/tests/migrations/__init__.py": {},
    "django-test-migrations-master/tests/integration/testing_project/apps/polls/tests/migrations/pytest/test_0004.py": {
        "TestMigration0004.test_difficulty_level_field_has_proper_values": {
            "name": "test_difficulty_level_field_has_proper_values",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "migrator": []
            }
        },
        "TestMigration0004.test_is_hard_field_has_proper_values_when_reversing_migration": {
            "name": "test_is_hard_field_has_proper_values_when_reversing_migration",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "migrator": []
            }
        }
    },
    "django-test-migrations-master/tests/integration/testing_project/apps/polls/tests/migrations/pytest/test_0005.py": {
        "TestMigration0005.test_cheesy_words_are_censored_in_Question_and_Choice_instances": {
            "name": "test_cheesy_words_are_censored_in_Question_and_Choice_instances",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "migrator": [
                    "Callable"
                ]
            }
        },
        "TestMigration0005.test_raises_ValueError_when_any_text_contain_Gjetost_mention": {
            "name": "test_raises_ValueError_when_any_text_contain_Gjetost_mention",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "migrator": [
                    "str"
                ]
            }
        }
    },
    "django-test-migrations-master/tests/integration/testing_project/apps/polls/tests/migrations/pytest/__init__.py": {},
    "django-test-migrations-master/tests/integration/testing_project/apps/polls/tests/migrations/unittest/test_0004.py": {
        "TestMigration0004_0.setup_before_migration": {
            "name": "setup_before_migration",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "apps": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "TestMigration0004_0.test_difficulty_level_field_has_proper_values": {
            "name": "test_difficulty_level_field_has_proper_values",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMigration0004_1.setup_before_migration": {
            "name": "setup_before_migration",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "apps": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "TestMigration0004_1.test_is_hard_field_has_proper_values_when_reversing_migration": {
            "name": "test_is_hard_field_has_proper_values_when_reversing_migration",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-test-migrations-master/tests/integration/testing_project/apps/polls/tests/migrations/unittest/test_0005.py": {
        "TestMigration0005_0.setup_before_migration": {
            "name": "setup_before_migration",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "apps": [
                    "int",
                    "str",
                    "Sequence[int]",
                    "bytes"
                ]
            }
        },
        "TestMigration0005_0.test_cheesy_words_are_censored_in_Question_and_Choice_instances": {
            "name": "test_cheesy_words_are_censored_in_Question_and_Choice_instances",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMigration0005_1.setup_before_migration": {
            "name": "setup_before_migration",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "apps": [
                    "int",
                    "str",
                    "Sequence[int]",
                    "bytes"
                ]
            }
        },
        "TestMigration0005_1.test_raises_ValueError_when_any_text_contain_Gjetost_mention": {
            "name": "test_raises_ValueError_when_any_text_contain_Gjetost_mention",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-test-migrations-master/tests/integration/testing_project/apps/polls/tests/migrations/unittest/__init__.py": {},
    "django-test-migrations-master/tests/integration/testing_project/config/runner.py": {
        "PytestTestRunner.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "bool",
                    "Callable",
                    "None"
                ],
                "top_level": [
                    "bool",
                    "Callable",
                    "None"
                ],
                "verbosity": [
                    "int",
                    "bool",
                    "Callable"
                ],
                "interactive": [
                    "bool",
                    "Callable"
                ],
                "failfast": [
                    "bool",
                    "Callable"
                ],
                "keepdb": [
                    "bool",
                    "Callable"
                ],
                "reverse": [
                    "bool",
                    "Callable"
                ],
                "debug_mode": [
                    "bool",
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "debug_sql": [
                    "bool",
                    "Callable"
                ],
                "parallel": [
                    "int",
                    "bool",
                    "Callable"
                ],
                "tags": [
                    "Set[str]",
                    "None",
                    "List[str]",
                    "Dict",
                    "List[DeliveryItem]",
                    "Optional[List[DeliveryItem]]",
                    "Set[int]",
                    "Iterator[str]",
                    "Iterator"
                ],
                "exclude_tags": [
                    "List[str]",
                    "None",
                    "Set[str]",
                    "bool",
                    "Optional[List[DeliveryItem]]",
                    "Callable",
                    "Iterator[str]",
                    "List[DeliveryItem]",
                    "Iterator"
                ]
            }
        },
        "PytestTestRunner.add_arguments": {
            "name": "add_arguments",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Dict[str,Any]",
                    "argparse.ArgumentParser",
                    "argparse._SubParsersAction"
                ],
                "parser": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "PytestTestRunner.run_tests": {
            "name": "run_tests",
            "location": 67,
            "return": [
                "bool",
                "list",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "test_labels": [
                    "List[str]",
                    "Sequence[str]",
                    "bool",
                    "str"
                ],
                "extra_tests": [
                    "List[str]",
                    "None",
                    "int",
                    "Optional[Sequence[Any]]",
                    "Sequence[Any]",
                    "Optional[bool]"
                ]
            }
        }
    },
    "django-test-migrations-master/tests/integration/testing_project/config/urls.py": {},
    "django-test-migrations-master/tests/integration/testing_project/config/wsgi.py": {},
    "django-test-migrations-master/tests/integration/testing_project/config/__init__.py": {},
    "django-test-migrations-master/tests/integration/testing_project/config/settings/pytest.py": {},
    "django-test-migrations-master/tests/integration/testing_project/config/settings/unittest.py": {},
    "django-test-migrations-master/tests/pytest_plugin/conftest.py": {},
    "django-test-migrations-master/tests/pytest_plugin/test_plugin.py": {
        "test_dir": {
            "name": "test_dir",
            "location": 7,
            "return": [
                "str",
                "int",
                "Dict[str, float]",
                "Iterable[Any]"
            ],
            "arguments": {
                "testdir": []
            }
        },
        "test_set_nomigrations_to_False_when_run_with_test_migrations_option": {
            "name": "test_set_nomigrations_to_False_when_run_with_test_migrations_option",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "test_dir": [
                    "Callable",
                    "Optional[str]",
                    "str"
                ],
                "initial_nomigrations_value": [
                    "List[str]"
                ]
            }
        },
        "test_mark_item_with_migration_marker_if_migrator_fixture_requested": {
            "name": "test_mark_item_with_migration_marker_if_migrator_fixture_requested",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "test_dir": [
                    "Optional[str]",
                    "Tuple[str]"
                ]
            }
        },
        "test_item_marked_with_migration_marker_request_transactional_db_fixture": {
            "name": "test_item_marked_with_migration_marker_request_transactional_db_fixture",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "test_dir": [
                    "str"
                ]
            }
        },
        "test_item_marked_with_migration_marker_are_skipped_if_CLI_option_test_migrations_not_passed": {
            "name": "test_item_marked_with_migration_marker_are_skipped_if_CLI_option_test_migrations_not_passed",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "test_dir": [
                    "str"
                ]
            }
        },
        "test_item_marked_with_migration_marker_are_not_skipped_if_CLI_option_test_migrations_passed": {
            "name": "test_item_marked_with_migration_marker_are_not_skipped_if_CLI_option_test_migrations_passed",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "test_dir": [
                    "str"
                ]
            }
        }
    },
    "django-test-migrations-master/tests/pytest_plugin/__init__.py": {},
    "django-test-migrations-master/tests/pytest_plugin/data/conftest.py": {
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "django.core.managemenbase.CommandParser",
                    "dict"
                ]
            }
        },
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "django-test-migrations-master/tests/pytest_plugin/data/test_marked_with_migration_marker.py": {
        "test_marked_with_migration_marker": {
            "name": "test_marked_with_migration_marker",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "django-test-migrations-master/tests/pytest_plugin/data/test_not_related_to_test_migrations.py": {
        "test_totally_not_connected_with_test_migrations": {
            "name": "test_totally_not_connected_with_test_migrations",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "django-test-migrations-master/tests/pytest_plugin/data/test_using_migrator_fixture.py": {
        "test_using_migrator_fixture": {
            "name": "test_using_migrator_fixture",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {
                "migrator": [
                    "str"
                ]
            }
        }
    },
    "django-test-migrations-master/tests/unit/conftest.py": {
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "django.core.managemenbase.CommandParser",
                    "dict"
                ]
            }
        },
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "django-test-migrations-master/tests/unit/test_migrator.py": {
        "migrator": {
            "name": "migrator",
            "location": 7,
            "return": [
                "Migrator",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "transactional_db": [
                    "bool",
                    "str"
                ],
                "mocker": [
                    "List[Dict[str,str]]",
                    "bool",
                    "List[dict[str,str]]"
                ]
            }
        },
        "TestMigrator.test_migrate_from_calls_migrate_on_migration_executor": {
            "name": "test_migrate_from_calls_migrate_on_migration_executor",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "migrator": []
            }
        },
        "TestMigrator.test_migrate_to_raises_assertion_error_when_migrate_from_not_called": {
            "name": "test_migrate_to_raises_assertion_error_when_migrate_from_not_called",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "migrator": []
            }
        },
        "TestMigrator.test_migrate_to_calls_reload_migrations": {
            "name": "test_migrate_to_calls_reload_migrations",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "migrator": [],
                "mocker": []
            }
        },
        "TestMigrator.test_clean_calls_call_command_when_migrate_to_applied": {
            "name": "test_clean_calls_call_command_when_migrate_to_applied",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "migrator": [],
                "mocker": []
            }
        }
    },
    "django-test-migrations-master/tests/unit/test_mixins.py": {
        "TestMigrationTestMixin.test_current_app_name_return_None_when_app_not_registered": {
            "name": "test_current_app_name_return_None_when_app_not_registered",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestMigrationTestMixin.test_current_app_name_return_app_name_when_app_registered_not_stored_in_module": {
            "name": "test_current_app_name_return_app_name_when_app_registered_not_stored_in_module",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestMigrationTestMixin.test_current_app_name_return_app_name_when_app_registered_and_stored_in_module": {
            "name": "test_current_app_name_return_app_name_when_app_registered_and_stored_in_module",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str"
                ],
                "app_name": [
                    "str"
                ],
                "expected_app_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "TestMigrationTestMixin.test_assert_migration_targets_defined_raises_AssertionError": {
            "name": "test_assert_migration_targets_defined_raises_AssertionError",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": []
            }
        },
        "TestMigrationTestMixin.test_assert_migration_targets_defined_dont_pass_when_targets_defined": {
            "name": "test_assert_migration_targets_defined_dont_pass_when_targets_defined",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMigrationTestMixin.test_process_migration_target": {
            "name": "test_process_migration_target",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMigrationTestMixin.test_teardown_test_calls_migrator_clean": {
            "name": "test_teardown_test_calls_migrator_clean",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestMigrationTestMixin.test_setup_test_calls_proper_migrator_methods_and_setup_before_migration": {
            "name": "test_setup_test_calls_proper_migrator_methods_and_setup_before_migration",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        }
    },
    "django-test-migrations-master/tests/unit/__init__.py": {},
    "django-test-migrations-master/tests/unit/runners/test_unittest.py": {
        "DummyTestRunner.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMigrationTestRunnerMixin.setup_test": {
            "name": "setup_test",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "bool",
                    "str"
                ]
            }
        },
        "TestMigrationTestRunnerMixin.test_migrations_test_marker_is_added_to_excluded_tags_if_not_requested": {
            "name": "test_migrations_test_marker_is_added_to_excluded_tags_if_not_requested",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tags": [
                    "str",
                    "Dict[bytes,bytes]"
                ],
                "exclude_tags": [
                    "Set[str]",
                    "Type[GenericList]",
                    "Type",
                    "MutableSet[str]",
                    "MutableSet"
                ]
            }
        },
        "TestMigrationTestRunnerMixin.test_migrations_test_marker_is_not_added_to_excluded_tags_if_requested": {
            "name": "test_migrations_test_marker_is_not_added_to_excluded_tags_if_requested",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tags": [
                    "str",
                    "List[str]",
                    "Sequence[str]"
                ]
            }
        }
    },
    "django-test-migrations-master/tests/unit/runners/__init__.py": {},
    "django-test-migrations-master/test_migrations/constants.py": {},
    "django-test-migrations-master/test_migrations/migrator.py": {
        "Migrator.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "str",
                    "None",
                    "Dict",
                    "bool",
                    "Callable[[str],None]",
                    "Callable[str,None]"
                ],
                "progress_callback": [
                    "str",
                    "None"
                ]
            }
        },
        "Migrator.migrate_from": {
            "name": "migrate_from",
            "location": 34,
            "return": [
                "dict",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "targets": [
                    "int"
                ]
            }
        },
        "Migrator.migrate_to": {
            "name": "migrate_to",
            "location": 43,
            "return": [
                "int",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "targets": [
                    "int",
                    "Callable"
                ]
            }
        },
        "Migrator.clean": {
            "name": "clean",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-test-migrations-master/test_migrations/mixins.py": {
        "MigrationTestMixin.current_app_name": {
            "name": "current_app_name",
            "location": 34,
            "return": [
                "None",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MigrationTestMixin.setup_test": {
            "name": "setup_test",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MigrationTestMixin.teardown_test": {
            "name": "teardown_test",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MigrationTestMixin.setup_before_migration": {
            "name": "setup_before_migration",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "apps": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "MigrationTestMixin.assert_migration_targets_defined": {
            "name": "assert_migration_targets_defined",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MigrationTestMixin.process_migration_target": {
            "name": "process_migration_target",
            "location": 76,
            "return": [
                "Union[(List[Tuple[(Any, _T0)]], _T0)]"
            ],
            "arguments": {
                "self": [],
                "migration_target": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "django-test-migrations-master/test_migrations/__init__.py": {},
    "django-test-migrations-master/test_migrations/contrib/__init__.py": {},
    "django-test-migrations-master/test_migrations/contrib/pytest_plugin/fixtures.py": {
        "migrator": {
            "name": "migrator",
            "location": 5,
            "return": [
                "Migrator",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "request": [
                    "Callable"
                ]
            }
        }
    },
    "django-test-migrations-master/test_migrations/contrib/pytest_plugin/plugin.py": {
        "pytest_load_initial_conftests": {
            "name": "pytest_load_initial_conftests",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "early_config": [
                    "Mapping[str, Any]",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "pytest_sessionstart": {
            "name": "pytest_sessionstart",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "bool",
                    "Dict",
                    "Dict[str,Tuple[Any,Any,Any]]",
                    "Dict[str,tuple[Union[Any,Any,Any]]]"
                ]
            }
        },
        "pytest_collection_modifyitems": {
            "name": "pytest_collection_modifyitems",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "List[bytes]",
                    "Dict"
                ],
                "items": [
                    "Match[str]",
                    "Iterable[T]",
                    "Dict[str, int]"
                ]
            }
        },
        "_django_migration_marker": {
            "name": "_django_migration_marker",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "request": []
            }
        }
    },
    "django-test-migrations-master/test_migrations/contrib/pytest_plugin/__init__.py": {},
    "django-test-migrations-master/test_migrations/runners/unittest.py": {
        "MigrationTestRunnerMixin.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-test-migrations-master/test_migrations/runners/__init__.py": {},
    "django-test-migrations-master/test_migrations/test_cases/unittest.py": {
        "MigrationTestCase.setUp": {
            "name": "setUp",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MigrationTestCase.tearDown": {
            "name": "tearDown",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-test-migrations-master/test_migrations/test_cases/__init__.py": {}
}
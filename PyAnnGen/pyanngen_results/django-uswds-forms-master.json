{
    "django-uswds-forms-master/metadata.py": {
        "get_version": {
            "name": "get_version",
            "location": 9,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "django-uswds-forms-master/setup.py": {
        "SimpleCommand.initialize_options": {
            "name": "initialize_options",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleCommand.finalize_options": {
            "name": "finalize_options",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DevDocsCommand.run": {
            "name": "run",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-uswds-forms-master/docs/conf.py": {},
    "django-uswds-forms-master/docs/get_intersphinx_inventory.py": {},
    "django-uswds-forms-master/example/manage.py": {},
    "django-uswds-forms-master/example/app/example.py": {
        "add_links_to_docs": {
            "name": "add_links_to_docs",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Iterator[str]",
                    "Iterator"
                ]
            }
        },
        "add_links_to_docs.hyperlink": {
            "name": "hyperlink",
            "location": 26,
            "return": [
                "str",
                "Tuple[str,int]"
            ],
            "arguments": {
                "match": [
                    "Match",
                    "str",
                    "Match[str]"
                ]
            }
        },
        "Example.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "basename": [
                    "str",
                    "raiden.utils.Address",
                    "bytes",
                    "Dict[str,float]",
                    "int"
                ],
                "load": [
                    "bool",
                    "Tuple[int,int]",
                    "int",
                    "Tuple[int,int,int]",
                    "bytes"
                ]
            }
        },
        "Example.load": {
            "name": "load",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Example.template_source": {
            "name": "template_source",
            "location": 73,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Example.jinja2_source": {
            "name": "jinja2_source",
            "location": 77,
            "return": [
                "str",
                "List[str]",
                "Path",
                "Union[pathlib.Path, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Example.url": {
            "name": "url",
            "location": 81,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Example.render": {
            "name": "render",
            "location": 84,
            "return": [
                "SafeString",
                "raiden.utils.signer.Signer",
                "str",
                "Optional[str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "django-uswds-forms-master/example/app/jinja2.py": {
        "environment": {
            "name": "environment",
            "location": 5,
            "return": [
                "Dict[str,Any]",
                "int",
                "List[str]",
                "bool",
                "Dict[str,Union[str,None]]"
            ],
            "arguments": {}
        }
    },
    "django-uswds-forms-master/example/app/render_source.py": {
        "render_source": {
            "name": "render_source",
            "location": 14,
            "return": [
                "str",
                "int",
                "List",
                "pathlib.Path",
                "BinaryIO",
                "SafeString"
            ],
            "arguments": {
                "contents": [
                    "str",
                    "List",
                    "BinaryIO"
                ],
                "filetype": [
                    "str"
                ]
            }
        },
        "clean_python_source": {
            "name": "clean_python_source",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "source": [
                    "str",
                    "pathlib.Path",
                    "Literal",
                    "List[str]",
                    "paradigm.catalog.Path"
                ]
            }
        },
        "clean_template_source": {
            "name": "clean_template_source",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "source": [
                    "str"
                ]
            }
        },
        "render_template_source": {
            "name": "render_template_source",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "f": [
                    "pathlib.Path",
                    "str",
                    "bool"
                ]
            }
        },
        "render_python_source": {
            "name": "render_python_source",
            "location": 53,
            "return": [
                "str",
                "int",
                "Dict[str, str]",
                "django.db.models.Model"
            ],
            "arguments": {
                "f": [
                    "pathlib.Path",
                    "str",
                    "bool",
                    "metrics_backend.utils.Address"
                ]
            }
        }
    },
    "django-uswds-forms-master/example/app/views.py": {
        "ctx": {
            "name": "ctx",
            "location": 23,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {}
        },
        "example": {
            "name": "example",
            "location": 31,
            "return": [
                "HttpResponseNotFound",
                "str",
                "bool",
                "Optional[Any]",
                "Dict[str,dict]",
                "Dict",
                "Dict[str,Any]"
            ],
            "arguments": {
                "request": [
                    "Optional[str]",
                    "str",
                    "apistar.http.Headers",
                    "None",
                    "int",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "Union[str,bytes,Any]",
                    "bytes",
                    "Any"
                ],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[django.http.HttpRequest]",
                    "Dict",
                    "None"
                ]
            }
        },
        "home": {
            "name": "home",
            "location": 43,
            "return": [
                "Tuple[Dict[str, Any], http.HTTPStatus]",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "django-uswds-forms-master/example/app/__init__.py": {},
    "django-uswds-forms-master/example/app/examples/checkboxes.py": {
        "view": {
            "name": "view",
            "location": 24,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "Callable",
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "django-uswds-forms-master/example/app/examples/date.py": {
        "view": {
            "name": "view",
            "location": 16,
            "return": [
                "dict",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "request": [
                    "Callable",
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "django-uswds-forms-master/example/app/examples/errors.py": {
        "view": {
            "name": "view",
            "location": 25,
            "return": [
                "str",
                "Optional[str]",
                "Optional[bool]",
                "tuple"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "MyForm.clean": {
            "name": "clean",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-uswds-forms-master/example/app/examples/everything.py": {
        "view": {
            "name": "view",
            "location": 55,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "django-uswds-forms-master/example/app/examples/radios.py": {
        "view": {
            "name": "view",
            "location": 27,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "Callable",
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "django-uswds-forms-master/example/app/examples/_startexample_template.py": {
        "view": {
            "name": "view",
            "location": 23,
            "return": [
                "Dict[str, Any]",
                "Tuple[str, int]",
                "Dict[int, str]",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "request": [
                    "Callable",
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "django-uswds-forms-master/example/app/examples/__init__.py": {},
    "django-uswds-forms-master/example/app/management/__init__.py": {},
    "django-uswds-forms-master/example/app/management/commands/startexample.py": {
        "untemplatize": {
            "name": "untemplatize",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "f": [
                    "str",
                    "BinaryIO",
                    "Dict[str,Any]"
                ],
                "example": [
                    "str",
                    "BinaryIO",
                    "Dict[str,Any]"
                ]
            }
        },
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "argparse.ArgumentParser",
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.undo_copy": {
            "name": "undo_copy",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str",
                    "pathlib.Path",
                    "pathlib.PurePath"
                ],
                "dest": [
                    "str",
                    "bytes"
                ],
                "example": [
                    "str",
                    "pathlib.Path",
                    "pathlib.PurePath"
                ]
            }
        },
        "Command.copy": {
            "name": "copy",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str",
                    "bytes",
                    "None",
                    "Union[str,bytes]",
                    "Optional[str]"
                ],
                "dest": [
                    "str",
                    "Union[str, bytes]",
                    "Optional[str]"
                ],
                "example": [
                    "str",
                    "bytes",
                    "None",
                    "Union[str,bytes]",
                    "Optional[str]"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "example_slug": [
                    "str"
                ],
                "undo": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "django-uswds-forms-master/example/app/management/commands/__init__.py": {},
    "django-uswds-forms-master/example/app/tests/test_axe.py": {
        "AxeTests.setUpClass": {
            "name": "setUpClass",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Dict[str,Any]",
                    "Callable",
                    "str"
                ]
            }
        },
        "AxeTests.tearDownClass": {
            "name": "tearDownClass",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "IO[bytes]",
                    "IO",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "AxeTests.test": {
            "name": "test",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "example": [
                    "str"
                ]
            }
        }
    },
    "django-uswds-forms-master/example/app/tests/test_example.py": {
        "AddLinksToDocsTests.test_it_does_nothing_when_docs_have_no_links": {
            "name": "test_it_does_nothing_when_docs_have_no_links",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddLinksToDocsTests.test_it_hyperlinks_uswds_links": {
            "name": "test_it_hyperlinks_uswds_links",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddLinksToDocsTests.test_it_does_not_hyperlink_final_periods": {
            "name": "test_it_does_not_hyperlink_final_periods",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-uswds-forms-master/example/app/tests/test_examples.py": {
        "ExamplesReturn200Tests.test": {
            "name": "test",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "example": [
                    "str"
                ]
            }
        },
        "ExampleMixin.url": {
            "name": "url",
            "location": 18,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExampleMixin.valid_post": {
            "name": "valid_post",
            "location": 25,
            "return": [
                "Dict[str,str]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExampleMixin.test_empty_post_shows_errors": {
            "name": "test_empty_post_shows_errors",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExampleMixin.test_valid_post_shows_success": {
            "name": "test_valid_post_shows_success",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EverythingExampleTests.test_non_field_errors_are_displayed": {
            "name": "test_non_field_errors_are_displayed",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-uswds-forms-master/example/app/tests/test_render_source.py": {
        "RenderSourceTests.test_clean_python_source_works": {
            "name": "test_clean_python_source_works",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RenderSourceTests.test_clean_template_source_works": {
            "name": "test_clean_template_source_works",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-uswds-forms-master/example/app/tests/test_startexample.py": {
        "ClosepollTest.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClosepollTest.tearDown": {
            "name": "tearDown",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClosepollTest.cleanup_paths": {
            "name": "cleanup_paths",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClosepollTest.call": {
            "name": "call",
            "location": 32,
            "return": [
                "Set[str]",
                "Optional[Union[str, Any]]",
                "Dict[str, Any]",
                "base.ConfigOptions"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClosepollTest.test_example_names_path_exists": {
            "name": "test_example_names_path_exists",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClosepollTest.test_example_tests_path_exists": {
            "name": "test_example_tests_path_exists",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClosepollTest.test_undo_does_not_delete_modified_files": {
            "name": "test_undo_does_not_delete_modified_files",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClosepollTest.test_undo_does_not_explode_if_files_do_not_exist": {
            "name": "test_undo_does_not_explode_if_files_do_not_exist",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClosepollTest.test_create_does_not_overwrite": {
            "name": "test_create_does_not_overwrite",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClosepollTest.test_create_works": {
            "name": "test_create_works",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClosepollTest.test_undo_works": {
            "name": "test_undo_works",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClosepollTest.test_invalid_slug_raises_error": {
            "name": "test_invalid_slug_raises_error",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-uswds-forms-master/example/app/tests/test_template_engine_parity.py": {
        "TemplateEngineParityTests.make_renderer": {
            "name": "make_renderer",
            "location": 20,
            "return": [
                "str",
                "dict",
                "Callable",
                "denite.util.UserContext"
            ],
            "arguments": {
                "self": [],
                "engine_name": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "Any",
                    "int",
                    "Iterable[float]",
                    "Callable",
                    "Optional[Callable]"
                ],
                "form_renderer": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "Any",
                    "int",
                    "Iterable[float]",
                    "Callable",
                    "Optional[Callable]"
                ]
            }
        },
        "TemplateEngineParityTests.render_example": {
            "name": "render_example",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "example": [
                    "str",
                    "bool"
                ],
                "renderer": [
                    "str"
                ]
            }
        },
        "TemplateEngineParityTests.test": {
            "name": "test",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "example": []
            }
        },
        "TemplateEngineParityTests.make_renderer.force_render_using_engine": {
            "name": "force_render_using_engine",
            "location": 21,
            "return": [],
            "arguments": {
                "req": [
                    "str",
                    "int"
                ],
                "template_name": [
                    "str",
                    "int"
                ],
                "ctx": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "django-uswds-forms-master/example/app/tests/test_views.py": {
        "ViewTests.test_home_returns_200": {
            "name": "test_home_returns_200",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ViewTests.test_nonexistent_example_returns_404": {
            "name": "test_nonexistent_example_returns_404",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-uswds-forms-master/example/app/tests/util.py": {
        "TestEachExample.make_test_method_for_example": {
            "name": "make_test_method_for_example",
            "location": 23,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool"
                ],
                "test": [
                    "str",
                    "bool"
                ],
                "example": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "TestEachExample.__new__": {
            "name": "__new__",
            "location": 30,
            "return": [
                "Dict[str, Any]",
                "Type",
                "Optional[Dict[str, str]]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool"
                ],
                "name": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "List[Tuple[str,str]]",
                    "Type",
                    "List[tuple[Union[str,str]]]",
                    "Mapping[str,Any]",
                    "Mapping",
                    "Sequence[type]",
                    "Sequence[Type]"
                ],
                "bases": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "List[Tuple[str,str]]",
                    "Type",
                    "List[tuple[Union[str,str]]]",
                    "Mapping[str,Any]",
                    "Mapping",
                    "Sequence[type]",
                    "Sequence[Type]"
                ],
                "namespace": [
                    "Dict",
                    "bool",
                    "str"
                ]
            }
        },
        "TestEachExample.make_test_method_for_example.wrapper": {
            "name": "wrapper",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-uswds-forms-master/example/app/tests/__init__.py": {},
    "django-uswds-forms-master/example/example/settings.py": {},
    "django-uswds-forms-master/example/example/urls.py": {},
    "django-uswds-forms-master/example/example/wsgi.py": {},
    "django-uswds-forms-master/example/example/__init__.py": {},
    "django-uswds-forms-master/uswds_forms/date.py": {
        "UswdsDateWidget.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attrs": [
                    "int",
                    "None",
                    "datetime.datetime",
                    "datetime.timedelta"
                ]
            }
        },
        "UswdsDateWidget.decompress": {
            "name": "decompress",
            "location": 68,
            "return": [
                "List[None]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "datetime.datetime",
                    "datetime.date"
                ]
            }
        },
        "UswdsDateWidget.get_field_names": {
            "name": "get_field_names",
            "location": 78,
            "return": [
                "DateTuple"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "UswdsDateWidget.get_context": {
            "name": "get_context",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "value": [
                    "str",
                    "bool"
                ],
                "attrs": [
                    "str",
                    "bool"
                ]
            }
        },
        "UswdsDateField.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UswdsDateField.compress": {
            "name": "compress",
            "location": 138,
            "return": [
                "Optional[datetime.date]"
            ],
            "arguments": {
                "self": [],
                "data_list": [
                    "bool",
                    "float",
                    "str",
                    "T"
                ]
            }
        }
    },
    "django-uswds-forms-master/uswds_forms/errors.py": {
        "UswdsErrorList.as_ul": {
            "name": "as_ul",
            "location": 23,
            "return": [
                "Text",
                "str",
                "bool",
                "Iterable[str]",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-uswds-forms-master/uswds_forms/fieldset_helper.py": {
        "get_context": {
            "name": "get_context",
            "location": 28,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "field": []
            }
        },
        "fieldset": {
            "name": "fieldset",
            "location": 61,
            "return": [
                "SafeString"
            ],
            "arguments": {
                "field": []
            }
        },
        "create_aria_hidden_label_tag": {
            "name": "create_aria_hidden_label_tag",
            "location": 79,
            "return": [
                "SafeString"
            ],
            "arguments": {
                "field": [],
                "attrs": []
            }
        }
    },
    "django-uswds-forms-master/uswds_forms/form.py": {
        "UswdsForm.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UswdsForm.as_fieldsets": {
            "name": "as_fieldsets",
            "location": 34,
            "return": [
                "SafeString",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-uswds-forms-master/uswds_forms/radio_and_checkbox.py": {
        "UswdsWidgetMixin.get_context": {
            "name": "get_context",
            "location": 14,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "attrs": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "django-uswds-forms-master/uswds_forms/__init__.py": {},
    "django-uswds-forms-master/uswds_forms/templatetags/uswds_forms.py": {
        "fieldset": {
            "name": "fieldset",
            "location": 9,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "context": [
                    "str",
                    "Callable",
                    "bool"
                ],
                "field": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        }
    },
    "django-uswds-forms-master/uswds_forms/templatetags/__init__.py": {},
    "django-uswds-forms-master/uswds_forms/tests/conftest.py": {
        "init_django": {
            "name": "init_django",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "django-uswds-forms-master/uswds_forms/tests/test_date.py": {
        "DateWidgetTests.test_get_field_names_works": {
            "name": "test_get_field_names_works",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateWidgetTests.test_render_assigns_ids_and_labels": {
            "name": "test_render_assigns_ids_and_labels",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateWidgetTests.test_render_assigns_names": {
            "name": "test_render_assigns_names",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateWidgetTests.test_render_assigns_hint_id_and_aria_describedby": {
            "name": "test_render_assigns_hint_id_and_aria_describedby",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateWidgetTests.test_render_takes_value_as_list": {
            "name": "test_render_takes_value_as_list",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateWidgetTests.test_render_takes_value_as_date": {
            "name": "test_render_takes_value_as_date",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateWidgetTests.test_render_does_not_raise_exception_on_empty_lists": {
            "name": "test_render_does_not_raise_exception_on_empty_lists",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateWidgetTests.test_decompress_works_with_dates": {
            "name": "test_decompress_works_with_dates",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateWidgetTests.test_decompress_works_with_none": {
            "name": "test_decompress_works_with_none",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateFieldTests.test_compress_returns_date_for_valid_dates": {
            "name": "test_compress_returns_date_for_valid_dates",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateFieldTests.test_compress_raises_validation_errors_for_invalid_dates": {
            "name": "test_compress_raises_validation_errors_for_invalid_dates",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateFieldTests.test_compress_returns_none_when_data_list_is_falsy": {
            "name": "test_compress_returns_none_when_data_list_is_falsy",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "django-uswds-forms-master/uswds_forms/tests/test_errors.py": {
        "test_errors_work": {
            "name": "test_errors_work",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "django-uswds-forms-master/uswds_forms/tests/test_example_app.py": {
        "test_example_app": {
            "name": "test_example_app",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "django-uswds-forms-master/uswds_forms/tests/test_form.py": {
        "test_as_fieldsets_works": {
            "name": "test_as_fieldsets_works",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "django-uswds-forms-master/uswds_forms/tests/test_jinja2.py": {
        "assert_templates_are_identical": {
            "name": "assert_templates_are_identical",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "test_date_template_is_identical": {
            "name": "test_date_template_is_identical",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_input_option_template_is_identical": {
            "name": "test_input_option_template_is_identical",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fieldset_template_is_identical": {
            "name": "test_fieldset_template_is_identical",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "django-uswds-forms-master/uswds_forms/tests/test_radio_and_checkbox.py": {
        "test_checkbox_select_multiple_uses_unstyled_list": {
            "name": "test_checkbox_select_multiple_uses_unstyled_list",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_radio_select_uses_unstyled_list": {
            "name": "test_radio_select_uses_unstyled_list",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "CheckboxTests.test_it_raises_error_when_id_is_not_present": {
            "name": "test_it_raises_error_when_id_is_not_present",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckboxTests.test_it_renders": {
            "name": "test_it_renders",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RadioTests.test_it_raises_error_when_id_is_not_present": {
            "name": "test_it_raises_error_when_id_is_not_present",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RadioTests.test_it_renders": {
            "name": "test_it_renders",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
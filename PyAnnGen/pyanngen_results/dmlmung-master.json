{
    "dmlmung-master/dev.py": {},
    "dmlmung-master/t.py": {
        "C.__iter__": {
            "name": "__iter__",
            "location": 11,
            "return": [
                "Iterator[Lit]",
                "Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "C.__next__": {
            "name": "__next__",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmlmung-master/__init__.py": {},
    "dmlmung-master/fp/fit_pal.py": {
        "DailyData.pprint": {
            "name": "pprint",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DailyData.as_dict": {
            "name": "as_dict",
            "location": 41,
            "return": [
                "DailyTD",
                "int",
                "str",
                "Dict",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmlmung-master/fp/main.py": {},
    "dmlmung-master/fp/setup.py": {},
    "dmlmung-master/fp/__init__.py": {},
    "dmlmung-master/src/main.py": {
        "start_profiling": {
            "name": "start_profiling",
            "location": 10,
            "return": [
                "int",
                "Tuple[str, str]",
                "str",
                "list"
            ],
            "arguments": {}
        },
        "prof_to_stats": {
            "name": "prof_to_stats",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "profile": [
                    "str",
                    "float",
                    "list",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dmlmung-master/src/data/fit2p.py": {
        "main": {
            "name": "main",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "fit": {
            "name": "fit",
            "location": 120,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "data_dir": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "filename": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Sequence[str]"
                ],
                "plot": [
                    "str",
                    "bool",
                    "Dict[str, List[Dict]]"
                ]
            }
        },
        "multi_fit": {
            "name": "multi_fit",
            "location": 231,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "data_dir": [
                    "str",
                    "BinaryIO",
                    "bool",
                    "pathlib.Path",
                    "Union[pathlib.Path, str]",
                    "bytes"
                ],
                "plot": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "mott_plot": {
            "name": "mott_plot",
            "location": 291,
            "return": [],
            "arguments": {
                "data_dir": [
                    "str",
                    "numpy.ndarray",
                    "dict"
                ],
                "plot": [
                    "str",
                    "int",
                    "dict",
                    "bytes"
                ]
            }
        },
        "SingleData.__post_init__": {
            "name": "__post_init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "fit_single_data.__post_init__": {
            "name": "__post_init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FittedMultiData.__post_init__": {
            "name": "__post_init__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmlmung-master/src/data/fit2s.py": {
        "main": {
            "name": "main",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "fit": {
            "name": "fit",
            "location": 120,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "data_dir": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "filename": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Sequence[str]"
                ],
                "plot": [
                    "str",
                    "bool",
                    "Dict[str, List[Dict]]"
                ]
            }
        },
        "multi_fit": {
            "name": "multi_fit",
            "location": 231,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "data_dir": [
                    "str",
                    "BinaryIO",
                    "bool",
                    "pathlib.Path",
                    "Union[pathlib.Path, str]",
                    "bytes"
                ],
                "plot": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "mott_plot": {
            "name": "mott_plot",
            "location": 296,
            "return": [],
            "arguments": {
                "data_dir": [
                    "str",
                    "numpy.ndarray",
                    "dict"
                ],
                "plot": [
                    "str",
                    "int",
                    "dict",
                    "bytes"
                ]
            }
        },
        "SingleData.__post_init__": {
            "name": "__post_init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "fit_single_data.__post_init__": {
            "name": "__post_init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FittedMultiData.__post_init__": {
            "name": "__post_init__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmlmung-master/src/data/fit2_rr_ss.py": {
        "main": {
            "name": "main",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "fit": {
            "name": "fit",
            "location": 127,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "data_dir": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Sequence[str]"
                ],
                "filename": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Sequence[str]"
                ],
                "plot": [
                    "str",
                    "bool",
                    "Dict[str, List[Dict]]"
                ]
            }
        },
        "multi_fit": {
            "name": "multi_fit",
            "location": 225,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "data_dir": [
                    "str",
                    "pathlib.Path",
                    "numpy.ndarray",
                    "Union[pathlib.Path, str]"
                ],
                "plot": [
                    "pathlib.Path",
                    "int",
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "TextIO"
                ],
                "output_dir": [
                    "pathlib.Path",
                    "str",
                    "bytes",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "mott_plot": {
            "name": "mott_plot",
            "location": 304,
            "return": [],
            "arguments": {
                "data_dir": [
                    "str",
                    "numpy.ndarray",
                    "dict"
                ],
                "plot": [
                    "str",
                    "int",
                    "dict",
                    "bytes"
                ]
            }
        },
        "SingleData.__post_init__": {
            "name": "__post_init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FittedSingleData.__post_init__": {
            "name": "__post_init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FittedMultiData.__post_init__": {
            "name": "__post_init__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FittedMultiData.split_by_voltage": {
            "name": "split_by_voltage",
            "location": 119,
            "return": [
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmlmung-master/src/data/fit3p2.py": {},
    "dmlmung-master/src/data/fit3s.py": {
        "main": {
            "name": "main",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "fit": {
            "name": "fit",
            "location": 119,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "data_dir": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "filename": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Sequence[str]"
                ],
                "plot": [
                    "str",
                    "bool",
                    "Dict[str, List[Dict]]"
                ]
            }
        },
        "multi_fit": {
            "name": "multi_fit",
            "location": 224,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "data_dir": [
                    "str",
                    "Optional[Union[Dict, str, int, bytes]]",
                    "bytes"
                ],
                "plot": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "mott_plot": {
            "name": "mott_plot",
            "location": 284,
            "return": [],
            "arguments": {
                "data_dir": [
                    "str",
                    "numpy.ndarray",
                    "dict"
                ],
                "plot": [
                    "str",
                    "int",
                    "dict",
                    "bytes"
                ]
            }
        },
        "SingleData.__post_init__": {
            "name": "__post_init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "fit_single_data.__post_init__": {
            "name": "__post_init__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FittedMultiData.__post_init__": {
            "name": "__post_init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmlmung-master/src/data/fit3sss.py": {
        "main": {
            "name": "main",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "fit": {
            "name": "fit",
            "location": 120,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "data_dir": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "filename": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Sequence[str]"
                ],
                "plot": [
                    "str",
                    "bool",
                    "Dict[str, List[Dict]]"
                ]
            }
        },
        "multi_fit": {
            "name": "multi_fit",
            "location": 238,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "data_dir": [
                    "str",
                    "Optional[Union[Dict, str, int, bytes]]",
                    "bytes"
                ],
                "plot": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "mott_plot": {
            "name": "mott_plot",
            "location": 298,
            "return": [],
            "arguments": {
                "data_dir": [
                    "str",
                    "numpy.ndarray",
                    "dict"
                ],
                "plot": [
                    "str",
                    "int",
                    "dict",
                    "bytes"
                ]
            }
        },
        "SingleData.__post_init__": {
            "name": "__post_init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "fit_single_data.__post_init__": {
            "name": "__post_init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FittedMultiData.__post_init__": {
            "name": "__post_init__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmlmung-master/src/data/fit3_rrw_sss.py": {
        "main": {
            "name": "main",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "fit": {
            "name": "fit",
            "location": 125,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "data_dir": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Sequence[str]"
                ],
                "filename": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Sequence[str]"
                ],
                "plot": [
                    "str",
                    "bool",
                    "Dict[str, List[Dict]]"
                ]
            }
        },
        "multi_fit": {
            "name": "multi_fit",
            "location": 222,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "data_dir": [
                    "str",
                    "pathlib.Path",
                    "numpy.ndarray",
                    "Union[pathlib.Path, str]"
                ],
                "plot": [
                    "pathlib.Path",
                    "int",
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "TextIO"
                ],
                "output_dir": [
                    "pathlib.Path",
                    "str",
                    "bytes",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "mott_plot": {
            "name": "mott_plot",
            "location": 296,
            "return": [],
            "arguments": {
                "data_dir": [
                    "str",
                    "numpy.ndarray",
                    "dict"
                ],
                "plot": [
                    "str",
                    "int",
                    "dict",
                    "bytes"
                ]
            }
        },
        "SingleData.__post_init__": {
            "name": "__post_init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FittedSingleData.__post_init__": {
            "name": "__post_init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FittedMultiData.__post_init__": {
            "name": "__post_init__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FittedMultiData.split_by_voltage": {
            "name": "split_by_voltage",
            "location": 119,
            "return": [
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmlmung-master/src/data/fit4_rrrr_pp.py": {
        "main": {
            "name": "main",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "fit": {
            "name": "fit",
            "location": 127,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "data_dir": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Sequence[str]"
                ],
                "filename": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Sequence[str]"
                ],
                "plot": [
                    "str",
                    "bool",
                    "Dict[str, List[Dict]]"
                ]
            }
        },
        "multi_fit": {
            "name": "multi_fit",
            "location": 225,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "data_dir": [
                    "str",
                    "pathlib.Path",
                    "numpy.ndarray",
                    "Union[pathlib.Path, str]"
                ],
                "plot": [
                    "pathlib.Path",
                    "int",
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "TextIO"
                ],
                "output_dir": [
                    "pathlib.Path",
                    "str",
                    "bytes",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "mott_plot": {
            "name": "mott_plot",
            "location": 304,
            "return": [],
            "arguments": {
                "data_dir": [
                    "str",
                    "numpy.ndarray",
                    "dict"
                ],
                "plot": [
                    "str",
                    "int",
                    "dict",
                    "bytes"
                ]
            }
        },
        "SingleData.__post_init__": {
            "name": "__post_init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FittedSingleData.__post_init__": {
            "name": "__post_init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FittedMultiData.__post_init__": {
            "name": "__post_init__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FittedMultiData.split_by_voltage": {
            "name": "split_by_voltage",
            "location": 119,
            "return": [
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmlmung-master/src/data/mung.py": {
        "open_file_numpy": {
            "name": "open_file_numpy",
            "location": 16,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "data_dir": [
                    "str",
                    "pathlib.Path"
                ],
                "filename": [
                    "str",
                    "pathlib.Path",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "get_voltage": {
            "name": "get_voltage",
            "location": 34,
            "return": [
                "Optional[int]",
                "bool",
                "str",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "dict",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "data_dir": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]"
                ],
                "filename": [
                    "str",
                    "int"
                ]
            }
        },
        "get_data_numpy": {
            "name": "get_data_numpy",
            "location": 53,
            "return": [
                "dict",
                "Dict[str, str]",
                "Dict[str, List[int]]",
                "bytes",
                "pathlib.Path"
            ],
            "arguments": {
                "data_array": [
                    "numpy.ndarray",
                    "dict",
                    "bytes",
                    "Iterator[Tuple[str, str]]"
                ]
            }
        },
        "get_params": {
            "name": "get_params",
            "location": 91,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "data_dir": [
                    "str"
                ],
                "filename": [
                    "str",
                    "Optional[str]",
                    "pathlib.Path",
                    "bytes"
                ]
            }
        },
        "write_imp_data": {
            "name": "write_imp_data",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "pathlib.Path",
                    "numpy.ndarray",
                    "IO[str]"
                ],
                "params": [
                    "str",
                    "dict"
                ],
                "output_dir": [
                    "pathlib.Path",
                    "bytes"
                ]
            }
        },
        "write_zview_data": {
            "name": "write_zview_data",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "pathlib.Path",
                    "numpy.ndarray",
                    "IO[str]"
                ],
                "params": [
                    "str",
                    "dict"
                ],
                "output_dir": [
                    "pathlib.Path",
                    "bytes"
                ]
            }
        },
        "fourier_smooth": {
            "name": "fourier_smooth",
            "location": 194,
            "return": [
                "bool",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "x_var": [
                    "bool",
                    "int",
                    "numpy.ndarray"
                ],
                "y_var": [
                    "numpy.ndarray",
                    "int",
                    "List[numpy.ndarray]",
                    "dict",
                    "List[int]"
                ]
            }
        },
        "open_mung_save": {
            "name": "open_mung_save",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "data_dir": [
                    "pathlib.Path",
                    "str",
                    "Optional[str]",
                    "Sequence[str]"
                ],
                "filename": [
                    "pathlib.Path",
                    "str",
                    "bool"
                ],
                "output_dir": [
                    "str",
                    "pathlib.Path",
                    "bool"
                ],
                "settings": [
                    "bytes",
                    "Union[pathlib.Path, str]",
                    "Optional[\"Source\"]",
                    "Union[pathlib3x.Path, IO[str]]"
                ]
            }
        }
    },
    "dmlmung-master/src/data/my_types.py": {},
    "dmlmung-master/src/data/nogui.py": {
        "main": {
            "name": "main",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dmlmung-master/src/data/plot.py": {
        "get_json_settings": {
            "name": "get_json_settings",
            "location": 18,
            "return": [
                "Dict[Text,Union[Text,int]]",
                "str",
                "bool"
            ],
            "arguments": {
                "json_file": [
                    "str",
                    "dml_thread.types.pathType",
                    "List[str]",
                    "TextIO"
                ]
            }
        },
        "save_json_settings": {
            "name": "save_json_settings",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "json_file": [
                    "str",
                    "dml_thread.types.pathType",
                    "List[str]",
                    "pathlib.Path",
                    "IO",
                    "IO[bytes]"
                ],
                "setting_dict": [
                    "str",
                    "int",
                    "Dict",
                    "bool"
                ]
            }
        },
        "make_cv_plot": {
            "name": "make_cv_plot",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "x_var": [
                    "float",
                    "numpy.ndarray",
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "y_var": [
                    "float",
                    "numpy.ndarray",
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "params": [
                    "Tuple[str]",
                    "bool"
                ],
                "output_dir": [
                    "str",
                    "None",
                    "Optional[pathlib.Path]",
                    "Union[int,str]",
                    "int"
                ],
                "settings": [
                    "Optional[Callable]",
                    "Callable",
                    "None",
                    "bool",
                    "List[Callable]"
                ]
            }
        },
        "make_nyquist_plot": {
            "name": "make_nyquist_plot",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "imped_imag": [
                    "str",
                    "bool",
                    "numpy.ndarray",
                    "int"
                ],
                "imped_real": [
                    "str",
                    "bool",
                    "numpy.ndarray",
                    "int"
                ],
                "params": [
                    "str",
                    "numpy.ndarray",
                    "bool",
                    "int"
                ],
                "output_dir": [
                    "None",
                    "str",
                    "dml_thread.types.pathType",
                    "pathlib.Path",
                    "cerulean.Path",
                    "Optional[str]",
                    "Union[os.PathLike,str]"
                ],
                "settings": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "make_bode_plot": {
            "name": "make_bode_plot",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "freq_log": [
                    "memoryview",
                    "numpy.ndarray"
                ],
                "imped_log": [
                    "str",
                    "numpy.ndarray",
                    "Dict",
                    "bytes"
                ],
                "phase": [
                    "bytes",
                    "numpy.ndarray",
                    "float",
                    "Optional[float]",
                    "None",
                    "List[List[int]]",
                    "List[list[int]]"
                ],
                "params": [
                    "Tuple[str]",
                    "Tuple"
                ],
                "output_dir": [
                    "None",
                    "str",
                    "dml_thread.types.pathType",
                    "List[str]",
                    "bool",
                    "pathlib.Path"
                ],
                "settings": [
                    "str",
                    "bool",
                    "None",
                    "bytes"
                ]
            }
        },
        "multi_bode_axes": {
            "name": "multi_bode_axes",
            "location": 136,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "settings": [
                    "Callable",
                    "Optional[Callable]",
                    "None"
                ],
                "y_axes": [
                    "Text",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "multi_bode_title": {
            "name": "multi_bode_title",
            "location": 166,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fig": [
                    "AbstractSet[str]",
                    "Tuple[float, float]"
                ],
                "params": [
                    "bool",
                    "Tuple[str]"
                ],
                "settings": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "multi_bode_add_data": {
            "name": "multi_bode_add_data",
            "location": 179,
            "return": [
                "str",
                "bytes",
                "int",
                "List[dict[str,Any]]",
                "List[dict[Any,str]]",
                "float",
                "List[list[Any]]",
                "None",
                "List"
            ],
            "arguments": {
                "fig": [
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]",
                    "float",
                    "List[Dict[Any,str]]",
                    "List[dict[Any,str]]",
                    "List",
                    "Union[int,float]",
                    "int",
                    "List[List[Any]]",
                    "List[list[Any]]",
                    "Optional[int]",
                    "None"
                ],
                "freq_log": [
                    "str",
                    "bytes",
                    "BinaryIO",
                    "TextIO",
                    "numpy.ndarray"
                ],
                "imped_log": [
                    "str",
                    "bytes",
                    "BinaryIO",
                    "TextIO",
                    "numpy.ndarray"
                ],
                "phase": [
                    "bool",
                    "Callable[[Callable],Callable[...,Any]]",
                    "Callable[Callable,Callable[...,Any]]"
                ],
                "params": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "multi_bode_plot_save": {
            "name": "multi_bode_plot_save",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "fig": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "params": [
                    "Dict",
                    "str",
                    "Dict[str,str]",
                    "numpy.ndarray",
                    "None",
                    "pathlib.Path",
                    "Optional[str]"
                ],
                "output_dir": [
                    "Text",
                    "str",
                    "pathlib.Path",
                    "BinaryIO",
                    "List[str]",
                    "Optional[str]"
                ],
                "color_map": [
                    "Text",
                    "bytes",
                    "Tuple[float,float,float,float]",
                    "List[str]",
                    "float",
                    "Tuple[int]",
                    "List[int]",
                    "List"
                ],
                "settings": [
                    "bool",
                    "None",
                    "str",
                    "List[pathlib.Path]",
                    "Path",
                    "Union[str,bytes]",
                    "bytes"
                ]
            }
        },
        "multi_bode_plot": {
            "name": "multi_bode_plot",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "freq_log": [
                    "bool",
                    "Callable",
                    "Dict[str,List[Dict]]",
                    "Dict[str,list[dict]]"
                ],
                "imped_log": [
                    "bool",
                    "Callable",
                    "Dict[str,List[Dict]]",
                    "Dict[str,list[dict]]"
                ],
                "phase": [
                    "bool",
                    "Callable",
                    "Dict[str,List[Dict]]",
                    "Dict[str,list[dict]]"
                ],
                "params": [
                    "bool",
                    "Callable",
                    "Dict[str,List[Dict]]",
                    "Dict[str,list[dict]]"
                ],
                "output_dir": [
                    "bool",
                    "None",
                    "Callable",
                    "Dict[str,List[Dict]]",
                    "Dict[str,list[dict]]"
                ],
                "settings": [
                    "bool",
                    "None",
                    "Callable",
                    "Dict[str,List[Dict]]",
                    "Dict[str,list[dict]]"
                ],
                "check_params": [
                    "bool",
                    "Dict[str,List[Dict]]",
                    "Callable"
                ]
            }
        },
        "multi_nyquist_axes": {
            "name": "multi_nyquist_axes",
            "location": 257,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "settings": [
                    "str",
                    "bool",
                    "List[str]",
                    "pathlib.Path",
                    "Iterable[T]"
                ]
            }
        },
        "multi_nyquist_title": {
            "name": "multi_nyquist_title",
            "location": 269,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fig": [
                    "str",
                    "matplotlib.figure.Figure",
                    "Type[numpy.number]"
                ],
                "params": [
                    "Tuple[str]",
                    "str"
                ],
                "settings": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "multi_nyquist_add_data": {
            "name": "multi_nyquist_add_data",
            "location": 281,
            "return": [
                "Callable",
                "str",
                "Dict[int,dict[int,Any]]",
                "bytes",
                "int"
            ],
            "arguments": {
                "fig": [
                    "Callable",
                    "Dict[int,Dict[int,Any]]",
                    "Dict[int,dict[int,Any]]"
                ],
                "imped_imag": [
                    "int",
                    "str",
                    "bytearray",
                    "Dict",
                    "numpy.ndarray",
                    "bool"
                ],
                "imped_real": [
                    "int",
                    "str",
                    "bytearray",
                    "Dict",
                    "numpy.ndarray",
                    "bool"
                ],
                "params": [
                    "str",
                    "Callable",
                    "Iterable[str]",
                    "Union[Sequence[str],Sequence[int]]",
                    "Sequence[str]",
                    "Sequence[int]"
                ]
            }
        },
        "multi_nyquist_plot_save": {
            "name": "multi_nyquist_plot_save",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "fig": [
                    "int",
                    "List[str]",
                    "float",
                    "str",
                    "bool",
                    "pathlib.Path"
                ],
                "params": [
                    "Dict",
                    "str",
                    "None",
                    "pathlib.Path",
                    "numpy.ndarray",
                    "Optional[str]"
                ],
                "output_dir": [
                    "Text",
                    "pathlib.Path",
                    "bool",
                    "cerulean.Path",
                    "Optional[str]",
                    "Iterable[str]",
                    "str"
                ],
                "set_colors": [
                    "Text",
                    "pathlib.Path",
                    "str"
                ],
                "settings": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "List",
                    "Optional[List]",
                    "Union[str,pathlib.Path]"
                ]
            }
        }
    },
    "dmlmung-master/src/data/__init__.py": {},
    "dmlmung-master/src/data/after2Vhold/mung.py": {
        "open_file_numpy": {
            "name": "open_file_numpy",
            "location": 16,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "data_dir": [
                    "str",
                    "pathlib.Path"
                ],
                "filename": [
                    "str",
                    "pathlib.Path",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "get_voltage": {
            "name": "get_voltage",
            "location": 34,
            "return": [
                "Optional[int]",
                "bool",
                "str",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "dict",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "data_dir": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]"
                ],
                "filename": [
                    "str",
                    "int"
                ]
            }
        },
        "get_data_numpy": {
            "name": "get_data_numpy",
            "location": 53,
            "return": [
                "dict",
                "Dict[str, str]",
                "Dict[str, List[int]]",
                "bytes",
                "pathlib.Path"
            ],
            "arguments": {
                "data_array": [
                    "numpy.ndarray",
                    "dict",
                    "bytes",
                    "Iterator[Tuple[str, str]]"
                ]
            }
        },
        "get_params": {
            "name": "get_params",
            "location": 91,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "data_dir": [
                    "str"
                ],
                "filename": [
                    "str",
                    "Optional[str]",
                    "pathlib.Path",
                    "bytes"
                ]
            }
        },
        "write_imp_data": {
            "name": "write_imp_data",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "pathlib.Path",
                    "numpy.ndarray",
                    "IO[str]"
                ],
                "params": [
                    "str",
                    "dict"
                ],
                "output_dir": [
                    "pathlib.Path",
                    "bytes"
                ]
            }
        },
        "write_zview_data": {
            "name": "write_zview_data",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "pathlib.Path",
                    "numpy.ndarray",
                    "IO[str]"
                ],
                "params": [
                    "str",
                    "dict"
                ],
                "output_dir": [
                    "pathlib.Path",
                    "bytes"
                ]
            }
        },
        "fourier_smooth": {
            "name": "fourier_smooth",
            "location": 194,
            "return": [
                "bool",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "x_var": [
                    "bool",
                    "int",
                    "numpy.ndarray"
                ],
                "y_var": [
                    "numpy.ndarray",
                    "int",
                    "List[numpy.ndarray]",
                    "dict",
                    "List[int]"
                ]
            }
        },
        "open_mung_save": {
            "name": "open_mung_save",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "data_dir": [
                    "pathlib.Path",
                    "str",
                    "Optional[str]",
                    "Sequence[str]"
                ],
                "filename": [
                    "pathlib.Path",
                    "str",
                    "bool"
                ],
                "output_dir": [
                    "str",
                    "pathlib.Path",
                    "bool"
                ],
                "settings": [
                    "bytes",
                    "Union[pathlib.Path, str]",
                    "Optional[\"Source\"]",
                    "Union[pathlib3x.Path, IO[str]]"
                ]
            }
        }
    },
    "dmlmung-master/src/data/after2Vhold/my_types.py": {},
    "dmlmung-master/src/data/after2Vhold/nogui.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dmlmung-master/src/data/after2Vhold/plot.py": {
        "get_json_settings": {
            "name": "get_json_settings",
            "location": 17,
            "return": [
                "Dict",
                "str",
                "bool"
            ],
            "arguments": {
                "json_file": [
                    "str",
                    "dml_thread.types.pathType",
                    "List[str]",
                    "TextIO"
                ]
            }
        },
        "save_json_settings": {
            "name": "save_json_settings",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "json_file": [
                    "str",
                    "dml_thread.types.pathType",
                    "List[str]",
                    "pathlib.Path",
                    "IO",
                    "IO[bytes]"
                ],
                "setting_dict": [
                    "str",
                    "int",
                    "Dict",
                    "bool"
                ]
            }
        },
        "make_cv_plot": {
            "name": "make_cv_plot",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "x_var": [
                    "float",
                    "numpy.ndarray",
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "y_var": [
                    "float",
                    "numpy.ndarray",
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "params": [
                    "Tuple[str]",
                    "bool"
                ],
                "output_dir": [
                    "str",
                    "None",
                    "Optional[pathlib.Path]",
                    "Union[int,str]",
                    "int"
                ],
                "settings": [
                    "str",
                    "None"
                ]
            }
        },
        "make_nyquist_plot": {
            "name": "make_nyquist_plot",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "imped_imag": [
                    "str",
                    "bool",
                    "numpy.ndarray",
                    "int"
                ],
                "imped_real": [
                    "str",
                    "bool",
                    "numpy.ndarray",
                    "int"
                ],
                "params": [
                    "str",
                    "numpy.ndarray",
                    "bool",
                    "int"
                ],
                "output_dir": [
                    "None",
                    "str",
                    "dml_thread.types.pathType",
                    "pathlib.Path",
                    "cerulean.Path",
                    "Optional[str]",
                    "Union[os.PathLike,str]"
                ],
                "settings": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "make_bode_plot": {
            "name": "make_bode_plot",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "freq_log": [
                    "memoryview",
                    "numpy.ndarray"
                ],
                "imped_log": [
                    "str",
                    "numpy.ndarray",
                    "Dict",
                    "bytes"
                ],
                "phase": [
                    "bytes",
                    "numpy.ndarray",
                    "float",
                    "Optional[float]",
                    "None",
                    "List[List[int]]",
                    "List[list[int]]"
                ],
                "params": [
                    "Tuple[str]",
                    "Tuple"
                ],
                "output_dir": [
                    "None",
                    "str",
                    "dml_thread.types.pathType",
                    "List[str]",
                    "bool",
                    "pathlib.Path"
                ],
                "settings": [
                    "str",
                    "bool",
                    "None",
                    "bytes"
                ]
            }
        },
        "multi_bode_axes": {
            "name": "multi_bode_axes",
            "location": 135,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "settings": [
                    "Callable",
                    "str",
                    "List[str]",
                    "pathlib.Path"
                ],
                "y_axes": [
                    "Text",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "multi_bode_title": {
            "name": "multi_bode_title",
            "location": 165,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fig": [
                    "AbstractSet[str]",
                    "Tuple[float, float]"
                ],
                "params": [
                    "bool",
                    "Tuple[str]"
                ],
                "settings": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "multi_bode_add_data": {
            "name": "multi_bode_add_data",
            "location": 178,
            "return": [
                "str",
                "bytes",
                "int",
                "List[dict[Any,str]]",
                "List[dict[str,Any]]",
                "float",
                "None",
                "List[list[Any]]",
                "List"
            ],
            "arguments": {
                "fig": [
                    "List[Dict[Any,str]]",
                    "List[dict[Any,str]]",
                    "float",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]",
                    "List",
                    "Union[int,float]",
                    "int",
                    "Optional[int]",
                    "None",
                    "List[List[Any]]",
                    "List[list[Any]]"
                ],
                "freq_log": [
                    "str",
                    "bytes",
                    "BinaryIO",
                    "TextIO",
                    "numpy.ndarray"
                ],
                "imped_log": [
                    "str",
                    "bytes",
                    "BinaryIO",
                    "TextIO",
                    "numpy.ndarray"
                ],
                "phase": [
                    "bool",
                    "Callable[[Callable],Callable[...,Any]]",
                    "Callable[Callable,Callable[...,Any]]"
                ],
                "params": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "multi_bode_plot_save": {
            "name": "multi_bode_plot_save",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "fig": [
                    "Dict[str,Any]",
                    "bool",
                    "pathlib.Path",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "params": [
                    "Dict",
                    "str",
                    "Dict[str,str]",
                    "numpy.ndarray",
                    "None",
                    "pathlib.Path",
                    "Optional[str]"
                ],
                "output_dir": [
                    "Text",
                    "str",
                    "pathlib.Path",
                    "BinaryIO",
                    "List[str]",
                    "Optional[str]"
                ],
                "settings": [
                    "bool",
                    "None",
                    "str",
                    "List[pathlib.Path]",
                    "Path",
                    "Union[str,bytes]",
                    "bytes"
                ]
            }
        },
        "multi_bode_plot": {
            "name": "multi_bode_plot",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "freq_log": [
                    "bool",
                    "Callable",
                    "Dict[str,List[Dict]]",
                    "Dict[str,list[dict]]"
                ],
                "imped_log": [
                    "bool",
                    "Callable",
                    "Dict[str,List[Dict]]",
                    "Dict[str,list[dict]]"
                ],
                "phase": [
                    "bool",
                    "Callable",
                    "Dict[str,List[Dict]]",
                    "Dict[str,list[dict]]"
                ],
                "params": [
                    "bool",
                    "Callable",
                    "Dict[str,List[Dict]]",
                    "Dict[str,list[dict]]"
                ],
                "output_dir": [
                    "bool",
                    "None",
                    "Callable",
                    "Dict[str,List[Dict]]",
                    "Dict[str,list[dict]]"
                ],
                "settings": [
                    "bool",
                    "None",
                    "Callable",
                    "Dict[str,List[Dict]]",
                    "Dict[str,list[dict]]"
                ],
                "check_params": [
                    "bool",
                    "Dict[str,List[Dict]]",
                    "Callable"
                ]
            }
        },
        "multi_nyquist_axes": {
            "name": "multi_nyquist_axes",
            "location": 231,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "settings": [
                    "str",
                    "List[str]",
                    "os.PathLike"
                ]
            }
        },
        "multi_nyquist_title": {
            "name": "multi_nyquist_title",
            "location": 243,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fig": [
                    "str",
                    "matplotlib.figure.Figure",
                    "Type[numpy.number]"
                ],
                "params": [
                    "Tuple[str]",
                    "str"
                ],
                "settings": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "multi_nyquist_add_data": {
            "name": "multi_nyquist_add_data",
            "location": 255,
            "return": [
                "str",
                "Callable",
                "int",
                "bytes",
                "Dict[int,dict[int,Any]]",
                "float"
            ],
            "arguments": {
                "fig": [
                    "Callable",
                    "int",
                    "Dict[int,Dict[int,Any]]",
                    "float",
                    "Dict[int,dict[int,Any]]"
                ],
                "imped_imag": [
                    "int",
                    "str",
                    "bytearray",
                    "Dict",
                    "numpy.ndarray",
                    "bool"
                ],
                "imped_real": [
                    "int",
                    "str",
                    "bytearray",
                    "Dict",
                    "numpy.ndarray",
                    "bool"
                ],
                "params": [
                    "str",
                    "Callable",
                    "Iterable[str]",
                    "Union[Sequence[str],Sequence[int]]",
                    "Sequence[str]",
                    "Sequence[int]"
                ]
            }
        },
        "multi_nyquist_plot_save": {
            "name": "multi_nyquist_plot_save",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "fig": [
                    "bool",
                    "str",
                    "List[str]",
                    "None",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "params": [
                    "Dict",
                    "str",
                    "Dict[str,str]",
                    "numpy.ndarray",
                    "None",
                    "pathlib.Path",
                    "Optional[str]"
                ],
                "output_dir": [
                    "Text",
                    "str",
                    "pathlib.Path",
                    "BinaryIO",
                    "List[str]",
                    "Optional[str]"
                ],
                "settings": [
                    "bool",
                    "None",
                    "str",
                    "List[pathlib.Path]",
                    "Path",
                    "Union[str,bytes]",
                    "bytes"
                ]
            }
        }
    },
    "dmlmung-master/src/data/after2Vhold/__init__.py": {},
    "dmlmung-master/src/dmltk/dmlnote.py": {
        "dmlNotebook.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "master": [
                    "str",
                    "int",
                    "None",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "Text"
                ]
            }
        },
        "dmlNotebook._create_widgets": {
            "name": "_create_widgets",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "dmlNotebook._create_notebook_panel": {
            "name": "_create_notebook_panel",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "dmlNotebook._create_home_tab": {
            "name": "_create_home_tab",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nb": [
                    "tkinter.ttk.Notebook"
                ]
            }
        },
        "dmlNotebook._create_file_tab": {
            "name": "_create_file_tab",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nb": [
                    "tkinter.ttk.Notebook"
                ]
            }
        },
        "dmlNotebook._create_batch_tab": {
            "name": "_create_batch_tab",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nb": [
                    "tkinter.ttk.Notebook"
                ]
            }
        },
        "dmlNotebook._create_settings_tab": {
            "name": "_create_settings_tab",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nb": [
                    "str"
                ]
            }
        },
        "dmlNotebook._create_misc_tab": {
            "name": "_create_misc_tab",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nb": [
                    "tkinter.ttk.Notebook"
                ]
            }
        },
        "dmlNotebook._create_disabled_tab": {
            "name": "_create_disabled_tab",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nb": [
                    "tkinter.ttk.Notebook"
                ]
            }
        },
        "dmlNotebook._create_text_tab": {
            "name": "_create_text_tab",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nb": [
                    "bytes",
                    "tkinter.ttk.Notebook",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "dmlmung-master/src/dmltk/mpl.py": {
        "Application.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "master": [
                    "str",
                    "None",
                    "bool",
                    "Union[str,dict]",
                    "Dict"
                ]
            }
        },
        "Application.createWidgets": {
            "name": "createWidgets",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.polar_plot": {
            "name": "polar_plot",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "canvas": [
                    "int",
                    "Callable",
                    "str"
                ],
                "ax": [
                    "matplotlib.figure.Figure",
                    "numpy.ndarray",
                    "str",
                    "int"
                ]
            }
        }
    },
    "dmlmung-master/src/dmltk/panels.py": {
        "MsgPanel.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "master": [
                    "str",
                    "bool",
                    "Union[str,dict]",
                    "Dict"
                ],
                "msgtxt": [
                    "str",
                    "List[list[str]]",
                    "List[str]",
                    "Sequence",
                    "List[List[str]]",
                    "int"
                ]
            }
        },
        "SeeDismissPanel.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "master": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "CodeDialog.body": {
            "name": "body",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "master": [
                    "str",
                    "int"
                ]
            }
        },
        "CodeDialog.buttonbox": {
            "name": "buttonbox",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmlmung-master/src/dmltk/tknote.py": {
        "Notebook.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "isapp": [
                    "bool",
                    "int",
                    "str"
                ],
                "master": [
                    "Optional[str]",
                    "str",
                    "None",
                    "bool",
                    "Callable",
                    "Optional[Any]",
                    "Any",
                    "Optional[bytes]",
                    "bytes"
                ],
                "name": [
                    "Text",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Notebook._create_widgets": {
            "name": "_create_widgets",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notebook._create_demo_panel": {
            "name": "_create_demo_panel",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notebook._create_descrip_tab": {
            "name": "_create_descrip_tab",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nb": [
                    "str",
                    "Type",
                    "Dict[str,Any]",
                    "Type[T]"
                ]
            }
        },
        "Notebook._say_neat": {
            "name": "_say_neat",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "str"
                ]
            }
        },
        "Notebook._create_disabled_tab": {
            "name": "_create_disabled_tab",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nb": [
                    "tkinter.ttk.Notebook"
                ]
            }
        },
        "Notebook._create_text_tab": {
            "name": "_create_text_tab",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nb": [
                    "bytes",
                    "tkinter.ttk.Notebook",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "dmlmung-master/src/dmltk/__init__.py": {},
    "dmlmung-master/src/dml_thread/gui.py": {
        "batch_num_files": {
            "name": "batch_num_files",
            "location": 33,
            "return": [
                "int",
                "AbstractSet[str]",
                "Optional[int]",
                "Callable[[str],str]"
            ],
            "arguments": {
                "data_dir": [
                    "Sequence[tuple[Union[str,int]]]",
                    "dml_thread.my_types.pathType",
                    "bytes",
                    "float",
                    "str",
                    "Sequence[Tuple[str,int]]"
                ]
            }
        },
        "thread_open_mung_save": {
            "name": "thread_open_mung_save",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "data_dir": [
                    "str",
                    "bool"
                ],
                "output_dir": [
                    "str",
                    "None",
                    "Tuple[int,int]",
                    "Optional[str]",
                    "Tuple[Union[int,int]]"
                ],
                "settings": [
                    "bool",
                    "None",
                    "str",
                    "Optional[str]",
                    "List"
                ]
            }
        },
        "Application.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "master": [
                    "None",
                    "Optional[float]",
                    "str",
                    "float",
                    "int",
                    "tkinter.Tk",
                    "Optional[int]"
                ]
            }
        },
        "Application._create_widgets": {
            "name": "_create_widgets",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application._create_notebook_panel": {
            "name": "_create_notebook_panel",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application._create_home_tab": {
            "name": "_create_home_tab",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nb": [
                    "tkinter.ttk.Notebook"
                ]
            }
        },
        "Application._create_file_tab": {
            "name": "_create_file_tab",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nb": [
                    "tkinter.ttk.Notebook"
                ]
            }
        },
        "Application.go_batch": {
            "name": "go_batch",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_files": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Optional[IO[bytes]]",
                    "int",
                    "IO",
                    "Optional[TextIO]",
                    "TextIO"
                ]
            }
        },
        "Application._create_batch_tab": {
            "name": "_create_batch_tab",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nb": [
                    "tkinter.ttk.Notebook"
                ]
            }
        },
        "Application.print_settings": {
            "name": "print_settings",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.summon_colorpick": {
            "name": "summon_colorpick",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application._create_settings_tab": {
            "name": "_create_settings_tab",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nb": [
                    "str"
                ]
            }
        },
        "Application._create_misc_tab": {
            "name": "_create_misc_tab",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nb": [
                    "tkinter.ttk.Notebook"
                ]
            }
        },
        "Application._create_disabled_tab": {
            "name": "_create_disabled_tab",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nb": [
                    "tkinter.ttk.Notebook"
                ]
            }
        },
        "Application._create_text_tab": {
            "name": "_create_text_tab",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nb": [
                    "bytes",
                    "tkinter.ttk.Notebook",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Application.print_somecython": {
            "name": "print_somecython",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Application.get_datapath": {
            "name": "get_datapath",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.get_outputpath": {
            "name": "get_outputpath",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.load_enter": {
            "name": "load_enter",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Dict"
                ]
            }
        },
        "Application.get_settingsfile": {
            "name": "get_settingsfile",
            "location": 384,
            "return": [
                "str",
                "Tuple",
                "Iterable[str]",
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.populate_settingspath": {
            "name": "populate_settingspath",
            "location": 394,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "tkinter.Entry",
                    "str",
                    "int"
                ]
            }
        },
        "Application.load_settings": {
            "name": "load_settings",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.update_settings": {
            "name": "update_settings",
            "location": 417,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Dict",
                    "List",
                    "Callable"
                ]
            }
        },
        "Application.set_settingsfile": {
            "name": "set_settingsfile",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.reset_defaultsettingsfile": {
            "name": "reset_defaultsettingsfile",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmlmung-master/src/dml_thread/log.py": {},
    "dmlmung-master/src/dml_thread/mung.py": {
        "open_file_numpy": {
            "name": "open_file_numpy",
            "location": 15,
            "return": [
                "None",
                "str",
                "bool"
            ],
            "arguments": {
                "data_dir": [
                    "str",
                    "bool",
                    "bytes",
                    "Optional[int]"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "get_data_numpy": {
            "name": "get_data_numpy",
            "location": 31,
            "return": [
                "None",
                "Dict",
                "Tuple[Optional[list[str]]]",
                "Dict[str,str]",
                "Dict[str,List[int]]",
                "bytes"
            ],
            "arguments": {
                "data_array": [
                    "List[list[str]]",
                    "Dict[str,Any]",
                    "List[List[str]]",
                    "int"
                ]
            }
        },
        "get_params": {
            "name": "get_params",
            "location": 68,
            "return": [
                "Tuple[Text]",
                "str",
                "bool"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "write_imp_data": {
            "name": "write_imp_data",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "numpy.ndarray",
                    "IO[str]"
                ],
                "params": [
                    "Dict",
                    "str",
                    "bytes",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "None"
                ],
                "output_dir": [
                    "str",
                    "None",
                    "List[str]",
                    "bool",
                    "IO[Any]",
                    "IO"
                ]
            }
        },
        "write_zview_data": {
            "name": "write_zview_data",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "numpy.ndarray",
                    "IO[str]"
                ],
                "params": [
                    "Dict",
                    "str",
                    "bytes",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "None"
                ],
                "output_dir": [
                    "str",
                    "None",
                    "List[str]",
                    "bool",
                    "IO[Any]",
                    "IO"
                ]
            }
        },
        "fourier_smooth": {
            "name": "fourier_smooth",
            "location": 151,
            "return": [
                "Tuple[Union[bool,dict[str,Union[Any,Any]]]]",
                "bool",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "x_var": [
                    "bool",
                    "int",
                    "numpy.ndarray"
                ],
                "y_var": [
                    "numpy.ndarray",
                    "int",
                    "List[numpy.ndarray]",
                    "dict",
                    "List[int]"
                ]
            }
        },
        "open_mung_save": {
            "name": "open_mung_save",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "data_dir": [
                    "str",
                    "Sequence[str]",
                    "Optional[str]",
                    "None"
                ],
                "filename": [
                    "str",
                    "bool"
                ],
                "output_dir": [
                    "str",
                    "bool",
                    "None"
                ],
                "settings": [
                    "bytes",
                    "None",
                    "Optional[Source]"
                ]
            }
        }
    },
    "dmlmung-master/src/dml_thread/my_types.py": {},
    "dmlmung-master/src/dml_thread/nogui.py": {},
    "dmlmung-master/src/dml_thread/plot.py": {
        "get_json_settings": {
            "name": "get_json_settings",
            "location": 16,
            "return": [
                "str",
                "bool",
                "Dict",
                "Dict[str,Union[Any,Any,Any,Any,Any,Any,Any,Any]]",
                "Tuple",
                "Dict[str,Type]",
                "float"
            ],
            "arguments": {
                "json_file": [
                    "str",
                    "dml_thread.types.pathType",
                    "List[str]",
                    "TextIO"
                ]
            }
        },
        "save_json_settings": {
            "name": "save_json_settings",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "json_file": [
                    "str",
                    "dml_thread.types.pathType",
                    "List[str]",
                    "IO",
                    "IO[bytes]"
                ],
                "setting_dict": [
                    "str",
                    "int",
                    "Dict",
                    "bool"
                ]
            }
        },
        "make_cv_plot": {
            "name": "make_cv_plot",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "x_var": [
                    "float",
                    "numpy.ndarray",
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "y_var": [
                    "float",
                    "numpy.ndarray",
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "params": [
                    "Tuple[str]",
                    "bool"
                ],
                "output_dir": [
                    "str",
                    "None",
                    "Union[int,str]",
                    "int"
                ],
                "settings": [
                    "dml_thread.types.simpDict",
                    "str",
                    "None"
                ]
            }
        },
        "make_nyquist_plot": {
            "name": "make_nyquist_plot",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "imped_imag": [
                    "str",
                    "bool",
                    "numpy.ndarray",
                    "int"
                ],
                "imped_real": [
                    "str",
                    "bool",
                    "numpy.ndarray",
                    "int"
                ],
                "params": [
                    "str",
                    "numpy.ndarray",
                    "bool",
                    "int"
                ],
                "output_dir": [
                    "None",
                    "str",
                    "dml_thread.types.pathType",
                    "Optional[str]",
                    "Union[os.PathLike,str]"
                ],
                "settings": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "make_bode_plot": {
            "name": "make_bode_plot",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "freq_log": [
                    "memoryview",
                    "numpy.ndarray"
                ],
                "imped_log": [
                    "str",
                    "numpy.ndarray",
                    "Dict",
                    "bytes"
                ],
                "phase": [
                    "bytes",
                    "numpy.ndarray",
                    "float",
                    "Optional[float]",
                    "None",
                    "List[List[int]]",
                    "List[list[int]]"
                ],
                "params": [
                    "Tuple[str]",
                    "Tuple"
                ],
                "output_dir": [
                    "dml_thread.types.pathType",
                    "str",
                    "None",
                    "List[str]",
                    "bool"
                ],
                "settings": [
                    "str",
                    "bool",
                    "None",
                    "bytes"
                ]
            }
        },
        "multi_bode_axes": {
            "name": "multi_bode_axes",
            "location": 134,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "settings": [
                    "bytes",
                    "bool",
                    "Callable"
                ]
            }
        },
        "multi_bode_title": {
            "name": "multi_bode_title",
            "location": 154,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "figaxes": [
                    "str",
                    "int",
                    "Callable"
                ],
                "params": [
                    "Tuple[str]",
                    "str"
                ],
                "settings": [
                    "Dict",
                    "bool",
                    "Optional[Exception]",
                    "Exception",
                    "None"
                ]
            }
        },
        "multi_bode_add_data": {
            "name": "multi_bode_add_data",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "figaxes": [
                    "bool",
                    "Tuple[Union[int,int]]",
                    "Union[int,Tuple[int,int]]",
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "List[tuple[Union[int,int]]]",
                    "Optional[bool]",
                    "List[Tuple[int,int]]"
                ],
                "freq_log": [
                    "str",
                    "numpy.ndarray",
                    "memoryview",
                    "bool"
                ],
                "imped_log": [
                    "bool",
                    "str",
                    "Units",
                    "float",
                    "numpy.ndarray",
                    "Union[int,float]"
                ],
                "phase": [
                    "int",
                    "List[int]",
                    "numpy.ndarray",
                    "bool"
                ],
                "params": [
                    "bool",
                    "str",
                    "List[Tuple]",
                    "List[tuple]"
                ]
            }
        },
        "multi_bode_plot_save": {
            "name": "multi_bode_plot_save",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "freq_log": [
                    "bool",
                    "List[str]",
                    "str",
                    "int",
                    "Union[str,os.PathLike]"
                ],
                "imped_log": [
                    "bool",
                    "List[str]",
                    "str",
                    "int",
                    "Union[str,os.PathLike]"
                ],
                "phase": [
                    "bool",
                    "List[str]",
                    "str",
                    "int",
                    "Union[str,os.PathLike]"
                ],
                "params": [
                    "Tuple[str]"
                ],
                "output_dir": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "settings": [
                    "bytes",
                    "None",
                    "bool",
                    "Optional[str]",
                    "str",
                    "int",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]",
                    "Dict[str,Dict[str,str]]",
                    "Dict[str,dict[str,str]]"
                ]
            }
        }
    },
    "dmlmung-master/src/dml_thread/test.py": {
        "testapp.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "master": [
                    "None",
                    "Optional[float]",
                    "str",
                    "float",
                    "int",
                    "tkinter.Tk",
                    "Optional[int]"
                ]
            }
        },
        "testapp.create_widgets": {
            "name": "create_widgets",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "testapp.color": {
            "name": "color",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmlmung-master/src/dml_thread/__init__.py": {},
    "dmlmung-master/src/dml_thread/pyx files/log.py": {},
    "dmlmung-master/src/dml_thread/pyx files/setup.py": {},
    "dmlmung-master/src/dml_thread/pyx files/somecython.py": {
        "somemath": {
            "name": "somemath",
            "location": 5,
            "return": [
                "int",
                "float",
                "str",
                "Callable",
                "Sequence[int]"
            ],
            "arguments": {
                "number": [
                    "str",
                    "float",
                    "bool",
                    "Sequence[int]",
                    "cython.int",
                    "int"
                ]
            }
        }
    },
    "dmlmung-master/src/tkcolorpicker/functions.py": {
        "rgb_to_hsv": {
            "name": "rgb_to_hsv",
            "location": 49,
            "return": [
                "Tuple",
                "str",
                "Iterable[int]",
                "int"
            ],
            "arguments": {
                "r": [
                    "int"
                ],
                "g": [
                    "int"
                ],
                "b": [
                    "int"
                ]
            }
        },
        "hsv_to_rgb": {
            "name": "hsv_to_rgb",
            "location": 55,
            "return": [
                "Tuple",
                "List[int]",
                "int",
                "List[dict]"
            ],
            "arguments": {
                "h": [
                    "int"
                ],
                "s": [
                    "int"
                ],
                "v": [
                    "int"
                ]
            }
        },
        "rgb_to_hexa": {
            "name": "rgb_to_hexa",
            "location": 61,
            "return": [
                "str",
                "int",
                "List[int]"
            ],
            "arguments": {}
        },
        "hexa_to_rgb": {
            "name": "hexa_to_rgb",
            "location": 71,
            "return": [
                "Tuple[int]",
                "str",
                "bytearray"
            ],
            "arguments": {
                "color": [
                    "str",
                    "int",
                    "bytes",
                    "List[str]",
                    "list",
                    "List[List[Any]]"
                ]
            }
        },
        "col2hue": {
            "name": "col2hue",
            "location": 84,
            "return": [
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "r": [
                    "int",
                    "float"
                ],
                "g": [
                    "int",
                    "float"
                ],
                "b": [
                    "int",
                    "float"
                ]
            }
        },
        "hue2col": {
            "name": "hue2col",
            "location": 89,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "h": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "create_checkered_image": {
            "name": "create_checkered_image",
            "location": 98,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "width": [
                    "int",
                    "float"
                ],
                "height": [
                    "int",
                    "Union[int,float]",
                    "float"
                ],
                "c1": [
                    "Tuple[int]",
                    "int",
                    "float",
                    "str",
                    "Mapping"
                ],
                "c2": [
                    "Tuple[int]",
                    "int",
                    "float",
                    "bool"
                ],
                "s": [
                    "int",
                    "float"
                ]
            }
        },
        "overlay": {
            "name": "overlay",
            "location": 121,
            "return": [
                "str",
                "int",
                "Tuple[Tuple[int, Any]]",
                "tuple"
            ],
            "arguments": {
                "image": [
                    "float",
                    "int",
                    "bytes"
                ],
                "color": [
                    "int",
                    "float"
                ]
            }
        },
        "round2": {
            "name": "round2",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "nb": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "dmlmung-master/src_WA/WA.py": {
        "calc_water_saturation_pressure": {
            "name": "calc_water_saturation_pressure",
            "location": 27,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "temp": [
                    "int",
                    "Tuple[str]",
                    "Optional[int]",
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "water_added_to_pp": {
            "name": "water_added_to_pp",
            "location": 37,
            "return": [
                "float",
                "numpy.ndarray",
                "str",
                "Tuple[int]"
            ],
            "arguments": {
                "water_added": [
                    "str",
                    "int",
                    "Sequence[int]",
                    "AsyncIterator[T]",
                    "collections.abc.AsyncIterator"
                ],
                "vessel_volume": [
                    "int",
                    "str",
                    "Sequence[int]",
                    "AsyncIterator[T]"
                ],
                "temp": [
                    "int",
                    "str",
                    "Sequence[int]",
                    "AsyncIterator[T]"
                ]
            }
        },
        "freq_change_to_WA": {
            "name": "freq_change_to_WA",
            "location": 54,
            "return": [
                "float",
                "int",
                "Union[bool,None]",
                "str"
            ],
            "arguments": {
                "freq": [
                    "Dict[str,Any]",
                    "int",
                    "Optional[Collection[int]]",
                    "float",
                    "Collection",
                    "None"
                ],
                "mass_mat": [
                    "int",
                    "float",
                    "Dict[str,Any]",
                    "Optional[Collection[int]]"
                ],
                "F0": [
                    "int",
                    "float"
                ],
                "elec_area": [
                    "float",
                    "Dict[str,Any]",
                    "Optional[Collection[int]]",
                    "int"
                ]
            }
        },
        "predict_y": {
            "name": "predict_y",
            "location": 71,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "numpy.ndarray",
                    "bool"
                ],
                "m": [
                    "int",
                    "str",
                    "numpy.array"
                ],
                "k": [
                    "int",
                    "str",
                    "numpy.array"
                ],
                "n": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "Mapping[str,float]"
                ],
                "j": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "Mapping[str,float]"
                ]
            }
        },
        "predict_y_maxed_humidity": {
            "name": "predict_y_maxed_humidity",
            "location": 82,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "T",
                    "str"
                ],
                "m": [
                    "Union[numpy.ndarray, pandas.DataFrame]",
                    "numpy.ndarray"
                ],
                "k": [
                    "Union[numpy.ndarray, pandas.DataFrame]",
                    "numpy.ndarray"
                ],
                "j": [
                    "int",
                    "float",
                    "Union[int,float]",
                    "numpy.ndarray"
                ]
            }
        },
        "convert_params": {
            "name": "convert_params",
            "location": 119,
            "return": [
                "ParamsNTup",
                "str",
                "List[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "v": [
                    "str",
                    "Sequence[Sequence[Any]]",
                    "Type[T]",
                    "numpy.dtype",
                    "Optional[Sequence[T]]",
                    "tuple"
                ]
            }
        },
        "get_params": {
            "name": "get_params",
            "location": 194,
            "return": [
                "WaterAbsFitParams",
                "str",
                "bool"
            ],
            "arguments": {
                "x_data": [
                    "int",
                    "numpy.ndarray",
                    "bytes",
                    "float"
                ],
                "y_data": [
                    "int",
                    "numpy.ndarray",
                    "bytes",
                    "float"
                ],
                "init_params": [
                    "int",
                    "bytes",
                    "None",
                    "Optional[Union[numpy.ndarray,numpy.void]]",
                    "bool",
                    "numpy.array"
                ],
                "fix_n": [
                    "bool",
                    "int",
                    "Callable[,None]"
                ]
            }
        },
        "wabs_plot": {
            "name": "wabs_plot",
            "location": 228,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "title": [
                    "Text",
                    "bool",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "plot_line": {
            "name": "plot_line",
            "location": 239,
            "return": [
                "Tuple[Union[float,bool,None,dict]]",
                "str",
                "int",
                "Set"
            ],
            "arguments": {
                "x_data": [
                    "List[str]",
                    "Tuple[Union[int,int]]",
                    "int",
                    "numpy.ndarray",
                    "bool",
                    "Tuple[int,int]"
                ],
                "y_data": [
                    "List[str]",
                    "Tuple[Union[int,int]]",
                    "int",
                    "numpy.ndarray",
                    "bool",
                    "Tuple[int,int]"
                ],
                "fig": [
                    "float",
                    "bool",
                    "matplotlib.figure.Figure",
                    "None",
                    "Dict",
                    "Optional[int]",
                    "numpy.random.RandomState",
                    "int"
                ],
                "ax": [
                    "matplotlib.axes.Axes",
                    "str",
                    "int",
                    "bool",
                    "float"
                ],
                "legend": [
                    "Text",
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "plot_multi": {
            "name": "plot_multi",
            "location": 313,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input": [
                    "bool"
                ],
                "equation": [
                    "bool",
                    "int"
                ],
                "fix_n": [
                    "bool",
                    "Dict",
                    "Dict[int,int]",
                    "Optional[ShippingInfo]"
                ],
                "vmax_line": [
                    "bool",
                    "Dict",
                    "Dict[int,int]",
                    "Optional[ShippingInfo]"
                ],
                "show": [
                    "bool",
                    "List[str]",
                    "bytes",
                    "float",
                    "Dict[str,List[str]]",
                    "str"
                ],
                "save": [
                    "bool",
                    "int"
                ],
                "save_path": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "file_name": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "trunc_data_for_bet": {
            "name": "trunc_data_for_bet",
            "location": 367,
            "return": [
                "Tuple[Union[int,str]]",
                "int",
                "str",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "x_data": [
                    "List",
                    "List[int]",
                    "float",
                    "scipy.sparse.coo_matrix",
                    "str",
                    "bool"
                ],
                "y_data": [
                    "Tuple[int]",
                    "List[str]",
                    "bool",
                    "str",
                    "slice",
                    "numpy.array",
                    "numpy.ndarray"
                ],
                "max_x": [
                    "float",
                    "scipy.sparse.coo_matrix",
                    "str",
                    "List",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "y_data_to_bet": {
            "name": "y_data_to_bet",
            "location": 377,
            "return": [
                "int",
                "str",
                "bytes",
                "pathlib.Path"
            ],
            "arguments": {
                "x_data": [
                    "bool",
                    "Dict",
                    "Optional[Exception]",
                    "Dict[str,Dict[str,float]]"
                ],
                "y_data": [
                    "str",
                    "T",
                    "bytes",
                    "List[str]",
                    "type"
                ],
                "mass": [
                    "str",
                    "T",
                    "bytes",
                    "List[str]",
                    "type"
                ],
                "temp": [
                    "List",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "get_bet_params": {
            "name": "get_bet_params",
            "location": 388,
            "return": [
                "Tuple",
                "str",
                "bool"
            ],
            "arguments": {
                "x_data": [
                    "int",
                    "bytes"
                ],
                "y_data": [
                    "int",
                    "bytes"
                ]
            }
        },
        "bet_plot": {
            "name": "bet_plot",
            "location": 404,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "title": [
                    "Text",
                    "bool",
                    "float",
                    "str",
                    "int"
                ],
                "y_max": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "plot_bet_line": {
            "name": "plot_bet_line",
            "location": 416,
            "return": [
                "Tuple[Union[int,list,str]]",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "x_data": [
                    "bytes",
                    "numpy.ndarray",
                    "int",
                    "Dict[str,Any]"
                ],
                "y_data": [
                    "bytes",
                    "numpy.ndarray",
                    "int",
                    "Dict[str,Any]"
                ],
                "fig": [
                    "int",
                    "List",
                    "str",
                    "bool"
                ],
                "ax": [
                    "bool",
                    "numpy.ndarray",
                    "Tuple[str, int]",
                    "dict",
                    "Optional[str]",
                    "List[List[str]]"
                ],
                "legend": [
                    "Text",
                    "str",
                    "bool",
                    "Tuple[str,int]",
                    "Dict"
                ]
            }
        },
        "plot_bet_multi": {
            "name": "plot_bet_multi",
            "location": 459,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input": [
                    "str",
                    "Dict",
                    "Any",
                    "Sequence[int]"
                ],
                "show": [
                    "bool",
                    "pathlib.Path",
                    "str",
                    "Dict[str,Any]",
                    "Dict",
                    "int"
                ],
                "save": [
                    "bool",
                    "str",
                    "int",
                    "List[str]"
                ],
                "save_path": [
                    "Text",
                    "str",
                    "pathlib.Path",
                    "cerulean.Path"
                ],
                "file_name": [
                    "str",
                    "pathlib.Path",
                    "cerulean.Path"
                ],
                "y_max": [
                    "float",
                    "str",
                    "int",
                    "Callable[...,bool]",
                    "pathlib.Path"
                ]
            }
        },
        "add_results_to_WA_dataset": {
            "name": "add_results_to_WA_dataset",
            "location": 500,
            "return": [
                "PlotInput",
                "Optional[int]",
                "Optional[str]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "input": [
                    "str",
                    "int",
                    "Dict",
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "table_bet_multi": {
            "name": "table_bet_multi",
            "location": 525,
            "return": [
                "None"
            ],
            "arguments": {
                "input": [
                    "int",
                    "Dict",
                    "str",
                    "bytes",
                    "bool"
                ],
                "save": [
                    "bool",
                    "str",
                    "int",
                    "Optional[Callable[[Any],None]]"
                ],
                "save_path": [
                    "Text",
                    "str",
                    "pathlib.Path"
                ],
                "file_name": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "WaterAbsFitParams.validate_params": {
            "name": "validate_params",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "bool",
                    "str",
                    "Optional",
                    "float",
                    "Callable[,T]",
                    "None",
                    "int",
                    "Optional[T]",
                    "T"
                ],
                "v": [
                    "int",
                    "float",
                    "tuple",
                    "numpy.ndarray"
                ]
            }
        },
        "WaterAbsFitParams.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterAbsFitParams.__len__": {
            "name": "__len__",
            "location": 168,
            "return": [
                "int",
                "Dict[str,Any]",
                "numpy.ndarray"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str,str]",
                    "Union[str,List[str]]",
                    "List[str]"
                ]
            }
        },
        "WaterAbsFitParams.as_tuple": {
            "name": "as_tuple",
            "location": 172,
            "return": [
                "tuple",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterAbsFitParams.as_dict": {
            "name": "as_dict",
            "location": 178,
            "return": [
                "str",
                "Dict[str, bool]",
                "Exception",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterAbsFitParams.as_json": {
            "name": "as_json",
            "location": 184,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterAbsFitParams.params_dict": {
            "name": "params_dict",
            "location": 189,
            "return": [
                "ParamsTDict",
                "Dict[str,str]",
                "Dict",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WA_dataset.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmlmung-master/src_WA/WA_attrs.py": {
        "predict_y": {
            "name": "predict_y",
            "location": 25,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "numpy.ndarray",
                    "Mapping[str,float]",
                    "str"
                ],
                "m": [
                    "int",
                    "str",
                    "numpy.array"
                ],
                "k": [
                    "int",
                    "str",
                    "numpy.array"
                ],
                "n": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "j": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "predict_y_maxed_humidity": {
            "name": "predict_y_maxed_humidity",
            "location": 35,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "Mapping",
                    "float",
                    "Mapping[str,float]",
                    "str",
                    "int",
                    "T"
                ],
                "m": [
                    "Union[numpy.ndarray, pandas.DataFrame]",
                    "numpy.ndarray"
                ],
                "k": [
                    "Union[numpy.ndarray, pandas.DataFrame]",
                    "numpy.ndarray"
                ],
                "j": [
                    "int",
                    "float",
                    "str",
                    "Union[int,bool]"
                ]
            }
        },
        "convert_params": {
            "name": "convert_params",
            "location": 69,
            "return": [
                "ParamsNTup",
                "str",
                "List[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "v": [
                    "str",
                    "Sequence[Sequence[Any]]",
                    "Type[T]",
                    "numpy.dtype",
                    "Optional[Sequence[T]]",
                    "tuple"
                ]
            }
        },
        "get_params": {
            "name": "get_params",
            "location": 138,
            "return": [
                "WaterAbsFitParams",
                "str",
                "bool"
            ],
            "arguments": {
                "x_data": [
                    "int",
                    "numpy.ndarray",
                    "bytes",
                    "float"
                ],
                "y_data": [
                    "int",
                    "numpy.ndarray",
                    "bytes",
                    "float"
                ],
                "init_params": [
                    "WaterAbsFitParams",
                    "bool",
                    "float",
                    "int"
                ],
                "fix_n": [
                    "bool",
                    "int",
                    "Callable[,None]"
                ]
            }
        },
        "wabs_plot": {
            "name": "wabs_plot",
            "location": 168,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "title": [
                    "Text",
                    "bool",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "plot_line": {
            "name": "plot_line",
            "location": 179,
            "return": [
                "Tuple[Union[float,bool,None,dict]]",
                "str",
                "int",
                "Set"
            ],
            "arguments": {
                "x_data": [
                    "int",
                    "numpy.ndarray",
                    "List[float]",
                    "Tuple[Union[int,int]]",
                    "float",
                    "Union[int,Tuple[int,int]]"
                ],
                "y_data": [
                    "int",
                    "numpy.ndarray",
                    "List[float]",
                    "Tuple[Union[int,int]]",
                    "float",
                    "Union[int,Tuple[int,int]]"
                ],
                "fig": [
                    "float",
                    "bool",
                    "matplotlib.figure.Figure",
                    "None",
                    "Dict",
                    "Optional[int]",
                    "numpy.random.RandomState",
                    "int"
                ],
                "ax": [
                    "matplotlib.axes.Axes",
                    "str",
                    "int",
                    "bool",
                    "float"
                ],
                "legend": [
                    "Text",
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "plot_multi": {
            "name": "plot_multi",
            "location": 235,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input": [
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[Union[str,Any]]",
                    "Dict"
                ],
                "vmax_line": [
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "Sequence[str]",
                    "Dict"
                ],
                "fix_n": [
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "Sequence[str]",
                    "Dict"
                ],
                "show": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "save": [
                    "bool",
                    "List[str]",
                    "str",
                    "Optional[str]"
                ],
                "save_path": [
                    "Text",
                    "str",
                    "Union[str,pathlib.Path]",
                    "bool",
                    "Container[str]"
                ],
                "file_name": [
                    "bool",
                    "str",
                    "Union[str,pathlib.Path]",
                    "Container[str]"
                ]
            }
        },
        "WaterAbsFitParams.validate_params": {
            "name": "validate_params",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "bool",
                    "str",
                    "Optional",
                    "float",
                    "Callable[,T]",
                    "None",
                    "int",
                    "Optional[T]",
                    "T"
                ],
                "v": [
                    "str",
                    "int",
                    "Tuple[str, str]",
                    "numpy.ndarray",
                    "Union[str]"
                ]
            }
        },
        "WaterAbsFitParams.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterAbsFitParams.__len__": {
            "name": "__len__",
            "location": 110,
            "return": [
                "int",
                "Dict[str,Any]",
                "numpy.ndarray"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str,str]",
                    "Union[str,List[str]]",
                    "List[str]"
                ]
            }
        },
        "WaterAbsFitParams.as_tuple": {
            "name": "as_tuple",
            "location": 114,
            "return": [
                "tuple",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterAbsFitParams.as_dict": {
            "name": "as_dict",
            "location": 120,
            "return": [
                "str",
                "Dict[str, bool]",
                "Exception",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterAbsFitParams.as_json": {
            "name": "as_json",
            "location": 126,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterAbsFitParams.params_dict": {
            "name": "params_dict",
            "location": 132,
            "return": [
                "ParamsTDict",
                "str",
                "bool",
                "List[Dict]",
                "Mapping[str,Any]",
                "pathlib.Path",
                "Dict[int,Dict[str,Any]]",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmlmung-master/src_WA/WA_dataclass.py": {
        "predict_y": {
            "name": "predict_y",
            "location": 19,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "numpy.ndarray",
                    "Mapping[str,float]",
                    "str"
                ],
                "m": [
                    "int",
                    "str",
                    "numpy.array"
                ],
                "k": [
                    "int",
                    "str",
                    "numpy.array"
                ],
                "n": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "j": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "get_params": {
            "name": "get_params",
            "location": 116,
            "return": [
                "WaterAbsFitParams",
                "str",
                "bool"
            ],
            "arguments": {
                "x": [
                    "int",
                    "List[str]",
                    "numpy.ndarray",
                    "Union[pandas.Series,numpy.ndarray]"
                ],
                "y": [
                    "float",
                    "int",
                    "Sequence[str]",
                    "str",
                    "bool"
                ],
                "func": [
                    "bool",
                    "numpy.ndarray",
                    "str",
                    "int",
                    "Optional[Callable]",
                    "Optional[int]"
                ],
                "init_params": [
                    "WaterAbsFitParams",
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "WaterAbsFitParams.__post_init__": {
            "name": "__post_init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterAbsFitParams.convert_params": {
            "name": "convert_params",
            "location": 69,
            "return": [
                "ParamsNTup",
                "str",
                "List[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterAbsFitParams.validate_params": {
            "name": "validate_params",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterAbsFitParams.__len__": {
            "name": "__len__",
            "location": 98,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterAbsFitParams.as_tuple": {
            "name": "as_tuple",
            "location": 102,
            "return": [
                "tuple",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterAbsFitParams.as_dict": {
            "name": "as_dict",
            "location": 106,
            "return": [
                "Dict[str,Any]",
                "str",
                "Dict",
                "Dict[str,bool]",
                "int",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterAbsFitParams.params_dict": {
            "name": "params_dict",
            "location": 111,
            "return": [
                "ParamsTDict",
                "Dict[str,str]",
                "Dict",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmlmung-master/src_WA/WA_numba.py": {
        "water_added_to_pp": {
            "name": "water_added_to_pp",
            "location": 30,
            "return": [
                "float",
                "int",
                "numpy.ndarray",
                "str",
                "Dict",
                "List[int]",
                "Tuple[int]",
                "List[list[int]]"
            ],
            "arguments": {
                "water_added": [
                    "str",
                    "Tuple[Union[Any,...]]",
                    "Dict",
                    "Union[Type[Exception],Tuple[Any,...]]",
                    "T",
                    "bool",
                    "Callable"
                ],
                "vessel_volume": [
                    "int",
                    "str",
                    "Union[Type[Exception],Tuple[Any,...]]",
                    "T",
                    "bool",
                    "Callable",
                    "Dict"
                ]
            }
        },
        "freq_change_to_WA": {
            "name": "freq_change_to_WA",
            "location": 45,
            "return": [
                "int",
                "float",
                "str",
                "Dict",
                "Union[bool,None]",
                "List[int]",
                "List[list[int]]"
            ],
            "arguments": {
                "freq": [
                    "List[str]",
                    "Dict[str,float]",
                    "bool",
                    "float"
                ],
                "mass_mat": [
                    "bool",
                    "List[str]",
                    "float",
                    "Dict[str,float]"
                ],
                "F0": [
                    "bool",
                    "float",
                    "List[str]",
                    "Dict[str,float]"
                ],
                "elec_area": [
                    "float",
                    "bool",
                    "List[str]",
                    "Dict[str,float]"
                ]
            }
        },
        "predict_y": {
            "name": "predict_y",
            "location": 67,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "numpy.ndarray",
                    "bool"
                ],
                "m": [
                    "int",
                    "str",
                    "numpy.array"
                ],
                "k": [
                    "int",
                    "str",
                    "numpy.array"
                ],
                "n": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "Mapping[str,float]"
                ],
                "j": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "Mapping[str,float]"
                ]
            }
        },
        "predict_y_maxed_humidity": {
            "name": "predict_y_maxed_humidity",
            "location": 78,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "T",
                    "str"
                ],
                "m": [
                    "Union[numpy.ndarray, pandas.DataFrame]",
                    "numpy.ndarray"
                ],
                "k": [
                    "Union[numpy.ndarray, pandas.DataFrame]",
                    "numpy.ndarray"
                ],
                "j": [
                    "int",
                    "float",
                    "Union[int,float]",
                    "numpy.ndarray"
                ]
            }
        },
        "convert_params": {
            "name": "convert_params",
            "location": 114,
            "return": [
                "ParamsNTup",
                "str",
                "List[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "v": [
                    "str",
                    "Sequence[Sequence[Any]]",
                    "Type[T]",
                    "numpy.dtype",
                    "Optional[Sequence[T]]",
                    "tuple"
                ]
            }
        },
        "get_params": {
            "name": "get_params",
            "location": 190,
            "return": [
                "str",
                "bool",
                "int",
                "Dict",
                "List[int]",
                "List[list[int]]"
            ],
            "arguments": {
                "x_data": [
                    "bool",
                    "Callable[,None]",
                    "int"
                ],
                "y_data": [
                    "bool",
                    "Callable[,None]",
                    "int"
                ],
                "init_params": [
                    "bool",
                    "Callable[,None]",
                    "int"
                ],
                "fix_n": [
                    "bool",
                    "int",
                    "Callable[,None]"
                ]
            }
        },
        "wabs_plot": {
            "name": "wabs_plot",
            "location": 231,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "title": [
                    "Text",
                    "bool",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "plot_line": {
            "name": "plot_line",
            "location": 242,
            "return": [
                "Tuple[Union[float,bool,None,dict]]",
                "str",
                "int",
                "Set"
            ],
            "arguments": {
                "x_data": [
                    "List[str]",
                    "Tuple[Union[int,int]]",
                    "int",
                    "numpy.ndarray",
                    "bool",
                    "Tuple[int,int]"
                ],
                "y_data": [
                    "List[str]",
                    "Tuple[Union[int,int]]",
                    "int",
                    "numpy.ndarray",
                    "bool",
                    "Tuple[int,int]"
                ],
                "fig": [
                    "float",
                    "bool",
                    "matplotlib.figure.Figure",
                    "None",
                    "Dict",
                    "Optional[int]",
                    "numpy.random.RandomState",
                    "int"
                ],
                "ax": [
                    "matplotlib.axes.Axes",
                    "str",
                    "int",
                    "bool",
                    "float"
                ],
                "legend": [
                    "Text",
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "plot_multi": {
            "name": "plot_multi",
            "location": 310,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input": [
                    "bool"
                ],
                "equation": [
                    "bool",
                    "int"
                ],
                "fix_n": [
                    "bool",
                    "Dict",
                    "Dict[int,int]",
                    "Optional[ShippingInfo]"
                ],
                "vmax_line": [
                    "bool",
                    "Dict",
                    "Dict[int,int]",
                    "Optional[ShippingInfo]"
                ],
                "show": [
                    "bool",
                    "List[str]",
                    "bytes",
                    "float",
                    "Dict[str,List[str]]",
                    "str"
                ],
                "save": [
                    "bool",
                    "int"
                ],
                "save_path": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "file_name": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "water_added_to_pp.for_numba": {
            "name": "for_numba",
            "location": 37,
            "return": [],
            "arguments": {
                "wl": []
            }
        },
        "freq_change_to_WA.for_numba": {
            "name": "for_numba",
            "location": 57,
            "return": [],
            "arguments": {
                "ff": []
            }
        },
        "WaterAbsFitParams.validate_params": {
            "name": "validate_params",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "bool",
                    "str",
                    "Optional",
                    "float",
                    "Callable[,T]",
                    "None",
                    "int",
                    "Optional[T]",
                    "T"
                ],
                "v": [
                    "int",
                    "float",
                    "tuple",
                    "numpy.ndarray"
                ]
            }
        },
        "WaterAbsFitParams.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterAbsFitParams.__len__": {
            "name": "__len__",
            "location": 164,
            "return": [
                "int",
                "Dict[str,Any]",
                "numpy.ndarray"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str,str]",
                    "Union[str,List[str]]",
                    "List[str]"
                ]
            }
        },
        "WaterAbsFitParams.as_tuple": {
            "name": "as_tuple",
            "location": 168,
            "return": [
                "tuple",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterAbsFitParams.as_dict": {
            "name": "as_dict",
            "location": 174,
            "return": [
                "str",
                "Dict[str, bool]",
                "Exception",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterAbsFitParams.as_json": {
            "name": "as_json",
            "location": 180,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterAbsFitParams.params_dict": {
            "name": "params_dict",
            "location": 185,
            "return": [
                "ParamsTDict",
                "Dict[str,str]",
                "Dict",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "get_params.for_numba": {
            "name": "for_numba",
            "location": 203,
            "return": [],
            "arguments": {
                "x_data": [],
                "y_data": [],
                "init_pt": [],
                "fix_n": []
            }
        },
        "WA_dataset.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmlmung-master/src_WA/WA_pydantic.py": {
        "predict_y": {
            "name": "predict_y",
            "location": 19,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "numpy.ndarray",
                    "Mapping[str,float]",
                    "str"
                ],
                "m": [
                    "int",
                    "str",
                    "numpy.array"
                ],
                "k": [
                    "int",
                    "str",
                    "numpy.array"
                ],
                "n": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "j": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "get_params": {
            "name": "get_params",
            "location": 117,
            "return": [
                "WaterAbsFitParams",
                "str",
                "bool"
            ],
            "arguments": {
                "x": [
                    "int",
                    "List[str]",
                    "numpy.ndarray",
                    "Union[pandas.Series,numpy.ndarray]"
                ],
                "y": [
                    "float",
                    "int",
                    "Sequence[str]",
                    "str",
                    "bool"
                ],
                "func": [
                    "bool",
                    "numpy.ndarray",
                    "str",
                    "int",
                    "Optional[Callable]",
                    "Optional[int]"
                ],
                "init_params": [
                    "WaterAbsFitParams",
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "WaterAbsFitParams.validate_params": {
            "name": "validate_params",
            "location": 64,
            "return": [
                "str",
                "Optional[str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "WaterAbsFitParams.convert_params": {
            "name": "convert_params",
            "location": 78,
            "return": [
                "ParamsNTup",
                "str",
                "List[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "Sequence[Sequence[Any]]",
                    "Type[T]",
                    "str"
                ]
            }
        },
        "WaterAbsFitParams.__post_init_post_parse__": {
            "name": "__post_init_post_parse__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterAbsFitParams.__len__": {
            "name": "__len__",
            "location": 98,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterAbsFitParams.as_tuple": {
            "name": "as_tuple",
            "location": 102,
            "return": [
                "tuple",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterAbsFitParams.as_dict": {
            "name": "as_dict",
            "location": 106,
            "return": [
                "Dict[str,Any]",
                "str",
                "Dict",
                "Dict[str,bool]",
                "int",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterAbsFitParams.params_dict": {
            "name": "params_dict",
            "location": 111,
            "return": [
                "ParamsTDict",
                "str",
                "bool",
                "List[Dict]",
                "Mapping[str,Any]",
                "Dict[int,Dict[str,Any]]",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmlmung-master/src_WA/WA_pyfields.py": {
        "predict_y": {
            "name": "predict_y",
            "location": 16,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "numpy.ndarray",
                    "Mapping[str,float]",
                    "str"
                ],
                "m": [
                    "int",
                    "str",
                    "numpy.array"
                ],
                "k": [
                    "int",
                    "str",
                    "numpy.array"
                ],
                "n": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "j": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "get_params": {
            "name": "get_params",
            "location": 120,
            "return": [
                "WaterAbsFitParams",
                "str",
                "bool"
            ],
            "arguments": {
                "x": [
                    "int",
                    "List[str]",
                    "numpy.ndarray",
                    "Union[pandas.Series,numpy.ndarray]"
                ],
                "y": [
                    "float",
                    "int",
                    "Sequence[str]",
                    "str",
                    "bool"
                ],
                "func": [
                    "bool",
                    "numpy.ndarray",
                    "str",
                    "int",
                    "Optional[Callable]",
                    "Optional[int]"
                ],
                "init_params": [
                    "WaterAbsFitParams",
                    "numpy.ndarray",
                    "float",
                    "int"
                ]
            }
        },
        "WaterAbsFitParams.__post_init__": {
            "name": "__post_init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterAbsFitParams.convert_params": {
            "name": "convert_params",
            "location": 70,
            "return": [
                "ParamsNTup",
                "str",
                "List[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "Sequence[Sequence[Any]]",
                    "Type[T]",
                    "str"
                ]
            }
        },
        "WaterAbsFitParams.validate_params": {
            "name": "validate_params",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "numpy.ndarray",
                    "int",
                    "bool",
                    "tuple"
                ]
            }
        },
        "WaterAbsFitParams.__len__": {
            "name": "__len__",
            "location": 99,
            "return": [
                "int",
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str"
                ]
            }
        },
        "WaterAbsFitParams.as_tuple": {
            "name": "as_tuple",
            "location": 103,
            "return": [
                "tuple",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterAbsFitParams.as_dict": {
            "name": "as_dict",
            "location": 109,
            "return": [
                "str",
                "int",
                "Dict[str,bool]",
                "Dict[str,Any]",
                "Exception",
                "Dict[str,int]",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterAbsFitParams.params_dict": {
            "name": "params_dict",
            "location": 114,
            "return": [
                "ParamsTDict",
                "str",
                "bool",
                "List[Dict]",
                "Mapping[str,Any]",
                "Dict[int,Dict[str,Any]]",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmlmung-master/src_WA/WA_std.py": {
        "predict_y": {
            "name": "predict_y",
            "location": 17,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "numpy.ndarray",
                    "Mapping[str,float]",
                    "str"
                ],
                "m": [
                    "int",
                    "str",
                    "numpy.array"
                ],
                "k": [
                    "int",
                    "str",
                    "numpy.array"
                ],
                "n": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "j": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "get_params": {
            "name": "get_params",
            "location": 116,
            "return": [
                "WaterAbsFitParams",
                "str",
                "bool"
            ],
            "arguments": {
                "x": [
                    "int",
                    "List[str]",
                    "numpy.ndarray",
                    "Union[pandas.Series,numpy.ndarray]"
                ],
                "y": [
                    "float",
                    "int",
                    "Sequence[str]",
                    "str",
                    "bool"
                ],
                "func": [
                    "bool",
                    "numpy.ndarray",
                    "str",
                    "int",
                    "Optional[Callable]",
                    "Optional[int]"
                ],
                "init_params": [
                    "WaterAbsFitParams",
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "WaterAbsFitParams.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "Tuple[float]",
                    "bool",
                    "bytes",
                    "Dict[str,Any]",
                    "MutableMapping[str,Any]"
                ],
                "std_errs": [
                    "Tuple[int]",
                    "int",
                    "Dict[str,Any]",
                    "Union[str,int]",
                    "bool"
                ]
            }
        },
        "WaterAbsFitParams.convert_params": {
            "name": "convert_params",
            "location": 67,
            "return": [
                "ParamsNTup",
                "str",
                "List[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "Sequence[Sequence[Any]]",
                    "Type[T]",
                    "str"
                ]
            }
        },
        "WaterAbsFitParams.validate_params": {
            "name": "validate_params",
            "location": 82,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterAbsFitParams.__len__": {
            "name": "__len__",
            "location": 97,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterAbsFitParams.as_tuple": {
            "name": "as_tuple",
            "location": 101,
            "return": [
                "tuple",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterAbsFitParams.as_dict": {
            "name": "as_dict",
            "location": 106,
            "return": [
                "str",
                "Dict[str, bool]",
                "Exception",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterAbsFitParams.params_dict": {
            "name": "params_dict",
            "location": 111,
            "return": [
                "ParamsTDict",
                "Dict[str,str]",
                "Dict",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmlmung-master/src_WA/_ceria.py": {},
    "dmlmung-master/src_WA/_ceria_nitr.py": {},
    "dmlmung-master/src_WA/_nitrates.py": {},
    "dmlmung-master/src_WA/_oxalates.py": {},
    "dmlmung-master/src_WA/_thoria.py": {},
    "dmlmung-master/src_WA/_urania.py": {},
    "dmlmung-master/src_WA/__init__.py": {},
    "dmlmung-master/tests/test_WA.py": {
        "inc": {
            "name": "inc",
            "location": 4,
            "return": [
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "List",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_answer": {
            "name": "test_answer",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_water_added_to_pp": {
            "name": "test_water_added_to_pp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
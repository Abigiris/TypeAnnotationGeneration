{
    "dmlvis-master/dev.py": {},
    "dmlvis-master/__init__.py": {},
    "dmlvis-master/src/adjust_gamma.py": {
        "adjust_gamma": {
            "name": "adjust_gamma",
            "location": 8,
            "return": [
                "List[int]",
                "numpy.ndarray",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "image": [
                    "int",
                    "BinaryIO",
                    "numpy.ndarray"
                ],
                "gamma": [
                    "float",
                    "str",
                    "numpy.ndarray",
                    "int"
                ]
            }
        }
    },
    "dmlvis-master/src/center_of_shape.py": {},
    "dmlvis-master/src/detect_color.py": {
        "get_image_color_all": {
            "name": "get_image_color_all",
            "location": 64,
            "return": [
                "Set[Tuple[(int, int, int)]]"
            ],
            "arguments": {
                "image": [
                    "bytes",
                    "Callable",
                    "List[OrderedDict]"
                ],
                "number": [
                    "int",
                    "Tuple[int,int,int]",
                    "mytypes.imageType",
                    "float",
                    "str"
                ]
            }
        },
        "get_image_color_average": {
            "name": "get_image_color_average",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "UV_to_rgb": {
            "name": "UV_to_rgb",
            "location": 78,
            "return": [
                "Optional[Tuple[(int, int, int)]]"
            ],
            "arguments": {
                "wavelength": [
                    "int",
                    "float",
                    "str",
                    "List[int]",
                    "List[List[str]]",
                    "List[list[str]]"
                ]
            }
        },
        "filter_for_color": {
            "name": "filter_for_color",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "image": [
                    "Tuple[Union[int,int,int]]",
                    "Tuple[int,int,int]",
                    "float",
                    "int",
                    "mytypes.imageType"
                ],
                "color": [
                    "Tuple[Union[int,int,int]]",
                    "Tuple[int,int,int]",
                    "float",
                    "int",
                    "mytypes.imageType"
                ],
                "variation": [
                    "float",
                    "Tuple[int,int,int]",
                    "mytypes.imageType",
                    "int"
                ]
            }
        }
    },
    "dmlvis-master/src/detect_shapes.py": {},
    "dmlvis-master/src/dmlutils.py": {
        "set_res": {
            "name": "set_res",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "cap": [
                    "cv2.VideoCapture",
                    "List[str]",
                    "Optional[int]",
                    "Set[str]",
                    "AbstractSet[str]"
                ],
                "resolution": [
                    "Union[int, str]",
                    "str",
                    "int"
                ]
            }
        },
        "get_outlined_image": {
            "name": "get_outlined_image",
            "location": 42,
            "return": [
                "str",
                "Tuple[bytes]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "frame": [
                    "mytypes.imageType",
                    "List[int]",
                    "str"
                ]
            }
        },
        "get_largest_contour": {
            "name": "get_largest_contour",
            "location": 57,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "frame": [
                    "mytypes.imageType",
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "get_contour_lims": {
            "name": "get_contour_lims",
            "location": 74,
            "return": [
                "str",
                "float",
                "List[int]",
                "int"
            ],
            "arguments": {
                "frame": [
                    "mytypes.imageType",
                    "Dict[str, Set[str]]",
                    "str",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "calc_contact_angle": {
            "name": "calc_contact_angle",
            "location": 85,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "w": [
                    "int",
                    "float"
                ],
                "h": [
                    "float",
                    "numpy.ndarray",
                    "int",
                    "str"
                ]
            }
        },
        "drop_params": {
            "name": "drop_params",
            "location": 100,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "w": [
                    "int",
                    "Callable",
                    "str"
                ],
                "h": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "get_image_skew": {
            "name": "get_image_skew",
            "location": 109,
            "return": [
                "int",
                "str",
                "Tuple[str, int]"
            ],
            "arguments": {
                "frame": [
                    "mytypes.imageType",
                    "dict",
                    "str",
                    "Dict[str, Set[str]]",
                    "Optional[str]"
                ]
            }
        },
        "crop_outlined_image": {
            "name": "crop_outlined_image",
            "location": 145,
            "return": [
                "[[]]",
                "int",
                "Callable"
            ],
            "arguments": {
                "frame": [
                    "mytypes.imageType",
                    "int",
                    "dict",
                    "str"
                ]
            }
        },
        "save_image_groups": {
            "name": "save_image_groups",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "frames_list": [
                    "List[mytypes.imageType]",
                    "List[List[int]]",
                    "numpy.array",
                    "int",
                    "bool"
                ],
                "save_folder": [
                    "str",
                    "Optional[pathlib.Path]"
                ],
                "raw": [
                    "bool"
                ],
                "edged": [
                    "bool"
                ],
                "masked": [
                    "bool"
                ]
            }
        },
        "add_image_text": {
            "name": "add_image_text",
            "location": 194,
            "return": [
                "type",
                "Optional[T]",
                "Callable"
            ],
            "arguments": {
                "image": [
                    "mytypes.imageType",
                    "Set[VT]",
                    "Tuple[str]",
                    "Optional[int]",
                    "bool"
                ],
                "text": [
                    "str",
                    "bytes"
                ],
                "underline": [
                    "bool",
                    "str",
                    "Union[str, None]"
                ]
            }
        },
        "annot_image": {
            "name": "annot_image",
            "location": 218,
            "return": [
                "_types.Image",
                "numpy.ndarray",
                "int",
                "str"
            ],
            "arguments": {
                "img": [
                    "bool",
                    "numpy.ndarray",
                    "List[numpy.ndarray]",
                    "PIL.Image",
                    "tuple",
                    "int"
                ],
                "ang": [
                    "List[float]",
                    "int",
                    "numpy.ndarray",
                    "str"
                ],
                "txt_size": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "save_path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "savitzky_golay": {
            "name": "savitzky_golay",
            "location": 240,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "y": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "window_size": [
                    "int",
                    "Tuple[int]",
                    "numpy.ndarray",
                    "str",
                    "float"
                ],
                "order": [
                    "int",
                    "float",
                    "List[float]"
                ],
                "deriv": [
                    "int",
                    "Callable[[str], int]",
                    "bool",
                    "bytes"
                ],
                "rate": [
                    "int",
                    "Callable[[str], int]",
                    "bool",
                    "bytes"
                ]
            }
        },
        "zoom_image": {
            "name": "zoom_image",
            "location": 326,
            "return": [
                "_types.Image",
                "numpy.ndarray",
                "int",
                "str"
            ],
            "arguments": {
                "img": [
                    "mytypes.imageType",
                    "Tuple[int, int, int]",
                    "list",
                    "int",
                    "Iterable[Any]"
                ],
                "zoom": [
                    "float",
                    "bool"
                ]
            }
        },
        "zoom_image_from_path": {
            "name": "zoom_image_from_path",
            "location": 359,
            "return": [
                "mytypes.imageType"
            ],
            "arguments": {
                "path": [
                    "Union[pathlib.Path, str]",
                    "float",
                    "List[str]",
                    "pathlib.Path",
                    "str",
                    "bool"
                ],
                "zoom": [
                    "Union[pathlib.Path, str]",
                    "float",
                    "List[str]",
                    "pathlib.Path",
                    "str",
                    "bool"
                ]
            }
        },
        "zoom_and_rotate_video": {
            "name": "zoom_and_rotate_video",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "vid": [
                    "mytypes.videoType",
                    "bool",
                    "Union[str, Iterable[str]]"
                ],
                "zoom": [
                    "float",
                    "str",
                    "PIL.Image.Image",
                    "numpy.ndarray",
                    "Tuple[int, int]",
                    "int"
                ],
                "rotate": [
                    "float",
                    "str",
                    "int",
                    "List[str]",
                    "Optional[List[str]]"
                ],
                "show": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "save_name": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "Optional[str]",
                    "Callable[[str], str]"
                ]
            }
        },
        "load_video_from_path": {
            "name": "load_video_from_path",
            "location": 408,
            "return": [
                "str",
                "pathlib.Path",
                "pathlib.PosixPath",
                "List[str]",
                "Type[Any]"
            ],
            "arguments": {
                "path": [
                    "Union[pathlib.Path, str]",
                    "pathlib.Path",
                    "cerulean.path.Path"
                ]
            }
        },
        "zoom_and_rotate_video_from_path": {
            "name": "zoom_and_rotate_video_from_path",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {
                "in_path": [
                    "Union[pathlib.Path, str]",
                    "pathlib.Path",
                    "paradigm.catalog.Path",
                    "str",
                    "Optional[pathlib.Path]"
                ],
                "zoom": [
                    "float",
                    "str"
                ],
                "rotate": [
                    "float",
                    "str"
                ],
                "save_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "zoom_and_rotate_video_from_dirs": {
            "name": "zoom_and_rotate_video_from_dirs",
            "location": 435,
            "return": [
                "None"
            ],
            "arguments": {
                "in_path": [
                    "Union[pathlib.Path, str]",
                    "pathlib.Path",
                    "paradigm.catalog.Path",
                    "Union[str, pathlib.Path]",
                    "pathlib.PosixPath"
                ],
                "zoom": [
                    "float",
                    "str",
                    "List[str]",
                    "Callable[[str], bool]",
                    "pathlib.Path",
                    "bool",
                    "List[Tuple[int, str]]"
                ],
                "out_path": [
                    "Union[str, pathlib.Path]",
                    "pathlib.Path",
                    "str",
                    "bool",
                    "Optional[str]",
                    "Union[pathlib.Path, str]",
                    "pathlib.PosixPath"
                ],
                "rotate": [
                    "float",
                    "str",
                    "List[str]",
                    "Callable[[str], bool]",
                    "pathlib.Path",
                    "bool",
                    "List[Tuple[int, str]]"
                ]
            }
        },
        "make_GIF": {
            "name": "make_GIF",
            "location": 453,
            "return": [
                "None"
            ],
            "arguments": {
                "image_path": [
                    "Union[pathlib.Path, str]",
                    "pathlib.Path",
                    "bytes",
                    "str"
                ]
            }
        },
        "split_color_channels_from_array": {
            "name": "split_color_channels_from_array",
            "location": 486,
            "return": [
                "str",
                "bool",
                "int",
                "List[str]"
            ],
            "arguments": {
                "img_array": [
                    "np.ndarray[np.ndarray[int]]",
                    "bool",
                    "Sequence[str]",
                    "bytes"
                ],
                "channel": [
                    "Literal",
                    "np.ndarray[np.ndarray[int]]",
                    "str"
                ]
            }
        },
        "split_color_channels_from_path": {
            "name": "split_color_channels_from_path",
            "location": 515,
            "return": [
                "str",
                "int",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "image_path": [
                    "Union[pathlib.Path, str]",
                    "str",
                    "pathlib.Path"
                ],
                "channel": [
                    "Literal",
                    "str",
                    "bool",
                    "Union[None, str]"
                ]
            }
        }
    },
    "dmlvis-master/src/dropgui.py": {},
    "dmlvis-master/src/dropgui2.py": {
        "on_key_press": {
            "name": "on_key_press",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "Dict",
                    "str"
                ]
            }
        },
        "_quit": {
            "name": "_quit",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dmlvis-master/src/dropI.py": {
        "process_image": {
            "name": "process_image",
            "location": 13,
            "return": [
                "Tuple[float]",
                "int",
                "str"
            ],
            "arguments": {
                "img": [
                    "str",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "List[str]",
                    "Dict[str,Any]",
                    "bool",
                    "pathlib.Path"
                ],
                "save_images": [
                    "bool",
                    "List[str]",
                    "List",
                    "List[Dict[str,Any]]",
                    "str",
                    "Optional[Dict[str,Any]]"
                ],
                "verbosity": [
                    "int",
                    "bool",
                    "List[str]",
                    "List",
                    "List[Dict[str,Any]]",
                    "str",
                    "Optional[Dict[str,Any]]"
                ]
            }
        },
        "process_image_from_path": {
            "name": "process_image_from_path",
            "location": 36,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "None",
                "Optional[pathlib.Path]",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Dict",
                    "norfs.fs.base.Path",
                    "pathlib.Path",
                    "pypi2nix.path.Path"
                ],
                "name": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "pathlib.Path"
                ]
            }
        },
        "display_image": {
            "name": "display_image",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "img": [
                    "Optional[int]",
                    "int",
                    "Optional[str]",
                    "None",
                    "Optional[float]",
                    "str",
                    "float"
                ]
            }
        },
        "display_image_from_path": {
            "name": "display_image_from_path",
            "location": 66,
            "return": [
                "str",
                "Optional[str]",
                "None",
                "Dict[str,Any]",
                "List[str]",
                "Optional[Dict]",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Dict[str,pathlib.Path]",
                    "pathlib.Path"
                ]
            }
        }
    },
    "dmlvis-master/src/dropS.py": {},
    "dmlvis-master/src/dropV.py": {
        "process_video": {
            "name": "process_video",
            "location": 28,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "vid": [
                    "int",
                    "numpy.ndarray",
                    "list"
                ],
                "show": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "manual": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "process_videodata": {
            "name": "process_videodata",
            "location": 113,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "raw_data": [
                    "dict",
                    "T",
                    "numpy.ndarray",
                    "List[str]"
                ],
                "flatten": [
                    "bool",
                    "str"
                ]
            }
        },
        "print_video_data": {
            "name": "print_video_data",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "bool",
                    "bytes",
                    "dict",
                    "pathlib.Path"
                ],
                "out_path": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "out_filename": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "combine": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "dots": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "lines": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "sparse": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "print_video_data_from_csv": {
            "name": "print_video_data_from_csv",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "file_in": [
                    "str",
                    "int",
                    "pathlib.Path",
                    "List[int]"
                ],
                "out_path": [
                    "str",
                    "pathlib.Path"
                ],
                "out_filename": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "process_video_from_path": {
            "name": "process_video_from_path",
            "location": 268,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "Union[pathlib.Path, str]",
                    "cerulean.path.Path"
                ],
                "show": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "Optional[List[str]]",
                    "bool",
                    "Set[str]"
                ],
                "manual": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "Optional[List[str]]",
                    "bool",
                    "Set[str]"
                ]
            }
        },
        "process_videos_from_dirs": {
            "name": "process_videos_from_dirs",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "in_path": [
                    "pathlib.Path",
                    "str",
                    "Optional[str]",
                    "Union[str, pathlib.Path]",
                    "bytes"
                ],
                "out_path": [
                    "pathlib.Path",
                    "Union[str, pathlib.Path]",
                    "str",
                    "paradigm.catalog.Path"
                ]
            }
        },
        "print_video_data.plot_graph": {
            "name": "plot_graph",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "int"
                ],
                "file_suffix": [
                    "str",
                    "bytes"
                ],
                "color": [
                    "int",
                    "List[float]",
                    "List[str]",
                    "bool"
                ],
                "combine": [
                    "bool",
                    "str",
                    "pathlib.Path",
                    "list"
                ]
            }
        }
    },
    "dmlvis-master/src/dropV_0.py": {},
    "dmlvis-master/src/dropV_1.py": {},
    "dmlvis-master/src/max_filter.py": {
        "max_rgb_filter": {
            "name": "max_rgb_filter",
            "location": 8,
            "return": [
                "Callable",
                "int",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "image": [
                    "str",
                    "mytypes.imageType",
                    "List[str]",
                    "Pattern",
                    "List",
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        }
    },
    "dmlvis-master/src/n.py": {},
    "dmlvis-master/src/object_size.py": {
        "midpoint": {
            "name": "midpoint",
            "location": 12,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "ptA": [
                    "int",
                    "float",
                    "Iterable[int]",
                    "numpy.ndarray"
                ],
                "ptB": [
                    "int",
                    "float",
                    "Iterable[int]",
                    "numpy.ndarray"
                ]
            }
        }
    },
    "dmlvis-master/src/t.py": {
        "get_image_from_path": {
            "name": "get_image_from_path",
            "location": 20,
            "return": [
                "str",
                "TextIO",
                "BinaryIO",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path",
                    "Union[str,pathlib.Path]",
                    "path.Path"
                ]
            }
        },
        "get_image_color_list": {
            "name": "get_image_color_list",
            "location": 42,
            "return": [
                "None",
                "str",
                "List[Dict]",
                "List[str]",
                "List[List[Any]]",
                "List[float]"
            ],
            "arguments": {
                "image": [
                    "List[list]",
                    "List[bytes]",
                    "Dict[str,List[Any]]",
                    "Dict[str,list[Any]]"
                ],
                "system": [
                    "str",
                    "List[int]",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]",
                    "pathlib.Path"
                ],
                "number": [
                    "str",
                    "Sequence[str]",
                    "List[str]",
                    "numpy.ndarray",
                    "Set[str]",
                    "List[dict]",
                    "Optional[List[Dict]]",
                    "None"
                ]
            }
        },
        "get_image_color_set": {
            "name": "get_image_color_set",
            "location": 71,
            "return": [
                "None",
                "str",
                "Set[str]",
                "int",
                "Callable"
            ],
            "arguments": {
                "image": [
                    "str",
                    "bytes",
                    "numpy.ndarray"
                ],
                "system": [
                    "str",
                    "bytes",
                    "numpy.ndarray"
                ],
                "number": [
                    "Set[set[T]]",
                    "numpy.ndarray",
                    "None",
                    "Set[Set[T]]",
                    "Optional[T]"
                ]
            }
        },
        "get_image_color_counts": {
            "name": "get_image_color_counts",
            "location": 94,
            "return": [
                "None",
                "int",
                "str",
                "Tuple[str,int]"
            ],
            "arguments": {
                "image": [
                    "str",
                    "bytes",
                    "numpy.ndarray"
                ],
                "system": [
                    "str",
                    "bytes",
                    "numpy.ndarray"
                ],
                "number": [
                    "int",
                    "List",
                    "Iterable[Any]",
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "plot_hue_histogram": {
            "name": "plot_hue_histogram",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "Dict",
                    "Dict[str,Any]",
                    "Mapping[str,Any]",
                    "List"
                ]
            }
        },
        "RGB2HEX": {
            "name": "RGB2HEX",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "color": [
                    "List[list[str]]",
                    "int",
                    "List[List[str]]"
                ]
            }
        },
        "get_color_cluster_count_from_image": {
            "name": "get_color_cluster_count_from_image",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "image": [
                    "numpy.ndarray",
                    "Image",
                    "List[T]"
                ],
                "number_colors": [
                    "str",
                    "int",
                    "float",
                    "docker_push_latest_if_changed.Image",
                    "numpy.ndarray"
                ]
            }
        }
    },
    "dmlvis-master/src/tkinter_test.py": {
        "select_image": {
            "name": "select_image",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "process_image": {
            "name": "process_image",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "save_image": {
            "name": "save_image",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dmlvis-master/src/__init__.py": {},
    "dmlvis-master/src/mytypes/__init__.py": {},
    "dmlvis-master/src/pyimagesearch/colorlabeler.py": {
        "ColorLabeler.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ColorLabeler.label": {
            "name": "label",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "int",
                    "numpy.ndarray",
                    "float",
                    "None",
                    "Optional[numpy.ndarray]"
                ],
                "c": [
                    "int",
                    "mytypes.contourType",
                    "float",
                    "str"
                ]
            }
        }
    },
    "dmlvis-master/src/pyimagesearch/shapedetector.py": {
        "ShapeDetector.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShapeDetector.detect": {
            "name": "detect",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "str"
                ]
            }
        }
    },
    "dmlvis-master/src/pyimagesearch/__init__.py": {},
    "dmlvis-master/tests/__init__.py": {}
}
{
    "dontforget-master/src/dontforget/app.py": {
        "load_plugins": {
            "name": "load_plugins",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DontForgetApp.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DontForgetApp.create_preferences_menu": {
            "name": "create_preferences_menu",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DontForgetApp.clicked_preferences": {
            "name": "clicked_preferences",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "DontForgetApp.clicked_reload_config_file": {
            "name": "clicked_reload_config_file",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Dict",
                    "pypi2nix.path.Path",
                    "Iterable[dict]"
                ]
            }
        },
        "DontForgetApp.start_scheduler": {
            "name": "start_scheduler",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePlugin.name": {
            "name": "name",
            "location": 93,
            "return": [
                "Text",
                "Dict[str,Any]",
                "str",
                "int",
                "Iterator",
                "Container[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePlugin.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_yaml": [
                    "Callable",
                    "settings.Settings",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "None"
                ]
            }
        },
        "BasePlugin.plugin_config": {
            "name": "plugin_config",
            "location": 101,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePlugin.init_app": {
            "name": "init_app",
            "location": 106,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "bool"
                ]
            }
        },
        "BasePlugin.reload_config": {
            "name": "reload_config",
            "location": 111,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dontforget-master/src/dontforget/cli.py": {
        "main": {
            "name": "main",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "clear_cache": [
                    "List[str]",
                    "bool",
                    "Optional[Sequence[str]]",
                    "Sequence[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        },
        "menu": {
            "name": "menu",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "register_plugin_commands": {
            "name": "register_plugin_commands",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "pipe": {
            "name": "pipe",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ls": {
            "name": "ls",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "which": [
                    "Tuple",
                    "Sequence[str]"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "partial_names": [
                    "Tuple[str]",
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Iterable[float]"
                ]
            }
        }
    },
    "dontforget-master/src/dontforget/constants.py": {},
    "dontforget-master/src/dontforget/generic.py": {
        "get_subclasses": {
            "name": "get_subclasses",
            "location": 59,
            "return": [
                "list"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[int]",
                    "Type['DataclassT']",
                    "str",
                    "List[str]"
                ]
            }
        },
        "flatten": {
            "name": "flatten",
            "location": 68,
            "return": [
                "dict"
            ],
            "arguments": {
                "dict_": [
                    "Dict",
                    "Dict[str,Any]"
                ],
                "parent_key": [
                    "str",
                    "Optional[str]",
                    "Hashable",
                    "Sequence[str]",
                    "dict"
                ],
                "separator": [
                    "dict",
                    "set",
                    "Union[str, int]"
                ]
            }
        },
        "unflatten": {
            "name": "unflatten",
            "location": 86,
            "return": [
                "Dict[(Any, dict)]"
            ],
            "arguments": {
                "dict_": [
                    "Dict",
                    "List[libkol.types.ItemQuantity]",
                    "Dict[str,str]",
                    "Dict[str,bytes]",
                    "Dict[int,dict[str,Any]]",
                    "Dict[int,Dict[str,Any]]"
                ],
                "separator": [
                    "str",
                    "Text"
                ]
            }
        },
        "find_partial_keys": {
            "name": "find_partial_keys",
            "location": 108,
            "return": [
                "list"
            ],
            "arguments": {
                "list_or_dict": [
                    "Dict",
                    "str",
                    "Optional[Dict]",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "partial_key": [
                    "dict",
                    "list",
                    "Optional[List[str]]",
                    "Sequence[str]",
                    "Dict[str, Any]",
                    "bytes"
                ],
                "not_found": [
                    "str",
                    "bytes",
                    "Dict[str,str]"
                ],
                "multiple": [
                    "str",
                    "Set[str]",
                    "List",
                    "List[str]",
                    "Optional[tuple]",
                    "Iterable[str]",
                    "Dict"
                ]
            }
        },
        "pretty_plugin_name": {
            "name": "pretty_plugin_name",
            "location": 176,
            "return": [
                "str"
            ],
            "arguments": {
                "class_": [
                    "str",
                    "Dict"
                ]
            }
        },
        "parse_interval": {
            "name": "parse_interval",
            "location": 182,
            "return": [
                "Dict[(Any, int)]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "classproperty": {
            "name": "classproperty",
            "location": 257,
            "return": [
                "ClassPropertyDescriptor"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "float",
                    "Callable[...,None]"
                ]
            }
        },
        "SingletonMixin.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingletonMixin.singleton": {
            "name": "singleton",
            "location": 50,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "ClassPropertyDescriptor.__init__": {
            "name": "__init__",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fget": [
                    "int",
                    "float",
                    "bool"
                ],
                "fset": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "ClassPropertyDescriptor.__get__": {
            "name": "__get__",
            "location": 236,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Callable",
                    "Type"
                ],
                "klass": [
                    "bool",
                    "None",
                    "Dict",
                    "str",
                    "Optional[dict]",
                    "Optional[str]"
                ]
            }
        },
        "ClassPropertyDescriptor.__set__": {
            "name": "__set__",
            "location": 242,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Type"
                ],
                "value": [
                    "Dict[str,Any]",
                    "Dict",
                    "int",
                    "List[int]",
                    "str",
                    "List[str]",
                    "T",
                    "bool"
                ]
            }
        },
        "ClassPropertyDescriptor.setter": {
            "name": "setter",
            "location": 249,
            "return": [
                "ClassPropertyDescriptor"
            ],
            "arguments": {
                "self": [
                    "_TClassPropertyDescriptor@@ClassPropertyDescriptor@@"
                ],
                "func": [
                    "Callable"
                ]
            }
        }
    },
    "dontforget-master/src/dontforget/home.py": {
        "go_home": {
            "name": "go_home",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "desired_date": [
                    "None",
                    "int",
                    "datetime.date",
                    "Optional[datetime.date]",
                    "arrow.Arrow"
                ]
            }
        }
    },
    "dontforget-master/src/dontforget/pipes.py": {
        "Pipe.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "toml_file": [
                    "str",
                    "TextIO",
                    "pathlib.Path"
                ]
            }
        },
        "Pipe.__lt__": {
            "name": "__lt__",
            "location": 54,
            "return": [
                "bool",
                "str",
                "click.HelpFormatter",
                "Optional[Callable]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict",
                    "bool",
                    "int"
                ]
            }
        },
        "Pipe.original_dict": {
            "name": "original_dict",
            "location": 59,
            "return": [
                "str",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipe.merged_dict": {
            "name": "merged_dict",
            "location": 65,
            "return": [
                "Optional[int]",
                "Optional[T]",
                "Optional[Iterable[int]]",
                "Optional[List[Callable]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipe.echo": {
            "name": "echo",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipe.echo_dict": {
            "name": "echo_dict",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipe.merge_parent_pipes": {
            "name": "merge_parent_pipes",
            "location": 80,
            "return": [
                "bytearray",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipe.validate": {
            "name": "validate",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipe.run": {
            "name": "run",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PipeConfig.default_pipes": {
            "name": "default_pipes",
            "location": 164,
            "return": [
                "bool",
                "int",
                "Hashable",
                "Iterable[T]",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "PipeConfig.user_pipes": {
            "name": "user_pipes",
            "location": 169,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PipeConfig.pipes_by_name": {
            "name": "pipes_by_name",
            "location": 174,
            "return": [
                "Dict",
                "Tuple[Type]",
                "str",
                "object",
                "Set",
                "FrozenSet[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PipeConfig.sources": {
            "name": "sources",
            "location": 179,
            "return": [
                "Dict",
                "pathlib.Path",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PipeConfig.targets": {
            "name": "targets",
            "location": 184,
            "return": [
                "str",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "PipeConfig._find_pipes_in": {
            "name": "_find_pipes_in",
            "location": 189,
            "return": [
                "Set[Pipe]"
            ],
            "arguments": {
                "directories": [
                    "List[Union[str,pathlib.Path]]",
                    "str",
                    "bool",
                    "Callable",
                    "Sequence[Dict[str,Any]]"
                ]
            }
        },
        "PipeConfig.echo": {
            "name": "echo",
            "location": 210,
            "return": [
                "PipeConfig"
            ],
            "arguments": {
                "self": [
                    "_TPipeConfig@@PipeConfig@@"
                ],
                "header": [
                    "str"
                ],
                "default": [
                    "str",
                    "bool",
                    "None",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "PipeConfig.get_pipe": {
            "name": "get_pipe",
            "location": 217,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "exact_name": [
                    "str",
                    "List[str]",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        },
        "PipeConfig.get_pipes": {
            "name": "get_pipes",
            "location": 221,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "partial_name": [
                    "str",
                    "Dict[str,str]"
                ]
            }
        },
        "BaseSource.name": {
            "name": "name",
            "location": 233,
            "return": [
                "str",
                "List[List[Any]]",
                "Callable[..., T]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "float"
                ]
            }
        },
        "BaseSource.get_class_from": {
            "name": "get_class_from",
            "location": 238,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "List[str]",
                    "Set[str]",
                    "Dict"
                ],
                "class_name": [
                    "str",
                    "None",
                    "Optional[str]",
                    "List[str]",
                    "Optional[List[str]]",
                    "Union[str,None]"
                ]
            }
        },
        "BaseSource.pull": {
            "name": "pull",
            "location": 249,
            "return": [
                "Iterator[dontforget.typedefs.JsonDict]",
                "None"
            ],
            "arguments": {
                "self": [],
                "connection_info": [
                    "Dict[str,Any]",
                    "dontforgetypedefs.JsonDict",
                    "Tuple",
                    "str"
                ]
            }
        },
        "BaseSource.on_success": {
            "name": "on_success",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSource.on_failure": {
            "name": "on_failure",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTarget.__init__": {
            "name": "__init__",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTarget.name": {
            "name": "name",
            "location": 272,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "float"
                ]
            }
        },
        "BaseTarget.get_class_from": {
            "name": "get_class_from",
            "location": 277,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "List[str]",
                    "Set[str]",
                    "Dict"
                ],
                "class_name": [
                    "str"
                ]
            }
        },
        "BaseTarget.push": {
            "name": "push",
            "location": 288,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_data": [
                    "bool",
                    "str"
                ]
            }
        },
        "BaseTarget.unique_key": {
            "name": "unique_key",
            "location": 292,
            "return": [
                "Text",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dontforget-master/src/dontforget/settings.py": {
        "load_config_file": {
            "name": "load_config_file",
            "location": 51,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "Optional[str]",
                "dict",
                "str"
            ],
            "arguments": {}
        }
    },
    "dontforget-master/src/dontforget/typedefs.py": {},
    "dontforget-master/src/dontforget/__init__.py": {},
    "dontforget-master/src/dontforget/default_pipes/gmail_plugin.py": {
        "format_count": {
            "name": "format_count",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "threads": [
                    "int",
                    "str",
                    "Callable[,None]"
                ],
                "messages": [
                    "int",
                    "str"
                ]
            }
        },
        "GMailPlugin.name": {
            "name": "name",
            "location": 86,
            "return": [
                "Text",
                "Dict[str,Any]",
                "str",
                "int",
                "Iterator",
                "Container[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GMailPlugin.init_app": {
            "name": "init_app",
            "location": 90,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "routemaster.app.App"
                ]
            }
        },
        "GMailPlugin.reload_config": {
            "name": "reload_config",
            "location": 115,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GMailPlugin.update_important": {
            "name": "update_important",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "Dict",
                    "int",
                    "Set[int]",
                    "google.cloud.bigquery.QueryJob",
                    "bool"
                ],
                "threads": [
                    "int",
                    "str",
                    "Type",
                    "Dict[str,int]"
                ],
                "messages": [
                    "int",
                    "str",
                    "Type",
                    "Dict[str,int]"
                ],
                "clear": [
                    "bool",
                    "Callable",
                    "Union[Callable,Type]"
                ]
            }
        },
        "LabelCollection.__init__": {
            "name": "__init__",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelCollection.add": {
            "name": "add",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "int",
                    "Dict"
                ]
            }
        },
        "LabelCollection.items": {
            "name": "items",
            "location": 201,
            "return": [
                "dict_items"
            ],
            "arguments": {
                "self": []
            }
        },
        "GMailAPI.__init__": {
            "name": "__init__",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str",
                    "int",
                    "Dict[str,str]",
                    "Dict[str,Any]",
                    "List[str]"
                ]
            }
        },
        "GMailAPI.authenticate": {
            "name": "authenticate",
            "location": 218,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GMailAPI.fetch_labels": {
            "name": "fetch_labels",
            "location": 256,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GMailAPI.unread_count": {
            "name": "unread_count",
            "location": 273,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "int",
                    "float"
                ]
            }
        },
        "GMailJob.__init__": {
            "name": "__init__",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GMailJob.add_to_menu": {
            "name": "add_to_menu",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "menuitem": [
                    "int",
                    "str",
                    "T",
                    "VT"
                ]
            }
        },
        "GMailJob.create_main_menu": {
            "name": "create_main_menu",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GMailJob.__call__": {
            "name": "__call__",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GMailJob.check_now_clicked": {
            "name": "check_now_clicked",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "GMailJob.label_clicked": {
            "name": "label_clicked",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "menu": [
                    "Tuple",
                    "int",
                    "str"
                ]
            }
        },
        "GMailJob.check_unread_labels": {
            "name": "check_unread_labels",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dontforget-master/src/dontforget/default_pipes/mail.py": {
        "EmailSource.pull": {
            "name": "pull",
            "location": 23,
            "return": [
                "Generator[(Dict[(str, Any)], Any, Optional[List[nothing]])]"
            ],
            "arguments": {
                "self": [],
                "connection_info": [
                    "dontforgetypedefs.JsonDict",
                    "Dict[str, Any]"
                ]
            }
        },
        "EmailSource.build_search_url": {
            "name": "build_search_url",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "from_": [
                    "str",
                    "None",
                    "Dict",
                    "allennlp.common.util.JsonDict",
                    "List"
                ],
                "after": [
                    "str",
                    "None"
                ],
                "before": [
                    "str",
                    "None"
                ],
                "subject": [
                    "str",
                    "List",
                    "None",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "EmailSource.on_success": {
            "name": "on_success",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dontforget-master/src/dontforget/default_pipes/redmine.py": {
        "RedmineSource.pull": {
            "name": "pull",
            "location": 13,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "connection_info": [
                    "dict",
                    "dontforgetypedefs.JsonDict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "dontforget-master/src/dontforget/default_pipes/todoist.py": {
        "Todoist.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "api_token": [
                    "Sequence",
                    "List[str]",
                    "str"
                ]
            }
        },
        "Todoist.smart_sync": {
            "name": "smart_sync",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Todoist._merge_new_data": {
            "name": "_merge_new_data",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "partial_data": [
                    "dict",
                    "Dict[str, Any]",
                    "allennlp.common.util.JsonDict",
                    "Dict[int, Dict]"
                ]
            }
        },
        "Todoist.keys": {
            "name": "keys",
            "location": 74,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Todoist.fetch": {
            "name": "fetch",
            "location": 79,
            "return": [
                "List[str]",
                "None",
                "bool",
                "List"
            ],
            "arguments": {
                "self": [],
                "element_name": [
                    "str",
                    "Dict[str,str]"
                ],
                "return_field": [
                    "str",
                    "Dict[str,str]",
                    "None"
                ],
                "filters": [
                    "str",
                    "Set[str]",
                    "Optional[str]",
                    "List[str]",
                    "Callable"
                ],
                "index": [
                    "None",
                    "bool",
                    "Optional[str]",
                    "Dict[str,Any]"
                ],
                "matching_function": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "Todoist.fetch_first": {
            "name": "fetch_first",
            "location": 109,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "element_name": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None",
                    "Container[str]",
                    "Container"
                ],
                "return_field": [
                    "str",
                    "None",
                    "List[str]",
                    "Optional[str]",
                    "Container[str]",
                    "Container"
                ],
                "filters": [
                    "str",
                    "None",
                    "List[str]",
                    "Optional[str]",
                    "Container[str]",
                    "Container"
                ]
            }
        },
        "Todoist.find_project_id": {
            "name": "find_project_id",
            "location": 113,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "exact_name": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "Todoist.find_projects": {
            "name": "find_projects",
            "location": 120,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "partial_name": [
                    "Text",
                    "str",
                    "Callable",
                    "bool"
                ]
            }
        },
        "Todoist.find_project_items": {
            "name": "find_project_items",
            "location": 129,
            "return": [
                "List",
                "bool",
                "schema.Schema"
            ],
            "arguments": {
                "self": [],
                "exact_project_name": [
                    "str"
                ],
                "extra_jmes_expression": [
                    "Text",
                    "Type",
                    "Dict[str,Any]",
                    "bool",
                    "Hashable"
                ]
            }
        },
        "Todoist.find_items_by_content": {
            "name": "find_items_by_content",
            "location": 140,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "exact_project_name": [
                    "str",
                    "Dict[str,Any]",
                    "Dict",
                    "Callable[[str],str]",
                    "Callable[str,str]"
                ],
                "partial_content": [
                    "str"
                ]
            }
        },
        "TodoistTarget.push": {
            "name": "push",
            "location": 174,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "raw_data": [
                    "bytes",
                    "str",
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        },
        "TodoistTarget._set_project_id": {
            "name": "_set_project_id",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TodoistTarget._add_task": {
            "name": "_add_task",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dontforget-master/src/dontforget/default_pipes/toggl_plugin.py": {
        "fetch_all_clients": {
            "name": "fetch_all_clients",
            "location": 67,
            "return": [
                "Dict",
                "Dict[,ClientDC]"
            ],
            "arguments": {}
        },
        "fetch_all_projects": {
            "name": "fetch_all_projects",
            "location": 75,
            "return": [
                "Dict[,ProjectDC]",
                "float",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "track": {
            "name": "track",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "entry": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "what_i_did": {
            "name": "what_i_did",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "date": [
                    "str",
                    "bool",
                    "int"
                ],
                "report": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "TogglPlugin.name": {
            "name": "name",
            "location": 92,
            "return": [
                "Text",
                "Dict[str,Any]",
                "str",
                "int",
                "Iterator",
                "Container[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TogglPlugin.init_app": {
            "name": "init_app",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "TogglPlugin.create": {
            "name": "create",
            "location": 104,
            "return": [
                "TogglPlugin"
            ],
            "arguments": {
                "cls": [
                    "Type[_TTogglPlugin]"
                ]
            }
        },
        "TogglPlugin.set_api_token": {
            "name": "set_api_token",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TogglPlugin.create_menu": {
            "name": "create_menu",
            "location": 118,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TogglPlugin.fetch_shortcuts": {
            "name": "fetch_shortcuts",
            "location": 134,
            "return": [
                "Dict[(Any, ShortcutDC)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TogglPlugin.fetch_clients_projects": {
            "name": "fetch_clients_projects",
            "location": 148,
            "return": [
                "TogglPlugin"
            ],
            "arguments": {
                "self": [
                    "_TTogglPlugin@@TogglPlugin@@"
                ]
            }
        },
        "TogglPlugin.reload_config": {
            "name": "reload_config",
            "location": 154,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TogglPlugin.entry_clicked": {
            "name": "entry_clicked",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "menu": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TogglPlugin.register_cli_commands": {
            "name": "register_cli_commands",
            "location": 177,
            "return": [
                "list"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "TogglPlugin.track_entry": {
            "name": "track_entry",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "bool",
                    "Dict[str,str]",
                    "Callable",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "echo": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "dontforget-master/src/dontforget/default_pipes/__init__.py": {}
}
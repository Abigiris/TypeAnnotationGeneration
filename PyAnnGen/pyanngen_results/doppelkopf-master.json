{
    "doppelkopf-master/backend/wsgi.py": {},
    "doppelkopf-master/backend/doppelkopf/admin.py": {
        "index": {
            "name": "index",
            "location": 13,
            "return": [
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "toggles_list": {
            "name": "toggles_list",
            "location": 31,
            "return": [
                "str",
                "bool",
                "dict",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "toggles_submit": {
            "name": "toggles_submit",
            "location": 38,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "test_websockets": {
            "name": "test_websockets",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "doppelkopf-master/backend/doppelkopf/api.py": {
        "hello": {
            "name": "hello",
            "location": 11,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "new_game": {
            "name": "new_game",
            "location": 16,
            "return": [
                "Tuple[int]",
                "str",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "features": {
            "name": "features",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "doppelkopf-master/backend/doppelkopf/config.py": {},
    "doppelkopf-master/backend/doppelkopf/db.py": {
        "seed_data_command": {
            "name": "seed_data_command",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "init_app": {
            "name": "init_app",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        }
    },
    "doppelkopf-master/backend/doppelkopf/db_helpers.py": {
        "GUID.load_dialect_impl": {
            "name": "load_dialect_impl",
            "location": 17,
            "return": [
                "bool",
                "Type[BaseException]",
                "Optional[Type[BaseException]]"
            ],
            "arguments": {
                "self": [],
                "dialect": [
                    "Dict[str, Any]",
                    "str",
                    "Set[str]",
                    "dict",
                    "type"
                ]
            }
        },
        "GUID.process_bind_param": {
            "name": "process_bind_param",
            "location": 23,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Union[List,Tuple]",
                    "List",
                    "Tuple"
                ],
                "dialect": [
                    "str",
                    "Callable"
                ]
            }
        },
        "GUID.process_result_value": {
            "name": "process_result_value",
            "location": 35,
            "return": [
                "Union[(uuid.UUID, _T0)]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Union[int,float]",
                    "int",
                    "Union[str,Sequence]",
                    "str",
                    "float",
                    "bytes",
                    "Optional[str]",
                    "Sequence",
                    "None"
                ],
                "dialect": [
                    "str",
                    "Tuple[Union[Any,Any]]",
                    "Callable",
                    "sqlalchemy.engine.interfaces.Dialect",
                    "Dict",
                    "None",
                    "Optional[Tuple[Any,Any]]",
                    "Iterable[Any]"
                ]
            }
        }
    },
    "doppelkopf-master/backend/doppelkopf/events.py": {
        "Event.__repr__": {
            "name": "__repr__",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "doppelkopf-master/backend/doppelkopf/game.py": {
        "Game.__repr__": {
            "name": "__repr__",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.serialize": {
            "name": "serialize",
            "location": 20,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.join": {
            "name": "join",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "Player.__repr__": {
            "name": "__repr__",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Player.serialize": {
            "name": "serialize",
            "location": 44,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "doppelkopf-master/backend/doppelkopf/helpers.py": {
        "pretty_date": {
            "name": "pretty_date",
            "location": 6,
            "return": [
                "Text",
                "str",
                "int",
                "MutableMapping[str,Any]",
                "Dict",
                "bool"
            ],
            "arguments": {
                "d": [
                    "Union[float, int]",
                    "List[List[str]]"
                ],
                "now": [
                    "None",
                    "Optional[datetime.datetime]",
                    "datetime.datetime",
                    "int",
                    "Optional[int]",
                    "List",
                    "Optional[datetime.date]"
                ]
            }
        },
        "is_safe_url": {
            "name": "is_safe_url",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None"
                ]
            }
        }
    },
    "doppelkopf-master/backend/doppelkopf/login.py": {
        "init_app": {
            "name": "init_app",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "load_user": {
            "name": "load_user",
            "location": 28,
            "return": [
                "Union[server.models.User, int]",
                "Optional[List[Any]]",
                "models.User",
                "bool"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "load_user_by_name": {
            "name": "load_user_by_name",
            "location": 32,
            "return": [
                "str",
                "Union[str, int]",
                "Dict[str, str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "request_loader": {
            "name": "request_loader",
            "location": 37,
            "return": [
                "Optional[bool]",
                "None",
                "Optional[dict]",
                "Dict[str,str]",
                "Dict[Any,bool]",
                "Dict",
                "str",
                "int",
                "Optional[float]",
                "Dict[str,int]",
                "Dict[str,list[str]]"
            ],
            "arguments": {
                "request": [
                    "Dict[str,Any]",
                    "Dict",
                    "Tuple[int]"
                ]
            }
        },
        "login": {
            "name": "login",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "logout": {
            "name": "logout",
            "location": 73,
            "return": [
                "Text",
                "str",
                "Type",
                "Dict[str,Any]",
                "List[Dict[str,Any]]"
            ],
            "arguments": {}
        },
        "create_user_command": {
            "name": "create_user_command",
            "location": 82,
            "return": [
                "None",
                "str",
                "int",
                "DefaultDict",
                "Set[str]"
            ],
            "arguments": {
                "username": [
                    "Optional[int]",
                    "int",
                    "str",
                    "Optional[str]",
                    "None",
                    "Dict",
                    "Optional[IO[bytes]]",
                    "IO",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "password": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Any",
                    "Optional[Union[Any,Any]]",
                    "int",
                    "Optional[int]",
                    "bool"
                ]
            }
        }
    },
    "doppelkopf-master/backend/doppelkopf/metrics.py": {
        "new_game": {
            "name": "new_game",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "win_game": {
            "name": "win_game",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "lose_game": {
            "name": "lose_game",
            "location": 20,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "cron_db_backup": {
            "name": "cron_db_backup",
            "location": 25,
            "return": [
                "Text",
                "bool",
                "str",
                "List[str]",
                "Tuple[int,int,int]"
            ],
            "arguments": {}
        },
        "save_game_event": {
            "name": "save_game_event",
            "location": 33,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {
                "type": [
                    "Dict[str,object]",
                    "str",
                    "Dict[str,Any]",
                    "Type",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        }
    },
    "doppelkopf-master/backend/doppelkopf/sockets.py": {
        "init_app": {
            "name": "init_app",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask",
                    "flask.ctx.AppContext"
                ]
            }
        },
        "find_session_id": {
            "name": "find_session_id",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "sid": [
                    "int",
                    "str",
                    "Dict[str,Any]",
                    "Exception"
                ]
            }
        },
        "on_connect": {
            "name": "on_connect",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "auth": [
                    "int",
                    "Dict",
                    "IO",
                    "str"
                ]
            }
        },
        "on_join": {
            "name": "on_join",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Mapping[str,Any]",
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        },
        "on_disconnect": {
            "name": "on_disconnect",
            "location": 82,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {}
        }
    },
    "doppelkopf-master/backend/doppelkopf/stats.py": {
        "calculate_weekly": {
            "name": "calculate_weekly",
            "location": 8,
            "return": [
                "dict"
            ],
            "arguments": {}
        },
        "calculate_total": {
            "name": "calculate_total",
            "location": 40,
            "return": [
                "dict"
            ],
            "arguments": {}
        },
        "calculate_weekly.filter_events": {
            "name": "filter_events",
            "location": 20,
            "return": [
                "List[list]",
                "Callable",
                "int"
            ],
            "arguments": {
                "events": [
                    "dict"
                ],
                "type": [
                    "dict"
                ]
            }
        }
    },
    "doppelkopf-master/backend/doppelkopf/toggles.py": {
        "Toggle.__repr__": {
            "name": "__repr__",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Toggle.__eq__": {
            "name": "__eq__",
            "location": 18,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Toggle.serialize": {
            "name": "serialize",
            "location": 24,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Toggle.insert_all": {
            "name": "insert_all",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Toggle.last_changed": {
            "name": "last_changed",
            "location": 36,
            "return": [
                "str",
                "Optional[str]",
                "float",
                "datetime.date",
                "int",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Toggle.toggle": {
            "name": "toggle",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "doppelkopf-master/backend/doppelkopf/users.py": {
        "User.__repr__": {
            "name": "__repr__",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get_id": {
            "name": "get_id",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.is_correct_password": {
            "name": "is_correct_password",
            "location": 21,
            "return": [
                "str",
                "Mapping",
                "Optional[Callable[[Dict], bool]]",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "plaintext": [
                    "str",
                    "Dict",
                    "IO"
                ]
            }
        }
    },
    "doppelkopf-master/backend/doppelkopf/__init__.py": {
        "create_app": {
            "name": "create_app",
            "location": 12,
            "return": [
                "flask.Flask",
                "Flask"
            ],
            "arguments": {
                "test_config": [
                    "Optional[Dict[str,Any]]",
                    "None",
                    "str",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        }
    },
    "doppelkopf-master/backend/migrations/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online.process_revision_directives": {
            "name": "process_revision_directives",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "revision": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "directives": [
                    "Callable[[Mapping], T]",
                    "list",
                    "List[List[str]]",
                    "int",
                    "str",
                    "tuple"
                ]
            }
        }
    },
    "doppelkopf-master/backend/migrations/versions/a09039a6e640_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "doppelkopf-master/backend/test/conftest.py": {
        "app": {
            "name": "app",
            "location": 12,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "client": {
            "name": "client",
            "location": 26,
            "return": [],
            "arguments": {
                "app": [
                    "str"
                ]
            }
        },
        "socket_client": {
            "name": "socket_client",
            "location": 31,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "app": [],
                "client": []
            }
        },
        "user": {
            "name": "user",
            "location": 38,
            "return": [
                "User",
                "str",
                "metaswitch_tinder.database.models.User",
                "int",
                "abilian.core.models.subjects.User"
            ],
            "arguments": {
                "app": [
                    "bool"
                ]
            }
        },
        "runner": {
            "name": "runner",
            "location": 49,
            "return": [
                "str",
                "django.db.models.QuerySet",
                "int"
            ],
            "arguments": {
                "app": [
                    "str"
                ]
            }
        }
    },
    "doppelkopf-master/backend/test/test_admin.py": {
        "test_admin_should_redirect_to_login": {
            "name": "test_admin_should_redirect_to_login",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_toggles_should_redirect_to_login": {
            "name": "test_toggles_should_redirect_to_login",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_should_render_stats_on_index": {
            "name": "test_should_render_stats_on_index",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [],
                "client": [
                    "dict"
                ]
            }
        },
        "test_should_render_toggles_from_db": {
            "name": "test_should_render_toggles_from_db",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [],
                "client": []
            }
        },
        "test_should_save_toggle_state": {
            "name": "test_should_save_toggle_state",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [],
                "client": []
            }
        },
        "test_should_update_last_changed_date_when_enabling": {
            "name": "test_should_update_last_changed_date_when_enabling",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [],
                "client": []
            }
        },
        "test_should_update_last_changed_date_when_disabling": {
            "name": "test_should_update_last_changed_date_when_disabling",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [],
                "client": []
            }
        },
        "test_should_not_update_last_changed_date_when_state_is_not_changed": {
            "name": "test_should_not_update_last_changed_date_when_state_is_not_changed",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [],
                "client": []
            }
        },
        "login": {
            "name": "login",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "db.Db"
                ],
                "user": [
                    "str",
                    "db.Db"
                ]
            }
        },
        "save_toggle": {
            "name": "save_toggle",
            "location": 88,
            "return": [
                "doppelkopf.toggles.Toggle"
            ],
            "arguments": {
                "name": [
                    "Text",
                    "str",
                    "Optional[int]",
                    "Optional[datetime.datetime]",
                    "Optional[str]",
                    "bool",
                    "Sequence[Any]"
                ],
                "enabled": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "Optional[datetime.datetime]",
                    "Optional[str]",
                    "Sequence[Any]"
                ]
            }
        }
    },
    "doppelkopf-master/backend/test/test_api.py": {
        "test_index": {
            "name": "test_index",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_should_create_game": {
            "name": "test_should_create_game",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_should_404_when_getting_unknown_game": {
            "name": "test_should_404_when_getting_unknown_game",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_should_add_cors_header_when_creating_game": {
            "name": "test_should_add_cors_header_when_creating_game",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_should_return_toggles": {
            "name": "test_should_return_toggles",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "save_toggle": {
            "name": "save_toggle",
            "location": 53,
            "return": [
                "doppelkopf.toggles.Toggle"
            ],
            "arguments": {
                "name": [
                    "Text",
                    "str",
                    "List[str]"
                ],
                "enabled": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "start_game": {
            "name": "start_game",
            "location": 60,
            "return": [
                "str",
                "Optional[int]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "client": []
            }
        }
    },
    "doppelkopf-master/backend/test/test_events.py": {
        "test_save_event": {
            "name": "test_save_event",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "doppelkopf-master/backend/test/test_factory.py": {
        "test_config": {
            "name": "test_config",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "doppelkopf-master/backend/test/test_game.py": {
        "test_serialize_game": {
            "name": "test_serialize_game",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_should_join_game": {
            "name": "test_should_join_game",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_should_not_join_if_game_has_4_players": {
            "name": "test_should_not_join_if_game_has_4_players",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "doppelkopf-master/backend/test/test_helpers.py": {
        "TestPrettyDate.now": {
            "name": "now",
            "location": 6,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrettyDate.test_pretty_date_way_past": {
            "name": "test_pretty_date_way_past",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrettyDate.test_pretty_date_three_days_ago": {
            "name": "test_pretty_date_three_days_ago",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrettyDate.test_pretty_date_one_day_ago": {
            "name": "test_pretty_date_one_day_ago",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrettyDate.test_pretty_date_10_hours_ago": {
            "name": "test_pretty_date_10_hours_ago",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrettyDate.test_pretty_date_1_hour_ago": {
            "name": "test_pretty_date_1_hour_ago",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrettyDate.test_pretty_date_minutes_ago": {
            "name": "test_pretty_date_minutes_ago",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrettyDate.test_pretty_date_1_minute_ago": {
            "name": "test_pretty_date_1_minute_ago",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrettyDate.test_pretty_date_seconds_ago": {
            "name": "test_pretty_date_seconds_ago",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrettyDate.test_pretty_date_just_now": {
            "name": "test_pretty_date_just_now",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSafeUrl.test_reject_hostname": {
            "name": "test_reject_hostname",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSafeUrl.test_reject_javascript": {
            "name": "test_reject_javascript",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSafeUrl.test_reject_file": {
            "name": "test_reject_file",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSafeUrl.test_reject_data": {
            "name": "test_reject_data",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSafeUrl.test_allow_path": {
            "name": "test_allow_path",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSafeUrl.test_allow_noneh": {
            "name": "test_allow_noneh",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "doppelkopf-master/backend/test/test_login.py": {
        "test_should_return_none_if_user_does_not_exist": {
            "name": "test_should_return_none_if_user_does_not_exist",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "str",
                    "int"
                ]
            }
        },
        "test_should_have_login_endpoint": {
            "name": "test_should_have_login_endpoint",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_should_login_user": {
            "name": "test_should_login_user",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [],
                "client": []
            }
        },
        "test_should_not_login_unknown_user": {
            "name": "test_should_not_login_unknown_user",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [],
                "client": []
            }
        },
        "test_should_not_login_with_invalid_password": {
            "name": "test_should_not_login_with_invalid_password",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [],
                "client": []
            }
        },
        "test_should_logout_user": {
            "name": "test_should_logout_user",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [],
                "client": []
            }
        },
        "test_should_not_create_user_with_missing_parameters": {
            "name": "test_should_not_create_user_with_missing_parameters",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "int",
                    "Union[int,float]",
                    "Iterable[Iterable[Any]]",
                    "float"
                ]
            }
        },
        "test_create_user": {
            "name": "test_create_user",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [
                    "int",
                    "Iterable[Iterable[Any]]"
                ]
            }
        }
    },
    "doppelkopf-master/backend/test/test_metrics.py": {
        "test_should_save_start_event": {
            "name": "test_should_save_start_event",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_should_save_win_game_event": {
            "name": "test_should_save_win_game_event",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_should_log_cron_event": {
            "name": "test_should_log_cron_event",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        }
    },
    "doppelkopf-master/backend/test/test_sockets.py": {
        "test_should_connect_unknown_player": {
            "name": "test_should_connect_unknown_player",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "socket_client": []
            }
        },
        "test_should_emit_error_when_joining_unknown_game": {
            "name": "test_should_emit_error_when_joining_unknown_game",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "socket_client": []
            }
        },
        "test_should_emit_joined_event_when_joining_successfully": {
            "name": "test_should_emit_joined_event_when_joining_successfully",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "socket_client": []
            }
        },
        "test_should_update_game_on_join": {
            "name": "test_should_update_game_on_join",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "socket_client": []
            }
        },
        "test_should_not_let_more_than_4_players_join": {
            "name": "test_should_not_let_more_than_4_players_join",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "socket_client": []
            }
        },
        "test_should_reconnect_when_game_has_started": {
            "name": "test_should_reconnect_when_game_has_started",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "socket_client": [
                    "dict"
                ]
            }
        },
        "test_should_send_left_event_on_disconnect": {
            "name": "test_should_send_left_event_on_disconnect",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "socket_client": []
            }
        },
        "test_should_mark_player_as_disconnected_on_disconnect_if_game_is_started": {
            "name": "test_should_mark_player_as_disconnected_on_disconnect_if_game_is_started",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "socket_client": []
            }
        },
        "test_remove_player_on_disconnect_if_game_is_not_started_yet": {
            "name": "test_remove_player_on_disconnect_if_game_is_not_started_yet",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "socket_client": []
            }
        },
        "_create_game": {
            "name": "_create_game",
            "location": 149,
            "return": [
                "str",
                "Optional[int]",
                "tuple",
                "int"
            ],
            "arguments": {
                "client": []
            }
        },
        "_start_game": {
            "name": "_start_game",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "game_id": [
                    "str",
                    "int",
                    "Dict"
                ]
            }
        },
        "_join_payload": {
            "name": "_join_payload",
            "location": 161,
            "return": [
                "Dict[(str, Dict[(str, Union[(str, _T0)])])]"
            ],
            "arguments": {
                "game_id": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "doppelkopf-master/backend/test/test_stats.py": {
        "test_should_calculate_weekly_stats": {
            "name": "test_should_calculate_weekly_stats",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "int",
                    "str"
                ]
            }
        },
        "test_should_calculate_total_stats": {
            "name": "test_should_calculate_total_stats",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "int",
                    "str"
                ]
            }
        },
        "save_stats": {
            "name": "save_stats",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "doppelkopf-master/backend/test/test_toggles.py": {
        "test_serialize": {
            "name": "test_serialize",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update_toggle_state": {
            "name": "test_update_toggle_state",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "doppelkopf-master/backend/test/__init__.py": {}
}
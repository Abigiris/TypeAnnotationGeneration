{
    "dopplerr-master/setup.py": {},
    "dopplerr-master/cfgtree/cfgtree.py": {
        "EnvironmentConfig.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnvironmentConfig.mkxpath": {
            "name": "mkxpath",
            "location": 38,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "xpath": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]"
                ],
                "name": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "EnvironmentConfig._inject_names": {
            "name": "_inject_names",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "str",
                    "None",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "xpath": [
                    "str",
                    "None",
                    "Dict",
                    "List",
                    "Container[str]",
                    "Container"
                ]
            }
        },
        "EnvironmentConfig.set_cfg_value": {
            "name": "set_cfg_value",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xpath": [
                    "bool",
                    "Callable",
                    "Optional[int]",
                    "str",
                    "None",
                    "List[str]",
                    "MutableMapping[str,Any]",
                    "MutableMapping"
                ],
                "value": [
                    "bool",
                    "Callable",
                    "Optional[int]",
                    "str",
                    "None",
                    "List[str]",
                    "MutableMapping[str,Any]",
                    "MutableMapping"
                ]
            }
        },
        "EnvironmentConfig.get_cfg_value": {
            "name": "get_cfg_value",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "xpath": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "default": [
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "EnvironmentConfig.find_configuration_values": {
            "name": "find_configuration_values",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnvironmentConfig._load_configuration": {
            "name": "_load_configuration",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnvironmentConfig.save_configuration": {
            "name": "save_configuration",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnvironmentConfig._load_cfg_dict": {
            "name": "_load_cfg_dict",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "Dict",
                    "Dict[str,str]",
                    "Dict[str,int]",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,dict[str,Any]]"
                ],
                "xpath": [
                    "str",
                    "None",
                    "List[str]",
                    "bool",
                    "Callable[[T],bool]",
                    "Callable[T,bool]"
                ]
            }
        },
        "EnvironmentConfig._load_environment_variables": {
            "name": "_load_environment_variables",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xpath": [
                    "str"
                ],
                "root": [
                    "Dict",
                    "Dict[str,Any]",
                    "Tuple[bytes]"
                ]
            }
        },
        "EnvironmentConfig._load_cmd_line_arg": {
            "name": "_load_cmd_line_arg",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnvironmentConfig._find_cfg_for_cmd_line_name": {
            "name": "_find_cfg_for_cmd_line_name",
            "location": 139,
            "return": [
                "str",
                "Tuple[str]",
                "float",
                "Dict[str,Any]",
                "None",
                "Pattern"
            ],
            "arguments": {
                "self": [],
                "cmd_line_name": [
                    "str",
                    "int"
                ],
                "root": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        },
        "EnvironmentConfig._inject_cfg_in_parser": {
            "name": "_inject_cfg_in_parser",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "argparse.ArgumentParser",
                    "argparse._SubParsersAction"
                ],
                "xpath": [
                    "None",
                    "argparse._MutuallyExclusiveGroup",
                    "argparse.ArgumentParser",
                    "argparse._SubParsersAction"
                ],
                "root": [
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "str"
                ]
            }
        },
        "EnvironmentConfig._dict": {
            "name": "_dict",
            "location": 187,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "Optional[str]",
                    "None",
                    "bool",
                    "Optional[List[str]]",
                    "str",
                    "List[str]"
                ],
                "safe": [
                    "str",
                    "bool"
                ]
            }
        },
        "EnvironmentConfig.json": {
            "name": "json",
            "location": 208,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "safe": [
                    "bool",
                    "str",
                    "Dict",
                    "ks.Series",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "dopplerr-master/cfgtree/dictxpath.py": {
        "get_node_by_xpath": {
            "name": "get_node_by_xpath",
            "location": 16,
            "return": [
                "None",
                "Dict",
                "bool",
                "Set[str]",
                "Dict[int,Dict[int,Any]]",
                "Union[type,Tuple[type,...]]",
                "str",
                "List"
            ],
            "arguments": {
                "mapping": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[Union[Any, Any]]",
                    "T"
                ],
                "xpath": [
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[str,Sequence[str]]",
                    "Dict[str,Sequence[Any]]"
                ],
                "default": [
                    "bool",
                    "None",
                    "Dict",
                    "int"
                ],
                "ignore_errors": [
                    "bool",
                    "int",
                    "Dict"
                ],
                "handle_list_selector": [
                    "bool",
                    "List[str]",
                    "List",
                    "List[dict]"
                ]
            }
        },
        "set_node_by_xpath": {
            "name": "set_node_by_xpath",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "mapping": [
                    "Dict[str, Dict[str, Any]]",
                    "str"
                ],
                "xpath": [
                    "str",
                    "Optional[str]"
                ],
                "value": [
                    "int",
                    "str",
                    "Callable",
                    "Dict[str,Any]",
                    "bool"
                ],
                "extend": [
                    "bool",
                    "Optional[int]",
                    "int",
                    "Optional[bool]",
                    "Type[T]",
                    "Optional[str]"
                ],
                "setter_attr": [
                    "str",
                    "None",
                    "Optional[str]",
                    "bool",
                    "Optional[Mapping[str,Any]]",
                    "Mapping"
                ]
            }
        },
        "delete_node_by_xpath": {
            "name": "delete_node_by_xpath",
            "location": 114,
            "return": [
                "None",
                "Sequence[Hashable]",
                "Iterable[T]"
            ],
            "arguments": {
                "mapping": [],
                "xpath": [
                    "str",
                    "Optional[str]"
                ],
                "ignore_errors": [
                    "bool",
                    "str",
                    "Exception"
                ]
            }
        }
    },
    "dopplerr-master/cfgtree/storages.py": {
        "_ConfigStorageBase.find_config_storage": {
            "name": "find_config_storage",
            "location": 18,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ConfigStorageBase.get_bare_config_dict": {
            "name": "get_bare_config_dict",
            "location": 21,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ConfigStorageBase.save_bare_config_dict": {
            "name": "save_bare_config_dict",
            "location": 24,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "bare_cfg": [
                    "str",
                    "bool",
                    "List[dict]",
                    "Sequence[int]",
                    "int"
                ]
            }
        },
        "JsonFileConfigStorage.find_config_storage": {
            "name": "find_config_storage",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonFileConfigStorage._load_bare_config": {
            "name": "_load_bare_config",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonFileConfigStorage.save_bare_config_dict": {
            "name": "save_bare_config_dict",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bare_cfg": [
                    "Dict[str,Any]",
                    "bytes",
                    "Mapping[str,str]",
                    "Dict",
                    "Mapping"
                ]
            }
        },
        "JsonFileConfigStorage.get_bare_config_dict": {
            "name": "get_bare_config_dict",
            "location": 72,
            "return": [
                "Dict[str, Any]",
                "Mapping[str, Any]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dopplerr-master/cfgtree/types.py": {
        "_CfgBase.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "l": [
                    "int",
                    "None",
                    "str",
                    "Optional[float]",
                    "bool",
                    "float"
                ],
                "s": [
                    "bool",
                    "str",
                    "None",
                    "float"
                ],
                "h": [
                    "str",
                    "float",
                    "None"
                ],
                "r": [
                    "bool",
                    "int",
                    "str",
                    "Optional[float]"
                ],
                "d": [
                    "Sequence[str]",
                    "Optional[int]",
                    "bool",
                    "str"
                ]
            }
        },
        "_CfgBase.set_value": {
            "name": "set_value",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float"
                ]
            }
        },
        "_CfgBase.value": {
            "name": "value",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "T",
                    "str",
                    "dict"
                ]
            }
        },
        "_CfgBase.environ_var_name": {
            "name": "environ_var_name",
            "location": 52,
            "return": [
                "BaseException",
                "Exception",
                "Type[BaseException]",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CfgBase.get_cmd_line_params": {
            "name": "get_cmd_line_params",
            "location": 55,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CfgBase._environ_var_value": {
            "name": "_environ_var_value",
            "location": 64,
            "return": [
                "str",
                "int",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CfgBase.read_environ_var": {
            "name": "read_environ_var",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CfgBase.long_param": {
            "name": "long_param",
            "location": 71,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CfgBase.cmd_line_name": {
            "name": "cmd_line_name",
            "location": 79,
            "return": [
                "str",
                "bool",
                "float",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CfgBase.action": {
            "name": "action",
            "location": 83,
            "return": [
                "Text",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CfgBase.n_args": {
            "name": "n_args",
            "location": 87,
            "return": [
                "Optional[str]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CfgBase.safe_value": {
            "name": "safe_value",
            "location": 91,
            "return": [
                "str",
                "Type[T]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CfgBase.cfgfile_value": {
            "name": "cfgfile_value",
            "location": 98,
            "return": [
                "Text",
                "bool",
                "Union[int,Tuple[int,...]]",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CfgBase.metavar": {
            "name": "metavar",
            "location": 105,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringCfg.read_environ_var": {
            "name": "read_environ_var",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListOfStringCfg.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListOfStringCfg.read_environ_var": {
            "name": "read_environ_var",
            "location": 126,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListOfStringCfg.cfgfile_value": {
            "name": "cfgfile_value",
            "location": 131,
            "return": [
                "str",
                "int",
                "Tuple",
                "List[int]",
                "Callable[[Mapping],T]",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListOfStringCfg.arg_type": {
            "name": "arg_type",
            "location": 138,
            "return": [
                "List[str]",
                "str",
                "List",
                "Exception"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "IntCfg.read_environ_var": {
            "name": "read_environ_var",
            "location": 145,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HardcodedCfg.get_cmd_line_params": {
            "name": "get_cmd_line_params",
            "location": 161,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HardcodedCfg.read_environ_var": {
            "name": "read_environ_var",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HardcodedCfg.long_param": {
            "name": "long_param",
            "location": 168,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserCfg.user": {
            "name": "user",
            "location": 175,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PasswordCfg.password": {
            "name": "password",
            "location": 182,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PasswordCfg.safe_value": {
            "name": "safe_value",
            "location": 186,
            "return": [
                "Text",
                "str",
                "int",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirNameCfg.set_value": {
            "name": "set_value",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float"
                ]
            }
        },
        "BoolCfg.read_environ_var": {
            "name": "read_environ_var",
            "location": 208,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoolCfg.action": {
            "name": "action",
            "location": 213,
            "return": [
                "bool",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoolCfg.metavar": {
            "name": "metavar",
            "location": 217,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiChoiceCfg.__init__": {
            "name": "__init__",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "choices": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "MultiChoiceCfg.arg_type": {
            "name": "arg_type",
            "location": 227,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ]
            }
        },
        "SingleChoiceCfg.__init__": {
            "name": "__init__",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "choices": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "SingleChoiceCfg.arg_type": {
            "name": "arg_type",
            "location": 242,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ]
            }
        }
    },
    "dopplerr-master/cfgtree/__init__.py": {},
    "dopplerr-master/cfgtree/tests/test_dictxparth.py": {
        "DictXpathTests.test_get_node_by_path": {
            "name": "test_get_node_by_path",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictXpathTests.test_get_node_by_path_empty_mapping": {
            "name": "test_get_node_by_path_empty_mapping",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictXpathTests.test_get_node_by_path_invalid_first_level": {
            "name": "test_get_node_by_path_invalid_first_level",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictXpathTests.test_get_node_by_path_mapping_not_dict": {
            "name": "test_get_node_by_path_mapping_not_dict",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictXpathTests.test_get_node_by_path_incomplete_mapping": {
            "name": "test_get_node_by_path_incomplete_mapping",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictXpathTests.test_set_node_by_path": {
            "name": "test_set_node_by_path",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictXpathTests.test_delete_node_by_path": {
            "name": "test_delete_node_by_path",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictXpathTests.test_get_node_by_path_with_list_selector": {
            "name": "test_get_node_by_path_with_list_selector",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictXpathTests.test_get_node_w_lst_selctr_sub_list": {
            "name": "test_get_node_w_lst_selctr_sub_list",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictXpathTests.test_get_w_bad_lst_selctr_n_default_val": {
            "name": "test_get_w_bad_lst_selctr_n_default_val",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dopplerr-master/cfgtree/tests/__init__.py": {},
    "dopplerr-master/dopplerr/config.py": {
        "_find_frontend_data": {
            "name": "_find_frontend_data",
            "location": 31,
            "return": [
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "dopplerr-master/dopplerr/db.py": {
        "DopplerrDb.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DopplerrDb.database": {
            "name": "database",
            "location": 63,
            "return": [
                "int",
                "List[str]",
                "str",
                "Callable",
                "Tuple[Union[tuple[Union[Any,Any]],tuple[Union[Any,Any]]]]",
                "SqliteQueueDatabase"
            ],
            "arguments": {
                "self": []
            }
        },
        "DopplerrDb.conn": {
            "name": "conn",
            "location": 70,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]",
                "allennlp.models.Model"
            ],
            "arguments": {
                "self": []
            }
        },
        "DopplerrDb.init": {
            "name": "init",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sqlite_db_path": [
                    "pathlib.Path",
                    "str",
                    "bool",
                    "TextIO"
                ],
                "reset_db": [
                    "bool",
                    "str",
                    "Tuple[int,int]"
                ]
            }
        },
        "DopplerrDb.create_tables": {
            "name": "create_tables",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DopplerrDb.insert_event": {
            "name": "insert_event",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "thetype": [
                    "str",
                    "int"
                ],
                "message": [
                    "str",
                    "int"
                ]
            }
        },
        "DopplerrDb.get_recent_events": {
            "name": "get_recent_events",
            "location": 87,
            "return": [
                "List[dict[Text,]]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "Dict",
                    "str",
                    "pathlib.Path",
                    "Tuple[Union[str,int]]",
                    "Tuple[str,int]"
                ]
            }
        },
        "DopplerrDb.update_series_media": {
            "name": "update_series_media",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "series_title": [
                    "str",
                    "Dict[str,str]",
                    "bool"
                ],
                "tv_db_id": [
                    "int",
                    "str",
                    "datetime.datetime"
                ],
                "season_number": [
                    "int",
                    "str",
                    "datetime.datetime"
                ],
                "episode_number": [
                    "int",
                    "str",
                    "datetime.datetime"
                ],
                "episode_title": [
                    "str",
                    "Dict[str,str]",
                    "bool"
                ],
                "quality": [
                    "str",
                    "Dict[str,str]",
                    "bool"
                ],
                "video_languages": [
                    "str",
                    "Dict[str,str]",
                    "bool"
                ],
                "media_filename": [
                    "int",
                    "str",
                    "datetime.datetime"
                ],
                "dirty": [
                    "bool",
                    "str",
                    "Dict[str,str]"
                ]
            }
        },
        "DopplerrDb._get_or_create": {
            "name": "_get_or_create",
            "location": 123,
            "return": [
                "bool",
                "Tuple[bool]"
            ],
            "arguments": {
                "model": [
                    "bool",
                    "allennlp.models.model.Model",
                    "django.db.models.Model"
                ]
            }
        },
        "DopplerrDb.update_fetched_series_subtitles": {
            "name": "update_fetched_series_subtitles",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "series_episode_uid": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "subtitles_languages": [
                    "str",
                    "bool",
                    "int"
                ],
                "dirty": [
                    "bool",
                    "int",
                    "List[str]",
                    "Optional[str]",
                    "Optional[Union[str,Any]]",
                    "Sequence[str]",
                    "str",
                    "float"
                ]
            }
        },
        "DopplerrDb.get_last_fetched_series": {
            "name": "get_last_fetched_series",
            "location": 147,
            "return": [
                "List[dict[Text,]]",
                "Optional[List[str]]",
                "Optional[str]",
                "Optional[Tuple[str]]",
                "Optional[float]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "str",
                    "int"
                ]
            }
        },
        "DopplerrDb.get_medias_series": {
            "name": "get_medias_series",
            "location": 162,
            "return": [
                "List[dict[Text,list]]",
                "Optional[str]",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DopplerrDb.media_exists": {
            "name": "media_exists",
            "location": 179,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "media_filename": [
                    "str",
                    "int",
                    "pathlib.Path"
                ]
            }
        }
    },
    "dopplerr-master/dopplerr/downloader.py": {
        "DopplerrDownloader.process_fullscan": {
            "name": "process_fullscan",
            "location": 15,
            "return": [
                "Dict[Text,Text]",
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": [],
                "_request": [
                    "bool"
                ]
            }
        }
    },
    "dopplerr-master/dopplerr/json.py": {
        "_pretty_kw": {
            "name": "_pretty_kw",
            "location": 9,
            "return": [
                "Dict[(str, Union[(int, Tuple[(str, str)])])]"
            ],
            "arguments": {}
        },
        "safe_dumps": {
            "name": "safe_dumps",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "data": [
                    "Dict",
                    "Dict[str,Any]",
                    "Type",
                    "bool",
                    "Iterable"
                ]
            }
        },
        "_EnumEncoder.default": {
            "name": "default",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int"
                ]
            }
        }
    },
    "dopplerr-master/dopplerr/logging.py": {
        "setup_logging": {
            "name": "setup_logging",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "outputtype": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "Iterable[str]"
                ],
                "debug": [
                    "bool",
                    "Optional[str]",
                    "starfish.core.util.logging.Log",
                    "int",
                    "logging.Logger"
                ],
                "unbuffered": [
                    "bool",
                    "Union[float,Tuple[float,float]]",
                    "Optional[dict]",
                    "float",
                    "int"
                ],
                "logfile": [
                    "str",
                    "None",
                    "bool",
                    "Any",
                    "Optional[Any]",
                    "Optional[int]",
                    "Optional[logging.Formatter]",
                    "logging.Logger"
                ],
                "dev_allow_colors": [
                    "bool",
                    "int"
                ],
                "dev_split": [
                    "bool",
                    "int"
                ],
                "dev_module_verbose": [
                    "bool",
                    "int"
                ],
                "dev_force_fmt": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "dev_force_no_tty": [
                    "bool",
                    "None",
                    "int"
                ],
                "custom_log_levels": [
                    "bool",
                    "int"
                ]
            }
        },
        "setup_logging.InfoFilter.filter": {
            "name": "filter",
            "location": 106,
            "return": [
                "bool",
                "float",
                "logging.LogRecord",
                "Callable[[None],bool]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "float",
                    "logging.LogRecord",
                    "Callable[[None], bool]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "setup_logging.SplitFormatterMixin.format": {
            "name": "format",
            "location": 127,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "tuple"
                ]
            }
        },
        "setup_logging.SplitFormatterMixin._get_formated_line": {
            "name": "_get_formated_line",
            "location": 161,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "List[Tuple[str, int]]"
                ]
            }
        },
        "setup_logging.SplitFormatter.__init__": {
            "name": "__init__",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fmt": [
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[float]"
                ],
                "datefmt": [
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[float]"
                ],
                "term_width": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "split": [
                    "str",
                    "bool"
                ]
            }
        },
        "setup_logging.SplitFormatter._get_record_with_fmt": {
            "name": "_get_record_with_fmt",
            "location": 190,
            "return": [
                "int",
                "Optional[str]",
                "Optional[bool]",
                "Callable",
                "list"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "setup_logging.SplitColorFormatter.__init__": {
            "name": "__init__",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fmt": [
                    "None",
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "datefmt": [
                    "None",
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "term_width": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "split": [
                    "str",
                    "bool"
                ],
                "log_colors": [
                    "None",
                    "int",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "setup_logging.SplitColorFormatter._get_record_with_fmt": {
            "name": "_get_record_with_fmt",
            "location": 202,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "Tuple['cirq.Qid']"
                ]
            }
        }
    },
    "dopplerr-master/dopplerr/main.py": {
        "main": {
            "name": "main",
            "location": 22,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "dopplerr-master/dopplerr/main_pyannotate.py": {
        "main_pyannotate": {
            "name": "main_pyannotate",
            "location": 15,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "dopplerr-master/dopplerr/request_filter.py": {
        "_FilterBase.appy_path_mapping": {
            "name": "appy_path_mapping",
            "location": 14,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "str"
                ]
            }
        },
        "_FilterBase.lowerize_dick_keys": {
            "name": "lowerize_dick_keys",
            "location": 32,
            "return": [
                "dict"
            ],
            "arguments": {
                "thedict": [
                    "Dict[str,Any]",
                    "Dict",
                    "Dict[int,dict[int,Any]]",
                    "BaseException",
                    "Dict[int,Dict[int,Any]]",
                    "Union[Dict,List]"
                ]
            }
        }
    },
    "dopplerr-master/dopplerr/response.py": {
        "Response.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.processing": {
            "name": "processing",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "None",
                    "bytes"
                ]
            }
        },
        "Response.failed": {
            "name": "failed",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Dict",
                    "logging.Logger"
                ]
            }
        },
        "Response.unhandled": {
            "name": "unhandled",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "Response.is_unhandled": {
            "name": "is_unhandled",
            "location": 39,
            "return": [
                "bool",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.is_failed": {
            "name": "is_failed",
            "location": 43,
            "return": [
                "bool",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.__update_status": {
            "name": "__update_status",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str",
                    "List[int]",
                    "Optional[Any]",
                    "Dict[str,T]",
                    "Any",
                    "None",
                    "Union[int,str,None]",
                    "int"
                ],
                "message": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "int",
                    "bytes",
                    "Dict[str,Any]",
                    "Optional[int]",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "Response.successful": {
            "name": "successful",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "None",
                    "bytes"
                ]
            }
        },
        "Response.is_successful": {
            "name": "is_successful",
            "location": 57,
            "return": [
                "bool",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.to_dict": {
            "name": "to_dict",
            "location": 60,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response._to_dict": {
            "name": "_to_dict",
            "location": 66,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "dat": [
                    "Dict[str,Any]",
                    "Dict",
                    "Dict[str,float]",
                    "Dict[str,dict[str,str]]",
                    "Dict[str,Dict[str,str]]",
                    "Mapping"
                ]
            }
        },
        "Response.to_json": {
            "name": "to_json",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.request_type": {
            "name": "request_type",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "thetype": [
                    "str"
                ]
            }
        },
        "Response.request_event": {
            "name": "request_event",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "event": [
                    "Dict[str, Any]",
                    "Optional['models.LTI1p3Provider']",
                    "bool"
                ]
            }
        },
        "Response.exception": {
            "name": "exception",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "exception": [
                    "Dict[str, Any]",
                    "Optional[Dict[str, str]]",
                    "dict"
                ]
            }
        },
        "UnhandledResponse.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_type": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "message": [
                    "bool",
                    "Sequence[Dict[str,str]]",
                    "Sequence[dict[str,str]]"
                ]
            }
        }
    },
    "dopplerr-master/dopplerr/routes.py": {
        "add_swagger": {
            "name": "add_swagger",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "str",
                    "bool"
                ],
                "json_route": [
                    "str",
                    "bool"
                ],
                "html_route": [
                    "bool",
                    "List[bool]",
                    "List",
                    "Dict[str,dict[str,str]]",
                    "Dict[str,Dict[str,str]]",
                    "None",
                    "List[int]",
                    "Optional[bool]"
                ],
                "title": [
                    "Text",
                    "str",
                    "bool",
                    "List[str]"
                ],
                "version": [
                    "Text",
                    "str",
                    "bool",
                    "List[str]"
                ],
                "base_path": [
                    "str",
                    "bool",
                    "None",
                    "List[str]"
                ]
            }
        },
        "listen": {
            "name": "listen",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dopplerr-master/dopplerr/singleton.py": {
        "__Singleton.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "decorated": [
                    "int",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ]
            }
        },
        "__Singleton.instance": {
            "name": "instance",
            "location": 56,
            "return": [
                "List",
                "int",
                "Dict",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "__Singleton.__call__": {
            "name": "__call__",
            "location": 86,
            "return": [
                "Sequence['cirq.Qid']",
                "bool",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "__Singleton.unload": {
            "name": "unload",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "__Singleton.instance.unload": {
            "name": "unload",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "inst": []
            }
        }
    },
    "dopplerr-master/dopplerr/status.py": {
        "DopplerrStatus.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DopplerrStatus.refresh_from_cfg": {
            "name": "refresh_from_cfg",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DopplerrStatus.has_minor_version_changed": {
            "name": "has_minor_version_changed",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DopplerrStatus._build_subliminal_provider_cfgs": {
            "name": "_build_subliminal_provider_cfgs",
            "location": 68,
            "return": [
                "bool",
                "Dict",
                "str",
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "DopplerrStatus._check_languages": {
            "name": "_check_languages",
            "location": 88,
            "return": [
                "bool"
            ],
            "arguments": {
                "languages": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "dopplerr-master/dopplerr/__init__.py": {},
    "dopplerr-master/dopplerr/api/add_route.py": {
        "describe_add_route": {
            "name": "describe_add_route",
            "location": 9,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "blueprint": [
                    "str",
                    "Iterable[T]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "describe_add_route.decorator": {
            "name": "decorator",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fnc": []
            }
        }
    },
    "dopplerr-master/dopplerr/api/__init__.py": {},
    "dopplerr-master/dopplerr/api/v1/config.py": {},
    "dopplerr-master/dopplerr/api/v1/events.py": {},
    "dopplerr-master/dopplerr/api/v1/medias.py": {},
    "dopplerr-master/dopplerr/api/v1/notify.py": {},
    "dopplerr-master/dopplerr/api/v1/series.py": {},
    "dopplerr-master/dopplerr/api/v1/status.py": {},
    "dopplerr-master/dopplerr/api/v1/__init__.py": {
        "add_api_blueprints": {
            "name": "add_api_blueprints",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        }
    },
    "dopplerr-master/dopplerr/descriptors/media_types.py": {},
    "dopplerr-master/dopplerr/descriptors/series.py": {},
    "dopplerr-master/dopplerr/descriptors/__init__.py": {},
    "dopplerr-master/dopplerr/notifications/pushover.py": {
        "NotificationPushOver.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "user": [
                    "Dict",
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "registered_notifications": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "bool"
                ]
            }
        }
    },
    "dopplerr-master/dopplerr/notifications/_base.py": {
        "_NotificationBase.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registered_notification": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "_NotificationBase.can_emit_notification_type": {
            "name": "can_emit_notification_type",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "requested_notif_type": [
                    "bool",
                    "T"
                ]
            }
        }
    },
    "dopplerr-master/dopplerr/notifications/__init__.py": {},
    "dopplerr-master/dopplerr/notifications_types/series_media_refreshed.py": {
        "SeriesMediaRefreshedNotification.one_liner": {
            "name": "one_liner",
            "location": 17,
            "return": [
                "str",
                "Optional[str]",
                "Dict",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dopplerr-master/dopplerr/notifications_types/series_subtitles_fetched.py": {
        "SubtitleFetchedNotification.one_liner": {
            "name": "one_liner",
            "location": 18,
            "return": [
                "str",
                "Optional[str]",
                "Dict",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dopplerr-master/dopplerr/notifications_types/_base.py": {
        "_SeriesNotificationBase.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "series_episode_info": [
                    "Dict",
                    "Callable",
                    "Dict[str,Tuple[Any,Any,Any]]",
                    "Dict[str,tuple[Union[Any,Any,Any]]]"
                ]
            }
        }
    },
    "dopplerr-master/dopplerr/notifications_types/__init__.py": {},
    "dopplerr-master/dopplerr/plugins/__init__.py": {},
    "dopplerr-master/dopplerr/plugins/sonarr/filter.py": {
        "SonarrFilter.process_on_download.concat_path": {
            "name": "concat_path",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "str_a": [
                    "str",
                    "Optional[List[str]]",
                    "Union[str, bytes]"
                ],
                "str_b": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[int]",
                    "Tuple[str, int]",
                    "List[int]",
                    "bool"
                ]
            }
        }
    },
    "dopplerr-master/dopplerr/plugins/sonarr/response.py": {
        "SonarrOnDownloadResponse.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SonarrOnDownloadResponse.subtitles": {
            "name": "subtitles",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "subtitles": [
                    "str",
                    "float"
                ]
            }
        },
        "SonarrOnDownloadResponse.candidates": {
            "name": "candidates",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "candidates": [
                    "int",
                    "bool"
                ]
            }
        },
        "SonarrOnDownloadResponse.sonarr_episode_infos": {
            "name": "sonarr_episode_infos",
            "location": 36,
            "return": [
                "List[dict[Text,list[str]]]",
                "Dict[str,Any]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dopplerr-master/dopplerr/plugins/sonarr/task.py": {
        "DopplerrTask.post_task": {
            "name": "post_task",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "Mapping[str,Any]",
                    "Dict",
                    "Mapping",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "dopplerr-master/dopplerr/plugins/sonarr/__init__.py": {},
    "dopplerr-master/dopplerr/tasks/base.py": {},
    "dopplerr-master/dopplerr/tasks/disk_scanner.py": {
        "DiskScanner.init": {
            "name": "init",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiskScanner.interval_hours": {
            "name": "interval_hours",
            "location": 100,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dopplerr-master/dopplerr/tasks/download_subtitles.py": {
        "DownloadSubtitleTask.search_file": {
            "name": "search_file",
            "location": 39,
            "return": [
                "List",
                "bool",
                "str",
                "pathlib.Path",
                "pathlib.PosixPath"
            ],
            "arguments": {
                "root_dir": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "base_name": [
                    "str"
                ]
            }
        },
        "DownloadSubtitleTask._refresh_db_media": {
            "name": "_refresh_db_media",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "candidate": [
                    "Dict[str,str]",
                    "str",
                    "bool",
                    "MutableMapping[str,Any]"
                ],
                "media_filename": [
                    "str",
                    "bool",
                    "Dict[str,str]",
                    "MutableMapping[str,Any]",
                    "MutableMapping"
                ]
            }
        },
        "DownloadSubtitleTask._search_candidate_files": {
            "name": "_search_candidate_files",
            "location": 103,
            "return": [
                "str",
                "pathlib.Path",
                "List",
                "List[str]",
                "None"
            ],
            "arguments": {
                "self": [],
                "candidate": [
                    "str",
                    "Union[str,pathlib.Path]"
                ],
                "res": [
                    "int",
                    "bytes",
                    "float",
                    "bool",
                    "str",
                    "Sequence[str]",
                    "Optional[\"CustomFieldsDraft\"]"
                ]
            }
        },
        "DownloadSubtitleTask.filter_video_files": {
            "name": "filter_video_files",
            "location": 114,
            "return": [
                "None",
                "Iterator[object]",
                "List[str]",
                "bool",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "candidate_files": [
                    "str",
                    "Union[str,pathlib.Path]"
                ],
                "res": [
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "int"
                ]
            }
        }
    },
    "dopplerr-master/dopplerr/tasks/manager.py": {
        "DopplerrTasksManager.post_task": {
            "name": "post_task",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "Dict[str,Any]",
                    "bool",
                    "Dict"
                ]
            }
        },
        "DopplerrTasksManager.start": {
            "name": "start",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DopplerrTasksManager.stop": {
            "name": "stop",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DopplerrTasksManager.status": {
            "name": "status",
            "location": 47,
            "return": [
                "Dict[Text,dict[Text,int]]",
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dopplerr-master/dopplerr/tasks/periodic.py": {
        "PeriodicTask.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeriodicTask.init": {
            "name": "init",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeriodicTask._add_job_kwargs": {
            "name": "_add_job_kwargs",
            "location": 49,
            "return": [
                "IO[str]",
                "str",
                "List",
                "Dict[str,Any]",
                "int",
                "float",
                "Tuple[Union[Literal,Literal,Literal,Literal]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeriodicTask.job": {
            "name": "job",
            "location": 60,
            "return": [
                "Sequence[str]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeriodicTask.add_job": {
            "name": "add_job",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scheduler": [
                    "Any"
                ]
            }
        },
        "PeriodicTask.next_run_time": {
            "name": "next_run_time",
            "location": 74,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeriodicTask.next_run_time_iso": {
            "name": "next_run_time_iso",
            "location": 80,
            "return": [
                "str",
                "Union[int, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeriodicTask.interval": {
            "name": "interval",
            "location": 86,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeriodicTask.started": {
            "name": "started",
            "location": 96,
            "return": [
                "int",
                "Tuple[str, str]",
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeriodicTask.stop": {
            "name": "stop",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeriodicTask.stopped": {
            "name": "stopped",
            "location": 103,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeriodicTask.interrupt": {
            "name": "interrupt",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeriodicTask.interrupted": {
            "name": "interrupted",
            "location": 110,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dopplerr-master/dopplerr/tasks/queued.py": {
        "QueuedTask.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueuedTask.start": {
            "name": "start",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueuedTask.stop": {
            "name": "stop",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueuedTask.stopped": {
            "name": "stopped",
            "location": 109,
            "return": [
                "bool",
                "float",
                "Tuple[Tuple[int,Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueuedTask.started": {
            "name": "started",
            "location": 113,
            "return": [
                "int",
                "Tuple[str, str]",
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dopplerr-master/dopplerr/tasks/threaded.py": {
        "ThreadedTask.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dopplerr-master/dopplerr/tasks/__init__.py": {},
    "dopplerr-master/dopplerr/tasks/subtasks/subliminal.py": {
        "SubliminalSubDownloader.initialize_db": {
            "name": "initialize_db",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "SubliminalSubDownloader.filter_video_files": {
            "name": "filter_video_files",
            "location": 77,
            "return": [
                "list"
            ],
            "arguments": {
                "files": [
                    "List[str]",
                    "IO[str]",
                    "IO[Any]",
                    "Sequence[str]"
                ]
            }
        },
        "SubliminalSubDownloader.get_subtitle_path": {
            "name": "get_subtitle_path",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "video_file": [
                    "str"
                ],
                "language": [
                    "str"
                ]
            }
        },
        "SubliminalSubDownloader.save_subtitles": {
            "name": "save_subtitles",
            "location": 92,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "video": [
                    "List[int]"
                ],
                "subtitle_info": [
                    "List[int]"
                ]
            }
        },
        "RefineVideoFileTask._refine_file": {
            "name": "_refine_file",
            "location": 102,
            "return": [
                "List[dopplerr.descriptors.series.SeriesEpisodeInfo]"
            ],
            "arguments": {
                "video_file": [
                    "str"
                ]
            }
        }
    },
    "dopplerr-master/dopplerr/tasks/subtasks/__init__.py": {},
    "dopplerr-master/dopplerr/tasks/tests/test_aps.py": {
        "test_apscheduler": {
            "name": "test_apscheduler",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_apscheduler.tick": {
            "name": "tick",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dopplerr-master/dopplerr/tasks/tests/test_download_subtitles.py": {
        "TestGlob.assert_list_size": {
            "name": "assert_list_size",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lst": [
                    "int",
                    "Tuple[int, int]",
                    "float",
                    "list"
                ],
                "size": [
                    "int",
                    "float",
                    "Tuple[int,int]",
                    "List",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "TestGlob.test_glob_simple_filename": {
            "name": "test_glob_simple_filename",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGlob.test_glob_filename_with_bracket": {
            "name": "test_glob_filename_with_bracket",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dopplerr-master/dopplerr/tasks/tests/test_executors.py": {
        "TestApscheduler.test_executors.mkprefix": {
            "name": "mkprefix",
            "location": 34,
            "return": [
                "int",
                "slice",
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "i": [
                    "int",
                    "slice",
                    "T",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "TestApscheduler.test_executors.long_sync_task": {
            "name": "long_sync_task",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "i": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "dopplerr-master/dopplerr/tasks/tests/test_queued.py": {
        "MyTask.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyTask.add_event": {
            "name": "add_event",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "List[dict]",
                    "List[Dict]",
                    "logging.Logger"
                ]
            }
        }
    },
    "dopplerr-master/dopplerr/tasks/tests/__init__.py": {},
    "dopplerr-master/dopplerr/tests/__init__.py": {}
}
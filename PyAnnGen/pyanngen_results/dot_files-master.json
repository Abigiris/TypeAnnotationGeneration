{
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/autoload/denite/_main.py": {
        "attach_vim": {
            "name": "attach_vim",
            "location": 17,
            "return": [
                "dict[str, typing.Any]",
                "int",
                "bytes",
                "Callable",
                "str"
            ],
            "arguments": {
                "serveraddr": [
                    "str",
                    "allennlp.common.util.JsonDict"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "serveraddr": [
                    "str",
                    "bool",
                    "list[str]",
                    "List[str]",
                    "None",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "RedirectStream.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "RedirectStream.write": {
            "name": "write",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "list[str]",
                    "str",
                    "List[str]",
                    "typing.Iterator",
                    "Iterator[str]",
                    "Iterable[str]"
                ]
            }
        },
        "RedirectStream.writelines": {
            "name": "writelines",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "list[str]",
                    "str",
                    "List[str]",
                    "IO[str]",
                    "Sequence[str]",
                    "Union[List[str], str]"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/aprocess.py": {
        "Process.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "plugin": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Process.connection_made": {
            "name": "connection_made",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "str",
                    "Iterable[T]",
                    "int"
                ]
            }
        },
        "Process.pipe_data_received": {
            "name": "pipe_data_received",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "fd": [
                    "int",
                    "str"
                ],
                "data": [
                    "Dict[str, Any]",
                    "bytes",
                    "dict[str, typing.Any]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "None"
                ]
            }
        },
        "Process.process_exited": {
            "name": "process_exited",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/child.py": {
        "Child.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Child.main_loop": {
            "name": "main_loop",
            "location": 39,
            "return": [
                "bytes",
                "None"
            ],
            "arguments": {
                "self": [],
                "stdout": [
                    "List[str]",
                    "bool",
                    "list[str]",
                    "Optional[Sequence[str]]",
                    "typing.Sequence[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        },
        "Child.main": {
            "name": "main",
            "location": 62,
            "return": [
                "None",
                "str",
                "bool",
                "List[int]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "List[dict]",
                    "list[dict[, ]]",
                    "Optional[Any]",
                    "typing.Any",
                    "int",
                    "None"
                ],
                "args": [],
                "queue_id": [
                    "str",
                    "bool",
                    "List[dict]",
                    "list[dict[, ]]",
                    "Optional[Any]",
                    "typing.Any",
                    "int",
                    "None"
                ]
            }
        },
        "Child.start": {
            "name": "start",
            "location": 84,
            "return": [
                "None",
                "Union[tuple, list]",
                "Dict[str, Any]",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "Child.gather_candidates": {
            "name": "gather_candidates",
            "location": 107,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "denite.util.UserContext",
                    "Callable"
                ]
            }
        },
        "Child.on_init": {
            "name": "on_init",
            "location": 127,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "denite.util.UserContext",
                    "Callable[[], Awaitable[Mapping]]"
                ]
            }
        },
        "Child.on_close": {
            "name": "on_close",
            "location": 167,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "typing.Type",
                    "denite.util.UserContext",
                    "dict[, ]",
                    "str",
                    "Type",
                    "dict",
                    "py.path.local"
                ]
            }
        },
        "Child.init_syntax": {
            "name": "init_syntax",
            "location": 172,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Union[str, Set]]",
                    "dict[str, typing.Union[str,set[]]]"
                ],
                "is_multi": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Union[str, Set]]",
                    "dict[str, typing.Union[str,set[]]]"
                ]
            }
        },
        "Child.filter_candidates": {
            "name": "filter_candidates",
            "location": 195,
            "return": [
                "bool",
                "list[typing.Union[typing.Text,list[typing.Text],int]]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Dict[str, Any]"
                ]
            }
        },
        "Child.do_action": {
            "name": "do_action",
            "location": 237,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "bool"
                ],
                "action_name": [
                    "str",
                    "int"
                ],
                "targets": [
                    "str",
                    "Callable"
                ]
            }
        },
        "Child.get_action": {
            "name": "get_action",
            "location": 259,
            "return": [
                "str",
                "int",
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str"
                ],
                "action_name": [
                    "str"
                ],
                "targets": [
                    "str"
                ]
            }
        },
        "Child.get_action_names": {
            "name": "get_action_names",
            "location": 271,
            "return": [
                "int",
                "str",
                "list[]",
                "Dict[str, Any]",
                "dict[, ]",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "bool",
                    "str",
                    "Callable",
                    "typing.Callable[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "targets": [
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Any]",
                    "denite.util.Candidate.s",
                    "int"
                ]
            }
        },
        "Child.is_async": {
            "name": "is_async",
            "location": 287,
            "return": [
                "bool",
                "str",
                "List[str]",
                "Union[List[float], List[int]]",
                "list",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Child.debug": {
            "name": "debug",
            "location": 291,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "str",
                    "int"
                ]
            }
        },
        "Child.error": {
            "name": "error",
            "location": 294,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Child._filter_candidates": {
            "name": "_filter_candidates",
            "location": 298,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "context": [
                    "list[util.Block]",
                    "denite.util.UserContext",
                    "List[util.Block]",
                    "util.XYZ",
                    "Union"
                ]
            }
        },
        "Child._filter_source_candidates": {
            "name": "_filter_source_candidates",
            "location": 344,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "denite.util.UserContext",
                    "int",
                    "denite.base.source.Base",
                    "Dict[str, Any]",
                    "str",
                    "List[str]"
                ],
                "source": [
                    "int",
                    "bytes",
                    "dict[, ]",
                    "denite.base.source.Base",
                    "dict"
                ]
            }
        },
        "Child._gather_source_candidates": {
            "name": "_gather_source_candidates",
            "location": 368,
            "return": [
                "bool",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "int",
                    "bool",
                    "dict"
                ],
                "source": [
                    "denite.base.source.Base",
                    "str",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "Child._get_action_targets": {
            "name": "_get_action_targets",
            "location": 375,
            "return": [
                "str",
                "dict[, ]",
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str"
                ],
                "action_name": [
                    "str",
                    "Dict[str, Any]"
                ],
                "targets": [
                    "str",
                    "bool",
                    "denite.util.Candidate.s"
                ]
            }
        },
        "Child._get_source_status": {
            "name": "_get_source_status",
            "location": 387,
            "return": [
                "typing.Text",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "list[int]",
                    "denite.util.Candidate.s",
                    "denite.base.source.Base",
                    "denite.util.UserContext",
                    "List[int]"
                ],
                "source": [
                    "denite.util.Candidate.s",
                    "denite.base.source.Base",
                    "denite.util.UserContext",
                    "str",
                    "List[int]"
                ],
                "entire": [
                    "denite.util.Candidate.s",
                    "denite.base.source.Base",
                    "denite.util.UserContext",
                    "str",
                    "List[int]"
                ],
                "partial": [
                    "denite.util.Candidate.s",
                    "denite.base.source.Base",
                    "denite.util.UserContext",
                    "str",
                    "List[int]"
                ]
            }
        },
        "Child._match_candidates": {
            "name": "_match_candidates",
            "location": 392,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "denite.util.UserContext",
                    "str",
                    "Type"
                ],
                "matchers": [
                    "str",
                    "dict[str, list[str]]",
                    "denite.util.UserContext",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "Child._call_matchers": {
            "name": "_call_matchers",
            "location": 406,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "denite.util.UserContext"
                ],
                "matchers": [
                    "list",
                    "list[]"
                ]
            }
        },
        "Child._set_custom_attribute": {
            "name": "_set_custom_attribute",
            "location": 411,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "kind": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "obj": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "attr": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Child._load_sources": {
            "name": "_load_sources",
            "location": 415,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "denite.util.UserContext"
                ]
            }
        },
        "Child._load_filters": {
            "name": "_load_filters",
            "location": 445,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "typing.Callable[dict[, ], None]",
                    "denite.util.UserContext",
                    "str",
                    "Callable[[dict], None]",
                    "typing.Pattern",
                    "Pattern"
                ]
            }
        },
        "Child._load_kinds": {
            "name": "_load_kinds",
            "location": 479,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict[, ]",
                    "denite.util.UserContext",
                    "typing.Pattern",
                    "dict",
                    "Pattern"
                ]
            }
        },
        "Child._get_kind": {
            "name": "_get_kind",
            "location": 504,
            "return": [
                "str",
                "dict[, ]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "bool",
                    "str",
                    "dict[, ]",
                    "T",
                    "dict"
                ],
                "target": [
                    "str",
                    "Callable[[T], List[T]]",
                    "int",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "Child._get_action_target": {
            "name": "_get_action_target",
            "location": 520,
            "return": [
                "str",
                "dict[, ]",
                "bool",
                "ChainMap",
                "dict[typing.Text, typing.Union[str,bool]]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "action_name": [
                    "str"
                ],
                "target": [
                    "str",
                    "bool"
                ]
            }
        },
        "Child._get_custom_actions": {
            "name": "_get_custom_actions",
            "location": 558,
            "return": [
                "dict[, ]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "kind_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Child._get_display_source_name": {
            "name": "_get_display_source_name",
            "location": 566,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "list[str]",
                    "denite.util.UserContext",
                    "Dict[str, Any]",
                    "List[str]",
                    "bool"
                ],
                "is_multi": [
                    "bool",
                    "dict[, ]",
                    "denite.util.UserContext",
                    "str",
                    "list[str]",
                    "dict",
                    "List[str]",
                    "typing.Type",
                    "None",
                    "Optional[Type[Any]]",
                    "int"
                ],
                "name": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/context.py": {
        "Context.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Context.get": {
            "name": "get",
            "location": 15,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "user_context": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, Dict[str, Any]]",
                    "dict[str, dict[str, typing.Any]]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "Context._internal_options": {
            "name": "_internal_options",
            "location": 53,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,list[],int,dict[typing.Text, int]]]",
                "int",
                "dict",
                "Optional[BaseException]",
                "Tuple[int, int, int, int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/parent.py": {
        "_Parent.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "_Parent.start": {
            "name": "start",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "str",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]",
                    "list",
                    "list[]"
                ]
            }
        },
        "_Parent.gather_candidates": {
            "name": "gather_candidates",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "float",
                    "str",
                    "[[]]"
                ]
            }
        },
        "_Parent.on_init": {
            "name": "on_init",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "_Parent.on_close": {
            "name": "on_close",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "_Parent.init_syntax": {
            "name": "init_syntax",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict[str, str]",
                    "int",
                    "Dict[str, str]",
                    "tuple[typing.Union[int,int]]",
                    "Tuple[int, int]",
                    "bool"
                ],
                "is_multi": [
                    "dict[str, str]",
                    "int",
                    "Dict[str, str]",
                    "tuple[typing.Union[int,int]]",
                    "Tuple[int, int]",
                    "bool"
                ]
            }
        },
        "_Parent.filter_candidates": {
            "name": "filter_candidates",
            "location": 43,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "str",
                    "typing.IO",
                    "IO[Any]",
                    "bool"
                ]
            }
        },
        "_Parent.do_action": {
            "name": "do_action",
            "location": 46,
            "return": [
                "Optional[str]",
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "Callable[..., T]",
                    "typing.Callable[..., T]"
                ],
                "action_name": [
                    "str",
                    "Callable[..., T]",
                    "typing.Callable[_, _]"
                ],
                "targets": [
                    "str",
                    "Callable[..., T]",
                    "typing.Callable[..., T]"
                ]
            }
        },
        "_Parent.get_action": {
            "name": "get_action",
            "location": 49,
            "return": [
                "Optional[str]",
                "Dict[str, str]",
                "dict",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str"
                ],
                "action_name": [
                    "str"
                ],
                "targets": [
                    "str"
                ]
            }
        },
        "_Parent.get_action_names": {
            "name": "get_action_names",
            "location": 52,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "None",
                    "Optional[str]",
                    "typing.Callable[str, None]",
                    "Callable[[str], None]",
                    "list[str]",
                    "List[str]",
                    "denite.util.UserContext"
                ],
                "targets": [
                    "str",
                    "None",
                    "Optional[str]",
                    "typing.Callable[str, None]",
                    "Callable[[str], None]",
                    "list[str]",
                    "List[str]",
                    "denite.util.UserContext"
                ]
            }
        },
        "SyncParent._start_process": {
            "name": "_start_process",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyncParent._put": {
            "name": "_put",
            "location": 61,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "Iterable[str]"
                ],
                "args": []
            }
        },
        "SyncParent._get": {
            "name": "_get",
            "location": 64,
            "return": [
                "str",
                "List[Union[int, Any]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "float",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "args": [],
                "is_async": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ASyncParent._start_process": {
            "name": "_start_process",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ASyncParent._connect_stdin": {
            "name": "_connect_stdin",
            "location": 99,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "stdin": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "ASyncParent._put": {
            "name": "_put",
            "location": 121,
            "return": [
                "None",
                "str",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "float",
                    "List[str]",
                    "list[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "args": []
            }
        },
        "ASyncParent._get": {
            "name": "_get",
            "location": 141,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]",
                "bool",
                "str",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "queue_id": [
                    "dict[, ]",
                    "bool",
                    "dict",
                    "str",
                    "Exception",
                    "int",
                    "list[int]",
                    "List[int]"
                ],
                "is_async": [
                    "bool",
                    "dict",
                    "int",
                    "str",
                    "List[int]",
                    "Exception"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/process.py": {
        "Process.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "commands": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Optional[int]",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "context": [
                    "int",
                    "float",
                    "bool"
                ],
                "cwd": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Optional[int]",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Process.eof": {
            "name": "eof",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Process.kill": {
            "name": "kill",
            "location": 35,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Process.enqueue_output": {
            "name": "enqueue_output",
            "location": 49,
            "return": [
                "None",
                "Union[tuple, list]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Process.communicate": {
            "name": "communicate",
            "location": 57,
            "return": [
                "tuple[list[]]",
                "tuple[typing.Union[list[],memoryview]]",
                "str",
                "Dict[str, Any]",
                "OrderedDict",
                "Iterable[Sequence[str]]",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/rplugin.py": {
        "Rplugin.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Rplugin.init_channel": {
            "name": "init_channel",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "Rplugin.start": {
            "name": "start",
            "location": 22,
            "return": [
                "str",
                "int",
                "Union[List[str], List[Any]]",
                "List[int]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "Rplugin.do_action": {
            "name": "do_action",
            "location": 35,
            "return": [
                "str",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "Rplugin.do_map": {
            "name": "do_map",
            "location": 48,
            "return": [
                "int",
                "str",
                "Iterable[T]"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "Rplugin.get_ui": {
            "name": "get_ui",
            "location": 63,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "buffer_name": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/scantree.py": {
        "scantree": {
            "name": "scantree",
            "location": 17,
            "return": [
                "",
                "typing.Generator[]",
                "typing.Generator[typing.Text]"
            ],
            "arguments": {
                "path_name": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ],
                "skip_list": [
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "str",
                    "list[str]"
                ]
            }
        },
        "output_lines": {
            "name": "output_lines",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "lines": [
                    "list[str]",
                    "str",
                    "List[str]",
                    "IO[str]"
                ]
            }
        },
        "is_ignored": {
            "name": "is_ignored",
            "location": 46,
            "return": [
                "bool",
                "Type",
                "type",
                "Optional[Callable[[bool], None]]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "list[typing.Union[str,typing.Any]]",
                    "List[Union[str, Any]]",
                    "typing.Callable[list[], bool]",
                    "Callable[[List], bool]",
                    "Union[str, List[str]]"
                ],
                "ignore_list": [
                    "str",
                    "dict[, ]",
                    "Callable[[], Any]",
                    "list[str]",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "output_files": {
            "name": "output_files",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/socket.py": {
        "Socket.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "int",
                    "str",
                    "bool"
                ],
                "port": [
                    "int",
                    "str",
                    "bool"
                ],
                "commands": [
                    "int",
                    "bool",
                    "list[typing.Any]",
                    "Optional[List[Any]]",
                    "None"
                ],
                "context": [
                    "dict[str, typing.Any]",
                    "dict[str, int]",
                    "bool",
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, int]",
                    "int"
                ],
                "timeout": [
                    "int",
                    "bool",
                    "list[typing.Any]",
                    "Optional[List[Any]]",
                    "None"
                ]
            }
        },
        "Socket.welcome": {
            "name": "welcome",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Socket.eof": {
            "name": "eof",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Socket.kill": {
            "name": "kill",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Socket.sendall": {
            "name": "sendall",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "commands": [
                    "str",
                    "Callable[..., None]",
                    "bool"
                ]
            }
        },
        "Socket.receive": {
            "name": "receive",
            "location": 50,
            "return": [
                "int",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "bytes": [
                    "int",
                    "str",
                    "bytes",
                    "float"
                ]
            }
        },
        "Socket.connect": {
            "name": "connect",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "int"
                ],
                "port": [
                    "str",
                    "int"
                ],
                "timeout": [
                    "int",
                    "float",
                    "str",
                    "list",
                    "list[]"
                ]
            }
        },
        "Socket.enqueue_output": {
            "name": "enqueue_output",
            "location": 75,
            "return": [
                "None",
                "Union[tuple, list]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Socket.communicate": {
            "name": "communicate",
            "location": 91,
            "return": [
                "list[]",
                "str",
                "Dict[str, Any]",
                "OrderedDict",
                "Iterable[Sequence[str]]",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "int",
                    "float",
                    "Union[int, float]",
                    "Optional[float]",
                    "bool",
                    "bytes"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/util.py": {
        "set_default": {
            "name": "set_default",
            "location": 24,
            "return": [
                "Dict[str, int]",
                "dict",
                "Iterable[str]",
                "int",
                "bool"
            ],
            "arguments": {
                "vim": [
                    "str",
                    "pynvim.Nvim",
                    "neovim.Nvim",
                    "int",
                    "float",
                    "T"
                ],
                "var": [
                    "str",
                    "int",
                    "float",
                    "pynvim.Nvim",
                    "neovim.Nvim",
                    "T"
                ],
                "val": [
                    "str",
                    "int",
                    "float",
                    "pynvim.Nvim",
                    "neovim.Nvim",
                    "T"
                ]
            }
        },
        "convert2list": {
            "name": "convert2list",
            "location": 28,
            "return": [
                "list[]",
                "list",
                "list[typing.Union[str,typing.IO,dict[str, typing.Any]]]",
                "Tuple[float, float, float]",
                "int"
            ],
            "arguments": {
                "expr": [
                    "str",
                    "IO",
                    "typing.IO",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "globruntime": {
            "name": "globruntime",
            "location": 32,
            "return": [
                "list[]",
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "runtimepath": [
                    "str"
                ],
                "path": [
                    "str",
                    "int"
                ]
            }
        },
        "echo": {
            "name": "echo",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "vim": [
                    "str",
                    "pynvim.Nvim",
                    "neovim.Nvim",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "color": [
                    "str",
                    "bool",
                    "None",
                    "pynvim.Nvim",
                    "neovim.Nvim",
                    "int",
                    "Optional[str]"
                ],
                "string": [
                    "str",
                    "bool",
                    "None",
                    "pynvim.Nvim",
                    "neovim.Nvim",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "debug": {
            "name": "debug",
            "location": 43,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "vim": [
                    "pynvim.Nvim",
                    "neovim.Nvim",
                    "str",
                    "bool"
                ],
                "expr": [
                    "str"
                ]
            }
        },
        "error": {
            "name": "error",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "vim": [
                    "pynvim.Nvim",
                    "neovim.Nvim",
                    "int",
                    "str"
                ],
                "expr": []
            }
        },
        "error_tb": {
            "name": "error_tb",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "vim": [
                    "neovim.Nvim",
                    "pynvim.Nvim",
                    "str",
                    "dict",
                    "int",
                    "Tuple[traceback.FrameSummary, str, str]"
                ],
                "msg": [
                    "str",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "clear_cmdline": {
            "name": "clear_cmdline",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "vim": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "escape": {
            "name": "escape",
            "location": 73,
            "return": [
                "str",
                "tuple",
                "bool"
            ],
            "arguments": {
                "expr": [
                    "str"
                ]
            }
        },
        "regex_convert_str_vim": {
            "name": "regex_convert_str_vim",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "regex_convert_py_vim": {
            "name": "regex_convert_py_vim",
            "location": 81,
            "return": [
                "Type",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "expr": [
                    "str"
                ]
            }
        },
        "escape_fuzzy": {
            "name": "escape_fuzzy",
            "location": 85,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "string": [
                    "str",
                    "int",
                    "Iterator[str]",
                    "typing.Iterator"
                ]
            }
        },
        "get_custom": {
            "name": "get_custom",
            "location": 92,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Dict[str, Tuple[str, str]]",
                "type"
            ],
            "arguments": {
                "custom": [
                    "str",
                    "bool",
                    "Optional[int]",
                    "float",
                    "Optional[Mapping[str, Any]]"
                ],
                "kind": [
                    "bool",
                    "Optional[int]",
                    "str",
                    "float",
                    "Optional[Mapping[str, Any]]"
                ],
                "name": [
                    "int",
                    "str"
                ],
                "key": [
                    "str",
                    "List[str]"
                ],
                "default": [
                    "str",
                    "bool"
                ]
            }
        },
        "load_external_module": {
            "name": "load_external_module",
            "location": 104,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "base": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "module": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "split_input": {
            "name": "split_input",
            "location": 110,
            "return": [
                "list[typing.Text]",
                "List[str]",
                "Optional[dict]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "path2dir": {
            "name": "path2dir",
            "location": 114,
            "return": [
                "str",
                "dict[, ]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "path2project": {
            "name": "path2project",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "vim": [
                    "neovim.Nvim",
                    "str",
                    "List[str]",
                    "pynvim.Nvim",
                    "Callable[[str], str]",
                    "waterbutler.core.path.WaterButlerPath",
                    "bool"
                ],
                "path": [
                    "str",
                    "neovim.Nvim",
                    "list[str]",
                    "typing.Callable[str, str]",
                    "bool",
                    "List[str]",
                    "pynvim.Nvim",
                    "Callable[[str], str]",
                    "waterbutler.core.path.WaterButlerPath"
                ],
                "root_markers": [
                    "str",
                    "neovim.Nvim",
                    "list[str]",
                    "typing.Callable[str, str]",
                    "bool",
                    "List[str]",
                    "pynvim.Nvim",
                    "Callable[[str], str]",
                    "waterbutler.core.path.WaterButlerPath"
                ]
            }
        },
        "parse_jump_line": {
            "name": "parse_jump_line",
            "location": 123,
            "return": [
                "list[]",
                "tuple",
                "list[typing.Text]",
                "str",
                "bool"
            ],
            "arguments": {
                "path_head": [
                    "str",
                    "None",
                    "Optional[str]",
                    "cerulean.path.AbstractPath"
                ],
                "line": [
                    "str",
                    "Pattern",
                    "typing.Pattern",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "expand": {
            "name": "expand",
            "location": 144,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "abspath": {
            "name": "abspath",
            "location": 148,
            "return": [
                "str",
                "bytes",
                "list",
                "int"
            ],
            "arguments": {
                "vim": [
                    "str",
                    "pynvim.Nvim",
                    "neovim.Nvim",
                    "Optional[Tuple[str, ...]]",
                    "Tuple[str]"
                ],
                "path": [
                    "str",
                    "tuple[typing.Union[str,...]]",
                    "pynvim.Nvim",
                    "None",
                    "neovim.Nvim",
                    "tuple[str]",
                    "Optional[Tuple[str, ...]]",
                    "Tuple[str]"
                ]
            }
        },
        "relpath": {
            "name": "relpath",
            "location": 152,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "vim": [
                    "str",
                    "neovim.Nvim",
                    "int",
                    "list[int]",
                    "List[int]"
                ],
                "path": [
                    "str",
                    "neovim.Nvim",
                    "int",
                    "list[int]",
                    "List[int]"
                ]
            }
        },
        "convert2fuzzy_pattern": {
            "name": "convert2fuzzy_pattern",
            "location": 156,
            "return": [
                "str",
                "List[List[Any]]",
                "List[float]",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]",
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]"
                ]
            }
        },
        "convert2regex_pattern": {
            "name": "convert2regex_pattern",
            "location": 165,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "parse_command": {
            "name": "parse_command",
            "location": 169,
            "return": [
                "list[]",
                "List[int]",
                "List[List[int]]",
                "int",
                "Tuple[float]",
                "str"
            ],
            "arguments": {
                "array": [
                    "list[list[str]]",
                    "str",
                    "int",
                    "List[List[str]]"
                ]
            }
        },
        "input": {
            "name": "input",
            "location": 179,
            "return": [
                "typing.Text",
                "tuple",
                "bool",
                "Iterable[int]",
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "vim": [
                    "neovim.Nvim",
                    "str",
                    "int"
                ],
                "context": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "prompt": [
                    "typing.Text",
                    "neovim.Nvim",
                    "str",
                    "int"
                ],
                "text": [
                    "typing.Text",
                    "neovim.Nvim",
                    "str",
                    "int"
                ],
                "completion": [
                    "typing.Text",
                    "str",
                    "neovim.Nvim",
                    "Pattern[str]",
                    "List[str]"
                ]
            }
        },
        "find_rplugins": {
            "name": "find_rplugins",
            "location": 197,
            "return": [
                "",
                "typing.Generator[tuple[str]]"
            ],
            "arguments": {
                "context": [
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "source": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Optional[Tuple[str, ...]]",
                    "tuple[typing.Union[str,...]]",
                    "Tuple[str]",
                    "None",
                    "tuple[str]"
                ],
                "loaded_paths": [
                    "List[str]",
                    "str",
                    "list[str]"
                ]
            }
        },
        "import_rplugins": {
            "name": "import_rplugins",
            "location": 248,
            "return": [
                "",
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "context": [
                    "List[str]",
                    "bool",
                    "list[str]"
                ],
                "source": [
                    "str",
                    "Union[str, bytes]",
                    "bytes",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "None"
                ],
                "loaded_paths": [
                    "List[str]",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "parse_tagline": {
            "name": "parse_tagline",
            "location": 269,
            "return": [
                "dict[typing.Text, typing.Union[str,typing.Iterable[str]]]",
                "str",
                "OrderedDict",
                "Callable",
                "bool"
            ],
            "arguments": {
                "line": [
                    "str",
                    "bytes"
                ],
                "tagpath": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "clearmatch": {
            "name": "clearmatch",
            "location": 312,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "vim": [
                    "pynvim.Nvim",
                    "neovim.Nvim",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "convert2fuzzy_pattern.esc": {
            "name": "esc",
            "location": 157,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "string": [
                    "str",
                    "int",
                    "Iterator[str]"
                ]
            }
        },
        "parse_command.parse_arg": {
            "name": "parse_arg",
            "location": 170,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Set[str]]"
            ],
            "arguments": {
                "arg": [
                    "str"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/vim.py": {
        "reform_bytes": {
            "name": "reform_bytes",
            "location": 12,
            "return": [
                "Dict[str, int]",
                "float",
                "int",
                "dict"
            ],
            "arguments": {
                "value": [
                    "bytes",
                    "Union[None, str, bytes]",
                    "\"Scalar\"",
                    "str",
                    "int"
                ]
            }
        },
        "build_proxy": {
            "name": "build_proxy",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "child": [
                    "str",
                    "dict",
                    "bool",
                    "list"
                ],
                "parent": [
                    "str",
                    "dict",
                    "bool",
                    "list"
                ]
            }
        },
        "decorate": {
            "name": "decorate",
            "location": 93,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {
                "component": [
                    "Tuple[float, float]",
                    "float"
                ]
            }
        },
        "Proxy.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "component": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Proxy.__getattr__": {
            "name": "__getattr__",
            "location": 30,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "ContainerProxy.__getitem__": {
            "name": "__getitem__",
            "location": 36,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "KT"
                ]
            }
        },
        "ContainerProxy.__setitem__": {
            "name": "__setitem__",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT"
                ],
                "value": [
                    "str",
                    "bytes",
                    "Union[str, int]"
                ]
            }
        },
        "FuncNamespace.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "FuncNamespace.__getattr__": {
            "name": "__getattr__",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Callable"
                ]
            }
        },
        "Neovim.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "Optional[str]"
                ]
            }
        },
        "Neovim.call": {
            "name": "call",
            "location": 61,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "int",
                    "List[str]",
                    "Tuple[str, str]",
                    "dict",
                    "Sequence[int]",
                    "str",
                    "Tuple[str, str, str]"
                ]
            }
        },
        "build_proxy.bind": {
            "name": "bind",
            "location": 76,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "attr": [
                    "int",
                    "str",
                    "Sequence[object]",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "build_proxy.bind.mod": {
            "name": "mod",
            "location": 82,
            "return": [
                "List[str]",
                "int",
                "List[List[str]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/__init__.py": {
        "_denite_init": {
            "name": "_denite_init",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "_denite_start": {
            "name": "_denite_start",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "_denite_do_action": {
            "name": "_denite_do_action",
            "location": 57,
            "return": [
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "args": []
            }
        },
        "_denite_do_map": {
            "name": "_denite_do_map",
            "location": 60,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "args": []
            }
        },
        "_denite_do_async_map": {
            "name": "_denite_do_async_map",
            "location": 63,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "args": []
            }
        },
        "DeniteHandlers.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "DeniteHandlers.init_channel": {
            "name": "init_channel",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "DeniteHandlers.start": {
            "name": "start",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "DeniteHandlers.do_action": {
            "name": "do_action",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "DeniteHandlers.do_map": {
            "name": "do_map",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "DeniteHandlers.do_async_map": {
            "name": "do_async_map",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "args": []
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/base/filter.py": {
        "Base.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Base.filter": {
            "name": "filter",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "bool",
                    "list",
                    "list[]"
                ]
            }
        },
        "Base.convert_pattern": {
            "name": "convert_pattern",
            "location": 23,
            "return": [
                "typing.Text",
                "str",
                "List[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "input_str": [
                    "str",
                    "bool",
                    "list",
                    "list[]"
                ]
            }
        },
        "Base.debug": {
            "name": "debug",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "str",
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "Base.print_message": {
            "name": "print_message",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Callable"
                ],
                "expr": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Base.error_message": {
            "name": "error_message",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "List[str]",
                    "str",
                    "list[str]"
                ],
                "expr": [
                    "str"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/base/kind.py": {
        "_yank": {
            "name": "_yank",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "vim": [
                    "str"
                ],
                "word": [
                    "str",
                    "float",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "_ex": {
            "name": "_ex",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "vim": [
                    "int",
                    "Optional[str]",
                    "str",
                    "bytes"
                ],
                "word": [
                    "str",
                    "float",
                    "int",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "_paste": {
            "name": "_paste",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "vim": [
                    "float",
                    "str",
                    "Iterable[str]",
                    "Callable"
                ],
                "word": [
                    "str",
                    "int"
                ],
                "command": [
                    "str",
                    "List[str]"
                ],
                "regtype": [
                    "str",
                    "int"
                ]
            }
        },
        "Base.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Base.debug": {
            "name": "debug",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "str",
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "Base.action_echo": {
            "name": "action_echo",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Base.action_yank": {
            "name": "action_yank",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "tuple[typing.Union[str,str]]",
                    "int",
                    "Tuple[str, str]",
                    "Set[str]"
                ]
            }
        },
        "Base.action_ex": {
            "name": "action_ex",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "tuple[typing.Union[str,str]]",
                    "int",
                    "Tuple[str, str]",
                    "Set[str]"
                ]
            }
        },
        "Base.action_replace": {
            "name": "action_replace",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Base.action_append": {
            "name": "action_append",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Base.get_action_names": {
            "name": "get_action_names",
            "location": 47,
            "return": [
                "list[typing.Text]",
                "List[str]",
                "Optional[List[\"DeliveryItem\"]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.action_preview": {
            "name": "action_preview",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Kind.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any, Any], bool]",
                    "typing.Callable[Any,Any, bool]"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/base/source.py": {
        "Base.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Base.highlight": {
            "name": "highlight",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.define_syntax": {
            "name": "define_syntax",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.print_message": {
            "name": "print_message",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "denite.util.UserContext",
                    "Callable"
                ],
                "expr": [
                    "typing.Callable[, ]",
                    "denite.util.UserContext",
                    "Callable"
                ]
            }
        },
        "Base.error_message": {
            "name": "error_message",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "list[str]",
                    "str",
                    "denite.util.UserContext",
                    "List[str]"
                ],
                "expr": [
                    "str"
                ]
            }
        },
        "Base.gather_candidates": {
            "name": "gather_candidates",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "denite.util.UserContext"
                ]
            }
        },
        "Base.debug": {
            "name": "debug",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "str",
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "Base.get_status": {
            "name": "get_status",
            "location": 57,
            "return": [
                "str",
                "Tuple[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "bytes",
                    "Dict[str, float]",
                    "bool"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/filter/base.py": {
        "Base.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/filter/__init__.py": {},
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/filter/converter/abbr_word.py": {
        "Filter.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "denite.util.Nvim",
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Filter.filter": {
            "name": "filter",
            "location": 18,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "denite.util.UserContext",
                    "str",
                    "bool",
                    "list"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/filter/converter/relative_abbr.py": {
        "Filter.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Filter.filter": {
            "name": "filter",
            "location": 21,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "denite.util.UserContext",
                    "list[]",
                    "bool",
                    "list"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/filter/converter/relative_word.py": {
        "Filter.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Filter.filter": {
            "name": "filter",
            "location": 21,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "denite.util.UserContext",
                    "list[]",
                    "bool",
                    "list"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/filter/converter/__init__.py": {},
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/filter/matcher/cpsm.py": {
        "Filter.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Filter.filter": {
            "name": "filter",
            "location": 25,
            "return": [
                "str",
                "List[int]",
                "list[]",
                "int",
                "list[str]",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "bool",
                    "os.DirEntry",
                    "int"
                ]
            }
        },
        "Filter.convert_pattern": {
            "name": "convert_pattern",
            "location": 56,
            "return": [
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "input_str": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "Filter._get_cpsm_result": {
            "name": "_get_cpsm_result",
            "location": 59,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "pymatgen.util.Vector3Like"
            ],
            "arguments": {
                "self": [],
                "ispath": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "denite.util.Candidates",
                    "dict"
                ],
                "candidates": [
                    "str",
                    "dict[, ]",
                    "bool",
                    "denite.util.Candidates",
                    "dict"
                ],
                "pattern": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "denite.util.Candidates",
                    "dict"
                ],
                "bufname": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "denite.util.Candidates",
                    "dict"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/filter/matcher/fuzzy.py": {
        "Filter.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "denite.util.Nvim",
                    "bool",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Filter.filter": {
            "name": "filter",
            "location": 21,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "denite.util.UserContext",
                    "Dict[str, float]",
                    "str",
                    "bool",
                    "Iterable[int]"
                ]
            }
        },
        "Filter.convert_pattern": {
            "name": "convert_pattern",
            "location": 36,
            "return": [
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "input_str": [
                    "str",
                    "int",
                    "float"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/filter/matcher/hide_hidden_files.py": {
        "Filter.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Filter.filter": {
            "name": "filter",
            "location": 21,
            "return": [
                "list[]",
                "str",
                "list",
                "dict",
                "Union[int, None]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "denite.util.UserContext",
                    "dict",
                    "OrderedDict",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/filter/matcher/ignore_current_buffer.py": {
        "Filter.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Filter.filter": {
            "name": "filter",
            "location": 18,
            "return": [
                "list[typing.Text]",
                "str",
                "List[str]",
                "Tuple[int, int]",
                "int",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "list[str]",
                    "list[]",
                    "List[str]",
                    "denite.util.Nvim",
                    "list",
                    "int",
                    "Set[str]"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/filter/matcher/ignore_globs.py": {
        "Filter.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Filter.filter": {
            "name": "filter",
            "location": 30,
            "return": [
                "list[typing.Union[typing.Text,int]]",
                "str",
                "List[str]",
                "Tuple[int, int]",
                "int",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "list[tuple[typing.Union[int,int]]]",
                    "bool",
                    "List[Tuple[int, int]]"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/filter/matcher/project_files.py": {
        "Filter.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Filter.filter": {
            "name": "filter",
            "location": 19,
            "return": [
                "list[]",
                "str",
                "List[str]",
                "Tuple[int, int]",
                "int",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "cdp.util.T_JSON_DICT",
                    "int",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/filter/matcher/regexp.py": {
        "Filter.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Filter.filter": {
            "name": "filter",
            "location": 21,
            "return": [
                "list[]",
                "Dict[str, Any]",
                "bool",
                "List[str]",
                "Optional[List[str]]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "Filter.convert_pattern": {
            "name": "convert_pattern",
            "location": 33,
            "return": [
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "input_str": [
                    "str",
                    "int",
                    "float"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/filter/matcher/substring.py": {
        "Filter.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Filter.filter": {
            "name": "filter",
            "location": 20,
            "return": [
                "str",
                "list[typing.Text]",
                "Optional[str]",
                "Sequence",
                "Mapping",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "dict",
                    "tuple[]",
                    "set",
                    "tuple"
                ]
            }
        },
        "Filter.convert_pattern": {
            "name": "convert_pattern",
            "location": 35,
            "return": [
                "str",
                "int",
                "List[Dict[str, str]]",
                "Dict[str, Any]",
                "Sequence[Any]",
                "Tuple[int, int]",
                "float",
                "Dict[int, int]"
            ],
            "arguments": {
                "self": [],
                "input_str": [
                    "str"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/filter/matcher/__init__.py": {},
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/filter/sorter/rank.py": {
        "get_score": {
            "name": "get_score",
            "location": 42,
            "return": [
                "float",
                "str",
                "bool"
            ],
            "arguments": {
                "string": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "query_chars": [
                    "str",
                    "list[str]",
                    "int",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "find_end_of_match": {
            "name": "find_end_of_match",
            "location": 62,
            "return": [
                "tuple[None]",
                "bool",
                "tuple[typing.Union[float,int,str,list[str],None]]",
                "Optional[str]",
                "Optional[float]"
            ],
            "arguments": {
                "to_match": [
                    "str"
                ],
                "chars": [
                    "str",
                    "list[str]",
                    "Optional[str]",
                    "List[str]"
                ],
                "first_index": [
                    "int",
                    "str",
                    "bool",
                    "list[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        },
        "Filter.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Filter.filter": {
            "name": "filter",
            "location": 26,
            "return": [
                "list[]",
                "str",
                "Mapping[str, Any]",
                "Callable[[str, Any], Tuple[bytes, int]]",
                "MutableMapping[str, int]",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "denite.util.UserContext"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/filter/sorter/reverse.py": {
        "Filter.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Filter.filter": {
            "name": "filter",
            "location": 19,
            "return": [
                "list[]",
                "str",
                "List[str]",
                "bool",
                "Optional[Union[str, Any]]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "list[str]",
                    "float",
                    "Callable[[None], bool]",
                    "List[str]",
                    "int"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/filter/sorter/sublime.py": {
        "get_score": {
            "name": "get_score",
            "location": 52,
            "return": [
                "str",
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "pattern": [
                    "Tuple[int, int]",
                    "List[List[Any]]",
                    "List[str]",
                    "int",
                    "list",
                    "List[Tuple[int, int]]"
                ],
                "candidate": [
                    "int",
                    "Callable",
                    "bool",
                    "List[List[Any]]",
                    "bytes"
                ]
            }
        },
        "Filter.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Filter.filter": {
            "name": "filter",
            "location": 38,
            "return": [
                "list[]",
                "str",
                "Mapping[str, Any]",
                "Callable[[str, Any], Tuple[bytes, int]]",
                "MutableMapping[str, int]",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "denite.util.UserContext"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/filter/sorter/word.py": {
        "Filter.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Filter.filter": {
            "name": "filter",
            "location": 19,
            "return": [
                "list[]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "denite.util.UserContext",
                    "Iterable[Any]",
                    "dict"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/filter/sorter/__init__.py": {},
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/kind/base.py": {
        "Base.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/kind/buffer.py": {
        "Kind.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Kind.action_open": {
            "name": "action_open",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "list[dict[str, str]]",
                    "denite.util.UserContext",
                    "bool",
                    "List[Dict[str, str]]",
                    "dict"
                ]
            }
        },
        "Kind.action_delete": {
            "name": "action_delete",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "list[]",
                    "denite.util.UserContext",
                    "list",
                    "bool",
                    "IO[str]"
                ]
            }
        },
        "Kind.action_preview": {
            "name": "action_preview",
            "location": 31,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "bool"
                ]
            }
        },
        "Kind._get_preview_window": {
            "name": "_get_preview_window",
            "location": 49,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Kind._winid": {
            "name": "_winid",
            "location": 55,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "str",
                    "list[int]",
                    "float",
                    "int",
                    "List[int]"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/kind/command.py": {
        "Kind.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Kind.action_execute": {
            "name": "action_execute",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int"
                ]
            }
        },
        "Kind.action_edit": {
            "name": "action_edit",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "Kind._execute": {
            "name": "_execute",
            "location": 34,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Mapping[str, Any]",
                    "float",
                    "Exception"
                ],
                "command": [
                    "int",
                    "str",
                    "Union[int, None]",
                    "None"
                ],
                "is_pause": [
                    "Callable[[str, str], float]",
                    "typing.Callable[str,str, float]",
                    "List[str]",
                    "list[str]",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/kind/directory.py": {
        "Kind.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Kind.action_cd": {
            "name": "action_cd",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "Kind.action_narrow": {
            "name": "action_narrow",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "denite.util.UserContext",
                    "bool",
                    "dict"
                ]
            }
        },
        "Kind.action_open": {
            "name": "action_open",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "list[dict[str, str]]",
                    "denite.util.UserContext",
                    "bool",
                    "List[Dict[str, str]]",
                    "dict"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/kind/file.py": {
        "Kind.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Kind.action_open": {
            "name": "action_open",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "Kind.action_drop": {
            "name": "action_drop",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Kind.action_new": {
            "name": "action_new",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Callable"
                ]
            }
        },
        "Kind.action_preview": {
            "name": "action_preview",
            "location": 41,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "deoplete.util.UserContext"
                ]
            }
        },
        "Kind.action_highlight": {
            "name": "action_highlight",
            "location": 69,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Dict[str, Any]",
                    "denite.util.UserContext"
                ]
            }
        },
        "Kind.action_quickfix": {
            "name": "action_quickfix",
            "location": 86,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Kind.action_location": {
            "name": "action_location",
            "location": 89,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict",
                    "int",
                    "dict[, ]",
                    "str",
                    "Tuple[int, int, int, int]",
                    "tuple[typing.Union[int,int,int,int]]",
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ]
            }
        },
        "Kind._qfloc": {
            "name": "_qfloc",
            "location": 92,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "list[str]",
                    "List[str]",
                    "tuple[frozenset]",
                    "str",
                    "[[]]",
                    "Tuple[FrozenSet[int]]",
                    "int"
                ],
                "listtype": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Kind._open": {
            "name": "_open",
            "location": 114,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Dict[str, Callable]"
                ],
                "command": [
                    "bytes",
                    "str"
                ]
            }
        },
        "Kind._highlight": {
            "name": "_highlight",
            "location": 142,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Iterable[str]",
                    "Dict[str, Callable[[], Any]]"
                ],
                "line": [
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "Dict[str, Callable[[], Any]]"
                ]
            }
        },
        "Kind._get_preview_window": {
            "name": "_get_preview_window",
            "location": 147,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Kind._winid": {
            "name": "_winid",
            "location": 151,
            "return": [
                "None",
                "Optional[str]",
                "type",
                "Optional[List[Any]]",
                "list"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Kind._add_previewed_buffer": {
            "name": "_add_previewed_buffer",
            "location": 162,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "bufnr": [
                    "str",
                    "slice"
                ]
            }
        },
        "Kind._remove_previewed_buffer": {
            "name": "_remove_previewed_buffer",
            "location": 167,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "bufnr": [
                    "bytes"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/kind/openable.py": {
        "Kind.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Kind.action_open": {
            "name": "action_open",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "bool",
                    "denite.util.UserContext",
                    "list[dict[str, str]]",
                    "dict[, ]",
                    "List[Dict[str, str]]",
                    "dict"
                ]
            }
        },
        "Kind.action_split": {
            "name": "action_split",
            "location": 25,
            "return": [
                "set",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict",
                    "bool",
                    "eth.abc.ComputationAPI"
                ]
            }
        },
        "Kind.action_vsplit": {
            "name": "action_vsplit",
            "location": 37,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "bool",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "Kind.action_tabopen": {
            "name": "action_tabopen",
            "location": 49,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "bool",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "Kind.action_switch": {
            "name": "action_switch",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "Kind.action_tabswitch": {
            "name": "action_tabswitch",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "Kind.action_splitswitch": {
            "name": "action_splitswitch",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "Kind.action_vsplitswitch": {
            "name": "action_vsplitswitch",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "Kind._action_switch": {
            "name": "_action_switch",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "int"
                ],
                "fallback": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Kind._jump": {
            "name": "_jump",
            "location": 88,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "list[]",
                    "list",
                    "tuple[int]",
                    "str",
                    "int",
                    "list[str]",
                    "Tuple[int]",
                    "denite.util.UserContext",
                    "List[str]"
                ],
                "target": [
                    "int",
                    "Tuple[float, int]",
                    "str",
                    "float"
                ]
            }
        },
        "Kind._is_current_buffer_empty": {
            "name": "_is_current_buffer_empty",
            "location": 111,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/kind/source.py": {
        "Kind.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Kind.action_start": {
            "name": "action_start",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "list[str]",
                    "denite.util.UserContext",
                    "tuple[frozenset]",
                    "List[str]",
                    "[[]]",
                    "Tuple[FrozenSet[int]]"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/kind/word.py": {
        "Kind.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/kind/__init__.py": {},
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/source/base.py": {
        "Base.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/source/buffer.py": {
        "Source.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Source.on_init": {
            "name": "on_init",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "Union[str, Dict[str, str]]",
                    "dict",
                    "bytes",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Source.highlight": {
            "name": "highlight",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Source.gather_candidates": {
            "name": "gather_candidates",
            "location": 51,
            "return": [
                "list[]",
                "str",
                "List[float]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "typing.Iterable[typing.Any]",
                    "Iterable[Any]",
                    "dict"
                ]
            }
        },
        "Source._is_excluded": {
            "name": "_is_excluded",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "Set[str]",
                    "T",
                    "List[Dict[str, Any]]"
                ],
                "buffer_attr": [
                    "str",
                    "bytes",
                    "dict"
                ]
            }
        },
        "Source._convert": {
            "name": "_convert",
            "location": 83,
            "return": [
                "str",
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "self": [],
                "buffer_attr": [
                    "str",
                    "Optional[str]",
                    "Optional[Mapping[str, str]]",
                    "Optional[Dict[str, str]]",
                    "Optional[Any]"
                ],
                "rjust": [
                    "str",
                    "Optional[str]",
                    "Optional[Mapping[str, str]]",
                    "Optional[Dict[str, str]]",
                    "Optional[Any]"
                ],
                "ljustnm": [
                    "str",
                    "Optional[str]",
                    "Optional[Mapping[str, str]]",
                    "Optional[Dict[str, str]]",
                    "Optional[Any]"
                ],
                "rjustft": [
                    "str",
                    "Optional[str]",
                    "Optional[Mapping[str, str]]",
                    "Optional[Dict[str, str]]",
                    "Optional[Any]"
                ]
            }
        },
        "Source._get_attributes": {
            "name": "_get_attributes",
            "location": 102,
            "return": [
                "dict[typing.Text, str]",
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "int",
                    "Exception",
                    "dict",
                    "Mapping[str, Any]"
                ],
                "buf": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/source/change.py": {
        "Source.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Source.on_init": {
            "name": "on_init",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "bool",
                    "List[int]",
                    "list[int]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Source.highlight": {
            "name": "highlight",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Source._parse": {
            "name": "_parse",
            "location": 34,
            "return": [
                "list[dict[typing.Text, typing.Union[int,list[],list[int]]]]",
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Source.gather_candidates": {
            "name": "gather_candidates",
            "location": 66,
            "return": [
                "float",
                "[[]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "denite.util.UserContext",
                    "int"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/source/colorscheme.py": {
        "Source.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Source.on_init": {
            "name": "on_init",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Union[str, IO]",
                    "str",
                    "Callable",
                    "typing.IO",
                    "bytes",
                    "dict",
                    "typing.Callable[, ]",
                    "IO[str]",
                    "dict[, ]"
                ]
            }
        },
        "Source.on_close": {
            "name": "on_close",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Source.gather_candidates": {
            "name": "gather_candidates",
            "location": 31,
            "return": [
                "list[list[dict[typing.Text, ]]]",
                "Optional[Dict[str, str]]",
                "Optional[Any]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "float",
                    "[[]]"
                ]
            }
        },
        "Kind.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Kind.action_preview": {
            "name": "action_preview",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/source/command.py": {
        "Source.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Source.on_init": {
            "name": "on_init",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "bool",
                    "denite.util.UserContext",
                    "defx.util.UserContext"
                ]
            }
        },
        "Source.gather_candidates": {
            "name": "gather_candidates",
            "location": 32,
            "return": [
                "list[dict[typing.Text, bool]]",
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "Set[str]",
                    "bool"
                ]
            }
        },
        "Source._init_commands": {
            "name": "_init_commands",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/source/command_history.py": {
        "Source.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "str"
                ]
            }
        },
        "Source.gather_candidates": {
            "name": "gather_candidates",
            "location": 39,
            "return": [
                "list[]",
                "str",
                "bool",
                "List[str]",
                "Set[str]",
                "Mapping[str, List[str]]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "denite.util.UserContext",
                    "defx.util.UserContext",
                    "deoplete.util.UserContext"
                ]
            }
        },
        "Source._get_histories": {
            "name": "_get_histories",
            "location": 48,
            "return": [
                "str",
                "bool",
                "list[]",
                "list[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Source._remove_duplicate_entry": {
            "name": "_remove_duplicate_entry",
            "location": 65,
            "return": [
                "list[typing.Union[str,list[]]]",
                "Set[str]",
                "List[str]",
                "Dict[int, int]",
                "str",
                "Optional[dict]"
            ],
            "arguments": {
                "self": [],
                "seq": [
                    "list[str]",
                    "List[str]",
                    "str",
                    "denite.util.UserContext",
                    "list[list[]]",
                    "List[List]"
                ]
            }
        },
        "Source._filter_candidates": {
            "name": "_filter_candidates",
            "location": 73,
            "return": [
                "list[typing.Text]",
                "str",
                "List[str]",
                "bool",
                "Tuple[int, int]",
                "list",
                "Union[List[str], str]"
            ],
            "arguments": {
                "self": [],
                "histories": [
                    "str",
                    "list[]",
                    "float",
                    "sklearn.base.BaseEstimator",
                    "list"
                ]
            }
        },
        "Source._is_ignore_command": {
            "name": "_is_ignore_command",
            "location": 79,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str"
                ]
            }
        },
        "Source._convert": {
            "name": "_convert",
            "location": 85,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,bool]]",
                "bool",
                "str",
                "bytearray"
            ],
            "arguments": {
                "self": [],
                "history": [
                    "str",
                    "int",
                    "bool"
                ],
                "size": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Kind.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Kind.action_edit": {
            "name": "action_edit",
            "location": 103,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "dict",
                    "float",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Kind.action_delete": {
            "name": "action_delete",
            "location": 111,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "denite.util.UserContext",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/source/directory_rec.py": {
        "Source.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Source.on_init": {
            "name": "on_init",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "BaseException"
                ]
            }
        },
        "Source.gather_candidates": {
            "name": "gather_candidates",
            "location": 33,
            "return": [
                "list[]",
                "str",
                "bool",
                "OrderedDict",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Iterable",
                    "Set[str]"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/source/filetype.py": {
        "Source.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Source.gather_candidates": {
            "name": "gather_candidates",
            "location": 21,
            "return": [
                "list[list[dict[typing.Text, ]]]",
                "Optional[Dict[str, str]]",
                "Optional[Any]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "float",
                    "[[]]"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/source/grep.py": {
        "_candidate": {
            "name": "_candidate",
            "location": 35,
            "return": [
                "str",
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "result": [
                    "list[]",
                    "str",
                    "list",
                    "tuple[]",
                    "Optional[tuple]",
                    "list[str]",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "path": [
                    "list",
                    "str",
                    "list[]",
                    "Optional[tuple]",
                    "tuple[]",
                    "Optional[List[str]]",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Source.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Source.on_init": {
            "name": "on_init",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Sequence[str]",
                    "Optional[bool]",
                    "denite.util.UserContext",
                    "Callable",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "Source.on_close": {
            "name": "on_close",
            "location": 89,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "denite.util.UserContext",
                    "str",
                    "Optional[int]",
                    "int",
                    "bool",
                    "AsyncGenerator"
                ]
            }
        },
        "Source.highlight": {
            "name": "highlight",
            "location": 94,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Source.define_syntax": {
            "name": "define_syntax",
            "location": 102,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Source.gather_candidates": {
            "name": "gather_candidates",
            "location": 114,
            "return": [
                "list[]",
                "str",
                "AnyStr",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Callable",
                    "Mapping[str, Any]",
                    "denite.util.UserContext",
                    "TextIO"
                ]
            }
        },
        "Source._async_gather_candidates": {
            "name": "_async_gather_candidates",
            "location": 155,
            "return": [
                "list[]",
                "str",
                "bool",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Optional[float]",
                    "Optional[int]",
                    "Optional[str]",
                    "int",
                    "Optional[Exception]",
                    "bool"
                ],
                "timeout": [
                    "float",
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "Source._init_paths": {
            "name": "_init_paths",
            "location": 173,
            "return": [
                "list[]",
                "str",
                "Tuple[int]",
                "Optional[dict]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str"
                ],
                "args": []
            }
        },
        "Source._init_arguments": {
            "name": "_init_arguments",
            "location": 188,
            "return": [
                "list[]",
                "int",
                "typing.Pattern",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "float",
                    "bool"
                ],
                "args": []
            }
        },
        "Source._init_patterns": {
            "name": "_init_patterns",
            "location": 203,
            "return": [
                "list[typing.Optional[typing.Text]]",
                "Set[str]",
                "deoplete.util.Candidates",
                "Counter",
                "int",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "bool"
                ],
                "args": []
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/source/help.py": {
        "Source.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Source.gather_candidates": {
            "name": "gather_candidates",
            "location": 19,
            "return": [
                "list[]",
                "str",
                "bool",
                "OrderedDict",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "float",
                    "[[]]"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/source/jump.py": {
        "Source.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Source.highlight": {
            "name": "highlight",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Source.on_init": {
            "name": "on_init",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "AnyStr",
                    "str",
                    "denite.util.UserContext"
                ]
            }
        },
        "Source._get_jumplist": {
            "name": "_get_jumplist",
            "location": 42,
            "return": [
                "list[dict[typing.Text, typing.Union[str,int,dict[, ],list[]]]]",
                "bytes",
                "List[str]",
                "List[Dict]",
                "str",
                "Union[str, List[Any]]",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "bool",
                    "str",
                    "dict[, ]",
                    "T",
                    "dict"
                ]
            }
        },
        "Source._parse": {
            "name": "_parse",
            "location": 90,
            "return": [
                "list[dict[typing.Text, typing.Union[int,list[],list[str]]]]",
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Source.gather_candidates": {
            "name": "gather_candidates",
            "location": 155,
            "return": [
                "float",
                "[[]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "denite.util.UserContext",
                    "defx.util.UserContext",
                    "deoplete.util.UserContext",
                    "int"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/source/line.py": {
        "Source.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Source.on_init": {
            "name": "on_init",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "List[str]",
                    "int",
                    "list[str]",
                    "str"
                ]
            }
        },
        "Source.highlight": {
            "name": "highlight",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Source.gather_candidates": {
            "name": "gather_candidates",
            "location": 55,
            "return": [
                "str",
                "typing.Final",
                "bool",
                "OrderedDict",
                "typing.Pattern",
                "Set[str]",
                "list[str]",
                "typing.KeysView",
                "dict[str, str]",
                "list[dict[typing.Text, int]]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/source/mark.py": {
        "Source.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Source.highlight": {
            "name": "highlight",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Source._get_marks": {
            "name": "_get_marks",
            "location": 37,
            "return": [
                "list[dict[typing.Text, str]]",
                "bytes",
                "List[str]",
                "List[Dict]",
                "str",
                "Union[str, List[Any]]",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "bool",
                    "str",
                    "dict[, ]",
                    "T",
                    "dict"
                ]
            }
        },
        "Source.gather_candidates": {
            "name": "gather_candidates",
            "location": 74,
            "return": [
                "str",
                "int",
                "BaseException",
                "denite.util.UserContext",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "float",
                    "str",
                    "[[]]"
                ]
            }
        },
        "Source.empty_mark": {
            "name": "empty_mark",
            "location": 77,
            "return": [
                "bool",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "mark_info": [
                    "list[int]",
                    "str",
                    "List[int]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "Kind.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Kind.action_delete": {
            "name": "action_delete",
            "location": 90,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/source/menu.py": {
        "Source.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Source.on_init": {
            "name": "on_init",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "bool",
                    "denite.util.UserContext"
                ]
            }
        },
        "Source.filter_candidates": {
            "name": "filter_candidates",
            "location": 33,
            "return": [
                "dict[, ]",
                "List[str]",
                "list[str]",
                "FrozenSet[str]",
                "int",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "candidates": [
                    "dict",
                    "dict[, ]",
                    "List[str]",
                    "list[str]"
                ],
                "filetype": [
                    "dict",
                    "None",
                    "List[str]",
                    "dict[, ]",
                    "list[str]"
                ]
            }
        },
        "Source.gather_candidates": {
            "name": "gather_candidates",
            "location": 40,
            "return": [
                "list[]",
                "list[dict[typing.Text, typing.Union[str,list[typing.Text]]]]",
                "str",
                "List[str]",
                "list",
                "Set[str]",
                "Iterable[str]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "list[str]",
                    "str",
                    "Callable",
                    "List[str]",
                    "Sequence[str]",
                    "denite.util.UserContext"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/source/outline.py": {
        "Source.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Source.on_init": {
            "name": "on_init",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "list",
                    "List[pathlib.Path]",
                    "List[str]",
                    "str",
                    "Iterable[T]",
                    "bool",
                    "int"
                ]
            }
        },
        "Source.highlight": {
            "name": "highlight",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Source.gather_candidates": {
            "name": "gather_candidates",
            "location": 56,
            "return": [
                "list[]",
                "str",
                "bool",
                "OrderedDict",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "bytes",
                    "denite.util.UserContext",
                    "tuple[]",
                    "tuple"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/source/output.py": {
        "Source.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Source.define_syntax": {
            "name": "define_syntax",
            "location": 18,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Source.gather_candidates": {
            "name": "gather_candidates",
            "location": 25,
            "return": [
                "list[]",
                "list[dict[typing.Text, typing.Union[typing.Text,int]]]",
                "tuple",
                "bool",
                "Optional[Iterable[str]]",
                "List[str]",
                "list"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "tuple[]",
                    "Union",
                    "list[str]",
                    "Sequence[str]",
                    "tuple",
                    "List[str]",
                    "int",
                    "bool",
                    "Callable[..., str]",
                    "dict"
                ]
            }
        },
        "Source.define_syntax_for_highlight": {
            "name": "define_syntax_for_highlight",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "Sequence[int]",
                    "typing.Sequence[int]",
                    "List[List[str]]",
                    "list[list[str]]",
                    "str",
                    "Optional[List[Dict]]",
                    "list[dict[, ]]",
                    "list",
                    "None",
                    "list[]"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/source/register.py": {
        "Source.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Source.gather_candidates": {
            "name": "gather_candidates",
            "location": 20,
            "return": [
                "list[dict[typing.Text, typing.Union[list[],int]]]",
                "str",
                "bool",
                "OrderedDict",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "denite.util.UserContext"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/source/source.py": {
        "Source.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Source.gather_candidates": {
            "name": "gather_candidates",
            "location": 18,
            "return": [
                "list[dict[typing.Text, list[]]]",
                "List[str]",
                "Set[str]",
                "bool",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "denite.util.UserContext"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/source/spell.py": {
        "Source.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Source.on_init": {
            "name": "on_init",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict",
                    "Dict[str, Dict[str, Any]]",
                    "bool",
                    "str"
                ]
            }
        },
        "Source.gather_candidates": {
            "name": "gather_candidates",
            "location": 25,
            "return": [
                "list[dict[typing.Text, ]]",
                "List[str]",
                "str",
                "int",
                "Optional[dict]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "list[tuple[typing.Union[int,int,str]]]",
                    "int",
                    "list[str]",
                    "List[Tuple[int, int, str]]",
                    "Iterable[Any]",
                    "List[str]"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/source/tag.py": {
        "Source.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Source.on_init": {
            "name": "on_init",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str"
                ]
            }
        },
        "Source.highlight": {
            "name": "highlight",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Source.gather_candidates": {
            "name": "gather_candidates",
            "location": 45,
            "return": [
                "list[]",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "denite.util.UserContext"
                ]
            }
        },
        "Source._get_candidate": {
            "name": "_get_candidate",
            "location": 58,
            "return": [
                "str",
                "None",
                "Union[str, pathlib.Path]",
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "bytes",
                    "Union[Literal, str]"
                ],
                "line": [
                    "str",
                    "Pattern[str]"
                ]
            }
        },
        "Source._get_tagfiles": {
            "name": "_get_tagfiles",
            "location": 87,
            "return": [
                "list[]",
                "List[str]",
                "Optional[dict]",
                "int",
                "Counter"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "tuple[]",
                    "set",
                    "Optional[str]",
                    "tuple"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/source/__init__.py": {},
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/source/file/old.py": {
        "Source.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Source.on_init": {
            "name": "on_init",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "bool",
                    "denite.util.UserContext",
                    "defx.util.UserContext"
                ]
            }
        },
        "Source.gather_candidates": {
            "name": "gather_candidates",
            "location": 25,
            "return": [
                "list[dict[typing.Text, ]]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "denite.util.UserContext",
                    "defx.util.UserContext",
                    "deoplete.util.UserContext"
                ]
            }
        },
        "Kind.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Kind.action_delete": {
            "name": "action_delete",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "list[str]",
                    "str",
                    "int",
                    "List[str]",
                    "dict",
                    "Dict[str, int]"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/source/file/point.py": {
        "_checkhost": {
            "name": "_checkhost",
            "location": 51,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "Source.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Source.on_init": {
            "name": "on_init",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Sequence[int]",
                    "typing.Sequence[int]"
                ]
            }
        },
        "Source.gather_candidates": {
            "name": "gather_candidates",
            "location": 26,
            "return": [
                "list[dict[typing.Text, str]]",
                "str",
                "list[]",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "T"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/source/file/rec.py": {
        "Source.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Source.on_init": {
            "name": "on_init",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "base.cell.Cell"
                ]
            }
        },
        "Source.on_close": {
            "name": "on_close",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "denite.util.UserContext",
                    "str",
                    "Optional[int]",
                    "int",
                    "bool",
                    "AsyncGenerator"
                ]
            }
        },
        "Source.gather_candidates": {
            "name": "gather_candidates",
            "location": 58,
            "return": [
                "list[]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Exception",
                    "denite.util.UserContext",
                    "Callable"
                ]
            }
        },
        "Source._async_gather_candidates": {
            "name": "_async_gather_candidates",
            "location": 88,
            "return": [
                "list[]",
                "str",
                "list[dict[typing.Text, str]]",
                "bool",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Optional[float]",
                    "Optional[int]",
                    "int",
                    "Optional[str]",
                    "bool",
                    "Optional[Exception]"
                ],
                "timeout": [
                    "float",
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "Source.get_python_exe": {
            "name": "get_python_exe",
            "location": 121,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "Source.parse_command_for_scantree": {
            "name": "parse_command_for_scantree",
            "location": 140,
            "return": [
                "list[str]",
                "str",
                "Optional[str]",
                "Optional[List[str]]",
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "list[str]",
                    "str",
                    "List[str]",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/source/file/__init__.py": {
        "Source.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Source.gather_candidates": {
            "name": "gather_candidates",
            "location": 24,
            "return": [
                "list[dict[typing.Text, typing.Text]]",
                "str",
                "bool",
                "OrderedDict",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "int",
                    "Iterable[str]",
                    "Callable"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/ui/default.py": {
        "Default.is_async": {
            "name": "is_async",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Default.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Default.start": {
            "name": "start",
            "location": 52,
            "return": [
                "list[]",
                "bool",
                "Dict[int, int]",
                "List[object]"
            ],
            "arguments": {
                "self": [],
                "sources": [
                    "list",
                    "str",
                    "list[]",
                    "float",
                    "int",
                    "TextIO",
                    "typing.TextIO"
                ],
                "context": [
                    "str",
                    "Exception",
                    "int"
                ]
            }
        },
        "Default.do_action": {
            "name": "do_action",
            "location": 67,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "self": [],
                "action_name": [
                    "str",
                    "bool"
                ],
                "command": [
                    "typing.Text",
                    "str",
                    "bool"
                ],
                "is_manual": [
                    "bool",
                    "str"
                ]
            }
        },
        "Default.redraw": {
            "name": "redraw",
            "location": 110,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "is_force": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "Default.quit": {
            "name": "quit",
            "location": 120,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Default._restart": {
            "name": "_restart",
            "location": 126,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Default._start_sources_queue": {
            "name": "_start_sources_queue",
            "location": 135,
            "return": [
                "None",
                "str",
                "OrderedDict"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ]
            }
        },
        "Default._start": {
            "name": "_start",
            "location": 149,
            "return": [
                "None",
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "sources": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "str",
                    "List[int]",
                    "dict"
                ],
                "context": [
                    "list[tuple[typing.Union[str,str]]]",
                    "dict",
                    "int",
                    "List[Tuple[str, str]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Default._init_buffer": {
            "name": "_init_buffer",
            "location": 208,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Default._switch_buffer": {
            "name": "_switch_buffer",
            "location": 283,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Default._get_direction": {
            "name": "_get_direction",
            "location": 318,
            "return": [
                "typing.Text",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Default._get_wininfo": {
            "name": "_get_wininfo",
            "location": 331,
            "return": [
                "bool",
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Default._switch_prev_buffer": {
            "name": "_switch_prev_buffer",
            "location": 337,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Default._init_syntax": {
            "name": "_init_syntax",
            "location": 344,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Default._update_candidates": {
            "name": "_update_candidates",
            "location": 371,
            "return": [
                "int",
                "str",
                "Dict[str, str]",
                "Dict[str, Any]",
                "dict[str, str]",
                "set[]",
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Default._update_displayed_texts": {
            "name": "_update_displayed_texts",
            "location": 390,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Default._update_buffer": {
            "name": "_update_buffer",
            "location": 416,
            "return": [
                "None",
                "str",
                "Set[str]",
                "DefaultDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Default._update_status": {
            "name": "_update_status",
            "location": 465,
            "return": [
                "None",
                "Union[tuple, list]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Default._get_display_source_name": {
            "name": "_get_display_source_name",
            "location": 503,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Default._get_candidate_display_text": {
            "name": "_get_candidate_display_text",
            "location": 513,
            "return": [
                "int",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Default._get_max_height": {
            "name": "_get_max_height",
            "location": 528,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Default._resize_buffer": {
            "name": "_resize_buffer",
            "location": 534,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Default._check_do_option": {
            "name": "_check_do_option",
            "location": 564,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Default._check_move_option": {
            "name": "_check_move_option",
            "location": 575,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Default._do_immediately": {
            "name": "_do_immediately",
            "location": 587,
            "return": [
                "None",
                "int",
                "Union[tuple, list]",
                "List[int]",
                "Union[int, slice]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Default._do_command": {
            "name": "_do_command",
            "location": 604,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "Default._cleanup": {
            "name": "_cleanup",
            "location": 612,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Default._close_current_window": {
            "name": "_close_current_window",
            "location": 628,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Default._quit_buffer": {
            "name": "_quit_buffer",
            "location": 634,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Default._get_cursor_candidate": {
            "name": "_get_cursor_candidate",
            "location": 672,
            "return": [
                "dict[, ]",
                "bytes",
                "OrderedDict",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Default._get_selected_candidates": {
            "name": "_get_selected_candidates",
            "location": 677,
            "return": [
                "list[]",
                "Optional[str]",
                "int",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Default._init_denite": {
            "name": "_init_denite",
            "location": 683,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Default._gather_candidates": {
            "name": "_gather_candidates",
            "location": 690,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Default._init_cursor": {
            "name": "_init_cursor",
            "location": 694,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Default._move_to_pos": {
            "name": "_move_to_pos",
            "location": 701,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "str"
                ]
            }
        },
        "Default._move_to_next_line": {
            "name": "_move_to_next_line",
            "location": 705,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Default._move_to_prev_line": {
            "name": "_move_to_prev_line",
            "location": 709,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Default._move_to_first_line": {
            "name": "_move_to_first_line",
            "location": 713,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Default._move_to_last_line": {
            "name": "_move_to_last_line",
            "location": 716,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/ui/map.py": {
        "do_map": {
            "name": "do_map",
            "location": 11,
            "return": [
                "None",
                "str",
                "BaseException",
                "Type[T]"
            ],
            "arguments": {
                "denite": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "None"
                ],
                "params": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        },
        "_auto_action": {
            "name": "_auto_action",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "denite": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ],
                "params": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_change_path": {
            "name": "_change_path",
            "location": 23,
            "return": [
                "int",
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "denite": [
                    "bool",
                    "denite.util.UserContext",
                    "int"
                ],
                "params": [
                    "str",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "_change_sorters": {
            "name": "_change_sorters",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "denite": [],
                "params": [
                    "str",
                    "list[list[str]]",
                    "int",
                    "list[]",
                    "List[List[str]]",
                    "list[str]",
                    "list",
                    "List[str]"
                ]
            }
        },
        "_choose_action": {
            "name": "_choose_action",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "denite": [
                    "Dict[str, str]",
                    "dict",
                    "bool"
                ],
                "params": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_do_action": {
            "name": "_do_action",
            "location": 56,
            "return": [
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "denite": [
                    "List[str]",
                    "bool",
                    "Optional[BaseException]",
                    "str"
                ],
                "params": [
                    "str",
                    "bytes",
                    "Dict[str, str]",
                    "int"
                ]
            }
        },
        "_do_previous_action": {
            "name": "_do_previous_action",
            "location": 61,
            "return": [
                "List[List[str]]",
                "Iterable[str]",
                "int",
                "util.IDM"
            ],
            "arguments": {
                "denite": [
                    "str",
                    "int"
                ],
                "params": [
                    "bool",
                    "set[]",
                    "int",
                    "set"
                ]
            }
        },
        "_filter": {
            "name": "_filter",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "denite": [
                    "str",
                    "dict"
                ],
                "params": [
                    "list[dict[, ]]",
                    "bytes",
                    "dict",
                    "Dict[str, Any]",
                    "List[dict]"
                ]
            }
        },
        "_filter_async": {
            "name": "_filter_async",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "denite": [
                    "str",
                    "Iterable[str]"
                ],
                "params": [
                    "str",
                    "Dict[str, str]",
                    "Exception"
                ]
            }
        },
        "_move_up_path": {
            "name": "_move_up_path",
            "location": 90,
            "return": [
                "str",
                "List[int]",
                "int",
                "bytes",
                "type"
            ],
            "arguments": {
                "denite": [
                    "str",
                    "bool",
                    "denite.util.UserContext"
                ],
                "params": [
                    "int",
                    "str",
                    "typing.Collection",
                    "Collection[str]",
                    "typing.Type",
                    "bool",
                    "typing.Callable[, ]",
                    "type",
                    "Callable"
                ]
            }
        },
        "_nop": {
            "name": "_nop",
            "location": 95,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "denite": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "params": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_open_filter_buffer": {
            "name": "_open_filter_buffer",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "denite": [
                    "int"
                ],
                "params": [
                    "float",
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]",
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ]
            }
        },
        "_print_messages": {
            "name": "_print_messages",
            "location": 105,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "denite": [
                    "bytes",
                    "int",
                    "IO",
                    "typing.IO"
                ],
                "params": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_quick_move": {
            "name": "_quick_move",
            "location": 111,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "denite": [
                    "str",
                    "Dict[str, float]",
                    "int"
                ],
                "params": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_quit": {
            "name": "_quit",
            "location": 174,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "denite": [
                    "int",
                    "Callable",
                    "str"
                ],
                "params": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_redraw": {
            "name": "_redraw",
            "location": 178,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "denite": [
                    "int",
                    "Callable",
                    "str"
                ],
                "params": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_restart": {
            "name": "_restart",
            "location": 182,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "denite": [
                    "int",
                    "Callable",
                    "str"
                ],
                "params": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_restore_sources": {
            "name": "_restore_sources",
            "location": 186,
            "return": [
                "Union[tuple, list]",
                "None"
            ],
            "arguments": {
                "denite": [
                    "Iterable[T]",
                    "denite.util.UserContext"
                ],
                "params": [
                    "str",
                    "pypi2nix.path.Path",
                    "bool",
                    "bytes"
                ]
            }
        },
        "_toggle_matchers": {
            "name": "_toggle_matchers",
            "location": 203,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "denite": [],
                "params": [
                    "str",
                    "list[list[str]]",
                    "int",
                    "list[]",
                    "List[List[str]]",
                    "list[str]",
                    "list",
                    "List[str]"
                ]
            }
        },
        "_toggle_select": {
            "name": "_toggle_select",
            "location": 213,
            "return": [
                "bool",
                "List[List[int]]",
                "Callable[[int], None]"
            ],
            "arguments": {
                "denite": [
                    "int"
                ],
                "params": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_toggle_select_candidate": {
            "name": "_toggle_select_candidate",
            "location": 220,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "denite": [
                    "int",
                    "str",
                    "float",
                    "bytes",
                    "list[]",
                    "list",
                    "denite.util.UserContext"
                ],
                "index": [
                    "int",
                    "str",
                    "float",
                    "bytes",
                    "list[]",
                    "list",
                    "denite.util.UserContext"
                ]
            }
        },
        "_toggle_select_all": {
            "name": "_toggle_select_all",
            "location": 227,
            "return": [
                "List[int]",
                "str",
                "Dict[str, Dict[str, int]]",
                "float"
            ],
            "arguments": {
                "denite": [
                    "int",
                    "Tuple[FrozenSet[int]]"
                ],
                "params": [
                    "str",
                    "Optional[Dict]",
                    "dict[, ]",
                    "BaseException",
                    "dict",
                    "bool",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_update_buffer": {
            "name": "_update_buffer",
            "location": 234,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "denite": [
                    "bytes",
                    "Optional[Dict[str, Any]]",
                    "Exception",
                    "int",
                    "dict",
                    "Optional[Dict[str, str]]"
                ],
                "params": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "_update_candidates": {
            "name": "_update_candidates",
            "location": 244,
            "return": [
                "None",
                "Iterator[object]",
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "denite": [
                    "Union[str, IO]",
                    "str",
                    "List[List[int]]",
                    "bool",
                    "IO[str]",
                    "Optional[int]"
                ],
                "params": [
                    "bool",
                    "str",
                    "bytes",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_quick_move.get_quick_move_table": {
            "name": "get_quick_move_table",
            "location": 112,
            "return": [
                "dict[, int]",
                "Optional[str]",
                "list",
                "Sequence[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "_quick_move.quick_move_redraw": {
            "name": "quick_move_redraw",
            "location": 124,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "table": [
                    "Dict[str, Any]",
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "Mapping[str, str]"
                ],
                "is_define": [
                    "bool",
                    "Callable",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "str",
                    "dict"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/denite/ui/__init__.py": {},
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/rplugin/python3/deoplete/source/denite.py": {
        "Source.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "vim": [
                    "bool",
                    "denite.util.Nvim",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Source.get_complete_position": {
            "name": "get_complete_position",
            "location": 25,
            "return": [
                "int",
                "str",
                "Dict[str, Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "list[str]",
                    "float",
                    "List[str]"
                ]
            }
        },
        "Source.gather_candidates": {
            "name": "gather_candidates",
            "location": 32,
            "return": [
                "list[dict[typing.Text, ]]",
                "str",
                "int",
                "Optional[dict]",
                "Tuple[int]",
                "denite.util.Candidates"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "dict",
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "IO[bytes]"
                ]
            }
        }
    },
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/test/conftest.py": {},
    "dot_files-master/nvim/dein/.cache/init.vim/.dein/test/rplugin/python3/denite/test_util.py": {
        "test_convert2fuzzy_pattern": {
            "name": "test_convert2fuzzy_pattern",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_convert2regex_pattern": {
            "name": "test_convert2regex_pattern",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_regex_convert_py_vim": {
            "name": "test_regex_convert_py_vim",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_regex_convert_str_vim": {
            "name": "test_regex_convert_str_vim",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_parse_jump_line": {
            "name": "test_parse_jump_line",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_parse_tag_line": {
            "name": "test_parse_tag_line",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_find_rplugins_kind": {
            "name": "test_find_rplugins_kind",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "walk": [
                    "bool"
                ]
            }
        },
        "_walk_side_effect": {
            "name": "_walk_side_effect",
            "location": 125,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[str,int,list[typing.Text],list[typing.Union[typing.Text,typing.Text,typing.Text,typing.Text]]]]]",
                "typing.Generator[tuple[typing.Union[list[typing.Text],list[typing.Union[typing.Text,typing.Text,typing.Text,typing.Text]]]]]"
            ],
            "arguments": {
                "top": [
                    "str",
                    "int"
                ],
                "topdown": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict"
                ],
                "onerror": [
                    "int",
                    "None",
                    "str",
                    "Iterable['Context']",
                    "typing.Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "followlinks": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict"
                ]
            }
        }
    }
}
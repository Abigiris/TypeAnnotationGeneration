{
    "double_entry-master/manage.py": {},
    "double_entry-master/accounts/apps.py": {},
    "double_entry-master/accounts/consts.py": {},
    "double_entry-master/accounts/models.py": {
        "Account.__str__": {
            "name": "__str__",
            "location": 63,
            "return": [
                "utils.models.DefaultCharField"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "double_entry-master/accounts/serializers.py": {},
    "double_entry-master/accounts/urls.py": {},
    "double_entry-master/accounts/views.py": {},
    "double_entry-master/accounts/__init__.py": {},
    "double_entry-master/accounts/migrations/__init__.py": {},
    "double_entry-master/accounts/tests/test_accounts_api.py": {
        "ListAccountsTestCase.setUpTestData": {
            "name": "setUpTestData",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "Exception",
                    "list[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "ListAccountsTestCase.test_list_accounts": {
            "name": "test_list_accounts",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "double_entry-master/accounts/tests/test_models.py": {
        "test_currency_code_validator_invalid": {
            "name": "test_currency_code_validator_invalid",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "type",
                    "typing.Type",
                    "Mapping[str, str]",
                    "typing.Mapping"
                ]
            }
        },
        "test_currency_code_validator_valid": {
            "name": "test_currency_code_validator_valid",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_currency_model_invalid": {
            "name": "test_currency_model_invalid",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_account_model_value_invalid": {
            "name": "test_account_model_value_invalid",
            "location": 63,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "bytes",
                    "Set[str]",
                    "set[str]"
                ],
                "code": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Union[str, bytes]",
                    "bytes"
                ]
            }
        },
        "test_account_model_value_valid": {
            "name": "test_account_model_value_valid",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "value": [
                    "Optional[str]",
                    "str",
                    "dict",
                    "bytes",
                    "None",
                    "Optional[Any]",
                    "dict[, ]",
                    "typing.Any"
                ]
            }
        }
    },
    "double_entry-master/accounts/tests/__init__.py": {},
    "double_entry-master/docs/conf.py": {},
    "double_entry-master/double_entry/settings.py": {},
    "double_entry-master/double_entry/urls.py": {},
    "double_entry-master/double_entry/wsgi.py": {},
    "double_entry-master/double_entry/__init__.py": {},
    "double_entry-master/payments/apps.py": {},
    "double_entry-master/payments/managers.py": {
        "PaymentManager.create_payment": {
            "name": "create_payment",
            "location": 16,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "from_account_pk": [
                    "list[str]",
                    "Exception",
                    "List[str]",
                    "bool",
                    "type",
                    "int"
                ],
                "to_account_pk": [
                    "list[str]",
                    "Exception",
                    "List[str]",
                    "bool",
                    "type",
                    "int"
                ],
                "value": [
                    "Optional[str]",
                    "django.db.models.QuerySet",
                    "jgikbase.idmapping.core.tokens.Token"
                ]
            }
        }
    },
    "double_entry-master/payments/models.py": {},
    "double_entry-master/payments/serializers.py": {
        "PaymentSerializer.create": {
            "name": "create",
            "location": 17,
            "return": [
                "bool",
                "float",
                "str",
                "int",
                "tuple[typing.Union[typing.Literal,typing.Literal]]",
                "dict[str, typing.Union[int,str]]",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "validated_data": [
                    "list[dict[, ]]",
                    "dict",
                    "Sequence",
                    "List[dict]"
                ]
            }
        }
    },
    "double_entry-master/payments/urls.py": {},
    "double_entry-master/payments/views.py": {
        "PaymentViewSet.list": {
            "name": "list",
            "location": 17,
            "return": [
                "Response",
                "int",
                "Optional[str]",
                "cmk.utils.type_defs.UserId",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Iterable[int]",
                    "typing.Iterable[int]"
                ]
            }
        },
        "PaymentViewSet.create": {
            "name": "create",
            "location": 32,
            "return": [
                "Dict[str, Any]",
                "cmk.utils.type_defs.UserId",
                "asgard.clients.chronos.models.job.ChronosJob",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "rest_framework.requesRequest"
                ]
            }
        }
    },
    "double_entry-master/payments/__init__.py": {},
    "double_entry-master/payments/migrations/__init__.py": {},
    "double_entry-master/payments/tests/test_models.py": {
        "test_create_payment": {
            "name": "test_create_payment",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_create_payment_invalid_account": {
            "name": "test_create_payment_invalid_account",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_create_payment_same_account": {
            "name": "test_create_payment_same_account",
            "location": 83,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "TestValidation.setup": {
            "name": "setup",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidation.test_create_payment_fail": {
            "name": "test_create_payment_fail",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "from_code": [
                    "str",
                    "bytes",
                    "dict",
                    "dict[, ]"
                ],
                "to_code": [
                    "str",
                    "bytes",
                    "dict",
                    "dict[, ]"
                ],
                "from_value": [
                    "float",
                    "list[str]",
                    "List[str]",
                    "bool",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "list[tuple[typing.Union[int,int]]]",
                    "List[Tuple[int, int]]",
                    "dict[, ]",
                    "int",
                    "dict"
                ],
                "to_value": [
                    "float",
                    "list[str]",
                    "List[str]",
                    "bool",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "list[tuple[typing.Union[int,int]]]",
                    "List[Tuple[int, int]]",
                    "dict[, ]",
                    "int",
                    "dict"
                ],
                "value": [
                    "int",
                    "str",
                    "list[int]",
                    "List[int]",
                    "bool"
                ],
                "exc_code": [
                    "str",
                    "int",
                    "list[int]",
                    "List[int]",
                    "bool"
                ]
            }
        }
    },
    "double_entry-master/payments/tests/test_payments_api.py": {
        "CreatePaymentTestCase.setUpTestData": {
            "name": "setUpTestData",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "BaseException",
                    "dict[, ]",
                    "dict",
                    "asgard.models.spec.container.ContainerVolumeSpec"
                ]
            }
        },
        "CreatePaymentTestCase.test_create_payment": {
            "name": "test_create_payment",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreatePaymentTestCase.test_pagination": {
            "name": "test_pagination",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreatePaymentTestCase.test_invalid_account": {
            "name": "test_invalid_account",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreatePaymentTestCase.test_same_account": {
            "name": "test_same_account",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreatePaymentTestCase.test_create_payment_fail": {
            "name": "test_create_payment_fail",
            "location": 108,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "from_code": [
                    "str",
                    "bytes",
                    "dict",
                    "dict[, ]"
                ],
                "to_code": [
                    "str",
                    "bytes",
                    "dict",
                    "dict[, ]"
                ],
                "from_value": [
                    "str",
                    "bytes",
                    "dict",
                    "dict[, ]"
                ],
                "to_value": [
                    "str",
                    "bytes",
                    "dict",
                    "dict[, ]"
                ],
                "value": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "int",
                    "Optional[float]",
                    "float",
                    "Dict[int, List[Any]]",
                    "None",
                    "dict[int, list[typing.Any]]"
                ],
                "exc_code": [
                    "dict",
                    "bytes",
                    "dict[, ]",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Mapping",
                    "typing.Mapping"
                ],
                "key": [
                    "List[List]",
                    "list[list[]]",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]",
                    "bool",
                    "Tuple[Dict[str, Any], Dict[str, Any]]",
                    "tuple[typing.Union[dict[str, typing.Any],dict[str, typing.Any]]]",
                    "Dict[str, List[str]]",
                    "dict[str, list[str]]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "CreatePaymentTestCase.test_list_not_implemented": {
            "name": "test_list_not_implemented",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreatePaymentTestCase.test_create_not_implemented": {
            "name": "test_create_not_implemented",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "double_entry-master/payments/tests/__init__.py": {},
    "double_entry-master/postings/apps.py": {},
    "double_entry-master/postings/models.py": {},
    "double_entry-master/postings/serializers.py": {
        "PostingRelatedAccountField.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "slug_field": [
                    "typing.Text",
                    "str",
                    "int",
                    "Callable",
                    "bool"
                ]
            }
        },
        "PostingRelatedAccountField.get_attribute": {
            "name": "get_attribute",
            "location": 18,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Type",
                    "typing.Type",
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "PostingSerializer.get_direction": {
            "name": "get_direction",
            "location": 37,
            "return": [
                "int",
                "str",
                "Dict[Tuple[str, str], Tuple[float, float]]",
                "bytes"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "int"
                ]
            }
        },
        "PostingSerializer.get_amount": {
            "name": "get_amount",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]",
                    "tuple",
                    "tuple[]",
                    "Optional[str]",
                    "None",
                    "Union[int, float]",
                    "int",
                    "float"
                ]
            }
        }
    },
    "double_entry-master/postings/__init__.py": {},
    "double_entry-master/postings/migrations/__init__.py": {},
    "double_entry-master/utils/apps.py": {},
    "double_entry-master/utils/models.py": {
        "DefaultCharField.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AmountField.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "double_entry-master/utils/serializers.py": {
        "AmountField.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "double_entry-master/utils/views.py": {
        "reverse_querystring": {
            "name": "reverse_querystring",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "view": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "None"
                ],
                "urlconf": [
                    "dict",
                    "None",
                    "Dict[str, Any]",
                    "str",
                    "dict[, ]",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]"
                ],
                "args": [
                    "None"
                ],
                "kwargs": [
                    "None"
                ],
                "current_app": [
                    "dict",
                    "None",
                    "Dict[str, Any]",
                    "str",
                    "dict[, ]",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]"
                ],
                "query_kwargs": [
                    "str",
                    "None",
                    "Optional[List[str]]",
                    "list[str]"
                ]
            }
        }
    },
    "double_entry-master/utils/__init__.py": {},
    "double_entry-master/utils/migrations/__init__.py": {}
}
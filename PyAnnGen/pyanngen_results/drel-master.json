{
    "drel-master/setup.py": {},
    "drel-master/drel/utils.py": {
        "to_json": {
            "name": "to_json",
            "location": 10,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "object_": [
                    "str",
                    "dict",
                    "List[str]",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "to_str": {
            "name": "to_str",
            "location": 34,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "object_": [
                    "int",
                    "Optional[int]",
                    "Dict[str, Any]",
                    "Iterable[str]"
                ]
            }
        },
        "datetime_to_week_range": {
            "name": "datetime_to_week_range",
            "location": 54,
            "return": [
                "Tuple[(_datetime.datetime, _datetime.datetime)]"
            ],
            "arguments": {
                "datetime_": [
                    "datetime.datetime",
                    "datetime.datetime.timedelta",
                    "datetime.date.time.datetime",
                    "datetime.timedelta",
                    "datetime.datetime.datetime"
                ]
            }
        },
        "format_datetime": {
            "name": "format_datetime",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "datetime_": [
                    "datetime.datetime",
                    "int",
                    "datetime.date",
                    "str"
                ]
            }
        }
    },
    "drel-master/drel/__init__.py": {},
    "drel-master/drel/core/builders.py": {
        "BaseFullRequestLogBuilder.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "bool",
                    "str",
                    "None",
                    "Iterable[str]"
                ],
                "user": [
                    "str",
                    "Iterable[str]",
                    "None",
                    "int"
                ]
            }
        },
        "BaseFullRequestLogBuilder.__call__": {
            "name": "__call__",
            "location": 14,
            "return": [
                "drel.core.models.FullRequestLog"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "purplship.core.utils.Element",
                    "None"
                ],
                "response": [
                    "Dict",
                    "None",
                    "str",
                    "purplship.core.utils.Element"
                ],
                "user": [
                    "Dict",
                    "None"
                ],
                "duration": [
                    "Optional[float]",
                    "None",
                    "Dict",
                    "int",
                    "float",
                    "Dict[int,int]",
                    "str",
                    "Optional[Type[Any]]",
                    "Type",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ]
            }
        },
        "BaseFullRequestLogBuilder._serialize_user": {
            "name": "_serialize_user",
            "location": 45,
            "return": [
                "Dict",
                "int",
                "amundsen_application.models.user.User",
                "Dict[Any,str]",
                "str",
                "Dict[str,str]",
                "List[dict[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "Dict[str,Any]",
                    "Dict",
                    "str",
                    "models.UserAuth"
                ]
            }
        },
        "BaseFullRequestLogBuilder.request_to_log": {
            "name": "request_to_log",
            "location": 49,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "BaseFullRequestLogBuilder.response_to_log": {
            "name": "response_to_log",
            "location": 58,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Dict",
                    "purplship.core.utils.Element"
                ]
            }
        },
        "BaseFullRequestLogBuilder._get_request_url": {
            "name": "_get_request_url",
            "location": 65,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Exception",
                    "django.db.models.Model"
                ]
            }
        },
        "BaseFullRequestLogBuilder._get_request_data": {
            "name": "_get_request_data",
            "location": 68,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict"
                ]
            }
        },
        "BaseFullRequestLogBuilder._get_request_headers": {
            "name": "_get_request_headers",
            "location": 71,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "Dict"
                ]
            }
        },
        "BaseFullRequestLogBuilder._get_response_data": {
            "name": "_get_response_data",
            "location": 74,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "BaseFullRequestLogBuilder._get_response_status": {
            "name": "_get_response_status",
            "location": 77,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        }
    },
    "drel-master/drel/core/config.py": {},
    "drel-master/drel/core/es.py": {
        "log_to_es": {
            "name": "log_to_es",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "log": [
                    "Dict",
                    "drel.core.models.FullRequestLog",
                    "str",
                    "Dict[str,str]",
                    "bytes",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "None"
                ]
            }
        },
        "write_to_es": {
            "name": "write_to_es",
            "location": 18,
            "return": [
                "None",
                "Optional[str]",
                "bool",
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {
                "doc": [
                    "Type",
                    "int",
                    "bug_buddy.schema.Commit",
                    "Type[T]"
                ]
            }
        },
        "get_from_es": {
            "name": "get_from_es",
            "location": 37,
            "return": [
                "str",
                "bool",
                "pipwatch_worker.core.data_models.Project",
                "docker.models.containers.Container"
            ],
            "arguments": {
                "doc_id": [
                    "str"
                ]
            }
        },
        "get_es_docs": {
            "name": "get_es_docs",
            "location": 44,
            "return": [
                "list"
            ],
            "arguments": {
                "index": [
                    "int",
                    "None",
                    "str",
                    "bool"
                ],
                "size": [
                    "int",
                    "Dict[str,str]",
                    "str",
                    "List[List[str]]",
                    "bytes",
                    "Dict[int,str]"
                ]
            }
        }
    },
    "drel-master/drel/core/models.py": {},
    "drel-master/drel/core/schemas.py": {
        "FullRequestLogSchema.append_type": {
            "name": "append_type",
            "location": 43,
            "return": [
                "bool",
                "List[Dict[str, Any]]",
                "Union[int, float, complex]",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "FullRequestLogSchema.drop_blank_fields": {
            "name": "drop_blank_fields",
            "location": 54,
            "return": [
                "Dict[tuple[Union[str,Any]],tuple[Union[str,Any]]]",
                "Set[str]",
                "Dict",
                "Dict[str,str]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict",
                    "Dict[str,Any]",
                    "Callable",
                    "List[Tuple]"
                ]
            }
        }
    },
    "drel-master/drel/core/utils.py": {
        "handle_es_exception": {
            "name": "handle_es_exception",
            "location": 10,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "index": [
                    "Exception",
                    "Dict",
                    "str",
                    "bool"
                ],
                "doc": [
                    "Exception",
                    "Dict",
                    "str",
                    "bool"
                ],
                "exception": [
                    "Exception",
                    "Dict",
                    "str",
                    "bool"
                ]
            }
        },
        "get_index_name": {
            "name": "get_index_name",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "log_only_post": {
            "name": "log_only_post",
            "location": 23,
            "return": [
                "bool",
                "Dict[str,Any]",
                "Exception",
                "Dict[str,str]",
                "Dict",
                "str"
            ],
            "arguments": {
                "request": [
                    "str",
                    "django.http.HttpRequest",
                    "Callable",
                    "Set[str]",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]"
                ]
            }
        },
        "timeit": {
            "name": "timeit",
            "location": 27,
            "return": [
                "Tuple[(Any, float)]"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "raiden.utils.Callable"
                ]
            }
        }
    },
    "drel-master/drel/core/__init__.py": {},
    "drel-master/drel/django/api.py": {
        "mail_admins_on_es_exception": {
            "name": "mail_admins_on_es_exception",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "index": [
                    "Dict[str,Any]",
                    "str",
                    "Dict[str,Tuple[int,int]]",
                    "Dict[str,tuple[Union[int,int]]]"
                ],
                "doc": [
                    "Dict[str,Any]",
                    "str",
                    "Dict[str,Tuple[int,int]]",
                    "Dict[str,tuple[Union[int,int]]]"
                ],
                "exception": [
                    "Dict[str,Any]",
                    "str",
                    "Dict[str,Tuple[int,int]]",
                    "Dict[str,tuple[Union[int,int]]]"
                ]
            }
        },
        "_build_exception_message": {
            "name": "_build_exception_message",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "index": [
                    "str",
                    "Dict",
                    "Exception",
                    "Optional[int]",
                    "int",
                    "MutableSequence[str]",
                    "None",
                    "bool",
                    "MutableSequence"
                ],
                "doc": [
                    "str",
                    "Dict",
                    "Exception",
                    "Optional[int]",
                    "int",
                    "MutableSequence[str]",
                    "None",
                    "bool",
                    "MutableSequence"
                ],
                "exception": [
                    "str",
                    "Dict",
                    "Exception",
                    "Optional[int]",
                    "int",
                    "MutableSequence[str]",
                    "None",
                    "bool",
                    "MutableSequence"
                ]
            }
        },
        "LoggingMiddleware.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_response": [
                    "Dict",
                    "str",
                    "uuid.UUID"
                ]
            }
        },
        "LoggingMiddleware.__call__": {
            "name": "__call__",
            "location": 17,
            "return": [
                "bool",
                "complex",
                "bytes",
                "Dict[str, Any]",
                "List['Product']"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "DjangoFullRequestLogBuilder._get_request_url": {
            "name": "_get_request_url",
            "location": 38,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "str"
                ]
            }
        },
        "DjangoFullRequestLogBuilder._get_request_data": {
            "name": "_get_request_data",
            "location": 41,
            "return": [
                "Dict",
                "Dict[str,Any]",
                "raiden.utils.Dict[str,raiden.utils.Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str,Any]",
                    "int",
                    "Dict"
                ]
            }
        },
        "DjangoFullRequestLogBuilder._get_request_headers": {
            "name": "_get_request_headers",
            "location": 47,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str,str]",
                    "Dict",
                    "bytes",
                    "apistar.http.Headers",
                    "Dict[str,Any]"
                ]
            }
        },
        "DjangoFullRequestLogBuilder._get_response_data": {
            "name": "_get_response_data",
            "location": 50,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Dict[str,Any]",
                    "Dict",
                    "Iterator"
                ]
            }
        },
        "DjangoFullRequestLogBuilder._get_response_status": {
            "name": "_get_response_status",
            "location": 53,
            "return": [
                "bool",
                "dict",
                "Dict[str, bool]",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "bytes",
                    "Dict",
                    "str",
                    "pandas.core.frame.DataFrame"
                ]
            }
        }
    },
    "drel-master/drel/django/__init__.py": {},
    "drel-master/drel/requests/api.py": {
        "log": {
            "name": "log",
            "location": 10,
            "return": [
                "Dict[str, List[str]]",
                "int",
                "List[Dict]"
            ],
            "arguments": {
                "request": [
                    "List[R]",
                    "float",
                    "List[orbitx.network.Request]",
                    "purplship.core.utils.Element",
                    "aiohttp.web.Request"
                ],
                "response": [
                    "List[R]",
                    "float",
                    "List[orbitx.network.Request]",
                    "purplship.core.utils.Element",
                    "aiohttp.web.Request"
                ]
            }
        },
        "post": {
            "name": "post",
            "location": 39,
            "return": [
                "Tuple[(requests.models.Request, requests.models.Response)]"
            ],
            "arguments": {}
        },
        "get": {
            "name": "get",
            "location": 46,
            "return": [
                "Tuple[(requests.models.Request, requests.models.Response)]"
            ],
            "arguments": {}
        },
        "RequestsFullRequestLogBuilder._get_request_url": {
            "name": "_get_request_url",
            "location": 19,
            "return": [
                "str",
                "Optional[Mapping[str, Any]]",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "str",
                    "aiohttp.web.Request"
                ]
            }
        },
        "RequestsFullRequestLogBuilder._get_request_data": {
            "name": "_get_request_data",
            "location": 23,
            "return": [
                "Dict[str, Union[int, str]]",
                "dict",
                "bytes",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "Union[dict,list]",
                    "Dict[str,Any]",
                    "List",
                    "collector_utilities.type.Response",
                    "starlette.requests.Request"
                ]
            }
        },
        "RequestsFullRequestLogBuilder._get_request_headers": {
            "name": "_get_request_headers",
            "location": 26,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "None",
                    "aiohttp.web.Request",
                    "Optional[requests.Session]",
                    "preacher.core.requesRequest",
                    "scrapy.http.Request"
                ]
            }
        },
        "RequestsFullRequestLogBuilder._get_response_data": {
            "name": "_get_response_data",
            "location": 29,
            "return": [
                "Dict[str, Any]",
                "requests.Response",
                "str"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Dict[str, Any]",
                    "requests.Response",
                    "flask.Response",
                    "submicontrollers.ui.util.Response",
                    "purplship.core.utils.serializable.Deserializable[str]"
                ]
            }
        },
        "RequestsFullRequestLogBuilder._get_response_status": {
            "name": "_get_response_status",
            "location": 35,
            "return": [
                "bool",
                "dict",
                "Dict[str, bool]",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "bytes",
                    "Dict",
                    "fastapi.Response",
                    "str",
                    "requests.Response",
                    "pandas.core.frame.DataFrame"
                ]
            }
        }
    },
    "drel-master/drel/requests/__init__.py": {},
    "drel-master/samples/django/manage.py": {},
    "drel-master/samples/django/echo/settings.py": {},
    "drel-master/samples/django/echo/urls.py": {},
    "drel-master/samples/django/echo/views.py": {
        "success_view": {
            "name": "success_view",
            "location": 7,
            "return": [
                "JsonResponse",
                "Dict",
                "Optional[str]",
                "Dict[str,Any]",
                "Dict[str,str]",
                "Optional[Dict]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "aiohttp.web.Request",
                    "starlette.requests.Request",
                    "flask.Request",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "server_error_view": {
            "name": "server_error_view",
            "location": 11,
            "return": [
                "HttpResponse",
                "Optional[str]",
                "Dict",
                "Dict[str,Any]",
                "str",
                "bytes"
            ],
            "arguments": {
                "request": [
                    "Dict[str,Any]",
                    "starlette.requests.Request",
                    "django.http.HttpRequest",
                    "aiohttp.web.Request",
                    "fastapi.Request"
                ]
            }
        }
    },
    "drel-master/samples/django/echo/wsgi.py": {},
    "drel-master/samples/django/echo/__init__.py": {},
    "drel-master/tests/conftest.py": {
        "user": {
            "name": "user",
            "location": 12,
            "return": [
                "Dict[Text,Text]",
                "str",
                "Mapping[str,Any]"
            ],
            "arguments": {}
        },
        "log_builder": {
            "name": "log_builder",
            "location": 17,
            "return": [
                "RequestsFullRequestLogBuilder",
                "int",
                "Callable[...,requests.Response]",
                "Dict[str,Any]",
                "Dict",
                "str"
            ],
            "arguments": {}
        },
        "log_builder_with_type": {
            "name": "log_builder_with_type",
            "location": 22,
            "return": [
                "RequestsFullRequestLogBuilder",
                "Dict[str,Any]",
                "request_response",
                "bool",
                "Dict[str,str]"
            ],
            "arguments": {}
        },
        "log_builder_with_user": {
            "name": "log_builder_with_user",
            "location": 27,
            "return": [
                "RequestsFullRequestLogBuilder",
                "sqlalchemy.orm.Session",
                "Dict[str,Any]",
                "int",
                "str",
                "Optional[str]",
                "Dict",
                "Dict[str,str]"
            ],
            "arguments": {
                "user": [
                    "Dict[str,Any]",
                    "None",
                    "fausweb.Request",
                    "Optional[fausweb.Response]"
                ]
            }
        },
        "requests_request": {
            "name": "requests_request",
            "location": 32,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "requests_response": {
            "name": "requests_response",
            "location": 37,
            "return": [
                "dict",
                "Dict[str, Union[int, str]]",
                "Optional[Dict[str, Any]]",
                "flask.Response",
                "Optional[Dict[str, str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "requests_request": [
                    "flask.Response",
                    "Dict[str, Any]",
                    "requests.Response",
                    "dict"
                ]
            }
        },
        "error_requests_response": {
            "name": "error_requests_response",
            "location": 50,
            "return": [
                "flask.Response",
                "dict",
                "Mapping[str, Any]",
                "bool"
            ],
            "arguments": {
                "requests_request": [
                    "flask.Response",
                    "requests.Response",
                    "Dict[str, Any]"
                ]
            }
        },
        "full_request_log": {
            "name": "full_request_log",
            "location": 63,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "str",
                "Optional[Mapping[str, Any]]",
                "Optional[flask.Response]"
            ],
            "arguments": {
                "log_builder": [
                    "str",
                    "bytes",
                    "Dict",
                    "MutableMapping"
                ],
                "requests_request": [
                    "str",
                    "bytes",
                    "Dict",
                    "MutableMapping"
                ],
                "requests_response": [
                    "str",
                    "bytes",
                    "Dict",
                    "MutableMapping"
                ]
            }
        },
        "full_request_log_with_type": {
            "name": "full_request_log_with_type",
            "location": 68,
            "return": [
                "bool",
                "int",
                "Callable",
                "type",
                "List[Dict[str, object]]"
            ],
            "arguments": {
                "log_builder_with_type": [
                    "int",
                    "str",
                    "bytes",
                    "Dict",
                    "None",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "requests_request": [
                    "int",
                    "str",
                    "bytes",
                    "Dict",
                    "None",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "requests_response": [
                    "int",
                    "str",
                    "bytes",
                    "Dict",
                    "None",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "full_request_log_with_user": {
            "name": "full_request_log_with_user",
            "location": 73,
            "return": [
                "Optional[Dict[str, Any]]",
                "Dict[str, Any]",
                "bool",
                "List[Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "log_builder_with_user": [
                    "str",
                    "Dict[str,Any]",
                    "int",
                    "Dict[str,object]",
                    "Dict"
                ],
                "requests_request": [
                    "str",
                    "Dict[str,Any]",
                    "int",
                    "Dict[str,object]",
                    "Dict"
                ],
                "requests_response": [
                    "str",
                    "Dict[str,Any]",
                    "int",
                    "Dict[str,object]",
                    "Dict"
                ]
            }
        },
        "full_request_log_schema": {
            "name": "full_request_log_schema",
            "location": 78,
            "return": [
                "FullRequestLogSchema",
                "Dict[str,Union[int,str]]",
                "Dict[str,Any]",
                "Dict",
                "Optional[Dict[str,Any]]",
                "Dict[int,Dict[str,Any]]",
                "Dict[str,Dict[str,str]]",
                "bytes"
            ],
            "arguments": {}
        },
        "serialized_full_request_log": {
            "name": "serialized_full_request_log",
            "location": 83,
            "return": [
                "bytes",
                "Dict[int, Dict[str, Any]]",
                "dict",
                "Sequence[float]",
                "float",
                "Tuple[int, int]"
            ],
            "arguments": {
                "full_request_log_schema": [
                    "str",
                    "bool"
                ],
                "full_request_log": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_es_index": {
            "name": "test_es_index",
            "location": 89,
            "return": [
                "typing.Generator[typing.Text]"
            ],
            "arguments": {}
        }
    },
    "drel-master/tests/test_requests.py": {
        "test_request_with_data_to_log": {
            "name": "test_request_with_data_to_log",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "log_builder": [
                    "morepath.Request",
                    "httpx.Request"
                ]
            }
        },
        "test_request_with_json_to_log": {
            "name": "test_request_with_json_to_log",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "log_builder": [
                    "httpx.Request",
                    "morepath.Request"
                ]
            }
        },
        "test_response_to_log": {
            "name": "test_response_to_log",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "log_builder": [
                    "str",
                    "bytes",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "None"
                ],
                "requests_request": [
                    "dict",
                    "x509_pki.models.Certificate",
                    "Dict[str, Any]",
                    "Optional[requests.Session]",
                    "sqlalchemy.orm.Session",
                    "app.models.user.User"
                ],
                "response_params": [
                    "Dict",
                    "Dict[str,Any]",
                    "x509_pki.models.Certificate",
                    "starlette.requests.Request",
                    "requests.Response",
                    "sqlalchemy.orm.Session",
                    "app.models.user.User"
                ]
            }
        },
        "test_500_response_to_log": {
            "name": "test_500_response_to_log",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "log_builder": [
                    "Dict",
                    "aiohttp.web.Request"
                ],
                "requests_request": [
                    "dict",
                    "Dict[str, Any]",
                    "x509_pki.models.Certificate",
                    "starlette.requests.Request",
                    "Dict[str, str]",
                    "requests.Response",
                    "django.db.models.query.QuerySet"
                ]
            }
        },
        "test_full_request_to_log": {
            "name": "test_full_request_to_log",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "freezer": [
                    "Callable[...,None]",
                    "str",
                    "Dict"
                ],
                "log_builder": [
                    "str",
                    "drel.django.api.DjangoFullRequestLogBuilder",
                    "Mapping[str, Any]",
                    "lightbus.config.Config"
                ],
                "requests_request": [
                    "str",
                    "Mapping",
                    "drel.django.api.DjangoFullRequestLogBuilder",
                    "Mapping[str,Any]",
                    "lightbus.config.Config"
                ],
                "requests_response": [
                    "str",
                    "Mapping",
                    "drel.django.api.DjangoFullRequestLogBuilder",
                    "Mapping[str,Any]",
                    "lightbus.config.Config"
                ]
            }
        },
        "test_log_request_and_non_ok_response": {
            "name": "test_log_request_and_non_ok_response",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "freezer": [
                    "str",
                    "Callable[...,None]",
                    "Type",
                    "Callable",
                    "core.DependencyContainer"
                ],
                "log_builder": [
                    "int",
                    "deeplearning.ml4pl.models.log_database.Database",
                    "dict"
                ],
                "requests_request": [
                    "int",
                    "Dict",
                    "deeplearning.ml4pl.models.log_database.Database"
                ],
                "error_requests_response": [
                    "int",
                    "Dict",
                    "deeplearning.ml4pl.models.log_database.Database"
                ]
            }
        },
        "test_requests_log_insert_to_es": {
            "name": "test_requests_log_insert_to_es",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "freezer": [
                    "str",
                    "Callable[...,None]",
                    "Dict"
                ],
                "test_es_index": [
                    "str",
                    "Callable[...,None]",
                    "Dict"
                ],
                "requests_request": [
                    "Dict[str,str]"
                ],
                "requests_response": [
                    "Dict[str,str]"
                ],
                "serialized_full_request_log": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_requests_logging_with_duration": {
            "name": "test_requests_logging_with_duration",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "freezer": [
                    "bool",
                    "str",
                    "models.Telegram_Message",
                    "models.User"
                ],
                "test_es_index": [
                    "bool",
                    "str",
                    "models.Telegram_Message",
                    "models.User"
                ],
                "requests_request": [
                    "bytes",
                    "bool",
                    "str",
                    "Dict",
                    "Dict[str,Tuple[Any,Any,Any]]",
                    "Dict[str,tuple[Union[Any,Any,Any]]]"
                ],
                "requests_response": [
                    "bytes",
                    "bool",
                    "str",
                    "Dict",
                    "Dict[str,Tuple[Any,Any,Any]]",
                    "Dict[str,tuple[Union[Any,Any,Any]]]"
                ],
                "serialized_full_request_log": [
                    "bool",
                    "str",
                    "models.Telegram_Message",
                    "models.User"
                ]
            }
        }
    },
    "drel-master/tests/test_schemas.py": {
        "test_full_request_log_to_json": {
            "name": "test_full_request_log_to_json",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "requests_request": [
                    "Dict",
                    "requests.Request",
                    "str",
                    "float",
                    "purplship.core.utils.serializable.Deserializable[str]",
                    "Dict[str,Any]",
                    "None",
                    "Optional[str]"
                ],
                "full_request_log": [
                    "str",
                    "Dict",
                    "Dict[str,Any]"
                ],
                "requests_response": [
                    "Dict",
                    "requests.Request",
                    "str",
                    "float",
                    "purplship.core.utils.serializable.Deserializable[str]",
                    "Dict[str,Any]",
                    "None",
                    "Optional[str]"
                ],
                "full_request_log_schema": [
                    "str",
                    "faustypes.core.OpenHeadersArg",
                    "List[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "test_full_request_log_with_non_default_type": {
            "name": "test_full_request_log_with_non_default_type",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "full_request_log_with_type": [
                    "List[str]"
                ],
                "full_request_log_schema": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "test_full_request_log_with_user": {
            "name": "test_full_request_log_with_user",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "full_request_log_with_user": [
                    "str"
                ],
                "full_request_log_schema": [
                    "str"
                ],
                "user": [
                    "Dict[str,Any]",
                    "str",
                    "int",
                    "Callable"
                ]
            }
        }
    },
    "drel-master/tests/__init__.py": {},
    "drel-master/tests/test_django/test_api.py": {
        "log_builder": {
            "name": "log_builder",
            "location": 16,
            "return": [
                "DjangoFullRequestLogBuilder",
                "List[Dict[str,Any]]",
                "bool",
                "User",
                "asgard.models.user.User"
            ],
            "arguments": {}
        },
        "test_post_request_with_form_data": {
            "name": "test_post_request_with_form_data",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "rf": [
                    "str"
                ],
                "log_builder": [
                    "drel.django.api.DjangoFullRequestLogBuilder",
                    "dict"
                ]
            }
        },
        "test_post_request_with_json_data": {
            "name": "test_post_request_with_json_data",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "rf": [
                    "drel.django.api.DjangoFullRequestLogBuilder",
                    "rest_framework.requesRequest",
                    "deeplearning.ml4pl.models.log_database.Database.SessionType"
                ],
                "log_builder": [
                    "drel.django.api.DjangoFullRequestLogBuilder",
                    "dict"
                ]
            }
        },
        "test_response_data": {
            "name": "test_response_data",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "django.tesClient"
                ],
                "log_builder": [
                    "drel.django.api.DjangoFullRequestLogBuilder",
                    "str",
                    "dict"
                ]
            }
        },
        "test_500_response": {
            "name": "test_500_response",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "django.tesClient"
                ],
                "log_builder": [
                    "drel.django.api.DjangoFullRequestLogBuilder",
                    "str"
                ]
            }
        },
        "test_logging_middleware_with_post_data": {
            "name": "test_logging_middleware_with_post_data",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "freezer": [
                    "Callable",
                    "str",
                    "Callable[...,None]",
                    "backup.config.Config"
                ],
                "test_es_index": [
                    "Callable",
                    "str",
                    "Callable[...,None]",
                    "backup.config.Config"
                ],
                "client": [
                    "Dict"
                ],
                "log_builder": [
                    "Dict",
                    "deeplearning.ml4pl.models.log_database.Database.SessionType",
                    "bytes",
                    "None",
                    "Optional[tracim.models.auth.User]"
                ],
                "full_request_log_schema": [
                    "str",
                    "Dict[str, str]",
                    "List[str]",
                    "List[Tuple[bool, Any]]",
                    "int",
                    "dict"
                ],
                "rf": [
                    "Type",
                    "str",
                    "Sequence[T]"
                ]
            }
        },
        "test_logging_middleware_with_json_data": {
            "name": "test_logging_middleware_with_json_data",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "freezer": [
                    "Callable"
                ],
                "test_es_index": [
                    "Callable"
                ],
                "client": [
                    "deeplearning.ml4pl.models.log_database.Database.SessionType",
                    "rest_framework.requesRequest"
                ],
                "log_builder": [
                    "deeplearning.ml4pl.models.log_database.Database",
                    "raiden.api.resAPIServer",
                    "deeplearning.ml4pl.models.log_database.Database.SessionType"
                ],
                "full_request_log_schema": [
                    "str",
                    "Dict[str, str]",
                    "List[str]",
                    "List[Tuple[bool, Any]]",
                    "int"
                ],
                "rf": [
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "test_non_post_requests_logging": {
            "name": "test_non_post_requests_logging",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "Dict[str,str]"
                ],
                "test_es_index": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "test_log_django_request_with_user": {
            "name": "test_log_django_request_with_user",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "Dict[str,str]",
                    "rest_framework.tesAPIClient",
                    "core.models.Recipe"
                ],
                "test_es_index": [
                    "app.models.user.UserInDB",
                    "ultron8.api.models.user.UserInDB"
                ]
            }
        },
        "test_logged_django_request_contains_duration": {
            "name": "test_logged_django_request_contains_duration",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "accounts.models.User",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "test_es_index": [
                    "str"
                ]
            }
        }
    },
    "drel-master/tests/test_django/__init__.py": {}
}
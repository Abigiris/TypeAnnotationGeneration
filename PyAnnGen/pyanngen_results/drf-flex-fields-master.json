{
    "drf-flex-fields-master/manage.py": {},
    "drf-flex-fields-master/pypi_submit.py": {},
    "drf-flex-fields-master/setup.py": {
        "readme": {
            "name": "readme",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "drf-flex-fields-master/rest_flex_fields/filter_backends.py": {
        "FlexFieldsDocsFilterBackend.filter_queryset": {
            "name": "filter_queryset",
            "location": 32,
            "return": [
                "float",
                "Callable[[None], bool]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.contrib.admin.ModelAdmin",
                    "requests.Request",
                    "django.http.requesHttpRequest"
                ],
                "queryset": [
                    "django.http.HttpRequest",
                    "django.contrib.admin.ModelAdmin",
                    "requests.Request",
                    "django.http.requesHttpRequest"
                ],
                "view": [
                    "django.http.HttpRequest",
                    "django.contrib.admin.ModelAdmin",
                    "requests.Request",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "FlexFieldsDocsFilterBackend._get_field": {
            "name": "_get_field",
            "location": 37,
            "return": [
                "None",
                "Optional[str]",
                "Dict",
                "str"
            ],
            "arguments": {
                "field_name": [
                    "str",
                    "Callable",
                    "django.db.models.Model"
                ],
                "model": [
                    "str",
                    "Callable",
                    "django.db.models.Model"
                ]
            }
        },
        "FlexFieldsDocsFilterBackend._get_expandable_fields": {
            "name": "_get_expandable_fields",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "serializer_class": [
                    "str",
                    "Set",
                    "bool",
                    "Optional[bool]",
                    "None"
                ]
            }
        },
        "FlexFieldsDocsFilterBackend._get_fields": {
            "name": "_get_fields",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "serializer_class": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "Type"
                ]
            }
        },
        "FlexFieldsDocsFilterBackend.get_schema_fields": {
            "name": "get_schema_fields",
            "location": 54,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "Dict[str, Any]",
                    "Optional[Dict]",
                    "str",
                    "jgikbase.idmapping.core.user.User"
                ]
            }
        },
        "FlexFieldsDocsFilterBackend.get_schema_operation_parameters": {
            "name": "get_schema_operation_parameters",
            "location": 102,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "Optional[Dict]",
                    "Optional[List[str]]",
                    "zerver.models.Realm",
                    "server.models.User"
                ]
            }
        },
        "FlexFieldsFilterBackend.filter_queryset": {
            "name": "filter_queryset",
            "location": 150,
            "return": [
                "float",
                "Callable[[None], bool]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "rest_framework.requesRequest",
                    "django.http.HttpRequest"
                ],
                "queryset": [
                    "int",
                    "django.http.HttpRequest",
                    "bool",
                    "django.db.models.QuerySet",
                    "zerver.models.Stream"
                ],
                "view": [
                    "rest_framework.requesRequest",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "dict"
                ]
            }
        },
        "FlexFieldsFilterBackend._get_field": {
            "name": "_get_field",
            "location": 220,
            "return": [
                "None",
                "Optional[str]",
                "Dict",
                "str"
            ],
            "arguments": {
                "field_name": [
                    "str",
                    "Callable",
                    "django.db.models.Model"
                ],
                "model": [
                    "str",
                    "Callable",
                    "django.db.models.Model"
                ]
            }
        }
    },
    "drf-flex-fields-master/rest_flex_fields/serializers.py": {
        "FlexFieldsSerializerMixin.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlexFieldsSerializerMixin.to_representation": {
            "name": "to_representation",
            "location": 61,
            "return": [
                "Dict[str, Any]",
                "float"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "float",
                    "Dict",
                    "str",
                    "int"
                ]
            }
        },
        "FlexFieldsSerializerMixin.get_fields": {
            "name": "get_fields",
            "location": 67,
            "return": [
                "Set[str]",
                "List[str]",
                "Dict",
                "bool",
                "Dict[str,Any]",
                "MutableMapping[str,int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlexFieldsSerializerMixin.apply_flex_fields": {
            "name": "apply_flex_fields",
            "location": 72,
            "return": [
                "str",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "_T0@@"
                ],
                "flex_options": [
                    "List[str]",
                    "Dict"
                ]
            }
        },
        "FlexFieldsSerializerMixin._make_expanded_field_serializer": {
            "name": "_make_expanded_field_serializer",
            "location": 93,
            "return": [
                "Type",
                "Union[str, 'Type']",
                "dict"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]",
                    "List[str]",
                    "str"
                ],
                "nested_expand": [
                    "str",
                    "Callable[...,T]",
                    "bool"
                ],
                "nested_fields": [
                    "str",
                    "Callable[...,T]",
                    "bool"
                ],
                "nested_omit": [
                    "str",
                    "Callable[...,T]",
                    "bool"
                ]
            }
        },
        "FlexFieldsSerializerMixin._get_serializer_class_from_lazy_string": {
            "name": "_get_serializer_class_from_lazy_string",
            "location": 130,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str,Any]",
                "bool",
                "Type",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": [],
                "full_lazy_path": [
                    "str"
                ]
            }
        },
        "FlexFieldsSerializerMixin._import_serializer_class": {
            "name": "_import_serializer_class",
            "location": 146,
            "return": [
                "Tuple[(Any, Optional[str])]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Optional[str]",
                    "Sequence[Sequence[Any]]",
                    "Optional[Sequence[str]]",
                    "None",
                    "Sequence[str]"
                ],
                "class_name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "bytes",
                    "Union[str,bytes]",
                    "Union[str,None]"
                ]
            }
        },
        "FlexFieldsSerializerMixin._get_fields_names_to_remove": {
            "name": "_get_fields_names_to_remove",
            "location": 163,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "current_fields": [
                    "str",
                    "List",
                    "float",
                    "bool",
                    "Type[Exception]",
                    "Iterable[str]",
                    "int"
                ],
                "omit_fields": [
                    "List[str]",
                    "Set[str]",
                    "str",
                    "Optional[str]",
                    "Sequence[int]"
                ],
                "sparse_fields": [
                    "List[str]",
                    "Set[str]",
                    "str",
                    "Optional[str]",
                    "Sequence[int]"
                ],
                "next_level_omits": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "FlexFieldsSerializerMixin._should_field_exist": {
            "name": "_should_field_exist",
            "location": 190,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "field_name": [
                    "str",
                    "Union[bytes,str]",
                    "bytes",
                    "Dict[str,LabwareDefinition]",
                    "Dict[str,L]"
                ],
                "omit_fields": [
                    "List[str]",
                    "str",
                    "bool"
                ],
                "sparse_fields": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "next_level_omits": [
                    "List[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "FlexFieldsSerializerMixin._get_expanded_field_names": {
            "name": "_get_expanded_field_names",
            "location": 214,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "expand_fields": [
                    "Callable",
                    "dict",
                    "int",
                    "List[int]",
                    "str"
                ],
                "omit_fields": [
                    "str",
                    "Callable",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ],
                "sparse_fields": [
                    "str",
                    "Callable",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ],
                "next_level_omits": [
                    "str",
                    "Callable",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ]
            }
        },
        "FlexFieldsSerializerMixin._expandable_fields": {
            "name": "_expandable_fields",
            "location": 243,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlexFieldsSerializerMixin._get_query_param_value": {
            "name": "_get_query_param_value",
            "location": 252,
            "return": [
                "List",
                "bool",
                "Union[int,float]",
                "Optional[float]",
                "Set[str]",
                "Optional[Tuple[str]]"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "int"
                ]
            }
        },
        "FlexFieldsSerializerMixin._get_permitted_expands_from_query_param": {
            "name": "_get_permitted_expands_from_query_param",
            "location": 272,
            "return": [
                "List",
                "int",
                "List[list[str]]",
                "Dict",
                "Set",
                "List[int]",
                "str",
                "float",
                "Callable",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "expand_param": [
                    "int",
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "FlexFieldsSerializerMixin._contains_wildcard_value": {
            "name": "_contains_wildcard_value",
            "location": 290,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "expand_values": [
                    "List[T]",
                    "T"
                ]
            }
        }
    },
    "drf-flex-fields-master/rest_flex_fields/utils.py": {
        "is_expanded": {
            "name": "is_expanded",
            "location": 6,
            "return": [
                "bool"
            ],
            "arguments": {
                "request": [],
                "field": [
                    "str",
                    "Dict[int,str]",
                    "Dict[str,Dict[str,str]]",
                    "Type",
                    "Dict[str,dict[str,str]]"
                ]
            }
        },
        "is_included": {
            "name": "is_included",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "request": [
                    "str"
                ],
                "field": [
                    "str",
                    "Mapping[str,Any]",
                    "Mapping",
                    "Dict[str,List[Callable]]",
                    "Dict[str,list[Callable]]"
                ]
            }
        },
        "split_levels": {
            "name": "split_levels",
            "location": 47,
            "return": [
                "Tuple[(list, Dict[(Any, list)])]"
            ],
            "arguments": {
                "fields": [
                    "str",
                    "List[str]",
                    "Container[Taxon]",
                    "Container",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        }
    },
    "drf-flex-fields-master/rest_flex_fields/views.py": {
        "FlexFieldsMixin.get_serializer_context": {
            "name": "get_serializer_context",
            "location": 12,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "drf-flex-fields-master/rest_flex_fields/__init__.py": {},
    "drf-flex-fields-master/tests/settings.py": {},
    "drf-flex-fields-master/tests/test_flex_fields_model_serializer.py": {
        "MockRequest.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query_params": [
                    "MultiValueDict",
                    "bool",
                    "Optional[int]",
                    "Optional[Dict[str,Any]]",
                    "Union[Callable,str]",
                    "List[str]"
                ],
                "method": [
                    "Text",
                    "bool",
                    "Optional[int]",
                    "Optional[Dict[str,Any]]",
                    "Union[Callable,str]",
                    "List[str]"
                ]
            }
        },
        "TestFlexFieldModelSerializer.test_field_should_not_exist_if_omitted": {
            "name": "test_field_should_not_exist_if_omitted",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlexFieldModelSerializer.test_field_should_not_exist_if_not_in_sparse": {
            "name": "test_field_should_not_exist_if_not_in_sparse",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlexFieldModelSerializer.test_field_should_exist_if_ommitted_but_is_parent_of_omit": {
            "name": "test_field_should_exist_if_ommitted_but_is_parent_of_omit",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlexFieldModelSerializer.test_clean_fields": {
            "name": "test_clean_fields",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlexFieldModelSerializer.test_get_expanded_field_names_if_all": {
            "name": "test_get_expanded_field_names_if_all",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlexFieldModelSerializer.test_get_expanded_names_but_not_omitted": {
            "name": "test_get_expanded_names_but_not_omitted",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlexFieldModelSerializer.test_get_expanded_names_but_only_sparse": {
            "name": "test_get_expanded_names_but_only_sparse",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlexFieldModelSerializer.test_get_expanded_names_including_omitted_when_defer_to_next_level": {
            "name": "test_get_expanded_names_including_omitted_when_defer_to_next_level",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlexFieldModelSerializer.test_get_query_param_value_should_return_empty_if_not_root_serializer": {
            "name": "test_get_query_param_value_should_return_empty_if_not_root_serializer",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlexFieldModelSerializer.test_get_omit_input_from_explicit_settings": {
            "name": "test_get_omit_input_from_explicit_settings",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlexFieldModelSerializer.test_set_omit_input_from_query_param": {
            "name": "test_set_omit_input_from_query_param",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlexFieldModelSerializer.test_set_fields_input_from_explicit_settings": {
            "name": "test_set_fields_input_from_explicit_settings",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlexFieldModelSerializer.test_set_fields_input_from_query_param": {
            "name": "test_set_fields_input_from_query_param",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlexFieldModelSerializer.test_set_expand_input_from_explicit_setting": {
            "name": "test_set_expand_input_from_explicit_setting",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlexFieldModelSerializer.test_set_expand_input_from_query_param": {
            "name": "test_set_expand_input_from_query_param",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlexFieldModelSerializer.test_get_expand_input_from_query_param_limit_to_list_permitted": {
            "name": "test_get_expand_input_from_query_param_limit_to_list_permitted",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlexFieldModelSerializer.test_parse_request_list_value": {
            "name": "test_parse_request_list_value",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlexFieldModelSerializer.test_parse_request_list_value_empty_if_cannot_access_request": {
            "name": "test_parse_request_list_value_empty_if_cannot_access_request",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlexFieldModelSerializer.test_import_serializer_class": {
            "name": "test_import_serializer_class",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlexFieldModelSerializer.test_make_expanded_field_serializer": {
            "name": "test_make_expanded_field_serializer",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "drf-flex-fields-master/tests/test_serializer.py": {
        "MockRequest.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query_params": [
                    "Dict",
                    "bool",
                    "Optional[int]",
                    "Optional[Dict[str,Any]]",
                    "Union[Callable,str]",
                    "List[str]"
                ],
                "method": [
                    "Text",
                    "bool",
                    "Optional[int]",
                    "Optional[Dict[str,Any]]",
                    "Union[Callable,str]",
                    "List[str]"
                ]
            }
        },
        "TestSerialize.test_basic_field_omit": {
            "name": "test_basic_field_omit",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSerialize.test_nested_field_omit": {
            "name": "test_nested_field_omit",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSerialize.test_basic_field_include": {
            "name": "test_basic_field_include",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSerialize.test_nested_field_include": {
            "name": "test_nested_field_include",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSerialize.test_basic_expand": {
            "name": "test_basic_expand",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSerialize.test_nested_expand": {
            "name": "test_nested_expand",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSerialize.test_expand_from_request": {
            "name": "test_expand_from_request",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSerialize.test_expand_with_custom_param_name": {
            "name": "test_expand_with_custom_param_name",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSerialize.test_omit_with_custom_param_name": {
            "name": "test_omit_with_custom_param_name",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSerialize.test_fields_include_with_custom_param_name": {
            "name": "test_fields_include_with_custom_param_name",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSerialize.test_all_special_value_in_serialize": {
            "name": "test_all_special_value_in_serialize",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "drf-flex-fields-master/tests/test_utils.py": {
        "MockRequest.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query_params": [
                    "Dict",
                    "bool",
                    "Optional[int]",
                    "Optional[Dict[str,Any]]",
                    "Union[Callable,str]",
                    "List[str]"
                ],
                "method": [
                    "Text",
                    "bool",
                    "Optional[int]",
                    "Optional[Dict[str,Any]]",
                    "Union[Callable,str]",
                    "List[str]"
                ]
            }
        },
        "TestUtils.test_should_be_included": {
            "name": "test_should_be_included",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUtils.test_should_not_be_included": {
            "name": "test_should_not_be_included",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUtils.test_should_not_be_included_and_due_to_omit_and_has_dot_notation": {
            "name": "test_should_not_be_included_and_due_to_omit_and_has_dot_notation",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUtils.test_should_not_be_included_and_due_to_fields_and_has_dot_notation": {
            "name": "test_should_not_be_included_and_due_to_fields_and_has_dot_notation",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUtils.test_should_be_expanded": {
            "name": "test_should_be_expanded",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUtils.test_should_not_be_expanded": {
            "name": "test_should_not_be_expanded",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUtils.test_should_be_expanded_and_has_dot_notation": {
            "name": "test_should_be_expanded_and_has_dot_notation",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "drf-flex-fields-master/tests/test_views.py": {
        "PetViewTests.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PetViewTests.tearDown": {
            "name": "tearDown",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PetViewTests.test_retrieve_expanded": {
            "name": "test_retrieve_expanded",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PetViewTests.test_retrieve_sparse": {
            "name": "test_retrieve_sparse",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PetViewTests.test_retrieve_sparse_and_deep_expanded": {
            "name": "test_retrieve_sparse_and_deep_expanded",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PetViewTests.test_retrieve_all_fields_at_root_and_sparse_fields_at_next_level": {
            "name": "test_retrieve_all_fields_at_root_and_sparse_fields_at_next_level",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PetViewTests.test_list_expanded": {
            "name": "test_list_expanded",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PetViewTests.test_create_and_return_expanded_field": {
            "name": "test_create_and_return_expanded_field",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PetViewTests.test_expand_drf_serializer_field": {
            "name": "test_expand_drf_serializer_field",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PetViewTests.test_expand_drf_model_serializer": {
            "name": "test_expand_drf_model_serializer",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PetViewWithSelectFieldsFilterBackendTests.test_query_optimization": {
            "name": "test_query_optimization",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "drf-flex-fields-master/tests/urls.py": {},
    "drf-flex-fields-master/tests/__init__.py": {},
    "drf-flex-fields-master/tests/testapp/apps.py": {},
    "drf-flex-fields-master/tests/testapp/models.py": {},
    "drf-flex-fields-master/tests/testapp/serializers.py": {
        "PetSerializer.get_diet": {
            "name": "get_diet",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str"
                ]
            }
        }
    },
    "drf-flex-fields-master/tests/testapp/views.py": {},
    "drf-flex-fields-master/tests/testapp/__init__.py": {}
}
{
    "drum-style-transfer-master/src/compression.py": {
        "K": {
            "name": "K",
            "location": 22,
            "return": [
                "int",
                "Optional[int]",
                "utils.Node",
                "List[int]",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "str"
            ],
            "arguments": {
                "x": [
                    "str",
                    "bytes"
                ]
            }
        },
        "K_conditional": {
            "name": "K_conditional",
            "location": 29,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "y": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "NCD": {
            "name": "NCD",
            "location": 35,
            "return": [
                "float",
                "int",
                "bool",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "Union[numpy.ndarray,pandas.DataFrame]"
                ],
                "y": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "Union[numpy.ndarray,pandas.DataFrame]"
                ],
                "v": [
                    "int",
                    "numpy.ndarray",
                    "Tuple[float,float]",
                    "Optional[List[Any]]"
                ]
            }
        },
        "NCD_multiple": {
            "name": "NCD_multiple",
            "location": 44,
            "return": [
                "Optional[int]",
                "str",
                "Optional[List[int]]"
            ],
            "arguments": {
                "xs": [
                    "str",
                    "int"
                ],
                "ys": [
                    "float",
                    "int",
                    "T",
                    "bool"
                ],
                "pre_concatenation": [
                    "bool",
                    "str",
                    "int",
                    "Iterable[Any]"
                ],
                "separator": [
                    "Text",
                    "int",
                    "Optional[int]",
                    "numpy.ndarray"
                ],
                "v": [
                    "int",
                    "float",
                    "Dict[int,Tuple[int,int]]",
                    "Union[float,str]",
                    "List[float]",
                    "Tuple[float,float,float,float]"
                ]
            }
        },
        "to_string": {
            "name": "to_string",
            "location": 58,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "x": [
                    "List[float]",
                    "List[str]",
                    "str"
                ],
                "suppress_small": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "formatter": [
                    "bool",
                    "str",
                    "int",
                    "numpy.ndarray",
                    "Set[str]",
                    "List[Optional[float]]"
                ]
            }
        }
    },
    "drum-style-transfer-master/src/config.py": {
        "debug": {
            "name": "debug",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "info": {
            "name": "info",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "drum-style-transfer-master/src/errors.py": {
        "typeError": {
            "name": "typeError",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "expected": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        }
    },
    "drum-style-transfer-master/src/functions.py": {
        "extract_frequencies_matrix": {
            "name": "extract_frequencies_matrix",
            "location": 7,
            "return": [
                "Callable",
                "Tuple[numpy.ndarray]",
                "str"
            ],
            "arguments": {
                "matrix": [
                    "float",
                    "str",
                    "Dict[str,Any]",
                    "List[cirq.Qid]"
                ],
                "floor": [
                    "int",
                    "float",
                    "str",
                    "Dict[str,Any]",
                    "List[cirq.Qid]"
                ],
                "default": [
                    "int",
                    "Iterable[cirq.Qid]",
                    "Optional[T]",
                    "bool"
                ]
            }
        },
        "extract_max_frequencies_matrix": {
            "name": "extract_max_frequencies_matrix",
            "location": 14,
            "return": [
                "Callable",
                "Tuple[numpy.ndarray]",
                "str"
            ],
            "arguments": {
                "matrix": [
                    "numpy.ndarray"
                ],
                "floor": [
                    "numpy.ndarray",
                    "int"
                ],
                "default": [
                    "int",
                    "Iterable[cirq.Qid]",
                    "Optional[T]",
                    "bool"
                ]
            }
        },
        "extract_frequencies": {
            "name": "extract_frequencies",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "array": [
                    "numpy.ndarray",
                    "int",
                    "float"
                ],
                "floor": [
                    "int",
                    "Mapping[str,float]",
                    "numpy.ndarray"
                ],
                "default": [
                    "int",
                    "Iterable[cirq.Qid]",
                    "Optional[T]",
                    "bool"
                ],
                "increase_recall": [
                    "bool",
                    "int",
                    "str",
                    "Sequence[T]",
                    "List[List[int]]"
                ]
            }
        },
        "extract_frequencies_tolerant": {
            "name": "extract_frequencies_tolerant",
            "location": 46,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "array": [
                    "bool",
                    "numpy.ndarray"
                ],
                "floor": [
                    "int",
                    "numpy.ndarray",
                    "bool"
                ]
            }
        },
        "keep_first_hits": {
            "name": "keep_first_hits",
            "location": 51,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "array": [
                    "str",
                    "int",
                    "Callable"
                ],
                "axis": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "summarize_array": {
            "name": "summarize_array",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "array": [
                    "Union[numpy.ndarray, numpy.void]",
                    "float",
                    "numpy.ndarray",
                    "int",
                    "List[float]"
                ],
                "axis": [
                    "int",
                    "Union[numpy.ndarray,numpy.void]",
                    "float",
                    "numpy.ndarray",
                    "List[float]"
                ]
            }
        }
    },
    "drum-style-transfer-master/src/main.py": {},
    "drum-style-transfer-master/src/models.py": {
        "transfer_style": {
            "name": "transfer_style",
            "location": 28,
            "return": [],
            "arguments": {
                "encoder": [],
                "decoder": [
                    "float",
                    "Exception",
                    "list[app.models.Question]",
                    "int"
                ],
                "stylesA": [
                    "float",
                    "Exception",
                    "list[app.models.Question]",
                    "int"
                ],
                "stylesB": [
                    "float",
                    "Exception",
                    "list[app.models.Question]",
                    "int"
                ],
                "samples": [
                    "list[]"
                ],
                "amt": [
                    "float"
                ]
            }
        },
        "extract_transformation": {
            "name": "extract_transformation",
            "location": 37,
            "return": [],
            "arguments": {
                "encoder": [],
                "stylesA": [
                    "typing.Callable[..., bool]",
                    "float",
                    "int",
                    "list[app.models.Question]"
                ],
                "stylesB": [
                    "int",
                    "list[str]",
                    "float"
                ]
            }
        },
        "apply_transformation": {
            "name": "apply_transformation",
            "location": 45,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "vectors": [
                    "int"
                ],
                "transformation": [
                    "int"
                ],
                "amt": [
                    "float"
                ]
            }
        },
        "gen_latent": {
            "name": "gen_latent",
            "location": 51,
            "return": [],
            "arguments": {
                "generator": [
                    "int",
                    "float"
                ],
                "batch_size": [
                    "int"
                ],
                "latent_dim": [
                    "int"
                ],
                "x_encoded": [],
                "latent_indices": [
                    "tuple[int]"
                ],
                "n": [
                    "int"
                ],
                "m": [
                    "int"
                ],
                "min_x": [
                    "float"
                ],
                "max_x": [
                    "float"
                ],
                "min_y": [
                    "float"
                ],
                "max_y": [
                    "float"
                ],
                "assume_gaussion": [
                    "bool"
                ],
                "plot_result": [
                    "bool"
                ],
                "v": [
                    "int"
                ]
            }
        },
        "build": {
            "name": "build",
            "location": 110,
            "return": [
                "tuple[typing.Union[Model,float,tuple[typing.Union[tuple[typing.Union[typing.Literal,typing.Literal]],tuple[typing.Union[typing.Literal,typing.Literal]],tuple[typing.Union[typing.Literal,typing.Literal]],tuple[typing.Union[typing.Literal,typing.Literal]]]],tuple[tuple[typing.Union[typing.Any,...]]]]]"
            ],
            "arguments": {
                "input_shape": [
                    "tuple[int]"
                ],
                "latent_dim": [
                    "int"
                ],
                "epsilon_std": [
                    "float"
                ]
            }
        },
        "build_manual": {
            "name": "build_manual",
            "location": 158,
            "return": [
                "tuple[Model]"
            ],
            "arguments": {
                "input_shape": [
                    "tuple[int]"
                ],
                "latent_dim": [
                    "int"
                ],
                "epsilon_std": [
                    "float"
                ]
            }
        },
        "sample": {
            "name": "sample",
            "location": 201,
            "return": [],
            "arguments": {
                "args": [],
                "z_mean": [],
                "z_log_var": [],
                "latent_dim": [],
                "epsilon_std": []
            }
        },
        "encoder": {
            "name": "encoder",
            "location": 208,
            "return": [
                "tuple[typing.Union[Model,str,dict[str, typing.Any],list[],dict[, ],list[str],set[],int]]"
            ],
            "arguments": {
                "input_shape": [
                    "list[]",
                    "list[int]"
                ],
                "latent_dim": [
                    "int"
                ]
            }
        },
        "list_decoders": {
            "name": "list_decoders",
            "location": 230,
            "return": [
                "list[]"
            ],
            "arguments": {
                "output_shape": [
                    "typing.Sequence[str]",
                    "None"
                ]
            }
        },
        "decoder": {
            "name": "decoder",
            "location": 278,
            "return": [
                "Model"
            ],
            "arguments": {
                "input_": [
                    "int",
                    "str",
                    "None"
                ],
                "latent_dim": [
                    "int"
                ],
                "output_shape": [
                    "tuple[int]"
                ]
            }
        },
        "vae_loss": {
            "name": "vae_loss",
            "location": 317,
            "return": [],
            "arguments": {
                "vae_input": [
                    "int"
                ],
                "vae_output": [
                    "str",
                    "int",
                    "dict[str, str]",
                    "list[str]"
                ],
                "z_mean": [
                    "bool",
                    "dict[str, typing.Any]",
                    "str",
                    "None",
                    "float"
                ],
                "z_log_var": [
                    "bool",
                    "float"
                ],
                "timesteps": [
                    "int"
                ],
                "notes": [
                    "int"
                ],
                "beta": [
                    "float"
                ],
                "extra_loss_f": [],
                "gamma": [
                    "float"
                ]
            }
        },
        "build.sample": {
            "name": "sample",
            "location": 119,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "ImageDataGenerator.__init__": {
            "name": "__init__",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "list[int]",
                    "tuple[typing.Union[int,int]]",
                    "None",
                    "set[int]"
                ],
                "batch_size": [
                    "int"
                ],
                "phase_mod": [
                    "float"
                ],
                "whitening": [
                    "bool"
                ],
                "zca_epsilon": [
                    "float"
                ]
            }
        },
        "ImageDataGenerator.__len__": {
            "name": "__len__",
            "location": 378,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageDataGenerator.shuffle_3rd_dim": {
            "name": "shuffle_3rd_dim",
            "location": 383,
            "return": [],
            "arguments": {
                "self": [],
                "x_batch": [
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "ImageDataGenerator.shuffle_3rd_dim_soft": {
            "name": "shuffle_3rd_dim_soft",
            "location": 396,
            "return": [
                "list[]",
                "int",
                "list[list[int]]",
                "dict[, ]",
                "float"
            ],
            "arguments": {
                "self": [],
                "x_batch": [
                    "list[]"
                ],
                "rate": [
                    "int"
                ],
                "intensity": [
                    "float"
                ],
                "scale": [
                    "float"
                ],
                "verbose": [
                    "int"
                ]
            }
        },
        "ImageDataGenerator._shuffle_indices": {
            "name": "_shuffle_indices",
            "location": 424,
            "return": [
                "list[tuple[typing.Union[int,int]]]",
                "int",
                "dict[str, typing.Union[int,str]]",
                "dict[int, int]",
                "typing.Deque",
                "set[]",
                "typing.Pattern"
            ],
            "arguments": {
                "self": [],
                "indices": [],
                "intensity": [
                    "int"
                ],
                "std": [
                    "int"
                ],
                "verbose": [
                    "int"
                ]
            }
        }
    },
    "drum-style-transfer-master/src/ncd_evaluation.py": {
        "cross": {
            "name": "cross",
            "location": 19,
            "return": [
                "Dict[list[str],dict]",
                "bool",
                "Optional[Union[str,Any]]"
            ],
            "arguments": {
                "z": [
                    "int",
                    "Dict[str,str]",
                    "Optional[Any]",
                    "Any",
                    "None"
                ],
                "genre_dict": [
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "List",
                    "Optional[Dict[str,Any]]",
                    "List[Dict]",
                    "List[str]"
                ],
                "transformations": [
                    "int",
                    "Dict[str,str]",
                    "Optional[Any]",
                    "Any",
                    "None"
                ],
                "generator": [
                    "int",
                    "Dict[str,str]",
                    "Optional[Any]",
                    "Any",
                    "None"
                ],
                "grid": [
                    "List[Union[int,float]]",
                    "int",
                    "Dict[str,str]",
                    "Optional[Any]"
                ],
                "different_genre_a": [
                    "bool",
                    "int",
                    "Dict[str,str]",
                    "Optional[Any]"
                ],
                "amt1": [
                    "str",
                    "List",
                    "None",
                    "bytes"
                ],
                "amt2": [
                    "int",
                    "Dict[str,str]",
                    "None",
                    "Optional[Any]",
                    "Any"
                ],
                "compare_to_target": [
                    "bool",
                    "int",
                    "Dict[str,str]",
                    "Optional[Any]"
                ],
                "v": [
                    "int",
                    "Dict[str,str]",
                    "Optional[Any]"
                ]
            }
        },
        "for_every_genre": {
            "name": "for_every_genre",
            "location": 81,
            "return": [
                "Dict[int,dict[Union[int,str,tuple[Union[int,int]]],]]",
                "zerver.models.Realm",
                "bool",
                "Dict[str,int]",
                "float"
            ],
            "arguments": {
                "z": [
                    "int",
                    "Dict[str, str]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "original_genre": [
                    "cmk.utils.type_defs.EventRule",
                    "List[Dict[str, Any]]",
                    "dict",
                    "Dict[str, float]",
                    "Mapping",
                    "raiden.utils.ChannelMap",
                    "raiden.utils.Dict"
                ],
                "genre_dict": [
                    "str",
                    "Dict[str,Any]",
                    "Dict",
                    "Optional[Dict[str,Any]]"
                ],
                "transformations": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Optional[Dict[str, Any]]",
                    "Callable",
                    "List[Tuple[grouper.models.group.Group, str]]"
                ],
                "generator": [
                    "int",
                    "List[int]",
                    "Dict[str,Any]",
                    "bool",
                    "Mapping",
                    "None",
                    "Mapping[Any,Any]",
                    "Optional[GraphLogger]"
                ],
                "grid": [
                    "List[int]",
                    "int",
                    "float"
                ],
                "different_genre_a": [
                    "bool",
                    "int",
                    "bytes",
                    "str"
                ],
                "amt": [
                    "int",
                    "bytes",
                    "bool",
                    "str"
                ],
                "compare_to_target": [
                    "bool",
                    "int"
                ],
                "v": [
                    "int",
                    "bool"
                ]
            }
        },
        "grid_search": {
            "name": "grid_search",
            "location": 151,
            "return": [
                "Tuple[Union[dict[int,],list]]",
                "Dict",
                "str",
                "Set",
                "models.Match",
                "List[str]"
            ],
            "arguments": {
                "z": [
                    "int",
                    "str",
                    "models.Stop"
                ],
                "x_other": [
                    "float",
                    "int",
                    "List[int]",
                    "bool",
                    "Tuple[Union[float,float]]",
                    "Tuple[float,float]"
                ],
                "transformation": [
                    "int",
                    "str",
                    "models.Stop"
                ],
                "generator": [
                    "int",
                    "str",
                    "raiden.utils.TokenAmount",
                    "Dict[str,Any]",
                    "None",
                    "raiden.utils.Locksroot",
                    "bool",
                    "Optional[Dict[str,Any]]"
                ],
                "grid": [
                    "List[int]",
                    "bool",
                    "Dict[str,Any]",
                    "int"
                ],
                "save_transformed": [
                    "bool",
                    "int",
                    "raiden.utils.TokenAmount",
                    "str",
                    "raiden.utils.Locksroot",
                    "Optional[Dict[str,Any]]"
                ]
            }
        },
        "transform": {
            "name": "transform",
            "location": 179,
            "return": [
                "Tuple[Union[list,dict[int,tuple]]]",
                "bool",
                "Optional[str]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "z": [
                    "str",
                    "bool"
                ],
                "genre_dict": [
                    "Dict",
                    "None",
                    "Dict[str,dict[str,float]]",
                    "Optional[numpy.ndarray]",
                    "Tuple[cirq.Qid]",
                    "collections.abc.AsyncIterable",
                    "numpy.ndarray",
                    "Dict[str,Dict[str,float]]",
                    "dep_check.models.GlobalDependencies",
                    "Optional[Dict[str,Any]]",
                    "Union[AsyncIterable[Any],Iterable[Any]]"
                ],
                "transformations": [
                    "int",
                    "Optional[int]",
                    "numpy.ndarray",
                    "Union[numpy.ndarray, numpy.void]",
                    "Callable[[numpy.ndarray, numpy.ndarray], float]"
                ],
                "generator": [
                    "float",
                    "int"
                ],
                "grid": [
                    "List[Union[int,float]]",
                    "float",
                    "int",
                    "Dict[str,str]",
                    "Optional[int]",
                    "List[int]"
                ],
                "amt1": [
                    "int",
                    "List[Tuple[float,Any]]",
                    "Iterable",
                    "str"
                ],
                "amt2": [
                    "List[numpy.array]",
                    "list",
                    "Sequence[T]",
                    "Sequence[Sequence[float]]",
                    "numpy.ndarray"
                ],
                "v": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "drum-style-transfer-master/src/setup.py": {
        "init": {
            "name": "init",
            "location": 40,
            "return": [
                "Context",
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "max_bars": [
                    "int",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "import_data": {
            "name": "import_data",
            "location": 64,
            "return": [
                "Tuple[Union[dict[str,str],dict,list[bytes]]]",
                "str",
                "bool"
            ],
            "arguments": {
                "context": [
                    "int",
                    "List[str]"
                ],
                "n": [
                    "int",
                    "List[str]"
                ],
                "multiTrack": [
                    "bool",
                    "str",
                    "int",
                    "Union[int,float]",
                    "bytes"
                ],
                "reduce_dims": [
                    "str",
                    "bool",
                    "int",
                    "Union[int, float]",
                    "bytes"
                ],
                "dim4": [
                    "bool",
                    "str",
                    "int",
                    "Tuple",
                    "Optional[str]",
                    "Dict",
                    "Union[str,bytes]"
                ],
                "dirname": [
                    "Text",
                    "bool",
                    "str",
                    "Optional[float]",
                    "int",
                    "Optional[bool]"
                ],
                "r": [
                    "bool",
                    "int",
                    "List[str]"
                ],
                "velocity": [
                    "str",
                    "None",
                    "int",
                    "Tuple",
                    "Dict",
                    "Optional[str]",
                    "bytes",
                    "Union[str,bytes]",
                    "bool"
                ]
            }
        },
        "build_label_dict": {
            "name": "build_label_dict",
            "location": 87,
            "return": [
                "str",
                "dict",
                "Iterable[Tuple[str, str]]",
                "Dict[str, Any]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "labels": [
                    "str",
                    "int",
                    "Optional[Callable]"
                ],
                "min_samples": [
                    "int",
                    "str",
                    "Dict[str,Any]",
                    "bytes",
                    "Dict[str,str]"
                ]
            }
        }
    },
    "drum-style-transfer-master/src/test_import.py": {},
    "drum-style-transfer-master/src/test_midi.py": {},
    "drum-style-transfer-master/src/test_midi2.py": {},
    "drum-style-transfer-master/src/test_midi3.py": {},
    "drum-style-transfer-master/src/transformation_extraction.py": {
        "between_genres": {
            "name": "between_genres",
            "location": 33,
            "return": [
                "Tuple[Union[list[int],list,dict]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "Dict",
                    "numpy.ndarray",
                    "Mapping",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]"
                ],
                "genre_dict": [
                    "Dict[str,str]",
                    "List[List]",
                    "Optional[Dict[str,Any]]",
                    "List[str]",
                    "List"
                ],
                "amt1": [
                    "int",
                    "bool"
                ],
                "amt2": [
                    "numpy.ndarray",
                    "Dict",
                    "None",
                    "Mapping",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "v": [
                    "int",
                    "numpy.ndarray",
                    "Dict",
                    "List[Dict[str,Any]]",
                    "Mapping"
                ]
            }
        },
        "_between_genres": {
            "name": "_between_genres",
            "location": 69,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "bool"
                ],
                "genre": [
                    "bool"
                ],
                "genre_dict": [
                    "str",
                    "bool"
                ],
                "result": [
                    "bool",
                    "numpy.ndarray",
                    "float",
                    "Optional[float]",
                    "None",
                    "Optional[List[Any]]",
                    "List[Any]"
                ],
                "amt2": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ],
                "v": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "transformations_from_genre": {
            "name": "transformations_from_genre",
            "location": 83,
            "return": [
                "Tuple[Union[list,dict]]",
                "bool",
                "str"
            ],
            "arguments": {
                "original_genre": [
                    "int",
                    "Dict",
                    "Dict[str,Any]",
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "genre_dict": [
                    "dict",
                    "Dict[str, List[str]]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "Tuple['cirq.Qid']"
                ],
                "x": [
                    "float",
                    "int",
                    "List"
                ],
                "amt": [
                    "bool",
                    "float",
                    "List[Outcome]",
                    "str",
                    "int"
                ],
                "v": [
                    "int",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "_transformation_ab": {
            "name": "_transformation_ab",
            "location": 121,
            "return": [
                "Tuple",
                "bool",
                "Union[type,Tuple[type,...]]",
                "Optional[Any]",
                "str"
            ],
            "arguments": {
                "indices_a": [
                    "int",
                    "numpy.ndarray"
                ],
                "indices_b": [
                    "int",
                    "numpy.ndarray"
                ],
                "x": [
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "best_feature": {
            "name": "best_feature",
            "location": 130,
            "return": [
                "Tuple",
                "Set",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "X": [
                    "int",
                    "bool"
                ],
                "y": [
                    "int",
                    "bool"
                ],
                "n_estimators": [
                    "int"
                ]
            }
        },
        "build_Xy": {
            "name": "build_Xy",
            "location": 142,
            "return": [
                "Tuple[list[int]]",
                "float",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "Set[Optional[str]]",
                "int"
            ],
            "arguments": {
                "data": [
                    "int",
                    "List",
                    "Dict[str,Any]",
                    "bool"
                ],
                "indices_a": [
                    "List",
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "indices_b": [
                    "List",
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "average_transformation": {
            "name": "average_transformation",
            "location": 149,
            "return": [
                "bool",
                "str",
                "Union[numbers.Real, numpy.ndarray]"
            ],
            "arguments": {
                "A": [
                    "str",
                    "int",
                    "numpy.ndarray"
                ],
                "B": [
                    "int",
                    "str",
                    "numpy.ndarray"
                ]
            }
        },
        "minimal_transformation": {
            "name": "minimal_transformation",
            "location": 156,
            "return": [
                "str",
                "bool",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "vector": [
                    "Tuple[Union[float,float]]",
                    "str",
                    "int",
                    "Tuple[float,float]"
                ],
                "i": [
                    "int",
                    "Iterable[bytes]",
                    "float",
                    "str"
                ]
            }
        }
    },
    "drum-style-transfer-master/src/__init__.py": {},
    "drum-style-transfer-master/src/capsule/capsulefunctions.py": {
        "squash": {
            "name": "squash",
            "location": 11,
            "return": [
                "float",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "axis": [
                    "float",
                    "int"
                ]
            }
        },
        "softmax": {
            "name": "softmax",
            "location": 19,
            "return": [
                "str",
                "bool",
                "Optional[int]",
                "Optional[bool]"
            ],
            "arguments": {
                "x": [
                    "Tuple[int]"
                ],
                "axis": [
                    "int",
                    "float"
                ]
            }
        },
        "margin_loss": {
            "name": "margin_loss",
            "location": 25,
            "return": [
                "bool",
                "Dict[str, Tuple[str, str]]"
            ],
            "arguments": {
                "y_true": [
                    "float",
                    "T"
                ],
                "y_pred": [
                    "float",
                    "T"
                ]
            }
        }
    },
    "drum-style-transfer-master/src/capsule/layers.py": {
        "Capsule.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_capsule": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "dim_capsule": [
                    "int",
                    "float",
                    "Union[str,float]",
                    "str"
                ],
                "routings": [
                    "int",
                    "Union[str,float]",
                    "float"
                ],
                "share_weights": [
                    "bool",
                    "str"
                ],
                "activation": [
                    "Text",
                    "Dict[str,Any]",
                    "Dict[str,int]",
                    "bool",
                    "int",
                    "Set[int]",
                    "str"
                ]
            }
        },
        "Capsule.build": {
            "name": "build",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_shape": [
                    "str"
                ]
            }
        },
        "Capsule.call": {
            "name": "call",
            "location": 62,
            "return": [
                "None",
                "str",
                "Callable",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "List",
                    "int"
                ]
            }
        },
        "Capsule.compute_output_shape": {
            "name": "compute_output_shape",
            "location": 105,
            "return": [
                "Tuple[None]",
                "Optional[str]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "input_shape": [
                    "int",
                    "Generator",
                    "List[int]",
                    "bool",
                    "List[str]",
                    "None",
                    "Union[None,bytes]",
                    "bytes"
                ]
            }
        }
    },
    "drum-style-transfer-master/src/layers/extra.py": {
        "Resample.__new__": {
            "name": "__new__",
            "location": 5,
            "return": [
                "int",
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "input_shape": [
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "length": [
                    "float",
                    "List",
                    "List[int]",
                    "List[Dict]",
                    "List[float]"
                ]
            }
        }
    },
    "drum-style-transfer-master/src/losses/extra.py": {
        "kl_loss": {
            "name": "kl_loss",
            "location": 4,
            "return": [
                "float",
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "z_mean": [
                    "str",
                    "bool",
                    "Dict[str,str]",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "z_log_var": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]",
                    "Dict[str,str]"
                ]
            }
        }
    },
    "drum-style-transfer-master/src/midi/decode.py": {
        "identity": {
            "name": "identity",
            "location": 21,
            "return": [
                "str",
                "hackathon.utils.utils.ResultsMessage",
                "bool"
            ],
            "arguments": {
                "c": [
                    "int",
                    "str",
                    "float",
                    "numpy.ndarray",
                    "Tuple[Union[numpy.ndarray,numpy.ndarray]]",
                    "Tuple[numpy.ndarray,numpy.ndarray]",
                    "Union[numpy.ndarray,numpy.void]"
                ],
                "matrix": [
                    "Dict",
                    "List[bytes]",
                    "bytes",
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "v": [
                    "int",
                    "numpy.ndarray",
                    "str",
                    "float",
                    "Tuple[numpy.ndarray,numpy.ndarray]",
                    "Union[numpy.ndarray,numpy.void]"
                ]
            }
        },
        "tracks": {
            "name": "tracks",
            "location": 33,
            "return": [
                "bool",
                "List"
            ],
            "arguments": {
                "c": [
                    "int",
                    "numpy.array",
                    "T"
                ],
                "matrices": [
                    "int",
                    "numpy.array",
                    "T"
                ],
                "v": [
                    "int",
                    "numpy.array",
                    "T"
                ]
            }
        },
        "track": {
            "name": "track",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "c": [
                    "str",
                    "bool",
                    "T",
                    "int"
                ],
                "matrix": [
                    "List[str]",
                    "List",
                    "Dict[str,Callable[str,Any]]",
                    "keras.utils.Sequence",
                    "numpy.ndarray",
                    "Dict[str,Callable[[str],Any]]"
                ],
                "transpose": [
                    "int",
                    "IO",
                    "Collection",
                    "str",
                    "bool"
                ],
                "name": [
                    "Text",
                    "str",
                    "int"
                ],
                "v": [
                    "int",
                    "float",
                    "str",
                    "Iterable[Hashable]"
                ]
            }
        },
        "notes": {
            "name": "notes",
            "location": 82,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "c": [
                    "Set",
                    "Dict",
                    "bool",
                    "Tuple[Union[float,float]]",
                    "Tuple[float,float]",
                    "str",
                    "int",
                    "None",
                    "numpy.ndarray",
                    "Optional[str]"
                ],
                "notes": [
                    "str",
                    "Union[None,str,int]"
                ],
                "t": [
                    "Set",
                    "Dict",
                    "bool",
                    "Tuple[Union[float,float]]",
                    "Tuple[float,float]",
                    "str",
                    "int",
                    "None",
                    "numpy.ndarray",
                    "Optional[str]"
                ],
                "lookahead_matrix": [
                    "List",
                    "bool",
                    "Optional[List]",
                    "Optional[Union[float,Any]]",
                    "int",
                    "Optional[float]",
                    "Optional[Type[Any]]"
                ],
                "transpose": [
                    "int",
                    "Set",
                    "Dict",
                    "Tuple[float,float]",
                    "bool",
                    "numpy.ndarray",
                    "Optional[str]"
                ],
                "v": [
                    "int",
                    "Set",
                    "Dict",
                    "Tuple[float,float]",
                    "bool",
                    "numpy.ndarray",
                    "Optional[str]"
                ]
            }
        },
        "note": {
            "name": "note",
            "location": 97,
            "return": [
                "List",
                "Callable",
                "Tuple[numpy.ndarray]",
                "str"
            ],
            "arguments": {
                "c": [
                    "int",
                    "Callable",
                    "numpy.ndarray",
                    "bool"
                ],
                "note_index": [
                    "int",
                    "List[int]",
                    "float",
                    "Optional[float]",
                    "Union[str,int,float]",
                    "None",
                    "str"
                ],
                "velocity": [
                    "numpy.ndarray",
                    "Callable[[numpy.ndarray], numpy.ndarray]",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "t": [
                    "int",
                    "Callable",
                    "numpy.ndarray",
                    "bool"
                ],
                "transpose": [
                    "int",
                    "numpy.ndarray",
                    "bool",
                    "Callable"
                ],
                "v": [
                    "int",
                    "bool",
                    "Optional[float]",
                    "str"
                ]
            }
        },
        "_note": {
            "name": "_note",
            "location": 111,
            "return": [
                "List[int]",
                "List[List[int]]",
                "numpy.ndarray"
            ],
            "arguments": {
                "note_index": [
                    "bool",
                    "str",
                    "float",
                    "Sequence[int]",
                    "int"
                ]
            }
        }
    },
    "drum-style-transfer-master/src/midi/encode.py": {
        "identity": {
            "name": "identity",
            "location": 20,
            "return": [
                "Iterable[numpy.dtype]",
                "str",
                "int"
            ],
            "arguments": {
                "c": [
                    "Callable",
                    "str",
                    "Sequence[int]"
                ],
                "m": [
                    "int",
                    "Sequence[str]",
                    "List[str]",
                    "numpy.ndarray",
                    "None",
                    "Optional[int]"
                ],
                "v": [
                    "int",
                    "Callable",
                    "str",
                    "Sequence[int]"
                ]
            }
        },
        "midiFiles": {
            "name": "midiFiles",
            "location": 31,
            "return": [
                "List[str]",
                "Optional[str]",
                "str",
                "int",
                "Sequence[Any]"
            ],
            "arguments": {
                "c": [
                    "str",
                    "bool"
                ],
                "midis": [
                    "str",
                    "Tuple",
                    "bool",
                    "int"
                ],
                "multiTrack": [
                    "bool",
                    "str",
                    "Union[int,str]"
                ],
                "reduce_dims": [
                    "str",
                    "bool",
                    "IO[str]",
                    "IO",
                    "int",
                    "Callable"
                ],
                "velocity": [
                    "str",
                    "None",
                    "bool",
                    "Union[int,str]"
                ],
                "dim4": [
                    "bool",
                    "int",
                    "str",
                    "Tuple"
                ],
                "split_files": [
                    "bool",
                    "str",
                    "Union[int,str]"
                ],
                "v": [
                    "int",
                    "str",
                    "bool",
                    "Union[int,str]"
                ]
            }
        },
        "midiFile": {
            "name": "midiFile",
            "location": 80,
            "return": [
                "List",
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "c": [
                    "int",
                    "str",
                    "Dict",
                    "Tuple",
                    "bool",
                    "Tuple[Union[float,float]]",
                    "Tuple[float,float]"
                ],
                "mid": [
                    "bool",
                    "None",
                    "int",
                    "Optional[int]"
                ],
                "multiTrack": [
                    "bool",
                    "List",
                    "str"
                ],
                "velocity": [
                    "List[str]",
                    "None",
                    "str",
                    "Tuple[int]",
                    "bytes",
                    "bool",
                    "int"
                ],
                "reduce_dims": [
                    "bool",
                    "Set[int]",
                    "Set[str]",
                    "str"
                ],
                "split_files": [
                    "bool",
                    "List",
                    "str"
                ],
                "v": [
                    "int",
                    "bool",
                    "List",
                    "str"
                ]
            }
        },
        "_extend_MultiTrack": {
            "name": "_extend_MultiTrack",
            "location": 127,
            "return": [
                "int",
                "Tuple[Union[float,float]]",
                "Callable",
                "List[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "c": [
                    "str",
                    "numpy.ndarray",
                    "float",
                    "Tuple[Union[int,int,int,int]]",
                    "int",
                    "Dict",
                    "Tuple[int,int,int,int]"
                ],
                "matrix": [
                    "Tuple[Union[float,float]]",
                    "List[int]",
                    "midi.MultiTrack",
                    "bool",
                    "Tuple[float,float]",
                    "numpy.ndarray"
                ],
                "mid": [
                    "str",
                    "Dict[str,Any]",
                    "bool",
                    "Optional[str]"
                ],
                "t": [
                    "float",
                    "int",
                    "str",
                    "bool",
                    "midi.MultiTrack",
                    "property",
                    "numpy.ndarray"
                ],
                "velocity": [
                    "Tuple[Union[float,float]]",
                    "List[int]",
                    "midi.MultiTrack",
                    "bool",
                    "Tuple[float,float]",
                    "numpy.ndarray"
                ]
            }
        },
        "msg_in_MultiTrack": {
            "name": "msg_in_MultiTrack",
            "location": 148,
            "return": [
                "Iterator",
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "c": [
                    "int",
                    "List[str]",
                    "bool",
                    "str",
                    "Tuple[Union[int,int]]",
                    "Optional[Tuple[int,int]]",
                    "None",
                    "Callable[[str,str],float]",
                    "Callable[str,str,float]"
                ],
                "msg": [
                    "bool",
                    "float",
                    "int"
                ],
                "i": [
                    "int",
                    "bool",
                    "numpy.ndarray",
                    "midi.MultiTrack"
                ],
                "matrix": [
                    "midi.MultiTrack",
                    "int",
                    "float",
                    "bool"
                ],
                "use_padding": [
                    "List[list[int]]",
                    "True",
                    "List[int]",
                    "float",
                    "List[List[int]]",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]"
                ],
                "velocity": [
                    "Optional[numpy.ndarray]",
                    "None",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "single_msg": {
            "name": "single_msg",
            "location": 175,
            "return": [
                "NoteVector",
                "List",
                "str"
            ],
            "arguments": {
                "msg": [
                    "Sequence[str]"
                ],
                "velocity": [
                    "Optional[int]",
                    "None",
                    "Optional[float]",
                    "int",
                    "float"
                ]
            }
        },
        "note": {
            "name": "note",
            "location": 198,
            "return": [
                "numpy.ndarray",
                "float",
                "List[dict]",
                "int",
                "str",
                "Sequence[Union[str, Any]]"
            ],
            "arguments": {
                "value": [
                    "int",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        }
    },
    "drum-style-transfer-master/src/midi/generators.py": {
        "example": {
            "name": "example",
            "location": 15,
            "return": [
                "str",
                "Optional[int]",
                "tuple",
                "Callable",
                "numpy.ndarray"
            ],
            "arguments": {
                "c": [
                    "str",
                    "List[float]",
                    "List",
                    "float",
                    "List[str]",
                    "Tuple[float,int]",
                    "Tuple[Union[float,int]]"
                ]
            }
        },
        "gen_data": {
            "name": "gen_data",
            "location": 35,
            "return": [
                "str",
                "bool",
                "numpy.array",
                "numpy.ndarray"
            ],
            "arguments": {
                "c": [
                    "int",
                    "numpy.ndarray"
                ],
                "n": [
                    "int",
                    "numpy.ndarray",
                    "bool",
                    "float",
                    "Tuple",
                    "str"
                ],
                "fs": [
                    "int",
                    "None",
                    "List[str]",
                    "Optional[float]",
                    "float"
                ],
                "max_f": [
                    "int",
                    "None",
                    "numpy.ndarray",
                    "List[Outcome]",
                    "float",
                    "Optional[int]",
                    "Union[int,List[Outcome]]",
                    "Optional[float]",
                    "Union[int,None]"
                ],
                "min_f": [
                    "Optional[numpy.ndarray]",
                    "int",
                    "None",
                    "Optional[Dict]",
                    "Dict"
                ]
            }
        },
        "gen_data_complex": {
            "name": "gen_data_complex",
            "location": 50,
            "return": [
                "Tuple[Union[dict,dict[tuple[Union[Any,Any]],Any],float,list,dict[str,Any]]]",
                "str",
                "int",
                "Generator",
                "bool"
            ],
            "arguments": {
                "c": [
                    "float",
                    "int",
                    "numpy.ndarray"
                ],
                "n": [
                    "int",
                    "float",
                    "bool",
                    "str",
                    "numpy.ndarray"
                ],
                "max_f": [
                    "int",
                    "None",
                    "Optional[int]",
                    "float",
                    "numpy.ndarray",
                    "Optional[float]"
                ],
                "min_f": [
                    "Optional[numpy.ndarray]",
                    "int",
                    "None",
                    "Optional[Dict]",
                    "Dict",
                    "Union[None,float,int]",
                    "float",
                    "Tuple[str,int]",
                    "Tuple[Union[str,int]]"
                ],
                "n_polyrythms": [
                    "int",
                    "float",
                    "bool",
                    "str",
                    "numpy.ndarray"
                ],
                "n_channels": [
                    "int",
                    "float",
                    "Mapping[str,Tuple[float,float,float]]",
                    "raiden.utils.BlockNumber"
                ],
                "d_phase": [
                    "bool",
                    "Optional[float]",
                    "int"
                ],
                "dim4": [
                    "bool",
                    "Dict[str,str]",
                    "str",
                    "Callable[,bool]",
                    "List[Dict]",
                    "List[str]"
                ],
                "multiTrack": [
                    "bool",
                    "Dict[str,str]",
                    "str",
                    "Callable[,bool]",
                    "List[Dict]",
                    "List[str]"
                ]
            }
        },
        "render_midi": {
            "name": "render_midi",
            "location": 85,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "c": [
                    "float",
                    "int",
                    "Tuple",
                    "List"
                ],
                "f": [
                    "int",
                    "float",
                    "Tuple",
                    "List",
                    "midi.MultiTrack",
                    "Tuple[float,float]"
                ],
                "max_t": [
                    "int",
                    "float",
                    "Tuple",
                    "List",
                    "midi.MultiTrack",
                    "Tuple[float,float]"
                ],
                "phase": [
                    "int",
                    "float",
                    "Tuple",
                    "List",
                    "midi.MultiTrack",
                    "Tuple[float,float]"
                ],
                "polyphonic": [
                    "bool",
                    "float",
                    "Tuple",
                    "List",
                    "int",
                    "midi.MultiTrack",
                    "Tuple[float,float]"
                ]
            }
        },
        "render_midi_poly": {
            "name": "render_midi_poly",
            "location": 98,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "c": [
                    "bool",
                    "None",
                    "numpy.ndarray",
                    "Optional[int]",
                    "raiden.utils.FeeAmount",
                    "raiden.utils.PaymentAmount"
                ],
                "ffs": [
                    "List[list[int]]",
                    "bool",
                    "int",
                    "str"
                ],
                "max_t": [
                    "int",
                    "numpy.ndarray",
                    "Callable[[numpy.ndarray],numpy.ndarray]",
                    "Optional[str]"
                ],
                "d_phase": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "gen_square_wave": {
            "name": "gen_square_wave",
            "location": 125,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "c": [
                    "int",
                    "List[str]",
                    "Sequence[str]"
                ],
                "track": [
                    "List",
                    "int",
                    "List[str]",
                    "Sequence[str]"
                ],
                "f": [
                    "int",
                    "bool",
                    "str",
                    "float",
                    "Dict[str,Tuple[str,int,int]]"
                ],
                "max_t": [
                    "int",
                    "List[str]",
                    "Optional[Token]",
                    "str"
                ],
                "phase_offset": [
                    "int",
                    "bool",
                    "List[int]"
                ],
                "polyphonic": [
                    "bool",
                    "str",
                    "int",
                    "Union[int,Tuple[int,...]]",
                    "numpy.ndarray",
                    "float"
                ],
                "note": [
                    "int",
                    "None"
                ]
            }
        },
        "note_on_off": {
            "name": "note_on_off",
            "location": 154,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "c": [
                    "List[numpy.ndarray]",
                    "int",
                    "Callable",
                    "raiden.utils.Address"
                ],
                "note": [
                    "str",
                    "Callable",
                    "bool",
                    "raiden.utils.Address",
                    "raiden.utils.BlockIdentifier"
                ],
                "velocity": [
                    "str",
                    "Callable",
                    "bool",
                    "raiden.utils.Address",
                    "raiden.utils.BlockIdentifier"
                ],
                "t": [
                    "str",
                    "Callable",
                    "bool",
                    "raiden.utils.Address",
                    "raiden.utils.BlockIdentifier"
                ]
            }
        },
        "gen_note_values": {
            "name": "gen_note_values",
            "location": 164,
            "return": [
                "int",
                "str",
                "Tuple[int, int]",
                "numpy.ndarray",
                "Tuple[str, int]"
            ],
            "arguments": {
                "polyphonic": [
                    "bool",
                    "Dict[str,Any]",
                    "List[str]",
                    "Dict",
                    "int"
                ],
                "note": [
                    "None",
                    "Union[numpy.ndarray,numpy.void]",
                    "List[float]",
                    "List[int]",
                    "List",
                    "numpy.ndarray",
                    "Sequence[float]"
                ]
            }
        },
        "render": {
            "name": "render",
            "location": 177,
            "return": [
                "hackathon.utils.utils.DataMessage",
                "Dict[str, Any]"
            ],
            "arguments": {
                "sin": [
                    "int",
                    "Callable[[numpy.ndarray], numpy.ndarray]",
                    "numpy.ndarray",
                    "Callable",
                    "bool",
                    "numpy.array"
                ],
                "f": [
                    "int",
                    "Callable[[numpy.ndarray],numpy.ndarray]",
                    "numpy.ndarray",
                    "Callable",
                    "bool",
                    "numpy.array"
                ],
                "n_samples": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "dt": [
                    "float",
                    "int",
                    "numpy.ndarray"
                ],
                "phase": [
                    "int",
                    "Callable[[numpy.ndarray],numpy.ndarray]",
                    "numpy.ndarray",
                    "Callable",
                    "bool",
                    "numpy.array"
                ]
            }
        },
        "normalize": {
            "name": "normalize",
            "location": 191,
            "return": [],
            "arguments": {
                "array": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ac_to_dc": {
            "name": "ac_to_dc",
            "location": 195,
            "return": [
                "float",
                "bytes",
                "int",
                "IO",
                "List[str]",
                "cmk.utils.type_defs.HostAddress",
                "str"
            ],
            "arguments": {
                "array": [
                    "int",
                    "float",
                    "List[int]",
                    "str",
                    "List[list[str]]",
                    "List[List[str]]"
                ]
            }
        }
    },
    "drum-style-transfer-master/src/midi/pitches.py": {
        "used_note_list": {
            "name": "used_note_list",
            "location": 58,
            "return": [
                "List[Union[list[str],str]]",
                "List",
                "List[Union[str,dict]]",
                "Set",
                "bool"
            ],
            "arguments": {
                "drums": [
                    "Set[str]",
                    "bool",
                    "List[dict]",
                    "str"
                ],
                "kit_size": [
                    "int",
                    "Tuple[str,str,str]",
                    "bool",
                    "Optional[str]",
                    "Dict",
                    "str"
                ]
            }
        },
        "to_string": {
            "name": "to_string",
            "location": 71,
            "return": [
                "List[Text]",
                "str",
                "Dict[str,Any]",
                "Iterable[Tuple[str,str]]",
                "int",
                "List[str]"
            ],
            "arguments": {}
        }
    },
    "drum-style-transfer-master/src/midi/__init__.py": {
        "second2tick": {
            "name": "second2tick",
            "location": 173,
            "return": [
                "int",
                "Callable",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "c": [
                    "float",
                    "bool",
                    "List",
                    "List[cirq.Qid]",
                    "T",
                    "Iterable[cirq.Qid]"
                ],
                "t": [
                    "float",
                    "bool",
                    "List",
                    "List[cirq.Qid]",
                    "T",
                    "Iterable[cirq.Qid]"
                ]
            }
        },
        "concatenate": {
            "name": "concatenate",
            "location": 177,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "multiTracks": [
                    "List[numpy.ndarray]",
                    "str",
                    "Dict",
                    "List[float]"
                ]
            }
        },
        "combine_notes": {
            "name": "combine_notes",
            "location": 181,
            "return": [
                "str",
                "bool",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "v1": [
                    "int",
                    "T",
                    "Dict[str, Any]"
                ],
                "v2": [
                    "int",
                    "T",
                    "Dict[str, Any]"
                ]
            }
        },
        "convert_time_to_relative_value": {
            "name": "convert_time_to_relative_value",
            "location": 197,
            "return": [
                "bool",
                "List[Mapping[str, Any]]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "ls": [
                    "bool",
                    "str",
                    "List[Tuple[str,scraping.utils.OptionType,scraping.utils.ArgumentType]]",
                    "List[tuple[Union[str,scraping.utils.OptionType,scraping.utils.ArgumentType]]]",
                    "Optional[Any]",
                    "Any",
                    "None"
                ],
                "convert_time": [
                    "int",
                    "float",
                    "Optional[Any]",
                    "Any",
                    "None"
                ],
                "v": [
                    "int",
                    "bool",
                    "List[Tuple[str,scraping.utils.OptionType,scraping.utils.ArgumentType]]",
                    "str",
                    "Optional[Any]"
                ]
            }
        },
        "reduce_MultiTrack_list_dims": {
            "name": "reduce_MultiTrack_list_dims",
            "location": 214,
            "return": [
                "float",
                "str",
                "int",
                "Sequence[float]"
            ],
            "arguments": {
                "tracks": [
                    "List[float]",
                    "str",
                    "int"
                ],
                "v": [
                    "int",
                    "T",
                    "str",
                    "Callable"
                ]
            }
        },
        "is_note_on": {
            "name": "is_note_on",
            "location": 225,
            "return": [
                "bool",
                "BaseException",
                "Iterable",
                "str",
                "Type"
            ],
            "arguments": {
                "msg": []
            }
        },
        "NoteVector.__new__": {
            "name": "__new__",
            "location": 83,
            "return": [
                "Callable",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "float",
                    "Optional[int]",
                    "None"
                ],
                "array": [
                    "Optional[int]",
                    "None",
                    "float",
                    "int"
                ],
                "n_notes": [
                    "int",
                    "None",
                    "float",
                    "Optional[int]",
                    "numpy.ndarray",
                    "Optional[numpy.ndarray]",
                    "Optional[float]"
                ]
            }
        },
        "MultiTrack.__new__": {
            "name": "__new__",
            "location": 98,
            "return": [
                "Callable",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "float"
                ],
                "n_timesteps": [
                    "int",
                    "Iterable[T]",
                    "bool"
                ],
                "n_notes": [
                    "None",
                    "Optional[numpy.ndarray]",
                    "int",
                    "numpy.ndarray",
                    "float",
                    "Optional[float]"
                ]
            }
        },
        "MultiTrack.from_array": {
            "name": "from_array",
            "location": 106,
            "return": [
                "MultiTrack",
                "str",
                "Callable",
                "Callable[[None,None],bool]",
                "numpy.ndarray"
            ],
            "arguments": {
                "arr": [
                    "List[tuple[Union[int,int,str]]]",
                    "numpy.array",
                    "Set[str]",
                    "List[Tuple[int,int,str]]"
                ]
            }
        },
        "MultiTrack.length_in_seconds": {
            "name": "length_in_seconds",
            "location": 116,
            "return": [
                "str",
                "Optional[str]",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiTrack.n_timesteps": {
            "name": "n_timesteps",
            "location": 120,
            "return": [
                "float",
                "numpy.ndarray",
                "str",
                "T",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiTrack.n_notes": {
            "name": "n_notes",
            "location": 123,
            "return": [
                "float",
                "numpy.ndarray",
                "str",
                "T",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiTrack.multiTrack_to_list_of_Track": {
            "name": "multiTrack_to_list_of_Track",
            "location": 126,
            "return": [
                "int",
                "Dict[str, Any]",
                "numpy.ndarray",
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiTrack.reduce_dims": {
            "name": "reduce_dims",
            "location": 139,
            "return": [
                "int",
                "List[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiTrack.fit_dimensions": {
            "name": "fit_dimensions",
            "location": 149,
            "return": [
                "MultiTrack",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "n_timesteps": [
                    "int",
                    "bytes",
                    "numpy.ndarray"
                ],
                "n_notes": [
                    "int",
                    "bytes",
                    "numpy.ndarray"
                ]
            }
        },
        "Track.__new__": {
            "name": "__new__",
            "location": 162,
            "return": [
                "str",
                "ClassVar"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Type",
                    "str",
                    "int",
                    "Callable[None,None]",
                    "Type[T]",
                    "Callable[[None],None]"
                ],
                "array": [
                    "str",
                    "numpy.ndarray",
                    "int",
                    "List[str]",
                    "bytes",
                    "numpy.array"
                ]
            }
        },
        "Track.__init__": {
            "name": "__init__",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "array": [
                    "str",
                    "numpy.ndarray",
                    "int",
                    "Union[numpy.ndarray,numpy.void]",
                    "float"
                ]
            }
        }
    },
    "drum-style-transfer-master/src/utils/io.py": {
        "reset_tmp_dir": {
            "name": "reset_tmp_dir",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "reset_midis_dir": {
            "name": "reset_midis_dir",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "save": {
            "name": "save",
            "location": 43,
            "return": [
                "str",
                "Dict[str, str]",
                "bool",
                "int"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "str",
                    "datetime.datetime"
                ],
                "fn": [
                    "Text",
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.OptionalConfigSerial"
                ]
            }
        },
        "load": {
            "name": "load",
            "location": 50,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "numpy.ndarray"
            ],
            "arguments": {
                "fn": [
                    "Text",
                    "str",
                    "bool"
                ]
            }
        },
        "save_dict": {
            "name": "save_dict",
            "location": 56,
            "return": [
                "pandas.Series",
                "List[Dict]"
            ],
            "arguments": {
                "dn": [
                    "str",
                    "int",
                    "Optional[float]"
                ],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "Dict"
                ],
                "data": [
                    "Dict[Text,list[Text]]",
                    "str",
                    "cmk.gui.utils.html.HTML",
                    "Dict",
                    "Optional[int]"
                ]
            }
        },
        "read_dict": {
            "name": "read_dict",
            "location": 69,
            "return": [
                "int",
                "bytes"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "bool"
                ]
            }
        },
        "read_dict_dir": {
            "name": "read_dict_dir",
            "location": 75,
            "return": [
                "Dict",
                "str",
                "Set",
                "List"
            ],
            "arguments": {
                "dn": [
                    "Text",
                    "str",
                    "bool",
                    "Dict",
                    "defaultdict"
                ]
            }
        },
        "read_categorical_dict_dir": {
            "name": "read_categorical_dict_dir",
            "location": 92,
            "return": [
                "Dict",
                "Dict[str,Any]",
                "List",
                "str"
            ],
            "arguments": {
                "dn": [
                    "Text",
                    "str",
                    "bytes",
                    "Dict",
                    "Tuple[str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "import_mididata": {
            "name": "import_mididata",
            "location": 117,
            "return": [
                "str",
                "Tuple[list]"
            ],
            "arguments": {
                "c": [
                    "bool",
                    "Optional[int]",
                    "None"
                ],
                "dirname": [
                    "Text",
                    "Match",
                    "Pattern[str]",
                    "str",
                    "bool",
                    "List[int]"
                ],
                "n": [
                    "int",
                    "Match",
                    "Pattern[str]",
                    "str",
                    "bool",
                    "List[int]"
                ],
                "cond": [
                    "Match",
                    "Pattern[str]",
                    "str",
                    "bool",
                    "List[int]"
                ],
                "r": [
                    "bool",
                    "Match",
                    "Pattern[str]",
                    "str",
                    "List[int]"
                ]
            }
        },
        "save_plt": {
            "name": "save_plt",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "fn": [
                    "str"
                ]
            }
        },
        "search": {
            "name": "search",
            "location": 138,
            "return": [
                "bool",
                "str",
                "Optional[float]",
                "float",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "dirname": [
                    "Dict[str,Dict[str,Any]]",
                    "List[str]",
                    "Dict[str,dict[str,Any]]",
                    "bool",
                    "str"
                ],
                "max_n": [
                    "bool",
                    "Dict[str,Dict[str,Any]]",
                    "List",
                    "str",
                    "List[str]"
                ],
                "add_cond": [
                    "Dict[str,Dict[str,Any]]",
                    "List",
                    "Dict[str,dict[str,Any]]",
                    "str",
                    "List[str]",
                    "bool"
                ],
                "r": [
                    "bool",
                    "int",
                    "Optional[Union[Any,Any]]"
                ]
            }
        },
        "walk_and_search": {
            "name": "walk_and_search",
            "location": 146,
            "return": [
                "str",
                "List"
            ],
            "arguments": {
                "dirname": [
                    "str",
                    "List[bytes]",
                    "int",
                    "List[str]"
                ],
                "add_cond": [
                    "int",
                    "List",
                    "Tuple[Union[int,int]]",
                    "bool",
                    "numpy.random.RandomState",
                    "Tuple[int,int]",
                    "Iterable[List[str]]"
                ],
                "max_n": [
                    "int",
                    "bool"
                ]
            }
        },
        "ignore_path": {
            "name": "ignore_path",
            "location": 169,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Text"
                ]
            }
        },
        "import_midifile": {
            "name": "import_midifile",
            "location": 177,
            "return": [
                "str",
                "Tuple[str,str]",
                "bytes",
                "int",
                "Dict[str,int]",
                "Dict[str,dict[str,str]]",
                "List"
            ],
            "arguments": {
                "fn": [
                    "Text",
                    "str",
                    "bytes",
                    "int"
                ],
                "convert": [
                    "bool",
                    "str"
                ]
            }
        },
        "export_midifile": {
            "name": "export_midifile",
            "location": 187,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "mid": [
                    "str",
                    "bool",
                    "Sequence[int]"
                ],
                "fn": [
                    "str",
                    "Text"
                ],
                "name": [
                    "Optional[str]",
                    "None",
                    "Dict[str,Any]",
                    "Optional[List[str]]",
                    "str",
                    "List",
                    "List[str]",
                    "Optional[Dict[Hashable,Any]]",
                    "Optional[Sequence[Any]]",
                    "Dict[Hashable,Any]",
                    "Sequence[Any]"
                ]
            }
        },
        "export_MultiTrack": {
            "name": "export_MultiTrack",
            "location": 198,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "numpy.ndarray"
                ],
                "fn": [
                    "Text",
                    "bytes",
                    "Union[Dict,List]",
                    "pandas.DataFrame",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "compress_MultiTrack": {
            "name": "compress_MultiTrack",
            "location": 208,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ],
                "tmp_name": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        }
    },
    "drum-style-transfer-master/src/utils/models_io.py": {
        "save_model": {
            "name": "save_model",
            "location": 7,
            "return": [
                "Tuple[Text]",
                "str",
                "int",
                "List[List[str]]",
                "Tuple"
            ],
            "arguments": {
                "model": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "bool"
                ],
                "model_name": [
                    "Text",
                    "str",
                    "Type[django.db.models.Model]",
                    "List[str]"
                ]
            }
        },
        "save_weights": {
            "name": "save_weights",
            "location": 18,
            "return": [
                "Text",
                "str",
                "Dict[str,str]",
                "bool",
                "int"
            ],
            "arguments": {
                "model": [
                    "str",
                    "int",
                    "dict"
                ],
                "model_name": [
                    "Text",
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Collection[str]"
                ]
            }
        },
        "load_model": {
            "name": "load_model",
            "location": 25,
            "return": [
                "Tuple[int]",
                "List[str]",
                "type",
                "Optional[Callable[[dict], None]]",
                "Optional[List[str]]",
                "bool",
                "models.User",
                "int",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Dict"
                ]
            }
        }
    },
    "drum-style-transfer-master/src/utils/plot.py": {
        "single": {
            "name": "single",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "m": [
                    "str",
                    "int",
                    "tuple[typing.Union[float,float]]",
                    "float",
                    "None",
                    "tuple[int]"
                ],
                "ylabels": [],
                "figsize": [
                    "tuple[int]"
                ],
                "fn": [
                    "None",
                    "str",
                    "int",
                    "typing.Any"
                ],
                "show": [
                    "bool"
                ],
                "subplot": [
                    "tuple[typing.Optional[bool]]"
                ],
                "transform": [
                    "None",
                    "str",
                    "int",
                    "list[str]"
                ],
                "v": [
                    "int"
                ]
            }
        },
        "multi": {
            "name": "multi",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ],
                "crop_size": [
                    "int"
                ],
                "figsize": [
                    "tuple[int]"
                ],
                "margin_top": [
                    "int"
                ],
                "margin_left": [
                    "int"
                ],
                "fn": [
                    "None",
                    "float",
                    "str",
                    "bool",
                    "typing.Sequence[str]"
                ],
                "v": [
                    "int"
                ]
            }
        },
        "line": {
            "name": "line",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "custom": {
            "name": "custom",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "d": [],
                "title": [
                    "typing.Text"
                ],
                "options": [],
                "log": [
                    "bool"
                ],
                "min_y_scale": [
                    "float"
                ],
                "max_y_scale": [
                    "float"
                ],
                "y_scale_margin": [
                    "float"
                ],
                "type_": [
                    "typing.Text"
                ],
                "std": [
                    "dict[, ]"
                ],
                "figsize": [
                    "tuple[int]"
                ],
                "dn": [
                    "None",
                    "str",
                    "bool",
                    "bytes"
                ],
                "show": [
                    "bool"
                ]
            }
        },
        "bar": {
            "name": "bar",
            "location": 249,
            "return": [
                "list[]"
            ],
            "arguments": {
                "d": [
                    "dict[, ]"
                ],
                "std": [
                    "dict[, ]"
                ]
            }
        },
        "scatter": {
            "name": "scatter",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "d": [
                    "dict[, ]"
                ],
                "options": [],
                "v": [
                    "int"
                ],
                "show_regress": [
                    "bool"
                ]
            }
        },
        "plot_dict": {
            "name": "plot_dict",
            "location": 283,
            "return": [
                "list[]"
            ],
            "arguments": {
                "d": [
                    "dict[, ]"
                ],
                "minn": [
                    "int"
                ],
                "maxx": [
                    "int"
                ]
            }
        },
        "_rotate_midi_matrix": {
            "name": "_rotate_midi_matrix",
            "location": 301,
            "return": [],
            "arguments": {
                "m": [
                    "str",
                    "list[float]",
                    "None",
                    "float",
                    "bytes",
                    "int"
                ]
            }
        },
        "_midi_xticks": {
            "name": "_midi_xticks",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "ax": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "n_bars": [
                    "int"
                ],
                "length": [
                    "int"
                ],
                "d": [
                    "int"
                ]
            }
        },
        "_midi_yticks": {
            "name": "_midi_yticks",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "ax": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "ylabels": []
            }
        },
        "_midi_grid": {
            "name": "_midi_grid",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "fig": [],
                "ylabels": [
                    "list[]"
                ],
                "length": [
                    "int"
                ],
                "d": [
                    "int"
                ],
                "v": [
                    "int"
                ]
            }
        }
    },
    "drum-style-transfer-master/src/utils/string.py": {
        "to_dirname": {
            "name": "to_dirname",
            "location": 8,
            "return": [
                "Text",
                "float",
                "Dict",
                "str",
                "int"
            ],
            "arguments": {
                "dn": [
                    "Text",
                    "Dict",
                    "IO",
                    "List[str]",
                    "int",
                    "Iterator[Dict[str,str]]"
                ]
            }
        },
        "end_with": {
            "name": "end_with",
            "location": 14,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "Text",
                    "int",
                    "Dict",
                    "List[List[str]]",
                    "str"
                ],
                "suffix": [
                    "int",
                    "dict",
                    "List[List[str]]",
                    "str"
                ]
            }
        },
        "is_drumrythm": {
            "name": "is_drumrythm",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "int",
                    "Dict[str,Any]",
                    "Dict",
                    "Dict[str,str]"
                ]
            }
        },
        "is_midifile": {
            "name": "is_midifile",
            "location": 28,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "int"
                ]
            }
        },
        "stem": {
            "name": "stem",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str",
                    "Text"
                ]
            }
        },
        "replace_special_chars": {
            "name": "replace_special_chars",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "replacement": [
                    "str",
                    "Text"
                ]
            }
        },
        "tokenize": {
            "name": "tokenize",
            "location": 45,
            "return": [
                "List[str]",
                "bool",
                "Dict",
                "Iterable[str]",
                "List[List[str]]",
                "str"
            ],
            "arguments": {
                "string": [
                    "str",
                    "Text"
                ]
            }
        },
        "extract_labels_from_filename": {
            "name": "extract_labels_from_filename",
            "location": 56,
            "return": [
                "Dict[Tuple[int, int], str]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "fn": [
                    "Text",
                    "str",
                    "Dict[str,Any]",
                    "Dict[str,T]"
                ]
            }
        }
    },
    "drum-style-transfer-master/src/utils/utils.py": {
        "reload": {
            "name": "reload",
            "location": 9,
            "return": [],
            "arguments": {
                "package": [
                    "str",
                    "bool"
                ]
            }
        },
        "get": {
            "name": "get",
            "location": 15,
            "return": [
                "bool",
                "str",
                "Optional[bool]",
                "Optional[str]"
            ],
            "arguments": {
                "d": [
                    "dict",
                    "int",
                    "Optional[str]",
                    "bool",
                    "Optional[Sequence[str]]",
                    "Optional[bytes]"
                ],
                "recursion_depth": [
                    "int",
                    "Tuple[int, int]",
                    "List[int]",
                    "Optional[List[str]]",
                    "str",
                    "Optional[float]"
                ],
                "i": [
                    "str",
                    "int",
                    "bool",
                    "Tuple[str]"
                ]
            }
        },
        "clean_dict": {
            "name": "clean_dict",
            "location": 29,
            "return": [
                "Dict[str, Any]",
                "dict",
                "list"
            ],
            "arguments": {
                "d": [
                    "dict",
                    "T",
                    "str"
                ],
                "r": [
                    "dict",
                    "Callable"
                ],
                "trash": [
                    "str",
                    "list",
                    "Callable"
                ],
                "verbose": [
                    "str",
                    "list",
                    "Callable"
                ]
            }
        },
        "round_": {
            "name": "round_",
            "location": 50,
            "return": [
                "str",
                "Iterable[numpy.dtype]",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str, bytes]"
                ]
            }
        },
        "max_f": {
            "name": "max_f",
            "location": 56,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "dt": [
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "min_f": {
            "name": "min_f",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "max_t": [
                    "Optional[type]",
                    "bool",
                    "int"
                ]
            }
        },
        "gen_line": {
            "name": "gen_line",
            "location": 67,
            "return": [
                "bytes",
                "Union[Dict, List]",
                "List[List[int]]"
            ],
            "arguments": {
                "x": [
                    "str",
                    "int",
                    "numpy.ndarray",
                    "bool"
                ],
                "a": [
                    "str",
                    "int",
                    "numpy.ndarray",
                    "bool"
                ],
                "b": [
                    "str",
                    "int",
                    "numpy.ndarray",
                    "bool"
                ]
            }
        },
        "composition": {
            "name": "composition",
            "location": 75,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "ls": [
                    "bool",
                    "bytes",
                    "numpy.array",
                    "int",
                    "float",
                    "Tuple['cirq.Qid']"
                ],
                "result": [
                    "bytes",
                    "Iterable[str]"
                ],
                "verbose": [
                    "bool",
                    "bytes",
                    "numpy.array",
                    "int",
                    "float",
                    "Tuple['cirq.Qid']"
                ]
            }
        },
        "summary_multi": {
            "name": "summary_multi",
            "location": 92,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "data": [
                    "Dict[str, Any]",
                    "Union[Dict, None]",
                    "bool"
                ],
                "mode": [
                    "dict",
                    "Dict[str, List[str]]",
                    "float",
                    "Dict[str, Any]",
                    "Tuple[str, Dict[str, Any]]"
                ]
            }
        },
        "summary": {
            "name": "summary",
            "location": 122,
            "return": [
                "str",
                "List[List[str]]",
                "int"
            ],
            "arguments": {
                "v": [
                    "float",
                    "dict",
                    "numpy.array",
                    "Union[pandas.Series, numpy.ndarray]",
                    "T",
                    "int"
                ]
            }
        },
        "regression": {
            "name": "regression",
            "location": 131,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "y": [
                    "int",
                    "float",
                    "str",
                    "Optional[numpy.ndarray]"
                ],
                "x": [
                    "Optional[str]",
                    "list",
                    "int",
                    "Optional[int]",
                    "Optional[numpy.array]",
                    "List[numpy.ndarray]"
                ],
                "line": [
                    "int",
                    "numpy.ndarray",
                    "Callable"
                ],
                "v": [
                    "bool",
                    "Iterable[T]",
                    "int"
                ]
            }
        },
        "ttest": {
            "name": "ttest",
            "location": 147,
            "return": [
                "bool",
                "str",
                "OrderedDict",
                "Callable",
                "dict",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "a": [
                    "numpy.ndarray",
                    "Optional[int]"
                ],
                "b": [
                    "numpy.ndarray",
                    "Optional[int]"
                ],
                "alpha": [
                    "int",
                    "float",
                    "bool",
                    "str"
                ],
                "f": [
                    "numpy.ndarray",
                    "Optional[int]"
                ],
                "v": [
                    "int",
                    "Callable",
                    "Optional[Callable]",
                    "Tuple[float, float]",
                    "bool"
                ]
            }
        },
        "dict_to_table": {
            "name": "dict_to_table",
            "location": 158,
            "return": [
                "Dict[str, Set[str]]",
                "Dict[str, Any]",
                "dict",
                "Dict[str, Type[Any]]",
                "Mapping[str, str]",
                "Mapping[int, str]"
            ],
            "arguments": {
                "data": [
                    "int",
                    "bytes",
                    "List[int]",
                    "bool",
                    "List[bytes]",
                    "Sequence"
                ],
                "durations": [
                    "int",
                    "List[str]",
                    "List[int]",
                    "str",
                    "float"
                ],
                "print_results": [
                    "bool",
                    "int",
                    "str"
                ],
                "txt": [
                    "float",
                    "int",
                    "List[float]",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        }
    },
    "drum-style-transfer-master/src/utils/__init__.py": {}
}
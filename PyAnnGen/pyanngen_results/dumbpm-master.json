{
    "dumbpm-master/dumbpm/cmd.py": {
        "cmd_prioritize": {
            "name": "cmd_prioritize",
            "location": 11,
            "return": [
                "list"
            ],
            "arguments": {
                "args": []
            }
        },
        "create_subparser_prioritize": {
            "name": "create_subparser_prioritize",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "subparsers": [
                    "argparse._SubParsersAction",
                    "argparse.ArgumentParser"
                ]
            }
        },
        "cmd_estimate": {
            "name": "cmd_estimate",
            "location": 54,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "args": [],
                "random_seed": [
                    "bool",
                    "None",
                    "str",
                    "pandas.DataFrame",
                    "Callable"
                ]
            }
        },
        "cmd_guesstimate": {
            "name": "cmd_guesstimate",
            "location": 70,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "args": [],
                "random_seed": [
                    "Pattern",
                    "None"
                ]
            }
        },
        "create_subparser_estimate": {
            "name": "create_subparser_estimate",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "subparsers": [
                    "argparse._SubParsersAction",
                    "argparse.ArgumentParser"
                ]
            }
        },
        "create_subparser_guesstimate": {
            "name": "create_subparser_guesstimate",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "subparsers": [
                    "argparse._SubParsersAction",
                    "argparse.ArgumentParser"
                ]
            }
        },
        "create_parser": {
            "name": "create_parser",
            "location": 138,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dumbpm-master/dumbpm/__init__.py": {},
    "dumbpm-master/dumbpm/est/est.py": {
        "compute_duration": {
            "name": "compute_duration",
            "location": 12,
            "return": [
                "int"
            ],
            "arguments": {
                "scope": [
                    "int",
                    "Callable",
                    "str"
                ],
                "velocity": [
                    "List[int]",
                    "int",
                    "List['cirq.Qid']",
                    "List[str]",
                    "numpy.ndarray",
                    "list"
                ],
                "change": [
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "compute_max_sprints": {
            "name": "compute_max_sprints",
            "location": 29,
            "return": [
                "int"
            ],
            "arguments": {
                "scope": [
                    "List[Dict[str, Any]]",
                    "numpy.ndarray"
                ],
                "velocity": [
                    "str",
                    "int",
                    "Callable"
                ],
                "change": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "generate_sprints_simulator": {
            "name": "generate_sprints_simulator",
            "location": 48,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "velocity": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "change": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "max_sprints": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "normal": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "random_seed": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "estimate": {
            "name": "estimate",
            "location": 78,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "scope": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "velocity": [],
                "change": [],
                "normal": [
                    "int",
                    "float",
                    "random.Random"
                ],
                "simulations": [
                    "int",
                    "Callable",
                    "str"
                ],
                "random_seed": [
                    "int",
                    "None",
                    "float",
                    "random.Random"
                ]
            }
        },
        "generate_sprints_simulator.generate_sprints": {
            "name": "generate_sprints",
            "location": 70,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "dumbpm-master/dumbpm/est/parse.py": {
        "parse_input": {
            "name": "parse_input",
            "location": 5,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        }
    },
    "dumbpm-master/dumbpm/est/__init__.py": {},
    "dumbpm-master/dumbpm/guess/guess.py": {
        "compute_beta_dist_params": {
            "name": "compute_beta_dist_params",
            "location": 25,
            "return": [
                "BetaParams",
                "float",
                "T"
            ],
            "arguments": {
                "est": [
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "generate_project_simulator": {
            "name": "generate_project_simulator",
            "location": 45,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "task": [
                    "List[str]"
                ],
                "best": [
                    "List[str]"
                ],
                "expected": [
                    "List[str]"
                ],
                "worst": [
                    "List[str]"
                ],
                "random_seed": [
                    "List[str]"
                ]
            }
        },
        "guesstimate": {
            "name": "guesstimate",
            "location": 67,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "task": [
                    "str",
                    "int"
                ],
                "best": [
                    "str",
                    "int"
                ],
                "expected": [
                    "str",
                    "int"
                ],
                "worst": [
                    "str",
                    "int"
                ],
                "simulations": [
                    "int",
                    "Dict[str,Any]",
                    "Tuple[Union[list[Any],list[Any]]]",
                    "Callable",
                    "Tuple[List[Any],List[Any]]",
                    "bool"
                ],
                "random_seed": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "generate_project_simulator.simulate_project": {
            "name": "simulate_project",
            "location": 60,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {}
        }
    },
    "dumbpm-master/dumbpm/guess/parse.py": {
        "parse_input": {
            "name": "parse_input",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        }
    },
    "dumbpm-master/dumbpm/guess/__init__.py": {},
    "dumbpm-master/dumbpm/prio/parse.py": {
        "parse_input": {
            "name": "parse_input",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "check_pick_vs_alternatives": {
            "name": "check_pick_vs_alternatives",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "picks": [
                    "Mapping[str, Sequence[str]]"
                ],
                "alts": [
                    "bool"
                ]
            }
        }
    },
    "dumbpm-master/dumbpm/prio/prio.py": {
        "norm": {
            "name": "norm",
            "location": 5,
            "return": [
                "list"
            ],
            "arguments": {
                "items": [
                    "Callable[[T, T], bool]",
                    "str",
                    "Iterable",
                    "Union[int, str]",
                    "float"
                ]
            }
        },
        "compute_score": {
            "name": "compute_score",
            "location": 13,
            "return": [
                "list"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str,bytes]"
                ],
                "cost": [
                    "Sequence[float]",
                    "float",
                    "List[str]",
                    "int"
                ],
                "duration": [
                    "Sequence[float]",
                    "float",
                    "List[str]",
                    "int"
                ],
                "risk": [
                    "Sequence[float]",
                    "float",
                    "List[str]",
                    "int"
                ]
            }
        },
        "combine_cost_and_duration": {
            "name": "combine_cost_and_duration",
            "location": 44,
            "return": [
                "Tuple[(list, List[float])]"
            ],
            "arguments": {
                "cost": [
                    "Dict",
                    "float",
                    "int",
                    "str"
                ],
                "duration": [
                    "List[int]",
                    "bool"
                ]
            }
        },
        "prioritize": {
            "name": "prioritize",
            "location": 56,
            "return": [
                "list"
            ],
            "arguments": {
                "projects": [
                    "str",
                    "Dict[str,Any]"
                ],
                "value": [
                    "Type",
                    "float",
                    "Type[T]",
                    "str",
                    "Tuple[Union[float,float]]",
                    "Tuple[float,float]",
                    "int",
                    "Union[int,float]"
                ],
                "cost": [
                    "List[float]",
                    "bool",
                    "str",
                    "Optional[Any]",
                    "Any",
                    "None"
                ],
                "duration": [
                    "List[float]",
                    "bool",
                    "str",
                    "Optional[Any]",
                    "Any",
                    "None"
                ],
                "risk": [
                    "Type",
                    "float",
                    "Type[T]",
                    "str",
                    "Tuple[Union[float,float]]",
                    "Tuple[float,float]",
                    "int",
                    "Union[int,float]"
                ],
                "pick": [
                    "str",
                    "Dict[str,Any]",
                    "Dict",
                    "bool",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "alternatives": [
                    "OrderedDict",
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "max_cost": [
                    "str",
                    "int"
                ],
                "cost_per_duration": [
                    "List[float]",
                    "bool",
                    "str",
                    "Optional[Any]",
                    "Any",
                    "None"
                ]
            }
        },
        "pick_projects": {
            "name": "pick_projects",
            "location": 106,
            "return": [
                "Tuple[(tuple, Any)]"
            ],
            "arguments": {
                "items": [
                    "List[str]",
                    "int"
                ],
                "must_picks": [
                    "List[str]",
                    "int"
                ],
                "max_cost": [
                    "int",
                    "List[int]",
                    "str"
                ]
            }
        },
        "total_score": {
            "name": "total_score",
            "location": 122,
            "return": [
                "bool",
                "int",
                "float",
                "Tuple[int]",
                "List[Tuple[int,str,str]]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "items": [
                    "str",
                    "float",
                    "int"
                ],
                "max_weight": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "prio": {
            "name": "prio",
            "location": 131,
            "return": [
                "Tuple",
                "List",
                "List[T]",
                "List[float]",
                "int"
            ],
            "arguments": {
                "items": [
                    "Tuple",
                    "int",
                    "bool",
                    "Dict"
                ],
                "max_weight": [
                    "int",
                    "str"
                ],
                "mem": [
                    "int",
                    "str"
                ],
                "alts": [
                    "Dict",
                    "str",
                    "T"
                ]
            }
        }
    },
    "dumbpm-master/dumbpm/prio/__init__.py": {},
    "dumbpm-master/dumbpm/shared/shared.py": {
        "compute_stats": {
            "name": "compute_stats",
            "location": 4,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "duration": [
                    "List",
                    "int",
                    "pandas.DataFrame"
                ]
            }
        }
    },
    "dumbpm-master/dumbpm/shared/__init__.py": {},
    "dumbpm-master/tests/cmd_test.py": {
        "test_parser_dumbpm": {
            "name": "test_parser_dumbpm",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_subparser_prioritize": {
            "name": "test_subparser_prioritize",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cmd_prioritize": {
            "name": "test_cmd_prioritize",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_subparser_estimate": {
            "name": "test_subparser_estimate",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_subparser_guesstimate": {
            "name": "test_subparser_guesstimate",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cmd_estimate": {
            "name": "test_cmd_estimate",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cmd_guesstimate": {
            "name": "test_cmd_guesstimate",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_main": {
            "name": "test_main",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dumbpm-master/tests/__init__.py": {},
    "dumbpm-master/tests/est/est_test.py": {
        "test_compute_max_sprints": {
            "name": "test_compute_max_sprints",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compute_max_sprints_max": {
            "name": "test_compute_max_sprints_max",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compute_duration": {
            "name": "test_compute_duration",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compute_duration_max_sprints": {
            "name": "test_compute_duration_max_sprints",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compute_duration_no_change": {
            "name": "test_compute_duration_no_change",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_estimate": {
            "name": "test_estimate",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_estimate_normal": {
            "name": "test_estimate_normal",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_estimate_no_changes": {
            "name": "test_estimate_no_changes",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_estimate_normal_no_changes": {
            "name": "test_estimate_normal_no_changes",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dumbpm-master/tests/est/parse_test.py": {
        "test_parse_input_not_found": {
            "name": "test_parse_input_not_found",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_missing_velocity": {
            "name": "test_parse_missing_velocity",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_missing_one_velocity": {
            "name": "test_parse_missing_one_velocity",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_negative_velocity": {
            "name": "test_parse_negative_velocity",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_no_change": {
            "name": "test_parse_no_change",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_missing_one_change": {
            "name": "test_parse_missing_one_change",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_input": {
            "name": "test_parse_input",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dumbpm-master/tests/est/__init__.py": {},
    "dumbpm-master/tests/guess/guess_test.py": {
        "test_compute_beta_dist_params": {
            "name": "test_compute_beta_dist_params",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_guesstimate_best_equal_worst": {
            "name": "test_guesstimate_best_equal_worst",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_guesstimate": {
            "name": "test_guesstimate",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dumbpm-master/tests/guess/parse_test.py": {
        "test_parse_input_not_found": {
            "name": "test_parse_input_not_found",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_missing_task": {
            "name": "test_parse_missing_task",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_missing_best": {
            "name": "test_parse_missing_best",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_missing_expected": {
            "name": "test_parse_missing_expected",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_missing_worst": {
            "name": "test_parse_missing_worst",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_missing_one_task": {
            "name": "test_parse_missing_one_task",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_missing_one_best": {
            "name": "test_parse_missing_one_best",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_missing_one_expected": {
            "name": "test_parse_missing_one_expected",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_missing_one_worst": {
            "name": "test_parse_missing_one_worst",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_duplicate_task": {
            "name": "test_parse_duplicate_task",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_negative": {
            "name": "test_parse_negative",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_non_monotonic": {
            "name": "test_parse_non_monotonic",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_milestone": {
            "name": "test_parse_milestone",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_input": {
            "name": "test_parse_input",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dumbpm-master/tests/guess/__init__.py": {},
    "dumbpm-master/tests/prio/parse_test.py": {
        "test_parse_input_not_found": {
            "name": "test_parse_input_not_found",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_input_negative": {
            "name": "test_parse_input_negative",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_missing_projects": {
            "name": "test_parse_missing_projects",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_duplicate_projects": {
            "name": "test_parse_duplicate_projects",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_missing_value": {
            "name": "test_parse_missing_value",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_missing_cost": {
            "name": "test_parse_missing_cost",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_missing_one_project": {
            "name": "test_parse_missing_one_project",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_missing_one_value": {
            "name": "test_parse_missing_one_value",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_missing_one_cost": {
            "name": "test_parse_missing_one_cost",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_no_duration": {
            "name": "test_parse_no_duration",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_missing_one_duration": {
            "name": "test_parse_missing_one_duration",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_no_risk": {
            "name": "test_parse_no_risk",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_missing_one_risk": {
            "name": "test_parse_missing_one_risk",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_no_pick": {
            "name": "test_parse_no_pick",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_missing_one_pick": {
            "name": "test_parse_missing_one_pick",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_input_pick_no_bool": {
            "name": "test_parse_input_pick_no_bool",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_no_alternatives": {
            "name": "test_parse_no_alternatives",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_missing_one_alternative": {
            "name": "test_parse_missing_one_alternative",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_wrong_alternatives": {
            "name": "test_parse_wrong_alternatives",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_pick_conflicts_alternatives": {
            "name": "test_parse_pick_conflicts_alternatives",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_asymmetrical_alternatives": {
            "name": "test_parse_asymmetrical_alternatives",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_input": {
            "name": "test_parse_input",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dumbpm-master/tests/prio/prio_test.py": {
        "test_norm": {
            "name": "test_norm",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_combine_score_and_duration": {
            "name": "test_combine_score_and_duration",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compute_score": {
            "name": "test_compute_score",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compute_score_div_by_zero": {
            "name": "test_compute_score_div_by_zero",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_total_score": {
            "name": "test_total_score",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_prioritize": {
            "name": "test_prioritize",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_prioritize_cost_per_duration": {
            "name": "test_prioritize_cost_per_duration",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_prioritize_picks": {
            "name": "test_prioritize_picks",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_prioritize_picks_over_budget": {
            "name": "test_prioritize_picks_over_budget",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_prioritize_with_alternatives": {
            "name": "test_prioritize_with_alternatives",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dumbpm-master/tests/prio/__init__.py": {}
}
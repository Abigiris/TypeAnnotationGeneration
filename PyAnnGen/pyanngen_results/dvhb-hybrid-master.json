{
    "dvhb-hybrid-master/setup.py": {},
    "dvhb-hybrid-master/docs/conf.py": {},
    "dvhb-hybrid-master/dvhb_hybrid/aviews.py": {
        "response_file": {
            "name": "response_file",
            "location": 69,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "url": [
                    "str",
                    "int",
                    "List[int]",
                    "Dict",
                    "bool"
                ],
                "mime_type": [
                    "str",
                    "Dict[str,str]",
                    "Awaitable",
                    "collections.abc.Awaitable",
                    "Dict[str,Sequence[str]]",
                    "Dict[str,Sequence[Any]]",
                    "Optional[str]",
                    "None"
                ],
                "filename": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "bytes",
                    "int"
                ]
            }
        },
        "JsonEncoder.dumps": {
            "name": "dumps",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "Optional[Any]",
                    "Any",
                    "bool",
                    "Type",
                    "None",
                    "complex",
                    "bytes",
                    "str",
                    "Optional[int]"
                ],
                "data": [
                    "Optional[Any]",
                    "Any",
                    "bool",
                    "None",
                    "str",
                    "Optional[List[Any]]",
                    "List[Any]",
                    "Optional[int]"
                ]
            }
        },
        "JsonEncoder.default": {
            "name": "default",
            "location": 22,
            "return": [
                "str",
                "Union[tuple,list]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "int",
                    "str",
                    "datetime.datetime",
                    "None",
                    "Union[str,int]",
                    "Optional[datetime.tzinfo]"
                ]
            }
        },
        "BaseView.app": {
            "name": "app",
            "location": 41,
            "return": [
                "str",
                "Optional[Dict[str, bytes]]",
                "Optional[Dict[str, Any]]",
                "aiohttp.ClientSession"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseView.check_size_body": {
            "name": "check_size_body",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "str",
                    "aiohttp.web.Request"
                ],
                "limit": [
                    "aiohttp.web.Request",
                    "str",
                    "None"
                ]
            }
        },
        "BaseView.list_params": {
            "name": "list_params",
            "location": 53,
            "return": [
                "Tuple[(Union[(int, _T1)], Union[(int, _T2)])]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict"
                ],
                "limit": [
                    "int",
                    "Mapping[str,Any]",
                    "Dict",
                    "str",
                    "Optional[Dict[str,str]]",
                    "Dict[str,Any]"
                ],
                "offset": [
                    "int",
                    "Mapping[str,Any]",
                    "Dict",
                    "str",
                    "Optional[Dict[str,str]]",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/config.py": {
        "absdir": {
            "name": "absdir",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {
                "directory": [
                    "str"
                ],
                "base_dir": [
                    "str",
                    "bool"
                ]
            }
        },
        "dirs": {
            "name": "dirs",
            "location": 12,
            "return": [
                "List",
                "bool",
                "Optional[Union[str,Any]]"
            ],
            "arguments": {
                "list_dir": [
                    "str",
                    "List[str]",
                    "IO[str]",
                    "bool"
                ],
                "base_dir": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "convert_to_djangodb": {
            "name": "convert_to_djangodb",
            "location": 19,
            "return": [
                "Dict[Text,Text]",
                "str",
                "Tuple[Tuple[int,...]]"
            ],
            "arguments": {
                "d": [
                    "Dict",
                    "Dict[str,Any]",
                    "str"
                ],
                "name": [
                    "str"
                ],
                "base_dir": [
                    "str",
                    "Text"
                ]
            }
        },
        "db_to_settings": {
            "name": "db_to_settings",
            "location": 40,
            "return": [
                "str",
                "Dict[tuple[Union[str,dict]],]"
            ],
            "arguments": {
                "db_dict": [
                    "Dict[str,dict]",
                    "str",
                    "Dict[str,Dict]",
                    "List[str]",
                    "Dict[str,Any]"
                ],
                "base_dir": [
                    "str",
                    "List[str]",
                    "Dict[str,dict]",
                    "Dict[str,Dict]",
                    "Dict[str,Any]"
                ]
            }
        },
        "convert_to_django_redis": {
            "name": "convert_to_django_redis",
            "location": 47,
            "return": [
                "Dict[Text,Union[Text,dict[Text,Text]]]",
                "bytearray",
                "float",
                "str"
            ],
            "arguments": {
                "config": [
                    "Dict[str,Any]",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "redis_to_settings": {
            "name": "redis_to_settings",
            "location": 57,
            "return": [
                "Dict[tuple[Union[str,Any]],]",
                "Optional[str]",
                "Dict[str,str]",
                "str",
                "Dict[str,float]"
            ],
            "arguments": {
                "redis_dict": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/decorators.py": {
        "recaptcha": {
            "name": "recaptcha",
            "location": 12,
            "return": [
                "Callable"
            ],
            "arguments": {
                "arg": [
                    "int",
                    "List",
                    "List[str]",
                    "str",
                    "Union[List[float],List[int]]",
                    "List[float]",
                    "List[int]"
                ]
            }
        },
        "recaptcha.with_arg": {
            "name": "with_arg",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "view": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/exceptions.py": {
        "JsonHTTPException.as_dict": {
            "name": "as_dict",
            "location": 19,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonHTTPException.body": {
            "name": "body",
            "location": 40,
            "return": [
                "dict[, ]",
                "list[]",
                "list[str]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "str",
                    "list",
                    "Tuple[int, int]",
                    "bytes",
                    "Dict[str, Any]",
                    "float"
                ]
            }
        },
        "JsonHTTPMessage.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonHTTPMessage.as_dict": {
            "name": "as_dict",
            "location": 53,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPBadRequest.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPBadRequest.as_dict": {
            "name": "as_dict",
            "location": 96,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/fixtures.py": {
        "get_fixture": {
            "name": "get_fixture",
            "location": 19,
            "return": [
                "dict"
            ],
            "arguments": {
                "app_label": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "int"
                ],
                "fixture_label": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "model_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "pk": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "FindFixture.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stdout": [
                    "str",
                    "None"
                ],
                "stderr": [
                    "str",
                    "None"
                ],
                "no_color": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/management.py": {
        "AsyncCommand.handle": {
            "name": "handle",
            "location": 13,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/models.py": {
        "validate_image_and_svg_file_extension": {
            "name": "validate_image_and_svg_file_extension",
            "location": 52,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]",
                "Tuple[str, str]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "bool",
                    "Optional[Dict]",
                    "List[str]",
                    "Dict",
                    "None"
                ]
            }
        },
        "JSONFieldsMixin.save": {
            "name": "save",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "force_insert": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Dict[str,str]",
                    "Dict",
                    "float"
                ],
                "force_update": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Dict[str,str]",
                    "Dict",
                    "float"
                ],
                "using": [
                    "Optional[str]",
                    "str",
                    "None",
                    "bool",
                    "Dict[str,str]",
                    "Dict",
                    "float"
                ],
                "update_fields": [
                    "Optional[str]",
                    "str",
                    "None",
                    "bool",
                    "Dict[str,str]",
                    "Dict",
                    "float"
                ]
            }
        },
        "SVGAndImageFieldForm.to_python": {
            "name": "to_python",
            "location": 60,
            "return": [
                "Dict",
                "int",
                "str",
                "rotkehlchen.db.dbhandler.DBHandler",
                "float",
                "bool",
                "DefaultDict",
                "bytes",
                "OrderedDict",
                "Tuple[Union[str,str,str,str,str]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "Optional[Union[Dict,str,int,bytes]]",
                    "Dict",
                    "int",
                    "Iterable[bytes]",
                    "Iterable[str]",
                    "None"
                ]
            }
        },
        "SVGAndImageField.formfield": {
            "name": "formfield",
            "location": 69,
            "return": [
                "zerver.models.Realm",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/permissions.py": {
        "get_api_key": {
            "name": "get_api_key",
            "location": 11,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "request": [
                    "Dict[str, Any]"
                ]
            }
        },
        "get_request_from_args": {
            "name": "get_request_from_args",
            "location": 71,
            "return": [
                "Optional[bytes]",
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            }
        },
        "permissions": {
            "name": "permissions",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "view": [
                    "str",
                    "int",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]"
                ]
            }
        },
        "permissions.wrapper_outer": {
            "name": "wrapper_outer",
            "location": 88,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "view": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "get_session_data.get_data": {
            "name": "get_data",
            "location": 30,
            "return": [
                "str",
                "Optional[dict]",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "request": [],
                "sessions": [
                    "str"
                ]
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/redis.py": {
        "redis_key": {
            "name": "redis_key",
            "location": 1,
            "return": [
                "str"
            ],
            "arguments": {
                "project_slug": [
                    "str",
                    "Sequence[str]",
                    "bool",
                    "Dict[str, Any]",
                    "TextIO",
                    "IO"
                ],
                "key": [
                    "Optional[str]",
                    "int",
                    "list",
                    "bool"
                ]
            }
        },
        "RedisMixin.redis_key": {
            "name": "redis_key",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Optional[Callable]",
                    "bytes"
                ],
                "key": [
                    "str",
                    "bool",
                    "Optional[Callable]",
                    "bytes"
                ],
                "namespace": [
                    "str",
                    "bool",
                    "Optional[Callable]",
                    "bytes"
                ]
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/sitemap.py": {
        "get_xml": {
            "name": "get_xml",
            "location": 12,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "request": [
                    "Exception",
                    "aiohttp.web.Request"
                ],
                "items": [
                    "Dict",
                    "Dict[str,List[bytes]]",
                    "Dict[str,list[bytes]]"
                ]
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/tests.py": {
        "test_client": {
            "name": "test_client",
            "location": 89,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "loop": [
                    "aiohttp.web_app.Application"
                ],
                "client_class": [
                    "Callable[...,None]",
                    "str",
                    "bool"
                ]
            }
        },
        "BaseTestApi.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "aiohttp.web.Application"
                ],
                "user": [
                    "str",
                    "float"
                ]
            }
        },
        "BaseTestApi.get_route": {
            "name": "get_route",
            "location": 18,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestClient.dumps": {
            "name": "dumps",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str,Any]",
                    "Dict",
                    "bytes",
                    "str",
                    "T",
                    "List",
                    "Union[Dict,List]"
                ]
            }
        },
        "TestClient.request": {
            "name": "request",
            "location": 40,
            "return": [
                "Tuple[int, str]",
                "Iterable[bytes]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "AuthClient.user_model": {
            "name": "user_model",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/translations.py": {
        "load_translations": {
            "name": "load_translations",
            "location": 17,
            "return": [
                "dict"
            ],
            "arguments": {
                "root": [
                    "str",
                    "int"
                ],
                "domain": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Translations.__call__": {
            "name": "__call__",
            "location": 9,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "int",
                    "float"
                ],
                "msg_plural": [
                    "Optional[str]",
                    "Optional[float]",
                    "type"
                ],
                "count": [
                    "Optional[str]",
                    "type"
                ]
            }
        },
        "Localizer.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lang": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Localizer.__call__": {
            "name": "__call__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Callable",
                    "int",
                    "float"
                ]
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/utils.py": {
        "now": {
            "name": "now",
            "location": 30,
            "return": [
                "Any"
            ],
            "arguments": {
                "ms": [],
                "ts": []
            }
        },
        "get_uuid4": {
            "name": "get_uuid4",
            "location": 42,
            "return": [
                "Optional[uuid.UUID]"
            ],
            "arguments": {
                "s": [],
                "match": []
            }
        },
        "get_hash": {
            "name": "get_hash",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "data": []
            }
        },
        "import_module_from_all_apps": {
            "name": "import_module_from_all_apps",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "apps_path": [],
                "module": []
            }
        },
        "import_modules_from_packages": {
            "name": "import_modules_from_packages",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "package": [],
                "module": []
            }
        },
        "convert_class_name": {
            "name": "convert_class_name",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "name": []
            }
        },
        "int_or_zero": {
            "name": "int_or_zero",
            "location": 92,
            "return": [
                "int"
            ],
            "arguments": {
                "v": []
            }
        },
        "enum_to_choice": {
            "name": "enum_to_choice",
            "location": 104,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "v": []
            }
        },
        "hash_data": {
            "name": "hash_data",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "data": []
            }
        },
        "import_class": {
            "name": "import_class",
            "location": 128,
            "return": [
                "Any"
            ],
            "arguments": {
                "py_path": []
            }
        },
        "method_client_once": {
            "name": "method_client_once",
            "location": 134,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": []
            }
        },
        "_merge": {
            "name": "_merge",
            "location": 146,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "a": [
                    "_T0@@"
                ],
                "b": [],
                "path": []
            }
        },
        "merge": {
            "name": "merge",
            "location": 161,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "query_bool": {
            "name": "query_bool",
            "location": 166,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "data": []
            }
        },
        "get_request_from_parameters": {
            "name": "get_request_from_parameters",
            "location": 173,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "get_app_from_parameters": {
            "name": "get_app_from_parameters",
            "location": 185,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "validate_svg_file": {
            "name": "validate_svg_file",
            "location": 197,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "f": [
                    "_T0@@"
                ]
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/__init__.py": {},
    "dvhb-hybrid-master/dvhb_hybrid/amodels/convert.py": {
        "Geometry": {
            "name": "Geometry",
            "location": 14,
            "return": [
                "sa.sql.sqltypes.NullType"
            ],
            "arguments": {}
        },
        "convert_model": {
            "name": "convert_model",
            "location": 106,
            "return": [
                "Tuple[(Any, Dict[(Any, dvhb_hybrid.amodels.relations.RelationshipProperty)])]"
            ],
            "arguments": {
                "model": [
                    "str",
                    "int",
                    "Iterable[Any]",
                    "None",
                    "Optional[Iterable[Any]]",
                    "Optional[bool]",
                    "bool",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "derive_from_django": {
            "name": "derive_from_django",
            "location": 129,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "dj_model": [
                    "str",
                    "Dict",
                    "Optional[Hashable]",
                    "Hashable",
                    "None"
                ]
            }
        },
        "_get_rel_name": {
            "name": "_get_rel_name",
            "location": 145,
            "return": [
                "str",
                "cmk.utils.type_defs.SectionName",
                "None",
                "Dict[str,str]"
            ],
            "arguments": {
                "field": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "FieldConverter.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldConverter._convert_type": {
            "name": "_convert_type",
            "location": 59,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "dj_field": [],
                "sa_type": [
                    "Sequence[Dict[str,Any]]",
                    "int",
                    "Sequence[dict[str,Any]]",
                    "Type"
                ]
            }
        },
        "FieldConverter.convert": {
            "name": "convert",
            "location": 81,
            "return": [
                "List[int]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "dj_field": [
                    "int",
                    "cmk.utils.type_defs.ServiceName",
                    "zam_repondeur.services.fetch.an.dossiers.models.DossierRef",
                    "Dict[str, Any]"
                ]
            }
        },
        "derive_from_django.wrapper": {
            "name": "wrapper",
            "location": 130,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "amodel": [
                    "raiden.utils.signer.Signer",
                    "str"
                ]
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/amodels/debug.py": {
        "repr_stmt": {
            "name": "repr_stmt",
            "location": 52,
            "return": [
                "Dict[str, int]",
                "str"
            ],
            "arguments": {
                "stmt": [
                    "str",
                    "Optional[Union[str,Any]]",
                    "Any",
                    "None"
                ]
            }
        },
        "ConnectionLogger.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sa_connection": [
                    "int",
                    "str",
                    "Dict",
                    "bool"
                ]
            }
        },
        "ConnectionLogger.__getattr__": {
            "name": "__getattr__",
            "location": 15,
            "return": [
                "str",
                "Iterable[int]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "int",
                    "str",
                    "sqlalchemy.orm.Session",
                    "Union[str,int]"
                ]
            }
        },
        "DebugCompiler.render_literal_value": {
            "name": "render_literal_value",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "T",
                    "str",
                    "Dict[str,list[str]]",
                    "Union[str]",
                    "Dict[str,List[str]]"
                ],
                "type_": [
                    "int",
                    "Callable",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "DebugCompiler.visit_bindparam": {
            "name": "visit_bindparam",
            "location": 35,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "bindparam": []
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/amodels/decorators.py": {
        "method_connect_once": {
            "name": "method_connect_once",
            "location": 28,
            "return": [
                "Callable"
            ],
            "arguments": {
                "arg": [
                    "int",
                    "List[str]",
                    "List"
                ]
            }
        },
        "method_redis_once": {
            "name": "method_redis_once",
            "location": 47,
            "return": [
                "Callable"
            ],
            "arguments": {
                "arg": [
                    "int",
                    "float",
                    "Iterable[Any]",
                    "Union[RangeSet[T],Iterable[Any]]",
                    "Sequence[str]",
                    "Callable[VT,bool]",
                    "Callable[[VT],bool]",
                    "List"
                ]
            }
        },
        "Guard.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ],
                "loop": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Guard.__enter__": {
            "name": "__enter__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Guard.__exit__": {
            "name": "__exit__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "Type",
                    "str",
                    "BaseException",
                    "None",
                    "Exception",
                    "Optional[BaseException]"
                ]
            }
        },
        "method_connect_once.with_arg": {
            "name": "with_arg",
            "location": 29,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "method_redis_once.with_arg": {
            "name": "with_arg",
            "location": 50,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/amodels/model.py": {
        "_hash_stmt": {
            "name": "_hash_stmt",
            "location": 540,
            "return": [
                "bool",
                "cmk.utils.type_defs.UserId",
                "int",
                "str",
                "type"
            ],
            "arguments": {
                "stmt": [
                    "int",
                    "str",
                    "Callable[[T], None]"
                ]
            }
        },
        "MetaModel.__new__": {
            "name": "__new__",
            "location": 30,
            "return": [
                "str",
                "Callable[[str], T]",
                "sqlalchemy.engine.Connection"
            ],
            "arguments": {
                "mcls": [
                    "str"
                ],
                "name": [
                    "str",
                    "Dict"
                ],
                "bases": [
                    "str"
                ],
                "namespace": [
                    "str"
                ]
            }
        },
        "Model.factory": {
            "name": "factory",
            "location": 50,
            "return": [
                "Type",
                "bool",
                "int",
                "Dict[str,Any]"
            ],
            "arguments": {
                "cls": [
                    "Dict",
                    "Dict[str,Any]",
                    "Optional[dict]",
                    "None"
                ],
                "app": [
                    "Dict",
                    "Dict[str,Any]",
                    "Optional[dict]",
                    "None"
                ]
            }
        },
        "Model.get_cache_key": {
            "name": "get_cache_key",
            "location": 54,
            "return": [
                "str",
                "IO",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "cls": [
                    "Callable[,None]",
                    "int",
                    "Dict",
                    "Dict[str,Any]",
                    "List[Dict]",
                    "List[dict]"
                ]
            }
        },
        "Model.copy_object": {
            "name": "copy_object",
            "location": 64,
            "return": [
                "int",
                "List",
                "Callable",
                "List[int]",
                "str",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.pretty": {
            "name": "pretty",
            "location": 72,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.pk": {
            "name": "pk",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bytes",
                    "list",
                    "dict"
                ]
            }
        },
        "Model.__getattr__": {
            "name": "__getattr__",
            "location": 83,
            "return": [
                "int",
                "bool",
                "qutebrowser.utils.usertypes.Backend"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Dict",
                    "List",
                    "Dict[str,Any]",
                    "raiden.utils.Any"
                ]
            }
        },
        "Model.__setattr__": {
            "name": "__setattr__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "int"
                ],
                "value": [
                    "str",
                    "bool",
                    "abc.graph.GraphKeyType",
                    "Union[str,uuid.UUID]"
                ]
            }
        },
        "Model._where": {
            "name": "_where",
            "location": 94,
            "return": [
                "Tuple",
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "Callable",
                    "Dict[str,Any]",
                    "List"
                ],
                "args": [],
                "kwargs": []
            }
        },
        "Model.to_column": {
            "name": "to_column",
            "location": 111,
            "return": [
                "List[Union[str,Callable[list[str],Iterable[str]],bool]]",
                "bool",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Atom"
                ],
                "fields": [
                    "Dict",
                    "int",
                    "Iterable[T]",
                    "Type[DataclassT]"
                ]
            }
        },
        "Model.set_defaults": {
            "name": "set_defaults",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "str"
                ],
                "data": [
                    "memoryview",
                    "str"
                ]
            }
        },
        "Model.get_table_from_django": {
            "name": "get_table_from_django",
            "location": 240,
            "return": [
                "str",
                "Optional[str]",
                "Optional[Iterable[str]]",
                "List"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "None",
                    "bool",
                    "Type",
                    "Type[Exception]",
                    "Dict[str,list]",
                    "Dict[str,List]",
                    "Iterable[Tuple[Hashable,Any]]"
                ],
                "model": [
                    "str",
                    "Optional[Period]",
                    "None"
                ]
            }
        },
        "Model.validate": {
            "name": "validate",
            "location": 493,
            "return": [
                "str",
                "int",
                "bytes",
                "Dict",
                "Set[cmk.utils.type_defs.HostName]",
                "Dict[str,List[Any]]",
                "List[int]",
                "List[str]",
                "Dict[str,int]",
                "None",
                "Tuple[Union[str,list[str]]]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "raiden.utils.Dict[str,raiden.utils.Any]",
                    "eth.abc.BlockHeaderAPI",
                    "Iterable[eth.abc.BlockHeaderAPI]"
                ],
                "data": [
                    "int",
                    "Optional[int]",
                    "None",
                    "bytes",
                    "List[int]",
                    "eth.abc.ReceiptAPI",
                    "eth.abc.BlockHeaderAPI",
                    "Tuple[Union[str,list[str]]]",
                    "Tuple[str,List[str]]"
                ],
                "to_class": [
                    "bool",
                    "eth.abc.DatabaseAPI",
                    "cmk.utils.type_defs.ServiceDetails",
                    "cmk.utils.type_defs.ServiceState",
                    "cmk.utils.type_defs.ServiceName"
                ],
                "default_validator": [
                    "bool",
                    "int",
                    "Optional[int]",
                    "Type",
                    "eth.abc.BlockHeaderAPI",
                    "Iterable[Any]"
                ]
            }
        },
        "Model.default_validator": {
            "name": "default_validator",
            "location": 503,
            "return": [
                "Dict",
                "List[str]",
                "List[Dict[str,Any]]",
                "List[List[int]]",
                "Dict[str,uuid.UUID]",
                "Set[int]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Dict",
                    "str"
                ],
                "data": [
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Dict",
                    "str"
                ]
            }
        },
        "Model.get_fields_localized_from_django": {
            "name": "get_fields_localized_from_django",
            "location": 521,
            "return": [
                "List",
                "List[str]",
                "Tuple[int,int]",
                "Iterable[str]",
                "bool",
                "str"
            ],
            "arguments": {
                "django_model": [
                    "Dict[str,Any]",
                    "Type",
                    "Dict",
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "Model.localize": {
            "name": "localize",
            "location": 529,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "complex",
                    "bytes",
                    "str",
                    "Optional[int]",
                    "int",
                    "bool",
                    "None"
                ],
                "obj": [
                    "Dict[str,str]",
                    "str"
                ],
                "locale": [
                    "str",
                    "Dict[str,Any]",
                    "int"
                ]
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/amodels/mptt_mixin.py": {
        "MPTTMixin._field_name": {
            "name": "_field_name",
            "location": 16,
            "return": [
                "str",
                "List[str]",
                "Optional[str]",
                "bool",
                "Iterable[str]",
                "int",
                "Optional[bytes]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ],
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "MPTTMixin._field": {
            "name": "_field",
            "location": 23,
            "return": [
                "str",
                "Type",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "MPTTMixin._column": {
            "name": "_column",
            "location": 27,
            "return": [
                "str",
                "Type"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, str]",
                    "Union[str, List[str]]"
                ],
                "name": [
                    "str",
                    "Dict[str,str]",
                    "None",
                    "Optional[str]",
                    "Optional[Dict[str,str]]",
                    "List[str]",
                    "Union[str,List[str]]"
                ]
            }
        },
        "MPTTMixin._tree_id_condition": {
            "name": "_tree_id_condition",
            "location": 30,
            "return": [
                "bool",
                "str",
                "Union[int,float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MPTTMixin.get_descendant_count": {
            "name": "get_descendant_count",
            "location": 61,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MPTTMixin.is_child_node": {
            "name": "is_child_node",
            "location": 112,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MPTTMixin.is_leaf_node": {
            "name": "is_leaf_node",
            "location": 115,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MPTTMixin.is_root_node": {
            "name": "is_root_node",
            "location": 118,
            "return": [
                "bool",
                "str",
                "Union[int,float]",
                "Type",
                "Tuple"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/amodels/relations.py": {
        "_generate_model_name": {
            "name": "_generate_model_name",
            "location": 18,
            "return": [
                "str",
                "Callable",
                "Type",
                "bool",
                "List[Exception]"
            ],
            "arguments": {
                "dj_model": [
                    "str",
                    "None",
                    "Optional[str]",
                    "stiff.models.Token",
                    "stiff.models.TaggedLemma"
                ]
            }
        },
        "_generate_model": {
            "name": "_generate_model",
            "location": 25,
            "return": [
                "float",
                "List[str]",
                "str",
                "Optional[BaseException]",
                "Tuple[Hashable]",
                "Mapping",
                "Set[str]",
                "Dict"
            ],
            "arguments": {
                "class_name": [
                    "bool",
                    "Exception",
                    "django.db.models.Model"
                ],
                "dj_model": [
                    "bool",
                    "str",
                    "Dict[str,str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "_obtain_model": {
            "name": "_obtain_model",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "app": [
                    "str",
                    "Tuple"
                ],
                "dj_model": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[type]",
                    "Type",
                    "None"
                ]
            }
        },
        "RelationshipProperty.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "factory": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "RelationshipProperty.__get__": {
            "name": "__get__",
            "location": 55,
            "return": [
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "Optional[str]",
                    "Dict",
                    "int",
                    "None",
                    "Optional[zerver.models.Realm]",
                    "float",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "owner": [
                    "None",
                    "Optional[str]",
                    "Dict",
                    "int",
                    "str",
                    "Optional[zerver.models.Realm]",
                    "float",
                    "Optional[int]",
                    "Optional[float]"
                ]
            }
        },
        "RelationshipProperty.from_django": {
            "name": "from_django",
            "location": 68,
            "return": [
                "str",
                "Callable[[KT], VT]",
                "Optional[float]",
                "Hashable",
                "List[List[str]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "field": [
                    "str",
                    "Iterable[T]",
                    "django.db.models.fields.Field"
                ]
            }
        },
        "ManyToManyFactory.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str",
                    "Optional[int]",
                    "int",
                    "Type[T]",
                    "None",
                    "bool",
                    "Type",
                    "Optional[Mapping]",
                    "Mapping"
                ],
                "target_model": [
                    "int",
                    "Exception",
                    "Tuple",
                    "List[str]",
                    "Optional[int]",
                    "None"
                ],
                "source_field": [
                    "int",
                    "models.User",
                    "str",
                    "None",
                    "Optional[int]",
                    "Hashable",
                    "Dict[str,Any]",
                    "List[str]"
                ],
                "target_field": [
                    "int",
                    "Exception",
                    "Tuple",
                    "List[str]",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "ManyToManyFactory.__call__": {
            "name": "__call__",
            "location": 98,
            "return": [
                "ManyToManyRelationship",
                "bytes",
                "BaseException",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "ManyToManyFactory.from_django": {
            "name": "from_django",
            "location": 108,
            "return": [
                "Optional[BaseException]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "List[Tuple[str,str]]",
                    "Dict[str,Any]",
                    "List[tuple[Union[str,str]]]"
                ],
                "field": [
                    "Dict[str,Any]",
                    "bool",
                    "rflx.model.Message",
                    "rflx.model.Field",
                    "Union[django.db.models.fields.Field,django.db.models.fields.reverse_related.ForeignObjectRel]"
                ]
            }
        },
        "ManyToOneFactory.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManyToOneFactory.__call__": {
            "name": "__call__",
            "location": 126,
            "return": [
                "str",
                "ManyToOneRelationship"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "str"
                ]
            }
        },
        "ManyToOneFactory.from_django": {
            "name": "from_django",
            "location": 130,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Tuple",
                    "Dict",
                    "List[str]",
                    "int",
                    "bool"
                ],
                "field": [
                    "str",
                    "Tuple",
                    "Dict",
                    "List[str]",
                    "int",
                    "bool"
                ]
            }
        },
        "OneToManyFactory.__init__": {
            "name": "__init__",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_to": [
                    "Exception",
                    "Optional[int]",
                    "int",
                    "Type[T]",
                    "None",
                    "bool",
                    "Type",
                    "Optional[Mapping]",
                    "Mapping"
                ],
                "column_to": [
                    "Exception",
                    "Optional[int]",
                    "int",
                    "Type[T]",
                    "None",
                    "bool",
                    "Type",
                    "Optional[Mapping]",
                    "Mapping"
                ],
                "on_delete": [
                    "Exception",
                    "Optional[int]",
                    "int",
                    "Type[T]",
                    "None",
                    "bool",
                    "Type",
                    "Optional[Mapping]",
                    "Mapping"
                ]
            }
        },
        "OneToManyFactory.__call__": {
            "name": "__call__",
            "location": 140,
            "return": [
                "OneToManyRelationship",
                "bytes",
                "BaseException",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "OneToManyFactory.from_django": {
            "name": "from_django",
            "location": 149,
            "return": [
                "bool",
                "int",
                "List[str]",
                "Optional[str]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type[db.models.BaseModel]",
                    "Type"
                ],
                "field": [
                    "Dict",
                    "bytes",
                    "int",
                    "Dict[str,Any]",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "rflx.model.Message",
                    "bool",
                    "rflx.model.Field"
                ]
            }
        },
        "OneToOneFactory.__init__": {
            "name": "__init__",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_from": [
                    "Exception",
                    "Mapping",
                    "Optional[Mapping]",
                    "None",
                    "Optional[int]",
                    "int",
                    "Type[T]",
                    "Type",
                    "bool",
                    "Mapping[str,Any]"
                ],
                "model_to": [
                    "Exception",
                    "Mapping",
                    "Optional[Mapping]",
                    "None",
                    "Optional[int]",
                    "int",
                    "Type[T]",
                    "Type",
                    "bool",
                    "Mapping[str,Any]"
                ],
                "column_from": [
                    "Exception",
                    "Mapping",
                    "Optional[Mapping]",
                    "None",
                    "Optional[int]",
                    "int",
                    "Type[T]",
                    "Type",
                    "bool",
                    "Mapping[str,Any]"
                ],
                "column_to": [
                    "Exception",
                    "Mapping",
                    "Optional[Mapping]",
                    "None",
                    "Optional[int]",
                    "int",
                    "Type[T]",
                    "Type",
                    "bool",
                    "Mapping[str,Any]"
                ],
                "on_delete": [
                    "Exception",
                    "Mapping",
                    "Optional[Mapping]",
                    "None",
                    "Optional[int]",
                    "int",
                    "Type[T]",
                    "Type",
                    "bool",
                    "Mapping[str,Any]"
                ]
            }
        },
        "OneToOneFactory.__call__": {
            "name": "__call__",
            "location": 167,
            "return": [
                "OneToOneRelationship",
                "bytes",
                "BaseException",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "Tuple[asyncpg_migrate.model.Config,int]",
                    "Tuple[Union[C,int]]"
                ]
            }
        },
        "OneToOneFactory.from_django": {
            "name": "from_django",
            "location": 178,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "Set[str]",
                    "List[list[str]]",
                    "List[str]",
                    "List[List[str]]",
                    "Iterable[contests.models.User]"
                ],
                "field": [
                    "rflx.model.Field",
                    "rflx.model.Message",
                    "django.db.models.fields.Field",
                    "django.db.models.Model"
                ]
            }
        },
        "BaseRelationship.is_many_to_many": {
            "name": "is_many_to_many",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRelationship.is_many_to_one": {
            "name": "is_many_to_one",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRelationship.is_one_to_many": {
            "name": "is_one_to_many",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRelationship.is_one_to_one": {
            "name": "is_one_to_one",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManyToManyRelationship.__init__": {
            "name": "__init__",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "model": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Callable",
                    "None"
                ],
                "target_model": [
                    "str",
                    "bool",
                    "Tuple",
                    "List[int]",
                    "float",
                    "int"
                ],
                "source_field": [
                    "str",
                    "int",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "target_field": [
                    "str",
                    "bool",
                    "Tuple",
                    "List[int]",
                    "float",
                    "int"
                ]
            }
        },
        "ManyToManyRelationship.is_many_to_many": {
            "name": "is_many_to_many",
            "location": 224,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManyToManyRelationship.is_many_to_one": {
            "name": "is_many_to_one",
            "location": 228,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManyToManyRelationship.is_one_to_many": {
            "name": "is_one_to_many",
            "location": 232,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManyToManyRelationship.is_one_to_one": {
            "name": "is_one_to_one",
            "location": 236,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManyToManyRelationship._get_where_condition": {
            "name": "_get_where_condition",
            "location": 239,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "field_name": [
                    "str",
                    "Iterable[str]",
                    "BinaryIO"
                ],
                "field_id": [
                    "List"
                ]
            }
        },
        "ManyToManyRelationship._get_source_where_condition": {
            "name": "_get_source_where_condition",
            "location": 247,
            "return": [
                "str",
                "Set[str]",
                "List[str]",
                "Optional[IO[str]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "ManyToManyRelationship._get_target_where_condition": {
            "name": "_get_target_where_condition",
            "location": 250,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "int",
                    "str",
                    "List[int]",
                    "slice",
                    "rotkehlchen.db.dbhandler.DBHandler",
                    "bool"
                ]
            }
        },
        "ManyToOneRelationship.__init__": {
            "name": "__init__",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "ManyToOneRelationship.is_many_to_many": {
            "name": "is_many_to_many",
            "location": 334,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManyToOneRelationship.is_many_to_one": {
            "name": "is_many_to_one",
            "location": 338,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManyToOneRelationship.is_one_to_many": {
            "name": "is_one_to_many",
            "location": 342,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManyToOneRelationship.is_one_to_one": {
            "name": "is_one_to_one",
            "location": 346,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneToManyRelationship.__init__": {
            "name": "__init__",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "bool",
                    "models.characters.character_base.Character",
                    "Callable[dict,None]",
                    "List",
                    "Callable[[Dict],None]",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "model_to": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ],
                "column_to": [
                    "bool",
                    "str",
                    "Callable",
                    "List[zerver.models.UserProfile]",
                    "List[P]",
                    "Optional[int]",
                    "None"
                ],
                "on_delete": [
                    "Mapping",
                    "Optional[Mapping]",
                    "str",
                    "None",
                    "int",
                    "Callable",
                    "Optional[str]",
                    "bool",
                    "Mapping[str,Any]"
                ]
            }
        },
        "OneToManyRelationship.is_many_to_many": {
            "name": "is_many_to_many",
            "location": 358,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneToManyRelationship.is_many_to_one": {
            "name": "is_many_to_one",
            "location": 362,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneToManyRelationship.is_one_to_many": {
            "name": "is_one_to_many",
            "location": 366,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneToManyRelationship.is_one_to_one": {
            "name": "is_one_to_one",
            "location": 370,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneToOneRelationship.__init__": {
            "name": "__init__",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "int",
                    "models.characters.character_base.Character",
                    "None",
                    "Dict",
                    "Optional[int]",
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "model_from": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ],
                "model_to": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ],
                "column_from": [
                    "Callable"
                ],
                "column_to": [
                    "Callable"
                ],
                "on_delete": [
                    "Exception",
                    "Mapping",
                    "Optional[Mapping]",
                    "int",
                    "None",
                    "Optional[int]",
                    "Type",
                    "Type[T]",
                    "bool",
                    "Mapping[str,Any]"
                ]
            }
        },
        "OneToOneRelationship.is_many_to_many": {
            "name": "is_many_to_many",
            "location": 408,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneToOneRelationship.is_many_to_one": {
            "name": "is_many_to_one",
            "location": 412,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneToOneRelationship.is_one_to_many": {
            "name": "is_one_to_many",
            "location": 416,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneToOneRelationship.is_one_to_one": {
            "name": "is_one_to_one",
            "location": 420,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/amodels/__init__.py": {
        "AppModels.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "AppModels.__getitem__": {
            "name": "__getitem__",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "utils.CWLObjectType"
                ]
            }
        },
        "AppModels.__getattr__": {
            "name": "__getattr__",
            "location": 30,
            "return": [
                "str",
                "int",
                "Exception",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Sequence[Any]",
                    "Tuple",
                    "pringles.models.Model"
                ]
            }
        },
        "AppModels.import_all_models": {
            "name": "import_all_models",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "apps_path": [
                    "str"
                ]
            }
        },
        "AppModels.import_all_models_from_packages": {
            "name": "import_all_models_from_packages",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "package": [
                    "str"
                ]
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/export/xlsx.py": {
        "XLSXResponse.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Dict",
                    "Dict[str,Any]",
                    "Optional[int]",
                    "None",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "XLSXResponse.prepare_workbook": {
            "name": "prepare_workbook",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "XLSXResponse.append": {
            "name": "append",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "List",
                    "Dict",
                    "Sequence[T]",
                    "Union[Dict,List]",
                    "Sequence[str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "XLSXResponse.write_workbook": {
            "name": "write_workbook",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/export/__init__.py": {},
    "dvhb-hybrid-master/dvhb_hybrid/files/admin.py": {},
    "dvhb-hybrid-master/dvhb_hybrid/files/amodels.py": {
        "Image.set_defaults": {
            "name": "set_defaults",
            "location": 27,
            "return": [],
            "arguments": {
                "cls": [
                    "memoryview",
                    "str"
                ],
                "data": [
                    "dict",
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "Dict[str, Any]",
                    "Sequence[float]",
                    "str",
                    "Type"
                ]
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/files/apps.py": {},
    "dvhb-hybrid-master/dvhb_hybrid/files/image.py": {
        "db_error": {
            "name": "db_error",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "Dict",
                    "aiohttp.web._requesRequest",
                    "aiohttp.web.Request"
                ],
                "error": [
                    "Exception",
                    "aiohttp.web.Request"
                ]
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/files/image_processors.py": {
        "Image.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resultrowproxy": [
                    "Type"
                ]
            }
        },
        "ImageFactory.get_generator": {
            "name": "get_generator",
            "location": 22,
            "return": [
                "type"
            ],
            "arguments": {
                "self": [],
                "w": [
                    "bool",
                    "str",
                    "Dict",
                    "T"
                ],
                "h": [
                    "bool",
                    "str",
                    "Dict",
                    "T"
                ],
                "processor": [
                    "Text",
                    "bool",
                    "str",
                    "T",
                    "Dict"
                ]
            }
        },
        "ImageFactory._get_image": {
            "name": "_get_image",
            "location": 35,
            "return": [
                "str",
                "ImageCacheFile"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "str"
                ],
                "w": [
                    "str"
                ],
                "h": [
                    "str"
                ],
                "processor": [
                    "str"
                ]
            }
        },
        "ImageFactory.resize": {
            "name": "resize",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_name": [
                    "str",
                    "List[str]"
                ],
                "w": [
                    "str",
                    "bytes",
                    "bool",
                    "int"
                ],
                "h": [
                    "str",
                    "bytes",
                    "bool",
                    "int"
                ],
                "processor": [
                    "Text",
                    "str",
                    "bytes",
                    "bool",
                    "int"
                ]
            }
        },
        "ImageFactory.get_generator.Generator.get_hash": {
            "name": "get_hash",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/files/models.py": {
        "Image.__str__": {
            "name": "__str__",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Image.save": {
            "name": "save",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "force_insert": [
                    "bool",
                    "str",
                    "List[Tuple[Any,Dict]]",
                    "django.db.models.Model",
                    "Optional[gdpr.models.LegalReason]",
                    "Dict[str,Any]",
                    "Optional[bytes]"
                ],
                "force_update": [
                    "bool",
                    "str",
                    "List[Tuple[Any,Dict]]",
                    "django.db.models.Model",
                    "Optional[gdpr.models.LegalReason]",
                    "Dict[str,Any]",
                    "Optional[bytes]"
                ],
                "using": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "List[Tuple[Any,Dict]]",
                    "List[tuple[Union[Any,dict]]]",
                    "django.db.models.Model",
                    "Optional[gdpr.models.LegalReason]",
                    "bytes",
                    "Optional[bytes]"
                ],
                "update_fields": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "List[Tuple[Any,Dict]]",
                    "List[tuple[Union[Any,dict]]]",
                    "django.db.models.Model",
                    "Optional[gdpr.models.LegalReason]",
                    "bytes",
                    "Optional[bytes]"
                ]
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/files/storages.py": {
        "BaseStorage.create_dir": {
            "name": "create_dir",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "BaseStorage.uuid": {
            "name": "uuid",
            "location": 27,
            "return": [
                "Optional[_uuid.UUID]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "Optional[Union[str,int]]",
                    "Awaitable",
                    "int",
                    "collections.abc.Awaitable"
                ]
            }
        },
        "BaseStorage.mime": {
            "name": "mime",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "topicdb.core.models.basename.BaseName"
                ]
            }
        },
        "ImageStorage.get_name": {
            "name": "get_name",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "uuid": [
                    "str",
                    "None"
                ]
            }
        },
        "ImageStorage.get_available_name": {
            "name": "get_available_name",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,str]"
                ],
                "max_length": [
                    "Iterable[str]",
                    "str",
                    "None"
                ],
                "uuid": [
                    "str",
                    "None"
                ]
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/files/utils.py": {},
    "dvhb-hybrid-master/dvhb_hybrid/files/__init__.py": {},
    "dvhb-hybrid-master/dvhb_hybrid/files/migrations/0001_initial.py": {},
    "dvhb-hybrid-master/dvhb_hybrid/files/migrations/0002_image_author.py": {},
    "dvhb-hybrid-master/dvhb_hybrid/files/migrations/0003_rename_fields.py": {},
    "dvhb-hybrid-master/dvhb_hybrid/files/migrations/0004_auto_20171213_0805.py": {},
    "dvhb-hybrid-master/dvhb_hybrid/files/migrations/0005_auto_20190402_1237.py": {},
    "dvhb-hybrid-master/dvhb_hybrid/files/migrations/__init__.py": {},
    "dvhb-hybrid-master/dvhb_hybrid/mailer/admin.py": {},
    "dvhb-hybrid-master/dvhb_hybrid/mailer/amodels.py": {
        "MailMessage.set_defaults": {
            "name": "set_defaults",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "str"
                ],
                "data": [
                    "Dict"
                ]
            }
        },
        "EmailTemplateTranslation.as_dict": {
            "name": "as_dict",
            "location": 45,
            "return": [
                "Dict[Text,Union[FormatRender,None]]",
                "Dict[Text,Union[FormatRender,Jinja2Render]]",
                "str",
                "Dict",
                "Callable",
                "Union[Dict,Tuple]",
                "Dict[str,float]"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "int",
                    "None",
                    "List[Dict[str,Any]]",
                    "Dict",
                    "Mapping",
                    "Iterable[str]",
                    "List[dict[str,Any]]"
                ]
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/mailer/apps.py": {},
    "dvhb-hybrid-master/dvhb_hybrid/mailer/base.py": {
        "BaseConnection.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMailer.setup": {
            "name": "setup",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Type",
                    "Optional[Type[Any]]",
                    "None",
                    "int",
                    "logging.Logger"
                ],
                "app": [
                    "bool",
                    "Sequence[Any]",
                    "bytes",
                    "Iterable[Any]",
                    "int",
                    "Tuple"
                ],
                "conf": [
                    "bool",
                    "str",
                    "Type",
                    "Optional[Type[Any]]",
                    "None",
                    "int",
                    "logging.Logger"
                ]
            }
        },
        "BaseMailer.set_config": {
            "name": "set_config",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str,Any]",
                    "Dict",
                    "sphinx.config.Config",
                    "pyramid.config.Configurator"
                ]
            }
        },
        "BaseMailer.get_connection": {
            "name": "get_connection",
            "location": 131,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMailer._tempalte_names": {
            "name": "_tempalte_names",
            "location": 136,
            "return": [
                "Tuple[Union[tuple[Union[str,list[str]]],str,list[str]]]",
                "Dict",
                "List[str]",
                "Dict[str,Type[Any]]",
                "Dict[str,Any]",
                "Mapping[int,str]"
            ],
            "arguments": {
                "self": [],
                "template_name": [
                    "str",
                    "List[str]"
                ],
                "lang_code": [
                    "str",
                    "List[str]"
                ],
                "fallback_lang_code": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "BaseMailer.get_context": {
            "name": "get_context",
            "location": 213,
            "return": [
                "str",
                "Set[str]",
                "asyncio.Future",
                "Union[List[str], str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/mailer/django.py": {
        "DjangoConnection.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": [
                    "int",
                    "float",
                    "bool"
                ],
                "conf": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "DjangoConnection.send_message.attach_files": {
            "name": "attach_files",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "str"
                ],
                "attachments": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "List[str]",
                    "list"
                ]
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/mailer/dummy.py": {
        "Connection.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conf": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Mailer.clean": {
            "name": "clean",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mailer.messages": {
            "name": "messages",
            "location": 34,
            "return": [
                "str",
                "int",
                "Exception",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/mailer/models.py": {
        "validate_lang_code": {
            "name": "validate_lang_code",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "SupportsBytes",
                    "Sequence[str]",
                    "faustypes.models.T"
                ]
            }
        },
        "template_target": {
            "name": "template_target",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "bytes",
                    "Dict"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "validate_file_extension": {
            "name": "validate_file_extension",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Template.__str__": {
            "name": "__str__",
            "location": 31,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemplateTranslation.language": {
            "name": "language",
            "location": 73,
            "return": [
                "dict",
                "Dict[str, Any]",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemplateTranslation.__str__": {
            "name": "__str__",
            "location": 79,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/mailer/smtp.py": {
        "SMTPConnection.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": [
                    "int",
                    "float",
                    "bool"
                ],
                "conf": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/mailer/template.py": {
        "load_all": {
            "name": "load_all",
            "location": 15,
            "return": [
                "dict"
            ],
            "arguments": {
                "app": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "get_template": {
            "name": "get_template",
            "location": 82,
            "return": [
                "str",
                "FormatRender"
            ],
            "arguments": {
                "app": [
                    "str",
                    "Callable[[None,None],bool]",
                    "Callable[None,None,bool]"
                ],
                "data": [
                    "str"
                ]
            }
        },
        "Render.get_context": {
            "name": "get_context",
            "location": 31,
            "return": [
                "ChainMap"
            ],
            "arguments": {
                "self": []
            }
        },
        "Render.render": {
            "name": "render",
            "location": 43,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "FormatRender.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "bool",
                    "Type",
                    "Type[GenericList]",
                    "int"
                ]
            }
        },
        "FormatRender.render": {
            "name": "render",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Optional[str]",
                    "None",
                    "str"
                ]
            }
        },
        "Jinja2Render.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Jinja2Render.render": {
            "name": "render",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Optional[str]",
                    "None",
                    "str"
                ]
            }
        },
        "TemplateRender.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "bool",
                    "Type",
                    "Type[GenericList]",
                    "int"
                ],
                "cache": [
                    "str",
                    "Dict[str,List[str]]",
                    "Dict[str,list[str]]"
                ]
            }
        },
        "TemplateRender.render": {
            "name": "render",
            "location": 101,
            "return": [
                "str",
                "None",
                "int",
                "List[str]",
                "List[dict]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Optional[str]",
                    "None",
                    "str"
                ]
            }
        },
        "TitleTemplateRender.render": {
            "name": "render",
            "location": 119,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "BaseException",
                    "None"
                ]
            }
        },
        "EmailTemplate.create_from_jinja2": {
            "name": "create_from_jinja2",
            "location": 134,
            "return": [
                "EmailTemplate"
            ],
            "arguments": {
                "cls": [
                    "Type[_TEmailTemplate]"
                ],
                "template": [
                    "str",
                    "bool"
                ]
            }
        },
        "EmailTemplate.create_from_str": {
            "name": "create_from_str",
            "location": 145,
            "return": [
                "EmailTemplate"
            ],
            "arguments": {
                "cls": [
                    "Type[_TEmailTemplate]"
                ],
                "subject": [
                    "Optional[str]",
                    "str",
                    "Dict[str,str]",
                    "List[str]",
                    "None",
                    "Optional[List[str]]"
                ],
                "body": [
                    "str",
                    "List[str]",
                    "Dict",
                    "Mapping",
                    "int",
                    "Mapping[str,Any]",
                    "Dict[str,dict[str,Any]]",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "html": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "env": [
                    "str",
                    "None"
                ]
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/mailer/__init__.py": {},
    "dvhb-hybrid-master/dvhb_hybrid/mailer/migrations/0001_initial.py": {},
    "dvhb-hybrid-master/dvhb_hybrid/mailer/migrations/0002_email_templates.py": {},
    "dvhb-hybrid-master/dvhb_hybrid/mailer/migrations/0003_auto_20171213_0805.py": {},
    "dvhb-hybrid-master/dvhb_hybrid/mailer/migrations/0004_auto_20180424_0950.py": {},
    "dvhb-hybrid-master/dvhb_hybrid/mailer/migrations/__init__.py": {},
    "dvhb-hybrid-master/dvhb_hybrid/middleware/debug.py": {},
    "dvhb-hybrid-master/dvhb_hybrid/middleware/locale.py": {
        "_parse_accept_language": {
            "name": "_parse_accept_language",
            "location": 55,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "lang": [
                    "str",
                    "bytes"
                ]
            }
        },
        "LocaleMiddleware.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default_locale": [
                    "str",
                    "bool",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "translations": [
                    "int",
                    "Tuple",
                    "float",
                    "bool"
                ]
            }
        },
        "LocaleMiddleware._lookup_translations": {
            "name": "_lookup_translations",
            "location": 31,
            "return": [
                "bool",
                "Optional[Union[str,Any]]",
                "Dict[str,str]",
                "str",
                "List[str]",
                "frozenset"
            ],
            "arguments": {
                "self": [],
                "locale": [
                    "Dict[str,Any]",
                    "str",
                    "Dict[str,str]"
                ]
            }
        },
        "LocaleMiddleware._detect_locale": {
            "name": "_detect_locale",
            "location": 40,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/middleware/__init__.py": {},
    "dvhb-hybrid-master/dvhb_hybrid/users/admin.py": {
        "UserForm.clean_picture": {
            "name": "clean_picture",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUserConfirmationRequestAdmin.get_readonly_fields": {
            "name": "get_readonly_fields",
            "location": 83,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str,str]",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ],
                "obj": [
                    "None",
                    "Dict[str,str]",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "BaseUserConfirmationRequestAdmin.has_add_permission": {
            "name": "has_add_permission",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "None",
                    "bool",
                    "django.db.models.Model",
                    "django.http.requesHttpRequest",
                    "django.http.HttpRequest",
                    "Optional[django.db.models.Model]",
                    "django.forms.Form",
                    "django.forms.ModelForm"
                ]
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/users/amodels.py": {
        "AbstractUser.set_defaults": {
            "name": "set_defaults",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "str",
                    "django.tesTestCase"
                ],
                "data": [
                    "Dict",
                    "int",
                    "Type",
                    "str",
                    "Collection",
                    "Collection[str]",
                    "Iterable"
                ]
            }
        },
        "AbstractUser.get_user_by_email": {
            "name": "get_user_by_email",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "dict",
                    "int"
                ],
                "email": [
                    "str",
                    "bool",
                    "Dict[str,str]",
                    "Dict",
                    "int"
                ]
            }
        },
        "AbstractUser.prepare_image": {
            "name": "prepare_image",
            "location": 85,
            "return": [
                "None",
                "int",
                "Union[tuple,list]",
                "Set[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "Optional[Any]",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "Any",
                    "Optional[List[Any]]",
                    "Dict[str,Any]",
                    "List[Any]"
                ]
            }
        },
        "AbstractUser.__repr__": {
            "name": "__repr__",
            "location": 131,
            "return": [
                "str",
                "Dict",
                "Union[str,Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAbstractConfirmationRequest.set_defaults": {
            "name": "set_defaults",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "str",
                    "django.tesTestCase"
                ],
                "data": [
                    "Dict",
                    "bytes",
                    "None",
                    "T",
                    "raiden.utils.BlockSpecification",
                    "raiden.utils.Address.Hex",
                    "Optional[bytes]"
                ]
            }
        },
        "BaseAbstractConfirmationRequest.code": {
            "name": "code",
            "location": 150,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAbstractConfirmationRequest.get_by_email": {
            "name": "get_by_email",
            "location": 159,
            "return": [
                "bool",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, str]",
                    "purplship.core.utils.xml.Element",
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ],
                "email": [
                    "Dict[str,str]",
                    "bool",
                    "str",
                    "purplship.core.utils.xml.Element",
                    "Dict[str,Any]"
                ],
                "connection": [
                    "Dict[str,str]",
                    "None",
                    "bool",
                    "str",
                    "purplship.core.utils.xml.Element",
                    "Dict[str,Any]"
                ]
            }
        },
        "BaseAbstractConfirmationRequest.is_confirmed": {
            "name": "is_confirmed",
            "location": 162,
            "return": [
                "bool",
                "cmk.utils.type_defs.UserId",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAbstractConfirmationRequest.is_cancelled": {
            "name": "is_cancelled",
            "location": 165,
            "return": [
                "bool",
                "cmk.utils.type_defs.UserId",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAbstractConfirmationRequest.get_status": {
            "name": "get_status",
            "location": 205,
            "return": [
                "Dict[str, Any]",
                "bool",
                "cmk.utils.type_defs.UserId",
                "Dict[str, Union[str, Set]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractUserActivationRequest.get_template_context": {
            "name": "get_template_context",
            "location": 215,
            "return": [
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractUserProfileDeleteRequest.get_template_context": {
            "name": "get_template_context",
            "location": 225,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractUserChangeEmailOriginalAddressRequest.get_template_context": {
            "name": "get_template_context",
            "location": 238,
            "return": [
                "Dict[str, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/users/apps.py": {},
    "dvhb-hybrid-master/dvhb_hybrid/users/enums.py": {
        "UserConfirmationRequestStatus.translation": {
            "name": "translation",
            "location": 13,
            "return": [
                "dict"
            ],
            "arguments": {
                "cls": [
                    "Dict[str,Any]",
                    "Type",
                    "IO[bytes]",
                    "Callable",
                    "IO"
                ]
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/users/jwt.py": {
        "JWT.generate": {
            "name": "generate",
            "location": 80,
            "return": [
                "Callable",
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "JWT.decode": {
            "name": "decode",
            "location": 99,
            "return": [
                "dict",
                "Optional[bool]",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/users/models.py": {
        "AbstractUserManager._create_user": {
            "name": "_create_user",
            "location": 21,
            "return": [
                "zam_repondeur.models.Lecture",
                "core.models.UserPreferences",
                "set",
                "int",
                "bool",
                "django.db.models.QuerySet"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str",
                    "bool",
                    "raiden.utils.Secret",
                    "models.Payment"
                ],
                "password": [
                    "str",
                    "float",
                    "Optional[str]",
                    "int",
                    "None"
                ]
            }
        },
        "AbstractUserManager.create_user": {
            "name": "create_user",
            "location": 30,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str",
                    "bool"
                ],
                "password": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "AbstractUserManager.create_superuser": {
            "name": "create_superuser",
            "location": 35,
            "return": [
                "dict",
                "django.http.HttpResponse"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str",
                    "bool"
                ],
                "password": [
                    "str",
                    "bool"
                ]
            }
        },
        "AbstractUser.get_short_name": {
            "name": "get_short_name",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/users/__init__.py": {},
    "dvhb-hybrid-master/dvhb_hybrid/users/migrations/0001_initial.py": {},
    "dvhb-hybrid-master/dvhb_hybrid/users/migrations/0002_auto_20171225_1333.py": {},
    "dvhb-hybrid-master/dvhb_hybrid/users/migrations/__init__.py": {},
    "dvhb-hybrid-master/dvhb_hybrid/users/views/oauth.py": {
        "UserOAuthView.model": {
            "name": "model",
            "location": 23,
            "return": [
                "str",
                "bytes",
                "Dict[str, Any]",
                "pyppeteer.network_manager.Request"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserOAuthView.conf": {
            "name": "conf",
            "location": 27,
            "return": [
                "str",
                "Optional[str]",
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserOAuthView._get_client": {
            "name": "_get_client",
            "location": 39,
            "return": [
                "Callable",
                "aiohttp.web.Application",
                "aiohttp.web_app.Application"
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "Callable",
                    "str",
                    "float"
                ]
            }
        },
        "UserOAuthView._redirect": {
            "name": "_redirect",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Optional[dict]",
                    "Dict",
                    "Optional[Dict[str,str]]",
                    "None",
                    "aiohttp.ClientSession",
                    "Dict[str,str]"
                ],
                "headers": [
                    "str",
                    "None",
                    "Dict",
                    "aiohttp.ClientSession",
                    "Mapping",
                    "Mapping[str,str]",
                    "django.http.HttpRequest",
                    "Optional[dict]"
                ]
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/users/views/profile.py": {},
    "dvhb-hybrid-master/dvhb_hybrid/users/views/user.py": {},
    "dvhb-hybrid-master/dvhb_hybrid/users/views/__init__.py": {},
    "dvhb-hybrid-master/dvhb_hybrid/user_action_log/admin.py": {},
    "dvhb-hybrid-master/dvhb_hybrid/user_action_log/amodels.py": {},
    "dvhb-hybrid-master/dvhb_hybrid/user_action_log/apps.py": {},
    "dvhb-hybrid-master/dvhb_hybrid/user_action_log/base_admin.py": {
        "BaseUserActionLogEntryAdmin.has_add_permission": {
            "name": "has_add_permission",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "None",
                    "bool",
                    "django.db.models.Model",
                    "django.http.requesHttpRequest",
                    "django.http.HttpRequest",
                    "Optional[django.db.models.Model]",
                    "django.forms.Form",
                    "django.forms.ModelForm"
                ]
            }
        },
        "BaseUserActionLogEntryAdmin.has_delete_permission": {
            "name": "has_delete_permission",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ],
                "obj": [
                    "django.http.HttpRequest",
                    "None"
                ]
            }
        },
        "BaseUserActionLogEntryAdmin.get_actions": {
            "name": "get_actions",
            "location": 43,
            "return": [
                "str",
                "bool",
                "List",
                "Dict",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "django.http.HttpRequest"
                ]
            }
        },
        "BaseUserActionLogEntryAdmin.object_link": {
            "name": "object_link",
            "location": 49,
            "return": [
                "Dict",
                "None",
                "List"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "Dict",
                    "hackathon.utils.utils.DataMessage"
                ]
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/user_action_log/base_amodels.py": {
        "BaseUserActionLogEntry.get_table_from_django": {
            "name": "get_table_from_django",
            "location": 13,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "Iterable[str]",
                    "Optional[Iterable[str]]",
                    "None",
                    "str",
                    "Dict[str,List]",
                    "Type",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Iterable[tuple[Union[Hashable,Any]]]",
                    "Type[Exception]",
                    "List[str]",
                    "Iterable[Tuple[Hashable,Any]]"
                ],
                "django_model": [
                    "str",
                    "bool",
                    "Type",
                    "Dict[str,Any]",
                    "Type[T]",
                    "Any",
                    "Optional[Any]",
                    "None",
                    "abilian.services.security.models.Permission",
                    "abilian.services.security.models.Role"
                ]
            }
        },
        "BaseUserActionLogEntry.set_defaults": {
            "name": "set_defaults",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "str",
                    "django.tesTestCase"
                ],
                "data": [
                    "Dict"
                ]
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/user_action_log/base_models.py": {
        "BaseUserActionLogEntry.__str__": {
            "name": "__str__",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/user_action_log/enums.py": {
        "UserActionLogEntryType.translation": {
            "name": "translation",
            "location": 14,
            "return": [
                "dict"
            ],
            "arguments": {
                "cls": [
                    "Callable",
                    "Dict[str,Any]",
                    "IO",
                    "T",
                    "Callable[,Any]",
                    "IO[bytes]"
                ]
            }
        },
        "UserActionLogEntrySubType.translation": {
            "name": "translation",
            "location": 33,
            "return": [
                "dict"
            ],
            "arguments": {
                "cls": [
                    "Callable",
                    "Dict[str,Any]",
                    "Dict",
                    "Callable[,Any]",
                    "T"
                ]
            }
        },
        "UserActionLogStatus.translation": {
            "name": "translation",
            "location": 49,
            "return": [
                "dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict",
                    "bool",
                    "Callable"
                ]
            }
        }
    },
    "dvhb-hybrid-master/dvhb_hybrid/user_action_log/models.py": {},
    "dvhb-hybrid-master/dvhb_hybrid/user_action_log/__init__.py": {},
    "dvhb-hybrid-master/dvhb_hybrid/user_action_log/migrations/0001_initial.py": {},
    "dvhb-hybrid-master/dvhb_hybrid/user_action_log/migrations/0002_auto_20180709_0704.py": {},
    "dvhb-hybrid-master/dvhb_hybrid/user_action_log/migrations/__init__.py": {},
    "dvhb-hybrid-master/examples/tutorial/manage.py": {},
    "dvhb-hybrid-master/examples/tutorial/tutorial/app.py": {
        "Application.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dvhb-hybrid-master/examples/tutorial/tutorial/settings.py": {},
    "dvhb-hybrid-master/examples/tutorial/tutorial/urls.py": {},
    "dvhb-hybrid-master/examples/tutorial/tutorial/wsgi.py": {},
    "dvhb-hybrid-master/examples/tutorial/tutorial/__init__.py": {},
    "dvhb-hybrid-master/examples/tutorial/tutorial/users/amodels.py": {},
    "dvhb-hybrid-master/examples/tutorial/tutorial/users/apps.py": {},
    "dvhb-hybrid-master/examples/tutorial/tutorial/users/models.py": {},
    "dvhb-hybrid-master/examples/tutorial/tutorial/users/tests.py": {},
    "dvhb-hybrid-master/examples/tutorial/tutorial/users/views.py": {},
    "dvhb-hybrid-master/examples/tutorial/tutorial/users/__init__.py": {},
    "dvhb-hybrid-master/examples/tutorial/tutorial/users/migrations/0001_initial.py": {},
    "dvhb-hybrid-master/examples/tutorial/tutorial/users/migrations/__init__.py": {},
    "dvhb-hybrid-master/tests/conftest.py": {
        "config": {
            "name": "config",
            "location": 41,
            "return": [
                "Conf",
                "bool",
                "List[str]",
                "Tuple[Any,Any,Any]",
                "Set",
                "str"
            ],
            "arguments": {}
        },
        "context": {
            "name": "context",
            "location": 51,
            "return": [
                "typing.Generator[Context]"
            ],
            "arguments": {
                "config": [
                    "Dict[str,Any]",
                    "lightbus.config.Config",
                    "None",
                    "str",
                    "opentrons.config.robot_configs.robot_config",
                    "Optional[pathlib.Path]",
                    "pyramid.config.Configurator",
                    "Optional[str]"
                ],
                "loop": [
                    "Dict[str,Any]",
                    "lightbus.config.Config",
                    "None",
                    "str",
                    "opentrons.config.robot_configs.robot_config",
                    "Optional[pathlib.Path]",
                    "pyramid.config.Configurator",
                    "Optional[str]"
                ]
            }
        },
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "app": {
            "name": "app",
            "location": 61,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "context": [
                    "int",
                    "str",
                    "django.contrib.auth.models.User",
                    "bool"
                ]
            }
        },
        "cli": {
            "name": "cli",
            "location": 66,
            "return": [
                "str",
                "purplship.core.utils.xml.Element",
                "Optional[str]",
                "aiohttp.web.Application"
            ],
            "arguments": {
                "app": [
                    "Exception",
                    "core.Application"
                ],
                "test_client": [
                    "Exception",
                    "core.Application"
                ]
            }
        },
        "django_db_setup": {
            "name": "django_db_setup",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "django_db_setup": [
                    "bool"
                ],
                "django_db_blocker": [
                    "Callable"
                ]
            }
        },
        "Conf.load_yaml": {
            "name": "load_yaml",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "dvhb-hybrid-master/tests/models.py": {},
    "dvhb-hybrid-master/tests/test_amodels.py": {
        "new_object": {
            "name": "new_object",
            "location": 22,
            "return": [
                "dict",
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "model": {
            "name": "model",
            "location": 27,
            "return": [
                "bool",
                "int",
                "Optional[Any]"
            ],
            "arguments": {
                "app": [
                    "str"
                ]
            }
        },
        "test_validate_and_save.validator": {
            "name": "validator",
            "location": 136,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "int"
                ],
                "data": [
                    "str",
                    "T",
                    "int",
                    "Dict[str, str]",
                    "dict",
                    "bytes"
                ]
            }
        }
    },
    "dvhb-hybrid-master/tests/test_export_xlsx.py": {},
    "dvhb-hybrid-master/tests/test_mptt_mixin.py": {
        "create_test_model_instance": {
            "name": "create_test_model_instance",
            "location": 23,
            "return": [
                "str",
                "Tuple[bytes]",
                "int",
                "bytes",
                "app.models.Tweet"
            ],
            "arguments": {
                "app": [
                    "bool",
                    "Dict",
                    "routemaster.utils.WSGICallable",
                    "int"
                ],
                "test_client": [
                    "bool",
                    "Dict",
                    "routemaster.utils.WSGICallable",
                    "int"
                ]
            }
        },
        "clear_table": {
            "name": "clear_table",
            "location": 31,
            "return": [
                "int",
                "list",
                "str",
                "bool"
            ],
            "arguments": {
                "app": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_test_model_instance": {
            "name": "get_test_model_instance",
            "location": 39,
            "return": [
                "str",
                "Callable",
                "List[List[int]]"
            ],
            "arguments": {
                "app": []
            }
        },
        "assert_nodes_ids": {
            "name": "assert_nodes_ids",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "items": [
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Optional[Any]",
                    "None",
                    "Any"
                ],
                "ids": [
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Optional[Any]",
                    "None",
                    "Any"
                ],
                "pk": [
                    "Text",
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Optional[Any]"
                ]
            }
        },
        "MPTTTestModel.set_defaults": {
            "name": "set_defaults",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "str"
                ],
                "data": [
                    "Dict"
                ]
            }
        }
    },
    "dvhb-hybrid-master/tests/test_sitemap.py": {
        "config": {
            "name": "config",
            "location": 10,
            "return": [
                "str",
                "Optional[dict]",
                "dict",
                "bool"
            ],
            "arguments": {
                "config": [
                    "bool"
                ]
            }
        },
        "test_sitemap.sitemap_handler": {
            "name": "sitemap_handler",
            "location": 25,
            "return": [
                "Optional[str]",
                "bool",
                "int",
                "Optional[List[Any]]",
                "Callable",
                "Callable[..., None]"
            ],
            "arguments": {
                "request": []
            }
        }
    },
    "dvhb-hybrid-master/tests/test_translations.py": {
        "create_locale": {
            "name": "create_locale",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "root": [
                    "str"
                ],
                "locale": [
                    "str"
                ]
            }
        },
        "test_middleware.Req.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_middleware.Req.__setitem__": {
            "name": "__setitem__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict",
                    "Dict[int, List[Any]]",
                    "T",
                    "Sequence[str]",
                    "Dict[str, Dict[str, int]]",
                    "\"ks.Series\""
                ],
                "value": [
                    "dict",
                    "Dict[int, List[Any]]",
                    "T",
                    "Sequence[str]",
                    "Dict[str, Dict[str, int]]",
                    "\"ks.Series\""
                ]
            }
        },
        "test_middleware.Req.__getitem__": {
            "name": "__getitem__",
            "location": 41,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Optional[str]",
                "Iterable[Sequence[str]]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Dict[str, Any]",
                    "type",
                    "Collection[str]",
                    "Union[Dict, List]",
                    "MutableMapping",
                    "str",
                    "Iterable"
                ]
            }
        }
    },
    "dvhb-hybrid-master/tests/__init__.py": {},
    "dvhb-hybrid-master/tests/mailer/conftest.py": {
        "config": {
            "name": "config",
            "location": 5,
            "return": [
                "str",
                "Optional[dict]",
                "dict",
                "bool"
            ],
            "arguments": {
                "config": [
                    "bool"
                ]
            }
        }
    },
    "dvhb-hybrid-master/tests/mailer/test_mailer.py": {},
    "dvhb-hybrid-master/tests/mailer/test_template.py": {
        "test_img": {
            "name": "test_img",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_email_template_from_html": {
            "name": "test_email_template_from_html",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dvhb-hybrid-master/tests/mailer/test_template_translation.py": {},
    "dvhb-hybrid-master/tests/mailer/__init__.py": {},
    "dvhb-hybrid-master/tests/users/conftest.py": {
        "make_request": {
            "name": "make_request",
            "location": 13,
            "return": [
                "Dict[str, Any]",
                "django.http.HttpRequest",
                "dict",
                "List[Dict]",
                "bool"
            ],
            "arguments": {
                "app": [
                    "Exception"
                ],
                "test_client": [
                    "Exception"
                ]
            }
        },
        "create_user_request": {
            "name": "create_user_request",
            "location": 53,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "make_request": [
                    "Dict",
                    "List[str]",
                    "str",
                    "Dict[str,Union[str,int]]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "login_request": {
            "name": "login_request",
            "location": 61,
            "return": [
                "Dict[str, Any]",
                "django.http.HttpRequest",
                "dict",
                "List[Dict]",
                "bool"
            ],
            "arguments": {
                "make_request": [
                    "List[str]",
                    "Dict[str,Union[str,int]]",
                    "str",
                    "Tuple[bytes]",
                    "List"
                ]
            }
        },
        "logout_request": {
            "name": "logout_request",
            "location": 69,
            "return": [
                "Dict[str, Any]",
                "django.http.HttpRequest",
                "dict",
                "List[Dict]",
                "bool"
            ],
            "arguments": {
                "make_request": [
                    "List[str]",
                    "Dict[str,Union[str,int]]",
                    "str",
                    "Tuple[bytes]",
                    "List"
                ]
            }
        },
        "get_activation_code": {
            "name": "get_activation_code",
            "location": 76,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str, Any]",
                "types.ModuleType"
            ],
            "arguments": {
                "app": [
                    "int"
                ]
            }
        },
        "user": {
            "name": "user",
            "location": 85,
            "return": [
                "Dict[Text,Text]",
                "Mapping[str,Any]",
                "str",
                "Dict",
                "Dict[str,Any]",
                "apistar.types.WSGIEnviron"
            ],
            "arguments": {}
        },
        "new_user_data": {
            "name": "new_user_data",
            "location": 93,
            "return": [
                "Dict[Text,str]",
                "str",
                "IO[str]",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "create_new_user": {
            "name": "create_new_user",
            "location": 102,
            "return": [
                "Callable",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "app": [
                    "str",
                    "Dict",
                    "Tuple",
                    "List[SqlFile]",
                    "List[str]",
                    "Dict[str,Any]"
                ],
                "new_user_data": [
                    "str",
                    "Dict",
                    "Tuple",
                    "List[SqlFile]",
                    "List[str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "get_user": {
            "name": "get_user",
            "location": 113,
            "return": [
                "str",
                "Callable",
                "List[List[int]]"
            ],
            "arguments": {
                "app": []
            }
        },
        "get_profile_request": {
            "name": "get_profile_request",
            "location": 124,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "make_request": [
                    "Dict",
                    "Dict[str,Union[str,int]]",
                    "str",
                    "int"
                ]
            }
        }
    },
    "dvhb-hybrid-master/tests/users/test_activate.py": {
        "activate_code_request": {
            "name": "activate_code_request",
            "location": 5,
            "return": [
                "str",
                "float",
                "bytes",
                "int"
            ],
            "arguments": {
                "make_request": [
                    "List[str]",
                    "int",
                    "List"
                ]
            }
        }
    },
    "dvhb-hybrid-master/tests/users/test_change_email.py": {
        "send_email_change_request": {
            "name": "send_email_change_request",
            "location": 5,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "make_request": [
                    "Dict",
                    "str",
                    "int",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ]
            }
        },
        "approve_email_change_request": {
            "name": "approve_email_change_request",
            "location": 17,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "make_request": [
                    "Dict",
                    "str",
                    "int",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ]
            }
        },
        "get_email_change_requests": {
            "name": "get_email_change_requests",
            "location": 28,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "app": [
                    "Exception",
                    "bool"
                ]
            }
        }
    },
    "dvhb-hybrid-master/tests/users/test_change_password.py": {
        "change_password_request": {
            "name": "change_password_request",
            "location": 5,
            "return": [
                "bool",
                "Dict[str, Any]",
                "float"
            ],
            "arguments": {
                "make_request": [
                    "str"
                ]
            }
        }
    },
    "dvhb-hybrid-master/tests/users/test_create_user.py": {},
    "dvhb-hybrid-master/tests/users/test_delete.py": {
        "user_deletion_request": {
            "name": "user_deletion_request",
            "location": 5,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "make_request": [
                    "bool"
                ]
            }
        },
        "confirm_deletion_request": {
            "name": "confirm_deletion_request",
            "location": 13,
            "return": [
                "bytes",
                "float",
                "Sequence[float]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "make_request": [
                    "List[str]",
                    "Dict[str,Union[str,int]]",
                    "List",
                    "Tuple[bytes]",
                    "Optional[str]",
                    "str",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "cancel_deletion_request": {
            "name": "cancel_deletion_request",
            "location": 24,
            "return": [
                "bytes",
                "float",
                "Sequence[float]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "make_request": [
                    "List[str]",
                    "Dict[str,Union[str,int]]",
                    "List",
                    "Tuple[bytes]",
                    "Optional[str]",
                    "str",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "get_deletion_request": {
            "name": "get_deletion_request",
            "location": 35,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "app": [
                    "int"
                ]
            }
        }
    },
    "dvhb-hybrid-master/tests/users/test_login.py": {},
    "dvhb-hybrid-master/tests/users/test_logout.py": {},
    "dvhb-hybrid-master/tests/users/test_profile.py": {
        "patch_profile_request": {
            "name": "patch_profile_request",
            "location": 5,
            "return": [
                "bytes",
                "float",
                "Sequence[float]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "make_request": [
                    "List[str]",
                    "Dict[str,Union[str,int]]",
                    "List",
                    "Tuple[bytes]",
                    "Optional[str]",
                    "str",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        }
    },
    "dvhb-hybrid-master/tests/users/test_profile_image.py": {
        "generate_image": {
            "name": "generate_image",
            "location": 8,
            "return": [
                "_types.Image",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "post_image_request": {
            "name": "post_image_request",
            "location": 20,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "make_request": [
                    "int",
                    "bool"
                ],
                "generate_image": [
                    "int",
                    "bool"
                ]
            }
        },
        "delete_image_request": {
            "name": "delete_image_request",
            "location": 32,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "make_request": [
                    "Dict",
                    "str",
                    "Dict[str,Union[str,int]]",
                    "int"
                ]
            }
        },
        "generate_image.wrapper": {
            "name": "wrapper",
            "location": 9,
            "return": [
                "BytesIO"
            ],
            "arguments": {
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ],
                "format": [
                    "typing.Text"
                ],
                "filename": [
                    "typing.Text"
                ],
                "color": [
                    "tuple[int]"
                ]
            }
        }
    },
    "dvhb-hybrid-master/tests/users/__init__.py": {},
    "dvhb-hybrid-master/tests/users/test_oauth/conftest.py": {
        "uuid": {
            "name": "uuid",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "oauth_redirect_request": {
            "name": "oauth_redirect_request",
            "location": 13,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "app": [
                    "Dict",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ],
                "make_request": [
                    "Dict",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ]
            }
        },
        "oauth_callback_request": {
            "name": "oauth_callback_request",
            "location": 23,
            "return": [
                "bytes",
                "float",
                "Sequence[float]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "app": [
                    "bool",
                    "Sequence[str]",
                    "List[str]",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "make_request": [
                    "bool",
                    "Sequence[str]",
                    "List[str]",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "config": {
            "name": "config",
            "location": 33,
            "return": [
                "Dict[Text,dict[Text,dict[Text,Text]]]",
                "str",
                "Optional[dict]",
                "Dict",
                "bool"
            ],
            "arguments": {
                "config": [
                    "Optional[List[str]]",
                    "type",
                    "str"
                ]
            }
        },
        "get_email": {
            "name": "get_email",
            "location": 110,
            "return": [
                "Dict[str,Any]",
                "bool",
                "bytes",
                "Dict",
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "profile_data": [
                    "List[dict[str,Any]]",
                    "List[bytes]",
                    "bool",
                    "List[dict]",
                    "List[Dict[str,Any]]",
                    "Optional[List[Dict]]",
                    "Dict"
                ]
            }
        },
        "set_email": {
            "name": "set_email",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "profile_data": [
                    "str",
                    "bool"
                ],
                "email": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "dvhb-hybrid-master/tests/users/test_oauth/test_callback.py": {
        "execute_callback": {
            "name": "execute_callback",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "oauth_callback_request": [
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ]
            }
        }
    },
    "dvhb-hybrid-master/tests/users/test_oauth/test_redirect.py": {},
    "dvhb-hybrid-master/tests/users/test_oauth/__init__.py": {}
}
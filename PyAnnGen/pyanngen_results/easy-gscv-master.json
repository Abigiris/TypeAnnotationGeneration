{
    "easy-gscv-master/setup.py": {},
    "easy-gscv-master/easy_gscv/models.py": {
        "GSCV.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "clf": [
                    "float",
                    "tuple",
                    "str"
                ],
                "X": [
                    "float",
                    "int",
                    "str"
                ],
                "y": [
                    "float",
                    "int",
                    "str"
                ],
                "cross_vals": [
                    "int",
                    "bool",
                    "float",
                    "Dict",
                    "str"
                ],
                "random_state": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ],
                "test_size": [
                    "float",
                    "int",
                    "str"
                ],
                "n_jobs": [
                    "int",
                    "bool",
                    "float",
                    "Dict",
                    "str"
                ],
                "params": [
                    "None",
                    "Optional[str]",
                    "float",
                    "Sequence[str]",
                    "Optional[bool]"
                ]
            }
        },
        "GSCV._get_model_name": {
            "name": "_get_model_name",
            "location": 97,
            "return": [
                "str"
            ],
            "arguments": {
                "clf": [
                    "str",
                    "Union[str, 'Path']"
                ],
                "target": [
                    "Text",
                    "Dict[str,Any]",
                    "str",
                    "int"
                ]
            }
        },
        "GSCV._get_model": {
            "name": "_get_model",
            "location": 112,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "clf": [
                    "Dict[str, Any]",
                    "str",
                    "Type[Any]"
                ]
            }
        },
        "GSCV._get_model_params": {
            "name": "_get_model_params",
            "location": 145,
            "return": [
                "Union[(Dict[(str, List[Optional[Union[(float, int, str)]]])], List[Dict[(str, List[Union[(float, int, str)]])]])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GSCV.classifiers": {
            "name": "classifiers",
            "location": 213,
            "return": [
                "List",
                "List[str]",
                "int",
                "str",
                "Set[str]",
                "Dict[str,str]",
                "List[Dict[str,Any]]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GSCV.create": {
            "name": "create",
            "location": 217,
            "return": [
                "str",
                "GridSearchCV"
            ],
            "arguments": {
                "self": []
            }
        },
        "GSCV.score": {
            "name": "score",
            "location": 228,
            "return": [
                "float",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "GSCV.get_best_estimator": {
            "name": "get_best_estimator",
            "location": 235,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GSCV.get_fit_details": {
            "name": "get_fit_details",
            "location": 241,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "easy-gscv-master/easy_gscv/__init__.py": {},
    "easy-gscv-master/test/test_gscv.py": {
        "TestProperties.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProperties.test_classifiers": {
            "name": "test_classifiers",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCLFTypes.setUp": {
            "name": "setUp",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCLFTypes.test_sklearn_classifier": {
            "name": "test_sklearn_classifier",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCLFTypes.test_string": {
            "name": "test_string",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExceptions.setUp": {
            "name": "setUp",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExceptions.test_check_model_not_a_model": {
            "name": "test_check_model_not_a_model",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExceptions.test_check_model_not_a_sklearn_model": {
            "name": "test_check_model_not_a_sklearn_model",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExceptions.test_check_wrong_scikit_model": {
            "name": "test_check_wrong_scikit_model",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKNeighborsClassifier.setUp": {
            "name": "setUp",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKNeighborsClassifier.test_default_params": {
            "name": "test_default_params",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKNeighborsClassifier.test_custom_params": {
            "name": "test_custom_params",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKNeighborsClassifier.test_create": {
            "name": "test_create",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKNeighborsClassifier.test_score": {
            "name": "test_score",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKNeighborsClassifier.test_get_best_estimator": {
            "name": "test_get_best_estimator",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKNeighborsClassifier.test_get_fit_details": {
            "name": "test_get_fit_details",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogisticRegression.setUp": {
            "name": "setUp",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogisticRegression.test_default_params": {
            "name": "test_default_params",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogisticRegression.test_custom_params": {
            "name": "test_custom_params",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogisticRegression.test_create": {
            "name": "test_create",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogisticRegression.test_score": {
            "name": "test_score",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogisticRegression.test_get_best_estimator": {
            "name": "test_get_best_estimator",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogisticRegression.test_get_fit_details": {
            "name": "test_get_fit_details",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMLPClassifier.setUp": {
            "name": "setUp",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMLPClassifier.test_default_params": {
            "name": "test_default_params",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMLPClassifier.test_custom_params": {
            "name": "test_custom_params",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMLPClassifier.test_create": {
            "name": "test_create",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMLPClassifier.test_score": {
            "name": "test_score",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMLPClassifier.test_get_best_estimator": {
            "name": "test_get_best_estimator",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMLPClassifier.test_get_fit_details": {
            "name": "test_get_fit_details",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRandomForestClassifier.setUp": {
            "name": "setUp",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRandomForestClassifier.test_custom_params": {
            "name": "test_custom_params",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRandomForestClassifier.test_create": {
            "name": "test_create",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRandomForestClassifier.test_score": {
            "name": "test_score",
            "location": 402,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRandomForestClassifier.test_get_best_estimator": {
            "name": "test_get_best_estimator",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRandomForestClassifier.test_get_fit_details": {
            "name": "test_get_fit_details",
            "location": 427,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGradientBoostingClassifier.setUp": {
            "name": "setUp",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGradientBoostingClassifier.test_custom_params": {
            "name": "test_custom_params",
            "location": 464,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGradientBoostingClassifier.test_create": {
            "name": "test_create",
            "location": 481,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGradientBoostingClassifier.test_score": {
            "name": "test_score",
            "location": 492,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGradientBoostingClassifier.test_get_best_estimator": {
            "name": "test_get_best_estimator",
            "location": 504,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGradientBoostingClassifier.test_get_fit_details": {
            "name": "test_get_fit_details",
            "location": 515,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSVMClassifier.setUp": {
            "name": "setUp",
            "location": 532,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSVMClassifier.test_default_params": {
            "name": "test_default_params",
            "location": 540,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSVMClassifier.test_custom_params": {
            "name": "test_custom_params",
            "location": 559,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSVMClassifier.test_create": {
            "name": "test_create",
            "location": 579,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSVMClassifier.test_score": {
            "name": "test_score",
            "location": 585,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSVMClassifier.test_get_best_estimator": {
            "name": "test_get_best_estimator",
            "location": 592,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSVMClassifier.test_get_fit_details": {
            "name": "test_get_fit_details",
            "location": 598,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExceptions.setUp.Nothing.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "easy-gscv-master/test/__init__.py": {}
}
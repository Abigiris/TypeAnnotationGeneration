{
    "ebl-api-master/ebl/app.py": {
        "decode_certificate": {
            "name": "decode_certificate",
            "location": 51,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "encoded_certificate": [
                    "IO",
                    "bytes",
                    "Optional[str]",
                    "int",
                    "float",
                    "List[str]"
                ]
            }
        },
        "set_sentry_user": {
            "name": "set_sentry_user",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "id_": [
                    "str"
                ]
            }
        },
        "create_context": {
            "name": "create_context",
            "location": 61,
            "return": [
                "ebl.context.Context"
            ],
            "arguments": {}
        },
        "create_api": {
            "name": "create_api",
            "location": 92,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "context": [
                    "ebl.context.Context"
                ]
            }
        },
        "create_app": {
            "name": "create_app",
            "location": 101,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "context": [
                    "ebl.context.Context"
                ],
                "issuer": [
                    "str"
                ],
                "audience": [
                    "str"
                ]
            }
        },
        "get_app": {
            "name": "get_app",
            "location": 116,
            "return": [
                "str",
                "Optional[Dict]",
                "Iterable[str]"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/cache.py": {
        "load_config": {
            "name": "load_config",
            "location": 14,
            "return": [
                "dict"
            ],
            "arguments": {}
        },
        "create_cache": {
            "name": "create_cache",
            "location": 18,
            "return": [
                "Cache",
                "bool",
                "str",
                "dict",
                "Mapping[str, Any]"
            ],
            "arguments": {}
        },
        "cache_control": {
            "name": "cache_control",
            "location": 22,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "directives": [
                    "Sequence[str]"
                ],
                "when": [
                    "Callable[([Any, Any], bool)]"
                ]
            }
        },
        "cache_control.add_header": {
            "name": "add_header",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "req": [
                    "str",
                    "int"
                ],
                "resp": [
                    "str",
                    "Optional[Dict]",
                    "Optional[str]",
                    "Optional"
                ],
                "_resource": [
                    "falcon.Request",
                    "bool"
                ]
            }
        }
    },
    "ebl-api-master/ebl/changelog.py": {
        "create_entry": {
            "name": "create_entry",
            "location": 8,
            "return": [
                "dict"
            ],
            "arguments": {
                "user_profile": [
                    "dict"
                ],
                "resource_type": [
                    "dict",
                    "int",
                    "Optional[Dict]",
                    "str"
                ],
                "resource_id": [
                    "dict",
                    "int",
                    "Optional[Dict]",
                    "str"
                ],
                "diff": [
                    "dict",
                    "int",
                    "Optional[Dict]",
                    "str"
                ]
            }
        },
        "Changelog.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Changelog.create": {
            "name": "create",
            "location": 24,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "resource_type": [
                    "str",
                    "Optional[str]"
                ],
                "user_profile": [
                    "str",
                    "Optional[str]"
                ],
                "old": [
                    "str",
                    "Optional[str]"
                ],
                "new": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/context.py": {
        "Context.get_bibliography": {
            "name": "get_bibliography",
            "location": 48,
            "return": [
                "ebl.bibliography.application.bibliography.Bibliography"
            ],
            "arguments": {
                "self": []
            }
        },
        "Context.get_fragment_updater": {
            "name": "get_fragment_updater",
            "location": 51,
            "return": [
                "ebl.fragmentarium.application.fragment_updater.FragmentUpdater"
            ],
            "arguments": {
                "self": []
            }
        },
        "Context.get_transliteration_update_factory": {
            "name": "get_transliteration_update_factory",
            "location": 60,
            "return": [
                "ebl.fragmentarium.application.transliteration_update_factory.TransliterationUpdateFactory"
            ],
            "arguments": {
                "self": []
            }
        },
        "Context.get_transliteration_query_factory": {
            "name": "get_transliteration_query_factory",
            "location": 63,
            "return": [
                "ebl.transliteration.application.transliteration_query_factory.TransliterationQueryFactory"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ebl-api-master/ebl/dispatcher.py": {
        "get_parameter_names": {
            "name": "get_parameter_names",
            "location": 13,
            "return": [
                "FrozenSet[str]"
            ],
            "arguments": {
                "parameters": [
                    "Mapping[(str, str)]"
                ]
            }
        },
        "create_dispatcher": {
            "name": "create_dispatcher",
            "location": 17,
            "return": [
                "Callable[([Mapping[(str, str)]], T)]"
            ],
            "arguments": {
                "commands": [
                    "Mapping[(FrozenSet[str], Callable[([Mapping[(str, str)]], T)])]"
                ]
            }
        },
        "create_dispatcher.get_command": {
            "name": "get_command",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "parameter_names": [
                    "str"
                ]
            }
        },
        "create_dispatcher.dispatch": {
            "name": "dispatch",
            "location": 24,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "parameters": [
                    "List[str]",
                    "type",
                    "str",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        }
    },
    "ebl-api-master/ebl/ebl_ai_client.py": {
        "BoundingBoxPredictionSchema.make_line_number": {
            "name": "make_line_number",
            "location": 25,
            "return": [
                "BoundingBoxPrediction",
                "str",
                "List[str]",
                "Union[str, Callable]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "EblAiClient.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_url": [
                    "str"
                ]
            }
        },
        "EblAiClient._request_generate_annotations": {
            "name": "_request_generate_annotations",
            "location": 42,
            "return": [
                "List[ebl.fragmentarium.domain.annotation.BoundingBoxPrediction]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        },
        "EblAiClient.generate_annotations": {
            "name": "generate_annotations",
            "location": 53,
            "return": [
                "ebl.fragmentarium.domain.annotation.Annotations"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "ebl.transliteration.domain.museum_number.MuseumNumber"
                ],
                "fragment_image": [
                    "ebl.files.application.file_repository.File"
                ],
                "threshold": [
                    "float"
                ]
            }
        }
    },
    "ebl-api-master/ebl/errors.py": {},
    "ebl-api-master/ebl/error_handler.py": {
        "http_error": {
            "name": "http_error",
            "location": 11,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "_req": [
                    "str",
                    "bool"
                ],
                "_resp": [
                    "str",
                    "bool"
                ],
                "ex": [
                    "str",
                    "bool"
                ],
                "_params": [
                    "str",
                    "bool"
                ]
            }
        },
        "unexpected_error": {
            "name": "unexpected_error",
            "location": 15,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "_req": [
                    "str",
                    "bool"
                ],
                "_resp": [
                    "str",
                    "bool"
                ],
                "_ex": [
                    "str",
                    "bool"
                ],
                "_params": [
                    "str",
                    "bool"
                ]
            }
        },
        "unprocessable_entity": {
            "name": "unprocessable_entity",
            "location": 20,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "_req": [
                    "falcon.Request",
                    "str",
                    "bool"
                ],
                "_resp": [
                    "falcon.Request",
                    "str",
                    "bool"
                ],
                "ex": [
                    "IO",
                    "int",
                    "str",
                    "Tuple[str, dict]"
                ],
                "_params": [
                    "falcon.Request",
                    "str",
                    "bool"
                ]
            }
        },
        "not_found_error": {
            "name": "not_found_error",
            "location": 24,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "_req": [
                    "str",
                    "Sequence[T]"
                ],
                "_resp": [
                    "str",
                    "Sequence[T]"
                ],
                "ex": [
                    "bytes",
                    "dict",
                    "Tuple[int, int, str]",
                    "int"
                ],
                "_params": [
                    "str",
                    "Sequence[T]"
                ]
            }
        },
        "duplicate_error": {
            "name": "duplicate_error",
            "location": 28,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "_req": [
                    "str",
                    "bool"
                ],
                "_resp": [
                    "str",
                    "bool"
                ],
                "ex": [
                    "str",
                    "List[int]",
                    "int",
                    "Dict[str, Dict[str, str]]",
                    "bytes",
                    "callable"
                ],
                "_params": [
                    "str",
                    "bool"
                ]
            }
        },
        "set_up": {
            "name": "set_up",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/marshmallowschema.py": {
        "validate": {
            "name": "validate",
            "location": 8,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "req_schema": [
                    "Optional[marshmallow.Schema]",
                    "list",
                    "Callable",
                    "Sequence[str]"
                ],
                "resp_schema": [
                    "Optional[marshmallow.Schema]",
                    "list",
                    "Callable",
                    "Sequence[str]"
                ]
            }
        },
        "validate.decorator": {
            "name": "decorator",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "validate.decorator.wrapper": {
            "name": "wrapper",
            "location": 11,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "dict",
                    "bool"
                ],
                "resp": [
                    "bool",
                    "Callable",
                    "dict"
                ]
            }
        }
    },
    "ebl-api-master/ebl/merger.py": {
        "take_new": {
            "name": "take_new",
            "location": 69,
            "return": [
                "T"
            ],
            "arguments": {
                "_": [
                    "T"
                ],
                "new": [
                    "T"
                ]
            }
        },
        "Merge.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "old": [
                    "Sequence[T]"
                ],
                "new": [
                    "Sequence[T]"
                ]
            }
        },
        "Merge.current_new": {
            "name": "current_new",
            "location": 29,
            "return": [
                "Iterable[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Merge.result": {
            "name": "result",
            "location": 33,
            "return": [
                "list",
                "str",
                "List[str]",
                "List[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Merge.pop_edited": {
            "name": "pop_edited",
            "location": 36,
            "return": [
                "Optional[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Merge._advance_new": {
            "name": "_advance_new",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Merge._advance_old": {
            "name": "_advance_old",
            "location": 45,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "is_edited": [
                    "bool"
                ]
            }
        },
        "Merge._append": {
            "name": "_append",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "T"
                ]
            }
        },
        "Merge.delete": {
            "name": "delete",
            "location": 54,
            "return": [
                "Merge"
            ],
            "arguments": {
                "self": []
            }
        },
        "Merge.keep": {
            "name": "keep",
            "location": 58,
            "return": [
                "Merge"
            ],
            "arguments": {
                "self": []
            }
        },
        "Merge.add": {
            "name": "add",
            "location": 63,
            "return": [
                "Merge"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "T"
                ]
            }
        },
        "Merger.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "map_": [
                    "Callable[([T], str)]"
                ],
                "inner_merge": [
                    "Optional[Callable[([T, T], T)]]"
                ]
            }
        },
        "Merger._add_entry": {
            "name": "_add_entry",
            "location": 86,
            "return": [
                "Merge[T]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Merge[T]"
                ]
            }
        },
        "Merger._inner_merge": {
            "name": "_inner_merge",
            "location": 90,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "old": [
                    "Optional[T]"
                ],
                "new": [
                    "T"
                ]
            }
        },
        "Merger._diff": {
            "name": "_diff",
            "location": 93,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "self": [],
                "old": [
                    "Sequence[T]"
                ],
                "new": [
                    "Sequence[T]"
                ]
            }
        },
        "Merger.merge": {
            "name": "merge",
            "location": 98,
            "return": [
                "List[T]"
            ],
            "arguments": {
                "self": [],
                "old": [
                    "Sequence[T]"
                ],
                "new": [
                    "Sequence[T]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/mongo_collection.py": {
        "singlar": {
            "name": "singlar",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "noun": [
                    "str"
                ]
            }
        },
        "MongoCollection.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "int",
                    "bool",
                    "float"
                ],
                "collection": [
                    "str"
                ]
            }
        },
        "MongoCollection.insert_many": {
            "name": "insert_many",
            "location": 22,
            "return": [
                "Optional[int]",
                "dict",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "documents": [
                    "Sequence[dict]"
                ]
            }
        },
        "MongoCollection.insert_one": {
            "name": "insert_one",
            "location": 25,
            "return": [
                "Optional[int]",
                "dict",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "MongoCollection.find_one_by_id": {
            "name": "find_one_by_id",
            "location": 33,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "int",
                    "List[int]",
                    "str",
                    "bool"
                ]
            }
        },
        "MongoCollection.find_one": {
            "name": "find_one",
            "location": 36,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str"
                ]
            }
        },
        "MongoCollection.find_many": {
            "name": "find_many",
            "location": 44,
            "return": [
                "bool",
                "Optional[str]",
                "recidiviz.persistence.database.database_entity.DatabaseEntity"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "MongoCollection.aggregate": {
            "name": "aggregate",
            "location": 47,
            "return": [
                "str",
                "int",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]",
                "Type[BaseException]"
            ],
            "arguments": {
                "self": [],
                "pipeline": [
                    "Iterable",
                    "str",
                    "dict",
                    "bytes",
                    "Optional[Tuple[str, ...]]",
                    "Mapping[str, str]"
                ]
            }
        },
        "MongoCollection.replace_one": {
            "name": "replace_one",
            "location": 50,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "str",
                    "metaswitch_tinder.database.User",
                    "Tuple[type]",
                    "Dict[str, Any]",
                    "list"
                ],
                "filter_": [
                    "None",
                    "Optional[str]",
                    "Sequence[str]",
                    "str",
                    "List[str]"
                ],
                "upsert": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "list",
                    "Optional[List[str]]"
                ]
            }
        },
        "MongoCollection.update_one": {
            "name": "update_one",
            "location": 59,
            "return": [
                "Union[int, float, complex]",
                "list",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Optional[Dict]",
                    "Optional[str]",
                    "Optional",
                    "Dict[str, str]",
                    "str"
                ],
                "update": [
                    "alerta.database.base.Query"
                ]
            }
        },
        "MongoCollection.count_documents": {
            "name": "count_documents",
            "location": 66,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Optional[int]",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "MongoCollection.create_index": {
            "name": "create_index",
            "location": 69,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "dict",
                    "ebl.transliteration.domain.language.Language",
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "MongoCollection.__not_found_error": {
            "name": "__not_found_error",
            "location": 72,
            "return": [
                "NotFoundError",
                "bool",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Callable",
                    "List[str]",
                    "Union[List[str], str]"
                ]
            }
        },
        "MongoCollection.__get_collection": {
            "name": "__get_collection",
            "location": 75,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ebl-api-master/ebl/schemas.py": {
        "EnumField.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "enum_class": [
                    "Type[enum.Enum]"
                ]
            }
        },
        "EnumField._serialize": {
            "name": "_serialize",
            "location": 18,
            "return": [
                "None",
                "int",
                "str",
                "float",
                "bool",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[object]",
                    "float",
                    "Optional[Union[int, float]]",
                    "Optional[str]"
                ],
                "attr": [
                    "str"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "EnumField._deserialize": {
            "name": "_deserialize",
            "location": 24,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict",
                    "bool",
                    "Dict[str, Any]",
                    "eth.abc.DatabaseAPI",
                    "Union[str, bytes]"
                ],
                "attr": [
                    "dict",
                    "str"
                ],
                "data": [
                    "dict",
                    "str"
                ]
            }
        },
        "EnumField._serialize_enum": {
            "name": "_serialize_enum",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "enum.Enum"
                ]
            }
        },
        "EnumField._deserialize_enum": {
            "name": "_deserialize_enum",
            "location": 35,
            "return": [
                "enum.Enum"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "ValueEnum._serialize_enum": {
            "name": "_serialize_enum",
            "location": 40,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "enum.Enum"
                ]
            }
        },
        "ValueEnum._deserialize_enum": {
            "name": "_deserialize_enum",
            "location": 43,
            "return": [
                "enum.Enum"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "NameEnum._serialize_enum": {
            "name": "_serialize_enum",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "enum.Enum"
                ]
            }
        },
        "NameEnum._deserialize_enum": {
            "name": "_deserialize_enum",
            "location": 51,
            "return": [
                "enum.Enum"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/__init__.py": {},
    "ebl-api-master/ebl/alignment/align_fragmentarium.py": {
        "has_clear_signs": {
            "name": "has_clear_signs",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "signs": [
                    "str"
                ]
            }
        },
        "align_fragment_and_chapter": {
            "name": "align_fragment_and_chapter",
            "location": 28,
            "return": [
                "List[ebl.alignment.domain.result.AlignmentResult]"
            ],
            "arguments": {
                "fragment": [
                    "ebl.fragmentarium.domain.fragment.Fragment"
                ],
                "chapter": [
                    "ebl.corpus.domain.chapter.Chapter"
                ]
            }
        },
        "to_dict": {
            "name": "to_dict",
            "location": 48,
            "return": [
                "dict"
            ],
            "arguments": {
                "fragment": [
                    "ebl.fragmentarium.domain.fragment.Fragment"
                ],
                "text": [
                    "ebl.corpus.domain.text.Text"
                ],
                "chapter": [
                    "ebl.corpus.domain.chapter.Chapter"
                ],
                "result": [
                    "ebl.alignment.domain.result.AlignmentResult"
                ]
            }
        },
        "align_fragment": {
            "name": "align_fragment",
            "location": 70,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "number": [
                    "ebl.transliteration.domain.museum_number.MuseumNumber"
                ],
                "chapters": [
                    "Iterable[Tuple[(ebl.corpus.domain.text.Text, ebl.corpus.domain.chapter.Chapter)]]"
                ],
                "max_lines": [
                    "int"
                ],
                "min_score": [
                    "int"
                ]
            }
        },
        "load_chapters": {
            "name": "load_chapters",
            "location": 92,
            "return": [
                "List[Tuple[(ebl.corpus.domain.text.Text, ebl.corpus.domain.chapter.Chapter)]]"
            ],
            "arguments": {
                "context": [
                    "ebl.context.Context"
                ]
            }
        },
        "parse_arguments": {
            "name": "parse_arguments",
            "location": 105,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/alignment/__init__.py": {},
    "ebl-api-master/ebl/alignment/application/align.py": {
        "align_pair": {
            "name": "align_pair",
            "location": 11,
            "return": [
                "ebl.alignment.domain.result.AlignmentResult"
            ],
            "arguments": {
                "first": [
                    "ebl.alignment.domain.sequence.NamedSequence"
                ],
                "second": [
                    "ebl.alignment.domain.sequence.NamedSequence"
                ],
                "vocabulary": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "align": {
            "name": "align",
            "location": 27,
            "return": [
                "List[ebl.alignment.domain.result.AlignmentResult]"
            ],
            "arguments": {
                "pairs": [
                    "List[Tuple[(ebl.alignment.domain.sequence.NamedSequence, ebl.alignment.domain.sequence.NamedSequence)]]"
                ],
                "vocabulary": [
                    "str",
                    "Optional[Iterable[T]]",
                    "bool"
                ]
            }
        }
    },
    "ebl-api-master/ebl/alignment/application/__init__.py": {},
    "ebl-api-master/ebl/alignment/domain/result.py": {},
    "ebl-api-master/ebl/alignment/domain/scoring.py": {
        "is_curated": {
            "name": "is_curated",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "first_sign": [
                    "str"
                ],
                "second_sign": [
                    "str"
                ]
            }
        },
        "is_variant": {
            "name": "is_variant",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "first_decoded": [
                    "str"
                ],
                "second_decoded": [
                    "str"
                ]
            }
        },
        "EblScoring.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocabulary": [
                    "str",
                    "bool"
                ]
            }
        },
        "EblScoring.__call__": {
            "name": "__call__",
            "location": 71,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "firstElement": [
                    "str",
                    "Optional[str]",
                    "Callable[[dict], None]"
                ],
                "secondElement": [
                    "str",
                    "Optional[str]",
                    "Callable[[dict], None]"
                ]
            }
        },
        "EblScoring.gapStart": {
            "name": "gapStart",
            "location": 78,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "str",
                    "Sequence[T]",
                    "tuple",
                    "List[int]"
                ]
            }
        },
        "EblScoring.gapExtension": {
            "name": "gapExtension",
            "location": 81,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "int",
                    "str",
                    "bool",
                    "List[str]",
                    "Type"
                ]
            }
        },
        "EblScoring._get_scores": {
            "name": "_get_scores",
            "location": 84,
            "return": [
                "Generator[(Tuple[(bool, Callable[([], int)])], None, None)]"
            ],
            "arguments": {
                "self": [],
                "firstElement": [
                    "str",
                    "bool"
                ],
                "secondElement": [
                    "str",
                    "bool"
                ]
            }
        },
        "EblScoring._is_break": {
            "name": "_is_break",
            "location": 105,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "first_element": [
                    "float",
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "second_element": [
                    "float",
                    "str",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "EblScoring._is_x": {
            "name": "_is_x",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "first_element": [
                    "float",
                    "List[int]",
                    "str",
                    "bytes"
                ],
                "second_element": [
                    "float",
                    "List[int]",
                    "str",
                    "bytes"
                ]
            }
        },
        "EblScoring._get_break_score": {
            "name": "_get_break_score",
            "location": 111,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "first_element": [
                    "List[Tuple[str, str]]",
                    "str",
                    "Dict[str, Any]"
                ],
                "second_element": [
                    "List[Tuple[str, str]]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "EblScoring._get_x_score": {
            "name": "_get_x_score",
            "location": 114,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "first_element": [
                    "Optional[str]",
                    "List[Tuple[str, str]]",
                    "str",
                    "List[str]",
                    "bool",
                    "int"
                ],
                "second_element": [
                    "Optional[str]",
                    "List[Tuple[str, str]]",
                    "str",
                    "List[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "EblScoring._get_variant_score": {
            "name": "_get_variant_score",
            "location": 117,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "first_decoded": [
                    "str"
                ],
                "second_decoded": [
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/alignment/domain/sequence.py": {
        "replace_line_breaks": {
            "name": "replace_line_breaks",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "collapse_spaces": {
            "name": "collapse_spaces",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "make_sequence": {
            "name": "make_sequence",
            "location": 23,
            "return": [
                "Sequence",
                "Callable",
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "NamedSequence.of_signs": {
            "name": "of_signs",
            "location": 37,
            "return": [
                "NamedSequence"
            ],
            "arguments": {
                "name": [
                    "str",
                    "dict"
                ],
                "signs": [
                    "str"
                ],
                "vocabulary": [
                    "str",
                    "dict"
                ]
            }
        },
        "NamedSequence.of_fragment": {
            "name": "of_fragment",
            "location": 41,
            "return": [
                "NamedSequence"
            ],
            "arguments": {
                "fragment": [
                    "ebl.fragmentarium.domain.fragment.Fragment"
                ],
                "vocabulary": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "ebl-api-master/ebl/alignment/domain/__init__.py": {},
    "ebl-api-master/ebl/atf_importer/__init__.py": {},
    "ebl-api-master/ebl/atf_importer/application/atf_importer.py": {
        "ATFImporter.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": []
            }
        },
        "ATFImporter.get_ebl_transliteration": {
            "name": "get_ebl_transliteration",
            "location": 105,
            "return": [
                "ebl.transliteration.domain.text.Text"
            ],
            "arguments": {
                "line": []
            }
        },
        "ATFImporter.get_ebl_lemmata": {
            "name": "get_ebl_lemmata",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "orrac_lemma_tupel": [],
                "all_unique_lemmas": []
            }
        },
        "ATFImporter.parse_glossary": {
            "name": "parse_glossary",
            "location": 253,
            "return": [
                "Tuple[(Dict[(str, str)], Dict[(str, list)], Dict[(str, Tuple[(str, Any)])])]"
            ],
            "arguments": {
                "path": []
            }
        },
        "ATFImporter.insert_translitertions": {
            "name": "insert_translitertions",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transliteration_factory": [
                    "ebl.fragmentarium.application.transliteration_update_factory.TransliterationUpdateFactory"
                ],
                "updater": [
                    "ebl.fragmentarium.application.fragment_updater.FragmentUpdater"
                ],
                "transliterations": [],
                "museum_number": []
            }
        },
        "ATFImporter.insert_lemmatization": {
            "name": "insert_lemmatization",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "updater": [
                    "ebl.fragmentarium.application.fragment_updater.FragmentUpdater"
                ],
                "lemmatization": [],
                "museum_number": []
            }
        },
        "ATFImporter.get_museum_number": {
            "name": "get_museum_number",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "control_lines": []
            }
        },
        "ATFImporter.get_cdli_number": {
            "name": "get_cdli_number",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "control_lines": []
            }
        },
        "ATFImporter.get_museum_number_by_cdli_number": {
            "name": "get_museum_number_by_cdli_number",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cdli_number": []
            }
        },
        "ATFImporter.convert_to_ebl_lines": {
            "name": "convert_to_ebl_lines",
            "location": 359,
            "return": [
                "Dict[(str, Union[(list, _T3)])]"
            ],
            "arguments": {
                "self": [],
                "converted_lines": [],
                "filename": [],
                "test": [
                    "bool"
                ],
                "test_lemmata": [
                    "_T3"
                ]
            }
        },
        "ATFImporter.insert_into_db": {
            "name": "insert_into_db",
            "location": 459,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ebl_lines": [],
                "filename": []
            }
        },
        "ATFImporter.start": {
            "name": "start",
            "location": 534,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ebl-api-master/ebl/atf_importer/application/__init__.py": {},
    "ebl-api-master/ebl/atf_importer/domain/atf_conversions.py": {
        "Convert_Line_Dividers.oracc_atf_text_line__divider": {
            "name": "oracc_atf_text_line__divider",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tree": []
            }
        },
        "Convert_Line_Joiner.oracc_atf_text_line__joiner": {
            "name": "oracc_atf_text_line__joiner",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tree": []
            }
        },
        "Convert_Legacy_Grammar_Signs.oracc_atf_text_line__logogram_name_part": {
            "name": "oracc_atf_text_line__logogram_name_part",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tree": []
            }
        },
        "Convert_Legacy_Grammar_Signs.oracc_atf_text_line__value_name_part": {
            "name": "oracc_atf_text_line__value_name_part",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tree": []
            }
        },
        "Strip_Signs.oracc_atf_text_line__uncertain_sign": {
            "name": "oracc_atf_text_line__uncertain_sign",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tree": []
            }
        },
        "DFS.visit_topdown": {
            "name": "visit_topdown",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "tree": [],
                "result": []
            }
        },
        "Line_Serializer.text_line": {
            "name": "text_line",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "tree": []
            }
        },
        "Line_Serializer.dollar_line": {
            "name": "dollar_line",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "tree": []
            }
        },
        "Line_Serializer.control_line": {
            "name": "control_line",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "tree": []
            }
        },
        "Get_Line_Number.oracc_atf_text_line__single_line_number": {
            "name": "oracc_atf_text_line__single_line_number",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "tree": []
            }
        },
        "Get_Words.oracc_atf_text_line__word": {
            "name": "oracc_atf_text_line__word",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tree": []
            }
        },
        "Get_Lemma_Values_and_Guidewords.oracc_atf_lem_line__lemma": {
            "name": "oracc_atf_lem_line__lemma",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tree": []
            }
        }
    },
    "ebl-api-master/ebl/atf_importer/domain/atf_preprocessor.py": {
        "ATFPreprocessor.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logdir": [],
                "style": []
            }
        },
        "ATFPreprocessor.do_oracc_replacements": {
            "name": "do_oracc_replacements",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "atf": []
            }
        },
        "ATFPreprocessor.normalize_numbers": {
            "name": "normalize_numbers",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "digits": []
            }
        },
        "ATFPreprocessor.replace_special_characters": {
            "name": "replace_special_characters",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "string": []
            }
        },
        "ATFPreprocessor.do_cdli_replacements": {
            "name": "do_cdli_replacements",
            "location": 109,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "self": [],
                "atf": [
                    "_T0"
                ]
            }
        },
        "ATFPreprocessor.do_c_atf_replacements": {
            "name": "do_c_atf_replacements",
            "location": 170,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "self": [],
                "atf": [
                    "_T0"
                ]
            }
        },
        "ATFPreprocessor.line_not_converted": {
            "name": "line_not_converted",
            "location": 224,
            "return": [
                "Tuple[(None, None, None, None)]"
            ],
            "arguments": {
                "self": [],
                "original_atf": [],
                "atf": []
            }
        },
        "ATFPreprocessor.check_original_line": {
            "name": "check_original_line",
            "location": 235,
            "return": [
                "Tuple[(Any, List[nothing], Any, List[nothing])]"
            ],
            "arguments": {
                "self": [],
                "atf": []
            }
        },
        "ATFPreprocessor.unused_line": {
            "name": "unused_line",
            "location": 258,
            "return": [
                "Optional[Tuple[(str, None, Any, None)]]"
            ],
            "arguments": {
                "self": [],
                "tree": []
            }
        },
        "ATFPreprocessor.get_empty_conversion": {
            "name": "get_empty_conversion",
            "location": 263,
            "return": [
                "Tuple[(str, None, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "tree": []
            }
        },
        "ATFPreprocessor.convert_line": {
            "name": "convert_line",
            "location": 269,
            "return": [],
            "arguments": {
                "self": [],
                "original_atf": [],
                "atf": []
            }
        },
        "ATFPreprocessor.convert_textline": {
            "name": "convert_textline",
            "location": 286,
            "return": [
                "Tuple[(str, List[nothing], List[nothing])]"
            ],
            "arguments": {
                "self": [],
                "tree": []
            }
        },
        "ATFPreprocessor.check_converted_line": {
            "name": "check_converted_line",
            "location": 306,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "original_atf": [],
                "tree": [],
                "conversion": []
            }
        },
        "ATFPreprocessor.convert_lemline": {
            "name": "convert_lemline",
            "location": 326,
            "return": [
                "Tuple[(_T0, List[nothing], Any, List[nothing])]"
            ],
            "arguments": {
                "self": [],
                "atf": [
                    "_T0"
                ],
                "tree": []
            }
        },
        "ATFPreprocessor.process_line": {
            "name": "process_line",
            "location": 350,
            "return": [],
            "arguments": {
                "self": [],
                "atf": []
            }
        },
        "ATFPreprocessor.write_unparsable_lines": {
            "name": "write_unparsable_lines",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "ATFPreprocessor.read_lines": {
            "name": "read_lines",
            "location": 383,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "ATFPreprocessor.convert_lines": {
            "name": "convert_lines",
            "location": 389,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "file": [],
                "filename": []
            }
        },
        "ATFPreprocessor.do_cdli_replacements.callback_upper": {
            "name": "callback_upper",
            "location": 150,
            "return": [],
            "arguments": {
                "pat": []
            }
        },
        "ATFPreprocessor.do_cdli_replacements.callback_lower": {
            "name": "callback_lower",
            "location": 155,
            "return": [],
            "arguments": {
                "pat": []
            }
        },
        "ATFPreprocessor.do_c_atf_replacements.callback_upper": {
            "name": "callback_upper",
            "location": 211,
            "return": [],
            "arguments": {
                "pat": []
            }
        }
    },
    "ebl-api-master/ebl/atf_importer/domain/atf_preprocessor_util.py": {
        "Util.print_frame": {
            "name": "print_frame",
            "location": 3,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "Union[str, bytes]",
                    "int"
                ]
            }
        }
    },
    "ebl-api-master/ebl/atf_importer/domain/__init__.py": {},
    "ebl-api-master/ebl/bibliography/__init__.py": {},
    "ebl-api-master/ebl/bibliography/application/bibliography.py": {
        "Bibliography.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repository": [
                    "ebl.bibliography.application.bibliography_repository.BibliographyRepository"
                ],
                "changelog": [
                    "ebl.changelog.Changelog"
                ]
            }
        },
        "Bibliography.create": {
            "name": "create",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "ebl.users.domain.user.User",
                    "homeassistanauth.models.User",
                    "bob_emploi.frontend.api.user_pb2.User",
                    "str"
                ],
                "user": [
                    "ebl.users.domain.user.User"
                ]
            }
        },
        "Bibliography.find": {
            "name": "find",
            "location": 27,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "str"
                ]
            }
        },
        "Bibliography.update": {
            "name": "update",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "Dict[str, Any]",
                    "float",
                    "str"
                ],
                "user": [
                    "ebl.users.domain.user.User"
                ]
            }
        },
        "Bibliography.search": {
            "name": "search",
            "location": 40,
            "return": [
                "Sequence[dict]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str"
                ]
            }
        },
        "Bibliography._parse_author_year_and_title": {
            "name": "_parse_author_year_and_title",
            "location": 60,
            "return": [
                "dict"
            ],
            "arguments": {
                "query": [
                    "str"
                ]
            }
        },
        "Bibliography._parse_container_title_short_and_collection_number": {
            "name": "_parse_container_title_short_and_collection_number",
            "location": 70,
            "return": [
                "dict"
            ],
            "arguments": {
                "query": [
                    "str"
                ]
            }
        },
        "Bibliography.search_author_year_and_title": {
            "name": "search_author_year_and_title",
            "location": 78,
            "return": [
                "Sequence[dict]"
            ],
            "arguments": {
                "self": [],
                "author": [
                    "Optional[str]"
                ],
                "year": [
                    "Optional[int]"
                ],
                "title": [
                    "Optional[str]"
                ]
            }
        },
        "Bibliography.search_container_title_and_collection_number": {
            "name": "search_container_title_and_collection_number",
            "location": 87,
            "return": [
                "Sequence[dict]"
            ],
            "arguments": {
                "self": [],
                "container_title": [
                    "Optional[str]"
                ],
                "collection_number": [
                    "Optional[str]"
                ]
            }
        },
        "Bibliography.validate_references": {
            "name": "validate_references",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "references": [
                    "Sequence[ebl.bibliography.domain.reference.Reference]"
                ]
            }
        },
        "Bibliography.validate_references.is_invalid": {
            "name": "is_invalid",
            "location": 97,
            "return": [
                "bool"
            ],
            "arguments": {
                "reference": [
                    "int",
                    "List[\"Block\"]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/bibliography/application/bibliography_repository.py": {
        "BibliographyRepository.create": {
            "name": "create",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "str",
                    "Iterator[str]",
                    "bool",
                    "float"
                ]
            }
        },
        "BibliographyRepository.query_by_id": {
            "name": "query_by_id",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "str"
                ]
            }
        },
        "BibliographyRepository.update": {
            "name": "update",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "BibliographyRepository.query_by_author_year_and_title": {
            "name": "query_by_author_year_and_title",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "author": [
                    "Optional[str]"
                ],
                "year": [
                    "Optional[int]"
                ],
                "title": [
                    "Optional[str]"
                ]
            }
        },
        "BibliographyRepository.query_by_container_title_and_collection_number": {
            "name": "query_by_container_title_and_collection_number",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "container_title_short": [
                    "Optional[str]"
                ],
                "collection_number": [
                    "Optional[str]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/bibliography/application/reference_schema.py": {
        "ReferenceSchema.make_reference": {
            "name": "make_reference",
            "location": 17,
            "return": [
                "Reference",
                "bool",
                "dict",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "dict",
                    "bytes",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/bibliography/application/serialization.py": {
        "create_mongo_entry": {
            "name": "create_mongo_entry",
            "location": 1,
            "return": [
                "dict"
            ],
            "arguments": {
                "entry": [
                    "dict"
                ]
            }
        },
        "create_object_entry": {
            "name": "create_object_entry",
            "location": 5,
            "return": [
                "dict"
            ],
            "arguments": {
                "entry": [
                    "dict"
                ]
            }
        }
    },
    "ebl-api-master/ebl/bibliography/application/__init__.py": {},
    "ebl-api-master/ebl/bibliography/domain/bibliography_entry.py": {},
    "ebl-api-master/ebl/bibliography/domain/reference.py": {
        "Reference.set_document": {
            "name": "set_document",
            "location": 26,
            "return": [
                "Reference"
            ],
            "arguments": {
                "self": [
                    "_TReference"
                ],
                "new_document": [
                    "dict"
                ]
            }
        }
    },
    "ebl-api-master/ebl/bibliography/domain/__init__.py": {},
    "ebl-api-master/ebl/bibliography/infrastructure/bibliography.py": {
        "join_reference_documents": {
            "name": "join_reference_documents",
            "location": 13,
            "return": [
                "Sequence[dict]"
            ],
            "arguments": {}
        },
        "MongoBibliographyRepository.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "MongoBibliographyRepository.create": {
            "name": "create",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "Dict[int, int]",
                    "float",
                    "str"
                ]
            }
        },
        "MongoBibliographyRepository.query_by_id": {
            "name": "query_by_id",
            "location": 63,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "str"
                ]
            }
        },
        "MongoBibliographyRepository.update": {
            "name": "update",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "str"
                ]
            }
        },
        "MongoBibliographyRepository.query_by_author_year_and_title": {
            "name": "query_by_author_year_and_title",
            "location": 71,
            "return": [
                "Sequence[dict]"
            ],
            "arguments": {
                "self": [],
                "author": [
                    "Optional[str]"
                ],
                "year": [
                    "Optional[int]"
                ],
                "title": [
                    "Optional[str]"
                ]
            }
        },
        "MongoBibliographyRepository.query_by_container_title_and_collection_number": {
            "name": "query_by_container_title_and_collection_number",
            "location": 111,
            "return": [
                "Sequence[dict]"
            ],
            "arguments": {
                "self": [],
                "container_title_short": [
                    "Optional[str]"
                ],
                "collection_number": [
                    "Optional[str]"
                ]
            }
        },
        "MongoBibliographyRepository.query_by_author_year_and_title.pad_trailing_zeroes": {
            "name": "pad_trailing_zeroes",
            "location": 76,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "year": [
                    "int",
                    "float",
                    "str",
                    "Union[int, slice]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/bibliography/infrastructure/__init__.py": {},
    "ebl-api-master/ebl/bibliography/web/bibliography_entries.py": {
        "BibliographyResource.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bibliography": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "BibliographyResource.on_get": {
            "name": "on_get",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "str",
                    "int",
                    "Optional[int]",
                    "list"
                ],
                "resp": [
                    "str",
                    "int",
                    "Optional[int]",
                    "list"
                ]
            }
        },
        "BibliographyResource.on_post": {
            "name": "on_post",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "Callable",
                    "dict"
                ],
                "resp": [
                    "falcon.Response"
                ]
            }
        },
        "BibliographyEntriesResource.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bibliography": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "BibliographyEntriesResource.on_get": {
            "name": "on_get",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_req": [
                    "int",
                    "falcon.Request",
                    "str",
                    "Sequence[str]"
                ],
                "resp": [
                    "str",
                    "int",
                    "Iterable[int]"
                ],
                "id_": [
                    "str",
                    "int",
                    "Iterable[int]"
                ]
            }
        },
        "BibliographyEntriesResource.on_post": {
            "name": "on_post",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "str",
                    "bool",
                    "Optional[Dict]"
                ],
                "resp": [
                    "falcon.Response",
                    "int",
                    "str",
                    "IO[bytes]"
                ],
                "id_": [
                    "str",
                    "Optional[str]",
                    "set"
                ]
            }
        }
    },
    "ebl-api-master/ebl/bibliography/web/bootstrap.py": {
        "create_bibliography_routes": {
            "name": "create_bibliography_routes",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "falcon.API",
                    "str"
                ],
                "context": [
                    "ebl.context.Context"
                ]
            }
        }
    },
    "ebl-api-master/ebl/bibliography/web/__init__.py": {},
    "ebl-api-master/ebl/cdli/__init__.py": {},
    "ebl-api-master/ebl/cdli/infrastructure/cdli_client.py": {
        "get_photo_url": {
            "name": "get_photo_url",
            "location": 10,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "cdli_number": [
                    "str"
                ]
            }
        },
        "get_line_art_url": {
            "name": "get_line_art_url",
            "location": 14,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "cdli_number": [
                    "str",
                    "bytes"
                ]
            }
        },
        "get_detail_line_art_url": {
            "name": "get_detail_line_art_url",
            "location": 18,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "cdli_number": [
                    "str"
                ]
            }
        },
        "_get_url": {
            "name": "_get_url",
            "location": 22,
            "return": [
                "Optional[_T0]"
            ],
            "arguments": {
                "url": [
                    "_T0"
                ]
            }
        },
        "_log_timeout": {
            "name": "_log_timeout",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Callable",
                    "logging.Logger",
                    "int"
                ]
            }
        }
    },
    "ebl-api-master/ebl/cdli/infrastructure/__init__.py": {},
    "ebl-api-master/ebl/cdli/web/bootstrap.py": {
        "create_cdli_routes": {
            "name": "create_cdli_routes",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "falcon.API",
                    "int"
                ]
            }
        }
    },
    "ebl-api-master/ebl/cdli/web/cdli.py": {
        "CdliResource.on_get": {
            "name": "on_get",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "falcon.Request",
                    "bool",
                    "str"
                ],
                "resp": [
                    "str",
                    "dict"
                ],
                "cdli_number": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "ebl-api-master/ebl/cdli/web/__init__.py": {},
    "ebl-api-master/ebl/corpus/update_texts.py": {
        "update_text": {
            "name": "update_text",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "corpus": [
                    "ebl.corpus.application.corpus.Corpus"
                ],
                "text": [
                    "ebl.corpus.domain.text.Text"
                ]
            }
        },
        "update": {
            "name": "update",
            "location": 55,
            "return": [
                "State"
            ],
            "arguments": {
                "number": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "get_text_ids": {
            "name": "get_text_ids",
            "location": 76,
            "return": [
                "List[ebl.transliteration.domain.text_id.TextId]"
            ],
            "arguments": {}
        },
        "State.add_updated": {
            "name": "add_updated",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.add_error": {
            "name": "add_error",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "Exception"
                ],
                "text": [
                    "ebl.corpus.domain.text.Text"
                ]
            }
        },
        "State.to_tsv": {
            "name": "to_tsv",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.merge": {
            "name": "merge",
            "location": 47,
            "return": [
                "State"
            ],
            "arguments": {
                "self": [
                    "_TState"
                ],
                "other": [
                    "State"
                ]
            }
        }
    },
    "ebl-api-master/ebl/corpus/__init__.py": {},
    "ebl-api-master/ebl/corpus/application/alignment_updater.py": {
        "AlignmentUpdater.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alignment": [
                    "ebl.corpus.domain.alignment.Alignment"
                ]
            }
        },
        "AlignmentUpdater.line_index": {
            "name": "line_index",
            "location": 22,
            "return": [
                "int",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlignmentUpdater.variant_index": {
            "name": "variant_index",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlignmentUpdater.manuscript_line_index": {
            "name": "manuscript_line_index",
            "location": 30,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlignmentUpdater.current_alignment": {
            "name": "current_alignment",
            "location": 34,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlignmentUpdater.visit": {
            "name": "visit",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "AlignmentUpdater._visit_line": {
            "name": "_visit_line",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "AlignmentUpdater._visit_line_variant": {
            "name": "_visit_line_variant",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "variant": [
                    "List[str]",
                    "Set[str]",
                    "bool"
                ]
            }
        },
        "AlignmentUpdater._visit_manuscript_line": {
            "name": "_visit_manuscript_line",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manuscript_line": [
                    "str",
                    "int"
                ]
            }
        },
        "AlignmentUpdater._validate_chapter": {
            "name": "_validate_chapter",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chapter": [
                    "ebl.corpus.domain.chapter.Chapter"
                ]
            }
        },
        "AlignmentUpdater._update_chapter": {
            "name": "_update_chapter",
            "location": 110,
            "return": [
                "ebl.corpus.domain.chapter.Chapter"
            ],
            "arguments": {
                "self": [],
                "chapter": [
                    "ebl.corpus.domain.chapter.Chapter"
                ]
            }
        },
        "AlignmentUpdater._after_chapter_update": {
            "name": "_after_chapter_update",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ebl-api-master/ebl/corpus/application/chapter_updater.py": {
        "ChapterUpdater.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChapterUpdater.update": {
            "name": "update",
            "location": 13,
            "return": [
                "ebl.corpus.domain.chapter.Chapter"
            ],
            "arguments": {
                "self": [],
                "chapter": [
                    "ebl.corpus.domain.chapter.Chapter"
                ]
            }
        },
        "ChapterUpdater._update_chapter": {
            "name": "_update_chapter",
            "location": 21,
            "return": [
                "ebl.corpus.domain.chapter.Chapter"
            ],
            "arguments": {
                "self": [],
                "chapter": [
                    "ebl.corpus.domain.chapter.Chapter"
                ]
            }
        },
        "ChapterUpdater.visit": {
            "name": "visit",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "ChapterUpdater._visit_chapter": {
            "name": "_visit_chapter",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chapter": [
                    "ebl.transliteration.domain.enclosure_tokens.PerhapsBrokenAway",
                    "ebl.corpus.domain.texManuscript"
                ]
            }
        },
        "ChapterUpdater._visit_manuscripts": {
            "name": "_visit_manuscripts",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chapter": [
                    "ebl.corpus.domain.chapter.Chapter"
                ]
            }
        },
        "ChapterUpdater._visit_lines": {
            "name": "_visit_lines",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chapter": [
                    "ebl.corpus.domain.chapter.Chapter"
                ]
            }
        },
        "ChapterUpdater._after_chapter_update": {
            "name": "_after_chapter_update",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChapterUpdater._try_update_chapter": {
            "name": "_try_update_chapter",
            "location": 48,
            "return": [
                "ebl.corpus.domain.chapter.Chapter"
            ],
            "arguments": {
                "self": [],
                "chapter": [
                    "ebl.corpus.domain.chapter.Chapter"
                ]
            }
        },
        "ChapterUpdater._validate_chapter": {
            "name": "_validate_chapter",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chapter": [
                    "ebl.corpus.domain.chapter.Chapter"
                ]
            }
        }
    },
    "ebl-api-master/ebl/corpus/application/corpus.py": {
        "TextRepository.create": {
            "name": "create",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "ebl.corpus.domain.text.Text"
                ]
            }
        },
        "TextRepository.create_chapter": {
            "name": "create_chapter",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chapter": [
                    "ebl.corpus.domain.chapter.Chapter"
                ]
            }
        },
        "TextRepository.find": {
            "name": "find",
            "location": 46,
            "return": [
                "ebl.corpus.domain.text.Text"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "ebl.transliteration.domain.text_id.TextId"
                ]
            }
        },
        "TextRepository.find_chapter": {
            "name": "find_chapter",
            "location": 50,
            "return": [
                "ebl.corpus.domain.chapter.Chapter"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "ebl.corpus.domain.chapter.ChapterId"
                ]
            }
        },
        "TextRepository.find_chapter_for_display": {
            "name": "find_chapter_for_display",
            "location": 54,
            "return": [
                "ebl.corpus.domain.chapter_display.ChapterDisplay"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "ebl.corpus.domain.chapter.ChapterId"
                ]
            }
        },
        "TextRepository.find_line": {
            "name": "find_line",
            "location": 58,
            "return": [
                "ebl.corpus.domain.line.Line"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "ebl.corpus.domain.chapter.ChapterId"
                ],
                "number": [
                    "int"
                ]
            }
        },
        "TextRepository.list": {
            "name": "list",
            "location": 62,
            "return": [
                "builtins.list[ebl.corpus.domain.text.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextRepository.update": {
            "name": "update",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "ebl.corpus.domain.chapter.ChapterId"
                ],
                "chapter": [
                    "ebl.corpus.domain.chapter.Chapter"
                ]
            }
        },
        "TextRepository.query_by_transliteration": {
            "name": "query_by_transliteration",
            "location": 70,
            "return": [
                "builtins.list[ebl.corpus.domain.chapter.Chapter]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "ebl.transliteration.domain.transliteration_query.TransliterationQuery"
                ]
            }
        },
        "TextRepository.query_manuscripts_by_chapter": {
            "name": "query_manuscripts_by_chapter",
            "location": 74,
            "return": [
                "Sequence[ebl.corpus.domain.manuscript.Manuscript]"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "ebl.corpus.domain.chapter.ChapterId"
                ]
            }
        },
        "TextRepository.query_manuscripts_with_joins_by_chapter": {
            "name": "query_manuscripts_with_joins_by_chapter",
            "location": 78,
            "return": [
                "Sequence[ebl.corpus.domain.manuscript.Manuscript]"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "ebl.corpus.domain.chapter.ChapterId"
                ]
            }
        },
        "Corpus.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repository": [
                    "TextRepository"
                ],
                "bibliography": [
                    "int",
                    "bool",
                    "float"
                ],
                "changelog": [
                    "int",
                    "bool",
                    "float"
                ],
                "sign_repository": [
                    "ebl.transliteration.application.sign_repository.SignRepository"
                ],
                "parallel_injector": [
                    "ebl.transliteration.application.parallel_line_injector.ParallelLineInjector"
                ]
            }
        },
        "Corpus.find": {
            "name": "find",
            "location": 99,
            "return": [
                "ebl.corpus.domain.text.Text"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "ebl.transliteration.domain.text_id.TextId"
                ]
            }
        },
        "Corpus.find_chapter": {
            "name": "find_chapter",
            "location": 102,
            "return": [
                "ebl.corpus.domain.chapter.Chapter"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "ebl.corpus.domain.chapter.ChapterId"
                ]
            }
        },
        "Corpus.find_chapter_for_display": {
            "name": "find_chapter_for_display",
            "location": 106,
            "return": [
                "ebl.corpus.domain.chapter_display.ChapterDisplay"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "ebl.corpus.domain.chapter.ChapterId"
                ]
            }
        },
        "Corpus.find_line": {
            "name": "find_line",
            "location": 109,
            "return": [
                "Tuple[(ebl.corpus.domain.line.Line, Sequence[ebl.corpus.domain.manuscript.Manuscript])]"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "ebl.corpus.domain.chapter.ChapterId"
                ],
                "number": [
                    "int"
                ]
            }
        },
        "Corpus.find_line_with_manuscript_joins": {
            "name": "find_line_with_manuscript_joins",
            "location": 114,
            "return": [
                "Tuple[(ebl.corpus.domain.line.Line, Sequence[ebl.corpus.domain.manuscript.Manuscript])]"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "ebl.corpus.domain.chapter.ChapterId"
                ],
                "number": [
                    "int"
                ]
            }
        },
        "Corpus.find_manuscripts": {
            "name": "find_manuscripts",
            "location": 121,
            "return": [
                "Sequence[ebl.corpus.domain.manuscript.Manuscript]"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "ebl.corpus.domain.chapter.ChapterId"
                ]
            }
        },
        "Corpus.find_manuscripts_with_joins": {
            "name": "find_manuscripts_with_joins",
            "location": 126,
            "return": [
                "Sequence[ebl.corpus.domain.manuscript.Manuscript]"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "ebl.corpus.domain.chapter.ChapterId"
                ]
            }
        },
        "Corpus._inject_references_to_manuscripts": {
            "name": "_inject_references_to_manuscripts",
            "location": 131,
            "return": [
                "Sequence[ebl.corpus.domain.manuscript.Manuscript]"
            ],
            "arguments": {
                "self": [],
                "manuscripts": [
                    "Sequence[ebl.corpus.domain.manuscript.Manuscript]"
                ]
            }
        },
        "Corpus.search_transliteration": {
            "name": "search_transliteration",
            "location": 140,
            "return": [
                "builtins.list[ebl.corpus.domain.chapter_info.ChapterInfo]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "ebl.transliteration.domain.transliteration_query.TransliterationQuery"
                ]
            }
        },
        "Corpus.list": {
            "name": "list",
            "location": 150,
            "return": [
                "builtins.list[ebl.corpus.domain.text.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.update_alignment": {
            "name": "update_alignment",
            "location": 153,
            "return": [
                "ebl.corpus.domain.chapter.Chapter"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "ebl.corpus.domain.chapter.ChapterId"
                ],
                "alignment": [
                    "ebl.corpus.domain.alignment.Alignment"
                ],
                "user": [
                    "ebl.users.domain.user.User"
                ]
            }
        },
        "Corpus.update_manuscript_lemmatization": {
            "name": "update_manuscript_lemmatization",
            "location": 158,
            "return": [
                "ebl.corpus.domain.chapter.Chapter"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "ebl.corpus.domain.chapter.ChapterId"
                ],
                "lemmatization": [
                    "Sequence[Sequence[ebl.corpus.application.lemmatization.LineVariantLemmatization]]"
                ],
                "user": [
                    "ebl.users.domain.user.User"
                ]
            }
        },
        "Corpus.update_manuscripts": {
            "name": "update_manuscripts",
            "location": 163,
            "return": [
                "ebl.corpus.domain.chapter.Chapter"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "ebl.corpus.domain.chapter.ChapterId"
                ],
                "manuscripts": [
                    "Sequence[ebl.corpus.domain.manuscript.Manuscript]"
                ],
                "uncertain_fragments": [
                    "Sequence[ebl.transliteration.domain.museum_number.MuseumNumber]"
                ],
                "user": [
                    "ebl.users.domain.user.User"
                ]
            }
        },
        "Corpus.import_lines": {
            "name": "import_lines",
            "location": 184,
            "return": [
                "ebl.corpus.domain.chapter.Chapter"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "ebl.corpus.domain.chapter.ChapterId"
                ],
                "atf": [
                    "str"
                ],
                "user": [
                    "ebl.users.domain.user.User"
                ]
            }
        },
        "Corpus.update_lines": {
            "name": "update_lines",
            "location": 189,
            "return": [
                "ebl.corpus.domain.chapter.Chapter"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "ebl.corpus.domain.chapter.ChapterId"
                ],
                "lines": [
                    "ebl.corpus.domain.lines_update.LinesUpdate"
                ],
                "user": [
                    "ebl.users.domain.user.User"
                ]
            }
        },
        "Corpus._update_chapter": {
            "name": "_update_chapter",
            "location": 194,
            "return": [
                "ebl.corpus.domain.chapter.Chapter"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "ebl.corpus.domain.chapter.ChapterId"
                ],
                "updater": [
                    "ebl.corpus.application.chapter_updater.ChapterUpdater"
                ],
                "user": [
                    "ebl.users.domain.user.User"
                ]
            }
        },
        "Corpus.update_chapter": {
            "name": "update_chapter",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "ebl.corpus.domain.chapter.ChapterId"
                ],
                "old": [
                    "ebl.corpus.domain.chapter.Chapter"
                ],
                "updated": [
                    "ebl.corpus.domain.chapter.Chapter"
                ],
                "user": [
                    "ebl.users.domain.user.User"
                ]
            }
        },
        "Corpus._validate_chapter": {
            "name": "_validate_chapter",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chapter": [
                    "ebl.corpus.domain.chapter.Chapter"
                ]
            }
        },
        "Corpus._inject_references": {
            "name": "_inject_references",
            "location": 212,
            "return": [
                "ebl.corpus.domain.chapter.Chapter"
            ],
            "arguments": {
                "self": [],
                "chapter": [
                    "ebl.corpus.domain.chapter.Chapter"
                ]
            }
        },
        "Corpus._create_changelog": {
            "name": "_create_changelog",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "old": [
                    "ebl.corpus.domain.chapter.Chapter"
                ],
                "new": [
                    "ebl.corpus.domain.chapter.Chapter"
                ],
                "user": [
                    "ebl.users.domain.user.User"
                ]
            }
        },
        "Corpus._inject_parallels": {
            "name": "_inject_parallels",
            "location": 225,
            "return": [
                "ebl.corpus.domain.chapter_display.ChapterDisplay"
            ],
            "arguments": {
                "self": [],
                "chapter": [
                    "ebl.corpus.domain.chapter_display.ChapterDisplay"
                ]
            }
        }
    },
    "ebl-api-master/ebl/corpus/application/display_schemas.py": {
        "LineDisplaySchema.make_line": {
            "name": "make_line",
            "location": 31,
            "return": [
                "LineDisplay",
                "str",
                "int",
                "Callable[[Dict], Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, Set[str]]",
                    "List[int]"
                ]
            }
        },
        "ChapterDisplaySchema.make_chapter": {
            "name": "make_chapter",
            "location": 51,
            "return": [
                "dict",
                "ChapterDisplay"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "List[Tuple]",
                    "List[str]",
                    "bytes"
                ]
            }
        }
    },
    "ebl-api-master/ebl/corpus/application/id_schemas.py": {
        "TextIdSchema.make_id": {
            "name": "make_id",
            "location": 16,
            "return": [
                "TextId",
                "dict",
                "int",
                "bytes",
                "Optional[Dict[str, Any]]",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, str]",
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "ChapterIdSchema.make_id": {
            "name": "make_id",
            "location": 26,
            "return": [
                "ChapterId",
                "dict",
                "Dict[str, Dict[str, Any]]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, str]",
                    "str",
                    "dict",
                    "int"
                ]
            }
        }
    },
    "ebl-api-master/ebl/corpus/application/lemmatization.py": {},
    "ebl-api-master/ebl/corpus/application/lemmatization_schema.py": {
        "LineVariantLemmatizationSchema.make_lemmatization": {
            "name": "make_lemmatization",
            "location": 16,
            "return": [
                "str",
                "LineVariantLemmatization"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bool",
                    "Dict[str, Any]",
                    "str",
                    "int",
                    "Tuple[str, str]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/corpus/application/lemmatization_updater.py": {
        "LemmatizationUpdater.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lemmatization": [
                    "Sequence[Sequence[ebl.corpus.application.lemmatization.LineVariantLemmatization]]"
                ]
            }
        },
        "LemmatizationUpdater.line_index": {
            "name": "line_index",
            "location": 26,
            "return": [
                "int",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "LemmatizationUpdater.variant_index": {
            "name": "variant_index",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LemmatizationUpdater.manuscript_line_index": {
            "name": "manuscript_line_index",
            "location": 34,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LemmatizationUpdater.current_lemmatization": {
            "name": "current_lemmatization",
            "location": 38,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LemmatizationUpdater.visit": {
            "name": "visit",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "LemmatizationUpdater._visit_line": {
            "name": "_visit_line",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": []
            }
        },
        "LemmatizationUpdater._visit_line_variant": {
            "name": "_visit_line_variant",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "variant": [
                    "int"
                ]
            }
        },
        "LemmatizationUpdater._visit_manuscript_line": {
            "name": "_visit_manuscript_line",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manuscript_line": [
                    "List[str]",
                    "int",
                    "str"
                ]
            }
        },
        "LemmatizationUpdater._validate_chapter": {
            "name": "_validate_chapter",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chapter": [
                    "ebl.corpus.domain.chapter.Chapter"
                ]
            }
        },
        "LemmatizationUpdater._update_chapter": {
            "name": "_update_chapter",
            "location": 104,
            "return": [
                "ebl.corpus.domain.chapter.Chapter"
            ],
            "arguments": {
                "self": [],
                "chapter": [
                    "ebl.corpus.domain.chapter.Chapter"
                ]
            }
        },
        "LemmatizationUpdater._after_chapter_update": {
            "name": "_after_chapter_update",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ebl-api-master/ebl/corpus/application/lines_updater.py": {
        "LinesUpdater.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "ebl.corpus.domain.lines_update.LinesUpdate"
                ],
                "sing_repository": [
                    "ebl.transliteration.application.sign_repository.SignRepository"
                ]
            }
        },
        "LinesUpdater._visit_lines": {
            "name": "_visit_lines",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chapter": [
                    "ebl.corpus.domain.chapter.Chapter"
                ]
            }
        },
        "LinesUpdater._update_chapter": {
            "name": "_update_chapter",
            "location": 25,
            "return": [
                "ebl.corpus.domain.chapter.Chapter"
            ],
            "arguments": {
                "self": [],
                "chapter": [
                    "ebl.corpus.domain.chapter.Chapter"
                ]
            }
        }
    },
    "ebl-api-master/ebl/corpus/application/manuscripts_updater.py": {
        "ManuscriptUpdater.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manuscripts": [
                    "Sequence[ebl.corpus.domain.manuscript.Manuscript]"
                ],
                "uncertain_fragments": [
                    "Sequence[ebl.transliteration.domain.museum_number.MuseumNumber]"
                ],
                "sing_repository": [
                    "ebl.transliteration.application.sign_repository.SignRepository"
                ]
            }
        },
        "ManuscriptUpdater._update_chapter": {
            "name": "_update_chapter",
            "location": 25,
            "return": [
                "ebl.corpus.domain.chapter.Chapter"
            ],
            "arguments": {
                "self": [],
                "chapter": [
                    "ebl.corpus.domain.chapter.Chapter"
                ]
            }
        }
    },
    "ebl-api-master/ebl/corpus/application/manuscript_reference_injector.py": {
        "ManuscriptReferenceInjector.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bibliography": [
                    "ebl.bibliography.application.bibliography.Bibliography"
                ]
            }
        },
        "ManuscriptReferenceInjector.chapter": {
            "name": "chapter",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManuscriptReferenceInjector.visit": {
            "name": "visit",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "ManuscriptReferenceInjector._visit_chapter": {
            "name": "_visit_chapter",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chapter": []
            }
        },
        "ManuscriptReferenceInjector._visit_manuscript": {
            "name": "_visit_manuscript",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manuscript": []
            }
        },
        "ManuscriptReferenceInjector.inject_manuscript": {
            "name": "inject_manuscript",
            "location": 42,
            "return": [
                "ebl.corpus.domain.manuscript.Manuscript"
            ],
            "arguments": {
                "self": [],
                "manuscript": [
                    "ebl.corpus.domain.manuscript.Manuscript"
                ]
            }
        },
        "ManuscriptReferenceInjector._inject_references": {
            "name": "_inject_references",
            "location": 47,
            "return": [
                "Sequence[ebl.bibliography.domain.reference.Reference]"
            ],
            "arguments": {
                "self": [],
                "references": [
                    "Iterable[ebl.bibliography.domain.reference.Reference]"
                ]
            }
        },
        "ManuscriptReferenceInjector._inject_reference": {
            "name": "_inject_reference",
            "location": 52,
            "return": [
                "ebl.bibliography.domain.reference.Reference"
            ],
            "arguments": {
                "self": [],
                "reference": [
                    "ebl.bibliography.domain.reference.Reference"
                ]
            }
        },
        "ManuscriptReferenceInjector._inject_old_sigla": {
            "name": "_inject_old_sigla",
            "location": 56,
            "return": [
                "Sequence[ebl.corpus.domain.manuscript.OldSiglum]"
            ],
            "arguments": {
                "self": [],
                "old_sigla": [
                    "Sequence[ebl.corpus.domain.manuscript.OldSiglum]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/corpus/application/record_schemas.py": {
        "AuthorSchema.make_author": {
            "name": "make_author",
            "location": 18,
            "return": [
                "Author",
                "str",
                "Dict[str, Any]",
                "Tuple[str, int]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "dict",
                    "Union[Dict, List]",
                    "Union[Dict, None]"
                ]
            }
        },
        "TranslatorSchema.make_translator": {
            "name": "make_translator",
            "location": 29,
            "return": [
                "Translator",
                "str",
                "Dict[str, Any]",
                "Tuple[str, int]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "dict",
                    "Union[Dict, List]",
                    "Union[Dict, None]"
                ]
            }
        },
        "RecordSchema.make_record": {
            "name": "make_record",
            "location": 41,
            "return": [
                "Record",
                "int",
                "Dict[str, Any]",
                "bytes",
                "bool",
                "List[Dict[str, Any]]",
                "Callable[[bytes], bytes]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Union[Dict, None]",
                    "Optional[Dict[str, Any]]",
                    "List[Tuple]",
                    "List[str]",
                    "Dict[str, Any]",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "ebl-api-master/ebl/corpus/application/schemas.py": {
        "manuscript_id": {
            "name": "manuscript_id",
            "location": 146,
            "return": [
                "bool",
                "OrderedDict"
            ],
            "arguments": {}
        },
        "OldSiglumSchema.make_old_siglum": {
            "name": "make_old_siglum",
            "location": 62,
            "return": [
                "OldSiglum",
                "str",
                "dict",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "T",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "ManuscriptSchema.validate_provenance": {
            "name": "validate_provenance",
            "location": 112,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "Dict[str, object]",
                    "Optional[List[Any]]"
                ]
            }
        },
        "ManuscriptSchema.make_manuscript": {
            "name": "make_manuscript",
            "location": 126,
            "return": [
                "Manuscript",
                "Dict[str, str]",
                "marshmallow.Schema",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "T"
                ]
            }
        },
        "ManuscriptLineSchema.make_manuscript_line": {
            "name": "make_manuscript_line",
            "location": 162,
            "return": [
                "ManuscriptLine",
                "Dict[str, Any]",
                "str",
                "Union[Dict, List]",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, List[str]]",
                    "Dict[str, Set[str]]",
                    "bool",
                    "bytes"
                ]
            }
        },
        "LineVariantSchema.make_line_variant": {
            "name": "make_line_variant",
            "location": 186,
            "return": [
                "LineVariant",
                "str",
                "Optional[Callable[..., Any]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bool",
                    "Dict[str, Any]",
                    "Optional[float]",
                    "dict",
                    "int"
                ]
            }
        },
        "LineSchema.make_line": {
            "name": "make_line",
            "location": 210,
            "return": [
                "Line",
                "str",
                "bytes",
                "Dict[str, int]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Callable[[Any], str]"
                ]
            }
        },
        "ChapterSchema.make_chapter": {
            "name": "make_chapter",
            "location": 246,
            "return": [
                "Chapter",
                "bool",
                "List[List[int]]",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "float",
                    "List[List[str]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "UncertainFragmentSchema.make_uncertain_fragment": {
            "name": "make_uncertain_fragment",
            "location": 271,
            "return": [
                "UncertainFragment",
                "int",
                "Dict[str, Any]",
                "ebl.fragmentarium.application.fragment_updater.FragmentUpdater",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "bytes"
                ]
            }
        },
        "ChapterListingSchema.make_chapter_listing": {
            "name": "make_chapter_listing",
            "location": 287,
            "return": [
                "ChapterListing",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Union[bytes, bytearray, memoryview]",
                    "List[int]",
                    "int",
                    "dict",
                    "Dict[str, Any]",
                    "List[str]",
                    "T"
                ]
            }
        },
        "TextSchema.make_text": {
            "name": "make_text",
            "location": 311,
            "return": [
                "Text",
                "str",
                "dict",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/corpus/application/signs_updater.py": {
        "SignsUpdater.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sing_repository": [
                    "ebl.transliteration.application.sign_repository.SignRepository"
                ]
            }
        },
        "SignsUpdater.update": {
            "name": "update",
            "location": 17,
            "return": [
                "ebl.corpus.domain.chapter.Chapter"
            ],
            "arguments": {
                "self": [],
                "chapter": [
                    "ebl.corpus.domain.chapter.Chapter"
                ]
            }
        },
        "SignsUpdater._create_signs": {
            "name": "_create_signs",
            "location": 20,
            "return": [
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "chapter": [
                    "ebl.corpus.domain.chapter.Chapter"
                ]
            }
        },
        "SignsUpdater._map_lines": {
            "name": "_map_lines",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "Sequence[ebl.transliteration.domain.text_line.TextLine]"
                ]
            }
        },
        "SignsUpdater._map_line": {
            "name": "_map_line",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "ebl.transliteration.domain.text_line.TextLine"
                ]
            }
        }
    },
    "ebl-api-master/ebl/corpus/application/text_validator.py": {
        "data_error": {
            "name": "data_error",
            "location": 22,
            "return": [
                "Exception"
            ],
            "arguments": {
                "source": [
                    "Exception"
                ],
                "chapter": [
                    "ebl.corpus.domain.chapter.Chapter"
                ],
                "line_number": [
                    "ebl.transliteration.domain.line_number.AbstractLineNumber"
                ],
                "manuscript_id": [
                    "int"
                ]
            }
        },
        "create_error_message": {
            "name": "create_error_message",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "siglum": [
                    "ebl.corpus.domain.manuscript.Siglum"
                ],
                "entry": [
                    "ebl.corpus.domain.chapter.TextLineEntry"
                ],
                "chapter": [
                    "ebl.corpus.domain.chapter.Chapter"
                ]
            }
        },
        "AlignmentVisitor.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlignmentVisitor.visit_word": {
            "name": "visit_word",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "ebl.transliteration.domain.word_tokens.Word"
                ]
            }
        },
        "AlignmentVisitor.visit_greek_word": {
            "name": "visit_greek_word",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "ebl.transliteration.domain.greek_tokens.GreekWord"
                ]
            }
        },
        "AlignmentVisitor.validate": {
            "name": "validate",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextValidator.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextValidator.line": {
            "name": "line",
            "location": 67,
            "return": [
                "str",
                "Sequence[str]",
                "Set[str]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextValidator.chapter": {
            "name": "chapter",
            "location": 74,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextValidator.visit": {
            "name": "visit",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "TextValidator._visit_chapter": {
            "name": "_visit_chapter",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chapter": [
                    "ebl.transliteration.domain.tokens.Variant"
                ]
            }
        },
        "TextValidator._visit_line": {
            "name": "_visit_line",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "set",
                    "str"
                ]
            }
        },
        "TextValidator._visit_line_variant": {
            "name": "_visit_line_variant",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "variant": [
                    "str"
                ]
            }
        },
        "TextValidator._visit_manuscript_line": {
            "name": "_visit_manuscript_line",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manuscript_line": [
                    "ebl.transliteration.domain.tokens.Variant"
                ]
            }
        }
    },
    "ebl-api-master/ebl/corpus/application/__init__.py": {},
    "ebl-api-master/ebl/corpus/domain/alignment.py": {
        "Alignment.get_line": {
            "name": "get_line",
            "location": 18,
            "return": [
                "Sequence[Sequence[ManuscriptLineAlignment]]"
            ],
            "arguments": {
                "self": [],
                "line_index": [
                    "int"
                ]
            }
        },
        "Alignment.get_variant": {
            "name": "get_variant",
            "location": 21,
            "return": [
                "Sequence[ManuscriptLineAlignment]"
            ],
            "arguments": {
                "self": [],
                "line_index": [
                    "int"
                ],
                "variant_index": [
                    "int"
                ]
            }
        },
        "Alignment.get_manuscript_line": {
            "name": "get_manuscript_line",
            "location": 26,
            "return": [
                "ManuscriptLineAlignment"
            ],
            "arguments": {
                "self": [],
                "line_index": [
                    "int"
                ],
                "variant_index": [
                    "int"
                ],
                "manuscript_index": [
                    "int"
                ]
            }
        },
        "Alignment.get_number_of_lines": {
            "name": "get_number_of_lines",
            "location": 31,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alignment.get_number_of_variants": {
            "name": "get_number_of_variants",
            "location": 34,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "line_index": [
                    "int"
                ]
            }
        },
        "Alignment.get_number_of_manuscripts": {
            "name": "get_number_of_manuscripts",
            "location": 37,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "line_index": [
                    "int"
                ],
                "variant_index": [
                    "int"
                ]
            }
        }
    },
    "ebl-api-master/ebl/corpus/domain/chapter.py": {
        "make_title": {
            "name": "make_title",
            "location": 68,
            "return": [
                "Sequence[ebl.transliteration.domain.markup.MarkupPart]"
            ],
            "arguments": {
                "translation": [
                    "Sequence[ebl.transliteration.domain.translation_line.TranslationLine]"
                ]
            }
        },
        "ChapterVisitor.visit": {
            "name": "visit",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Union[(Chapter, ebl.corpus.domain.line.Line, ebl.corpus.domain.line.ManuscriptLine, ebl.corpus.domain.manuscript.Manuscript)]"
                ]
            }
        },
        "ChapterId.to_tuple": {
            "name": "to_tuple",
            "location": 55,
            "return": [
                "Tuple[(str, int, int, str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChapterId.__str__": {
            "name": "__str__",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Chapter.id_": {
            "name": "id_",
            "location": 113,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Chapter.text_lines": {
            "name": "text_lines",
            "location": 117,
            "return": [
                "List[int]",
                "Type",
                "bool",
                "List[str]",
                "Optional[BaseException]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Chapter.invalid_lines": {
            "name": "invalid_lines",
            "location": 124,
            "return": [
                "str",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Chapter.extant_lines": {
            "name": "extant_lines",
            "location": 134,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Chapter.manuscript_line_labels": {
            "name": "manuscript_line_labels",
            "location": 141,
            "return": [
                "List[str]",
                "list",
                "str",
                "dict",
                "Union[int, None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Chapter.get_manuscript": {
            "name": "get_manuscript",
            "location": 144,
            "return": [
                "ebl.corpus.domain.manuscript.Manuscript"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "int"
                ]
            }
        },
        "Chapter.get_matching_lines": {
            "name": "get_matching_lines",
            "location": 152,
            "return": [
                "Sequence[ebl.corpus.domain.line.Line]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "ebl.transliteration.domain.transliteration_query.TransliterationQuery"
                ]
            }
        },
        "Chapter._get_matching_line_indexes": {
            "name": "_get_matching_line_indexes",
            "location": 160,
            "return": [
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "ebl.transliteration.domain.transliteration_query.TransliterationQuery"
                ]
            }
        },
        "Chapter.get_matching_colophon_lines": {
            "name": "get_matching_colophon_lines",
            "location": 169,
            "return": [
                "Mapping[(int, Sequence[ebl.transliteration.domain.text_line.TextLine])]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "ebl.transliteration.domain.transliteration_query.TransliterationQuery"
                ]
            }
        },
        "Chapter._get_matching_colophon_lines": {
            "name": "_get_matching_colophon_lines",
            "location": 176,
            "return": [
                "Mapping[(int, Sequence[ebl.transliteration.domain.text_line.TextLine])]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "ebl.transliteration.domain.transliteration_query.TransliterationQuery"
                ]
            }
        },
        "Chapter.merge": {
            "name": "merge",
            "location": 193,
            "return": [
                "Chapter"
            ],
            "arguments": {
                "self": [
                    "_TChapter"
                ],
                "other": [
                    "Chapter"
                ]
            }
        },
        "Chapter._get_extant_lines": {
            "name": "_get_extant_lines",
            "location": 200,
            "return": [
                "Mapping[(Tuple[(int, Sequence[ebl.transliteration.domain.labels.Label], ebl.transliteration.domain.line_number.AbstractLineNumber)], ebl.corpus.domain.extant_line.ExtantLine)]"
            ],
            "arguments": {
                "self": [],
                "manuscript_id": [
                    "int"
                ]
            }
        },
        "Chapter._get_manuscript_text_lines": {
            "name": "_get_manuscript_text_lines",
            "location": 213,
            "return": [
                "Sequence[TextLineEntry]"
            ],
            "arguments": {
                "self": [],
                "manuscript": [
                    "ebl.corpus.domain.manuscript.Manuscript"
                ]
            }
        },
        "Chapter._match": {
            "name": "_match",
            "location": 228,
            "return": [
                "Sequence[Sequence[Tuple[(int, int)]]]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "ebl.transliteration.domain.transliteration_query.TransliterationQuery"
                ]
            }
        },
        "Chapter.merge.inner_merge": {
            "name": "inner_merge",
            "location": 194,
            "return": [
                "str",
                "list",
                "int"
            ],
            "arguments": {
                "old": [
                    "ebl.transliteration.domain.tokens.Token",
                    "int"
                ],
                "new": [
                    "ebl.transliteration.domain.tokens.Token",
                    "int"
                ]
            }
        },
        "Chapter._get_manuscript_text_lines.create_entry": {
            "name": "create_entry",
            "location": 216,
            "return": [
                "dict",
                "type"
            ],
            "arguments": {
                "line": [
                    "str"
                ],
                "index": [
                    "list",
                    "float",
                    "Optional[bytes]",
                    "List[int]",
                    "\"Var\""
                ]
            }
        }
    },
    "ebl-api-master/ebl/corpus/domain/chapter_display.py": {
        "get_default_translation": {
            "name": "get_default_translation",
            "location": 17,
            "return": [
                "Sequence[ebl.transliteration.domain.markup.MarkupPart]"
            ],
            "arguments": {
                "translations": [
                    "Sequence[ebl.transliteration.domain.translation_line.TranslationLine]"
                ]
            }
        },
        "LineDisplay.title": {
            "name": "title",
            "location": 39,
            "return": [
                "bool",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineDisplay.of_line": {
            "name": "of_line",
            "location": 43,
            "return": [
                "LineDisplay"
            ],
            "arguments": {
                "line": [
                    "ebl.corpus.domain.line.Line"
                ]
            }
        },
        "ChapterDisplay.title": {
            "name": "title",
            "location": 63,
            "return": [
                "str",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChapterDisplay.of_chapter": {
            "name": "of_chapter",
            "location": 67,
            "return": [
                "ChapterDisplay"
            ],
            "arguments": {
                "text": [
                    "ebl.corpus.domain.text.Text"
                ],
                "chapter": [
                    "ebl.corpus.domain.chapter.Chapter"
                ]
            }
        }
    },
    "ebl-api-master/ebl/corpus/domain/chapter_info.py": {
        "ChapterInfo.of": {
            "name": "of",
            "location": 20,
            "return": [
                "ChapterInfo"
            ],
            "arguments": {
                "chapter": [
                    "ebl.corpus.domain.chapter.Chapter"
                ],
                "query": [
                    "ebl.transliteration.domain.transliteration_query.TransliterationQuery"
                ]
            }
        }
    },
    "ebl-api-master/ebl/corpus/domain/chapter_query.py": {
        "ChapterQueryColophonLines.get_matching_lines": {
            "name": "get_matching_lines",
            "location": 12,
            "return": [
                "Mapping[(int, Sequence[ebl.transliteration.domain.text_line.TextLine])]"
            ],
            "arguments": {
                "self": [],
                "manuscripts": [
                    "Sequence[ebl.corpus.domain.manuscript.Manuscript]"
                ]
            }
        },
        "ChapterQueryColophonLines.select_matching_colophon_lines_filtered": {
            "name": "select_matching_colophon_lines_filtered",
            "location": 27,
            "return": [
                "Mapping[(int, Sequence[ebl.transliteration.domain.text_line.TextLine])]"
            ],
            "arguments": {
                "self": [],
                "manuscript_id": [
                    "int"
                ],
                "colophon_lines": [
                    "Sequence[ebl.transliteration.domain.text_line.TextLine]"
                ]
            }
        },
        "ChapterQueryColophonLines.filter_text_lines": {
            "name": "filter_text_lines",
            "location": 40,
            "return": [
                "Sequence[ebl.transliteration.domain.text_line.TextLine]"
            ],
            "arguments": {
                "self": [],
                "manuscript_colophon_lines": [
                    "Sequence[Union[(ebl.transliteration.domain.text_line.TextLine, L)]]"
                ]
            }
        },
        "ChapterQueryColophonLinesSchema.make_colophon_lines": {
            "name": "make_colophon_lines",
            "location": 57,
            "return": [
                "ChapterQueryColophonLines",
                "str",
                "Callable",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/corpus/domain/chapter_transformer.py": {
        "ChapterTransformer.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manuscripts": [
                    "Iterable[ebl.corpus.domain.manuscript.Manuscript]"
                ]
            }
        },
        "ChapterTransformer.manuscript_label": {
            "name": "manuscript_label",
            "location": 37,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "children": [
                    "_T0"
                ]
            }
        },
        "ChapterTransformer.siglum": {
            "name": "siglum",
            "location": 41,
            "return": [
                "Siglum",
                "str",
                "int",
                "ebl.fragmentarium.application.fragment_updater.FragmentUpdater",
                "Union[str, Dict]"
            ],
            "arguments": {
                "self": [],
                "provenance": [
                    "Dict[str, Any]",
                    "Type"
                ],
                "period": [
                    "Dict[str, Any]",
                    "Type"
                ],
                "type_": [
                    "Dict[str, Any]",
                    "Type"
                ],
                "disambiquator": [
                    "Dict[str, Any]",
                    "Type"
                ]
            }
        },
        "ChapterTransformer.standard_text_siglum": {
            "name": "standard_text_siglum",
            "location": 50,
            "return": [
                "Siglum",
                "Callable",
                "dere.corpus.Frame",
                "Iterable[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "disambiquator": [
                    "Optional[str]",
                    "Optional[Type[BaseException]]",
                    "tuple"
                ]
            }
        },
        "ChapterTransformer.manuscript_line": {
            "name": "manuscript_line",
            "location": 59,
            "return": [
                "ManuscriptLine",
                "Dict[Tuple[str, str], Tuple[float, float]]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "siglum": [
                    "str",
                    "List[str]",
                    "List[int]",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "labels": [
                    "str",
                    "List[str]",
                    "List[int]",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "line": [
                    "str",
                    "List[str]",
                    "List[int]",
                    "int",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "ChapterTransformer.empty_line": {
            "name": "empty_line",
            "location": 64,
            "return": [
                "ebl.transliteration.domain.line.EmptyLine"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "bool",
                    "Callable",
                    "List[object]"
                ]
            }
        },
        "ChapterTransformer.reconstruction": {
            "name": "reconstruction",
            "location": 68,
            "return": [
                "tuple[tuple]",
                "str",
                "list",
                "Sequence[str]",
                "List[str]",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "Line",
                    "str",
                    "List[str]"
                ],
                "note": [
                    "Line",
                    "str",
                    "List[str]"
                ]
            }
        },
        "ChapterTransformer.line_variant": {
            "name": "line_variant",
            "location": 72,
            "return": [
                "tuple[LineVariant]",
                "str",
                "dict",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "reconstruction": [
                    "int",
                    "Tuple[int]",
                    "Callable"
                ]
            }
        },
        "ChapterTransformer.chapter_translation": {
            "name": "chapter_translation",
            "location": 79,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "List[str]",
                    "str",
                    "Iterator[str]",
                    "Iterable[str]"
                ]
            }
        },
        "ChapterTransformer.chapter_line": {
            "name": "chapter_line",
            "location": 83,
            "return": [
                "Line",
                "str",
                "Optional[str]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "translation": [
                    "float",
                    "List[float]",
                    "Optional[Dict[str, str]]"
                ],
                "head": [
                    "str",
                    "int",
                    "set"
                ]
            }
        },
        "ChapterTransformer.chapter": {
            "name": "chapter",
            "location": 91,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "List[str]",
                    "str",
                    "Iterator[str]",
                    "Iterable[str]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/corpus/domain/chapter_validators.py": {
        "validate_manuscript_ids": {
            "name": "validate_manuscript_ids",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "_instance": [
                    "bool",
                    "str",
                    "int",
                    "Optional[type]"
                ],
                "_attribute": [
                    "bool",
                    "str",
                    "int",
                    "Optional[type]"
                ],
                "value": [
                    "Sequence[ebl.corpus.domain.manuscript.Manuscript]"
                ]
            }
        },
        "validate_manuscript_sigla": {
            "name": "validate_manuscript_sigla",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "_instance": [
                    "int",
                    "Iterable['cirq.Qid']",
                    "Optional[T]",
                    "bool"
                ],
                "_attribute": [
                    "int",
                    "Iterable['cirq.Qid']",
                    "Optional[T]",
                    "bool"
                ],
                "value": [
                    "Sequence[ebl.corpus.domain.manuscript.Manuscript]"
                ]
            }
        },
        "validate_line_numbers": {
            "name": "validate_line_numbers",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "_instance": [
                    "bool",
                    "str",
                    "list"
                ],
                "_attribute": [
                    "bool",
                    "str",
                    "list"
                ],
                "value": [
                    "Sequence[ebl.corpus.domain.line.Line]"
                ]
            }
        },
        "validate_translations": {
            "name": "validate_translations",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "_instance": [
                    "int",
                    "Iterable['cirq.Qid']",
                    "Optional[T]",
                    "bool"
                ],
                "_attribute": [
                    "int",
                    "Iterable['cirq.Qid']",
                    "Optional[T]",
                    "bool"
                ],
                "value": [
                    "Sequence[ebl.corpus.domain.line.Line]"
                ]
            }
        },
        "_validate_extents": {
            "name": "_validate_extents",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "line_numbers": [
                    "Mapping[(ebl.transliteration.domain.line_number.AbstractLineNumber, int)]"
                ],
                "value": [
                    "Sequence[ebl.corpus.domain.line.Line]"
                ]
            }
        },
        "_validate_extent_ranges": {
            "name": "_validate_extent_ranges",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "line_numbers": [
                    "Mapping[(ebl.transliteration.domain.line_number.AbstractLineNumber, int)]"
                ],
                "value": [
                    "Sequence[ebl.corpus.domain.line.Line]"
                ]
            }
        },
        "validate_orphan_manuscript_ids": {
            "name": "validate_orphan_manuscript_ids",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "ebl.corpus.domain.chapter.Chapter"
                ],
                "_": [
                    "str",
                    "list"
                ],
                "value": [
                    "Sequence[ebl.corpus.domain.line.Line]"
                ]
            }
        },
        "validate_manuscript_line_labels": {
            "name": "validate_manuscript_line_labels",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "ebl.corpus.domain.chapter.Chapter"
                ],
                "_": [
                    "str"
                ],
                "value": [
                    "Sequence[ebl.corpus.domain.line.Line]"
                ]
            }
        },
        "_make_labels_readable": {
            "name": "_make_labels_readable",
            "location": 116,
            "return": [
                "str"
            ],
            "arguments": {
                "instance": [
                    "ebl.corpus.domain.chapter.Chapter"
                ],
                "labels": [
                    "Sequence[Tuple[(int, Sequence[ebl.transliteration.domain.labels.Label], ebl.transliteration.domain.line_number.AbstractLineNumber)]]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/corpus/domain/create_alignment_map.py": {
        "create_alignment_map": {
            "name": "create_alignment_map",
            "location": 60,
            "return": [
                "Sequence[Optional[int]]"
            ],
            "arguments": {
                "old": [
                    "Sequence[ebl.transliteration.domain.tokens.Token]"
                ],
                "new": [
                    "Sequence[ebl.transliteration.domain.tokens.Token]"
                ]
            }
        },
        "Mapper.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "old": [
                    "Sequence[ebl.transliteration.domain.tokens.Token]"
                ],
                "new": [
                    "Sequence[ebl.transliteration.domain.tokens.Token]"
                ]
            }
        },
        "Mapper.map_": {
            "name": "map_",
            "location": 25,
            "return": [
                "Sequence[Optional[int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mapper._get_method": {
            "name": "_get_method",
            "location": 35,
            "return": [
                "Callable[([], None)]"
            ],
            "arguments": {
                "self": [],
                "delta": [
                    "str"
                ]
            }
        },
        "Mapper._keep": {
            "name": "_keep",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mapper._remove": {
            "name": "_remove",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mapper._add": {
            "name": "_add",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ebl-api-master/ebl/corpus/domain/enclosure_validator.py": {
        "validate": {
            "name": "validate",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "line": [
                    "Iterable[ebl.transliteration.domain.tokens.Token]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/corpus/domain/extant_line.py": {
        "ExtantLine.of": {
            "name": "of",
            "location": 17,
            "return": [
                "ExtantLine"
            ],
            "arguments": {
                "line": [
                    "ebl.corpus.domain.line.Line"
                ],
                "manuscript_id": [
                    "int"
                ]
            }
        }
    },
    "ebl-api-master/ebl/corpus/domain/line.py": {
        "ManuscriptLine.label": {
            "name": "label",
            "location": 38,
            "return": [
                "tuple",
                "None",
                "bool",
                "Optional[str]",
                "Optional[bool]",
                "int",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManuscriptLine.is_beginning_of_side": {
            "name": "is_beginning_of_side",
            "location": 46,
            "return": [
                "bool",
                "str",
                "type",
                "Dict[str, Any]",
                "Mapping"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManuscriptLine.is_end_of_side": {
            "name": "is_end_of_side",
            "location": 54,
            "return": [
                "bool",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManuscriptLine.is_empty": {
            "name": "is_empty",
            "location": 60,
            "return": [
                "bool",
                "Tuple[float, float, float]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManuscriptLine.merge": {
            "name": "merge",
            "location": 63,
            "return": [
                "ManuscriptLine"
            ],
            "arguments": {
                "self": [
                    "_TManuscriptLine"
                ],
                "other": [
                    "ManuscriptLine"
                ]
            }
        },
        "ManuscriptLine.update_alignments": {
            "name": "update_alignments",
            "location": 67,
            "return": [
                "ManuscriptLine"
            ],
            "arguments": {
                "self": [
                    "_TManuscriptLine"
                ],
                "aligment_map": [
                    "Sequence[Optional[int]]"
                ]
            }
        },
        "ManuscriptLine.get_line_content": {
            "name": "get_line_content",
            "location": 78,
            "return": [
                "Sequence[ebl.transliteration.domain.tokens.Token]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineVariant.validate_reconstruction": {
            "name": "validate_reconstruction",
            "location": 93,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "LineVariant.manuscript_ids": {
            "name": "manuscript_ids",
            "location": 97,
            "return": [
                "list",
                "List[str]",
                "bool",
                "str",
                "Iterable[str]",
                "List[Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineVariant.manuscript_line_labels": {
            "name": "manuscript_line_labels",
            "location": 101,
            "return": [
                "bool",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineVariant._variant_alignments": {
            "name": "_variant_alignments",
            "location": 109,
            "return": [
                "set",
                "bool",
                "int",
                "str",
                "List['GridQid']",
                "Tuple[int]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineVariant.get_manuscript_line": {
            "name": "get_manuscript_line",
            "location": 118,
            "return": [
                "Optional[ManuscriptLine]"
            ],
            "arguments": {
                "self": [],
                "manuscript_id": [
                    "int"
                ]
            }
        },
        "LineVariant.get_manuscript_text_line": {
            "name": "get_manuscript_text_line",
            "location": 126,
            "return": [
                "Optional[ebl.transliteration.domain.text_line.TextLine]"
            ],
            "arguments": {
                "self": [],
                "manuscript_id": [
                    "int"
                ]
            }
        },
        "LineVariant.merge": {
            "name": "merge",
            "location": 136,
            "return": [
                "LineVariant"
            ],
            "arguments": {
                "self": [
                    "_TLineVariant"
                ],
                "other": [
                    "LineVariant"
                ]
            }
        },
        "LineVariant.set_has_variant_aligment": {
            "name": "set_has_variant_aligment",
            "location": 154,
            "return": [
                "LineVariant"
            ],
            "arguments": {
                "self": [
                    "_TLineVariant"
                ]
            }
        },
        "Line._validate_translations": {
            "name": "_validate_translations",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ],
                "value": [
                    "int",
                    "str",
                    "float",
                    "bool",
                    "Sequence",
                    "List[str]"
                ]
            }
        },
        "Line.manuscript_ids": {
            "name": "manuscript_ids",
            "location": 188,
            "return": [
                "list",
                "List[str]",
                "str",
                "Iterable[str]",
                "List[Dict[str, str]]",
                "Tuple[List[Any], List[int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.manuscript_line_labels": {
            "name": "manuscript_line_labels",
            "location": 196,
            "return": [
                "list",
                "List[str]",
                "Set[int]",
                "dict",
                "List[List[Any]]",
                "FrozenSet[str]",
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.get_manuscript_line": {
            "name": "get_manuscript_line",
            "location": 203,
            "return": [
                "ManuscriptLine"
            ],
            "arguments": {
                "self": [],
                "manuscript_id": [
                    "int"
                ]
            }
        },
        "Line.get_manuscript_text_line": {
            "name": "get_manuscript_text_line",
            "location": 216,
            "return": [
                "Optional[ebl.transliteration.domain.text_line.TextLine]"
            ],
            "arguments": {
                "self": [],
                "manuscript_id": [
                    "int"
                ]
            }
        },
        "Line.merge": {
            "name": "merge",
            "location": 225,
            "return": [
                "Line"
            ],
            "arguments": {
                "self": [
                    "_TLine"
                ],
                "other": [
                    "Line"
                ]
            }
        },
        "LineVariant.merge.merge_manuscript": {
            "name": "merge_manuscript",
            "location": 140,
            "return": [
                "str"
            ],
            "arguments": {
                "old": [
                    "str",
                    "BinaryIO",
                    "IO[Any]",
                    "Tuple[ebl.fragmentarium.domain.fragmenFragment, bool]",
                    "list"
                ],
                "new": [
                    "str",
                    "BinaryIO",
                    "IO[Any]",
                    "Tuple[ebl.fragmentarium.domain.fragmenFragment, bool]",
                    "list"
                ]
            }
        },
        "LineVariant.set_has_variant_aligment.set_flag": {
            "name": "set_flag",
            "location": 158,
            "return": [
                "str",
                "List[Dict]",
                "Union[str, None]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "token": [
                    "str",
                    "models.Token",
                    "bool",
                    "Iterable[lexical_analysis.Token]",
                    "Iterable[sensibility.lexical_analysis.Token]"
                ],
                "index": [
                    "str",
                    "models.Token",
                    "bool",
                    "Iterable[lexical_analysis.Token]",
                    "Iterable[sensibility.lexical_analysis.Token]"
                ]
            }
        },
        "LineVariant.set_has_variant_aligment._": {
            "name": "_",
            "location": 162,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "token": [
                    "int",
                    "List[list]",
                    "Dict[str, str]"
                ],
                "index": [
                    "int",
                    "List[list]",
                    "Dict[str, str]"
                ]
            }
        },
        "Line.merge.inner_merge": {
            "name": "inner_merge",
            "location": 226,
            "return": [
                "str",
                "list",
                "int"
            ],
            "arguments": {
                "old": [
                    "ebl.transliteration.domain.tokens.Token",
                    "int"
                ],
                "new": [
                    "ebl.transliteration.domain.tokens.Token",
                    "int"
                ]
            }
        }
    },
    "ebl-api-master/ebl/corpus/domain/lines_update.py": {},
    "ebl-api-master/ebl/corpus/domain/manuscript.py": {
        "is_invalid_standard_text": {
            "name": "is_invalid_standard_text",
            "location": 127,
            "return": [
                "bool"
            ],
            "arguments": {
                "provenance": [],
                "period": [],
                "type_": []
            }
        },
        "is_invalid_non_standard_text": {
            "name": "is_invalid_non_standard_text",
            "location": 133,
            "return": [
                "bool"
            ],
            "arguments": {
                "provenance": [],
                "period": [],
                "type_": []
            }
        },
        "SiglumEnum.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "long_name": [],
                "abbreviation": []
            }
        },
        "SiglumEnum.from_abbreviation": {
            "name": "from_abbreviation",
            "location": 19,
            "return": [
                "SiglumEnum"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSiglumEnum]"
                ],
                "abbreviation": []
            }
        },
        "SiglumEnum.from_name": {
            "name": "from_name",
            "location": 23,
            "return": [
                "SiglumEnum"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSiglumEnum]"
                ],
                "name": []
            }
        },
        "SiglumEnumWithParent.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "long_name": [],
                "abbreviation": [],
                "parent": []
            }
        },
        "Siglum.__str__": {
            "name": "__str__",
            "location": 110,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manuscript.validate_accession": {
            "name": "validate_accession",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [],
                "value": []
            }
        },
        "Manuscript.validate_provenance": {
            "name": "validate_provenance",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [],
                "value": []
            }
        },
        "Manuscript.text_lines": {
            "name": "text_lines",
            "location": 174,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manuscript.siglum": {
            "name": "siglum",
            "location": 178,
            "return": [
                "Siglum"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ebl-api-master/ebl/corpus/domain/parser.py": {
        "parse_chapter": {
            "name": "parse_chapter",
            "location": 12,
            "return": [
                "Sequence[ebl.corpus.domain.line.Line]"
            ],
            "arguments": {
                "atf": [
                    "str"
                ],
                "manuscripts": [
                    "Iterable[ebl.corpus.domain.manuscript.Manuscript]"
                ],
                "start": [
                    "Optional[str]"
                ]
            }
        },
        "parse_paratext": {
            "name": "parse_paratext",
            "location": 22,
            "return": [
                "Union[(ebl.transliteration.domain.dollar_line.DollarLine, ebl.transliteration.domain.note_line.NoteLine)]"
            ],
            "arguments": {
                "atf": [
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/corpus/domain/record.py": {},
    "ebl-api-master/ebl/corpus/domain/text.py": {
        "ChapterListing.title": {
            "name": "title",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Text.id": {
            "name": "id",
            "location": 46,
            "return": [
                "TextId",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Text.has_multiple_stages": {
            "name": "has_multiple_stages",
            "location": 50,
            "return": [
                "bool",
                "int",
                "List[str]",
                "List[references.domain.Reference]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ebl-api-master/ebl/corpus/domain/__init__.py": {},
    "ebl-api-master/ebl/corpus/infrastructure/chapter_query_filters.py": {
        "filter_query_by_transliteration": {
            "name": "filter_query_by_transliteration",
            "location": 6,
            "return": [
                "list"
            ],
            "arguments": {
                "query": [
                    "ebl.transliteration.domain.transliteration_query.TransliterationQuery"
                ],
                "cursor": [
                    "str",
                    "ebl.fragmentarium.domain.transliteration_query.TransliterationQuery",
                    "Optional[int]",
                    "bool",
                    "Optional[dict]",
                    "Callable"
                ]
            }
        },
        "find_manuscript_matches": {
            "name": "find_manuscript_matches",
            "location": 24,
            "return": [
                "list"
            ],
            "arguments": {
                "query": [
                    "ebl.transliteration.domain.transliteration_query.TransliterationQuery"
                ],
                "chapter": [
                    "Mapping"
                ]
            }
        },
        "get_line_indexes": {
            "name": "get_line_indexes",
            "location": 39,
            "return": [
                "list"
            ],
            "arguments": {
                "chapter": [
                    "Mapping"
                ],
                "idx": [
                    "int"
                ]
            }
        },
        "get_all_line_manuscript_indexes": {
            "name": "get_all_line_manuscript_indexes",
            "location": 50,
            "return": [
                "list"
            ],
            "arguments": {
                "chapter": [
                    "Mapping"
                ]
            }
        },
        "find_chapter_query_lines": {
            "name": "find_chapter_query_lines",
            "location": 59,
            "return": [
                "Tuple[(list, Dict[(str, List[int])])]"
            ],
            "arguments": {
                "manuscript_matches": [
                    "list"
                ],
                "chapter_lines": [
                    "list"
                ]
            }
        },
        "find_lines_in_range": {
            "name": "find_lines_in_range",
            "location": 75,
            "return": [
                "Tuple[(list, Dict[(str, List[int])])]"
            ],
            "arguments": {
                "match": [
                    "tuple"
                ],
                "lines_info": [
                    "tuple"
                ],
                "text_lines": [
                    "list"
                ],
                "colophon_lines": [
                    "Dict[(str, List[int])]"
                ]
            }
        },
        "collect_matching_lines": {
            "name": "collect_matching_lines",
            "location": 99,
            "return": [
                "Tuple[(list, Dict[(str, List[int])])]"
            ],
            "arguments": {
                "lines_info": [
                    "tuple"
                ],
                "text_lines": [
                    "list"
                ],
                "colophon_lines": [
                    "Dict[(str, List[int])]"
                ]
            }
        },
        "remove_duplicates": {
            "name": "remove_duplicates",
            "location": 121,
            "return": [
                "list"
            ],
            "arguments": {
                "lst": [
                    "list"
                ]
            }
        }
    },
    "ebl-api-master/ebl/corpus/infrastructure/mongo_text_repository.py": {
        "text_not_found": {
            "name": "text_not_found",
            "location": 38,
            "return": [
                "Exception"
            ],
            "arguments": {
                "id_": [
                    "ebl.transliteration.domain.text_id.TextId"
                ]
            }
        },
        "chapter_not_found": {
            "name": "chapter_not_found",
            "location": 42,
            "return": [
                "Exception"
            ],
            "arguments": {
                "id_": [
                    "ebl.corpus.domain.chapter.ChapterId"
                ]
            }
        },
        "line_not_found": {
            "name": "line_not_found",
            "location": 46,
            "return": [
                "Exception"
            ],
            "arguments": {
                "id_": [
                    "ebl.corpus.domain.chapter.ChapterId"
                ],
                "number": [
                    "int"
                ]
            }
        },
        "MongoTextRepository.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "MongoTextRepository.create_indexes": {
            "name": "create_indexes",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoTextRepository.create": {
            "name": "create",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "ebl.corpus.domain.text.Text"
                ]
            }
        },
        "MongoTextRepository.create_chapter": {
            "name": "create_chapter",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chapter": [
                    "ebl.corpus.domain.chapter.Chapter"
                ]
            }
        },
        "MongoTextRepository.find": {
            "name": "find",
            "location": 96,
            "return": [
                "ebl.corpus.domain.text.Text"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "ebl.transliteration.domain.text_id.TextId"
                ]
            }
        },
        "MongoTextRepository.find_chapter": {
            "name": "find_chapter",
            "location": 119,
            "return": [
                "ebl.corpus.domain.chapter.Chapter"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "ebl.corpus.domain.chapter.ChapterId"
                ]
            }
        },
        "MongoTextRepository.find_chapter_for_display": {
            "name": "find_chapter_for_display",
            "location": 128,
            "return": [
                "ebl.corpus.domain.chapter_display.ChapterDisplay"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "ebl.corpus.domain.chapter.ChapterId"
                ]
            }
        },
        "MongoTextRepository.find_line": {
            "name": "find_line",
            "location": 145,
            "return": [
                "ebl.corpus.domain.line.Line"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "ebl.corpus.domain.chapter.ChapterId"
                ],
                "number": [
                    "int"
                ]
            }
        },
        "MongoTextRepository.list": {
            "name": "list",
            "location": 159,
            "return": [
                "builtins.list[ebl.corpus.domain.text.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoTextRepository.update": {
            "name": "update",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "ebl.corpus.domain.chapter.ChapterId"
                ],
                "chapter": [
                    "ebl.corpus.domain.chapter.Chapter"
                ]
            }
        },
        "MongoTextRepository.query_by_transliteration": {
            "name": "query_by_transliteration",
            "location": 192,
            "return": [
                "builtins.list[ebl.corpus.domain.chapter.Chapter]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "ebl.transliteration.domain.transliteration_query.TransliterationQuery"
                ]
            }
        },
        "MongoTextRepository.query_manuscripts_by_chapter": {
            "name": "query_manuscripts_by_chapter",
            "location": 204,
            "return": [
                "builtins.list[ebl.corpus.domain.manuscript.Manuscript]"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "ebl.corpus.domain.chapter.ChapterId"
                ]
            }
        },
        "MongoTextRepository.query_manuscripts_with_joins_by_chapter": {
            "name": "query_manuscripts_with_joins_by_chapter",
            "location": 215,
            "return": [
                "builtins.list[ebl.corpus.domain.manuscript.Manuscript]"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "ebl.corpus.domain.chapter.ChapterId"
                ]
            }
        }
    },
    "ebl-api-master/ebl/corpus/infrastructure/queries.py": {
        "chapter_id_query": {
            "name": "chapter_id_query",
            "location": 7,
            "return": [
                "dict"
            ],
            "arguments": {
                "id_": [
                    "ebl.corpus.domain.chapter.ChapterId"
                ]
            }
        },
        "join_uncertain_fragments": {
            "name": "join_uncertain_fragments",
            "location": 17,
            "return": [
                "List[dict]"
            ],
            "arguments": {}
        },
        "join_chapters": {
            "name": "join_chapters",
            "location": 66,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "include_uncertain_fragmnets": [
                    "bool"
                ]
            }
        },
        "aggregate_chapter_display": {
            "name": "aggregate_chapter_display",
            "location": 109,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "id_": [
                    "ebl.corpus.domain.chapter.ChapterId"
                ]
            }
        }
    },
    "ebl-api-master/ebl/corpus/infrastructure/__init__.py": {},
    "ebl-api-master/ebl/corpus/web/alignments.py": {
        "AlignmentResource.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "AlignmentResource.on_post": {
            "name": "on_post",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "bool",
                    "str",
                    "Callable"
                ],
                "resp": [
                    "str",
                    "List[List[int]]",
                    "Dict[str, List[int]]",
                    "dict",
                    "Optional[str]",
                    "int"
                ],
                "genre": [
                    "int",
                    "str"
                ],
                "category": [
                    "int",
                    "str"
                ],
                "index": [
                    "int",
                    "str"
                ],
                "stage": [
                    "int",
                    "str"
                ],
                "name": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/corpus/web/alignment_schema.py": {
        "AlignmentTokenSchema.make_alignment_token": {
            "name": "make_alignment_token",
            "location": 25,
            "return": [
                "bool",
                "AlignmentToken"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "list",
                    "bytes",
                    "dict"
                ]
            }
        },
        "AlignmentTokenSchema._create_variant": {
            "name": "_create_variant",
            "location": 31,
            "return": [
                "Optional[ebl.transliteration.domain.word_tokens.AbstractWord]"
            ],
            "arguments": {
                "data": [
                    "dict"
                ]
            }
        },
        "AlignmentTokenSchema._create_word": {
            "name": "_create_word",
            "location": 42,
            "return": [
                "ebl.transliteration.domain.word_tokens.AbstractWord"
            ],
            "arguments": {
                "atf": [
                    "str"
                ],
                "type_": [
                    "str"
                ],
                "language": [
                    "ebl.transliteration.domain.language.Language"
                ]
            }
        },
        "ManuscriptAlignmentSchema.make_manuscript_alignment": {
            "name": "make_manuscript_alignment",
            "location": 62,
            "return": [
                "ManuscriptLineAlignment",
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "List[int]",
                    "bytes",
                    "bytearray",
                    "dict"
                ]
            }
        },
        "AlignmentSchema.make_alignment": {
            "name": "make_alignment",
            "location": 78,
            "return": [
                "Alignment",
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bool",
                    "Union[int, float]",
                    "float",
                    "bytes"
                ]
            }
        }
    },
    "ebl-api-master/ebl/corpus/web/bootstrap.py": {
        "create_corpus_routes": {
            "name": "create_corpus_routes",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "falcon.API",
                    "dict",
                    "str"
                ],
                "context": [
                    "ebl.context.Context"
                ]
            }
        }
    },
    "ebl-api-master/ebl/corpus/web/chapters.py": {
        "ChaptersResource.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "ebl.corpus.application.corpus.Corpus"
                ]
            }
        },
        "ChaptersResource.on_get": {
            "name": "on_get",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "bool",
                    "List[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Dict[str, str]]",
                    "str"
                ],
                "resp": [
                    "List[str]",
                    "int",
                    "bool",
                    "Optional[str]",
                    "str"
                ],
                "genre": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "category": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "index": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "stage": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "name": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "ChaptersDisplayResource.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "ebl.corpus.application.corpus.Corpus"
                ]
            }
        },
        "ChaptersDisplayResource.on_get": {
            "name": "on_get",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "bool",
                    "List[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Dict[str, str]]",
                    "str"
                ],
                "resp": [
                    "List[str]",
                    "int",
                    "bool",
                    "Optional[str]",
                    "str"
                ],
                "genre": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "category": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "index": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "stage": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "name": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/corpus/web/chapter_info_schema.py": {},
    "ebl-api-master/ebl/corpus/web/chapter_schemas.py": {
        "_deserialize_transliteration": {
            "name": "_deserialize_transliteration",
            "location": 58,
            "return": [
                "ebl.transliteration.domain.text.Text"
            ],
            "arguments": {
                "value": [
                    "Dict[str, Any]",
                    "str",
                    "Sequence[Any]",
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "Union[bytes, str]"
                ]
            }
        },
        "_serialize_number": {
            "name": "_serialize_number",
            "location": 96,
            "return": [
                "str"
            ],
            "arguments": {
                "manuscript_line": [
                    "ebl.corpus.domain.line.ManuscriptLine"
                ]
            }
        },
        "_serialize_atf": {
            "name": "_serialize_atf",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "manuscript_line": [
                    "ebl.corpus.domain.line.ManuscriptLine"
                ]
            }
        },
        "_split_reconstruction": {
            "name": "_split_reconstruction",
            "location": 164,
            "return": [
                "Tuple[(str, Optional[str], Sequence[str])]"
            ],
            "arguments": {
                "reconstruction": [
                    "str"
                ]
            }
        },
        "_parse_recontsruction": {
            "name": "_parse_recontsruction",
            "location": 173,
            "return": [
                "Tuple[(Sequence[ebl.transliteration.domain.tokens.Token], Optional[ebl.transliteration.domain.note_line.NoteLine], Sequence[ebl.transliteration.domain.parallel_line.ParallelLine])]"
            ],
            "arguments": {
                "reconstruction": [
                    "str"
                ]
            }
        },
        "_parse_intertext": {
            "name": "_parse_intertext",
            "location": 189,
            "return": [
                "Sequence[ebl.transliteration.domain.markup.MarkupPart]"
            ],
            "arguments": {
                "intertext": [
                    "str"
                ]
            }
        },
        "deserialize_translation": {
            "name": "deserialize_translation",
            "location": 230,
            "return": [
                "Sequence[ebl.transliteration.domain.translation_line.TranslationLine]"
            ],
            "arguments": {
                "atf": [
                    "str"
                ]
            }
        },
        "MuseumNumberString._serialize": {
            "name": "_serialize",
            "location": 47,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bytes",
                    "Hashable"
                ],
                "attr": [
                    "str",
                    "bytes",
                    "Hashable"
                ],
                "obj": [
                    "str",
                    "bytes",
                    "Hashable"
                ]
            }
        },
        "MuseumNumberString._deserialize": {
            "name": "_deserialize",
            "location": 50,
            "return": [
                "Optional[ebl.transliteration.domain.museum_number.MuseumNumber]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[Mapping[str, Any]]",
                    "Optional[str]",
                    "str",
                    "Union[str, int]"
                ],
                "attr": [
                    "str",
                    "dict",
                    "Union[str, int]",
                    "Optional[Mapping[str, Any]]",
                    "Optional[str]"
                ],
                "data": [
                    "Optional[Mapping[str, Any]]",
                    "Optional[str]",
                    "str",
                    "Union[str, int]"
                ]
            }
        },
        "ApiManuscriptLineSchema.make_manuscript_line": {
            "name": "make_manuscript_line",
            "location": 129,
            "return": [
                "ManuscriptLine",
                "Dict[str, Any]",
                "str",
                "Union[Dict, List]",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "Union[bytes, bytearray, memoryview]",
                    "List[int]"
                ]
            }
        },
        "LineNumberString._serialize": {
            "name": "_serialize",
            "location": 153,
            "return": [
                "Dict[str, int]",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Callable",
                    "Type[T]",
                    "Dict[str, Any]",
                    "dict"
                ],
                "attr": [
                    "str",
                    "Callable",
                    "Type[T]",
                    "Dict[str, Any]",
                    "dict"
                ],
                "obj": [
                    "str",
                    "Callable",
                    "Type[T]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "LineNumberString._deserialize": {
            "name": "_deserialize",
            "location": 156,
            "return": [
                "ebl.transliteration.domain.line_number.AbstractLineNumber"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[Mapping[str, Any]]",
                    "Optional[str]",
                    "str",
                    "Union[str, int]"
                ],
                "attr": [
                    "str",
                    "dict",
                    "Union[str, int]",
                    "Optional[Mapping[str, Any]]",
                    "Optional[str]"
                ],
                "data": [
                    "Optional[Mapping[str, Any]]",
                    "Optional[str]",
                    "str",
                    "Union[str, int]"
                ]
            }
        },
        "ApiLineVariantSchema.make_line_variant": {
            "name": "make_line_variant",
            "location": 223,
            "return": [
                "LineVariant",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ApiLineSchema.make_line": {
            "name": "make_line",
            "location": 259,
            "return": [
                "Line",
                "str",
                "bytes",
                "Dict[str, int]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, str]",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/corpus/web/colophons.py": {
        "ColophonsResource.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "ebl.corpus.application.corpus.Corpus"
                ]
            }
        },
        "ColophonsResource.on_get": {
            "name": "on_get",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "bool",
                    "List[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Dict[str, str]]",
                    "str"
                ],
                "resp": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "genre": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "category": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "index": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "stage": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "name": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/corpus/web/display_schemas.py": {
        "ManuscriptLineDisplay.from_manuscript_line": {
            "name": "from_manuscript_line",
            "location": 38,
            "return": [
                "ManuscriptLineDisplay"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[_TManuscriptLineDisplay]"
                ],
                "manuscript": [
                    "ebl.corpus.domain.manuscript.Manuscript"
                ],
                "manuscript_line": [
                    "ebl.corpus.domain.line.ManuscriptLine"
                ]
            }
        },
        "LineVariantDisplay.from_line_variant": {
            "name": "from_line_variant",
            "location": 65,
            "return": [
                "LineVariantDisplay"
            ],
            "arguments": {
                "cls": [
                    "Type[_TLineVariantDisplay]"
                ],
                "line_variant": [
                    "int",
                    "str",
                    "bytes",
                    "float"
                ],
                "manuscripts_by_id": [
                    "int",
                    "Optional[Dict]",
                    "Dict[str, bool]",
                    "str"
                ]
            }
        },
        "LineDetailsDisplay.from_line_manuscripts": {
            "name": "from_line_manuscripts",
            "location": 85,
            "return": [
                "LineDetailsDisplay"
            ],
            "arguments": {
                "cls": [
                    "Type[_TLineDetailsDisplay]"
                ],
                "line": [
                    "ebl.corpus.domain.line.Line"
                ],
                "manuscripts": [
                    "Sequence[ebl.corpus.domain.manuscript.Manuscript]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/corpus/web/extant_lines.py": {
        "Labels._serialize": {
            "name": "_serialize",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Union[str, int]",
                    "str",
                    "Type['AbstractIntegrationConversation']"
                ],
                "attr": [
                    "str"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "ExtantLinesResource.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "ebl.corpus.application.corpus.Corpus"
                ]
            }
        },
        "ExtantLinesResource.on_get": {
            "name": "on_get",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "bool",
                    "List[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Dict[str, str]]",
                    "str"
                ],
                "resp": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "genre": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "category": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "index": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "stage": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "name": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/corpus/web/lemmatizations.py": {
        "LemmatizationResource.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "ebl.corpus.application.corpus.Corpus"
                ]
            }
        },
        "LemmatizationResource.on_post": {
            "name": "on_post",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "bool",
                    "str"
                ],
                "resp": [
                    "str",
                    "List[List[int]]",
                    "Dict[str, List[int]]",
                    "dict",
                    "Optional[str]",
                    "int"
                ],
                "genre": [
                    "int",
                    "str"
                ],
                "category": [
                    "int",
                    "str"
                ],
                "index": [
                    "int",
                    "str"
                ],
                "stage": [
                    "int",
                    "str"
                ],
                "name": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/corpus/web/lines.py": {
        "LineEditSchema.make_line_edit": {
            "name": "make_line_edit",
            "location": 22,
            "return": [
                "tuple",
                "str",
                "Dict[str, str]",
                "OrderedDict",
                "Dict[str, Any]",
                "Callable",
                "marshmallow.Schema",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "list",
                    "bytes"
                ]
            }
        },
        "LinesUpdateSchema.make_lines_update": {
            "name": "make_lines_update",
            "location": 32,
            "return": [
                "LinesUpdate",
                "bool",
                "str",
                "Dict[str, Tuple[Any, Any]]",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Dict[int, str]",
                "Mapping[int, str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "List[int]",
                    "Union[None, int, str]"
                ]
            }
        },
        "LinesResource.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "ebl.corpus.application.corpus.Corpus"
                ]
            }
        },
        "LinesResource.on_post": {
            "name": "on_post",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "str",
                    "Callable"
                ],
                "resp": [
                    "str",
                    "List[List[int]]",
                    "Dict[str, List[int]]",
                    "dict",
                    "Optional[str]",
                    "int"
                ],
                "genre": [
                    "int",
                    "str"
                ],
                "category": [
                    "int",
                    "str"
                ],
                "index": [
                    "int",
                    "str"
                ],
                "stage": [
                    "int",
                    "str"
                ],
                "name": [
                    "int",
                    "str"
                ]
            }
        },
        "LinesImportResource.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "ebl.corpus.application.corpus.Corpus"
                ]
            }
        },
        "LinesImportResource.on_post": {
            "name": "on_post",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]",
                    "bool"
                ],
                "resp": [
                    "str",
                    "List[List[int]]",
                    "Dict[str, List[int]]",
                    "dict",
                    "Optional[str]",
                    "int"
                ],
                "genre": [
                    "int",
                    "str"
                ],
                "category": [
                    "int",
                    "str"
                ],
                "index": [
                    "int",
                    "str"
                ],
                "stage": [
                    "int",
                    "str"
                ],
                "name": [
                    "int",
                    "str"
                ]
            }
        },
        "LineResource.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "ebl.corpus.application.corpus.Corpus"
                ]
            }
        },
        "LineResource.on_get": {
            "name": "on_get",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "bool",
                    "List[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Dict[str, str]]",
                    "str"
                ],
                "resp": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "genre": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "category": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "index": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "stage": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "name": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "number": [
                    "Dict[str, Any]",
                    "Optional[int]",
                    "int"
                ]
            }
        }
    },
    "ebl-api-master/ebl/corpus/web/manuscripts.py": {
        "ManuscriptsResource.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "ebl.corpus.application.corpus.Corpus"
                ]
            }
        },
        "ManuscriptsResource.on_get": {
            "name": "on_get",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "Optional[bool]"
                ],
                "resp": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "genre": [
                    "int",
                    "bool"
                ],
                "category": [
                    "int",
                    "bool"
                ],
                "index": [
                    "int",
                    "bool"
                ],
                "stage": [
                    "int",
                    "bool"
                ],
                "name": [
                    "int",
                    "bool"
                ]
            }
        },
        "ManuscriptsResource.on_post": {
            "name": "on_post",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "bool",
                    "str"
                ],
                "resp": [
                    "str",
                    "List[List[int]]",
                    "Dict[str, List[int]]",
                    "dict",
                    "Optional[str]",
                    "int"
                ],
                "genre": [
                    "int",
                    "str"
                ],
                "category": [
                    "int",
                    "str"
                ],
                "index": [
                    "int",
                    "str"
                ],
                "stage": [
                    "int",
                    "str"
                ],
                "name": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/corpus/web/texts.py": {
        "TextsResource.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "ebl.corpus.application.corpus.Corpus"
                ]
            }
        },
        "TextsResource.on_get": {
            "name": "on_get",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "Match[str]"
                ],
                "resp": [
                    "Dict[str, Any]",
                    "AsyncGenerator"
                ]
            }
        },
        "TextResource.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "ebl.corpus.application.corpus.Corpus"
                ]
            }
        },
        "TextResource.on_get": {
            "name": "on_get",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "Match[str]"
                ],
                "resp": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "genre": [
                    "str"
                ],
                "category": [
                    "str"
                ],
                "index": [
                    "str"
                ]
            }
        },
        "TextSearchResource.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "ebl.corpus.application.corpus.Corpus"
                ],
                "transliteration_query_factory": [
                    "ebl.transliteration.application.transliteration_query_factory.TransliterationQueryFactory"
                ]
            }
        },
        "TextSearchResource.on_get": {
            "name": "on_get",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "Dict[str, Any]",
                    "bytes",
                    "Dict[int, str]",
                    "float"
                ],
                "resp": [
                    "str",
                    "Optional[Dict]",
                    "Optional[str]",
                    "Optional"
                ]
            }
        }
    },
    "ebl-api-master/ebl/corpus/web/text_schema.py": {},
    "ebl-api-master/ebl/corpus/web/text_utils.py": {
        "create_text_id": {
            "name": "create_text_id",
            "location": 8,
            "return": [
                "ebl.transliteration.domain.text_id.TextId"
            ],
            "arguments": {
                "genre": [
                    "str"
                ],
                "category": [
                    "str"
                ],
                "index": [
                    "str"
                ]
            }
        },
        "create_chapter_id": {
            "name": "create_chapter_id",
            "location": 15,
            "return": [
                "ebl.corpus.domain.chapter.ChapterId"
            ],
            "arguments": {
                "genre": [
                    "str"
                ],
                "category": [
                    "str"
                ],
                "index": [
                    "str"
                ],
                "stage": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/corpus/web/unplaced_lines.py": {
        "UnplacedLinesResource.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "ebl.corpus.application.corpus.Corpus"
                ]
            }
        },
        "UnplacedLinesResource.on_get": {
            "name": "on_get",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "bool",
                    "List[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Dict[str, str]]",
                    "str"
                ],
                "resp": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "genre": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "category": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "index": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "stage": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "name": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/corpus/web/__init__.py": {},
    "ebl-api-master/ebl/dictionary/__init__.py": {},
    "ebl-api-master/ebl/dictionary/application/dictionary.py": {
        "Dictionary.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repository": [
                    "ebl.dictionary.application.word_repository.WordRepository"
                ],
                "changelog": [
                    "ebl.changelog.Changelog"
                ]
            }
        },
        "Dictionary.create": {
            "name": "create",
            "location": 16,
            "return": [
                "ebl.dictionary.domain.word.WordId"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "bool",
                    "float"
                ]
            }
        },
        "Dictionary.find": {
            "name": "find",
            "location": 19,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "str",
                    "int",
                    "List[Tuple[str, Any]]",
                    "Optional[int]"
                ]
            }
        },
        "Dictionary.search": {
            "name": "search",
            "location": 22,
            "return": [
                "Sequence"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str"
                ]
            }
        },
        "Dictionary.search_lemma": {
            "name": "search_lemma",
            "location": 25,
            "return": [
                "Sequence"
            ],
            "arguments": {
                "self": [],
                "lemma": [
                    "str"
                ]
            }
        },
        "Dictionary.update": {
            "name": "update",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word": [],
                "user": [
                    "ebl.users.domain.user.User"
                ]
            }
        }
    },
    "ebl-api-master/ebl/dictionary/application/word_repository.py": {
        "WordRepository.create": {
            "name": "create",
            "location": 9,
            "return": [
                "ebl.dictionary.domain.word.WordId"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str",
                    "Iterator[str]",
                    "ebl.fragmentarium.domain.fragmenFragment",
                    "bool",
                    "float"
                ]
            }
        },
        "WordRepository.query_by_id": {
            "name": "query_by_id",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "ebl.dictionary.domain.word.WordId"
                ]
            }
        },
        "WordRepository.query_by_lemma_form_or_meaning": {
            "name": "query_by_lemma_form_or_meaning",
            "location": 17,
            "return": [
                "Sequence"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str"
                ]
            }
        },
        "WordRepository.query_by_lemma_prefix": {
            "name": "query_by_lemma_prefix",
            "location": 21,
            "return": [
                "Sequence"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str"
                ]
            }
        },
        "WordRepository.update": {
            "name": "update",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "str",
                    "ebl.corpus.domain.texChapter",
                    "Optional[bool]",
                    "bool"
                ]
            }
        }
    },
    "ebl-api-master/ebl/dictionary/application/word_schema.py": {
        "lemma": {
            "name": "lemma",
            "location": 5,
            "return": [
                "int",
                "List[int]",
                "type"
            ],
            "arguments": {}
        },
        "attested": {
            "name": "attested",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "homonym": {
            "name": "homonym",
            "location": 13,
            "return": [
                "str",
                "List[str]",
                "Optional[str]",
                "bytes",
                "MutableMapping[str, Any]"
            ],
            "arguments": {}
        },
        "meaning": {
            "name": "meaning",
            "location": 17,
            "return": [
                "str",
                "List[str]",
                "Optional[str]",
                "bytes",
                "MutableMapping[str, Any]"
            ],
            "arguments": {}
        },
        "notes": {
            "name": "notes",
            "location": 21,
            "return": [
                "int",
                "List[int]",
                "type"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/dictionary/application/__init__.py": {},
    "ebl-api-master/ebl/dictionary/domain/word.py": {},
    "ebl-api-master/ebl/dictionary/domain/__init__.py": {},
    "ebl-api-master/ebl/dictionary/infrastructure/dictionary.py": {
        "_create_substring_expression": {
            "name": "_create_substring_expression",
            "location": 13,
            "return": [
                "Dict[(str, List[Union[(Dict[(str, List[Union[(int, Dict[(str, Dict[(str, Union[(str, Dict[(str, List[str])], _T1)])])])]])], _T0)]])]"
            ],
            "arguments": {
                "query": [
                    "_T0"
                ],
                "_input": [
                    "_T1"
                ]
            }
        },
        "_create_lemma_search_pipeline": {
            "name": "_create_lemma_search_pipeline",
            "location": 34,
            "return": [
                "List[Dict[(str, Union[(int, Dict[(str, Union[(int, Dict[(str, Dict[(str, Dict[(str, Union[(str, Dict[(str, str)])])])])], List[Dict[(str, Dict[(str, Union[(Dict[(str, Dict[(str, Union[(str, Dict[(str, List[Union[(Dict[(str, List[Union[(int, Dict[(str, Dict[(str, Union[(str, Dict[(str, List[str])])])])])]])], _T0)]])])])])], List[Union[(Dict[(str, List[Union[(int, Dict[(str, Dict[(str, Union[(str, Dict[(str, List[str])])])])])]])], _T0)]])])])]])])])])]]"
            ],
            "arguments": {
                "query": [
                    "_T0"
                ]
            }
        },
        "MongoDictionary.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "MongoDictionary.create": {
            "name": "create",
            "location": 80,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "bool",
                    "float"
                ]
            }
        },
        "MongoDictionary.find": {
            "name": "find",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "str",
                    "int",
                    "browse.domain.identifier.Identifier",
                    "Iterable[str]"
                ]
            }
        },
        "MongoDictionary.search": {
            "name": "search",
            "location": 86,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "MongoDictionary.search_lemma": {
            "name": "search_lemma",
            "location": 100,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str"
                ]
            }
        },
        "MongoDictionary.update": {
            "name": "update",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "bool"
                ],
                "user": []
            }
        },
        "MongoWordRepository.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "MongoWordRepository.create": {
            "name": "create",
            "location": 119,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "bool",
                    "float"
                ]
            }
        },
        "MongoWordRepository.query_by_id": {
            "name": "query_by_id",
            "location": 122,
            "return": [
                "str",
                "Dict[str, str]",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "ebl.dictionary.domain.word.WordId"
                ]
            }
        },
        "MongoWordRepository.query_by_lemma_form_or_meaning": {
            "name": "query_by_lemma_form_or_meaning",
            "location": 125,
            "return": [
                "Sequence"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str"
                ]
            }
        },
        "MongoWordRepository.query_by_lemma_prefix": {
            "name": "query_by_lemma_prefix",
            "location": 139,
            "return": [
                "Sequence"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str"
                ]
            }
        },
        "MongoWordRepository.update": {
            "name": "update",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "ebl.fragmentarium.application.fragment_updater.FragmentUpdater",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/dictionary/infrastructure/__init__.py": {},
    "ebl-api-master/ebl/dictionary/web/bootstrap.py": {
        "create_dictionary_routes": {
            "name": "create_dictionary_routes",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "falcon.API",
                    "str",
                    "Optional[str]"
                ],
                "context": [
                    "ebl.context.Context"
                ]
            }
        }
    },
    "ebl-api-master/ebl/dictionary/web/words.py": {
        "WordsResource.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dictionary": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "WordsResource.on_get": {
            "name": "on_get",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_req": [
                    "bool",
                    "dict",
                    "str"
                ],
                "resp": [
                    "int",
                    "str"
                ],
                "object_id": [
                    "int",
                    "str"
                ]
            }
        },
        "WordsResource.on_post": {
            "name": "on_post",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "int",
                    "Optional[int]",
                    "Dict[int, List[int]]"
                ],
                "resp": [
                    "falcon.Response",
                    "int",
                    "IO[bytes]",
                    "bytearray"
                ],
                "object_id": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/dictionary/web/word_search.py": {
        "WordSearch.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dictionary": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "WordSearch.on_get": {
            "name": "on_get",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "falcon.Response",
                    "Sized",
                    "int",
                    "str"
                ],
                "resp": [
                    "falcon.Response",
                    "Sized",
                    "int",
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/dictionary/web/__init__.py": {},
    "ebl-api-master/ebl/files/__init__.py": {},
    "ebl-api-master/ebl/files/application/file_repository.py": {
        "File.metadata": {
            "name": "metadata",
            "location": 11,
            "return": [
                "typing.Mapping[builtins.str, typing.Any]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.length": {
            "name": "length",
            "location": 16,
            "return": [
                "builtins.int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.content_type": {
            "name": "content_type",
            "location": 21,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.read": {
            "name": "read",
            "location": 25,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "File.close": {
            "name": "close",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.can_be_read_by": {
            "name": "can_be_read_by",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "ebl.users.domain.user.User"
                ]
            }
        },
        "FileRepository.query_by_file_name": {
            "name": "query_by_file_name",
            "location": 39,
            "return": [
                "File"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str"
                ]
            }
        },
        "FileRepository.query_if_file_exists": {
            "name": "query_if_file_exists",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/files/application/__init__.py": {},
    "ebl-api-master/ebl/files/infrastructure/grid_fs_file_repository.py": {
        "GridFsFile.metadata": {
            "name": "metadata",
            "location": 16,
            "return": [
                "dict",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GridFsFile.length": {
            "name": "length",
            "location": 20,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GridFsFile.content_type": {
            "name": "content_type",
            "location": 24,
            "return": [
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GridFsFile.read": {
            "name": "read",
            "location": 27,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "Sequence[int]",
                    "List[int]",
                    "bool",
                    "Tuple[int]",
                    "list"
                ]
            }
        },
        "GridFsFile.close": {
            "name": "close",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GridFsFileRepository.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "int",
                    "bool",
                    "float"
                ],
                "collection": [
                    "str"
                ]
            }
        },
        "GridFsFileRepository.query_by_file_name": {
            "name": "query_by_file_name",
            "location": 38,
            "return": [
                "ebl.files.application.file_repository.File"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/files/infrastructure/__init__.py": {},
    "ebl-api-master/ebl/files/web/bootstrap.py": {
        "create_files_route": {
            "name": "create_files_route",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "falcon.API",
                    "str"
                ],
                "context": [
                    "ebl.context.Context"
                ]
            }
        }
    },
    "ebl-api-master/ebl/files/web/files.py": {
        "PublicFilesResource.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "files": [
                    "ebl.files.application.file_repository.FileRepository"
                ]
            }
        },
        "PublicFilesResource.on_get": {
            "name": "on_get",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_req": [
                    "List[str]",
                    "bool",
                    "Iterable[List[Any]]",
                    "str"
                ],
                "resp": [
                    "falcon.Response",
                    "str",
                    "Optional[services.user.transfer.models.User]",
                    "Dict[str, Any]",
                    "services.user.transfer.models.User",
                    "Dict[str, str]"
                ],
                "file_name": [
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/files/web/__init__.py": {},
    "ebl-api-master/ebl/fragmentarium/retrieve_annotations.py": {
        "filter_empty_annotation": {
            "name": "filter_empty_annotation",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "annotation": [
                    "ebl.fragmentarium.domain.annotation.Annotation"
                ]
            }
        },
        "filter_annotation_by_type": {
            "name": "filter_annotation_by_type",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "annotation": [
                    "ebl.fragmentarium.domain.annotation.Annotation"
                ]
            }
        },
        "filter_annotation": {
            "name": "filter_annotation",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "annotation": [
                    "ebl.fragmentarium.domain.annotation.Annotation"
                ]
            }
        },
        "handle_blank_annotation_type": {
            "name": "handle_blank_annotation_type",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "annotation_data": [
                    "ebl.fragmentarium.domain.annotation.AnnotationData"
                ]
            }
        },
        "prepare_annotations": {
            "name": "prepare_annotations",
            "location": 64,
            "return": [
                "Tuple[(Sequence[ebl.fragmentarium.domain.annotation.BoundingBox], Sequence[str])]"
            ],
            "arguments": {
                "annotation": [
                    "ebl.fragmentarium.domain.annotation.Annotations"
                ],
                "image_width": [
                    "int"
                ],
                "image_height": [
                    "int"
                ]
            }
        },
        "create_annotations": {
            "name": "create_annotations",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "annotation_collection": [
                    "Sequence[ebl.fragmentarium.domain.annotation.Annotations]"
                ],
                "output_folder_annotations": [
                    "str"
                ],
                "output_folder_images": [
                    "str"
                ],
                "photo_repository": [
                    "ebl.files.application.file_repository.FileRepository"
                ]
            }
        },
        "write_annotations": {
            "name": "write_annotations",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "Union[(str, pathlib.Path)]"
                ],
                "bounding_boxes": [
                    "Sequence[ebl.fragmentarium.domain.annotation.BoundingBox]"
                ],
                "signs": [
                    "Sequence[str]"
                ]
            }
        },
        "create_directory": {
            "name": "create_directory",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "write_fragment_numbers": {
            "name": "write_fragment_numbers",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "annotation_collection": [
                    "Sequence[ebl.fragmentarium.domain.annotation.Annotations]"
                ],
                "path": [
                    "Union[(str, pathlib.Path)]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/update_fragments.py": {
        "update_fragment": {
            "name": "update_fragment",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "transliteration_factory": [
                    "ebl.fragmentarium.application.transliteration_update_factory.TransliterationUpdateFactory"
                ],
                "updater": [
                    "ebl.fragmentarium.application.fragment_updater.FragmentUpdater"
                ],
                "fragment": [
                    "ebl.fragmentarium.domain.fragment.Fragment"
                ]
            }
        },
        "find_transliterated": {
            "name": "find_transliterated",
            "location": 35,
            "return": [
                "List[ebl.transliteration.domain.museum_number.MuseumNumber]"
            ],
            "arguments": {
                "fragment_repository": [
                    "ebl.fragmentarium.application.fragment_repository.FragmentRepository"
                ]
            }
        },
        "update": {
            "name": "update",
            "location": 102,
            "return": [
                "State"
            ],
            "arguments": {
                "number": [
                    "ebl.transliteration.domain.museum_number.MuseumNumber"
                ]
            }
        },
        "create_context_": {
            "name": "create_context_",
            "location": 121,
            "return": [
                "ebl.context.Context"
            ],
            "arguments": {}
        },
        "State.add_updated": {
            "name": "add_updated",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.add_error": {
            "name": "add_error",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "Exception"
                ],
                "fragment": [
                    "ebl.fragmentarium.domain.fragment.Fragment"
                ]
            }
        },
        "State.add_querying_error": {
            "name": "add_querying_error",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "Exception"
                ],
                "number": [
                    "str"
                ]
            }
        },
        "State._add_lemmatization_error": {
            "name": "_add_lemmatization_error",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "ebl.lemmatization.domain.lemmatization.LemmatizationError"
                ],
                "fragment": [
                    "ebl.fragmentarium.domain.fragment.Fragment"
                ]
            }
        },
        "State._add_transliteration_error": {
            "name": "_add_transliteration_error",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "ebl.transliteration.domain.transliteration_error.TransliterationError"
                ],
                "fragment": [
                    "ebl.fragmentarium.domain.fragment.Fragment"
                ]
            }
        },
        "State._add_error": {
            "name": "_add_error",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "Exception"
                ],
                "fragment": [
                    "ebl.fragmentarium.domain.fragment.Fragment"
                ]
            }
        },
        "State.to_tsv": {
            "name": "to_tsv",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.merge": {
            "name": "merge",
            "location": 92,
            "return": [
                "State"
            ],
            "arguments": {
                "self": [
                    "_TState"
                ],
                "other": [
                    "State"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/__init__.py": {},
    "ebl-api-master/ebl/fragmentarium/application/annotations_repository.py": {
        "AnnotationsRepository.find_by_sign": {
            "name": "find_by_sign",
            "location": 10,
            "return": [
                "Sequence[ebl.fragmentarium.domain.annotation.Annotations]"
            ],
            "arguments": {
                "self": [],
                "sign": [
                    "str"
                ]
            }
        },
        "AnnotationsRepository.query_by_museum_number": {
            "name": "query_by_museum_number",
            "location": 14,
            "return": [
                "ebl.fragmentarium.domain.annotation.Annotations"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "ebl.transliteration.domain.museum_number.MuseumNumber"
                ]
            }
        },
        "AnnotationsRepository.retrieve_all_non_empty": {
            "name": "retrieve_all_non_empty",
            "location": 18,
            "return": [
                "List[ebl.fragmentarium.domain.annotation.Annotations]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnnotationsRepository.create_or_update": {
            "name": "create_or_update",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "annotations": [
                    "ebl.fragmentarium.domain.annotation.Annotations"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/application/annotations_schema.py": {
        "GeometrySchema.make_geometry": {
            "name": "make_geometry",
            "location": 22,
            "return": [
                "Geometry",
                "str",
                "Optional[float]",
                "bool",
                "marshmallow.Schema"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "Union[bytes, bytearray, memoryview]"
                ]
            }
        },
        "AnnotationDataSchema.make_data": {
            "name": "make_data",
            "location": 34,
            "return": [
                "AnnotationData",
                "Dict[str, str]",
                "IO[bytes]",
                "str",
                "dict",
                "Optional[float]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "Dict[str, Any]",
                    "Iterable[T]"
                ]
            }
        },
        "AnnotationSchema.make_annotation": {
            "name": "make_annotation",
            "location": 46,
            "return": [
                "Annotation",
                "str",
                "Optional[float]",
                "bool",
                "marshmallow.Schema"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "Union[bytes, bytearray, memoryview]"
                ]
            }
        },
        "AnnotationSchema.filter_none": {
            "name": "filter_none",
            "location": 50,
            "return": [
                "List[Callable]",
                "str",
                "bool",
                "Iterable[bytes]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "AnnotationsSchema.make_annotation": {
            "name": "make_annotation",
            "location": 59,
            "return": [
                "Annotations",
                "str",
                "Optional[float]",
                "bool",
                "marshmallow.Schema"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bool",
                    "int"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/application/annotations_service.py": {
        "AnnotationsService.generate_annotations": {
            "name": "generate_annotations",
            "location": 38,
            "return": [
                "ebl.fragmentarium.domain.annotation.Annotations"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "ebl.transliteration.domain.museum_number.MuseumNumber"
                ],
                "threshold": [
                    "float"
                ]
            }
        },
        "AnnotationsService.find": {
            "name": "find",
            "location": 46,
            "return": [
                "ebl.fragmentarium.domain.annotation.Annotations"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "ebl.transliteration.domain.museum_number.MuseumNumber"
                ]
            }
        },
        "AnnotationsService._label_by_line_number": {
            "name": "_label_by_line_number",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "line_number_to_match": [
                    "int"
                ],
                "labels": [
                    "Sequence[ebl.transliteration.domain.line_label.LineLabel]"
                ]
            }
        },
        "AnnotationsService._cropped_image_from_annotations_helper": {
            "name": "_cropped_image_from_annotations_helper",
            "location": 61,
            "return": [
                "Tuple[(ebl.fragmentarium.domain.annotation.Annotations, Sequence[ebl.fragmentarium.application.cropped_sign_image.CroppedSignImage])]"
            ],
            "arguments": {
                "self": [],
                "annotations": [
                    "ebl.fragmentarium.domain.annotation.Annotations"
                ],
                "image": [
                    "Image.Image"
                ],
                "script": [
                    "str"
                ],
                "labels": [
                    "Sequence[ebl.transliteration.domain.line_label.LineLabel]"
                ]
            }
        },
        "AnnotationsService._cropped_image_from_annotations": {
            "name": "_cropped_image_from_annotations",
            "location": 95,
            "return": [
                "Tuple[(ebl.fragmentarium.domain.annotation.Annotations, Sequence[ebl.fragmentarium.application.cropped_sign_image.CroppedSignImage])]"
            ],
            "arguments": {
                "self": [],
                "annotations": [
                    "ebl.fragmentarium.domain.annotation.Annotations"
                ]
            }
        },
        "AnnotationsService.update": {
            "name": "update",
            "location": 110,
            "return": [
                "ebl.fragmentarium.domain.annotation.Annotations"
            ],
            "arguments": {
                "self": [],
                "annotations": [
                    "ebl.fragmentarium.domain.annotation.Annotations"
                ],
                "user": [
                    "ebl.users.domain.user.User"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/application/cropped_annotations_service.py": {
        "CroppedAnnotationService.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "annotations_repository": [
                    "ebl.fragmentarium.application.annotations_repository.AnnotationsRepository"
                ],
                "cropped_sign_images_repository": [
                    "ebl.fragmentarium.application.cropped_sign_images_repository.CroppedSignImagesRepository"
                ]
            }
        },
        "CroppedAnnotationService.find_annotations_by_sign": {
            "name": "find_annotations_by_sign",
            "location": 19,
            "return": [
                "Sequence[ebl.fragmentarium.application.cropped_sign_image.CroppedAnnotation]"
            ],
            "arguments": {
                "self": [],
                "sign": [
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/application/cropped_sign_image.py": {
        "CroppedSignImage.create": {
            "name": "create",
            "location": 18,
            "return": [
                "CroppedSignImage"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCroppedSignImage]"
                ],
                "image": [
                    "Base64"
                ]
            }
        },
        "CroppedSignImageSchema.load": {
            "name": "load",
            "location": 27,
            "return": [
                "CroppedSignImage",
                "str",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "Union[str, bytes, None]"
                ]
            }
        },
        "CroppedSignImageSchema.cropped_sign_image_dump": {
            "name": "cropped_sign_image_dump",
            "location": 31,
            "return": [
                "dict[typing.Text, ]",
                "Dict[str, Any]",
                "dict",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "dict",
                    "bytes",
                    "list",
                    "str"
                ]
            }
        },
        "CroppedSignSchema.load": {
            "name": "load",
            "location": 48,
            "return": [
                "CroppedSign",
                "int",
                "str",
                "Dict[str, List[str]]",
                "Dict[str, Any]",
                "BinaryIO",
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "bytes"
                ]
            }
        },
        "CroppedAnnotation.from_cropped_sign": {
            "name": "from_cropped_sign",
            "location": 58,
            "return": [
                "CroppedAnnotation"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCroppedAnnotation]"
                ],
                "fragment_number": [
                    "ebl.transliteration.domain.museum_number.MuseumNumber"
                ],
                "image": [
                    "Base64"
                ],
                "cropped_sign": [
                    "CroppedSign"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/application/cropped_sign_images_repository.py": {
        "CroppedSignImagesRepository.query_by_id": {
            "name": "query_by_id",
            "location": 9,
            "return": [
                "ebl.fragmentarium.application.cropped_sign_image.CroppedSignImage"
            ],
            "arguments": {
                "self": [],
                "image_id": [
                    "str"
                ]
            }
        },
        "CroppedSignImagesRepository.create_many": {
            "name": "create_many",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cropped_sign_images": [
                    "Sequence[ebl.fragmentarium.application.cropped_sign_image.CroppedSignImage]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/application/folio_pager_schema.py": {},
    "ebl-api-master/ebl/fragmentarium/application/fragmentarium.py": {
        "Fragmentarium.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repository": [
                    "ebl.fragmentarium.application.fragment_repository.FragmentRepository"
                ]
            }
        },
        "Fragmentarium.statistics": {
            "name": "statistics",
            "location": 13,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fragmentarium.find_latest": {
            "name": "find_latest",
            "location": 21,
            "return": [
                "List[ebl.fragmentarium.domain.fragment_info.FragmentInfo]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fragmentarium.find_needs_revision": {
            "name": "find_needs_revision",
            "location": 29,
            "return": [
                "List[ebl.fragmentarium.domain.fragment_info.FragmentInfo]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fragmentarium.create": {
            "name": "create",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "fragment": [
                    "ebl.fragmentarium.domain.fragment.Fragment"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/application/fragmentarium_search_query.py": {},
    "ebl-api-master/ebl/fragmentarium/application/fragment_finder.py": {
        "FragmentFinder.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bibliography": [
                    "ebl.bibliography.application.bibliography.Bibliography"
                ],
                "repository": [
                    "ebl.fragmentarium.application.fragment_repository.FragmentRepository"
                ],
                "dictionary": [
                    "ebl.dictionary.application.dictionary.Dictionary"
                ],
                "photos": [
                    "ebl.files.application.file_repository.FileRepository"
                ],
                "folios": [
                    "ebl.files.application.file_repository.FileRepository"
                ],
                "parallel_injector": [
                    "ebl.transliteration.application.parallel_line_injector.ParallelLineInjector"
                ]
            }
        },
        "FragmentFinder.find": {
            "name": "find",
            "location": 37,
            "return": [
                "Tuple[(ebl.fragmentarium.domain.fragment.Fragment, bool)]"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "ebl.transliteration.domain.museum_number.MuseumNumber"
                ]
            }
        },
        "FragmentFinder.search": {
            "name": "search",
            "location": 46,
            "return": [
                "ebl.fragmentarium.domain.fragment_infos_pagination.FragmentInfosPagination"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "ebl.fragmentarium.application.fragmentarium_search_query.FragmentariumSearchQuery"
                ]
            }
        },
        "FragmentFinder.search_fragmentarium": {
            "name": "search_fragmentarium",
            "location": 59,
            "return": [
                "ebl.fragmentarium.domain.fragment_infos_pagination.FragmentInfosPagination"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "ebl.fragmentarium.application.fragmentarium_search_query.FragmentariumSearchQuery"
                ]
            }
        },
        "FragmentFinder.find_random": {
            "name": "find_random",
            "location": 77,
            "return": [
                "List[ebl.fragmentarium.domain.fragment_info.FragmentInfo]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FragmentFinder.find_interesting": {
            "name": "find_interesting",
            "location": 82,
            "return": [
                "List[ebl.fragmentarium.domain.fragment_info.FragmentInfo]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FragmentFinder.folio_pager": {
            "name": "folio_pager",
            "location": 87,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "folio_name": [
                    "str"
                ],
                "folio_number": [
                    "str"
                ],
                "number": [
                    "ebl.transliteration.domain.museum_number.MuseumNumber"
                ]
            }
        },
        "FragmentFinder.fragment_pager": {
            "name": "fragment_pager",
            "location": 94,
            "return": [
                "ebl.fragmentarium.domain.fragment_pager_info.FragmentPagerInfo"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "ebl.transliteration.domain.museum_number.MuseumNumber"
                ]
            }
        },
        "FragmentFinder.find_folio": {
            "name": "find_folio",
            "location": 97,
            "return": [
                "ebl.files.application.file_repository.File"
            ],
            "arguments": {
                "self": [],
                "folio": [
                    "ebl.fragmentarium.domain.folios.Folio"
                ]
            }
        },
        "FragmentFinder.find_photo": {
            "name": "find_photo",
            "location": 101,
            "return": [
                "ebl.files.application.file_repository.File"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/application/fragment_info_schema.py": {},
    "ebl-api-master/ebl/fragmentarium/application/fragment_matcher.py": {
        "sort_scores_to_list": {
            "name": "sort_scores_to_list",
            "location": 15,
            "return": [
                "List[ebl.fragmentarium.application.line_to_vec.LineToVecScore]"
            ],
            "arguments": {
                "results": [
                    "List[ebl.fragmentarium.application.line_to_vec.LineToVecScore]"
                ]
            }
        },
        "LineToVecRanker.score": {
            "name": "score",
            "location": 32,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineToVecRanker.score_weighted": {
            "name": "score_weighted",
            "location": 38,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineToVecRanker.ranking": {
            "name": "ranking",
            "location": 44,
            "return": [
                "bool",
                "LineToVecRanking"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineToVecRanker.insert_score": {
            "name": "insert_score",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line_to_vec_score": [
                    "ebl.fragmentarium.application.line_to_vec.LineToVecScore"
                ],
                "line_to_vec_score_weighted": [
                    "ebl.fragmentarium.application.line_to_vec.LineToVecScore"
                ]
            }
        },
        "LineToVecRanker._insert_score": {
            "name": "_insert_score",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line_to_vec_score": [
                    "ebl.fragmentarium.application.line_to_vec.LineToVecScore"
                ],
                "score_results": [
                    "List[ebl.fragmentarium.application.line_to_vec.LineToVecScore]"
                ]
            }
        },
        "FragmentMatcher.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fragment_repository": [
                    "ebl.fragmentarium.application.fragment_repository.FragmentRepository"
                ]
            }
        },
        "FragmentMatcher._parse_candidate": {
            "name": "_parse_candidate",
            "location": 65,
            "return": [
                "Tuple[(Tuple[(ebl.fragmentarium.domain.line_to_vec_encoding.LineToVecEncoding, ...)], ...)]"
            ],
            "arguments": {
                "self": [],
                "candidate": [
                    "str"
                ]
            }
        },
        "FragmentMatcher.rank_line_to_vec": {
            "name": "rank_line_to_vec",
            "location": 70,
            "return": [
                "LineToVecRanking"
            ],
            "arguments": {
                "self": [],
                "candidate": [
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/application/fragment_pager_info_schema.py": {},
    "ebl-api-master/ebl/fragmentarium/application/fragment_repository.py": {
        "FragmentRepository.create_indexes": {
            "name": "create_indexes",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FragmentRepository.create": {
            "name": "create",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "fragment": [
                    "ebl.fragmentarium.domain.fragment.Fragment"
                ]
            }
        },
        "FragmentRepository.create_many": {
            "name": "create_many",
            "location": 24,
            "return": [
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "fragments": [
                    "Sequence[ebl.fragmentarium.domain.fragment.Fragment]"
                ]
            }
        },
        "FragmentRepository.count_transliterated_fragments": {
            "name": "count_transliterated_fragments",
            "location": 28,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FragmentRepository.count_lines": {
            "name": "count_lines",
            "location": 32,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FragmentRepository.query_by_museum_number": {
            "name": "query_by_museum_number",
            "location": 36,
            "return": [
                "ebl.fragmentarium.domain.fragment.Fragment"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "ebl.transliteration.domain.museum_number.MuseumNumber"
                ]
            }
        },
        "FragmentRepository.query_random_by_transliterated": {
            "name": "query_random_by_transliterated",
            "location": 40,
            "return": [
                "List[ebl.fragmentarium.domain.fragment.Fragment]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FragmentRepository.query_path_of_the_pioneers": {
            "name": "query_path_of_the_pioneers",
            "location": 44,
            "return": [
                "List[ebl.fragmentarium.domain.fragment.Fragment]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FragmentRepository.query_by_transliterated_sorted_by_date": {
            "name": "query_by_transliterated_sorted_by_date",
            "location": 48,
            "return": [
                "List[ebl.fragmentarium.domain.fragment.Fragment]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FragmentRepository.query_by_transliterated_not_revised_by_other": {
            "name": "query_by_transliterated_not_revised_by_other",
            "location": 52,
            "return": [
                "List[ebl.fragmentarium.domain.fragment_info.FragmentInfo]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FragmentRepository.query_transliterated_numbers": {
            "name": "query_transliterated_numbers",
            "location": 56,
            "return": [
                "List[ebl.transliteration.domain.museum_number.MuseumNumber]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FragmentRepository.query_transliterated_line_to_vec": {
            "name": "query_transliterated_line_to_vec",
            "location": 60,
            "return": [
                "List[ebl.fragmentarium.application.line_to_vec.LineToVecEntry]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FragmentRepository.query_next_and_previous_folio": {
            "name": "query_next_and_previous_folio",
            "location": 66,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "folio_name": [
                    "str"
                ],
                "folio_number": [
                    "str"
                ],
                "number": [
                    "ebl.transliteration.domain.museum_number.MuseumNumber"
                ]
            }
        },
        "FragmentRepository.query_next_and_previous_fragment": {
            "name": "query_next_and_previous_fragment",
            "location": 72,
            "return": [
                "ebl.fragmentarium.domain.fragment_pager_info.FragmentPagerInfo"
            ],
            "arguments": {
                "self": [],
                "museum_number": [
                    "ebl.transliteration.domain.museum_number.MuseumNumber"
                ]
            }
        },
        "FragmentRepository.update_transliteration": {
            "name": "update_transliteration",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fragment": [
                    "ebl.fragmentarium.domain.fragment.Fragment"
                ]
            }
        },
        "FragmentRepository.update_genres": {
            "name": "update_genres",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fragment": [
                    "ebl.fragmentarium.domain.fragment.Fragment"
                ]
            }
        },
        "FragmentRepository.update_lemmatization": {
            "name": "update_lemmatization",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fragment": [
                    "ebl.fragmentarium.domain.fragment.Fragment"
                ]
            }
        },
        "FragmentRepository.update_references": {
            "name": "update_references",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fragment": [
                    "ebl.fragmentarium.domain.fragment.Fragment"
                ]
            }
        },
        "FragmentRepository.query_fragmentarium": {
            "name": "query_fragmentarium",
            "location": 93,
            "return": [
                "Tuple[(Sequence[ebl.fragmentarium.domain.fragment.Fragment], int)]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "ebl.fragmentarium.application.fragmentarium_search_query.FragmentariumSearchQuery"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/application/fragment_schema.py": {
        "MeasureSchema.make_measure": {
            "name": "make_measure",
            "location": 22,
            "return": [
                "Measure",
                "str",
                "Optional[float]",
                "bool",
                "marshmallow.Schema"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "Union[bytes, bytearray, memoryview]"
                ]
            }
        },
        "MeasureSchema.filter_none": {
            "name": "filter_none",
            "location": 26,
            "return": [
                "List[Callable]",
                "str",
                "bool",
                "Iterable[bytes]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "RecordEntrySchema.make_record_entry": {
            "name": "make_record_entry",
            "location": 36,
            "return": [
                "RecordEntry",
                "int",
                "Dict[str, Any]",
                "ebl.fragmentarium.application.fragment_updater.FragmentUpdater",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "bytes"
                ]
            }
        },
        "RecordSchema.make_record": {
            "name": "make_record",
            "location": 44,
            "return": [
                "Record",
                "int",
                "Dict[str, Any]",
                "ebl.fragmentarium.application.fragment_updater.FragmentUpdater",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "tuple"
                ]
            }
        },
        "FolioSchema.make_record_entry": {
            "name": "make_record_entry",
            "location": 53,
            "return": [
                "Folio",
                "str",
                "Optional[float]",
                "bool",
                "marshmallow.Schema"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "Union[bytes, bytearray, memoryview]"
                ]
            }
        },
        "FoliosSchema.make_folio": {
            "name": "make_folio",
            "location": 61,
            "return": [
                "Folios",
                "int",
                "Dict[str, Any]",
                "ebl.fragmentarium.application.fragment_updater.FragmentUpdater",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "tuple"
                ]
            }
        },
        "UncuratedReferenceSchema.make_uncurated_reference": {
            "name": "make_uncurated_reference",
            "location": 70,
            "return": [
                "str",
                "UncuratedReference"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "FragmentSchema.make_fragment": {
            "name": "make_fragment",
            "location": 112,
            "return": [
                "Fragment",
                "str",
                "Optional[float]",
                "bool",
                "marshmallow.Schema"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "FragmentSchema.filter_none": {
            "name": "filter_none",
            "location": 121,
            "return": [
                "List[Callable]",
                "str",
                "bool",
                "Iterable[bytes]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/application/fragment_updater.py": {
        "FragmentUpdater.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repository": [
                    "ebl.fragmentarium.application.fragment_repository.FragmentRepository"
                ],
                "changelog": [
                    "ebl.changelog.Changelog"
                ],
                "bibliography": [
                    "ebl.bibliography.application.bibliography.Bibliography"
                ],
                "photos": [
                    "ebl.files.application.file_repository.FileRepository"
                ],
                "parallel_injector": [
                    "ebl.transliteration.application.parallel_line_injector.ParallelLineInjector"
                ]
            }
        },
        "FragmentUpdater.update_transliteration": {
            "name": "update_transliteration",
            "location": 35,
            "return": [
                "Tuple[(ebl.fragmentarium.domain.fragment.Fragment, bool)]"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "ebl.transliteration.domain.museum_number.MuseumNumber"
                ],
                "transliteration": [
                    "ebl.fragmentarium.domain.transliteration_update.TransliterationUpdate"
                ],
                "user": [
                    "ebl.users.domain.user.User"
                ],
                "ignore_lowest_join": [
                    "bool"
                ]
            }
        },
        "FragmentUpdater.update_genres": {
            "name": "update_genres",
            "location": 54,
            "return": [
                "Tuple[(ebl.fragmentarium.domain.fragment.Fragment, bool)]"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "ebl.transliteration.domain.museum_number.MuseumNumber"
                ],
                "genres": [
                    "Sequence[ebl.fragmentarium.domain.fragment.Genre]"
                ],
                "user": [
                    "ebl.users.domain.user.User"
                ]
            }
        },
        "FragmentUpdater.update_lemmatization": {
            "name": "update_lemmatization",
            "location": 65,
            "return": [
                "Tuple[(ebl.fragmentarium.domain.fragment.Fragment, bool)]"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "ebl.transliteration.domain.museum_number.MuseumNumber"
                ],
                "lemmatization": [
                    "ebl.lemmatization.domain.lemmatization.Lemmatization"
                ],
                "user": [
                    "ebl.users.domain.user.User"
                ]
            }
        },
        "FragmentUpdater.update_references": {
            "name": "update_references",
            "location": 76,
            "return": [
                "Tuple[(ebl.fragmentarium.domain.fragment.Fragment, bool)]"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "ebl.transliteration.domain.museum_number.MuseumNumber"
                ],
                "references": [
                    "Sequence[ebl.bibliography.domain.reference.Reference]"
                ],
                "user": [
                    "ebl.users.domain.user.User"
                ]
            }
        },
        "FragmentUpdater._create_result": {
            "name": "_create_result",
            "location": 89,
            "return": [
                "Tuple[(ebl.fragmentarium.domain.fragment.Fragment, bool)]"
            ],
            "arguments": {
                "self": [],
                "fragment": [
                    "ebl.fragmentarium.domain.fragment.Fragment"
                ]
            }
        },
        "FragmentUpdater._create_changlelog": {
            "name": "_create_changlelog",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "ebl.users.domain.user.User"
                ],
                "fragment": [
                    "ebl.fragmentarium.domain.fragment.Fragment"
                ],
                "updated_fragment": [
                    "ebl.fragmentarium.domain.fragment.Fragment"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/application/genre_schema.py": {
        "GenreSchema.make_genre": {
            "name": "make_genre",
            "location": 11,
            "return": [
                "Genre",
                "str",
                "Optional[float]",
                "bool",
                "marshmallow.Schema"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "Union[bytes, bytearray, memoryview]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/application/joins_schema.py": {
        "JoinSchema.make_join": {
            "name": "make_join",
            "location": 21,
            "return": [
                "Join",
                "str",
                "Optional[float]",
                "bool",
                "marshmallow.Schema"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "Union[bytes, bytearray, memoryview]"
                ]
            }
        },
        "JoinsSchema.make_joins": {
            "name": "make_joins",
            "location": 29,
            "return": [
                "bool",
                "Joins"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "tuple",
                    "bool",
                    "dict",
                    "int",
                    "List[Tuple[int, int, str]]",
                    "List[Tuple[str, str]]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/application/line_to_vec.py": {},
    "ebl-api-master/ebl/fragmentarium/application/line_to_vec_ranking_schema.py": {
        "LineToVecScoreSchema.make_museum_number_to_str": {
            "name": "make_museum_number_to_str",
            "location": 12,
            "return": [
                "dict[typing.Text, str]",
                "int",
                "Dict[str, int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "line_to_vec_score": [
                    "str",
                    "int",
                    "List[int]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/application/transliteration_update_factory.py": {
        "TransliterationUpdateFactory.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sing_repository": [
                    "ebl.transliteration.application.sign_repository.SignRepository"
                ]
            }
        },
        "TransliterationUpdateFactory.create": {
            "name": "create",
            "location": 13,
            "return": [
                "ebl.fragmentarium.domain.transliteration_update.TransliterationUpdate"
            ],
            "arguments": {
                "self": [],
                "atf": [
                    "ebl.transliteration.domain.atf.Atf"
                ],
                "notes": [
                    "str"
                ]
            }
        },
        "TransliterationUpdateFactory._map_line": {
            "name": "_map_line",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "ebl.transliteration.domain.text_line.TextLine"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/application/__init__.py": {},
    "ebl-api-master/ebl/fragmentarium/application/matches/create_line_to_vec.py": {
        "get_line_number_prime": {
            "name": "get_line_number_prime",
            "location": 23,
            "return": [
                "builtins.bool",
                "None"
            ],
            "arguments": {
                "_": [
                    "str",
                    "bool",
                    "Callable",
                    "Set[str]"
                ]
            }
        },
        "_get_line_number_prime": {
            "name": "_get_line_number_prime",
            "location": 28,
            "return": [
                "str",
                "Sequence[str]",
                "List[str]",
                "Set[str]"
            ],
            "arguments": {
                "line_number": [
                    "List[str]",
                    "int",
                    "str"
                ]
            }
        },
        "_get_line_number_range_prime": {
            "name": "_get_line_number_range_prime",
            "location": 33,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "line_number": [
                    "str",
                    "int"
                ]
            }
        },
        "get_line_number_prefix_modifier": {
            "name": "get_line_number_prefix_modifier",
            "location": 38,
            "return": [
                "builtins.bool",
                "None"
            ],
            "arguments": {
                "_": [
                    "bool",
                    "Optional[str]",
                    "ebl.fragmentarium.domain.museum_number.MuseumNumber",
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "get_line_number_prefix_modifier_line_number": {
            "name": "get_line_number_prefix_modifier_line_number",
            "location": 43,
            "return": [
                "bool",
                "int",
                "Sequence",
                "Callable[[KT], VT]",
                "Optional[Dict[str, Any]]",
                "Callable[..., None]",
                "Optional[Set[str]]",
                "Mapping"
            ],
            "arguments": {
                "line_number": [
                    "str",
                    "ebl.corpus.domain.texText",
                    "int",
                    "bool"
                ]
            }
        },
        "_get_line_number_prefix_modifier_line_number_range": {
            "name": "_get_line_number_prefix_modifier_line_number_range",
            "location": 48,
            "return": [
                "bool",
                "Optional[str]",
                "type",
                "dict",
                "Callable"
            ],
            "arguments": {
                "line_number": [
                    "str"
                ]
            }
        },
        "parse_text_line": {
            "name": "parse_text_line",
            "location": 55,
            "return": [
                "ebl.fragmentarium.domain.line_to_vec_encoding.LineToVecEncodings",
                "None"
            ],
            "arguments": {
                "_": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "_parse_text_line": {
            "name": "_parse_text_line",
            "location": 60,
            "return": [
                "tuple",
                "bool",
                "int",
                "Callable[..., None]"
            ],
            "arguments": {
                "_": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "_parse_text_line_line_number_range": {
            "name": "_parse_text_line_line_number_range",
            "location": 65,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "line_number": [
                    "str",
                    "bool"
                ]
            }
        },
        "line_to_vec": {
            "name": "line_to_vec",
            "location": 73,
            "return": [
                "tuple",
                "float",
                "str",
                "Dict[str, Any]",
                "Callable",
                "int"
            ],
            "arguments": {
                "line": [
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[float]",
                    "Iterable[str]"
                ],
                "_": [
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[float]",
                    "Iterable[str]"
                ]
            }
        },
        "_line_to_vec_text": {
            "name": "_line_to_vec_text",
            "location": 78,
            "return": [
                "tuple",
                "List[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "line": [
                    "str"
                ],
                "first_line": [
                    "str"
                ]
            }
        },
        "_line_to_vec_ruling": {
            "name": "_line_to_vec_ruling",
            "location": 90,
            "return": [
                "tuple",
                "Dict[str, Any]",
                "bool",
                "dict",
                "float",
                "list"
            ],
            "arguments": {
                "line": [
                    "List[str]",
                    "str",
                    "int",
                    "Union[str, bytes]",
                    "bool"
                ],
                "_": [
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[float]",
                    "Iterable[str]"
                ]
            }
        },
        "_line_to_vec_state": {
            "name": "_line_to_vec_state",
            "location": 99,
            "return": [
                "tuple",
                "Optional[int]",
                "int",
                "List[str]",
                "str",
                "List[int]",
                "Optional[Dict[str, int]]"
            ],
            "arguments": {
                "line": [
                    "str",
                    "int"
                ],
                "_": [
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[float]"
                ]
            }
        },
        "get_line_number": {
            "name": "get_line_number",
            "location": 104,
            "return": [
                "builtins.int",
                "None"
            ],
            "arguments": {
                "_": [
                    "str",
                    "bool",
                    "Callable",
                    "Set[str]"
                ]
            }
        },
        "_get_line_number": {
            "name": "_get_line_number",
            "location": 109,
            "return": [
                "str",
                "Sequence[str]",
                "List[str]",
                "Set[str]"
            ],
            "arguments": {
                "line_number": [
                    "List[str]",
                    "int",
                    "str"
                ]
            }
        },
        "_get_line_number_range": {
            "name": "_get_line_number_range",
            "location": 114,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "line_number": [
                    "str",
                    "Optional[Iterable]"
                ]
            }
        },
        "split_lines": {
            "name": "split_lines",
            "location": 146,
            "return": [
                "Tuple[(Tuple[(ebl.transliteration.domain.line.Line, ...)], ...)]"
            ],
            "arguments": {
                "lines": [
                    "Sequence[ebl.transliteration.domain.line.Line]"
                ]
            }
        },
        "create_line_to_vec": {
            "name": "create_line_to_vec",
            "location": 152,
            "return": [
                "Tuple[(Tuple[(ebl.fragmentarium.domain.line_to_vec_encoding.LineToVecEncoding, ...)], ...)]"
            ],
            "arguments": {
                "lines": [
                    "Sequence[ebl.transliteration.domain.line.Line]"
                ]
            }
        },
        "LineSplits.add_line": {
            "name": "add_line",
            "location": 124,
            "return": [
                "LineSplits",
                "bool",
                "Tuple[float, float]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "LineSplits._": {
            "name": "_",
            "location": 128,
            "return": [
                "LineSplits",
                "str",
                "bool",
                "BaseException",
                "int"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str",
                    "Line",
                    "Iterator[str]",
                    "int",
                    "Iterable[str]",
                    "Union[str, bytes]"
                ]
            }
        },
        "LineSplits._open_split": {
            "name": "_open_split",
            "location": 137,
            "return": [
                "Tuple[(Tuple[(ebl.transliteration.domain.line.Line, ...)], ...)]"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "ebl.transliteration.domain.line.Line"
                ]
            }
        },
        "LineSplits._add_to_split": {
            "name": "_add_to_split",
            "location": 140,
            "return": [
                "Tuple[(Tuple[(ebl.transliteration.domain.line.Line, ...)], ...)]"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "ebl.transliteration.domain.line.Line"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/application/matches/line_to_vec_score.py": {
        "score": {
            "name": "score",
            "location": 12,
            "return": [
                "int"
            ],
            "arguments": {
                "seq1": [
                    "Tuple[(Tuple[(ebl.fragmentarium.domain.line_to_vec_encoding.LineToVecEncoding, ...)], ...)]"
                ],
                "seq2": [
                    "Tuple[(Tuple[(ebl.fragmentarium.domain.line_to_vec_encoding.LineToVecEncoding, ...)], ...)]"
                ]
            }
        },
        "score_weighted": {
            "name": "score_weighted",
            "location": 19,
            "return": [
                "int"
            ],
            "arguments": {
                "seq1": [
                    "Tuple[(Tuple[(ebl.fragmentarium.domain.line_to_vec_encoding.LineToVecEncoding, ...)], ...)]"
                ],
                "seq2": [
                    "Tuple[(Tuple[(ebl.fragmentarium.domain.line_to_vec_encoding.LineToVecEncoding, ...)], ...)]"
                ]
            }
        },
        "list_of_overalps": {
            "name": "list_of_overalps",
            "location": 26,
            "return": [
                "List[Tuple[(ebl.fragmentarium.domain.line_to_vec_encoding.LineToVecEncoding, ...)]]"
            ],
            "arguments": {
                "seqs1": [
                    "Tuple[(Tuple[(ebl.fragmentarium.domain.line_to_vec_encoding.LineToVecEncoding, ...)], ...)]"
                ],
                "seqs2": [
                    "Tuple[(Tuple[(ebl.fragmentarium.domain.line_to_vec_encoding.LineToVecEncoding, ...)], ...)]"
                ]
            }
        },
        "compute_score_for_all": {
            "name": "compute_score_for_all",
            "location": 39,
            "return": [
                "List[Tuple[(Tuple[(ebl.fragmentarium.domain.line_to_vec_encoding.LineToVecEncoding, ...)], ...)]]"
            ],
            "arguments": {
                "seqs1": [
                    "Tuple[(Tuple[(ebl.fragmentarium.domain.line_to_vec_encoding.LineToVecEncoding, ...)], ...)]"
                ],
                "seqs2": [
                    "Tuple[(Tuple[(ebl.fragmentarium.domain.line_to_vec_encoding.LineToVecEncoding, ...)], ...)]"
                ]
            }
        },
        "compute_score": {
            "name": "compute_score",
            "location": 45,
            "return": [
                "Tuple[(Tuple[(ebl.fragmentarium.domain.line_to_vec_encoding.LineToVecEncoding, ...)], ...)]"
            ],
            "arguments": {
                "seq1": [
                    "Tuple[(ebl.fragmentarium.domain.line_to_vec_encoding.LineToVecEncoding, ...)]"
                ],
                "seq2": [
                    "Tuple[(ebl.fragmentarium.domain.line_to_vec_encoding.LineToVecEncoding, ...)]"
                ]
            }
        },
        "weight_subsequence": {
            "name": "weight_subsequence",
            "location": 60,
            "return": [
                "int"
            ],
            "arguments": {
                "seq_of_seq": [
                    "List[Tuple[(ebl.fragmentarium.domain.line_to_vec_encoding.LineToVecEncoding, ...)]]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/application/matches/__init__.py": {},
    "ebl-api-master/ebl/fragmentarium/domain/annotation.py": {
        "Annotation.crop_image": {
            "name": "crop_image",
            "location": 47,
            "return": [
                "ebl.fragmentarium.application.cropped_sign_image.Base64"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "Image.Image"
                ]
            }
        },
        "Annotation.from_prediction": {
            "name": "from_prediction",
            "location": 63,
            "return": [
                "Annotation"
            ],
            "arguments": {
                "cls": [
                    "Type[_TAnnotation]"
                ],
                "geometry": [
                    "Geometry"
                ]
            }
        },
        "BoundingBox.to_list": {
            "name": "to_list",
            "location": 75,
            "return": [
                "Sequence[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoundingBox.from_relative_coordinates": {
            "name": "from_relative_coordinates",
            "location": 79,
            "return": [
                "BoundingBox"
            ],
            "arguments": {
                "cls": [
                    "Type[_TBoundingBox]"
                ],
                "relative_x": [
                    "int",
                    "List[float]",
                    "List[str]",
                    "float",
                    "bytes",
                    "str"
                ],
                "relative_y": [
                    "int",
                    "float"
                ],
                "relative_width": [
                    "int",
                    "Optional[int]"
                ],
                "relative_height": [
                    "int",
                    "List[float]",
                    "List[str]",
                    "float",
                    "bytes",
                    "str"
                ],
                "image_width": [
                    "int",
                    "Callable"
                ],
                "image_height": [
                    "int",
                    "List[float]"
                ]
            }
        },
        "BoundingBox.from_annotations": {
            "name": "from_annotations",
            "location": 95,
            "return": [
                "Sequence[BoundingBox]"
            ],
            "arguments": {
                "image_width": [
                    "int"
                ],
                "image_height": [
                    "int"
                ],
                "annotations": [
                    "Sequence[Annotation]"
                ]
            }
        },
        "Annotations.from_bounding_boxes_predictions": {
            "name": "from_bounding_boxes_predictions",
            "location": 124,
            "return": [
                "Annotations"
            ],
            "arguments": {
                "cls": [
                    "Type[_TAnnotations]"
                ],
                "fragment_number": [
                    "ebl.transliteration.domain.museum_number.MuseumNumber"
                ],
                "bboxes": [
                    "Sequence[BoundingBoxPrediction]"
                ],
                "image_height": [
                    "int"
                ],
                "image_width": [
                    "int"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/domain/folios.py": {
        "Folio.file_name": {
            "name": "file_name",
            "location": 12,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Folios.filter": {
            "name": "filter",
            "location": 20,
            "return": [
                "Folios"
            ],
            "arguments": {
                "self": [
                    "_TFolios"
                ],
                "user": [
                    "List[str]",
                    "str",
                    "Callable",
                    "bool"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/domain/fragment.py": {
        "Genre._check_is_genres_valid": {
            "name": "_check_is_genres_valid",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "bool",
                    "str",
                    "float",
                    "List[object]"
                ],
                "category": [
                    "str",
                    "MutableMapping[str, Any]",
                    "List[str]"
                ]
            }
        },
        "Fragment.is_lowest_join": {
            "name": "is_lowest_join",
            "location": 77,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fragment.set_references": {
            "name": "set_references",
            "location": 80,
            "return": [
                "Fragment"
            ],
            "arguments": {
                "self": [
                    "_TFragment"
                ],
                "references": [
                    "Sequence[ebl.bibliography.domain.reference.Reference]"
                ]
            }
        },
        "Fragment.set_text": {
            "name": "set_text",
            "location": 83,
            "return": [
                "Fragment"
            ],
            "arguments": {
                "self": [
                    "_TFragment"
                ],
                "text": [
                    "ebl.transliteration.domain.text.Text"
                ]
            }
        },
        "Fragment.update_lowest_join_transliteration": {
            "name": "update_lowest_join_transliteration",
            "location": 86,
            "return": [
                "Fragment"
            ],
            "arguments": {
                "self": [
                    "_TFragment"
                ],
                "transliteration": [
                    "ebl.fragmentarium.domain.transliteration_update.TransliterationUpdate"
                ],
                "user": [
                    "ebl.users.domain.user.User"
                ]
            }
        },
        "Fragment.update_transliteration": {
            "name": "update_transliteration",
            "location": 96,
            "return": [
                "Fragment"
            ],
            "arguments": {
                "self": [
                    "_TFragment"
                ],
                "transliteration": [
                    "ebl.fragmentarium.domain.transliteration_update.TransliterationUpdate"
                ],
                "user": [
                    "ebl.users.domain.user.User"
                ]
            }
        },
        "Fragment.set_genres": {
            "name": "set_genres",
            "location": 111,
            "return": [
                "Fragment"
            ],
            "arguments": {
                "self": [
                    "_TFragment"
                ],
                "genres_new": [
                    "Sequence[Genre]"
                ]
            }
        },
        "Fragment.update_lemmatization": {
            "name": "update_lemmatization",
            "location": 114,
            "return": [
                "Fragment"
            ],
            "arguments": {
                "self": [
                    "_TFragment"
                ],
                "lemmatization": [
                    "ebl.lemmatization.domain.lemmatization.Lemmatization"
                ]
            }
        },
        "Fragment.get_matching_lines": {
            "name": "get_matching_lines",
            "location": 118,
            "return": [
                "ebl.transliteration.domain.text.Text"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "ebl.transliteration.domain.transliteration_query.TransliterationQuery"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/domain/fragment_info.py": {
        "FragmentInfo.set_references": {
            "name": "set_references",
            "location": 24,
            "return": [
                "FragmentInfo"
            ],
            "arguments": {
                "self": [
                    "_TFragmentInfo"
                ],
                "references": [
                    "Sequence[ebl.bibliography.domain.reference.Reference]"
                ]
            }
        },
        "FragmentInfo.of": {
            "name": "of",
            "location": 28,
            "return": [
                "FragmentInfo"
            ],
            "arguments": {
                "fragment": [
                    "ebl.fragmentarium.domain.fragment.Fragment"
                ],
                "matching_lines": [
                    "Optional[ebl.transliteration.domain.text.Text]"
                ]
            }
        },
        "FragmentInfo.of.is_transliteration": {
            "name": "is_transliteration",
            "location": 29,
            "return": [
                "bool",
                "str",
                "Type"
            ],
            "arguments": {
                "entry": [
                    "ebl.fragmentarium.domain.record.RecordEntry",
                    "int",
                    "Dict[str, int]",
                    "Type"
                ]
            }
        },
        "FragmentInfo.of.get_date": {
            "name": "get_date",
            "location": 32,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "entry": [
                    "ebl.fragmentarium.domain.record.RecordEntry",
                    "str",
                    "int"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/domain/fragment_infos_pagination.py": {},
    "ebl-api-master/ebl/fragmentarium/domain/fragment_pager_info.py": {},
    "ebl-api-master/ebl/fragmentarium/domain/genres.py": {},
    "ebl-api-master/ebl/fragmentarium/domain/joins.py": {
        "Joins.fragments": {
            "name": "fragments",
            "location": 23,
            "return": [
                "list[list]",
                "int",
                "List[str]",
                "List[references.domain.Reference]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Joins.lowest": {
            "name": "lowest",
            "location": 30,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/domain/line_to_vec_encoding.py": {
        "LineToVecEncoding.from_list": {
            "name": "from_list",
            "location": 14,
            "return": [
                "Tuple[(LineToVecEncoding, ...)]"
            ],
            "arguments": {
                "sequence": [
                    "Sequence[int]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/domain/record.py": {
        "now": {
            "name": "now",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "RecordEntry.transliteration": {
            "name": "transliteration",
            "location": 28,
            "return": [
                "RecordEntry"
            ],
            "arguments": {
                "user": [
                    "str"
                ]
            }
        },
        "RecordEntry.revision": {
            "name": "revision",
            "location": 32,
            "return": [
                "RecordEntry"
            ],
            "arguments": {
                "user": [
                    "str"
                ]
            }
        },
        "Record.add_entry": {
            "name": "add_entry",
            "location": 40,
            "return": [
                "Record"
            ],
            "arguments": {
                "self": [
                    "_TRecord"
                ],
                "old_transliteration": [
                    "str"
                ],
                "new_transliteration": [
                    "str"
                ],
                "user": [
                    "ebl.users.domain.user.User"
                ]
            }
        },
        "Record._create_entry": {
            "name": "_create_entry",
            "location": 51,
            "return": [
                "RecordEntry"
            ],
            "arguments": {
                "old_transliteration": [
                    "str"
                ],
                "user": [
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/domain/transliteration_update.py": {
        "TransliterationUpdate._check_signs": {
            "name": "_check_signs",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_attribute": [
                    "Optional[BaseException]",
                    "Callable[[str, object], None]",
                    "Iterable[float]",
                    "bool"
                ],
                "value": [
                    "int",
                    "Optional[str]",
                    "Callable",
                    "str"
                ]
            }
        },
        "TransliterationUpdate._get_questionable_lines": {
            "name": "_get_questionable_lines",
            "location": 26,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "TransliterationUpdate._get_questionable_lines.get_line_number": {
            "name": "get_line_number",
            "location": 31,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "text_line_number": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/domain/__init__.py": {},
    "ebl-api-master/ebl/fragmentarium/infrastructure/collections.py": {},
    "ebl-api-master/ebl/fragmentarium/infrastructure/cropped_sign_images_repository.py": {
        "MongoCroppedSignImagesRepository.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "MongoCroppedSignImagesRepository.create_many": {
            "name": "create_many",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cropped_sign_images": [
                    "Sequence[ebl.fragmentarium.application.cropped_sign_image.CroppedSignImage]"
                ]
            }
        },
        "MongoCroppedSignImagesRepository.query_by_id": {
            "name": "query_by_id",
            "location": 23,
            "return": [
                "ebl.fragmentarium.application.cropped_sign_image.CroppedSignImage"
            ],
            "arguments": {
                "self": [],
                "image_id": [
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/infrastructure/mongo_annotations_repository.py": {
        "has_none_values": {
            "name": "has_none_values",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "dictionary": [
                    "dict"
                ]
            }
        },
        "MongoAnnotationsRepository.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "MongoAnnotationsRepository.create_or_update": {
            "name": "create_or_update",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "annotations": [
                    "ebl.fragmentarium.domain.annotation.Annotations"
                ]
            }
        },
        "MongoAnnotationsRepository.query_by_museum_number": {
            "name": "query_by_museum_number",
            "location": 32,
            "return": [
                "ebl.fragmentarium.domain.annotation.Annotations"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "ebl.transliteration.domain.museum_number.MuseumNumber"
                ]
            }
        },
        "MongoAnnotationsRepository.retrieve_all_non_empty": {
            "name": "retrieve_all_non_empty",
            "location": 40,
            "return": [
                "List[ebl.fragmentarium.domain.annotation.Annotations]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoAnnotationsRepository.find_by_sign": {
            "name": "find_by_sign",
            "location": 46,
            "return": [
                "Sequence[ebl.fragmentarium.domain.annotation.Annotations]"
            ],
            "arguments": {
                "self": [],
                "sign": [
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/infrastructure/mongo_fragment_repository.py": {
        "has_none_values": {
            "name": "has_none_values",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "dictionary": [
                    "dict"
                ]
            }
        },
        "_select_museum_between_two_values": {
            "name": "_select_museum_between_two_values",
            "location": 44,
            "return": [
                "Optional[ebl.transliteration.domain.museum_number.MuseumNumber]"
            ],
            "arguments": {
                "museum_number": [
                    "ebl.transliteration.domain.museum_number.MuseumNumber"
                ],
                "current_museum_number": [
                    "ebl.transliteration.domain.museum_number.MuseumNumber"
                ],
                "current_prev_or_next": [
                    "Optional[ebl.transliteration.domain.museum_number.MuseumNumber]"
                ],
                "comparator": [
                    "Callable[([ebl.transliteration.domain.museum_number.MuseumNumber, ebl.transliteration.domain.museum_number.MuseumNumber], bool)]"
                ]
            }
        },
        "_min_max_museum_numbers": {
            "name": "_min_max_museum_numbers",
            "location": 59,
            "return": [
                "Tuple[(ebl.transliteration.domain.museum_number.MuseumNumber, ebl.transliteration.domain.museum_number.MuseumNumber)]"
            ],
            "arguments": {
                "museum_numbers": [
                    "Sequence[Optional[ebl.transliteration.domain.museum_number.MuseumNumber]]"
                ]
            }
        },
        "_find_adjacent_museum_number_from_sequence": {
            "name": "_find_adjacent_museum_number_from_sequence",
            "location": 68,
            "return": [
                "Tuple[(Optional[ebl.transliteration.domain.museum_number.MuseumNumber], Optional[ebl.transliteration.domain.museum_number.MuseumNumber])]"
            ],
            "arguments": {
                "museum_number": [
                    "ebl.transliteration.domain.museum_number.MuseumNumber"
                ],
                "cursor": [
                    "Sequence[dict]"
                ],
                "is_endpoint": [
                    "bool",
                    "Optional[List[Any]]",
                    "Optional[bool]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "MongoFragmentRepository.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "str",
                    "Iterable[T]"
                ]
            }
        },
        "MongoFragmentRepository.create_indexes": {
            "name": "create_indexes",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoFragmentRepository.count_transliterated_fragments": {
            "name": "count_transliterated_fragments",
            "location": 140,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoFragmentRepository.count_lines": {
            "name": "count_lines",
            "location": 143,
            "return": [
                "int",
                "bool",
                "type",
                "Sequence",
                "str",
                "Optional[Set[str]]",
                "Optional[Callable[[dict], None]]",
                "Tuple[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoFragmentRepository.create": {
            "name": "create",
            "location": 152,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "fragment": [
                    "str",
                    "dict",
                    "Tuple[bytes, bytes, bytes]",
                    "Optional[int]"
                ]
            }
        },
        "MongoFragmentRepository.create_many": {
            "name": "create_many",
            "location": 160,
            "return": [
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "fragments": [
                    "Sequence[ebl.fragmentarium.domain.fragment.Fragment]"
                ]
            }
        },
        "MongoFragmentRepository.create_join": {
            "name": "create_join",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "joins": [
                    "Sequence[Sequence[ebl.fragmentarium.domain.joins.Join]]"
                ]
            }
        },
        "MongoFragmentRepository.query_by_museum_number": {
            "name": "query_by_museum_number",
            "location": 183,
            "return": [
                "bool",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "ebl.transliteration.domain.museum_number.MuseumNumber"
                ]
            }
        },
        "MongoFragmentRepository._query_fragmentarium_create_query": {
            "name": "_query_fragmentarium_create_query",
            "location": 198,
            "return": [
                "dict"
            ],
            "arguments": {
                "query": [
                    "ebl.fragmentarium.application.fragmentarium_search_query.FragmentariumSearchQuery"
                ]
            }
        },
        "MongoFragmentRepository.query_fragmentarium": {
            "name": "query_fragmentarium",
            "location": 219,
            "return": [
                "Tuple[(Sequence[ebl.fragmentarium.domain.fragment.Fragment], int)]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "ebl.fragmentarium.application.fragmentarium_search_query.FragmentariumSearchQuery"
                ]
            }
        },
        "MongoFragmentRepository.query_by_id_and_page_in_references": {
            "name": "query_by_id_and_page_in_references",
            "location": 238,
            "return": [
                "Sequence[ebl.fragmentarium.domain.fragment.Fragment]"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "str"
                ],
                "pages": [
                    "str"
                ]
            }
        },
        "MongoFragmentRepository.query_random_by_transliterated": {
            "name": "query_random_by_transliterated",
            "location": 247,
            "return": [
                "Sequence[ebl.fragmentarium.domain.fragment.Fragment]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoFragmentRepository.query_path_of_the_pioneers": {
            "name": "query_path_of_the_pioneers",
            "location": 254,
            "return": [
                "Sequence[ebl.fragmentarium.domain.fragment.Fragment]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoFragmentRepository.query_transliterated_numbers": {
            "name": "query_transliterated_numbers",
            "location": 261,
            "return": [
                "str",
                "int",
                "Dict[str, int]",
                "search.domain.DocMeta",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoFragmentRepository.query_transliterated_line_to_vec": {
            "name": "query_transliterated_line_to_vec",
            "location": 270,
            "return": [
                "List[ebl.fragmentarium.application.line_to_vec.LineToVecEntry]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoFragmentRepository.query_by_transliterated_sorted_by_date": {
            "name": "query_by_transliterated_sorted_by_date",
            "location": 284,
            "return": [
                "Sequence[ebl.fragmentarium.domain.fragment.Fragment]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoFragmentRepository.query_by_transliterated_not_revised_by_other": {
            "name": "query_by_transliterated_not_revised_by_other",
            "location": 290,
            "return": [
                "bool",
                "Dict[str, Any]",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoFragmentRepository.update_transliteration": {
            "name": "update_transliteration",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fragment": [
                    "str",
                    "Callable",
                    "Mapping[str, Any]",
                    "Optional[str]",
                    "dict",
                    "int"
                ]
            }
        },
        "MongoFragmentRepository.update_genres": {
            "name": "update_genres",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fragment": [
                    "str",
                    "Callable",
                    "Mapping[str, Any]",
                    "Optional[str]",
                    "dict",
                    "int"
                ]
            }
        },
        "MongoFragmentRepository.update_lemmatization": {
            "name": "update_lemmatization",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fragment": [
                    "str",
                    "Callable",
                    "Mapping[str, Any]",
                    "Optional[str]",
                    "dict",
                    "int"
                ]
            }
        },
        "MongoFragmentRepository.query_next_and_previous_folio": {
            "name": "query_next_and_previous_folio",
            "location": 319,
            "return": [
                "Dict[(str, Optional[Dict[(str, Any)]])]"
            ],
            "arguments": {
                "self": [],
                "folio_name": [
                    "str",
                    "ebl.fragmentarium.domain.museum_number.MuseumNumber",
                    "bool"
                ],
                "folio_number": [
                    "str",
                    "int",
                    "bytes"
                ],
                "number": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "MongoFragmentRepository.query_museum_numbers": {
            "name": "query_museum_numbers",
            "location": 366,
            "return": [
                "Sequence[dict]"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ],
                "number_regex": [
                    "str"
                ]
            }
        },
        "MongoFragmentRepository._query_next_and_previous_fragment": {
            "name": "_query_next_and_previous_fragment",
            "location": 375,
            "return": [
                "Tuple[(Optional[ebl.transliteration.domain.museum_number.MuseumNumber], Optional[ebl.transliteration.domain.museum_number.MuseumNumber])]"
            ],
            "arguments": {
                "self": [],
                "museum_number": []
            }
        },
        "MongoFragmentRepository.query_next_and_previous_fragment": {
            "name": "query_next_and_previous_fragment",
            "location": 396,
            "return": [
                "ebl.fragmentarium.domain.fragment_pager_info.FragmentPagerInfo"
            ],
            "arguments": {
                "self": [],
                "museum_number": [
                    "ebl.transliteration.domain.museum_number.MuseumNumber"
                ]
            }
        },
        "MongoFragmentRepository.update_references": {
            "name": "update_references",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fragment": [
                    "Dict[str, Any]",
                    "bool",
                    "Callable",
                    "str",
                    "Optional[str]",
                    "dict",
                    "Mapping[str, Any]",
                    "bytes"
                ]
            }
        },
        "MongoFragmentRepository._map_fragments": {
            "name": "_map_fragments",
            "location": 427,
            "return": [
                "Sequence[ebl.fragmentarium.domain.fragment.Fragment]"
            ],
            "arguments": {
                "self": [],
                "cursor": [
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ]
            }
        },
        "MongoFragmentRepository.query_next_and_previous_folio.create_pipeline": {
            "name": "create_pipeline",
            "location": 323,
            "return": [
                "list[typing.Union[dict[typing.Text, typing.Text],dict[typing.Text, dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, list[typing.Text]]]]],dict[typing.Text, int]]]",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "MongoFragmentRepository.query_next_and_previous_folio.get_numbers": {
            "name": "get_numbers",
            "location": 339,
            "return": [
                "dict[typing.Text, ]",
                "str",
                "None",
                "Iterable[int]",
                "bool"
            ],
            "arguments": {
                "pipeline": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/infrastructure/queries.py": {
        "fragment_is": {
            "name": "fragment_is",
            "location": 16,
            "return": [
                "dict"
            ],
            "arguments": {
                "fragment": [
                    "ebl.fragmentarium.domain.fragment.Fragment"
                ]
            }
        },
        "number_is": {
            "name": "number_is",
            "location": 20,
            "return": [
                "dict"
            ],
            "arguments": {
                "number": [
                    "str"
                ]
            }
        },
        "sample_size_one": {
            "name": "sample_size_one",
            "location": 29,
            "return": [
                "dict"
            ],
            "arguments": {}
        },
        "aggregate_random": {
            "name": "aggregate_random",
            "location": 33,
            "return": [
                "List[dict]"
            ],
            "arguments": {}
        },
        "aggregate_latest": {
            "name": "aggregate_latest",
            "location": 37,
            "return": [
                "List[dict]"
            ],
            "arguments": {}
        },
        "aggregate_needs_revision": {
            "name": "aggregate_needs_revision",
            "location": 60,
            "return": [
                "List[dict]"
            ],
            "arguments": {}
        },
        "aggregate_path_of_the_pioneers": {
            "name": "aggregate_path_of_the_pioneers",
            "location": 136,
            "return": [
                "List[dict]"
            ],
            "arguments": {}
        },
        "is_in_fragmentarium": {
            "name": "is_in_fragmentarium",
            "location": 186,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "local_field": [
                    "str"
                ],
                "as_": [
                    "str"
                ]
            }
        },
        "join_joins": {
            "name": "join_joins",
            "location": 227,
            "return": [
                "List[dict]"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/fragmentarium/infrastructure/__init__.py": {},
    "ebl-api-master/ebl/fragmentarium/web/annotations.py": {
        "AnnotationResource.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "annotation_service": [
                    "ebl.fragmentarium.application.annotations_service.AnnotationsService"
                ]
            }
        },
        "AnnotationResource.on_post": {
            "name": "on_post",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "dict"
                ],
                "resp": [
                    "falcon.Response",
                    "str",
                    "Dict[Hashable, Any]"
                ],
                "number": [
                    "str",
                    "Mapping[str, List[Any]]"
                ]
            }
        },
        "AnnotationResource.on_get": {
            "name": "on_get",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "resp": [
                    "falcon.Response",
                    "bool",
                    "str",
                    "Optional[bool]",
                    "Generator"
                ],
                "number": [
                    "str",
                    "float",
                    "bytes",
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/web/bootstrap.py": {
        "create_fragmentarium_routes": {
            "name": "create_fragmentarium_routes",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "falcon.API",
                    "dict",
                    "sphinx.application.Sphinx"
                ],
                "context": [
                    "ebl.context.Context"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/web/dtos.py": {
        "create_response_dto": {
            "name": "create_response_dto",
            "location": 24,
            "return": [
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "fragment": [
                    "ebl.fragmentarium.domain.fragment.Fragment"
                ],
                "user": [
                    "ebl.users.domain.user.User"
                ],
                "has_photo": [
                    "bool"
                ]
            }
        },
        "parse_museum_number": {
            "name": "parse_museum_number",
            "location": 30,
            "return": [
                "ebl.transliteration.domain.museum_number.MuseumNumber"
            ],
            "arguments": {
                "number": [
                    "str"
                ]
            }
        },
        "FragmentDtoSchema.filter_folios": {
            "name": "filter_folios",
            "location": 20,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/web/folios.py": {
        "check_folio_scope": {
            "name": "check_folio_scope",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "ebl.users.domain.user.User"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "FoliosResource.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "finder": [
                    "ebl.fragmentarium.application.fragment_finder.FragmentFinder"
                ]
            }
        },
        "FoliosResource.on_get": {
            "name": "on_get",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "str",
                    "List[\"ItemShippingTarget\"]"
                ],
                "resp": [
                    "falcon.Response",
                    "str",
                    "Optional[services.user.transfer.models.User]",
                    "services.user.transfer.models.User",
                    "Dict[str, str]",
                    "type"
                ],
                "name": [
                    "str",
                    "Callable",
                    "int"
                ],
                "number": [
                    "str",
                    "Callable[[Any], bool]",
                    "Callable[[List], bool]",
                    "Callable[[str], bool]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/web/folio_pager.py": {
        "FolioPagerResource.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "finder": [
                    "ebl.fragmentarium.application.fragment_finder.FragmentFinder"
                ]
            }
        },
        "FolioPagerResource.on_get": {
            "name": "on_get",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "str",
                    "Sequence[str]"
                ],
                "resp": [
                    "str",
                    "bool"
                ],
                "folio_name": [
                    "bool",
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "int"
                ],
                "folio_number": [
                    "str",
                    "Callable",
                    "dict",
                    "Dict[str, Any]"
                ],
                "number": [
                    "str",
                    "Callable",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/web/fragments.py": {
        "FragmentsResource.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "finder": [
                    "ebl.fragmentarium.application.fragment_finder.FragmentFinder"
                ]
            }
        },
        "FragmentsResource.on_get": {
            "name": "on_get",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "falcon.Request",
                    "Dict[str, Any]",
                    "str",
                    "MutableMapping[domain.Identifier, int]"
                ],
                "resp": [
                    "falcon.Response",
                    "str",
                    "Dict[str, Any]",
                    "app.user.models.User"
                ],
                "number": [
                    "str",
                    "bytes",
                    "falcon.Response",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/web/fragment_genre.py": {
        "FragmentGenreResource.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "updater": [
                    "ebl.fragmentarium.application.fragment_updater.FragmentUpdater"
                ]
            }
        },
        "FragmentGenreResource.on_post": {
            "name": "on_post",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [],
                "resp": [
                    "falcon.Response"
                ],
                "number": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/web/fragment_matcher.py": {
        "FragmentMatcherResource.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fragment_matcher": [
                    "ebl.fragmentarium.application.fragment_matcher.FragmentMatcher"
                ]
            }
        },
        "FragmentMatcherResource.on_get": {
            "name": "on_get",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "falcon.Request",
                    "bool",
                    "str"
                ],
                "resp": [
                    "falcon.Response",
                    "List[str]",
                    "int",
                    "users.models.JustfixUser"
                ],
                "number": [
                    "falcon.Response",
                    "List[str]",
                    "int",
                    "users.models.JustfixUser"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/web/fragment_pager.py": {
        "make_fragment_pager_resource": {
            "name": "make_fragment_pager_resource",
            "location": 14,
            "return": [
                "FragmentPagerResource",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "finder": [
                    "ebl.fragmentarium.application.fragment_finder.FragmentFinder"
                ],
                "cache": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "make_fragment_pager_resource.FragmentPagerResource.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "finder": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "make_fragment_pager_resource.FragmentPagerResource.on_get": {
            "name": "on_get",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "falcon.Request",
                    "bool",
                    "str"
                ],
                "resp": [
                    "int"
                ],
                "number": [
                    "Dict[str, Any]",
                    "str",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/web/fragment_search.py": {
        "FragmentSearch.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fragmentarium": [
                    "ebl.fragmentarium.application.fragmentarium.Fragmentarium"
                ],
                "finder": [
                    "ebl.fragmentarium.application.fragment_finder.FragmentFinder"
                ],
                "transliteration_query_factory": [
                    "ebl.transliteration.application.transliteration_query_factory.TransliterationQueryFactory"
                ],
                "cache": [
                    "bool",
                    "Dict[str, int]",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "FragmentSearch._search_fragmentarium": {
            "name": "_search_fragmentarium",
            "location": 73,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "finder": [
                    "ebl.fragmentarium.application.fragment_finder.FragmentFinder"
                ],
                "query": [
                    "dict"
                ]
            }
        },
        "FragmentSearch._parse_fragmentarium_search": {
            "name": "_parse_fragmentarium_search",
            "location": 79,
            "return": [
                "ebl.fragmentarium.application.fragmentarium_search_query.FragmentariumSearchQuery"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "str"
                ],
                "transliteration": [
                    "str"
                ],
                "bibliographyId": [
                    "str"
                ],
                "pages": [
                    "str"
                ],
                "paginationIndex": [
                    "str"
                ]
            }
        },
        "FragmentSearch._validate_pagination_index": {
            "name": "_validate_pagination_index",
            "location": 105,
            "return": [
                "int"
            ],
            "arguments": {
                "paginationIndex": [
                    "str"
                ]
            }
        },
        "FragmentSearch._validate_pages": {
            "name": "_validate_pages",
            "location": 115,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "id": [
                    "str"
                ],
                "pages": [
                    "str"
                ]
            }
        },
        "FragmentSearch.on_get": {
            "name": "on_get",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "falcon.Response",
                    "Sized",
                    "int",
                    "str"
                ],
                "resp": [
                    "falcon.Response",
                    "Sized",
                    "int",
                    "str"
                ]
            }
        },
        "FragmentSearch.__init__.find_needs_revision": {
            "name": "find_needs_revision",
            "location": 35,
            "return": [
                "int",
                "Union[str, int]",
                "bool",
                "float"
            ],
            "arguments": {
                "_": [
                    "List[str]",
                    "bool",
                    "List[object]",
                    "Sized",
                    "Optional[List]",
                    "str"
                ]
            }
        },
        "FragmentSearch.__init__.find_latest": {
            "name": "find_latest",
            "location": 39,
            "return": [
                "int",
                "Union[str, int]",
                "bool",
                "float"
            ],
            "arguments": {
                "_": [
                    "List[str]",
                    "bool",
                    "List[object]",
                    "Sized",
                    "Optional[List]",
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/web/genres.py": {
        "GenresResource.on_get": {
            "name": "on_get",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_req": [
                    "falcon.Request",
                    "bool",
                    "str"
                ],
                "resp": [
                    "falcon.Response",
                    "Sized",
                    "int",
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/web/lemmatizations.py": {
        "LemmatizationSchema.make_lemmatization": {
            "name": "make_lemmatization",
            "location": 23,
            "return": [
                "Lemmatization",
                "tuple",
                "Union[List[str], str]",
                "List[str]",
                "int",
                "list",
                "bool",
                "List[Tuple]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes"
                ]
            }
        },
        "LemmatizationResource.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "updater": [
                    "ebl.fragmentarium.application.fragment_updater.FragmentUpdater"
                ]
            }
        },
        "LemmatizationResource.on_post": {
            "name": "on_post",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "str",
                    "Any"
                ],
                "resp": [
                    "falcon.Response"
                ],
                "number": [
                    "List[str]",
                    "str",
                    "int"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/web/photo.py": {
        "PhotoResource.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "finder": [
                    "ebl.fragmentarium.application.fragment_finder.FragmentFinder"
                ]
            }
        },
        "PhotoResource.on_get": {
            "name": "on_get",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_req": [
                    "falcon.Request",
                    "bool",
                    "str"
                ],
                "resp": [
                    "falcon.Response",
                    "MutableMapping",
                    "requests.Response"
                ],
                "number": [
                    "bool",
                    "int",
                    "str",
                    "List[List[int]]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/web/references.py": {
        "ReferencesDtoSchema.get_references": {
            "name": "get_references",
            "location": 18,
            "return": [
                "tuple",
                "str",
                "Dict[str, Any]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Iterable",
                    "dict",
                    "str",
                    "bytes",
                    "int",
                    "Iterable[T]"
                ]
            }
        },
        "ReferencesResource.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "updater": [
                    "ebl.fragmentarium.application.fragment_updater.FragmentUpdater"
                ]
            }
        },
        "ReferencesResource.on_post": {
            "name": "on_post",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "str",
                    "Any"
                ],
                "resp": [
                    "falcon.Response"
                ],
                "number": [
                    "str",
                    "Optional[List[Any]]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/web/statistics.py": {
        "make_statistics_resource": {
            "name": "make_statistics_resource",
            "location": 11,
            "return": [
                "StatisticsResource",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cache": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "fragmentarium": [
                    "ebl.fragmentarium.application.fragmentarium.Fragmentarium"
                ]
            }
        },
        "make_statistics_resource.StatisticsResource.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "fragmentarium": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "make_statistics_resource.StatisticsResource.on_get": {
            "name": "on_get",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_req": [
                    "falcon.Request",
                    "bool",
                    "str"
                ],
                "resp": [
                    "Dict[str, str]",
                    "str",
                    "List[Dict[str, str]]",
                    "T"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/web/transliterations.py": {
        "TransliterationResource.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "updater": [
                    "ebl.fragmentarium.application.fragment_updater.FragmentUpdater"
                ],
                "transliteration_factory": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "TransliterationResource.on_post": {
            "name": "on_post",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "Any"
                ],
                "resp": [],
                "number": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TransliterationResource._create_transliteration": {
            "name": "_create_transliteration",
            "location": 46,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "media": [
                    "bool",
                    "float"
                ]
            }
        }
    },
    "ebl-api-master/ebl/fragmentarium/web/__init__.py": {},
    "ebl-api-master/ebl/lemmatization/application/suggestion_finder.py": {
        "LemmaRepository.query_lemmas": {
            "name": "query_lemmas",
            "location": 9,
            "return": [
                "Sequence[Sequence[ebl.dictionary.domain.word.WordId]]"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str"
                ],
                "is_normalized": [
                    "bool"
                ]
            }
        },
        "SuggestionFinder.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dictionary": [
                    "ebl.dictionary.application.dictionary.Dictionary"
                ],
                "repository": [
                    "LemmaRepository"
                ]
            }
        },
        "SuggestionFinder.find_lemmas": {
            "name": "find_lemmas",
            "location": 18,
            "return": [
                "Sequence[Sequence[dict]]"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str"
                ],
                "is_normalized": [
                    "bool"
                ]
            }
        }
    },
    "ebl-api-master/ebl/lemmatization/domain/lemmatization.py": {
        "LemmatizationError.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "typing.Text",
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/lemmatization/infrastrcuture/mongo_suggestions_finder.py": {
        "aggregate_lemmas": {
            "name": "aggregate_lemmas",
            "location": 11,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "word": [
                    "str"
                ],
                "is_normalized": [
                    "bool"
                ]
            }
        },
        "MongoLemmaRepository.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "MongoLemmaRepository.query_lemmas": {
            "name": "query_lemmas",
            "location": 69,
            "return": [
                "Sequence[Sequence[ebl.dictionary.domain.word.WordId]]"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str"
                ],
                "is_normalized": [
                    "bool"
                ]
            }
        }
    },
    "ebl-api-master/ebl/lemmatization/web/bootstrap.py": {
        "create_lemmatization_routes": {
            "name": "create_lemmatization_routes",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "falcon.API",
                    "int"
                ],
                "context": [
                    "ebl.context.Context"
                ]
            }
        }
    },
    "ebl-api-master/ebl/lemmatization/web/lemma_search.py": {
        "get_parameters": {
            "name": "get_parameters",
            "location": 9,
            "return": [
                "Tuple[(str, bool)]"
            ],
            "arguments": {
                "params": [
                    "dict"
                ]
            }
        },
        "LemmaSearch.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "finder": [
                    "ebl.lemmatization.application.suggestion_finder.SuggestionFinder"
                ]
            }
        },
        "LemmaSearch.on_get": {
            "name": "on_get",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "str",
                    "Callable",
                    "users.models.JustfixUser"
                ],
                "resp": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/signs/__init__.py": {},
    "ebl-api-master/ebl/signs/infrastructure/menoizing_sign_repository.py": {
        "MemoizingSignRepository.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delegate": [
                    "ebl.transliteration.application.sign_repository.SignRepository"
                ]
            }
        },
        "MemoizingSignRepository.create": {
            "name": "create",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "sign": [
                    "ebl.transliteration.domain.sign.Sign"
                ]
            }
        },
        "MemoizingSignRepository.find": {
            "name": "find",
            "location": 25,
            "return": [
                "ebl.transliteration.domain.sign.Sign"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "ebl.transliteration.domain.sign.SignName"
                ]
            }
        },
        "MemoizingSignRepository.search_by_lists_name": {
            "name": "search_by_lists_name",
            "location": 28,
            "return": [
                "Sequence[ebl.transliteration.domain.sign.Sign]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "number": [
                    "str"
                ]
            }
        },
        "MemoizingSignRepository.search_include_homophones": {
            "name": "search_include_homophones",
            "location": 31,
            "return": [
                "Sequence[ebl.transliteration.domain.sign.Sign]"
            ],
            "arguments": {
                "self": [],
                "reading": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "MemoizingSignRepository.search_composite_signs": {
            "name": "search_composite_signs",
            "location": 34,
            "return": [
                "Sequence[ebl.transliteration.domain.sign.Sign]"
            ],
            "arguments": {
                "self": [],
                "reading": [
                    "str"
                ],
                "sub_index": [
                    "Optional[int]"
                ]
            }
        },
        "MemoizingSignRepository.search_by_id": {
            "name": "search_by_id",
            "location": 39,
            "return": [
                "Sequence[ebl.transliteration.domain.sign.Sign]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str"
                ]
            }
        },
        "MemoizingSignRepository.search_all": {
            "name": "search_all",
            "location": 42,
            "return": [
                "Sequence[ebl.transliteration.domain.sign.Sign]"
            ],
            "arguments": {
                "self": [],
                "reading": [
                    "str"
                ],
                "sub_index": [
                    "int"
                ]
            }
        },
        "MemoizingSignRepository.search": {
            "name": "search",
            "location": 45,
            "return": [
                "Optional[ebl.transliteration.domain.sign.Sign]"
            ],
            "arguments": {
                "self": [],
                "reading": [
                    "int",
                    "list",
                    "str"
                ],
                "sub_index": [
                    "int",
                    "list",
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/signs/infrastructure/mongo_sign_repository.py": {
        "SignListRecordSchema.make_sign_list_record": {
            "name": "make_sign_list_record",
            "location": 29,
            "return": [
                "SignListRecord"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ValueSchema.make_value": {
            "name": "make_value",
            "location": 38,
            "return": [
                "Value"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ValueSchema.filter_none": {
            "name": "filter_none",
            "location": 42,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "LogogramSchema.make_logogram": {
            "name": "make_logogram",
            "location": 53,
            "return": [
                "Logogram"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "FosseySchema.make_fossey": {
            "name": "make_fossey",
            "location": 76,
            "return": [
                "Fossey"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "SignSchema.make_sign": {
            "name": "make_sign",
            "location": 91,
            "return": [
                "Sign"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "SignDtoSchema.make_sign_dto": {
            "name": "make_sign_dto",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "MongoSignRepository.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database": []
            }
        },
        "MongoSignRepository.create": {
            "name": "create",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "sign": [
                    "ebl.transliteration.domain.sign.Sign"
                ]
            }
        },
        "MongoSignRepository.find": {
            "name": "find",
            "location": 114,
            "return": [
                "ebl.transliteration.domain.sign.Sign"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "ebl.transliteration.domain.sign.SignName"
                ]
            }
        },
        "MongoSignRepository.search": {
            "name": "search",
            "location": 118,
            "return": [
                "Optional[ebl.transliteration.domain.sign.Sign]"
            ],
            "arguments": {
                "self": [],
                "reading": [
                    "str"
                ],
                "sub_index": [
                    "Optional[int]"
                ]
            }
        },
        "MongoSignRepository.search_by_id": {
            "name": "search_by_id",
            "location": 132,
            "return": [
                "Sequence[ebl.transliteration.domain.sign.Sign]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str"
                ]
            }
        },
        "MongoSignRepository.search_all": {
            "name": "search_all",
            "location": 138,
            "return": [
                "Sequence[ebl.transliteration.domain.sign.Sign]"
            ],
            "arguments": {
                "self": [],
                "reading": [
                    "str"
                ],
                "sub_index": [
                    "int"
                ]
            }
        },
        "MongoSignRepository.search_by_lists_name": {
            "name": "search_by_lists_name",
            "location": 144,
            "return": [
                "Sequence[ebl.transliteration.domain.sign.Sign]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "number": [
                    "str"
                ]
            }
        },
        "MongoSignRepository.search_include_homophones": {
            "name": "search_include_homophones",
            "location": 150,
            "return": [
                "Sequence[ebl.transliteration.domain.sign.Sign]"
            ],
            "arguments": {
                "self": [],
                "reading": [
                    "str"
                ]
            }
        },
        "MongoSignRepository.search_composite_signs": {
            "name": "search_composite_signs",
            "location": 184,
            "return": [
                "Sequence[ebl.transliteration.domain.sign.Sign]"
            ],
            "arguments": {
                "self": [],
                "reading": [
                    "str"
                ],
                "sub_index": [
                    "int"
                ]
            }
        }
    },
    "ebl-api-master/ebl/signs/infrastructure/__init__.py": {},
    "ebl-api-master/ebl/signs/web/bootstrap.py": {
        "create_signs_routes": {
            "name": "create_signs_routes",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "falcon.API",
                    "Optional[str]"
                ],
                "context": [
                    "ebl.context.Context"
                ]
            }
        }
    },
    "ebl-api-master/ebl/signs/web/cropped_annotations.py": {
        "CroppedAnnotationsResource.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cropped_annotations_service": [
                    "ebl.fragmentarium.application.cropped_annotations_service.CroppedAnnotationService"
                ]
            }
        },
        "CroppedAnnotationsResource.on_get": {
            "name": "on_get",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_req": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "resp": [
                    "str",
                    "List[str]",
                    "int",
                    "Optional[float]"
                ],
                "sign_name": [
                    "str",
                    "dict",
                    "falcon.Response",
                    "int"
                ]
            }
        }
    },
    "ebl-api-master/ebl/signs/web/signs.py": {
        "SignsResource.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "signs": [
                    "ebl.transliteration.application.sign_repository.SignRepository"
                ]
            }
        },
        "SignsResource.on_get": {
            "name": "on_get",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_req": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "resp": [
                    "str",
                    "dict",
                    "Mapping[str, Any]"
                ],
                "sign_name": [
                    "str",
                    "dict",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/signs/web/sign_search.py": {
        "SignsSearch.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "signs": [
                    "ebl.transliteration.application.sign_repository.SignRepository"
                ]
            }
        },
        "SignsSearch._parse_sub_index": {
            "name": "_parse_sub_index",
            "location": 36,
            "return": [
                "dict"
            ],
            "arguments": {
                "params": [
                    "dict"
                ]
            }
        },
        "SignsSearch.on_get": {
            "name": "on_get",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "str",
                    "int"
                ],
                "resp": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "ebl-api-master/ebl/signs/web/__init__.py": {},
    "ebl-api-master/ebl/tests/assertions.py": {
        "assert_exception_has_errors": {
            "name": "assert_exception_has_errors",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "exc_info": [
                    "str",
                    "int",
                    "IO",
                    "Callable"
                ],
                "line_numbers": [
                    "str",
                    "int",
                    "IO",
                    "Callable"
                ],
                "description": [
                    "str",
                    "int",
                    "IO",
                    "Callable"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/asserts.py": {
        "assert_token_serialization": {
            "name": "assert_token_serialization",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "token": [
                    "ebl.transliteration.domain.tokens.Token"
                ],
                "serialized": [
                    "dict"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/conftest.py": {
        "mongo_client": {
            "name": "mongo_client",
            "location": 78,
            "return": [
                "MongoClient"
            ],
            "arguments": {}
        },
        "database": {
            "name": "database",
            "location": 83,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "mongo_client": []
            }
        },
        "changelog": {
            "name": "changelog",
            "location": 90,
            "return": [
                "Changelog"
            ],
            "arguments": {
                "database": []
            }
        },
        "word_repository": {
            "name": "word_repository",
            "location": 102,
            "return": [
                "TestWordRepository"
            ],
            "arguments": {
                "database": []
            }
        },
        "dictionary": {
            "name": "dictionary",
            "location": 107,
            "return": [
                "Dictionary"
            ],
            "arguments": {
                "word_repository": [],
                "changelog": []
            }
        },
        "cropped_sign_images_repository": {
            "name": "cropped_sign_images_repository",
            "location": 112,
            "return": [
                "MongoCroppedSignImagesRepository"
            ],
            "arguments": {
                "database": []
            }
        },
        "ebl_ai_client": {
            "name": "ebl_ai_client",
            "location": 117,
            "return": [
                "EblAiClient"
            ],
            "arguments": {}
        },
        "bibliography_repository": {
            "name": "bibliography_repository",
            "location": 140,
            "return": [
                "TestBibliographyRepository"
            ],
            "arguments": {
                "database": []
            }
        },
        "bibliography": {
            "name": "bibliography",
            "location": 145,
            "return": [
                "Bibliography"
            ],
            "arguments": {
                "bibliography_repository": [],
                "changelog": []
            }
        },
        "sign_repository": {
            "name": "sign_repository",
            "location": 150,
            "return": [
                "TestSignRepository"
            ],
            "arguments": {
                "database": []
            }
        },
        "transliteration_factory": {
            "name": "transliteration_factory",
            "location": 155,
            "return": [
                "TransliterationUpdateFactory"
            ],
            "arguments": {
                "sign_repository": []
            }
        },
        "parallel_repository": {
            "name": "parallel_repository",
            "location": 160,
            "return": [
                "MongoParallelRepository"
            ],
            "arguments": {
                "database": []
            }
        },
        "parallel_line_injector": {
            "name": "parallel_line_injector",
            "location": 165,
            "return": [
                "ParallelLineInjector"
            ],
            "arguments": {
                "parallel_repository": []
            }
        },
        "text_repository": {
            "name": "text_repository",
            "location": 172,
            "return": [
                "MongoTextRepository"
            ],
            "arguments": {
                "database": []
            }
        },
        "corpus": {
            "name": "corpus",
            "location": 177,
            "return": [
                "Corpus"
            ],
            "arguments": {
                "text_repository": [],
                "bibliography": [],
                "changelog": [],
                "sign_repository": [],
                "parallel_line_injector": []
            }
        },
        "fragment_repository": {
            "name": "fragment_repository",
            "location": 190,
            "return": [
                "MongoFragmentRepository"
            ],
            "arguments": {
                "database": []
            }
        },
        "fragmentarium": {
            "name": "fragmentarium",
            "location": 195,
            "return": [
                "Fragmentarium"
            ],
            "arguments": {
                "fragment_repository": []
            }
        },
        "fragment_finder": {
            "name": "fragment_finder",
            "location": 200,
            "return": [
                "FragmentFinder"
            ],
            "arguments": {
                "fragment_repository": [],
                "dictionary": [],
                "photo_repository": [],
                "file_repository": [],
                "bibliography": [],
                "parallel_line_injector": []
            }
        },
        "fragment_matcher": {
            "name": "fragment_matcher",
            "location": 219,
            "return": [
                "FragmentMatcher"
            ],
            "arguments": {
                "fragment_repository": []
            }
        },
        "fragment_updater": {
            "name": "fragment_updater",
            "location": 224,
            "return": [
                "FragmentUpdater"
            ],
            "arguments": {
                "fragment_repository": [],
                "changelog": [],
                "bibliography": [],
                "photo_repository": [],
                "parallel_line_injector": []
            }
        },
        "file": {
            "name": "file",
            "location": 283,
            "return": [
                "FakeFile"
            ],
            "arguments": {}
        },
        "file_repository": {
            "name": "file_repository",
            "location": 288,
            "return": [
                "TestFilesRepository"
            ],
            "arguments": {
                "database": [],
                "file": []
            }
        },
        "folio_with_allowed_scope": {
            "name": "folio_with_allowed_scope",
            "location": 293,
            "return": [
                "FakeFile"
            ],
            "arguments": {}
        },
        "folio_with_restricted_scope": {
            "name": "folio_with_restricted_scope",
            "location": 298,
            "return": [
                "FakeFile"
            ],
            "arguments": {}
        },
        "folio_repository": {
            "name": "folio_repository",
            "location": 303,
            "return": [
                "TestFilesRepository"
            ],
            "arguments": {
                "database": [],
                "folio_with_allowed_scope": [],
                "folio_with_restricted_scope": []
            }
        },
        "photo": {
            "name": "photo",
            "location": 310,
            "return": [
                "FakeFile"
            ],
            "arguments": {}
        },
        "create_test_photo": {
            "name": "create_test_photo",
            "location": 314,
            "return": [
                "FakeFile"
            ],
            "arguments": {
                "number": [
                    "Union[(str, ebl.transliteration.domain.museum_number.MuseumNumber)]"
                ]
            }
        },
        "photo_repository": {
            "name": "photo_repository",
            "location": 322,
            "return": [
                "TestFilesRepository"
            ],
            "arguments": {
                "database": [],
                "photo": []
            }
        },
        "annotations_repository": {
            "name": "annotations_repository",
            "location": 327,
            "return": [
                "MongoAnnotationsRepository"
            ],
            "arguments": {
                "database": []
            }
        },
        "lemma_repository": {
            "name": "lemma_repository",
            "location": 332,
            "return": [
                "MongoLemmaRepository"
            ],
            "arguments": {
                "database": []
            }
        },
        "annotations_service": {
            "name": "annotations_service",
            "location": 337,
            "return": [
                "AnnotationsService"
            ],
            "arguments": {
                "annotations_repository": [],
                "photo_repository": [],
                "changelog": [],
                "fragment_repository": [],
                "cropped_sign_images_repository": []
            }
        },
        "user": {
            "name": "user",
            "location": 356,
            "return": [
                "Auth0User"
            ],
            "arguments": {}
        },
        "context": {
            "name": "context",
            "location": 382,
            "return": [],
            "arguments": {
                "ebl_ai_client": [],
                "cropped_sign_images_repository": [],
                "word_repository": [],
                "sign_repository": [],
                "file_repository": [],
                "photo_repository": [],
                "folio_repository": [],
                "fragment_repository": [],
                "text_repository": [],
                "changelog": [],
                "bibliography_repository": [],
                "annotations_repository": [],
                "lemma_repository": [],
                "user": [],
                "parallel_line_injector": []
            }
        },
        "client": {
            "name": "client",
            "location": 420,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "guest_client": {
            "name": "guest_client",
            "location": 426,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "cached_client": {
            "name": "cached_client",
            "location": 434,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "text_with_labels": {
            "name": "text_with_labels",
            "location": 442,
            "return": [],
            "arguments": {}
        },
        "word": {
            "name": "word",
            "location": 455,
            "return": [
                "dict[typing.Text, typing.Union[list[typing.Text],bool,typing.Text,list[dict[typing.Text, typing.Union[list[typing.Text],bool]]],list[dict[typing.Text, typing.Union[typing.Text,list[dict[typing.Text, list[typing.Text]]]]]],list[list[dict[typing.Text, typing.Union[list[typing.Text],typing.Text]]]],None]]"
            ],
            "arguments": {}
        },
        "make_changelog_entry": {
            "name": "make_changelog_entry",
            "location": 500,
            "return": [],
            "arguments": {
                "user": []
            }
        },
        "signs": {
            "name": "signs",
            "location": 516,
            "return": [
                "list[Sign]"
            ],
            "arguments": {}
        },
        "create_mongo_bibliography_entry": {
            "name": "create_mongo_bibliography_entry",
            "location": 556,
            "return": [],
            "arguments": {}
        },
        "TestWordRepository.query_by_lemma_prefix": {
            "name": "query_by_lemma_prefix",
            "location": 97,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "_": []
            }
        },
        "TestBibliographyRepository.query_by_author_year_and_title": {
            "name": "query_by_author_year_and_title",
            "location": 124,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "_author": [
                    "None"
                ],
                "_year": [
                    "None"
                ],
                "_title": [
                    "None"
                ],
                "_greater_than": [
                    "bool"
                ]
            }
        },
        "TestSignRepository.search_composite_signs": {
            "name": "search_composite_signs",
            "location": 135,
            "return": [
                "Sequence[ebl.transliteration.domain.sign.Sign]"
            ],
            "arguments": {
                "self": [],
                "reading": [
                    "str"
                ],
                "sub_index": [
                    "int"
                ]
            }
        },
        "FakeFile.__init__": {
            "name": "__init__",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "data": [
                    "bytes"
                ],
                "metadata": [
                    "dict"
                ]
            }
        },
        "FakeFile.length": {
            "name": "length",
            "location": 249,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeFile.content_type": {
            "name": "content_type",
            "location": 253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeFile.metadata": {
            "name": "metadata",
            "location": 257,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeFile.close": {
            "name": "close",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeFile.read": {
            "name": "read",
            "location": 263,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int"
                ]
            }
        },
        "TestFilesRepository.__init__": {
            "name": "__init__",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database": [],
                "bucket": [
                    "str"
                ]
            }
        },
        "TestFilesRepository._create": {
            "name": "_create",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "FakeFile"
                ]
            }
        },
        "make_changelog_entry._make_changelog_entry": {
            "name": "_make_changelog_entry",
            "location": 501,
            "return": [
                "dict[typing.Text, dict]"
            ],
            "arguments": {
                "resource_type": [],
                "resource_id": [],
                "old": [],
                "new": []
            }
        },
        "create_mongo_bibliography_entry._from_bibliography_entry": {
            "name": "_from_bibliography_entry",
            "location": 557,
            "return": [],
            "arguments": {
                "bibliography_entry": [
                    "None"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/downloader.py": {},
    "ebl-api-master/ebl/tests/test_cache.py": {
        "do_get": {
            "name": "do_get",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "resource": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "test_cache_control": {
            "name": "test_cache_control",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cache_control_when": {
            "name": "test_cache_control_when",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestResource.on_get": {
            "name": "on_get",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_req": [
                    "falcon.Request",
                    "bool",
                    "str"
                ],
                "resp": [
                    "falcon.Response",
                    "str"
                ]
            }
        },
        "TestResourceWhen.on_get": {
            "name": "on_get",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_req": [
                    "falcon.Request",
                    "bool",
                    "str"
                ],
                "resp": [
                    "falcon.Response",
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/test_changelog.py": {
        "test_create": {
            "name": "test_create",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "database": [],
                "changelog": [
                    "str"
                ],
                "user": [
                    "str"
                ],
                "make_changelog_entry": []
            }
        }
    },
    "ebl-api-master/ebl/tests/test_dispatcher.py": {
        "test_valid_params": {
            "name": "test_valid_params",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "parameter": [
                    "int",
                    "Optional[int]",
                    "bool"
                ],
                "results": [
                    "int",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "test_invalid_params": {
            "name": "test_invalid_params",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "parameters": [
                    "str"
                ]
            }
        },
        "test_key_error_from_command": {
            "name": "test_key_error_from_command",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_key_error_from_command.raise_error": {
            "name": "raise_error",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "_": [
                    "List[str]",
                    "bool",
                    "Exception"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/test_ebl_ai_client.py": {
        "test_bounding_box_predition_schema": {
            "name": "test_bounding_box_predition_schema",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_generate_annotations": {
            "name": "test_generate_annotations",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "annotations_repository": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "photo_repository": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "changelog": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "when": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_generate_annotations_error": {
            "name": "test_generate_annotations_error",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "annotations_repository": [
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.MagicMock",
                    "Dict[str, Sequence[str]]"
                ],
                "photo_repository": [
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.MagicMock",
                    "Dict[str, Sequence[str]]"
                ],
                "changelog": [
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.MagicMock",
                    "Dict[str, Sequence[str]]"
                ],
                "when": [
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.MagicMock",
                    "Dict[str, Sequence[str]]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/test_merger.py": {
        "inner_merge": {
            "name": "inner_merge",
            "location": 7,
            "return": [
                "Union[(_T0, _T1)]"
            ],
            "arguments": {
                "old": [
                    "_T0"
                ],
                "new": [
                    "_T1"
                ]
            }
        },
        "map_": {
            "name": "map_",
            "location": 11,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "entry": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "remove_values": {
            "name": "remove_values",
            "location": 15,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "row": [
                    "Sequence[str]",
                    "Optional[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "test_merge_empty": {
            "name": "test_merge_empty",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_merge_no_changes": {
            "name": "test_merge_no_changes",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_merge_add_line": {
            "name": "test_merge_add_line",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_merge_remove_line": {
            "name": "test_merge_remove_line",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_merge_edit_line": {
            "name": "test_merge_edit_line",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_merge_edit_lines": {
            "name": "test_merge_edit_lines",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/test_mongo_collection.py": {
        "collection": {
            "name": "collection",
            "location": 8,
            "return": [
                "MongoCollection",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "database": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_create_many_and_find_by_id": {
            "name": "test_create_many_and_find_by_id",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "collection": [
                    "int"
                ]
            }
        },
        "test_create_and_find_by_id": {
            "name": "test_create_and_find_by_id",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "collection": []
            }
        },
        "test_create_duplicate": {
            "name": "test_create_duplicate",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "collection": [
                    "int",
                    "Tuple[float, float, float, float, float]",
                    "float"
                ]
            }
        },
        "test_find_by_id_document_not_found": {
            "name": "test_find_by_id_document_not_found",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "collection": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_find": {
            "name": "test_find",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "collection": [
                    "float"
                ]
            }
        },
        "test_find_document_not_found": {
            "name": "test_find_document_not_found",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "collection": [
                    "str"
                ]
            }
        },
        "test_find_many": {
            "name": "test_find_many",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "collection": [
                    "str"
                ]
            }
        },
        "test_find_many_document_not_found": {
            "name": "test_find_many_document_not_found",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "collection": [
                    "int"
                ]
            }
        },
        "test_aggregate": {
            "name": "test_aggregate",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "collection": [
                    "str",
                    "float"
                ]
            }
        },
        "test_update": {
            "name": "test_update",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "collection": [
                    "Set[int]",
                    "dict"
                ]
            }
        },
        "test_update_document_not_found": {
            "name": "test_update_document_not_found",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "collection": [
                    "bool"
                ]
            }
        },
        "test_replace": {
            "name": "test_replace",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "collection": []
            }
        },
        "test_replace_document_not_found": {
            "name": "test_replace_document_not_found",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "collection": [
                    "bool",
                    "Callable"
                ]
            }
        },
        "test_count": {
            "name": "test_count",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "collection": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/test_schemas.py": {
        "test_str_value_enum": {
            "name": "test_str_value_enum",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_int_value_enum": {
            "name": "test_int_value_enum",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_value_enum_none": {
            "name": "test_value_enum_none",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_value_enum_exception": {
            "name": "test_value_enum_exception",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/__init__.py": {},
    "ebl-api-master/ebl/tests/alignment/test_align.py": {
        "test_align_pair": {
            "name": "test_align_pair",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_align": {
            "name": "test_align",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/alignment/test_alignment_result.py": {
        "test_alignment_result": {
            "name": "test_alignment_result",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/alignment/test_named_sequence.py": {
        "test_of_signs": {
            "name": "test_of_signs",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_of_fragment": {
            "name": "test_of_fragment",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/alignment/test_scoring.py": {
        "test_scoring": {
            "name": "test_scoring",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "first": [
                    "str"
                ],
                "second": [
                    "str"
                ],
                "expected": [
                    "int",
                    "str",
                    "List[int]",
                    "Union[str, float]",
                    "bool"
                ]
            }
        },
        "test_gap_start": {
            "name": "test_gap_start",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_gap_xtension": {
            "name": "test_gap_xtension",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "element": [
                    "str",
                    "int",
                    "bytes"
                ],
                "expected": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/alignment/__init__.py": {},
    "ebl-api-master/ebl/tests/atf_importer/test_atf_importer.py": {
        "test_placeholder_insert": {
            "name": "test_placeholder_insert",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "database": []
            }
        }
    },
    "ebl-api-master/ebl/tests/atf_importer/test_atf_preprocessor.py": {
        "test_text_lines": {
            "name": "test_text_lines",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "line": [],
                "expected": []
            }
        },
        "test_lemma_line_c_type_is_lem_line": {
            "name": "test_lemma_line_c_type_is_lem_line",
            "location": 587,
            "return": [
                "None"
            ],
            "arguments": {
                "line": []
            }
        }
    },
    "ebl-api-master/ebl/tests/atf_importer/__init__.py": {},
    "ebl-api-master/ebl/tests/bibliography/test_bibliography.py": {
        "test_search_container_short_collection_number": {
            "name": "test_search_container_short_collection_number",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "bibliography": [
                    "List[Dict[str, Any]]"
                ],
                "bibliography_repository": [
                    "Union[int, float]",
                    "float"
                ],
                "when": [
                    "Union[int, float]",
                    "float"
                ]
            }
        },
        "test_search_author_title_year": {
            "name": "test_search_author_title_year",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "bibliography": [
                    "int",
                    "str"
                ],
                "bibliography_repository": [
                    "int",
                    "float",
                    "Callable"
                ],
                "when": [
                    "int"
                ]
            }
        },
        "test_find": {
            "name": "test_find",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "bibliography": [
                    "Tuple[int, int]"
                ],
                "bibliography_repository": [
                    "int"
                ],
                "when": [
                    "int"
                ]
            }
        },
        "test_create": {
            "name": "test_create",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "bibliography": [],
                "bibliography_repository": [
                    "str",
                    "int",
                    "bool"
                ],
                "user": [
                    "str"
                ],
                "changelog": [
                    "str"
                ],
                "when": [
                    "float"
                ],
                "create_mongo_bibliography_entry": [
                    "str"
                ]
            }
        },
        "test_create_duplicate": {
            "name": "test_create_duplicate",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "bibliography": [],
                "user": [
                    "ebl.users.domain.user.User"
                ],
                "when": [
                    "ebl.users.domain.user.User",
                    "Callable"
                ],
                "changelog": [
                    "ebl.users.domain.user.User"
                ],
                "bibliography_repository": [
                    "Optional[List[\"ChannelResourceIdentifier\"]]",
                    "Optional[\"ChannelResourceIdentifier\"]"
                ],
                "create_mongo_bibliography_entry": [
                    "ebl.users.domain.user.User"
                ]
            }
        },
        "test_entry_not_found": {
            "name": "test_entry_not_found",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "bibliography": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "bibliography_repository": [
                    "int"
                ],
                "when": [
                    "int"
                ]
            }
        },
        "test_update": {
            "name": "test_update",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "bibliography": [],
                "bibliography_repository": [],
                "user": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "float"
                ],
                "when": [],
                "changelog": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "create_mongo_bibliography_entry": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_update_not_found": {
            "name": "test_update_not_found",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "bibliography_repository": [],
                "bibliography": [],
                "user": [],
                "when": []
            }
        },
        "test_validate_references": {
            "name": "test_validate_references",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "bibliography_repository": [],
                "bibliography": [
                    "tests.setup.SetupTest"
                ],
                "user": [],
                "changelog": [],
                "when": [
                    "tests.basilisp.helpers.CompileFn",
                    "tests.setup.SetupTest"
                ]
            }
        },
        "test_validate_references_invalid": {
            "name": "test_validate_references_invalid",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "bibliography_repository": [],
                "bibliography": [
                    "int"
                ],
                "user": [
                    "str"
                ],
                "changelog": [],
                "when": [
                    "tests.setup.SetupTest"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/bibliography/test_bibliography_repository.py": {
        "test_create": {
            "name": "test_create",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [],
                "bibliography_repository": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "create_mongo_bibliography_entry": []
            }
        },
        "test_create_duplicate": {
            "name": "test_create_duplicate",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "bibliography_repository": [
                    "int",
                    "Tuple[float, float, float, float, float]",
                    "float"
                ]
            }
        },
        "test_find": {
            "name": "test_find",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "bibliography_repository": [
                    "str"
                ],
                "create_mongo_bibliography_entry": [
                    "str"
                ]
            }
        },
        "test_entry_not_found": {
            "name": "test_entry_not_found",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "bibliography_repository": []
            }
        },
        "test_update": {
            "name": "test_update",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "bibliography_repository": []
            }
        },
        "test_update_not_found": {
            "name": "test_update_not_found",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "bibliography_repository": [
                    "bool",
                    "Optional[Dict[str, Any]]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/bibliography/test_bibliography_route.py": {
        "saved_entry": {
            "name": "saved_entry",
            "location": 16,
            "return": [
                "str",
                "Dict[str, str]",
                "bool",
                "int"
            ],
            "arguments": {
                "bibliography": [],
                "user": []
            }
        },
        "test_get_entry": {
            "name": "test_get_entry",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "saved_entry": [
                    "str"
                ]
            }
        },
        "test_get_entry_not_found": {
            "name": "test_get_entry_not_found",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_create_entry": {
            "name": "test_create_entry",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_create_entry_duplicate": {
            "name": "test_create_entry_duplicate",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "saved_entry": [
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_create_entry_invalid": {
            "name": "test_create_entry_invalid",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "transform": [
                    "str",
                    "tests.conftesWorker"
                ],
                "client": [
                    "dict"
                ]
            }
        },
        "test_update_entry": {
            "name": "test_update_entry",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "saved_entry": [
                    "str",
                    "cli_ui.tests.MessageRecorder",
                    "Dict[str, Sequence[Any]]"
                ]
            }
        },
        "test_update_entry_not_found": {
            "name": "test_update_entry_not_found",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "tests.setup.SetupTest"
                ]
            }
        },
        "test_update_entry_invalid": {
            "name": "test_update_entry_invalid",
            "location": 97,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "transform": [
                    "tests.conftesWorker",
                    "str",
                    "slice"
                ],
                "client": [],
                "saved_entry": [
                    "str",
                    "cli_ui.tests.MessageRecorder",
                    "Dict[str, Sequence[Any]]"
                ]
            }
        },
        "test_search": {
            "name": "test_search",
            "location": 118,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "client": [],
                "saved_entry": [],
                "params": []
            }
        }
    },
    "ebl-api-master/ebl/tests/bibliography/test_reference.py": {
        "create_reference_with_document": {
            "name": "create_reference_with_document",
            "location": 25,
            "return": [
                "ebl.bibliography.domain.reference.Reference"
            ],
            "arguments": {
                "bibliography_entry": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_reference": {
            "name": "test_reference",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_defaults": {
            "name": "test_defaults",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_to_dict": {
            "name": "test_to_dict",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_to_dict_with_document": {
            "name": "test_to_dict_with_document",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_from_dict": {
            "name": "test_from_dict",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_from_dict_with_document": {
            "name": "test_from_dict_with_document",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/bibliography/__init__.py": {},
    "ebl-api-master/ebl/tests/cdli/test_cdli_client.py": {
        "test_getting_url": {
            "name": "test_getting_url",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "method": [
                    "str",
                    "Dict[str, str]"
                ],
                "url": [
                    "str"
                ],
                "status": [
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/cdli/test_cdli_route.py": {
        "test_get": {
            "name": "test_get",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "photo_status": [],
                "line_art_status": [],
                "detail_line_art_status": [
                    "Optional[Dict]",
                    "Callable"
                ],
                "client": [
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/cdli/__init__.py": {},
    "ebl-api-master/ebl/tests/corpus/support.py": {
        "allow_references": {
            "name": "allow_references",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "chapter": [
                    "int",
                    "Optional[str]"
                ],
                "bibliography": [
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "allow_signs": {
            "name": "allow_signs",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "signs": [
                    "bool",
                    "str",
                    "int"
                ],
                "sign_list": [
                    "Tuple[int, int]",
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "create_chapter_dto": {
            "name": "create_chapter_dto",
            "location": 22,
            "return": [
                "dict"
            ],
            "arguments": {
                "chapter": [
                    "ebl.corpus.domain.chapter.Chapter"
                ]
            }
        },
        "create_chapter_url": {
            "name": "create_chapter_url",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "chapter": [
                    "ebl.corpus.domain.chapter.Chapter"
                ],
                "suffix": [
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/corpus/test_alignment.py": {
        "test_number_of_lines": {
            "name": "test_number_of_lines",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_number_of_manuscripts": {
            "name": "test_number_of_manuscripts",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/corpus/test_alignment_schemas.py": {
        "test_alignment": {
            "name": "test_alignment",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_only_value": {
            "name": "test_only_value",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/corpus/test_api_chapter_schema.py": {
        "create": {
            "name": "create",
            "location": 29,
            "return": [
                "Tuple[(ebl.corpus.domain.chapter.Chapter, dict)]"
            ],
            "arguments": {
                "include_documents": [
                    "bool"
                ]
            }
        },
        "test_serialize_manuscript": {
            "name": "test_serialize_manuscript",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_deserialize_manuscript": {
            "name": "test_deserialize_manuscript",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_serialize": {
            "name": "test_serialize",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_deserialize": {
            "name": "test_deserialize",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/corpus/test_chapter.py": {
        "test_constructor_sets_correct_fields": {
            "name": "test_constructor_sets_correct_fields",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_duplicate_ids_are_invalid": {
            "name": "test_duplicate_ids_are_invalid",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_duplicate_sigla_are_invalid": {
            "name": "test_duplicate_sigla_are_invalid",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_missing_manuscripts_are_invalid": {
            "name": "test_missing_manuscripts_are_invalid",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_duplicate_manuscript_line_labels_are_invalid": {
            "name": "test_duplicate_manuscript_line_labels_are_invalid",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "make_chapter": []
            }
        },
        "test_duplicate_line_numbers_invalid": {
            "name": "test_duplicate_line_numbers_invalid",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_stage": {
            "name": "test_stage",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_text_lines": {
            "name": "test_text_lines",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_extent": {
            "name": "test_invalid_extent",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_extent_before_translation": {
            "name": "test_extent_before_translation",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_overlapping": {
            "name": "test_overlapping",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_overlapping_languages": {
            "name": "test_overlapping_languages",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_extant_lines": {
            "name": "test_extant_lines",
            "location": 417,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_extant_lines_mixed_sides": {
            "name": "test_extant_lines_mixed_sides",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/corpus/test_chapter_alignment_route.py": {
        "test_updating_alignment": {
            "name": "test_updating_alignment",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "bibliography": [],
                "sign_repository": [],
                "signs": [],
                "text_repository": []
            }
        },
        "test_updating_invalid_stage": {
            "name": "test_updating_invalid_stage",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "bibliography": [],
                "sign_repository": [],
                "signs": [],
                "text_repository": []
            }
        },
        "test_updating_invalid_alignment": {
            "name": "test_updating_invalid_alignment",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "dto": [],
                "expected_status": [],
                "client": [],
                "bibliography": [],
                "sign_repository": [],
                "signs": [],
                "text_repository": []
            }
        }
    },
    "ebl-api-master/ebl/tests/corpus/test_chapter_colophons_route.py": {
        "test_get": {
            "name": "test_get",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "List[str]"
                ],
                "text_repository": [
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/corpus/test_chapter_display.py": {
        "test_line_display_of_line": {
            "name": "test_line_display_of_line",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_chapter_display_of_chapter": {
            "name": "test_chapter_display_of_chapter",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/corpus/test_chapter_display_lines_route.py": {
        "chapter": {
            "name": "chapter",
            "location": 16,
            "return": [
                "int",
                "bytes"
            ],
            "arguments": {}
        },
        "text": {
            "name": "text",
            "location": 21,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "chapter": [
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "url": {
            "name": "url",
            "location": 30,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "Iterable[int]"
            ],
            "arguments": {
                "chapter": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "_make_line_details": {
            "name": "_make_line_details",
            "location": 34,
            "return": [
                "ebl.corpus.web.display_schemas.LineDetailsDisplay"
            ],
            "arguments": {
                "chapter": [
                    "int",
                    "Tuple[int, int]",
                    "list",
                    "str",
                    "Iterable[str]",
                    "Iterable['cirq.Operation']"
                ],
                "bibliography": [
                    "Dict[str, int]",
                    "browse.domain.metadata.DocMetadata",
                    "str"
                ]
            }
        },
        "test_get": {
            "name": "test_get",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "bool",
                    "int",
                    "Dict[str, Any]",
                    "aiohttp.web.Application"
                ],
                "text_repository": [
                    "int",
                    "str",
                    "list",
                    "Set[str]",
                    "List[str]"
                ],
                "text": [
                    "str",
                    "Optional[str]",
                    "float"
                ],
                "chapter": [
                    "str",
                    "int",
                    "bytes"
                ],
                "bibliography": [
                    "int",
                    "float",
                    "str"
                ],
                "url": [
                    "bool",
                    "int",
                    "Dict[str, Any]",
                    "aiohttp.web.Application"
                ]
            }
        },
        "test_chapter_not_found": {
            "name": "test_chapter_not_found",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "bool",
                    "str"
                ],
                "text_repository": [
                    "str"
                ],
                "text": [
                    "str"
                ],
                "chapter": [
                    "str",
                    "bool"
                ],
                "url": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_line_not_found": {
            "name": "test_line_not_found",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "List[str]",
                    "domain.Submission"
                ],
                "text_repository": [
                    "Callable"
                ],
                "chapter": [
                    "str"
                ],
                "bibliography": [
                    "tests.conftesWorker"
                ],
                "url": [
                    "str",
                    "List[str]",
                    "domain.Submission"
                ]
            }
        },
        "test_invalid_line": {
            "name": "test_invalid_line",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "text_repository": [
                    "Callable"
                ],
                "chapter": [
                    "str",
                    "Callable"
                ],
                "bibliography": [
                    "tests.conftesWorker"
                ],
                "url": []
            }
        }
    },
    "ebl-api-master/ebl/tests/corpus/test_chapter_display_route.py": {
        "chapter": {
            "name": "chapter",
            "location": 14,
            "return": [
                "int",
                "bytes"
            ],
            "arguments": {}
        },
        "text": {
            "name": "text",
            "location": 19,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "chapter": [
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "url": {
            "name": "url",
            "location": 28,
            "return": [
                "int",
                "Optional[Union[Any, str]]",
                "Dict[str, int]",
                "bytes",
                "str"
            ],
            "arguments": {
                "chapter": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "test_get": {
            "name": "test_get",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "text_repository": [
                    "Callable"
                ],
                "parallel_line_injector": [
                    "authark.application.domain.repositories.RankingRepository",
                    "authark.application.domain.repositories.DominionRepository",
                    "application.domain.repositories.UserRepository",
                    "application.domain.repositories.DominionRepository",
                    "application.domain.repositories.CredentialRepository",
                    "application.domain.repositories.RoleRepository",
                    "authark.application.domain.repositories.RestrictionRepository"
                ],
                "text": [
                    "int",
                    "bool",
                    "Deque[int]",
                    "str"
                ],
                "chapter": [
                    "str"
                ],
                "url": []
            }
        },
        "test_text_not_found": {
            "name": "test_text_not_found",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "text_repository": [
                    "tests.conftesWorker",
                    "str",
                    "tests.hints.RightFolderCall"
                ],
                "text": [
                    "tests.conftesWorker",
                    "str",
                    "tests.hints.RightFolderCall"
                ],
                "url": []
            }
        },
        "test_chapter_not_found": {
            "name": "test_chapter_not_found",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "text_repository": [
                    "Callable",
                    "List[str]",
                    "str"
                ],
                "chapter": [
                    "Callable",
                    "List[str]",
                    "str"
                ],
                "url": []
            }
        }
    },
    "ebl-api-master/ebl/tests/corpus/test_chapter_extant_lines_route.py": {
        "test_get": {
            "name": "test_get",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "List[str]"
                ],
                "text_repository": [
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/corpus/test_chapter_info.py": {
        "test_of": {
            "name": "test_of",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/corpus/test_chapter_lemmatization_route.py": {
        "test_updating_lemmatization": {
            "name": "test_updating_lemmatization",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "bibliography": [],
                "sign_repository": [],
                "signs": [],
                "text_repository": []
            }
        },
        "test_updating_invalid_stage": {
            "name": "test_updating_invalid_stage",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "bibliography": [],
                "sign_repository": [],
                "signs": [],
                "text_repository": []
            }
        },
        "test_updating_invalid_lemmatization": {
            "name": "test_updating_invalid_lemmatization",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "dto": [],
                "expected_status": [],
                "client": [],
                "bibliography": [],
                "sign_repository": [],
                "signs": [],
                "text_repository": []
            }
        }
    },
    "ebl-api-master/ebl/tests/corpus/test_chapter_lines_route.py": {
        "test_updating": {
            "name": "test_updating",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "bibliography": [],
                "sign_repository": [],
                "signs": [],
                "text_repository": []
            }
        },
        "test_updating_strophic_information": {
            "name": "test_updating_strophic_information",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "bibliography": [],
                "sign_repository": [],
                "signs": [],
                "text_repository": []
            }
        },
        "test_updating_chapter_not_found": {
            "name": "test_updating_chapter_not_found",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "bibliography": []
            }
        },
        "test_updating_invalid_category": {
            "name": "test_updating_invalid_category",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_updating_invalid_id": {
            "name": "test_updating_invalid_id",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_update_invalid_entity": {
            "name": "test_update_invalid_entity",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "bibliography": [],
                "dto": [],
                "expected_status": [],
                "sign_repository": [],
                "signs": [],
                "text_repository": []
            }
        },
        "test_importing": {
            "name": "test_importing",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "bibliography": [],
                "sign_repository": [],
                "signs": [],
                "text_repository": []
            }
        },
        "test_import_invalid_entity": {
            "name": "test_import_invalid_entity",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "bibliography": [],
                "body": [],
                "expected_status": [],
                "sign_repository": [],
                "signs": [],
                "text_repository": []
            }
        }
    },
    "ebl-api-master/ebl/tests/corpus/test_chapter_manuscripts_route.py": {
        "test_get": {
            "name": "test_get",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "bibliography": [
                    "str",
                    "tests.conftesWorker"
                ],
                "text_repository": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "dict"
                ]
            }
        },
        "test_updating": {
            "name": "test_updating",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "bool"
                ],
                "bibliography": [
                    "tests.conftesWorker"
                ],
                "sign_repository": [
                    "tests.conftesWorker"
                ],
                "signs": [
                    "tests.conftesWorker"
                ],
                "text_repository": []
            }
        },
        "test_updating_text_not_found": {
            "name": "test_updating_text_not_found",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "bibliography": [
                    "bool"
                ]
            }
        },
        "test_updating_invalid_reference": {
            "name": "test_updating_invalid_reference",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "bool",
                    "List[str]"
                ],
                "bibliography": [
                    "bool",
                    "tests.conftesWorker",
                    "authark.application.domain.common.User"
                ],
                "sign_repository": [
                    "bool",
                    "tests.conftesWorker",
                    "authark.application.domain.common.User"
                ],
                "signs": [
                    "bool",
                    "tests.conftesWorker",
                    "authark.application.domain.common.User"
                ],
                "text_repository": []
            }
        },
        "test_updating_text_category": {
            "name": "test_updating_text_category",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_updating_invalid_id": {
            "name": "test_updating_invalid_id",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_updating_invalid_stage": {
            "name": "test_updating_invalid_stage",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_update_invalid_entity": {
            "name": "test_update_invalid_entity",
            "location": 234,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "client": [
                    "List[str]"
                ],
                "bibliography": [
                    "bool",
                    "List[int]",
                    "str"
                ],
                "manuscripts": [
                    "List[str]"
                ],
                "expected_status": [
                    "str",
                    "bytes"
                ],
                "sign_repository": [
                    "bool",
                    "List[int]",
                    "str"
                ],
                "signs": [
                    "bool",
                    "List[int]",
                    "str"
                ],
                "text_repository": []
            }
        }
    },
    "ebl-api-master/ebl/tests/corpus/test_chapter_merge.py": {
        "test_merge_manuscript_line": {
            "name": "test_merge_manuscript_line",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "old": [],
                "new": [],
                "expected": []
            }
        },
        "test_merge_line_variant": {
            "name": "test_merge_line_variant",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "old": [],
                "new": [],
                "expected": []
            }
        },
        "test_merge_line": {
            "name": "test_merge_line",
            "location": 486,
            "return": [
                "None"
            ],
            "arguments": {
                "old": [],
                "new": [],
                "expected": []
            }
        },
        "test_merge_chapter": {
            "name": "test_merge_chapter",
            "location": 687,
            "return": [
                "None"
            ],
            "arguments": {
                "old": [],
                "new": [],
                "expected": []
            }
        }
    },
    "ebl-api-master/ebl/tests/corpus/test_chapter_schema.py": {
        "strip_document": {
            "name": "strip_document",
            "location": 64,
            "return": [
                "ebl.bibliography.domain.reference.Reference"
            ],
            "arguments": {
                "reference": [
                    "ebl.bibliography.domain.reference.Reference"
                ]
            }
        },
        "strip_documents": {
            "name": "strip_documents",
            "location": 68,
            "return": [
                "ebl.corpus.domain.chapter.Chapter"
            ],
            "arguments": {
                "chapter": [
                    "ebl.corpus.domain.chapter.Chapter"
                ]
            }
        },
        "get_museum_number": {
            "name": "get_museum_number",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "manuscript": [
                    "ebl.corpus.domain.manuscript.Manuscript"
                ],
                "include_documents": [
                    "bool"
                ]
            }
        },
        "to_dict": {
            "name": "to_dict",
            "location": 97,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "chapter": [
                    "ebl.corpus.domain.chapter.Chapter"
                ],
                "include_documents": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "bytearray"
                ]
            }
        },
        "test_dump": {
            "name": "test_dump",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load": {
            "name": "test_load",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_author_schema": {
            "name": "test_author_schema",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_translator_schema": {
            "name": "test_translator_schema",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/corpus/test_chapter_unplaced_lines_route.py": {
        "test_get": {
            "name": "test_get",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "List[str]"
                ],
                "text_repository": [
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/corpus/test_corpus.py": {
        "expect_bibliography": {
            "name": "expect_bibliography",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "bibliography": [],
                "when": []
            }
        },
        "expect_invalid_references": {
            "name": "expect_invalid_references",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "bibliography": [],
                "when": []
            }
        },
        "expect_signs": {
            "name": "expect_signs",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "signs": [],
                "sign_repository": []
            }
        },
        "expect_chapter_update": {
            "name": "expect_chapter_update",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "bibliography": [],
                "changelog": [],
                "old_chapter": [],
                "updated_chapter": [],
                "signs": [],
                "sign_repository": [],
                "text_repository": [],
                "user": [],
                "when": []
            }
        },
        "expect_find_and_update_chapter": {
            "name": "expect_find_and_update_chapter",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "bibliography": [],
                "changelog": [],
                "old_chapter": [],
                "updated_chapter": [],
                "signs": [],
                "sign_repository": [],
                "text_repository": [],
                "user": [],
                "when": []
            }
        },
        "test_find_text": {
            "name": "test_find_text",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "corpus": [],
                "text_repository": [],
                "bibliography": [],
                "when": []
            }
        },
        "test_listing_texts": {
            "name": "test_listing_texts",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "corpus": [],
                "text_repository": [],
                "when": []
            }
        },
        "test_find_chapter": {
            "name": "test_find_chapter",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "corpus": [],
                "text_repository": [],
                "bibliography": [],
                "when": []
            }
        },
        "test_find_chapter_for_display": {
            "name": "test_find_chapter_for_display",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "corpus": [],
                "text_repository": [],
                "parallel_line_injector": [],
                "when": []
            }
        },
        "test_find_line": {
            "name": "test_find_line",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "corpus": [],
                "text_repository": [],
                "bibliography": [],
                "when": []
            }
        },
        "test_find_line_with_manuscript_joins": {
            "name": "test_find_line_with_manuscript_joins",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "corpus": [],
                "text_repository": [],
                "bibliography": [],
                "when": []
            }
        },
        "test_find_manuscripts": {
            "name": "test_find_manuscripts",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "corpus": [],
                "text_repository": [],
                "bibliography": [],
                "when": []
            }
        },
        "test_find_manuscripts_with_joins": {
            "name": "test_find_manuscripts_with_joins",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "corpus": [],
                "text_repository": [],
                "bibliography": [],
                "when": []
            }
        },
        "test_find_chapter_raises_exception_if_references_not_found": {
            "name": "test_find_chapter_raises_exception_if_references_not_found",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "corpus": [],
                "text_repository": [],
                "bibliography": [],
                "when": []
            }
        },
        "test_update_chapter": {
            "name": "test_update_chapter",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "corpus": [],
                "text_repository": [],
                "bibliography": [],
                "changelog": [],
                "signs": [],
                "sign_repository": [],
                "user": [],
                "when": []
            }
        },
        "test_updating_alignment": {
            "name": "test_updating_alignment",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "variant": [],
                "corpus": [],
                "text_repository": [],
                "bibliography": [],
                "changelog": [],
                "signs": [],
                "sign_repository": [],
                "user": [],
                "when": []
            }
        },
        "test_updating_manuscript_lemmatization": {
            "name": "test_updating_manuscript_lemmatization",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "corpus": [],
                "text_repository": [],
                "bibliography": [],
                "changelog": [],
                "signs": [],
                "sign_repository": [],
                "user": [],
                "when": []
            }
        },
        "test_invalid_alignment": {
            "name": "test_invalid_alignment",
            "location": 504,
            "return": [
                "None"
            ],
            "arguments": {
                "alignment": [],
                "corpus": [],
                "text_repository": [],
                "bibliography": [],
                "when": []
            }
        },
        "test_updating_manuscripts": {
            "name": "test_updating_manuscripts",
            "location": 515,
            "return": [
                "None"
            ],
            "arguments": {
                "corpus": [],
                "text_repository": [],
                "bibliography": [],
                "changelog": [],
                "signs": [],
                "sign_repository": [],
                "user": [],
                "when": []
            }
        },
        "test_invalid_manuscripts": {
            "name": "test_invalid_manuscripts",
            "location": 573,
            "return": [
                "None"
            ],
            "arguments": {
                "manuscripts": [],
                "corpus": [],
                "text_repository": [],
                "bibliography": [],
                "when": []
            }
        },
        "test_update_manuscripts_raises_exception_if_invalid_references": {
            "name": "test_update_manuscripts_raises_exception_if_invalid_references",
            "location": 584,
            "return": [
                "None"
            ],
            "arguments": {
                "corpus": [],
                "text_repository": [],
                "bibliography": [],
                "when": []
            }
        },
        "test_updating_lines_edit": {
            "name": "test_updating_lines_edit",
            "location": 594,
            "return": [
                "None"
            ],
            "arguments": {
                "corpus": [],
                "text_repository": [],
                "bibliography": [],
                "changelog": [],
                "signs": [],
                "sign_repository": [],
                "user": [],
                "when": []
            }
        },
        "test_updating_lines_delete": {
            "name": "test_updating_lines_delete",
            "location": 654,
            "return": [
                "None"
            ],
            "arguments": {
                "corpus": [],
                "text_repository": [],
                "bibliography": [],
                "changelog": [],
                "signs": [],
                "sign_repository": [],
                "user": [],
                "when": []
            }
        },
        "test_updating_lines_add": {
            "name": "test_updating_lines_add",
            "location": 681,
            "return": [
                "None"
            ],
            "arguments": {
                "corpus": [],
                "text_repository": [],
                "bibliography": [],
                "changelog": [],
                "signs": [],
                "sign_repository": [],
                "user": [],
                "when": []
            }
        },
        "test_importing_lines": {
            "name": "test_importing_lines",
            "location": 730,
            "return": [
                "None"
            ],
            "arguments": {
                "corpus": [],
                "text_repository": [],
                "bibliography": [],
                "changelog": [],
                "signs": [],
                "sign_repository": [],
                "user": [],
                "when": []
            }
        },
        "test_merging_lines": {
            "name": "test_merging_lines",
            "location": 760,
            "return": [
                "None"
            ],
            "arguments": {
                "corpus": [],
                "text_repository": [],
                "bibliography": [],
                "changelog": [],
                "signs": [],
                "sign_repository": [],
                "user": [],
                "when": []
            }
        },
        "test_update_lines_raises_exception_if_invalid_signs": {
            "name": "test_update_lines_raises_exception_if_invalid_signs",
            "location": 863,
            "return": [
                "None"
            ],
            "arguments": {
                "corpus": [],
                "text_repository": [],
                "bibliography": [],
                "when": []
            }
        }
    },
    "ebl-api-master/ebl/tests/corpus/test_corpus_text.py": {
        "test_text_constructor_sets_correct_fields": {
            "name": "test_text_constructor_sets_correct_fields",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_title": {
            "name": "test_title",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/corpus/test_create_alignment_map.py": {
        "_make_sequence": {
            "name": "_make_sequence",
            "location": 10,
            "return": [
                "List[ebl.transliteration.domain.tokens.Token]"
            ],
            "arguments": {
                "values": [
                    "List[str]"
                ]
            }
        },
        "test_create_alignment_map": {
            "name": "test_create_alignment_map",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "old": [
                    "int",
                    "Tuple[int, int]",
                    "str"
                ],
                "new": [
                    "int",
                    "Tuple[int, int]",
                    "str"
                ],
                "expected": [
                    "int",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "test_create_alignment_map_remove_unalignable": {
            "name": "test_create_alignment_map_remove_unalignable",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/corpus/test_extant_lines_schema.py": {
        "test_extant_lines_schema": {
            "name": "test_extant_lines_schema",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/corpus/test_line.py": {
        "test_invalid_extent": {
            "name": "test_invalid_extent",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/corpus/test_line_details_schema.py": {
        "test_serialize": {
            "name": "test_serialize",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/corpus/test_line_variant.py": {
        "test_line_variant_constructor": {
            "name": "test_line_variant_constructor",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_enclosures": {
            "name": "test_invalid_enclosures",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_has_variant_aligment": {
            "name": "test_set_has_variant_aligment",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "word": [],
                "expected": []
            }
        }
    },
    "ebl-api-master/ebl/tests/corpus/test_make_title.py": {
        "test_make_title": {
            "name": "test_make_title",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/corpus/test_manuscript.py": {
        "test_is_empty": {
            "name": "test_is_empty",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "line": [
                    "int",
                    "str"
                ],
                "expected": [
                    "int",
                    "str"
                ]
            }
        },
        "test_invalid_siglum": {
            "name": "test_invalid_siglum",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "provenance": [
                    "str",
                    "type",
                    "Type[Any]",
                    "Dict[Hashable, Iterable[Hashable]]",
                    "Callable[..., Awaitable[Any]]"
                ],
                "period": [
                    "str",
                    "type",
                    "Type[Any]",
                    "Dict[Hashable, Iterable[Hashable]]",
                    "Callable[..., Awaitable[Any]]"
                ],
                "type_": [
                    "str",
                    "type",
                    "Type[Any]",
                    "Dict[Hashable, Iterable[Hashable]]",
                    "Callable[..., Awaitable[Any]]"
                ]
            }
        },
        "test_giving_museum_number_and_accession_is_invalid": {
            "name": "test_giving_museum_number_and_accession_is_invalid",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/corpus/test_manuscript_line.py": {
        "test_invalid_labels": {
            "name": "test_invalid_labels",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "labels": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "test_is_beginning_of_side": {
            "name": "test_is_beginning_of_side",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "line": [
                    "int",
                    "list",
                    "List[int]",
                    "Tuple[int]"
                ],
                "is_beginning": [
                    "str",
                    "Set[str]",
                    "bytes"
                ]
            }
        },
        "test_is_end_of_side": {
            "name": "test_is_end_of_side",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "paratext": [
                    "int"
                ],
                "is_end": [
                    "str"
                ]
            }
        },
        "test_update_manuscript_alignment": {
            "name": "test_update_manuscript_alignment",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_textline_content": {
            "name": "test_get_textline_content",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_emptyline_content": {
            "name": "test_get_emptyline_content",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/corpus/test_manuscript_line_display_schema.py": {
        "test_old_siglum_schema": {
            "name": "test_old_siglum_schema",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_api_old_siglum_schema": {
            "name": "test_api_old_siglum_schema",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_serialize": {
            "name": "test_serialize",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/corpus/test_mongo_text_repository.py": {
        "when_text_in_collection": {
            "name": "when_text_in_collection",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "when_chapter_in_collection": {
            "name": "when_chapter_in_collection",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [
                    "str",
                    "Iterable[T]",
                    "Optional[str]"
                ],
                "chapter": [
                    "str",
                    "Iterable[T]",
                    "Optional[str]"
                ]
            }
        },
        "test_creating_text": {
            "name": "test_creating_text",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [
                    "str",
                    "Callable"
                ],
                "text_repository": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "Tuple[str, str]"
                ]
            }
        },
        "test_creating_chapter": {
            "name": "test_creating_chapter",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [],
                "text_repository": [
                    "str"
                ]
            }
        },
        "test_it_is_not_possible_to_create_duplicate_texts": {
            "name": "test_it_is_not_possible_to_create_duplicate_texts",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "text_repository": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "test_it_is_not_possible_to_create_duplicate_chapters": {
            "name": "test_it_is_not_possible_to_create_duplicate_chapters",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "text_repository": [
                    "str"
                ]
            }
        },
        "test_finding_text": {
            "name": "test_finding_text",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [
                    "str",
                    "authark.application.informers.authark_informer.AutharkInformer",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "text_repository": [
                    "str",
                    "Union[str, int]"
                ],
                "bibliography_repository": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "Tuple[str, str]",
                    "Optional[Dict[str, Any]]"
                ],
                "fragment_repository": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "Tuple[str, str]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "test_find_raises_exception_if_text_not_found": {
            "name": "test_find_raises_exception_if_text_not_found",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "text_repository": [
                    "str",
                    "int"
                ]
            }
        },
        "test_listing_texts": {
            "name": "test_listing_texts",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [
                    "str",
                    "List[str]"
                ],
                "text_repository": [
                    "str",
                    "List[Tuple]"
                ],
                "bibliography_repository": [
                    "str",
                    "Tuple[str, str]",
                    "Callable"
                ]
            }
        },
        "test_finding_chapter": {
            "name": "test_finding_chapter",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [
                    "str",
                    "Tuple[str, str]"
                ],
                "text_repository": [
                    "str",
                    "ebl.transliteration.domain.texText"
                ]
            }
        },
        "test_finding_chapter_for_display": {
            "name": "test_finding_chapter_for_display",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [
                    "str",
                    "Tuple[str, str]",
                    "Callable",
                    "kata.domain.services.InitKataService"
                ],
                "text_repository": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_finding_line": {
            "name": "test_finding_line",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [
                    "str",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "text_repository": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_finding_line_not_found": {
            "name": "test_finding_line_not_found",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "Tuple[str, str]"
                ],
                "text_repository": [
                    "cli_ui.tests.MessageRecorder",
                    "str",
                    "Union[int, str]",
                    "int"
                ]
            }
        },
        "test_finding_line_chapter_not_found": {
            "name": "test_finding_line_chapter_not_found",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "Type[Any]"
                ],
                "text_repository": [
                    "str"
                ]
            }
        },
        "test_updating_chapter": {
            "name": "test_updating_chapter",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [
                    "str",
                    "Tuple[str, str]"
                ],
                "text_repository": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_updating_non_existing_chapter_raises_exception": {
            "name": "test_updating_non_existing_chapter_raises_exception",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "text_repository": [
                    "str"
                ]
            }
        },
        "test_query_by_transliteration": {
            "name": "test_query_by_transliteration",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "signs": [
                    "dict",
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]"
                ],
                "is_match": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "text_repository": [
                    "str",
                    "tests.clienMDMClient"
                ]
            }
        },
        "test_query_manuscripts_by_chapter": {
            "name": "test_query_manuscripts_by_chapter",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [
                    "str",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "text_repository": [
                    "str",
                    "int"
                ]
            }
        },
        "test_query_manuscripts_by_chapter_not_found": {
            "name": "test_query_manuscripts_by_chapter_not_found",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [
                    "List[str]",
                    "str",
                    "Type[Any]",
                    "Iterable[str]"
                ],
                "text_repository": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_query_manuscripts_with_joins_by_chapter_no_joins": {
            "name": "test_query_manuscripts_with_joins_by_chapter_no_joins",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [
                    "str",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "text_repository": [
                    "str"
                ]
            }
        },
        "test_query_manuscripts_with_joins_is_in_fragmentarium": {
            "name": "test_query_manuscripts_with_joins_is_in_fragmentarium",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [
                    "str",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "text_repository": [
                    "str"
                ],
                "fragment_repository": [
                    "str",
                    "tests.e2e.Helper"
                ]
            }
        },
        "test_query_manuscripts_with_joins_by_chapter": {
            "name": "test_query_manuscripts_with_joins_by_chapter",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [
                    "str"
                ],
                "text_repository": [
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/corpus/test_parse_chapter.py": {
        "parse_siglum": {
            "name": "parse_siglum",
            "location": 34,
            "return": [
                "Sequence[ebl.corpus.domain.line.Line]"
            ],
            "arguments": {
                "siglum": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_parse_siglum": {
            "name": "test_parse_siglum",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "period": [
                    "type",
                    "Type[Any]"
                ],
                "provenance": [
                    "type",
                    "Type[Any]"
                ],
                "type_": [
                    "type",
                    "Type[Any]"
                ],
                "disambiquator": [
                    "type",
                    "Type[Any]"
                ]
            }
        },
        "test_parse_siglum_standard_text": {
            "name": "test_parse_siglum_standard_text",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "disambiquator": []
            }
        },
        "parse_manuscript": {
            "name": "parse_manuscript",
            "location": 61,
            "return": [
                "Sequence[ebl.corpus.domain.line.Line]"
            ],
            "arguments": {
                "atf": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_parse_manuscript": {
            "name": "test_parse_manuscript",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "lines": [
                    "str",
                    "Callable",
                    "List[str]",
                    "int"
                ],
                "expected": [
                    "int",
                    "float",
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_parse_manuscript_invalid": {
            "name": "test_parse_manuscript_invalid",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "parse_reconstruction": {
            "name": "parse_reconstruction",
            "location": 118,
            "return": [
                "Sequence[ebl.corpus.domain.line.Line]"
            ],
            "arguments": {
                "atf": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_parse_reconstruction": {
            "name": "test_parse_reconstruction",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "lines": [
                    "str",
                    "Callable",
                    "List[str]",
                    "int"
                ],
                "expected": [
                    "int",
                    "float",
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "parse_line_variant": {
            "name": "parse_line_variant",
            "location": 156,
            "return": [
                "Sequence[ebl.corpus.domain.line.Line]"
            ],
            "arguments": {
                "atf": [
                    "str",
                    "int",
                    "set"
                ]
            }
        },
        "test_parse_line_variant": {
            "name": "test_parse_line_variant",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "lines": [
                    "str",
                    "int",
                    "Callable",
                    "dict"
                ],
                "expected": [
                    "str",
                    "Dict[str, str]",
                    "List[str]"
                ]
            }
        },
        "parse_chapter_line": {
            "name": "parse_chapter_line",
            "location": 218,
            "return": [
                "Sequence[ebl.corpus.domain.line.Line]"
            ],
            "arguments": {
                "atf": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "test_parse_chapter_line": {
            "name": "test_parse_chapter_line",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "lines": [
                    "str",
                    "Callable",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "expected": [
                    "int",
                    "bool",
                    "str",
                    "List[str]",
                    "float"
                ]
            }
        },
        "test_parse_translation": {
            "name": "test_parse_translation",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "lines": [
                    "str",
                    "Callable",
                    "List[str]",
                    "int"
                ],
                "expected": [
                    "int",
                    "float",
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_parse_chapter": {
            "name": "test_parse_chapter",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "lines": [
                    "str",
                    "Callable",
                    "List[str]",
                    "int"
                ],
                "expected": [
                    "int",
                    "float",
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_parse_chapter_empty": {
            "name": "test_parse_chapter_empty",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/corpus/test_stage.py": {
        "test_abbreviation": {
            "name": "test_abbreviation",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "bool",
                    "int"
                ],
                "abbreviation": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/corpus/test_text.py": {
        "test_has_multiple_stages": {
            "name": "test_has_multiple_stages",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "chapters": [
                    "str"
                ],
                "expected": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/corpus/test_texts_route.py": {
        "create_dto": {
            "name": "create_dto",
            "location": 11,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "test_get_text": {
            "name": "test_get_text",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "domain.Submission",
                    "str",
                    "instark.application.managers.SessionManager"
                ],
                "bibliography": [
                    "list",
                    "dict"
                ],
                "sign_repository": [
                    "list",
                    "dict"
                ],
                "signs": [
                    "list",
                    "dict"
                ],
                "text_repository": [
                    "tests.conftesWorker"
                ]
            }
        },
        "test_text_not_found": {
            "name": "test_text_not_found",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_invalid_section": {
            "name": "test_invalid_section",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_invalid_index": {
            "name": "test_invalid_index",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_listing_texts": {
            "name": "test_listing_texts",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "bibliography": [
                    "list",
                    "dict"
                ],
                "sign_repository": [
                    "list",
                    "dict"
                ],
                "signs": [
                    "list",
                    "dict"
                ],
                "text_repository": [
                    "str",
                    "Dict[str, Any]",
                    "aiohttp.web.Application"
                ]
            }
        },
        "test_searching_texts": {
            "name": "test_searching_texts",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "bibliography": [
                    "bool",
                    "tests.conftesWorker"
                ],
                "sign_repository": [
                    "bool",
                    "tests.conftesWorker"
                ],
                "signs": [
                    "bool",
                    "tests.conftesWorker"
                ],
                "text_repository": [
                    "raiden.tests.integration.fixtures.raiden_network.RestartNode"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/corpus/test_text_id.py": {
        "test_str": {
            "name": "test_str",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "text_id": [
                    "str",
                    "int"
                ],
                "expected": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/corpus/__init__.py": {},
    "ebl-api-master/ebl/tests/dictionary/test_dictionary.py": {
        "test_create_and_find": {
            "name": "test_create_and_find",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [],
                "dictionary": [
                    "str"
                ],
                "word": [
                    "str"
                ]
            }
        },
        "test_word_not_found": {
            "name": "test_word_not_found",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "dictionary": []
            }
        },
        "test_search_finds_all_homonyms": {
            "name": "test_search_finds_all_homonyms",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "dictionary": [
                    "bool",
                    "set",
                    "Dict[str, Any]"
                ],
                "word": [
                    "set",
                    "bool"
                ]
            }
        },
        "test_search_finds_by_meaning": {
            "name": "test_search_finds_by_meaning",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "dictionary": [
                    "Dict[str, Any]",
                    "int",
                    "str"
                ],
                "word": [
                    "int",
                    "str",
                    "Callable"
                ]
            }
        },
        "test_search_finds_duplicates": {
            "name": "test_search_finds_duplicates",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "dictionary": [
                    "Dict[str, Any]",
                    "int",
                    "str"
                ],
                "word": [
                    "int",
                    "str",
                    "Callable"
                ]
            }
        },
        "test_search_not_found": {
            "name": "test_search_not_found",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "dictionary": [
                    "Tuple[int, int]"
                ]
            }
        },
        "test_update": {
            "name": "test_update",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "dictionary": [],
                "word": [
                    "Dict[str, Any]"
                ],
                "user": []
            }
        },
        "test_changelog": {
            "name": "test_changelog",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "dictionary": [
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "word": [
                    "Dict[str, Any]"
                ],
                "user": [],
                "database": [
                    "dict",
                    "str"
                ],
                "make_changelog_entry": [
                    "float"
                ]
            }
        },
        "test_update_word_not_found": {
            "name": "test_update_word_not_found",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "dictionary": [
                    "bool"
                ],
                "word": [
                    "bool"
                ],
                "user": [
                    "bool"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/dictionary/test_words_route.py": {
        "saved_word": {
            "name": "saved_word",
            "location": 8,
            "return": [
                "dict",
                "str",
                "Dict[str, str]",
                "bool",
                "int"
            ],
            "arguments": {
                "dictionary": [
                    "str",
                    "Dict[str, str]",
                    "bool",
                    "int"
                ],
                "word": [
                    "str",
                    "Dict[str, str]",
                    "bool",
                    "int"
                ]
            }
        },
        "test_get_word": {
            "name": "test_get_word",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "saved_word": [
                    "bool"
                ]
            }
        },
        "test_word_not_found": {
            "name": "test_word_not_found",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_search_word": {
            "name": "test_search_word",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "saved_word": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_search_word_lemma": {
            "name": "test_search_word_lemma",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "saved_word": [
                    "bool",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_search_word_no_query": {
            "name": "test_search_word_no_query",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_search_word_invalid_query": {
            "name": "test_search_word_invalid_query",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_search_word_double_query": {
            "name": "test_search_word_double_query",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_update_word": {
            "name": "test_update_word",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "transform": [
                    "str"
                ],
                "client": [],
                "saved_word": [],
                "user": [
                    "Dict[str, Sequence[Any]]",
                    "int"
                ],
                "database": [
                    "Dict[str, Sequence[Any]]",
                    "int"
                ]
            }
        },
        "test_update_word_not_found": {
            "name": "test_update_word_not_found",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "word": [
                    "str"
                ]
            }
        },
        "test_update_word_invalid_entity": {
            "name": "test_update_word_invalid_entity",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "transform": [
                    "str",
                    "slice"
                ],
                "client": [],
                "saved_word": [
                    "str",
                    "slice"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/dictionary/test_word_repositor.py": {
        "test_create": {
            "name": "test_create",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [],
                "word_repository": [],
                "word": [
                    "float"
                ]
            }
        },
        "test_find": {
            "name": "test_find",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [
                    "Tuple[int, int]"
                ],
                "word_repository": [
                    "str"
                ],
                "word": [
                    "int"
                ]
            }
        },
        "test_word_not_found": {
            "name": "test_word_not_found",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "word_repository": []
            }
        },
        "test_search_finds_all_homonyms": {
            "name": "test_search_finds_all_homonyms",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [],
                "word_repository": [
                    "bool"
                ],
                "word": [
                    "bool"
                ]
            }
        },
        "test_search_finds_by_meaning": {
            "name": "test_search_finds_by_meaning",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [],
                "word_repository": [],
                "word": [
                    "str"
                ]
            }
        },
        "test_search_finds_duplicates": {
            "name": "test_search_finds_duplicates",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [],
                "word_repository": [],
                "word": [
                    "str"
                ]
            }
        },
        "test_search_not_found": {
            "name": "test_search_not_found",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "word_repository": [
                    "Tuple[int, int]"
                ]
            }
        },
        "test_update": {
            "name": "test_update",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "word_repository": [
                    "Set[int]"
                ],
                "word": []
            }
        }
    },
    "ebl-api-master/ebl/tests/dictionary/test_word_schema.py": {
        "test_serialization_and_deserialization": {
            "name": "test_serialization_and_deserialization",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "word": [
                    "dict"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/dictionary/__init__.py": {},
    "ebl-api-master/ebl/tests/factories/annotation.py": {},
    "ebl-api-master/ebl/tests/factories/bibliography.py": {},
    "ebl-api-master/ebl/tests/factories/collections.py": {},
    "ebl-api-master/ebl/tests/factories/corpus.py": {},
    "ebl-api-master/ebl/tests/factories/fragment.py": {},
    "ebl-api-master/ebl/tests/factories/ids.py": {},
    "ebl-api-master/ebl/tests/factories/parallel_line.py": {},
    "ebl-api-master/ebl/tests/factories/record.py": {},
    "ebl-api-master/ebl/tests/factories/__init__.py": {},
    "ebl-api-master/ebl/tests/files/test_images_route.py": {
        "test_get_image": {
            "name": "test_get_image",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "file": [
                    "str"
                ]
            }
        },
        "test_get_image_not_found": {
            "name": "test_get_image_not_found",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_get_image_as_guest": {
            "name": "test_get_image_as_guest",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "guest_client": [
                    "str"
                ],
                "file": []
            }
        }
    },
    "ebl-api-master/ebl/tests/files/__init__.py": {},
    "ebl-api-master/ebl/tests/fragmentarium/test_annotation.py": {
        "test_geometry": {
            "name": "test_geometry",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_data": {
            "name": "test_data",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_annotation": {
            "name": "test_annotation",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_annotations": {
            "name": "test_annotations",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_annotations_from_bounding_box_predictions": {
            "name": "test_annotations_from_bounding_box_predictions",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bounding_boxes_prediction": {
            "name": "test_bounding_boxes_prediction",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/fragmentarium/test_annotations_repository.py": {
        "test_find_by_sign": {
            "name": "test_find_by_sign",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [
                    "set",
                    "Dict[str, Any]",
                    "bool"
                ],
                "annotations_repository": [
                    "set",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_retrieve_all": {
            "name": "test_retrieve_all",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [
                    "set",
                    "Dict[str, Any]",
                    "bool",
                    "str"
                ],
                "annotations_repository": [
                    "instark.application.managers.SubscriptionManager",
                    "instark.application.managers.NotificationManager"
                ]
            }
        },
        "test_retrieve_all_non_empty": {
            "name": "test_retrieve_all_non_empty",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [
                    "set",
                    "Dict[str, Any]",
                    "bool",
                    "str"
                ],
                "annotations_repository": [
                    "instark.application.managers.SubscriptionManager",
                    "instark.application.managers.NotificationManager"
                ]
            }
        },
        "test_create": {
            "name": "test_create",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [
                    "tests.basilisp.helpers.CompileFn",
                    "str"
                ],
                "annotations_repository": []
            }
        },
        "test_update": {
            "name": "test_update",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [
                    "tests.basilisp.helpers.CompileFn",
                    "str"
                ],
                "annotations_repository": []
            }
        },
        "test_query_by_museum_number": {
            "name": "test_query_by_museum_number",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [
                    "str"
                ],
                "annotations_repository": [
                    "Dict[str, float]",
                    "str",
                    "int"
                ]
            }
        },
        "test_query_by_museum_number_not_found": {
            "name": "test_query_by_museum_number_not_found",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "bool"
                ],
                "annotations_repository": [
                    "str",
                    "int",
                    "tests.async_mock.Mock"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/fragmentarium/test_annotations_route.py": {
        "test_find_annotations": {
            "name": "test_find_annotations",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_generate_annotations": {
            "name": "test_generate_annotations",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "client": [],
                "photo_repository": [
                    "bool"
                ]
            }
        },
        "test_find_not_allowed": {
            "name": "test_find_not_allowed",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "guest_client": []
            }
        },
        "test_update": {
            "name": "test_update",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "fragment_repository": [
                    "str",
                    "tests.conftesWorker"
                ],
                "photo_repository": []
            }
        },
        "test_update_number_mismatch": {
            "name": "test_update_number_mismatch",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_update_invalid_number": {
            "name": "test_update_invalid_number",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_update_invalid": {
            "name": "test_update_invalid",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_update_not_allowed": {
            "name": "test_update_not_allowed",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "guest_client": []
            }
        }
    },
    "ebl-api-master/ebl/tests/fragmentarium/test_annotations_schema.py": {
        "test_load": {
            "name": "test_load",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dump": {
            "name": "test_dump",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/fragmentarium/test_annotations_service.py": {
        "test_label_by_line_number": {
            "name": "test_label_by_line_number",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "text_with_labels": [
                    "str",
                    "IO[bytes]"
                ],
                "annotations_service": [
                    "str",
                    "IO[bytes]"
                ]
            }
        },
        "test_cropped_images_from_sign": {
            "name": "test_cropped_images_from_sign",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "annotations_repository": [
                    "bool",
                    "Literal",
                    "List[str]",
                    "str",
                    "List[Tuple[str, Any]]"
                ],
                "fragment_repository": [
                    "float",
                    "str",
                    "bool"
                ],
                "photo_repository": [
                    "str",
                    "Optional[bool]",
                    "Exception"
                ],
                "when": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "text_with_labels": [
                    "str",
                    "dict",
                    "List[str]",
                    "int"
                ],
                "annotations_service": [
                    "str",
                    "int",
                    "tests.conftesWorker"
                ]
            }
        },
        "test_generate_annotations": {
            "name": "test_generate_annotations",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "annotations_repository": [
                    "str"
                ],
                "photo_repository": [
                    "str",
                    "bytes"
                ],
                "changelog": [
                    "str"
                ],
                "when": [
                    "str",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "fragment_repository": [
                    "str"
                ],
                "cropped_sign_images_repository": [
                    "str"
                ]
            }
        },
        "test_find": {
            "name": "test_find",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "annotations_repository": [
                    "int"
                ],
                "annotations_service": [
                    "Tuple[int, int]"
                ],
                "when": [
                    "int"
                ]
            }
        },
        "test_update": {
            "name": "test_update",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "annotations_service": [
                    "str"
                ],
                "annotations_repository": [
                    "str"
                ],
                "photo_repository": [
                    "str",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "fragment_repository": [
                    "int"
                ],
                "cropped_sign_images_repository": [],
                "when": [
                    "Union[int, float]",
                    "int",
                    "bool"
                ],
                "user": [
                    "str"
                ],
                "changelog": [
                    "str",
                    "bool"
                ],
                "text_with_labels": []
            }
        }
    },
    "ebl-api-master/ebl/tests/fragmentarium/test_create_line_to_vec.py": {
        "test_create_line_to_vec_from_atf": {
            "name": "test_create_line_to_vec_from_atf",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "atf": [],
                "expected": [],
                "transliteration_factory": []
            }
        },
        "test_split_lines": {
            "name": "test_split_lines",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "atf": [],
                "expected": []
            }
        },
        "test_split_multiple_lines": {
            "name": "test_split_multiple_lines",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_line_to_vec": {
            "name": "test_create_line_to_vec",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_line_to_vec_encoding_from_list": {
            "name": "test_line_to_vec_encoding_from_list",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/fragmentarium/test_cropped_annotations_service.py": {
        "test_find_annotations_by_sign": {
            "name": "test_find_annotations_by_sign",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "annotations_repository": [
                    "bool",
                    "Dict[str, Any]"
                ],
                "cropped_sign_images_repository": [
                    "bool",
                    "Dict[str, Any]",
                    "str"
                ],
                "when": []
            }
        }
    },
    "ebl-api-master/ebl/tests/fragmentarium/test_dtos.py": {
        "test_create_response_dto": {
            "name": "test_create_response_dto",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "bool"
                ]
            }
        },
        "test_create_fragment_info_dto": {
            "name": "test_create_fragment_info_dto",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_museum_number": {
            "name": "test_parse_museum_number",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_invalid_museum_number": {
            "name": "test_parse_invalid_museum_number",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/fragmentarium/test_folio.py": {
        "test_name": {
            "name": "test_name",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_number": {
            "name": "test_number",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_file_name": {
            "name": "test_file_name",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/fragmentarium/test_folios.py": {
        "test_filter_folios": {
            "name": "test_filter_folios",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "Callable",
                    "Callable[[list], None]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/fragmentarium/test_folios_route.py": {
        "test_get_folio": {
            "name": "test_get_folio",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "folio_with_allowed_scope": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_get_folio_no_access": {
            "name": "test_get_folio_no_access",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "folio_with_restricted_scope": [
                    "str"
                ]
            }
        },
        "test_get_folio_name_not_found": {
            "name": "test_get_folio_name_not_found",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_get_folio_number_not_found": {
            "name": "test_get_folio_number_not_found",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_get_guest_scope": {
            "name": "test_get_guest_scope",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "guest_client": [],
                "folio_with_allowed_scope": [
                    "str",
                    "Dict[str, Sequence[str]]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/fragmentarium/test_fragment.py": {
        "test_number": {
            "name": "test_number",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_accession": {
            "name": "test_accession",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cdli_number": {
            "name": "test_cdli_number",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bm_id_number": {
            "name": "test_bm_id_number",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_edited_in_oracc_project": {
            "name": "test_edited_in_oracc_project",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_publication": {
            "name": "test_publication",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_description": {
            "name": "test_description",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_collection": {
            "name": "test_collection",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_script": {
            "name": "test_script",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_museum": {
            "name": "test_museum",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_length": {
            "name": "test_length",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_width": {
            "name": "test_width",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_thickness": {
            "name": "test_thickness",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_joins": {
            "name": "test_joins",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_notes": {
            "name": "test_notes",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_signs": {
            "name": "test_signs",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_record": {
            "name": "test_record",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_folios": {
            "name": "test_folios",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_text": {
            "name": "test_text",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_uncurated_references": {
            "name": "test_uncurated_references",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_uncurated_references_none": {
            "name": "test_uncurated_references_none",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_references": {
            "name": "test_references",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_references_default": {
            "name": "test_references_default",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_genre": {
            "name": "test_genre",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_genre": {
            "name": "test_set_genre",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_genre": {
            "name": "test_invalid_genre",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_transliteration": {
            "name": "test_add_transliteration",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "user": []
            }
        },
        "test_update_transliteration": {
            "name": "test_update_transliteration",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "user": []
            }
        },
        "test_add_lowest_join_transliteration": {
            "name": "test_add_lowest_join_transliteration",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "user": []
            }
        },
        "test_update_notes": {
            "name": "test_update_notes",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "user": []
            }
        },
        "test_update_lemmatization": {
            "name": "test_update_lemmatization",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update_lemmatization_incompatible": {
            "name": "test_update_lemmatization_incompatible",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_references": {
            "name": "test_set_references",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_text": {
            "name": "test_set_text",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_matching_lines": {
            "name": "test_get_matching_lines",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [],
                "expected": []
            }
        }
    },
    "ebl-api-master/ebl/tests/fragmentarium/test_fragmentarium.py": {
        "test_find_latest": {
            "name": "test_find_latest",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "fragmentarium": [
                    "int"
                ],
                "fragment_repository": [
                    "Optional[bool]",
                    "List[str]",
                    "domain.Trigger"
                ],
                "when": [
                    "Optional[bool]",
                    "List[str]",
                    "domain.Trigger"
                ]
            }
        },
        "test_needs_revision": {
            "name": "test_needs_revision",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "fragmentarium": [
                    "str"
                ],
                "fragment_repository": [
                    "int",
                    "BaseException"
                ],
                "when": [
                    "int",
                    "BaseException"
                ]
            }
        },
        "test_statistics": {
            "name": "test_statistics",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "fragmentarium": [
                    "int",
                    "str"
                ],
                "fragment_repository": [
                    "Union[int, float]",
                    "int"
                ],
                "when": [
                    "Union[int, float]",
                    "int"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/fragmentarium/test_fragments_route.py": {
        "test_get": {
            "name": "test_get",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "fragmentarium": [
                    "tests.conftesWorker",
                    "tests.hints.RightFolderCall",
                    "authark.application.domain.common.User"
                ],
                "parallel_line_injector": [
                    "str",
                    "dict"
                ],
                "user": [
                    "str",
                    "tests.clienMDMClient",
                    "Dict[str, str]"
                ]
            }
        },
        "test_get_invalid_id": {
            "name": "test_get_invalid_id",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_get_not_found": {
            "name": "test_get_not_found",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        }
    },
    "ebl-api-master/ebl/tests/fragmentarium/test_fragments_search_route.py": {
        "expected_fragment_info_dto": {
            "name": "expected_fragment_info_dto",
            "location": 24,
            "return": [
                "dict"
            ],
            "arguments": {
                "fragment": [
                    "ebl.fragmentarium.domain.fragment.Fragment"
                ],
                "text": [
                    "None"
                ]
            }
        },
        "expected_fragment_infos_pagination_dto": {
            "name": "expected_fragment_infos_pagination_dto",
            "location": 28,
            "return": [
                "dict"
            ],
            "arguments": {
                "fragment_infos_pagination": [
                    "ebl.fragmentarium.domain.fragment_infos_pagination.FragmentInfosPagination"
                ]
            }
        },
        "test_search_fragmentarium_number": {
            "name": "test_search_fragmentarium_number",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "get_number": [],
                "client": [],
                "fragmentarium": []
            }
        },
        "test_search_fragmentarium_number_not_found": {
            "name": "test_search_fragmentarium_number_not_found",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_search_fragmentarium_references": {
            "name": "test_search_fragmentarium_references",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "fragmentarium": [],
                "bibliography": [],
                "user": []
            }
        },
        "test_search_fragmentarium_invalid_references_query": {
            "name": "test_search_fragmentarium_invalid_references_query",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "fragmentarium": []
            }
        },
        "test_search_fragmentarium_transliteration": {
            "name": "test_search_fragmentarium_transliteration",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "fragmentarium": [],
                "sign_repository": [],
                "signs": []
            }
        },
        "test_search_fragmentarium_combined_query": {
            "name": "test_search_fragmentarium_combined_query",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "fragmentarium": [],
                "sign_repository": [],
                "signs": [],
                "bibliography": [],
                "user": []
            }
        },
        "test_search_signs_invalid": {
            "name": "test_search_signs_invalid",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "fragmentarium": [],
                "sign_repository": [],
                "signs": []
            }
        },
        "test_random": {
            "name": "test_random",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "fragmentarium": []
            }
        },
        "test_interesting": {
            "name": "test_interesting",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "fragmentarium": []
            }
        },
        "test_latest": {
            "name": "test_latest",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "fragmentarium": []
            }
        },
        "test_needs_revision": {
            "name": "test_needs_revision",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "fragmentarium": []
            }
        },
        "test_search_fragment_no_query": {
            "name": "test_search_fragment_no_query",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_search_invalid_params": {
            "name": "test_search_invalid_params",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "parameters": []
            }
        }
    },
    "ebl-api-master/ebl/tests/fragmentarium/test_fragment_finder.py": {
        "test_find": {
            "name": "test_find",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "has_photo": [],
                "fragment_finder": [],
                "fragment_repository": [],
                "photo_repository": [],
                "parallel_line_injector": [],
                "when": []
            }
        },
        "test_find_not_found": {
            "name": "test_find_not_found",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_finder": [],
                "fragment_repository": [],
                "when": []
            }
        },
        "test_find_random": {
            "name": "test_find_random",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_finder": [],
                "fragment_repository": [],
                "when": []
            }
        },
        "test_find_interesting": {
            "name": "test_find_interesting",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_finder": [],
                "fragment_repository": [],
                "when": []
            }
        },
        "test_folio_pager": {
            "name": "test_folio_pager",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_finder": [],
                "fragment_repository": [],
                "when": []
            }
        },
        "test_fragment_finder": {
            "name": "test_fragment_finder",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_finder": [],
                "fragment_repository": [],
                "when": []
            }
        },
        "test_search_fragmentarium_inject_document_in_fragment_infos": {
            "name": "test_search_fragmentarium_inject_document_in_fragment_infos",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_finder": [],
                "when": [],
                "bibliography": []
            }
        },
        "test_search": {
            "name": "test_search",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_finder": [],
                "fragment_repository": [],
                "when": []
            }
        },
        "test_search_fragmentarium_transliteration": {
            "name": "test_search_fragmentarium_transliteration",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_finder": [],
                "fragment_repository": [],
                "when": []
            }
        },
        "test_find_photo": {
            "name": "test_find_photo",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_finder": [],
                "photo": [],
                "photo_repository": [],
                "when": []
            }
        },
        "test_find_folio": {
            "name": "test_find_folio",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_finder": [],
                "folio_with_allowed_scope": [],
                "file_repository": [],
                "when": []
            }
        }
    },
    "ebl-api-master/ebl/tests/fragmentarium/test_fragment_genre_route.py": {
        "test_update_genres": {
            "name": "test_update_genres",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "fragmentarium": [
                    "str",
                    "cli_ui.tests.MessageRecorder",
                    "Tuple[str, str]"
                ],
                "user": [
                    "bool",
                    "Optional[str]",
                    "str"
                ],
                "database": [
                    "str"
                ],
                "parameters": []
            }
        },
        "test_update_invalid_genres": {
            "name": "test_update_invalid_genres",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "fragmentarium": [
                    "str",
                    "cli_ui.tests.MessageRecorder"
                ],
                "user": [
                    "str",
                    "bool",
                    "Dict[str, Sequence[str]]",
                    "Dict[str, Any]"
                ],
                "database": [
                    "str",
                    "bool",
                    "Dict[str, Sequence[str]]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/fragmentarium/test_fragment_info.py": {
        "test_of": {
            "name": "test_of",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_of_with_references": {
            "name": "test_of_with_references",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_of_with_record": {
            "name": "test_of_with_record",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_of_defaults": {
            "name": "test_of_defaults",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/fragmentarium/test_fragment_matcher.py": {
        "test_find": {
            "name": "test_find",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_repository": [
                    "int"
                ],
                "when": [
                    "int"
                ],
                "fragment_matcher": [
                    "str",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_sort_scores_to_list": {
            "name": "test_sort_scores_to_list",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_line_to_vec": {
            "name": "test_line_to_vec",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_matcher": [
                    "Union[int, float]",
                    "Sequence[Union[int, float]]"
                ],
                "when": [
                    "Union[int, float]",
                    "Sequence[Union[int, float]]"
                ]
            }
        },
        "test_empty_line_to_vec": {
            "name": "test_empty_line_to_vec",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_matcher": [
                    "Union[int, float]",
                    "bool",
                    "str"
                ],
                "when": [
                    "Union[int, float]",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/fragmentarium/test_fragment_matcher_route.py": {
        "test_fragment_matcher_route": {
            "name": "test_fragment_matcher_route",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "fragmentarium": [
                    "str",
                    "tests.conftesWorker",
                    "tests.hints.RightFolderCall"
                ],
                "user": []
            }
        },
        "test_fragment_matcher_route_error": {
            "name": "test_fragment_matcher_route_error",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "fragmentarium": [
                    "str",
                    "tests.hints.RightFolderCall",
                    "tests.conftesWorker"
                ],
                "user": []
            }
        }
    },
    "ebl-api-master/ebl/tests/fragmentarium/test_fragment_pager_schema.py": {
        "test_schema": {
            "name": "test_schema",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/fragmentarium/test_fragment_repository.py": {
        "test_create": {
            "name": "test_create",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [],
                "fragment_repository": []
            }
        },
        "test_create_many": {
            "name": "test_create_many",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [],
                "fragment_repository": []
            }
        },
        "test_create_join": {
            "name": "test_create_join",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [],
                "fragment_repository": []
            }
        },
        "test_query_by_museum_number": {
            "name": "test_query_by_museum_number",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [],
                "fragment_repository": []
            }
        },
        "test_query_by_museum_number_joins": {
            "name": "test_query_by_museum_number_joins",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [],
                "fragment_repository": []
            }
        },
        "test_query_by_museum_number_references": {
            "name": "test_query_by_museum_number_references",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [],
                "fragment_repository": [],
                "bibliography_repository": []
            }
        },
        "test_query_by_parallel_line_exists": {
            "name": "test_query_by_parallel_line_exists",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [],
                "fragment_repository": []
            }
        },
        "test_fragment_not_found": {
            "name": "test_fragment_not_found",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_repository": []
            }
        },
        "test_find_random": {
            "name": "test_find_random",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_repository": []
            }
        },
        "test_folio_pager_exception": {
            "name": "test_folio_pager_exception",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_repository": []
            }
        },
        "test_query_next_and_previous_fragment": {
            "name": "test_query_next_and_previous_fragment",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "museum_numbers": [],
                "fragment_repository": []
            }
        },
        "test_update_transliteration_with_record": {
            "name": "test_update_transliteration_with_record",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_repository": [],
                "user": []
            }
        },
        "test_update_update_transliteration_not_found": {
            "name": "test_update_update_transliteration_not_found",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_repository": []
            }
        },
        "test_update_genres": {
            "name": "test_update_genres",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_repository": []
            }
        },
        "test_update_lemmatization": {
            "name": "test_update_lemmatization",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_repository": []
            }
        },
        "test_update_update_lemmatization_not_found": {
            "name": "test_update_update_lemmatization_not_found",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_repository": []
            }
        },
        "test_statistics": {
            "name": "test_statistics",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [],
                "fragment_repository": []
            }
        },
        "test_statistics_no_fragments": {
            "name": "test_statistics_no_fragments",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_repository": []
            }
        },
        "test_query_fragmentarium_number": {
            "name": "test_query_fragmentarium_number",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [],
                "fragment_repository": []
            }
        },
        "test_query_fragmentarium_not_found": {
            "name": "test_query_fragmentarium_not_found",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_repository": []
            }
        },
        "test_query_fragmentarium_reference_id": {
            "name": "test_query_fragmentarium_reference_id",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [],
                "fragment_repository": []
            }
        },
        "test_query_fragmentarium_id_and_pages": {
            "name": "test_query_fragmentarium_id_and_pages",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "pages": [],
                "database": [],
                "fragment_repository": []
            }
        },
        "test_empty_result_query_reference_id_and_pages": {
            "name": "test_empty_result_query_reference_id_and_pages",
            "location": 400,
            "return": [
                "None"
            ],
            "arguments": {
                "pages": [],
                "database": [],
                "fragment_repository": []
            }
        },
        "test_query_fragmentarium_transliteration": {
            "name": "test_query_fragmentarium_transliteration",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {
                "signs": [],
                "is_match": [],
                "fragment_repository": []
            }
        },
        "test_query_fragmentarium_sorting": {
            "name": "test_query_fragmentarium_sorting",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {
                "signs": [],
                "fragment_repository": []
            }
        },
        "test_query_fragmentarium_pagination": {
            "name": "test_query_fragmentarium_pagination",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_repository": []
            }
        },
        "test_query_fragmentarium_transliteration_and_number": {
            "name": "test_query_fragmentarium_transliteration_and_number",
            "location": 499,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_repository": []
            }
        },
        "test_query_fragmentarium_transliteration_and_number_and_references": {
            "name": "test_query_fragmentarium_transliteration_and_number_and_references",
            "location": 512,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_repository": []
            }
        },
        "test_query_fragmentarium_transliteration_and_number_and_references_not_found": {
            "name": "test_query_fragmentarium_transliteration_and_number_and_references_not_found",
            "location": 533,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_repository": []
            }
        },
        "test_find_transliterated": {
            "name": "test_find_transliterated",
            "location": 553,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [],
                "fragment_repository": []
            }
        },
        "test_find_transliterated_line_to_vec": {
            "name": "test_find_transliterated_line_to_vec",
            "location": 570,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [],
                "fragment_repository": []
            }
        },
        "test_update_references": {
            "name": "test_update_references",
            "location": 584,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_repository": []
            }
        },
        "test_update_update_references": {
            "name": "test_update_update_references",
            "location": 597,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_repository": []
            }
        }
    },
    "ebl-api-master/ebl/tests/fragmentarium/test_fragment_schema.py": {
        "test_serialization_and_deserialization": {
            "name": "test_serialization_and_deserialization",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_default_joins": {
            "name": "test_default_joins",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_number_serialization": {
            "name": "test_number_serialization",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_number_deserialization": {
            "name": "test_number_deserialization",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/fragmentarium/test_fragment_updater.py": {
        "test_update_transliteration": {
            "name": "test_update_transliteration",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "number": [],
                "ignore_lowest_join": [
                    "int"
                ],
                "fragment_updater": [
                    "int"
                ],
                "user": [
                    "tests.async_mock.Mock"
                ],
                "fragment_repository": [
                    "int",
                    "str"
                ],
                "changelog": [],
                "parallel_line_injector": [
                    "str"
                ],
                "when": [
                    "str"
                ]
            }
        },
        "test_update_update_transliteration_not_found": {
            "name": "test_update_update_transliteration_not_found",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_updater": [
                    "str"
                ],
                "user": [
                    "str"
                ],
                "fragment_repository": [
                    "instark.application.managers.SubscriptionManager"
                ],
                "when": [
                    "instark.application.managers.SubscriptionManager"
                ]
            }
        },
        "test_update_update_transliteration_not_lowest_join": {
            "name": "test_update_update_transliteration_not_lowest_join",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_updater": [],
                "user": [],
                "fragment_repository": [
                    "int"
                ],
                "when": [
                    "int"
                ]
            }
        },
        "test_update_genres": {
            "name": "test_update_genres",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_updater": [
                    "raiden.tests.integration.fixtures.raiden_network.RestartNode",
                    "Iterable[Iterable[Any]]",
                    "str"
                ],
                "user": [
                    "str",
                    "Dict[str, Any]"
                ],
                "fragment_repository": [
                    "str"
                ],
                "parallel_line_injector": [
                    "Callable[[List, bool], None]"
                ],
                "changelog": [
                    "str"
                ],
                "when": [
                    "str"
                ]
            }
        },
        "test_update_lemmatization": {
            "name": "test_update_lemmatization",
            "location": 137,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fragment_updater": [
                    "raiden.tests.integration.fixtures.raiden_network.RestartNode",
                    "Iterable[Iterable[Any]]",
                    "str"
                ],
                "user": [
                    "str",
                    "Dict[str, Any]"
                ],
                "fragment_repository": [
                    "str"
                ],
                "parallel_line_injector": [
                    "Callable[[List, bool], None]"
                ],
                "changelog": [
                    "str"
                ],
                "when": [
                    "str"
                ]
            }
        },
        "test_update_update_lemmatization_not_found": {
            "name": "test_update_update_lemmatization_not_found",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_updater": [
                    "int",
                    "tests.async_mock.Mock"
                ],
                "user": [
                    "int",
                    "tests.async_mock.Mock"
                ],
                "fragment_repository": [
                    "instark.application.managers.SubscriptionManager"
                ],
                "when": [
                    "instark.application.managers.SubscriptionManager"
                ]
            }
        },
        "test_update_references": {
            "name": "test_update_references",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_updater": [
                    "str",
                    "raiden.tests.integration.fixtures.raiden_network.RestartNode",
                    "Iterable[Iterable[Any]]",
                    "bool"
                ],
                "bibliography": [
                    "Callable",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "Optional[Iterable[Any]]"
                ],
                "user": [
                    "str"
                ],
                "fragment_repository": [
                    "str",
                    "int"
                ],
                "parallel_line_injector": [
                    "Callable[[List, bool], None]",
                    "str"
                ],
                "changelog": [
                    "str"
                ],
                "when": [
                    "bool",
                    "Callable",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_update_references_invalid": {
            "name": "test_update_references_invalid",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_updater": [
                    "int"
                ],
                "bibliography": [
                    "tests.setup.SetupTest"
                ],
                "user": [
                    "int"
                ],
                "fragment_repository": [
                    "int"
                ],
                "when": []
            }
        }
    },
    "ebl-api-master/ebl/tests/fragmentarium/test_genre_route.py": {
        "test_get_genre": {
            "name": "test_get_genre",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        }
    },
    "ebl-api-master/ebl/tests/fragmentarium/test_joins.py": {
        "test_join": {
            "name": "test_join",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_join_default": {
            "name": "test_join_default",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_joins_fragments_sorting": {
            "name": "test_joins_fragments_sorting",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_joins_lowest": {
            "name": "test_joins_lowest",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_joins_lowest_when_no_fragments": {
            "name": "test_joins_lowest_when_no_fragments",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/fragmentarium/test_lemmatization_route.py": {
        "test_serialize_lemmatization": {
            "name": "test_serialize_lemmatization",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_deserialize_lemmatization": {
            "name": "test_deserialize_lemmatization",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update_lemmatization": {
            "name": "test_update_lemmatization",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "fragmentarium": [],
                "user": [],
                "database": []
            }
        },
        "test_update_lemmatization_not_found": {
            "name": "test_update_lemmatization_not_found",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_update_lemmatization_invalid_number": {
            "name": "test_update_lemmatization_invalid_number",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_update_lemmatization_invalid_entity": {
            "name": "test_update_lemmatization_invalid_entity",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "fragmentarium": [],
                "body": []
            }
        },
        "test_update_lemmatization_atf_change": {
            "name": "test_update_lemmatization_atf_change",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "fragmentarium": []
            }
        }
    },
    "ebl-api-master/ebl/tests/fragmentarium/test_line_to_vec_ranking_schema.py": {
        "test_line_to_vec_ranking_schema": {
            "name": "test_line_to_vec_ranking_schema",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/fragmentarium/test_line_to_vec_score.py": {
        "test_score": {
            "name": "test_score",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "seq1": [
                    "Set[int]",
                    "List[str]"
                ],
                "seq2": [
                    "Set[int]",
                    "List[str]"
                ],
                "unweighted_score": [
                    "str",
                    "float"
                ]
            }
        },
        "test_weighted_score": {
            "name": "test_weighted_score",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "seq1": [
                    "Set[int]",
                    "List[str]"
                ],
                "seq2": [
                    "Set[int]",
                    "List[str]"
                ],
                "weighted_score": [
                    "str",
                    "float"
                ]
            }
        },
        "test_matching_subsequence_itself": {
            "name": "test_matching_subsequence_itself",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/fragmentarium/test_museum_number.py": {
        "test_museum_number": {
            "name": "test_museum_number",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_str_no_suffix": {
            "name": "test_str_no_suffix",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_empty_prefix": {
            "name": "test_invalid_empty_prefix",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_period_in_prefix_no_suffix": {
            "name": "test_invalid_period_in_prefix_no_suffix",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_empty_number": {
            "name": "test_invalid_empty_number",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_period_in_number": {
            "name": "test_invalid_period_in_number",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_period_in_suffix": {
            "name": "test_invalid_period_in_suffix",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_of_short_prefix": {
            "name": "test_of_short_prefix",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_of_short_prefix_no_suffix": {
            "name": "test_of_short_prefix_no_suffix",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_of_long_prefix": {
            "name": "test_of_long_prefix",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_of_invalid": {
            "name": "test_of_invalid",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_order_equal": {
            "name": "test_order_equal",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_order_prefix": {
            "name": "test_order_prefix",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "prefix": [
                    "str"
                ]
            }
        },
        "test_order_number": {
            "name": "test_order_number",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "number": [
                    "Optional[str]",
                    "src.core.model.scripScript",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_order_suffix": {
            "name": "test_order_suffix",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "suffix": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/fragmentarium/test_museum_number_schema.py": {
        "test_dump": {
            "name": "test_dump",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load": {
            "name": "test_load",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid": {
            "name": "test_invalid",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "property_": [
                    "str",
                    "Iterable[Tuple[str, dict]]",
                    "int",
                    "bool"
                ],
                "value": [
                    "str",
                    "Iterable[Tuple[str, dict]]",
                    "int",
                    "bool"
                ]
            }
        },
        "test_missing": {
            "name": "test_missing",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "property_": [
                    "str",
                    "Optional[bytes]",
                    "List[List[int]]",
                    "dict"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/fragmentarium/test_pager_route.py": {
        "test_get_fragment_pager": {
            "name": "test_get_fragment_pager",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "fragmentarium": [
                    "str",
                    "tests.conftesWorker",
                    "tests.hints.RightFolderCall"
                ]
            }
        },
        "test_get_fragment_pager_cache": {
            "name": "test_get_fragment_pager_cache",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "cached_client": [
                    "List[str]"
                ],
                "fragmentarium": [
                    "float"
                ]
            }
        },
        "test_get_fragment_pager_invalid_id": {
            "name": "test_get_fragment_pager_invalid_id",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_get_folio_pager": {
            "name": "test_get_folio_pager",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "fragmentarium": [
                    "str",
                    "tests.conftesWorker",
                    "tests.hints.RightFolderCall"
                ]
            }
        },
        "test_get_folio_pager_invalid_id": {
            "name": "test_get_folio_pager_invalid_id",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_get_folio_pager_no_access_to_folio": {
            "name": "test_get_folio_pager_no_access_to_folio",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "fragmentarium": [
                    "str",
                    "tests.conftesWorker"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/fragmentarium/test_photos_route.py": {
        "test_get_photo": {
            "name": "test_get_photo",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "photo": []
            }
        },
        "test_get_photo_not_found": {
            "name": "test_get_photo_not_found",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_get_photo_not_allowed": {
            "name": "test_get_photo_not_allowed",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "guest_client": []
            }
        }
    },
    "ebl-api-master/ebl/tests/fragmentarium/test_record.py": {
        "test_add_record": {
            "name": "test_add_record",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "old": [
                    "str"
                ],
                "new": [
                    "str"
                ],
                "type_": [
                    "str",
                    "Optional[str]"
                ],
                "user": [
                    "dict",
                    "Optional[str]",
                    "str",
                    "datetime.datetime"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/fragmentarium/test_references_route.py": {
        "test_update_references": {
            "name": "test_update_references",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "List[str]",
                    "Dict[str, str]"
                ],
                "fragmentarium": [
                    "tests.conftesWorker",
                    "authark.application.domain.common.User"
                ],
                "bibliography": [
                    "tests.conftesWorker",
                    "authark.application.domain.common.User"
                ],
                "parallel_line_injector": [],
                "user": []
            }
        },
        "test_update_references_not_found": {
            "name": "test_update_references_not_found",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_update_references_invalid_museum_number": {
            "name": "test_update_references_invalid_museum_number",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_update_references_invalid_reference": {
            "name": "test_update_references_invalid_reference",
            "location": 86,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "Dict[str, str]"
                ],
                "fragmentarium": [
                    "tests.hints.RightFolderCall",
                    "tests.conftesWorker",
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "body": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "test_update_references_invalid_id": {
            "name": "test_update_references_invalid_id",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "fragmentarium": [
                    "str",
                    "tests.conftesWorker"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/fragmentarium/test_retrieve_annotations.py": {
        "test_handle_blank_annotation_type": {
            "name": "test_handle_blank_annotation_type",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_prepare_annotations": {
            "name": "test_prepare_annotations",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_annotations": {
            "name": "test_create_annotations",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "photo_repository": [],
                "when": [],
                "photo": []
            }
        },
        "test_from_relative_to_absolute_coordinates": {
            "name": "test_from_relative_to_absolute_coordinates",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_write_annotations": {
            "name": "test_write_annotations",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_write_fragment_numbers": {
            "name": "test_write_fragment_numbers",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        }
    },
    "ebl-api-master/ebl/tests/fragmentarium/test_statistics_route.py": {
        "test_get_statistics": {
            "name": "test_get_statistics",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "guest_client": []
            }
        },
        "test_get_statistics_cache": {
            "name": "test_get_statistics_cache",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "cached_client": [],
                "fragmentarium": [
                    "str",
                    "tests.conftesWorker"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/fragmentarium/test_transliteration.py": {
        "test_text": {
            "name": "test_text",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_notes": {
            "name": "test_notes",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_signs": {
            "name": "test_signs",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_valid_signs": {
            "name": "test_validate_valid_signs",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "transliteration_factory": []
            }
        },
        "test_validate_invalid_value": {
            "name": "test_validate_invalid_value",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_multiple_errors": {
            "name": "test_validate_multiple_errors",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/fragmentarium/test_transliterations_route.py": {
        "test_update_transliteration": {
            "name": "test_update_transliteration",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "fragmentarium": [],
                "user": [],
                "database": []
            }
        },
        "test_update_transliteration_merge_lemmatization": {
            "name": "test_update_transliteration_merge_lemmatization",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "new_transliteration": [],
                "client": [],
                "fragmentarium": [],
                "signs": [],
                "sign_repository": [],
                "transliteration_factory": [],
                "parallel_line_injector": [],
                "user": []
            }
        },
        "test_update_transliteration_invalid_atf": {
            "name": "test_update_transliteration_invalid_atf",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "fragmentarium": []
            }
        },
        "test_update_transliteration_not_lowest_join": {
            "name": "test_update_transliteration_not_lowest_join",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "fragment_repository": []
            }
        },
        "test_update_transliteration_not_found": {
            "name": "test_update_transliteration_not_found",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_update_transliteration_invalid": {
            "name": "test_update_transliteration_invalid",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_update_transliteration_invalid_entity": {
            "name": "test_update_transliteration_invalid_entity",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "fragmentarium": [],
                "body": []
            }
        }
    },
    "ebl-api-master/ebl/tests/fragmentarium/test_transliteration_query_factory.py": {
        "test_create_empty": {
            "name": "test_create_empty",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_query": {
            "name": "test_create_query",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "sign_repository": [],
                "signs": []
            }
        },
        "test_create_query_invalid": {
            "name": "test_create_query_invalid",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "sign_repository": []
            }
        }
    },
    "ebl-api-master/ebl/tests/fragmentarium/test_transliteration_update_factory.py": {
        "test_create": {
            "name": "test_create",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "sign_repository": [],
                "signs": []
            }
        },
        "test_create_empty": {
            "name": "test_create_empty",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "sign_repository": []
            }
        },
        "test_create_invalid_atf": {
            "name": "test_create_invalid_atf",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "sign_repository": []
            }
        }
    },
    "ebl-api-master/ebl/tests/fragmentarium/test_update_annotations.py": {},
    "ebl-api-master/ebl/tests/fragmentarium/__init__.py": {},
    "ebl-api-master/ebl/tests/lemmatization/test_lemma_search_route.py": {
        "test_search_fragment": {
            "name": "test_search_fragment",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "query_word": [],
                "lemma": [],
                "is_normalized": [],
                "client": [],
                "fragmentarium": [],
                "dictionary": [],
                "word": []
            }
        },
        "test_search_fragment_no_query": {
            "name": "test_search_fragment_no_query",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_search_invalid_params": {
            "name": "test_search_invalid_params",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "params": []
            }
        }
    },
    "ebl-api-master/ebl/tests/lemmatization/test_suggestion_finder.py": {
        "test_query_lemmas": {
            "name": "test_query_lemmas",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_repository": [],
                "lemma_repository": []
            }
        },
        "test_query_lemmas_normalized": {
            "name": "test_query_lemmas_normalized",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_repository": [],
                "lemma_repository": []
            }
        },
        "test_query_lemmas_multiple": {
            "name": "test_query_lemmas_multiple",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_repository": [],
                "lemma_repository": []
            }
        },
        "test_query_lemmas_ignores_in_value": {
            "name": "test_query_lemmas_ignores_in_value",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "parts": [],
                "expected": [],
                "fragment_repository": [],
                "lemma_repository": []
            }
        },
        "test_query_lemmas_not_found": {
            "name": "test_query_lemmas_not_found",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "is_normalized": [],
                "fragment_repository": [],
                "lemma_repository": []
            }
        },
        "test_find_suggestions": {
            "name": "test_find_suggestions",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "dictionary": [],
                "word": [],
                "lemma_repository": [],
                "when": []
            }
        }
    },
    "ebl-api-master/ebl/tests/signs/test_memoizing_sign_repository.py": {
        "test_find_memoization": {
            "name": "test_find_memoization",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "sign_repository": [
                    "Tuple[int, int]"
                ],
                "signs": [
                    "Tuple[int, int]"
                ],
                "when": []
            }
        },
        "test_search_memoization": {
            "name": "test_search_memoization",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "sign_repository": [
                    "str",
                    "int",
                    "Tuple[float, float, float, float, float]",
                    "float"
                ],
                "signs": [
                    "str",
                    "int",
                    "Tuple[float, float, float, float, float]",
                    "float"
                ]
            }
        },
        "test_search_by_lists_name_memoization": {
            "name": "test_search_by_lists_name_memoization",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "sign_repository": [
                    "str"
                ],
                "signs": [
                    "str"
                ]
            }
        },
        "test_search_include_homophones": {
            "name": "test_search_include_homophones",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "sign_repository": [
                    "str",
                    "int",
                    "Tuple[float, float, float, float, float]",
                    "float"
                ],
                "signs": [
                    "str",
                    "int",
                    "Tuple[float, float, float, float, float]",
                    "float"
                ]
            }
        },
        "test_search_composite_signs": {
            "name": "test_search_composite_signs",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "sign_repository": [
                    "str",
                    "int",
                    "Tuple[float, float, float, float, float]",
                    "float"
                ],
                "signs": [
                    "str",
                    "int",
                    "Tuple[float, float, float, float, float]",
                    "float"
                ]
            }
        },
        "test_search_by_id": {
            "name": "test_search_by_id",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "sign_repository": [],
                "signs": []
            }
        },
        "test_search_all": {
            "name": "test_search_all",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "sign_repository": [
                    "dict"
                ],
                "signs": [
                    "dict"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/signs/test_sign_images_route.py": {
        "test_signs_get": {
            "name": "test_signs_get",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "annotations_repository": [],
                "photo_repository": [
                    "bool",
                    "Callable[[], None]",
                    "Iterable[str]",
                    "str"
                ],
                "when": [
                    "bool",
                    "Callable[[], None]",
                    "Iterable[str]",
                    "str"
                ],
                "fragment_repository": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "text_with_labels": [
                    "domain.Submission",
                    "List[str]",
                    "bool",
                    "str"
                ],
                "cropped_sign_images_repository": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/signs/test_sign_repository.py": {
        "mongo_sign_igi": {
            "name": "mongo_sign_igi",
            "location": 14,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,list[int],list[dict[typing.Text, typing.Union[typing.Text,int,list]]]]]"
            ],
            "arguments": {}
        },
        "sign_igi": {
            "name": "sign_igi",
            "location": 46,
            "return": [],
            "arguments": {
                "mongo_sign_igi": []
            }
        },
        "mongo_sign_si": {
            "name": "mongo_sign_si",
            "location": 51,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,list[dict[typing.Text, typing.Union[typing.Text,int,list]]]]]"
            ],
            "arguments": {}
        },
        "sign_si": {
            "name": "sign_si",
            "location": 81,
            "return": [],
            "arguments": {
                "mongo_sign_si": []
            }
        },
        "mongo_sign_si_2": {
            "name": "mongo_sign_si_2",
            "location": 86,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,list[dict[typing.Text, typing.Union[typing.Text,int,list]]],list[dict[typing.Text, typing.Union[typing.Text,list[typing.Text]]]]]]"
            ],
            "arguments": {}
        },
        "sign_si_2": {
            "name": "sign_si_2",
            "location": 151,
            "return": [],
            "arguments": {
                "mongo_sign_si_2": []
            }
        },
        "test_create": {
            "name": "test_create",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [],
                "sign_repository": [],
                "sign_igi": []
            }
        },
        "test_find": {
            "name": "test_find",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [],
                "sign_repository": [],
                "mongo_sign_igi": [],
                "sign_igi": []
            }
        },
        "test_sign_not_found": {
            "name": "test_sign_not_found",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "sign_repository": []
            }
        },
        "test_search": {
            "name": "test_search",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [],
                "sign_repository": [],
                "sign_igi": [],
                "mongo_sign_igi": [],
                "sign_si": [],
                "mongo_sign_si": [],
                "sign_si_2": [],
                "mongo_sign_si_2": []
            }
        },
        "test_search_all": {
            "name": "test_search_all",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [],
                "sign_repository": [],
                "sign_igi": [],
                "mongo_sign_igi": [],
                "mongo_sign_si": [],
                "mongo_sign_si_2": []
            }
        },
        "test_search_all_no_result": {
            "name": "test_search_all_no_result",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [],
                "sign_repository": [],
                "mongo_sign_igi": [],
                "mongo_sign_si": [],
                "mongo_sign_si_2": []
            }
        },
        "test_search_by_id": {
            "name": "test_search_by_id",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [],
                "sign_repository": [],
                "mongo_sign_igi": [],
                "sign_si": [],
                "mongo_sign_si": [],
                "sign_si_2": [],
                "mongo_sign_si_2": []
            }
        },
        "test_search_by_id_no_result": {
            "name": "test_search_by_id_no_result",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [],
                "sign_repository": [],
                "mongo_sign_igi": [],
                "mongo_sign_si": [],
                "mongo_sign_si_2": []
            }
        },
        "test_search_by_lists_name": {
            "name": "test_search_by_lists_name",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [],
                "sign_repository": [],
                "mongo_sign_igi": [],
                "mongo_sign_si": [],
                "sign_si_2": [],
                "mongo_sign_si_2": []
            }
        },
        "test_search_not_found": {
            "name": "test_search_not_found",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "sign_repository": []
            }
        }
    },
    "ebl-api-master/ebl/tests/signs/test_sign_schema.py": {
        "test_logogram_schema": {
            "name": "test_logogram_schema",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fossey_schema": {
            "name": "test_fossey_schema",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sign_schema": {
            "name": "test_sign_schema",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sign_dto_schema": {
            "name": "test_sign_dto_schema",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/signs/test_sign_search_route.py": {
        "test_signs_get": {
            "name": "test_signs_get",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "sign_repository": []
            }
        },
        "test_signs_not_found": {
            "name": "test_signs_not_found",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_signs_search_route": {
            "name": "test_signs_search_route",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [],
                "expected": [],
                "client": [],
                "sign_repository": [],
                "signs": []
            }
        },
        "test_signs_search_route_error": {
            "name": "test_signs_search_route_error",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "sign_repository": [],
                "signs": []
            }
        }
    },
    "ebl-api-master/ebl/tests/signs/__init__.py": {},
    "ebl-api-master/ebl/tests/transliteration/test_alignment.py": {
        "test_apply": {
            "name": "test_apply",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_apply_invalid": {
            "name": "test_apply_invalid",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "word": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_atf.py": {
        "test_to_sub_index": {
            "name": "test_to_sub_index",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "number": [],
                "expected": []
            }
        },
        "test_sub_index_to_int": {
            "name": "test_sub_index_to_int",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "sub_index": [],
                "expected": []
            }
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_atf_parser.py": {
        "test_parser_version": {
            "name": "test_parser_version",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "parser": [
                    "str",
                    "bool",
                    "Optional[Callable]",
                    "application.domain.common.QueryParser"
                ],
                "version": [
                    "str",
                    "bool",
                    "Optional[Callable]",
                    "application.domain.common.QueryParser"
                ]
            }
        },
        "test_parse_atf": {
            "name": "test_parse_atf",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "line": [
                    "str"
                ],
                "expected_tokens": [
                    "str"
                ]
            }
        },
        "test_invalid_atf": {
            "name": "test_invalid_atf",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "atf": [
                    "tests.basilisp.helpers.CompileFn",
                    "bool",
                    "int",
                    "str",
                    "picorss.src.domain.entities.RssPage",
                    "tests.hints.RightAccumulatorCall"
                ],
                "line_numbers": [
                    "List[str]"
                ]
            }
        },
        "test_duplicate_labels": {
            "name": "test_duplicate_labels",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "atf": [
                    "picorss.src.domain.entities.RssPage",
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "line_numbers": [
                    "list",
                    "bool",
                    "List[Tuple[str, references.domain.Reference]]",
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_at_line.py": {
        "test_at_line_heading": {
            "name": "test_at_line_heading",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "parts": [
                    "str"
                ],
                "parts_text": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "test_at_line_column": {
            "name": "test_at_line_column",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_at_line_column_no_status": {
            "name": "test_at_line_column_no_status",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_at_line_discourse": {
            "name": "test_at_line_discourse",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_at_line_surface": {
            "name": "test_at_line_surface",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_at_line_surface_no_status": {
            "name": "test_at_line_surface_no_status",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_at_line_surface_instantiate_text_with_wrong_surface": {
            "name": "test_at_line_surface_instantiate_text_with_wrong_surface",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_at_line_object_no_status": {
            "name": "test_at_line_object_no_status",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_at_line_object": {
            "name": "test_at_line_object",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_at_line_composite": {
            "name": "test_at_line_composite",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_at_line_composite_constant": {
            "name": "test_at_line_composite_constant",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_at_line_composite_milestone": {
            "name": "test_at_line_composite_milestone",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_at_line_composite_raise_error": {
            "name": "test_at_line_composite_raise_error",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_dollar_line.py": {
        "test_loose_dollar_line": {
            "name": "test_loose_dollar_line",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_image_dollar_line": {
            "name": "test_image_dollar_line",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ruling_dollar_line": {
            "name": "test_ruling_dollar_line",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ruling_dollar_line_status": {
            "name": "test_ruling_dollar_line_status",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scope_container": {
            "name": "test_scope_container",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_strict_dollar_line_with_none": {
            "name": "test_strict_dollar_line_with_none",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_state_dollar_line": {
            "name": "test_state_dollar_line",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_state_dollar_line_content": {
            "name": "test_state_dollar_line_content",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_state_dollar_line_non_empty_string_error": {
            "name": "test_state_dollar_line_non_empty_string_error",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_state_dollar_line_range": {
            "name": "test_state_dollar_line_range",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_state_dollar_line_end_of": {
            "name": "test_state_dollar_line_end_of",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_enclosure_tokens.py": {
        "test_enclosure": {
            "name": "test_enclosure",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "enclosure_class": [],
                "type_": [],
                "sides": [],
                "side": []
            }
        },
        "test_determinative": {
            "name": "test_determinative",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_phonetic_gloss": {
            "name": "test_phonetic_gloss",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_linguistic_gloss": {
            "name": "test_linguistic_gloss",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_enclosure_visitor_types.py": {
        "map_line": {
            "name": "map_line",
            "location": 37,
            "return": [
                "Sequence[ebl.transliteration.domain.tokens.Token]"
            ],
            "arguments": {
                "atf": [
                    "str",
                    "int",
                    "set"
                ]
            }
        },
        "test_enclosure_type": {
            "name": "test_enclosure_type",
            "location": 398,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "atf": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_enclosure_visitor_validation.py": {
        "validate_line": {
            "name": "validate_line",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "atf": []
            }
        },
        "test_valid": {
            "name": "test_valid",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "atf": []
            }
        },
        "test_invalid": {
            "name": "test_invalid",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "atf": []
            }
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_greek_tokens.py": {
        "test_greek_letter": {
            "name": "test_greek_letter",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_greek_word": {
            "name": "test_greek_word",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "word": [],
                "expected": [],
                "language": [],
                "lemmatizable": [],
                "alignable": []
            }
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_labels.py": {
        "test_parse_labels": {
            "name": "test_parse_labels",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "status": [
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "_": [
                    "str",
                    "List[str]",
                    "int",
                    "Sequence[Hashable]",
                    "List[Tuple[int, int]]"
                ],
                "expected": [
                    "str",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "test_parse_labels_multiple": {
            "name": "test_parse_labels_multiple",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_labels_empty": {
            "name": "test_parse_labels_empty",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_labels_invalud": {
            "name": "test_parse_labels_invalud",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "labels": [
                    "str",
                    "Sequence[Sequence[str]]",
                    "Sequence[str]"
                ]
            }
        },
        "test_abbreviation": {
            "name": "test_abbreviation",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [
                    "str",
                    "Dict[str, str]",
                    "bytes",
                    "int"
                ],
                "status": [
                    "str",
                    "Set[int]",
                    "Optional[Set[int]]",
                    "Sequence[Hashable]",
                    "List[Tuple[int, int]]"
                ],
                "_": [
                    "str",
                    "Set[int]",
                    "Optional[Set[int]]",
                    "Sequence[Hashable]",
                    "List[Tuple[int, int]]"
                ],
                "model": [
                    "str",
                    "Dict[str, str]",
                    "bytes",
                    "int"
                ]
            }
        },
        "test_label_to_value": {
            "name": "test_label_to_value",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "dict",
                    "Type"
                ],
                "status": [
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "dict",
                    "Type"
                ],
                "_": [
                    "str",
                    "Optional[str]"
                ],
                "model": [
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "dict",
                    "Type"
                ]
            }
        },
        "test_label_to_atf": {
            "name": "test_label_to_atf",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "str",
                    "Set[int]",
                    "Optional[Set[int]]"
                ],
                "status": [
                    "str",
                    "int"
                ],
                "atf": [
                    "str",
                    "int"
                ],
                "model": [
                    "str",
                    "int"
                ]
            }
        },
        "test_duplicate_status_is_invalid": {
            "name": "test_duplicate_status_is_invalid",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_duplicate_status_is_invalid.TestLabel._atf": {
            "name": "_atf",
            "location": 108,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_duplicate_status_is_invalid.TestLabel.abbreviation": {
            "name": "abbreviation",
            "location": 112,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_duplicate_status_is_invalid.TestLabel.accept": {
            "name": "accept",
            "location": 115,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_label_schema.py": {
        "test_load_and_dump_column_label_schema": {
            "name": "test_load_and_dump_column_label_schema",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_and_dump_surface_label_schema": {
            "name": "test_load_and_dump_surface_label_schema",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_and_dump_object_label_schema": {
            "name": "test_load_and_dump_object_label_schema",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_language.py": {
        "test_lemmatizable": {
            "name": "test_lemmatizable",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "language": [
                    "str",
                    "Dict[str, Any]"
                ],
                "expected": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_of_atf": {
            "name": "test_of_atf",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "atf": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "test_default_language": {
            "name": "test_default_language",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_lemmatization.py": {
        "create_token": {
            "name": "create_token",
            "location": 4,
            "return": [
                "ebl.lemmatization.domain.lemmatization.LemmatizationToken"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Optional[Sequence[str]]",
                    "bool",
                    "List[str]"
                ],
                "unique_lemma": [
                    "None",
                    "str",
                    "Optional[Sequence[str]]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "create_lemmatized_token": {
            "name": "create_lemmatized_token",
            "location": 8,
            "return": [
                "ebl.lemmatization.domain.lemmatization.LemmatizationToken"
            ],
            "arguments": {
                "value": [
                    "float",
                    "bool",
                    "Iterable[object]"
                ]
            }
        },
        "test_equality": {
            "name": "test_equality",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tokens": {
            "name": "test_tokens",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_lemmatization_schema.py": {
        "test_serialize_lemmatization_token": {
            "name": "test_serialize_lemmatization_token",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "token": [
                    "bool",
                    "bytes",
                    "Optional[str]",
                    "str"
                ],
                "serialized": [
                    "bool",
                    "bytes",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "test_deserialize_lemmatization_token": {
            "name": "test_deserialize_lemmatization_token",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "token": [
                    "str",
                    "Set[str]",
                    "Optional[str]",
                    "List[str]"
                ],
                "serialized": [
                    "str",
                    "Set[str]",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_line.py": {
        "test_empty_line": {
            "name": "test_empty_line",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_control_line": {
            "name": "test_control_line",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update_lemmatization": {
            "name": "test_update_lemmatization",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "line": [],
                "lemmatization": []
            }
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_line_breaks.py": {
        "test_in_word_new_line": {
            "name": "test_in_word_new_line",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_line_break": {
            "name": "test_line_break",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_line_label.py": {
        "test_format_line_label": {
            "name": "test_format_line_label",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "line_label": [
                    "str"
                ],
                "expected": [
                    "str"
                ],
                "annotations_service": [
                    "str",
                    "bytes",
                    "Mapping[str, Optional[float]]",
                    "List[Tuple[bytes, bytes]]",
                    "int",
                    "List[str]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_line_merge.py": {
        "test_merge": {
            "name": "test_merge",
            "location": 281,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "old": [
                    "ebl.transliteration.domain.line.Line",
                    "bool",
                    "str"
                ],
                "new": [
                    "ebl.transliteration.domain.line.Line",
                    "bool",
                    "str"
                ],
                "expected": [
                    "ebl.transliteration.domain.line.Line",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_line_number.py": {
        "test_line_number": {
            "name": "test_line_number",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "line_number": [
                    "str",
                    "bool",
                    "int",
                    "Type[Any]",
                    "Optional[Type[Any]]"
                ],
                "number": [
                    "int",
                    "str",
                    "Optional[List[str]]",
                    "List['cirq.Circuit']",
                    "bool"
                ],
                "has_prime": [
                    "int",
                    "str",
                    "Optional[List[str]]",
                    "List['cirq.Circuit']",
                    "bool"
                ],
                "prefix": [
                    "str",
                    "int",
                    "type"
                ],
                "suffix": [
                    "str",
                    "int",
                    "type"
                ],
                "label": [
                    "int",
                    "bool",
                    "Optional[float]"
                ],
                "is_beginning": [
                    "int",
                    "str",
                    "Optional[List[str]]",
                    "List['cirq.Circuit']",
                    "bool"
                ]
            }
        },
        "test_line_number_range": {
            "name": "test_line_number_range",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "start": [
                    "int",
                    "str"
                ],
                "end": [
                    "str"
                ]
            }
        },
        "test_is_line_matching_number": {
            "name": "test_is_line_matching_number",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "line_number": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "matching_number": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "expected": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "Optional[str]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_line_number_schemas.py": {
        "test_line_number_schema": {
            "name": "test_line_number_schema",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "line_number": [
                    "dict",
                    "List[dict]",
                    "domain.submission.Submission",
                    "MutableMapping[str, Any]"
                ],
                "data": [
                    "dict",
                    "List[dict]",
                    "domain.submission.Submission",
                    "MutableMapping[str, Any]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_line_schemas.py": {
        "test_dump_line": {
            "name": "test_dump_line",
            "location": 663,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "line": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "test_load_line": {
            "name": "test_load_line",
            "location": 830,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "expected": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "dict",
                    "str",
                    "Dict[str, Dict[str, str]]"
                ],
                "data": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "dict",
                    "str",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_lone_determinative.py": {
        "test_of_value": {
            "name": "test_of_value",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_lone_determinative": {
            "name": "test_lone_determinative",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "language": [
                    "Iterable[Tuple[int, int]]",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_set_language": {
            "name": "test_set_language",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_markup.py": {
        "test_part_rstrip": {
            "name": "test_part_rstrip",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "part": [],
                "expected": []
            }
        },
        "test_part_title_case": {
            "name": "test_part_title_case",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "part": [],
                "expected": []
            }
        },
        "test_rstrip": {
            "name": "test_rstrip",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "parts": [],
                "expected": []
            }
        },
        "test_title_case": {
            "name": "test_title_case",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "parts": [],
                "expected": []
            }
        },
        "test_to_title": {
            "name": "test_to_title",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "parts": []
            }
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_mongo_parallel_repository.py": {
        "test_fragment_exists_true": {
            "name": "test_fragment_exists_true",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [
                    "bool"
                ],
                "parallel_repository": [
                    "ebl.transliteration.infrastructure.mongo_parallel_repository.MongoParallelRepository"
                ]
            }
        },
        "test_fragment_exists_false": {
            "name": "test_fragment_exists_false",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "parallel_repository": [
                    "ebl.transliteration.infrastructure.mongo_parallel_repository.MongoParallelRepository"
                ]
            }
        },
        "test_chapter_exists_true": {
            "name": "test_chapter_exists_true",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [
                    "bool"
                ],
                "parallel_repository": [
                    "ebl.transliteration.infrastructure.mongo_parallel_repository.MongoParallelRepository"
                ]
            }
        },
        "test_chapter_exists_false": {
            "name": "test_chapter_exists_false",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "parallel_repository": [
                    "ebl.transliteration.infrastructure.mongo_parallel_repository.MongoParallelRepository"
                ]
            }
        },
        "test_find_implicit_chapter": {
            "name": "test_find_implicit_chapter",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [
                    "bool"
                ],
                "parallel_repository": [
                    "ebl.transliteration.infrastructure.mongo_parallel_repository.MongoParallelRepository"
                ]
            }
        },
        "test_find_implicit_chapter_not_found": {
            "name": "test_find_implicit_chapter_not_found",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "parallel_repository": [
                    "ebl.transliteration.infrastructure.mongo_parallel_repository.MongoParallelRepository"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_normalized_akkadian.py": {
        "test_akkadian_word": {
            "name": "test_akkadian_word",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "word": [],
                "expected": [],
                "lemmatizable": []
            }
        },
        "test_akkadian_word_invalid_modifier": {
            "name": "test_akkadian_word_invalid_modifier",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_unique_lemma": {
            "name": "test_set_unique_lemma",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_unique_lemma_empty": {
            "name": "test_set_unique_lemma_empty",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_alignment": {
            "name": "test_set_alignment",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_alignment_empty": {
            "name": "test_set_alignment_empty",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_caesura": {
            "name": "test_caesura",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "caesura": [],
                "is_uncertain": [],
                "value": []
            }
        },
        "test_metrical_foot_separator": {
            "name": "test_metrical_foot_separator",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "separator": [],
                "is_uncertain": [],
                "value": []
            }
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_note_line.py": {
        "expected_transliteration": {
            "name": "expected_transliteration",
            "location": 29,
            "return": [
                "Sequence[ebl.transliteration.domain.tokens.Token]"
            ],
            "arguments": {
                "language": [
                    "ebl.transliteration.domain.language.Language"
                ]
            }
        },
        "test_note_line": {
            "name": "test_note_line",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_note_parts.py": {
        "test_bibliography_part": {
            "name": "test_bibliography_part",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bibliography_part_escape": {
            "name": "test_bibliography_part_escape",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_reference": {
            "name": "test_invalid_reference",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "type": [
                    "bool",
                    "str"
                ],
                "pages": [
                    "bool",
                    "str"
                ],
                "note": [
                    "bool",
                    "str"
                ],
                "lines": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_parallel_line.py": {
        "test_parallel_fragment": {
            "name": "test_parallel_fragment",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "cf": [
                    "int",
                    "str",
                    "bool"
                ],
                "duplicates": [
                    "int",
                    "str",
                    "bool"
                ],
                "labels": [
                    "bool",
                    "bytes",
                    "str",
                    "Optional[str]"
                ],
                "display_value": [
                    "str",
                    "List[str]",
                    "dict",
                    "int"
                ]
            }
        },
        "test_parallel_text": {
            "name": "test_parallel_text",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "cf": [],
                "chapter": [],
                "display_value": [
                    "int",
                    "Sequence[Hashable]",
                    "Dict[str, Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "test_parallel_composition": {
            "name": "test_parallel_composition",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "cf": [
                    "str",
                    "Dict[str, Any]"
                ],
                "display_value": [
                    "dict",
                    "int",
                    "List[int]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_parallel_line_injector.py": {
        "test_inject_parallel_fragment": {
            "name": "test_inject_parallel_fragment",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "parallel_repository": [
                    "int",
                    "bool",
                    "Iterable[Tuple[str, dict]]"
                ],
                "parallel_line_injector": [
                    "str",
                    "List[str]",
                    "Callable[[str], str]",
                    "dict",
                    "Optional[str]"
                ],
                "when": [
                    "int",
                    "bool",
                    "Iterable[Tuple[str, dict]]"
                ],
                "exists": [
                    "str"
                ]
            }
        },
        "test_inject_parallel_text": {
            "name": "test_inject_parallel_text",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "parallel_repository": [
                    "int",
                    "Type[Any]",
                    "Sequence[int]"
                ],
                "parallel_line_injector": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "when": [
                    "int",
                    "Type[Any]",
                    "Sequence[int]"
                ],
                "exists": [
                    "int"
                ]
            }
        },
        "test_inject_parallel_text_implicit_chapter": {
            "name": "test_inject_parallel_text_implicit_chapter",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "parallel_repository": [
                    "str"
                ],
                "parallel_line_injector": [
                    "tests.basilisp.helpers.CompileFn",
                    "bool",
                    "str"
                ],
                "when": [
                    "str"
                ]
            }
        },
        "test_inject_parallel_text_implicit_chapter_not_found": {
            "name": "test_inject_parallel_text_implicit_chapter_not_found",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "parallel_repository": [
                    "str",
                    "int"
                ],
                "parallel_line_injector": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "when": [
                    "str",
                    "int"
                ]
            }
        },
        "test_inject_other_lines": {
            "name": "test_inject_other_lines",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "parallel_line_injector": [
                    "int"
                ]
            }
        },
        "test_inject_transliteration": {
            "name": "test_inject_transliteration",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "parallel_line_injector": [
                    "bool",
                    "str",
                    "int",
                    "Callable"
                ],
                "parallel_repository": [
                    "Optional[str]"
                ],
                "when": [
                    "Optional[str]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_parse_at_line.py": {
        "test_parse_atf_at_line": {
            "name": "test_parse_atf_at_line",
            "location": 82,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "line": [
                    "str"
                ],
                "expected_tokens": [
                    "str"
                ]
            }
        },
        "test_parse_atf_at_line_duplicate_status_error": {
            "name": "test_parse_atf_at_line_duplicate_status_error",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_parse_egyptian.py": {
        "test_egpytian_feet_metrical_feet_line": {
            "name": "test_egpytian_feet_metrical_feet_line",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "line": [],
                "expected_tokens": []
            }
        },
        "test_egpytian_feet_metrical_feet_atf": {
            "name": "test_egpytian_feet_metrical_feet_atf",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "atf": []
            }
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_parse_erasure.py": {
        "test_erasure": {
            "name": "test_erasure",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [],
                "atf": [],
                "erased": [],
                "over_erased": []
            }
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_parse_image_dollar_line.py": {
        "test_parse_image_dollar_line": {
            "name": "test_parse_image_dollar_line",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "line": [
                    "str"
                ],
                "expected_line": [
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_parse_loose_dollar_line.py": {
        "test_parse_loose_dollar_line": {
            "name": "test_parse_loose_dollar_line",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "line": [
                    "str",
                    "List[str]"
                ],
                "expected_line": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_parse_note_line.py": {
        "parse_text": {
            "name": "parse_text",
            "location": 21,
            "return": [
                "str",
                "int",
                "Type",
                "List[str]"
            ],
            "arguments": {
                "atf": [
                    "str"
                ]
            }
        },
        "expected_language_part": {
            "name": "expected_language_part",
            "location": 26,
            "return": [
                "ebl.transliteration.domain.markup.LanguagePart"
            ],
            "arguments": {
                "language": [
                    "ebl.transliteration.domain.language.Language"
                ],
                "transliteration": [
                    "str"
                ]
            }
        },
        "test_parse_markup": {
            "name": "test_parse_markup",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "atf": [
                    "str",
                    "Dict[str, Any]"
                ],
                "expected": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_parse_note_line": {
            "name": "test_parse_note_line",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_parse_parallel_line.py": {
        "test_parse_atf_at_line": {
            "name": "test_parse_atf_at_line",
            "location": 91,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "line": [
                    "str"
                ],
                "expected_line": [
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_parse_ruling_dollar_line.py": {
        "test_parse_ruling_dollar_line": {
            "name": "test_parse_ruling_dollar_line",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "prefix": [
                    "str",
                    "int"
                ],
                "ruling": [
                    "bool",
                    "int",
                    "str"
                ],
                "expected_ruling": [
                    "str",
                    "int"
                ],
                "status": [
                    "str",
                    "int",
                    "float"
                ],
                "expected_status": [
                    "str",
                    "int"
                ],
                "status_space": [
                    "str",
                    "int",
                    "float"
                ],
                "parenthesis": [
                    "Callable",
                    "Hashable",
                    "dict"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_parse_state_dollar_line.py": {
        "test_parse_state_dollar_line": {
            "name": "test_parse_state_dollar_line",
            "location": 189,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "prefix": [
                    "str"
                ],
                "parenthesis": [
                    "str"
                ],
                "line": [
                    "str"
                ],
                "expected_line": [
                    "Dict[Any, int]",
                    "str",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "test_parse_state_dollar_line_surface_ambiguity": {
            "name": "test_parse_state_dollar_line_surface_ambiguity",
            "location": 269,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "line": [
                    "str"
                ],
                "expected_line": [
                    "str"
                ]
            }
        },
        "test_parse_state_dollar_line_invalid": {
            "name": "test_parse_state_dollar_line_invalid",
            "location": 274,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "line": [
                    "str",
                    "Sequence",
                    "dict",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_parse_state_dollar_line_exhaustive.py": {
        "test_qualification": {
            "name": "test_qualification",
            "location": 83,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "qualification": [
                    "str",
                    "ebl.transliteration.domain.line.Line"
                ],
                "expected_qualification": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "test_extent": {
            "name": "test_extent",
            "location": 90,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "extent": [
                    "str",
                    "ebl.transliteration.domain.line.Line"
                ],
                "expected_extent": [
                    "str",
                    "Optional[List[str]]",
                    "Optional[int]"
                ]
            }
        },
        "test_scope": {
            "name": "test_scope",
            "location": 97,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "scope": [
                    "str",
                    "ebl.transliteration.domain.line.Line"
                ],
                "expected_scope": [
                    "str",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "test_state": {
            "name": "test_state",
            "location": 104,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "state": [
                    "str",
                    "int",
                    "tuple"
                ],
                "expected_state": [
                    "int",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Union[str, None]"
                ]
            }
        },
        "test_status": {
            "name": "test_status",
            "location": 111,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "status": [
                    "str",
                    "bool",
                    "Set[str]",
                    "dict"
                ],
                "expected_status": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "test_combinations": {
            "name": "test_combinations",
            "location": 122,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "qualification": [
                    "bool",
                    "Dict[str, Set[str]]",
                    "Sequence[str]",
                    "Optional[str]"
                ],
                "extent": [
                    "bool",
                    "Dict[str, Set[str]]",
                    "Sequence[str]",
                    "Optional[str]"
                ],
                "scope": [
                    "bool",
                    "Dict[str, Set[str]]",
                    "Sequence[str]",
                    "Optional[str]"
                ],
                "state": [
                    "bool",
                    "Dict[str, Set[str]]",
                    "Sequence[str]",
                    "Optional[str]"
                ],
                "status": [
                    "bool",
                    "Dict[str, Set[str]]",
                    "Sequence[str]",
                    "Optional[str]"
                ],
                "expected_qualification": [
                    "bool"
                ],
                "expected_extent": [
                    "bool"
                ],
                "expected_scope": [
                    "bool"
                ],
                "expected_state": [
                    "bool"
                ],
                "expected_status": [
                    "bool"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_parse_text_line.py": {
        "test_parser_version": {
            "name": "test_parser_version",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [],
                "version": []
            }
        },
        "test_parse_text_line": {
            "name": "test_parse_text_line",
            "location": 1204,
            "return": [
                "None"
            ],
            "arguments": {
                "line": [],
                "expected_tokens": []
            }
        },
        "test_parse_dividers": {
            "name": "test_parse_dividers",
            "location": 1208,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_atf_language_shifts": {
            "name": "test_parse_atf_language_shifts",
            "location": 1251,
            "return": [
                "None"
            ],
            "arguments": {
                "code": [],
                "expected_language": []
            }
        },
        "test_parse_normalized_akkadain_shift": {
            "name": "test_parse_normalized_akkadain_shift",
            "location": 1274,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_text_line": {
            "name": "test_invalid_text_line",
            "location": 1307,
            "return": [
                "None"
            ],
            "arguments": {
                "atf": [],
                "line_numbers": []
            }
        },
        "test_invalid_brackets": {
            "name": "test_invalid_brackets",
            "location": 1317,
            "return": [
                "None"
            ],
            "arguments": {
                "atf": [],
                "line_numbers": []
            }
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_parse_translation_line.py": {
        "test_parse_translation_line": {
            "name": "test_parse_translation_line",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "atf": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "expected_line": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_parse_word.py": {
        "test_word": {
            "name": "test_word",
            "location": 751,
            "return": [
                "None"
            ],
            "arguments": {
                "atf": [],
                "expected": []
            }
        },
        "test_lone_determinative": {
            "name": "test_lone_determinative",
            "location": 839,
            "return": [
                "None"
            ],
            "arguments": {
                "atf": [],
                "expected": []
            }
        },
        "test_invalid_lone_determinative": {
            "name": "test_invalid_lone_determinative",
            "location": 844,
            "return": [
                "None"
            ],
            "arguments": {
                "atf": []
            }
        },
        "test_invalid": {
            "name": "test_invalid",
            "location": 875,
            "return": [
                "None"
            ],
            "arguments": {
                "invalid_atf": []
            }
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_reconstructed_text_parser.py": {
        "assert_parse": {
            "name": "assert_parse",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [],
                "expected": [],
                "text": []
            }
        },
        "assert_parse_error": {
            "name": "assert_parse_error",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [],
                "text": []
            }
        },
        "test_word": {
            "name": "test_word",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [],
                "expected": []
            }
        },
        "test_invalid_word": {
            "name": "test_invalid_word",
            "location": 435,
            "return": [
                "None"
            ],
            "arguments": {
                "text": []
            }
        },
        "test_caesura": {
            "name": "test_caesura",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [],
                "is_uncertain": []
            }
        },
        "test_feet_separator": {
            "name": "test_feet_separator",
            "location": 447,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [],
                "is_uncertain": []
            }
        },
        "test_invalid_break": {
            "name": "test_invalid_break",
            "location": 456,
            "return": [
                "None"
            ],
            "arguments": {
                "text": []
            }
        },
        "test_reconstructed_line": {
            "name": "test_reconstructed_line",
            "location": 538,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [],
                "expected": []
            }
        },
        "test_invalid_reconstructed_line": {
            "name": "test_invalid_reconstructed_line",
            "location": 575,
            "return": [
                "None"
            ],
            "arguments": {
                "text": []
            }
        },
        "test_validate_invalid": {
            "name": "test_validate_invalid",
            "location": 605,
            "return": [
                "None"
            ],
            "arguments": {
                "text": []
            }
        },
        "test_validate_valid": {
            "name": "test_validate_valid",
            "location": 619,
            "return": [
                "None"
            ],
            "arguments": {
                "text": []
            }
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_scope_schema.py": {
        "test_dump_scope_schema": {
            "name": "test_dump_scope_schema",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_scope_schema": {
            "name": "test_load_scope_schema",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_sign.py": {
        "test_logogram": {
            "name": "test_logogram",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fossey": {
            "name": "test_fossey",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sign": {
            "name": "test_sign",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_standardization_abz": {
            "name": "test_standardization_abz",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_standardization_multiple_abz": {
            "name": "test_standardization_multiple_abz",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_standardization_no_abz": {
            "name": "test_standardization_no_abz",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_signs_visitor.py": {
        "test_signs_visitor": {
            "name": "test_signs_visitor",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [],
                "expected": [],
                "sign_repository": [],
                "signs": []
            }
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_sign_tokens.py": {
        "test_divider": {
            "name": "test_divider",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unidentified_sign": {
            "name": "test_unidentified_sign",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unidentified_sign_with_flags": {
            "name": "test_unidentified_sign_with_flags",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unclear_sign": {
            "name": "test_unclear_sign",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unclear_sign_with_flags": {
            "name": "test_unclear_sign_with_flags",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_reading": {
            "name": "test_reading",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "name_parts": [],
                "sub_index": [],
                "modifiers": [],
                "flags": [],
                "sign": [],
                "expected_value": [],
                "expected_clean_value": [],
                "expected_name": []
            }
        },
        "test_logogram": {
            "name": "test_logogram",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "name_parts": [],
                "sub_index": [],
                "modifiers": [],
                "flags": [],
                "sign": [],
                "surrogate": [],
                "expected_value": [],
                "expected_clean_value": [],
                "expected_name": []
            }
        },
        "test_number": {
            "name": "test_number",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "name_parts": [],
                "modifiers": [],
                "flags": [],
                "sign": [],
                "expected_value": [],
                "expected_clean_value": [],
                "expected_name": []
            }
        },
        "test_compound_grapheme": {
            "name": "test_compound_grapheme",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_grapheme": {
            "name": "test_grapheme",
            "location": 456,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "modifiers": [],
                "flags": [],
                "expected_value": [],
                "expected_clean_value": []
            }
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_text.py": {
        "test_of_iterable": {
            "name": "test_of_iterable",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_lines": {
            "name": "test_lines",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_text_lines": {
            "name": "test_text_lines",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_number_of_lines": {
            "name": "test_number_of_lines",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_version": {
            "name": "test_version",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_version": {
            "name": "test_set_version",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_lemmatization": {
            "name": "test_lemmatization",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_atf": {
            "name": "test_atf",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update_lemmatization": {
            "name": "test_update_lemmatization",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update_lemmatization_incompatible": {
            "name": "test_update_lemmatization_incompatible",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update_lemmatization_wrong_lines": {
            "name": "test_update_lemmatization_wrong_lines",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_labels": {
            "name": "test_labels",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "text_with_labels": [
                    "str",
                    "int",
                    "List[Tuple[int, int]]",
                    "List[str]"
                ]
            }
        },
        "test_translation_berofe_text": {
            "name": "test_translation_berofe_text",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_extent": {
            "name": "test_invalid_extent",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_extent_before_translation": {
            "name": "test_extent_before_translation",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_exent_overlapping": {
            "name": "test_exent_overlapping",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_extent_overlapping_languages": {
            "name": "test_extent_overlapping_languages",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_text_line.py": {
        "test_text_line_of_iterable": {
            "name": "test_text_line_of_iterable",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "code": [],
                "language": []
            }
        },
        "test_text_line_of_iterable_normalized": {
            "name": "test_text_line_of_iterable_normalized",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_text_line_atf": {
            "name": "test_text_line_atf",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "atf": []
            }
        },
        "test_text_line_atf_gloss": {
            "name": "test_text_line_atf_gloss",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_text_line_atf_erasure": {
            "name": "test_text_line_atf_erasure",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "erasure": [],
                "expected": []
            }
        },
        "test_lemmatization": {
            "name": "test_lemmatization",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update_lemmatization": {
            "name": "test_update_lemmatization",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update_lemmatization_incompatible": {
            "name": "test_update_lemmatization_incompatible",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update_lemmatization_wrong_lenght": {
            "name": "test_update_lemmatization_wrong_lenght",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_text_merge.py": {
        "test_merge": {
            "name": "test_merge",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "old": [
                    "Callable[[Optional, Optional, str], None]"
                ],
                "new": [
                    "int",
                    "Callable",
                    "List[str]",
                    "bool"
                ],
                "expected": [
                    "ebl.transliteration.domain.texText",
                    "int"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_text_schema.py": {
        "test_dump_line": {
            "name": "test_dump_line",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_line": {
            "name": "test_load_line",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "lines": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_tokens.py": {
        "test_value_token": {
            "name": "test_value_token",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_language_shift": {
            "name": "test_language_shift",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [],
                "expected_language": [],
                "normalized": []
            }
        },
        "test_set_unique_lemma_incompatible": {
            "name": "test_set_unique_lemma_incompatible",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "token": []
            }
        },
        "test_set_unique_lemma_with_lemma": {
            "name": "test_set_unique_lemma_with_lemma",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "token": []
            }
        },
        "test_set_unique_lemma_no_lemma": {
            "name": "test_set_unique_lemma_no_lemma",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "token": []
            }
        },
        "test_set_alignment_incompatible": {
            "name": "test_set_alignment_incompatible",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "token": []
            }
        },
        "test_set_non_empty_alignment": {
            "name": "test_set_non_empty_alignment",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "token": []
            }
        },
        "test_set_alignment_no_alignment": {
            "name": "test_set_alignment_no_alignment",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "token": []
            }
        },
        "test_merge": {
            "name": "test_merge",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "old": [],
                "new": []
            }
        },
        "test_unknown_number_of_signs": {
            "name": "test_unknown_number_of_signs",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_egyptian_metrical_feet_separator": {
            "name": "test_egyptian_metrical_feet_separator",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tabulation": {
            "name": "test_tabulation",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_commentary_protocol": {
            "name": "test_commentary_protocol",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "protocol_enum": []
            }
        },
        "test_column": {
            "name": "test_column",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_column_with_number": {
            "name": "test_column_with_number",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_column": {
            "name": "test_invalid_column",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_variant": {
            "name": "test_variant",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_joiner": {
            "name": "test_joiner",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "joiner": [],
                "expected_value": []
            }
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_translation_line.py": {
        "test_parallel_fragment": {
            "name": "test_parallel_fragment",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "parts": [
                    "str",
                    "dict"
                ],
                "language": [
                    "int",
                    "str"
                ],
                "extent": [
                    "int",
                    "str"
                ],
                "prefix": [
                    "str",
                    "Dict[str, Any]"
                ],
                "translation": [
                    "int",
                    "bool",
                    "str",
                    "float"
                ]
            }
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_transliteration_query.py": {
        "test_regexp": {
            "name": "test_regexp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "signs": [],
                "is_match": []
            }
        },
        "test_is_sequence_empty": {
            "name": "test_is_sequence_empty",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [],
                "expected": []
            }
        }
    },
    "ebl-api-master/ebl/tests/transliteration/test_word.py": {
        "test_defaults": {
            "name": "test_defaults",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_word": {
            "name": "test_word",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "language": [],
                "unique_lemma": []
            }
        },
        "test_clean_value": {
            "name": "test_clean_value",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_lemmatizable": {
            "name": "test_lemmatizable",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "word": [],
                "expected": []
            }
        },
        "test_alignable": {
            "name": "test_alignable",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "word": [],
                "_": []
            }
        },
        "test_has_variant": {
            "name": "test_has_variant",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "variant": [],
                "expected": []
            }
        },
        "test_set_language": {
            "name": "test_set_language",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_unique_lemma": {
            "name": "test_set_unique_lemma",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_unique_lemma_empty": {
            "name": "test_set_unique_lemma_empty",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_unique_lemma_invalid": {
            "name": "test_set_unique_lemma_invalid",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "word": []
            }
        },
        "test_set_alignment": {
            "name": "test_set_alignment",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_merge": {
            "name": "test_merge",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "old": [],
                "new": [],
                "expected": []
            }
        }
    },
    "ebl-api-master/ebl/tests/transliteration/__init__.py": {},
    "ebl-api-master/ebl/tests/users/test_auth0_user.py": {
        "create_default_profile": {
            "name": "create_default_profile",
            "location": 18,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {}
        },
        "test_has_scope": {
            "name": "test_has_scope",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_profile": {
            "name": "test_profile",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_memoize_profile": {
            "name": "test_memoize_profile",
            "location": 36,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_ebl_name": {
            "name": "test_ebl_name",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "profile": [
                    "str",
                    "Optional[List[str]]"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "test_can_read_folio": {
            "name": "test_can_read_folio",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "scopes": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "Set[str]"
                ],
                "folio_name": [
                    "str",
                    "int"
                ],
                "expected": [
                    "str",
                    "int"
                ]
            }
        },
        "ProfileFactory.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "profile": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ProfileFactory.create": {
            "name": "create",
            "location": 13,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ebl-api-master/ebl/tests/users/test_guest_user.py": {
        "test_has_scope": {
            "name": "test_has_scope",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_profile": {
            "name": "test_profile",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ebl_name": {
            "name": "test_ebl_name",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_read_folio": {
            "name": "test_can_read_folio",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/users/test_require_scope.py": {
        "do_get": {
            "name": "do_get",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "scope": [
                    "bool",
                    "int"
                ]
            }
        },
        "test_require_scope_present": {
            "name": "test_require_scope_present",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_require_scope_not_present": {
            "name": "test_require_scope_not_present",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_require_scope_no_user": {
            "name": "test_require_scope_no_user",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestResource.on_get": {
            "name": "on_get",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_req": [
                    "falcon.Request",
                    "bool",
                    "str"
                ],
                "resp": [
                    "falcon.Response",
                    "str"
                ]
            }
        },
        "do_get.user_loader": {
            "name": "user_loader",
            "location": 18,
            "return": [
                "Auth0User",
                "bytes",
                "Dict[str, Dict[str, Any]]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/tests/users/__init__.py": {},
    "ebl-api-master/ebl/transliteration/__init__.py": {},
    "ebl-api-master/ebl/transliteration/application/at_line_schemas.py": {
        "SealAtLineSchema.make_line": {
            "name": "make_line",
            "location": 41,
            "return": [
                "SealAtLine",
                "int",
                "bool",
                "ebl.fragmentarium.application.fragment_updater.FragmentUpdater"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "bytes",
                    "Iterable",
                    "Iterable[T]"
                ]
            }
        },
        "HeadingAtLineSchema.make_line": {
            "name": "make_line",
            "location": 51,
            "return": [
                "HeadingAtLine",
                "int",
                "str",
                "ebl.fragmentarium.application.fragment_updater.FragmentUpdater"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "List[str]",
                    "dict",
                    "bool",
                    "Optional[str]",
                    "str",
                    "int",
                    "Dict[str, List[Any]]"
                ]
            }
        },
        "ColumnAtLineSchema.make_line": {
            "name": "make_line",
            "location": 60,
            "return": [
                "bool",
                "ColumnAtLine"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "bytes",
                    "Iterable",
                    "Iterable[T]"
                ]
            }
        },
        "DiscourseAtLineSchema.make_line": {
            "name": "make_line",
            "location": 69,
            "return": [
                "DiscourseAtLine",
                "List[Callable]",
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "bytes",
                    "Iterable",
                    "Iterable[T]"
                ]
            }
        },
        "SurfaceAtLineSchema.make_line": {
            "name": "make_line",
            "location": 78,
            "return": [
                "SurfaceAtLine",
                "List[Callable]",
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "bytes",
                    "Iterable",
                    "Iterable[T]"
                ]
            }
        },
        "ObjectAtLineSchema.make_line": {
            "name": "make_line",
            "location": 90,
            "return": [
                "ObjectAtLine",
                "int",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "bytes",
                    "Iterable",
                    "Iterable[T]"
                ]
            }
        },
        "DivisionAtLineSchema.make_line": {
            "name": "make_line",
            "location": 100,
            "return": [
                "DivisionAtLine",
                "dict",
                "authorityspoke.io.schemas.RawFactor"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "dict",
                    "tuple",
                    "str"
                ]
            }
        },
        "CompositeAtLineSchema.make_line": {
            "name": "make_line",
            "location": 111,
            "return": [
                "CompositeAtLine",
                "Callable",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/application/dollar_line_schemas.py": {
        "LooseDollarLineSchema.make_line": {
            "name": "make_line",
            "location": 33,
            "return": [
                "LooseDollarLine",
                "str",
                "authorityspoke.io.schemas.RawFactor",
                "Tuple[str]",
                "Iterable[str]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "Callable[[Any], None]",
                    "bytes",
                    "int",
                    "dict"
                ]
            }
        },
        "ImageDollarLineSchema.make_line": {
            "name": "make_line",
            "location": 44,
            "return": [
                "ImageDollarLine",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bool",
                    "str",
                    "List[str]",
                    "Dict[str, object]",
                    "int"
                ]
            }
        },
        "RulingDollarLineSchema.make_line": {
            "name": "make_line",
            "location": 54,
            "return": [
                "RulingDollarLine",
                "int",
                "ebl.fragmentarium.application.fragment_updater.FragmentUpdater"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "str"
                ]
            }
        },
        "SealDollarLineSchema.make_line": {
            "name": "make_line",
            "location": 63,
            "return": [
                "SealDollarLine",
                "int",
                "bool",
                "ebl.fragmentarium.application.fragment_updater.FragmentUpdater"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "Callable[[Any], None]",
                    "bytes",
                    "int",
                    "dict"
                ]
            }
        },
        "ScopeContainerSchema.make__scope_container": {
            "name": "make__scope_container",
            "location": 83,
            "return": [
                "ScopeContainer",
                "Optional[Dict]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "ScopeContainerSchema.load_scope": {
            "name": "load_scope",
            "location": 88,
            "return": [
                "Union[(atf.Object, atf.Scope, atf.Surface)]"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "str"
                ],
                "content": [
                    "str"
                ]
            }
        },
        "StateDollarLineSchema.make_line": {
            "name": "make_line",
            "location": 113,
            "return": [
                "StateDollarLine",
                "dict",
                "int",
                "Dict[int, dict]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "Dict[str, object]",
                    "bool"
                ]
            }
        },
        "StateDollarLineSchema.load_extent": {
            "name": "load_extent",
            "location": 123,
            "return": [
                "tuple",
                "str",
                "bool"
            ],
            "arguments": {
                "extent": [
                    "List[str]",
                    "dict",
                    "list",
                    "Optional[bool]"
                ]
            }
        },
        "StateDollarLineSchema.dump_extent": {
            "name": "dump_extent",
            "location": 132,
            "return": [
                "list",
                "str",
                "bool"
            ],
            "arguments": {
                "extent": [
                    "bool",
                    "teams.services.domain.NameToTeamStats",
                    "Callable[[], Awaitable[Mapping]]",
                    "Dict[str, float]",
                    "dict"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/application/label_schemas.py": {
        "try_parse_labels": {
            "name": "try_parse_labels",
            "location": 14,
            "return": [
                "Sequence[ebl.transliteration.domain.labels.Label]"
            ],
            "arguments": {
                "value": [
                    "Tuple[str, int]",
                    "str",
                    "List[str]",
                    "Dict[str, Any]",
                    "Tuple[Sequence[str]]"
                ]
            }
        },
        "labels": {
            "name": "labels",
            "location": 21,
            "return": [
                "str",
                "int",
                "Mapping[Any, Any]",
                "List[Dict[str, Any]]",
                "dict"
            ],
            "arguments": {}
        },
        "ColumnLabelSchema.make_label": {
            "name": "make_label",
            "location": 38,
            "return": [
                "ColumnLabel",
                "dict",
                "Optional[str]",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "bytes",
                    "str"
                ]
            }
        },
        "SurfaceLabelSchema.make_label": {
            "name": "make_label",
            "location": 47,
            "return": [
                "SurfaceLabel",
                "int",
                "Optional[Dict]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "T",
                    "Union[list, dict]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "ObjectLabelSchema.make_label": {
            "name": "make_label",
            "location": 56,
            "return": [
                "ObjectLabel",
                "int",
                "Optional[Dict]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "T",
                    "Union[list, dict]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/application/lemmatization_schema.py": {
        "LemmatizationTokenSchema.make_token": {
            "name": "make_token",
            "location": 11,
            "return": [
                "LemmatizationToken",
                "int",
                "Optional[Dict]",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "src.domain.entity.user.User"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/application/line_number_schemas.py": {
        "LineNumberSchema.make_line_number": {
            "name": "make_line_number",
            "location": 26,
            "return": [
                "LineNumber",
                "str",
                "int",
                "Callable[[Dict], Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "dict",
                    "Callable[[Any], None]",
                    "Union[Dict, List]"
                ]
            }
        },
        "LineNumberRangeSchema.make_line_number_range": {
            "name": "make_line_number_range",
            "location": 40,
            "return": [
                "LineNumberRange",
                "bool",
                "int",
                "Sequence"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/application/line_schemas.py": {
        "TextLineSchema.make_line": {
            "name": "make_line",
            "location": 29,
            "return": [
                "float",
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "str"
                ]
            }
        },
        "ControlLineSchema.make_line": {
            "name": "make_line",
            "location": 42,
            "return": [
                "ControlLine",
                "int",
                "bool",
                "ebl.fragmentarium.application.fragment_updater.FragmentUpdater",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "Iterable[T]",
                    "Iterable"
                ]
            }
        },
        "EmptyLineSchema.make_line": {
            "name": "make_line",
            "location": 53,
            "return": [
                "EmptyLine",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "set",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "bytes",
                    "str",
                    "List[str]",
                    "Mapping"
                ]
            }
        },
        "NoteLineSchema.make_line": {
            "name": "make_line",
            "location": 68,
            "return": [
                "NoteLine",
                "bool",
                "str",
                "int",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "bytes",
                    "Iterable",
                    "Iterable[T]"
                ]
            }
        },
        "ExtentSchema.make_extent": {
            "name": "make_extent",
            "location": 77,
            "return": [
                "Extent",
                "str",
                "bool",
                "dict",
                "search.domain.DocMeta",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "list"
                ]
            }
        },
        "TranslationLineSchema.make_line": {
            "name": "make_line",
            "location": 97,
            "return": [
                "TranslationLine",
                "int",
                "bool",
                "ebl.fragmentarium.application.fragment_updater.FragmentUpdater"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/application/museum_number_schema.py": {
        "MuseumNumberSchema.create_museum_number": {
            "name": "create_museum_number",
            "location": 14,
            "return": [
                "MuseumNumber",
                "int",
                "ebl.fragmentarium.application.fragment_updater.FragmentUpdater",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "T",
                    "str",
                    "Iterable[T]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/application/note_line_part_schemas.py": {
        "StringPartSchema.make_part": {
            "name": "make_part",
            "location": 22,
            "return": [
                "str",
                "StringPart"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "Iterable[T]",
                    "bytes"
                ]
            }
        },
        "EmphasisPartSchema.make_part": {
            "name": "make_part",
            "location": 30,
            "return": [
                "EmphasisPart",
                "str",
                "Callable",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "Iterable[T]",
                    "bytes"
                ]
            }
        },
        "LanguagePartSchema.make_part": {
            "name": "make_part",
            "location": 39,
            "return": [
                "str",
                "Optional[Dict]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes"
                ]
            }
        },
        "BibliographyPartSchema.make_part": {
            "name": "make_part",
            "location": 47,
            "return": [
                "BibliographyPart",
                "int",
                "ebl.fragmentarium.application.fragment_updater.FragmentUpdater",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "Iterable[T]",
                    "bytes"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/application/one_of_line_schema.py": {},
    "ebl-api-master/ebl/transliteration/application/parallel_line_injector.py": {
        "ParallelRepository.fragment_exists": {
            "name": "fragment_exists",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "museum_number": [
                    "ebl.transliteration.domain.museum_number.MuseumNumber"
                ]
            }
        },
        "ParallelRepository.find_implicit_chapter": {
            "name": "find_implicit_chapter",
            "location": 27,
            "return": [
                "ebl.transliteration.domain.parallel_line.ChapterName"
            ],
            "arguments": {
                "self": [],
                "text_id": [
                    "ebl.transliteration.domain.text_id.TextId"
                ]
            }
        },
        "ParallelRepository.chapter_exists": {
            "name": "chapter_exists",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "text_id": [
                    "ebl.transliteration.domain.text_id.TextId"
                ],
                "chapter_name": [
                    "ebl.transliteration.domain.parallel_line.ChapterName"
                ]
            }
        },
        "ParallelLineInjector.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repository": [
                    "ParallelRepository"
                ]
            }
        },
        "ParallelLineInjector.inject": {
            "name": "inject",
            "location": 41,
            "return": [
                "Sequence[T]"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "Sequence[T]"
                ]
            }
        },
        "ParallelLineInjector.inject_transliteration": {
            "name": "inject_transliteration",
            "location": 44,
            "return": [
                "ebl.transliteration.domain.text.Text"
            ],
            "arguments": {
                "self": [],
                "transliteration": [
                    "ebl.transliteration.domain.text.Text"
                ]
            }
        },
        "ParallelLineInjector._inject_line": {
            "name": "_inject_line",
            "location": 48,
            "return": [
                "Sequence[str]",
                "str",
                "Iterable[str]",
                "list",
                "Set[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "Iterable[str]",
                    "List[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "ParallelLineInjector._": {
            "name": "_",
            "location": 59,
            "return": [
                "bool",
                "int",
                "dict",
                "str",
                "Union[int, float, complex]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/application/parallel_line_schemas.py": {
        "exists": {
            "name": "exists",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "LabelsSchema.make_labels": {
            "name": "make_labels",
            "location": 46,
            "return": [
                "Labels",
                "str",
                "int",
                "dict",
                "bytes",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "marshmallow.Schema"
                ]
            }
        },
        "ParallelFragmentSchema.make_line": {
            "name": "make_line",
            "location": 69,
            "return": [
                "ParallelFragment",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "int",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ChapterNameSchema.make_id": {
            "name": "make_id",
            "location": 86,
            "return": [
                "ChapterName",
                "str",
                "dict",
                "Dict[str, str]",
                "int",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "List[str]",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "ParallelTextSchema.make_line": {
            "name": "make_line",
            "location": 106,
            "return": [
                "ParallelText",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, str]",
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "ParallelCompositionSchema.make_line": {
            "name": "make_line",
            "location": 124,
            "return": [
                "ParallelComposition",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/application/signs_visitor.py": {
        "strip_flags": {
            "name": "strip_flags",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "skip_enclosures": {
            "name": "skip_enclosures",
            "location": 44,
            "return": [
                "Callable[([S, T], None)]"
            ],
            "arguments": {
                "func": [
                    "Callable[([S, T], None)]"
                ]
            }
        },
        "skip_erasures": {
            "name": "skip_erasures",
            "location": 58,
            "return": [
                "Callable[([S, T], None)]"
            ],
            "arguments": {
                "func": [
                    "Callable[([S, T], None)]"
                ]
            }
        },
        "skip_enclosures.inner": {
            "name": "inner",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "skip_erasures.inner": {
            "name": "inner",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "SignsVisitor.result": {
            "name": "result",
            "location": 75,
            "return": [
                "bool",
                "int",
                "str",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignsVisitor.visit_word": {
            "name": "visit_word",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [
                    "S"
                ],
                "word": [
                    "ebl.transliteration.domain.enclosure_tokens.Gloss",
                    "dict",
                    "ebl.transliteration.domain.word_tokens.Word"
                ]
            }
        },
        "SignsVisitor.visit_gloss": {
            "name": "visit_gloss",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gloss": [
                    "ebl.transliteration.domain.enclosure_tokens.Gloss"
                ]
            }
        },
        "SignsVisitor.visit_unknown_sign": {
            "name": "visit_unknown_sign",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [
                    "S"
                ],
                "sign": [
                    "dict"
                ]
            }
        },
        "SignsVisitor.visit_named_sign": {
            "name": "visit_named_sign",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [
                    "S"
                ],
                "named_sign": [
                    "str",
                    "ebl.transliteration.domain.sign_tokens.NamedSign"
                ]
            }
        },
        "SignsVisitor.visit_number": {
            "name": "visit_number",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [
                    "S"
                ],
                "number": [
                    "ebl.corpus.domain.texManuscript",
                    "ebl.transliteration.domain.word_tokens.Word",
                    "str"
                ]
            }
        },
        "SignsVisitor.visit_compound_grapheme": {
            "name": "visit_compound_grapheme",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [
                    "S"
                ],
                "grapheme": [
                    "bool",
                    "dict"
                ]
            }
        },
        "SignsVisitor._visit_compount_grapheme_part": {
            "name": "_visit_compount_grapheme_part",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stripped_part": [
                    "str"
                ]
            }
        },
        "SignsVisitor.visit_grapheme": {
            "name": "visit_grapheme",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grapheme": [
                    "ebl.transliteration.domain.sign_tokens.Grapheme"
                ]
            }
        },
        "SignsVisitor.visit_divider": {
            "name": "visit_divider",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [
                    "S"
                ],
                "divider": [
                    "ebl.fragmentarium.domain.record.RecordEntry",
                    "ebl.corpus.domain.texChapter",
                    "ebl.corpus.domain.texManuscript"
                ]
            }
        },
        "SignsVisitor.visit_variant": {
            "name": "visit_variant",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [
                    "S"
                ],
                "variant": [
                    "ebl.transliteration.domain.tokens.Variant",
                    "int"
                ]
            }
        },
        "SignsVisitor._visit_sign": {
            "name": "_visit_sign",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sign": [
                    "ebl.transliteration.domain.sign.Sign"
                ]
            }
        },
        "SignsVisitor._find": {
            "name": "_find",
            "location": 176,
            "return": [
                "ebl.transliteration.domain.standardization.Standardization"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "ebl.transliteration.domain.sign.SignName"
                ]
            }
        },
        "SignsVisitor._visit_tokens": {
            "name": "_visit_tokens",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "Sequence[ebl.transliteration.domain.tokens.Token]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/application/sign_repository.py": {
        "SignRepository.create": {
            "name": "create",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "sign": [
                    "ebl.transliteration.domain.sign.Sign"
                ]
            }
        },
        "SignRepository.find": {
            "name": "find",
            "location": 13,
            "return": [
                "ebl.transliteration.domain.sign.Sign"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "ebl.transliteration.domain.sign.SignName"
                ]
            }
        },
        "SignRepository.search_by_id": {
            "name": "search_by_id",
            "location": 17,
            "return": [
                "Sequence[ebl.transliteration.domain.sign.Sign]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str"
                ]
            }
        },
        "SignRepository.search_all": {
            "name": "search_all",
            "location": 21,
            "return": [
                "Sequence[ebl.transliteration.domain.sign.Sign]"
            ],
            "arguments": {
                "self": [],
                "reading": [
                    "str"
                ],
                "sub_index": [
                    "int"
                ]
            }
        },
        "SignRepository.search_by_lists_name": {
            "name": "search_by_lists_name",
            "location": 25,
            "return": [
                "Sequence[ebl.transliteration.domain.sign.Sign]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "number": [
                    "str"
                ]
            }
        },
        "SignRepository.search_composite_signs": {
            "name": "search_composite_signs",
            "location": 29,
            "return": [
                "Sequence[ebl.transliteration.domain.sign.Sign]"
            ],
            "arguments": {
                "self": [],
                "reading": [
                    "str"
                ],
                "sub_index": [
                    "int"
                ]
            }
        },
        "SignRepository.search_include_homophones": {
            "name": "search_include_homophones",
            "location": 33,
            "return": [
                "Sequence[ebl.transliteration.domain.sign.Sign]"
            ],
            "arguments": {
                "self": [],
                "reading": [
                    "str"
                ]
            }
        },
        "SignRepository.search": {
            "name": "search",
            "location": 37,
            "return": [
                "Optional[ebl.transliteration.domain.sign.Sign]"
            ],
            "arguments": {
                "self": [],
                "reading": [
                    "str"
                ],
                "sub_index": [
                    "Optional[int]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/application/text_schema.py": {
        "TextSchema.make_text": {
            "name": "make_text",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "dict",
                    "tuple",
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/application/token_schemas.py": {
        "ValueTokenSchema.make_token": {
            "name": "make_token",
            "location": 80,
            "return": [
                "ValueToken",
                "str",
                "bool",
                "int",
                "ebl.transliteration.domain.atf.Atf",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "List[str]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "LanguageShiftSchema.make_token": {
            "name": "make_token",
            "location": 91,
            "return": [
                "LanguageShift"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "List[str]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "EnclosureSchema.make_token": {
            "name": "make_token",
            "location": 102,
            "return": [
                "ebl.transliteration.domain.tokens.Token",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bool",
                    "Iterable[bytes]",
                    "dict",
                    "tuple",
                    "Optional[bool]",
                    "list"
                ]
            }
        },
        "DocumentOrientedGlossSchema.make_token": {
            "name": "make_token",
            "location": 108,
            "return": [
                "Mapping[str, Any]",
                "Sequence[str]",
                "int",
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str"
                ]
            }
        },
        "BrokenAwaySchema.make_token": {
            "name": "make_token",
            "location": 118,
            "return": [
                "Mapping[str, Any]",
                "bytes",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "Sequence"
                ]
            }
        },
        "PerhapsBrokenAwaySchema.make_token": {
            "name": "make_token",
            "location": 128,
            "return": [
                "Mapping[str, Any]",
                "Sequence[str]",
                "int",
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str"
                ]
            }
        },
        "AccidentalOmissionSchema.make_token": {
            "name": "make_token",
            "location": 138,
            "return": [
                "Mapping[str, Any]",
                "bytes",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "Sequence"
                ]
            }
        },
        "IntentionalOmissionSchema.make_token": {
            "name": "make_token",
            "location": 148,
            "return": [
                "Mapping[str, Any]",
                "bytes",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "Sequence"
                ]
            }
        },
        "RemovalSchema.make_token": {
            "name": "make_token",
            "location": 158,
            "return": [
                "domain.Thing",
                "BaseException"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "EmendationSchema.make_token": {
            "name": "make_token",
            "location": 168,
            "return": [
                "domain.Thing",
                "BaseException"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "ErasureSchema.make_token": {
            "name": "make_token",
            "location": 178,
            "return": [
                "domain.Thing",
                "BaseException"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "UnknownNumberOfSignsSchema.make_token": {
            "name": "make_token",
            "location": 188,
            "return": [
                "UnknownNumberOfSigns",
                "str",
                "search.domain.DocMeta",
                "Language"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "List[str]",
                    "dict"
                ]
            }
        },
        "EgyptianMetricalFeetSeparatorSchema.make_token": {
            "name": "make_token",
            "location": 196,
            "return": [
                "int",
                "Sequence[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "Dict[str, float]",
                    "bytes"
                ]
            }
        },
        "TabulationSchema.make_token": {
            "name": "make_token",
            "location": 206,
            "return": [
                "Tabulation",
                "List[str]",
                "Union[str, int]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "str"
                ]
            }
        },
        "CommentaryProtocolSchema.make_token": {
            "name": "make_token",
            "location": 212,
            "return": [
                "CommentaryProtocol"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "List[str]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "DividerSchema.make_token": {
            "name": "make_token",
            "location": 224,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "\"DGEList\"",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "ColumnSchema.make_token": {
            "name": "make_token",
            "location": 236,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "UnidentifiedSignSchema.make_token": {
            "name": "make_token",
            "location": 248,
            "return": [
                "Iterable[str]",
                "int",
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "dict",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "UnclearSignSchema.make_token": {
            "name": "make_token",
            "location": 260,
            "return": [
                "Iterable[str]",
                "int",
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "dict",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "JoinerSchema.make_token": {
            "name": "make_token",
            "location": 272,
            "return": [
                "Joiner",
                "List[str]",
                "Union[str, int]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "InWordNewlineSchema.make_token": {
            "name": "make_token",
            "location": 280,
            "return": [
                "InWordNewline",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "ReadingSchema.make_token": {
            "name": "make_token",
            "location": 297,
            "return": [
                "Optional[str]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "LogogramSchema.make_token": {
            "name": "make_token",
            "location": 317,
            "return": [
                "Optional[str]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "NumberSchema.make_token": {
            "name": "make_token",
            "location": 334,
            "return": [
                "int",
                "pynmrstar.Schema",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "WordSchema.make_token": {
            "name": "make_token",
            "location": 366,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "WordSchema.dump_token": {
            "name": "dump_token",
            "location": 378,
            "return": [
                "Mapping[str, Any]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "List[int]",
                    "list"
                ]
            }
        },
        "LoneDeterminativeSchema.make_token": {
            "name": "make_token",
            "location": 384,
            "return": [
                "Callable",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "LoneDeterminativeSchema.dump_token": {
            "name": "dump_token",
            "location": 396,
            "return": [
                "Mapping[str, Any]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "List[int]",
                    "list"
                ]
            }
        },
        "VariantSchema.make_token": {
            "name": "make_token",
            "location": 404,
            "return": [
                "domain.Thing",
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "GraphemeSchema.make_token": {
            "name": "make_token",
            "location": 418,
            "return": [
                "domain.Thing"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "CompoundGraphemeSchema.make_token": {
            "name": "make_token",
            "location": 430,
            "return": [
                "bytes",
                "Sequence[int]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "Sequence"
                ]
            }
        },
        "GlossSchema.make_token": {
            "name": "make_token",
            "location": 443,
            "return": [
                "ebl.transliteration.domain.enclosure_tokens.Gloss",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bool",
                    "Iterable[bytes]",
                    "dict",
                    "tuple",
                    "Optional[bool]",
                    "list"
                ]
            }
        },
        "DeterminativeSchema.make_token": {
            "name": "make_token",
            "location": 449,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "PhoneticGlossSchema.make_token": {
            "name": "make_token",
            "location": 459,
            "return": [
                "Mapping[str, Any]",
                "bytes",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "Sequence"
                ]
            }
        },
        "LinguisticGlossSchema.make_token": {
            "name": "make_token",
            "location": 469,
            "return": [
                "Mapping[str, Any]",
                "bytes",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "Sequence"
                ]
            }
        },
        "LineBreakSchema.make_token": {
            "name": "make_token",
            "location": 479,
            "return": [
                "LineBreak",
                "str",
                "Sequence[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "AkkadianWordSchema.make_token": {
            "name": "make_token",
            "location": 487,
            "return": [
                "str",
                "Iterable[str]",
                "bool",
                "Language"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "bool",
                    "int",
                    "List[Tuple[str, int]]"
                ]
            }
        },
        "CaesuraSchema.make_token": {
            "name": "make_token",
            "location": 504,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "int",
                    "Iterable"
                ]
            }
        },
        "MetricalFootSeparatorSchema.make_token": {
            "name": "make_token",
            "location": 512,
            "return": [
                "str",
                "Iterable[str]",
                "Dict[str, Any]",
                "int",
                "eth.abc.DatabaseAPI"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, str]",
                    "T",
                    "Dict[str, Any]"
                ]
            }
        },
        "GreekLetterSchema.make_token": {
            "name": "make_token",
            "location": 523,
            "return": [
                "GreekLetter"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, List[Any]]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "GreekWordSchema.make_token": {
            "name": "make_token",
            "location": 534,
            "return": [
                "Sequence[str]",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "bool",
                    "dict",
                    "Union[django.db.models.fields.Field, django.db.models.fields.reverse_related.ForeignObjectRel]",
                    "str",
                    "List[Tuple[str, int]]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/application/transliteration_query_factory.py": {
        "TransliterationQueryFactory.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sign_repositoy": [
                    "ebl.transliteration.application.sign_repository.SignRepository"
                ]
            }
        },
        "TransliterationQueryFactory.create_empty": {
            "name": "create_empty",
            "location": 16,
            "return": [
                "ebl.transliteration.domain.transliteration_query.TransliterationQuery"
            ],
            "arguments": {}
        },
        "TransliterationQueryFactory.create": {
            "name": "create",
            "location": 19,
            "return": [
                "ebl.transliteration.domain.transliteration_query.TransliterationQuery"
            ],
            "arguments": {
                "self": [],
                "transliteration": [
                    "str"
                ]
            }
        },
        "TransliterationQueryFactory._create_signs": {
            "name": "_create_signs",
            "location": 23,
            "return": [
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ]
            }
        },
        "TransliterationQueryFactory._parse_line": {
            "name": "_parse_line",
            "location": 29,
            "return": [
                "ebl.transliteration.domain.text_line.TextLine"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/application/__init__.py": {},
    "ebl-api-master/ebl/transliteration/domain/alignment.py": {
        "AlignmentError.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "AlignmentToken.apply": {
            "name": "apply",
            "location": 26,
            "return": [
                "bool",
                "dict",
                "Iterable[str]",
                "List[List[str]]",
                "as3.scanner.Token",
                "str"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "AlignmentToken._": {
            "name": "_",
            "location": 37,
            "return": [
                "str",
                "int",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "typesystem.tokenize.tokens.Token",
                    "tokens.Token",
                    "Optional[\"Outcome\"]",
                    "Iterable[str]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/atf.py": {
        "to_sub_index": {
            "name": "to_sub_index",
            "location": 233,
            "return": [
                "str"
            ],
            "arguments": {
                "number": [
                    "Optional[int]"
                ]
            }
        },
        "sub_index_to_int": {
            "name": "sub_index_to_int",
            "location": 243,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "string": [
                    "Optional[str]"
                ]
            }
        },
        "Surface.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "atf": [
                    "str"
                ],
                "label": [
                    "Optional[str]"
                ]
            }
        },
        "Surface.from_label": {
            "name": "from_label",
            "location": 39,
            "return": [
                "Surface"
            ],
            "arguments": {
                "label": [
                    "str"
                ]
            }
        },
        "Surface.from_atf": {
            "name": "from_atf",
            "location": 43,
            "return": [
                "Surface"
            ],
            "arguments": {
                "atf": [
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/atf_visitor.py": {
        "convert_to_atf": {
            "name": "convert_to_atf",
            "location": 149,
            "return": [
                "ebl.transliteration.domain.atf.Atf"
            ],
            "arguments": {
                "prefix": [
                    "Optional[str]"
                ],
                "tokens": [
                    "Sequence[ebl.transliteration.domain.tokens.Token]"
                ]
            }
        },
        "AtfVisitorState.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "Optional[str]"
                ]
            }
        },
        "AtfVisitorState.append_with_forced_separator": {
            "name": "append_with_forced_separator",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "ebl.transliteration.domain.tokens.Token"
                ]
            }
        },
        "AtfVisitorState.append_with_separator": {
            "name": "append_with_separator",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "ebl.transliteration.domain.tokens.Token"
                ]
            }
        },
        "AtfVisitorState.append_left_bracket": {
            "name": "append_left_bracket",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "ebl.transliteration.domain.tokens.Token"
                ]
            }
        },
        "AtfVisitorState.append_right_bracket": {
            "name": "append_right_bracket",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "ebl.transliteration.domain.tokens.Token"
                ]
            }
        },
        "AtfVisitorState.append_token": {
            "name": "append_token",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "ebl.transliteration.domain.tokens.Token"
                ]
            }
        },
        "AtfVisitorState.append_separator": {
            "name": "append_separator",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtfVisitorState.set_omit": {
            "name": "set_omit",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "omit": [
                    "bool"
                ]
            }
        },
        "AtfVisitorState.set_force": {
            "name": "set_force",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtfVisitor.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "Optional[str]"
                ]
            }
        },
        "AtfVisitor.result": {
            "name": "result",
            "location": 79,
            "return": [
                "Atf",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtfVisitor.visit": {
            "name": "visit",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "ebl.transliteration.domain.tokens.Token"
                ]
            }
        },
        "AtfVisitor.visit_language_shift": {
            "name": "visit_language_shift",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "shift": [
                    "ebl.transliteration.domain.tokens.LanguageShift"
                ]
            }
        },
        "AtfVisitor.visit_word": {
            "name": "visit_word",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "ebl.transliteration.domain.word_tokens.Word"
                ]
            }
        },
        "AtfVisitor.visit_document_oriented_gloss": {
            "name": "visit_document_oriented_gloss",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gloss": [
                    "ebl.transliteration.domain.enclosure_tokens.DocumentOrientedGloss"
                ]
            }
        },
        "AtfVisitor.visit_broken_away": {
            "name": "visit_broken_away",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "broken_away": [
                    "ebl.transliteration.domain.enclosure_tokens.BrokenAway"
                ]
            }
        },
        "AtfVisitor.visit_perhaps_broken_away": {
            "name": "visit_perhaps_broken_away",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "broken_away": [
                    "ebl.transliteration.domain.enclosure_tokens.PerhapsBrokenAway"
                ]
            }
        },
        "AtfVisitor.visit_omission": {
            "name": "visit_omission",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "omission": [
                    "ebl.transliteration.domain.enclosure_tokens.AccidentalOmission"
                ]
            }
        },
        "AtfVisitor.visit_accidental_omission": {
            "name": "visit_accidental_omission",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "omission": [
                    "ebl.transliteration.domain.enclosure_tokens.IntentionalOmission"
                ]
            }
        },
        "AtfVisitor.visit_removal": {
            "name": "visit_removal",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "removal": [
                    "ebl.transliteration.domain.enclosure_tokens.Removal"
                ]
            }
        },
        "AtfVisitor.visit_emendation": {
            "name": "visit_emendation",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "emendation": [
                    "ebl.transliteration.domain.enclosure_tokens.Emendation"
                ]
            }
        },
        "AtfVisitor._side": {
            "name": "_side",
            "location": 112,
            "return": [
                "Callable[([ebl.transliteration.domain.tokens.Token], None)]"
            ],
            "arguments": {
                "self": [],
                "side": [
                    "ebl.transliteration.domain.side.Side"
                ]
            }
        },
        "AtfVisitor.visit_erasure": {
            "name": "visit_erasure",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "erasure": [
                    "ebl.transliteration.domain.enclosure_tokens.Erasure"
                ]
            }
        },
        "AtfVisitor.visit_divider": {
            "name": "visit_divider",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "divider": [
                    "ebl.transliteration.domain.sign_tokens.Divider"
                ]
            }
        },
        "AtfVisitor.visit_line_break": {
            "name": "visit_line_break",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line_break": [
                    "ebl.transliteration.domain.tokens.LineBreak"
                ]
            }
        },
        "AtfVisitor.visit_egyptian_metrical_feet_separator": {
            "name": "visit_egyptian_metrical_feet_separator",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "egyptian_metrical_feet_separator": [
                    "ebl.transliteration.domain.egyptian_metrical_feet_separator_token.EgyptianMetricalFeetSeparator"
                ]
            }
        },
        "AtfVisitor.visit_commentary_protocol": {
            "name": "visit_commentary_protocol",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "protocol": [
                    "ebl.transliteration.domain.tokens.CommentaryProtocol"
                ]
            }
        },
        "AtfVisitor.visit_erasure.left": {
            "name": "left",
            "location": 119,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "AtfVisitor.visit_erasure.center": {
            "name": "center",
            "location": 124,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "AtfVisitor.visit_erasure.right": {
            "name": "right",
            "location": 128,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/transliteration/domain/at_line.py": {
        "AtLine.display_value": {
            "name": "display_value",
            "location": 17,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtLine.atf": {
            "name": "atf",
            "location": 21,
            "return": [
                "Atf",
                "int",
                "tuple",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtLine.lemmatization": {
            "name": "lemmatization",
            "location": 25,
            "return": [
                "tuple[LemmatizationToken]",
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SealAtLine.display_value": {
            "name": "display_value",
            "location": 34,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeadingAtLine.display_value": {
            "name": "display_value",
            "location": 46,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ColumnAtLine.display_value": {
            "name": "display_value",
            "location": 56,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiscourseAtLine.display_value": {
            "name": "display_value",
            "location": 65,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "SurfaceAtLine.display_value": {
            "name": "display_value",
            "location": 74,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectAtLine.display_value": {
            "name": "display_value",
            "location": 86,
            "return": [
                "typing.Text",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DivisionAtLine.display_value": {
            "name": "display_value",
            "location": 97,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositeAtLine._check_text": {
            "name": "_check_text",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "value": [
                    "Optional[str]",
                    "bytes",
                    "Optional[Iterable[str]]",
                    "Dict[str, str]"
                ]
            }
        },
        "CompositeAtLine.display_value": {
            "name": "display_value",
            "location": 114,
            "return": [
                "typing.Text",
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/at_line_transformer.py": {
        "AtLineTransformer.ebl_atf_text_line__free_text": {
            "name": "ebl_atf_text_line__free_text",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "List[lark.Token]",
                    "Dict[str, str]",
                    "list",
                    "float",
                    "dict",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "AtLineTransformer.ebl_atf_text_line__INT": {
            "name": "ebl_atf_text_line__INT",
            "location": 35,
            "return": [
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "AtLineTransformer.ebl_atf_text_line__LCASE_LETTER": {
            "name": "ebl_atf_text_line__LCASE_LETTER",
            "location": 39,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "letter": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "AtLineTransformer.ebl_atf_text_line__seal": {
            "name": "ebl_atf_text_line__seal",
            "location": 43,
            "return": [
                "SealAtLine",
                "bool",
                "Tuple[float, float, float]",
                "Tuple[float, float]"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "AtLineTransformer.ebl_atf_text_line__column": {
            "name": "ebl_atf_text_line__column",
            "location": 47,
            "return": [
                "ColumnAtLine",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "statuses": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "AtLineTransformer.ebl_atf_text_line__discourse": {
            "name": "ebl_atf_text_line__discourse",
            "location": 51,
            "return": [
                "DiscourseAtLine",
                "bool",
                "Tuple[float, float, float]",
                "Tuple[float, float]"
            ],
            "arguments": {
                "self": [],
                "discourse": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "AtLineTransformer.ebl_atf_text_line__heading": {
            "name": "ebl_atf_text_line__heading",
            "location": 55,
            "return": [
                "HeadingAtLine",
                "bool",
                "Tuple[float, float, float]",
                "Tuple[float, float]"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "AtLineTransformer.ebl_atf_text_line__OBJECT": {
            "name": "ebl_atf_text_line__OBJECT",
            "location": 59,
            "return": [
                "ObjectData",
                "str",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "object_": [
                    "lark.Token",
                    "Pattern",
                    "Callable[[str], str]"
                ]
            }
        },
        "AtLineTransformer.ebl_atf_text_line__generic_object": {
            "name": "ebl_atf_text_line__generic_object",
            "location": 63,
            "return": [
                "ObjectData",
                "int",
                "AsyncGenerator"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "Dict[str, str]",
                    "str",
                    "int",
                    "float",
                    "Type[T]"
                ]
            }
        },
        "AtLineTransformer.ebl_atf_text_line__fragment": {
            "name": "ebl_atf_text_line__fragment",
            "location": 67,
            "return": [
                "ObjectData",
                "int",
                "AsyncGenerator"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Optional[int]",
                    "Optional[Dict[str, Any]]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "AtLineTransformer.ebl_atf_text_line__SURFACE": {
            "name": "ebl_atf_text_line__SURFACE",
            "location": 71,
            "return": [
                "int",
                "Optional[int]",
                "List['Product']",
                "Type[T]"
            ],
            "arguments": {
                "self": [],
                "surface": [
                    "type",
                    "dict"
                ]
            }
        },
        "AtLineTransformer.ebl_atf_text_line__generic_surface": {
            "name": "ebl_atf_text_line__generic_surface",
            "location": 75,
            "return": [
                "bool",
                "Union[int, float, complex]",
                "Mapping[str, Any]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Dict[str, str]",
                    "List[str]"
                ]
            }
        },
        "AtLineTransformer.ebl_atf_text_line__face": {
            "name": "ebl_atf_text_line__face",
            "location": 79,
            "return": [
                "bool",
                "Union[int, float, complex]",
                "Mapping[str, Any]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "lark.Token",
                    "Optional[int]"
                ]
            }
        },
        "AtLineTransformer.ebl_atf_text_line__edge": {
            "name": "ebl_atf_text_line__edge",
            "location": 83,
            "return": [
                "bool",
                "Union[int, float, complex]",
                "Mapping[str, Any]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "typing.Text",
                    "str",
                    "Dict[str, str]",
                    "List[str]"
                ]
            }
        },
        "AtLineTransformer.ebl_atf_text_line__surface_with_status": {
            "name": "ebl_atf_text_line__surface_with_status",
            "location": 87,
            "return": [
                "SurfaceAtLine",
                "Tuple[float, float, float]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "surface": [
                    "ebl.transliteration.domain.labels.SurfaceLabel",
                    "str",
                    "int",
                    "Callable[[str], int]"
                ],
                "statuses": [
                    "ebl.transliteration.domain.labels.SurfaceLabel",
                    "str",
                    "int",
                    "Callable[[str], int]"
                ]
            }
        },
        "AtLineTransformer.ebl_atf_text_line__object_with_status": {
            "name": "ebl_atf_text_line__object_with_status",
            "location": 91,
            "return": [
                "ObjectAtLine",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "object_": [
                    "List[List[str]]",
                    "int",
                    "str",
                    "float"
                ],
                "statuses": [
                    "List[List[str]]",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "AtLineTransformer.ebl_atf_text_line__divisions": {
            "name": "ebl_atf_text_line__divisions",
            "location": 95,
            "return": [
                "DivisionAtLine"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "digit": [
                    "str"
                ]
            }
        },
        "AtLineTransformer.ebl_atf_text_line__composite_start": {
            "name": "ebl_atf_text_line__composite_start",
            "location": 99,
            "return": [
                "CompositeAtLine",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "number": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "AtLineTransformer.ebl_atf_text_line__composite_end": {
            "name": "ebl_atf_text_line__composite_end",
            "location": 103,
            "return": [
                "CompositeAtLine",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "AtLineTransformer.ebl_atf_text_line__composite_composite": {
            "name": "ebl_atf_text_line__composite_composite",
            "location": 107,
            "return": [
                "CompositeAtLine",
                "bool",
                "Tuple[float, float, float]",
                "Tuple[float, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtLineTransformer.ebl_atf_text_line__composite_milestone": {
            "name": "ebl_atf_text_line__composite_milestone",
            "location": 111,
            "return": [
                "CompositeAtLine",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "number": [
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/converters.py": {
        "convert_token_sequence": {
            "name": "convert_token_sequence",
            "location": 7,
            "return": [
                "Tuple[(ebl.transliteration.domain.tokens.Token, ...)]"
            ],
            "arguments": {
                "tokens": [
                    "Iterable[ebl.transliteration.domain.tokens.Token]"
                ]
            }
        },
        "convert_string_sequence": {
            "name": "convert_string_sequence",
            "location": 11,
            "return": [
                "Tuple[(str, ...)]"
            ],
            "arguments": {
                "strings": [
                    "Iterable[str]"
                ]
            }
        },
        "convert_flag_sequence": {
            "name": "convert_flag_sequence",
            "location": 15,
            "return": [
                "Tuple[(atf.Flag, ...)]"
            ],
            "arguments": {
                "flags": [
                    "Iterable[atf.Flag]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/dollar_line.py": {
        "DollarLine.display_value": {
            "name": "display_value",
            "location": 18,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DollarLine.atf": {
            "name": "atf",
            "location": 22,
            "return": [
                "int",
                "tuple",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DollarLine.lemmatization": {
            "name": "lemmatization",
            "location": 26,
            "return": [
                "tuple[LemmatizationToken]",
                "dict",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DollarLine.is_end_of": {
            "name": "is_end_of",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SealDollarLine.display_value": {
            "name": "display_value",
            "location": 39,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LooseDollarLine.display_value": {
            "name": "display_value",
            "location": 48,
            "return": [
                "typing.Text",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageDollarLine.display_value": {
            "name": "display_value",
            "location": 59,
            "return": [
                "typing.Text",
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RulingDollarLine.display_value": {
            "name": "display_value",
            "location": 70,
            "return": [
                "typing.Text",
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScopeContainer._check_text": {
            "name": "_check_text",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "Sequence[int]",
                    "Dict[str, str]"
                ]
            }
        },
        "ScopeContainer.value": {
            "name": "value",
            "location": 95,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScopeContainer.to_value": {
            "name": "to_value",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "enum": [
                    "int"
                ]
            }
        },
        "StateDollarLine.display_value": {
            "name": "display_value",
            "location": 120,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateDollarLine.is_end_of": {
            "name": "is_end_of",
            "location": 134,
            "return": [
                "bool",
                "Iterable[int]",
                "Optional[str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateDollarLine.to_atf": {
            "name": "to_atf",
            "location": 138,
            "return": [
                "str"
            ],
            "arguments": {
                "column": [
                    "List[\"DeliveryItem\"]",
                    "Optional[Sequence[str]]",
                    "int",
                    "Hashable",
                    "bool"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/dollar_line_transformer.py": {
        "DollarLineTransfomer.ebl_atf_dollar_line__free_text": {
            "name": "ebl_atf_dollar_line__free_text",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "List[lark.Token]",
                    "bool",
                    "List[Tuple[str, str]]",
                    "float",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "Optional[Tuple[str, str]]"
                ]
            }
        },
        "DollarLineTransfomer.ebl_atf_dollar_line__loose": {
            "name": "ebl_atf_dollar_line__loose",
            "location": 19,
            "return": [
                "LooseDollarLine",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "Union[str, bytes]"
                ]
            }
        },
        "DollarLineTransfomer.ebl_atf_dollar_line__ruling": {
            "name": "ebl_atf_dollar_line__ruling",
            "location": 23,
            "return": [
                "RulingDollarLine",
                "str",
                "Literal",
                "int",
                "bool",
                "Type[Exception]"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "str"
                ],
                "status": [
                    "str",
                    "None"
                ]
            }
        },
        "DollarLineTransfomer.ebl_atf_dollar_line__image": {
            "name": "ebl_atf_dollar_line__image",
            "location": 27,
            "return": [
                "ImageDollarLine",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "str",
                    "int"
                ],
                "letter": [
                    "str",
                    "int"
                ],
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "DollarLineTransfomer.ebl_atf_dollar_line__seal": {
            "name": "ebl_atf_dollar_line__seal",
            "location": 31,
            "return": [
                "SealDollarLine",
                "int",
                "List[str]",
                "List[Tuple[str, str]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "int",
                    "float",
                    "str",
                    "tuple"
                ]
            }
        },
        "DollarLineTransfomer.ebl_atf_dollar_line__DOLLAR_STATUS": {
            "name": "ebl_atf_dollar_line__DOLLAR_STATUS",
            "location": 35,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str",
                    "int",
                    "Union[str, float]",
                    "Union[str, bool]"
                ]
            }
        },
        "DollarLineTransfomer.ebl_atf_dollar_line__STATE": {
            "name": "ebl_atf_dollar_line__STATE",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "DollarLineTransfomer.ebl_atf_dollar_line__OBJECT": {
            "name": "ebl_atf_dollar_line__OBJECT",
            "location": 43,
            "return": [
                "ScopeContainer",
                "Callable",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "object": [
                    "bool"
                ]
            }
        },
        "DollarLineTransfomer.ebl_atf_dollar_line__generic_object": {
            "name": "ebl_atf_dollar_line__generic_object",
            "location": 47,
            "return": [
                "ScopeContainer",
                "Callable[..., None]",
                "str",
                "Callable[[KT], VT]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "DollarLineTransfomer.ebl_atf_dollar_line__fragment": {
            "name": "ebl_atf_dollar_line__fragment",
            "location": 51,
            "return": [
                "ScopeContainer",
                "Callable[..., None]",
                "str",
                "Callable[[KT], VT]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "set",
                    "int"
                ]
            }
        },
        "DollarLineTransfomer.ebl_atf_dollar_line__SURFACE": {
            "name": "ebl_atf_dollar_line__SURFACE",
            "location": 55,
            "return": [
                "ScopeContainer",
                "bool",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "surface": [
                    "dict",
                    "str"
                ]
            }
        },
        "DollarLineTransfomer.ebl_atf_dollar_line__generic_surface": {
            "name": "ebl_atf_dollar_line__generic_surface",
            "location": 59,
            "return": [
                "ScopeContainer",
                "Callable[..., None]",
                "str",
                "Callable[[KT], VT]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "DollarLineTransfomer.ebl_atf_dollar_line__face": {
            "name": "ebl_atf_dollar_line__face",
            "location": 63,
            "return": [
                "ScopeContainer",
                "Callable[..., None]",
                "str",
                "Callable[[KT], VT]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "DollarLineTransfomer.ebl_atf_dollar_line__edge": {
            "name": "ebl_atf_dollar_line__edge",
            "location": 67,
            "return": [
                "ScopeContainer",
                "Callable[..., None]",
                "str",
                "Callable[[KT], VT]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "typing.Text"
                ]
            }
        },
        "DollarLineTransfomer.ebl_atf_dollar_line__SCOPE": {
            "name": "ebl_atf_dollar_line__SCOPE",
            "location": 71,
            "return": [
                "ScopeContainer",
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "int"
                ]
            }
        },
        "DollarLineTransfomer.ebl_atf_dollar_line__EXTENT": {
            "name": "ebl_atf_dollar_line__EXTENT",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "extent": [
                    "List[int]",
                    "str",
                    "Union[str, Tuple[Any]]",
                    "Optional[Any]",
                    "int"
                ]
            }
        },
        "DollarLineTransfomer.ebl_atf_dollar_line__INT": {
            "name": "ebl_atf_dollar_line__INT",
            "location": 79,
            "return": [
                "int",
                "float",
                "str",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "int",
                    "float",
                    "str",
                    "tuple"
                ]
            }
        },
        "DollarLineTransfomer.ebl_atf_dollar_line__range": {
            "name": "ebl_atf_dollar_line__range",
            "location": 83,
            "return": [
                "tuple",
                "int",
                "List[int]",
                "Optional[bytearray]"
            ],
            "arguments": {
                "self": [],
                "number1": [
                    "int",
                    "List[int]",
                    "Optional[bytearray]"
                ],
                "number2": [
                    "int",
                    "List[int]",
                    "Optional[bytearray]"
                ]
            }
        },
        "DollarLineTransfomer.ebl_atf_dollar_line__QUALIFICATION": {
            "name": "ebl_atf_dollar_line__QUALIFICATION",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "qualification": [
                    "List[int]",
                    "str",
                    "Union[str, Tuple[Any]]",
                    "Optional[Any]",
                    "int"
                ]
            }
        },
        "DollarLineTransfomer.ebl_atf_dollar_line__state": {
            "name": "ebl_atf_dollar_line__state",
            "location": 91,
            "return": [
                "StateDollarLine",
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "qualification": [
                    "bool",
                    "str",
                    "bytes",
                    "Tuple[str, dict]"
                ],
                "extent": [
                    "None",
                    "bool",
                    "str",
                    "bytes",
                    "Tuple[str, dict]"
                ],
                "scope_container": [
                    "None",
                    "bool",
                    "str",
                    "bytes",
                    "Tuple[str, dict]"
                ],
                "state": [
                    "None",
                    "bool",
                    "str",
                    "bytes",
                    "Tuple[str, dict]"
                ],
                "status": [
                    "None",
                    "bool",
                    "str",
                    "bytes",
                    "Tuple[str, dict]"
                ]
            }
        },
        "DollarLineTransfomer.ebl_atf_dollar_line__state_extent": {
            "name": "ebl_atf_dollar_line__state_extent",
            "location": 97,
            "return": [
                "str",
                "StateDollarLine"
            ],
            "arguments": {
                "self": [],
                "extent": [
                    "Optional[bytes]",
                    "Optional[\"Frame\"]",
                    "List[bytes]",
                    "Optional[List[str]]",
                    "Optional[float]",
                    "bool"
                ],
                "scope_container": [
                    "None",
                    "Optional[bytes]",
                    "Optional[\"Frame\"]",
                    "List[bytes]",
                    "Optional[List[str]]",
                    "Optional[float]",
                    "bool"
                ],
                "state": [
                    "None",
                    "Optional[bytes]",
                    "Optional[\"Frame\"]",
                    "List[bytes]",
                    "Optional[List[str]]",
                    "Optional[float]",
                    "bool"
                ],
                "status": [
                    "None",
                    "Optional[bytes]",
                    "Optional[\"Frame\"]",
                    "List[bytes]",
                    "Optional[List[str]]",
                    "Optional[float]",
                    "bool"
                ]
            }
        },
        "DollarLineTransfomer.ebl_atf_dollar_line__state_scope": {
            "name": "ebl_atf_dollar_line__state_scope",
            "location": 103,
            "return": [
                "StateDollarLine",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "scope_container": [
                    "bytes",
                    "T",
                    "Optional[\"Frame\"]",
                    "List[str]"
                ],
                "state": [
                    "None",
                    "bytes",
                    "T",
                    "Optional[\"Frame\"]",
                    "List[str]"
                ],
                "status": [
                    "None",
                    "bytes",
                    "T",
                    "Optional[\"Frame\"]",
                    "List[str]"
                ]
            }
        },
        "DollarLineTransfomer.ebl_atf_dollar_line__state_state": {
            "name": "ebl_atf_dollar_line__state_state",
            "location": 109,
            "return": [
                "StateDollarLine",
                "str",
                "Type",
                "Optional[str]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Optional[int]",
                    "Optional[str]",
                    "str",
                    "Optional[float]"
                ],
                "status": [
                    "Optional[int]",
                    "Optional[str]",
                    "str",
                    "Optional[float]"
                ]
            }
        },
        "DollarLineTransfomer.ebl_atf_dollar_line__state_status": {
            "name": "ebl_atf_dollar_line__state_status",
            "location": 113,
            "return": [
                "StateDollarLine",
                "Set[str]",
                "Type",
                "Dict[str, Any]",
                "int",
                "bool",
                "Optional[Union[str, bool]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "Optional[str]",
                    "Optional[int]",
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/egyptian_metrical_feet_separator_token.py": {
        "EgyptianMetricalFeetSeparator.clean_value": {
            "name": "clean_value",
            "location": 17,
            "return": [
                "int",
                "str",
                "Tuple[int, int]",
                "Tuple[str, int]",
                "T",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "EgyptianMetricalFeetSeparator.of": {
            "name": "of",
            "location": 21,
            "return": [
                "EgyptianMetricalFeetSeparator"
            ],
            "arguments": {
                "flags": [
                    "Sequence[atf.Flag]"
                ]
            }
        },
        "EgyptianMetricalFeetSeparator.parts": {
            "name": "parts",
            "location": 25,
            "return": [
                "tuple",
                "str",
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EgyptianMetricalFeetSeparator._sign": {
            "name": "_sign",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EgyptianMetricalFeetSeparator.string_flags": {
            "name": "string_flags",
            "location": 33,
            "return": [
                "list",
                "List[str]",
                "Set[str]",
                "str",
                "Dict[str, str]",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "EgyptianMetricalFeetSeparator.value": {
            "name": "value",
            "location": 37,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "EgyptianMetricalFeetSeparator.accept": {
            "name": "accept",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "ebl.transliteration.domain.tokens.TokenVisitor"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/enclosure_error.py": {},
    "ebl-api-master/ebl/transliteration/domain/enclosure_tokens.py": {
        "Enclosure.get_sides": {
            "name": "get_sides",
            "location": 20,
            "return": [
                "Mapping[(ebl.transliteration.domain.side.Side, str)]"
            ],
            "arguments": {}
        },
        "Enclosure.value": {
            "name": "value",
            "location": 24,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Enclosure.clean_value": {
            "name": "clean_value",
            "location": 28,
            "return": [
                "typing.Text",
                "int",
                "str",
                "Tuple[int, int]",
                "Tuple[str, int]",
                "T",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Enclosure.parts": {
            "name": "parts",
            "location": 32,
            "return": [
                "tuple",
                "str",
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Enclosure.is_open": {
            "name": "is_open",
            "location": 36,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Enclosure.is_close": {
            "name": "is_close",
            "location": 40,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Enclosure.open": {
            "name": "open",
            "location": 44,
            "return": [
                "E"
            ],
            "arguments": {
                "cls": [
                    "Type[E]"
                ]
            }
        },
        "Enclosure.close": {
            "name": "close",
            "location": 48,
            "return": [
                "E"
            ],
            "arguments": {
                "cls": [
                    "Type[E]"
                ]
            }
        },
        "Enclosure.of": {
            "name": "of",
            "location": 52,
            "return": [
                "E"
            ],
            "arguments": {
                "cls": [
                    "Type[E]"
                ],
                "side": [
                    "ebl.transliteration.domain.side.Side"
                ]
            }
        },
        "Enclosure.of_value": {
            "name": "of_value",
            "location": 56,
            "return": [
                "E"
            ],
            "arguments": {
                "cls": [
                    "Type[E]"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "DocumentOrientedGloss.get_sides": {
            "name": "get_sides",
            "location": 65,
            "return": [
                "Mapping[(ebl.transliteration.domain.side.Side, str)]"
            ],
            "arguments": {}
        },
        "DocumentOrientedGloss.accept": {
            "name": "accept",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "ebl.transliteration.domain.tokens.TokenVisitor"
                ]
            }
        },
        "BrokenAway.get_sides": {
            "name": "get_sides",
            "location": 75,
            "return": [
                "Mapping[(ebl.transliteration.domain.side.Side, str)]"
            ],
            "arguments": {}
        },
        "BrokenAway.accept": {
            "name": "accept",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "ebl.transliteration.domain.tokens.TokenVisitor"
                ]
            }
        },
        "PerhapsBrokenAway.get_sides": {
            "name": "get_sides",
            "location": 85,
            "return": [
                "Mapping[(ebl.transliteration.domain.side.Side, str)]"
            ],
            "arguments": {}
        },
        "PerhapsBrokenAway.accept": {
            "name": "accept",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "ebl.transliteration.domain.tokens.TokenVisitor"
                ]
            }
        },
        "AccidentalOmission.get_sides": {
            "name": "get_sides",
            "location": 95,
            "return": [
                "Mapping[(ebl.transliteration.domain.side.Side, str)]"
            ],
            "arguments": {}
        },
        "AccidentalOmission.accept": {
            "name": "accept",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "ebl.transliteration.domain.tokens.TokenVisitor"
                ]
            }
        },
        "IntentionalOmission.get_sides": {
            "name": "get_sides",
            "location": 105,
            "return": [
                "Mapping[(ebl.transliteration.domain.side.Side, str)]"
            ],
            "arguments": {}
        },
        "IntentionalOmission.accept": {
            "name": "accept",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "ebl.transliteration.domain.tokens.TokenVisitor"
                ]
            }
        },
        "Removal.get_sides": {
            "name": "get_sides",
            "location": 115,
            "return": [
                "Mapping[(ebl.transliteration.domain.side.Side, str)]"
            ],
            "arguments": {}
        },
        "Removal.accept": {
            "name": "accept",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "ebl.transliteration.domain.tokens.TokenVisitor"
                ]
            }
        },
        "Emendation.get_sides": {
            "name": "get_sides",
            "location": 125,
            "return": [
                "Mapping[(ebl.transliteration.domain.side.Side, str)]"
            ],
            "arguments": {}
        },
        "Emendation.accept": {
            "name": "accept",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "ebl.transliteration.domain.tokens.TokenVisitor"
                ]
            }
        },
        "Erasure.get_sides": {
            "name": "get_sides",
            "location": 135,
            "return": [
                "Mapping[(ebl.transliteration.domain.side.Side, str)]"
            ],
            "arguments": {}
        },
        "Erasure.center": {
            "name": "center",
            "location": 139,
            "return": [
                "Erasure"
            ],
            "arguments": {
                "cls": [
                    "Type[_TErasure]"
                ]
            }
        },
        "Erasure.accept": {
            "name": "accept",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "ebl.transliteration.domain.tokens.TokenVisitor"
                ]
            }
        },
        "Gloss.of": {
            "name": "of",
            "location": 154,
            "return": [
                "G"
            ],
            "arguments": {
                "cls": [
                    "Type[G]"
                ],
                "parts": [
                    "Sequence[ebl.transliteration.domain.tokens.Token]"
                ]
            }
        },
        "Gloss.open": {
            "name": "open",
            "location": 159,
            "return": [
                "E"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gloss.close": {
            "name": "close",
            "location": 164,
            "return": [
                "E"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gloss.parts": {
            "name": "parts",
            "location": 168,
            "return": [
                "list",
                "str",
                "List[List[str]]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gloss.value": {
            "name": "value",
            "location": 172,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]",
                "ebl.transliteration.domain.sign.Sign",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gloss.clean_value": {
            "name": "clean_value",
            "location": 177,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gloss.accept": {
            "name": "accept",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "ebl.transliteration.domain.tokens.TokenVisitor"
                ]
            }
        },
        "Determinative.open": {
            "name": "open",
            "location": 188,
            "return": [
                "E"
            ],
            "arguments": {
                "self": []
            }
        },
        "Determinative.close": {
            "name": "close",
            "location": 192,
            "return": [
                "E"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhoneticGloss.open": {
            "name": "open",
            "location": 199,
            "return": [
                "E"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhoneticGloss.close": {
            "name": "close",
            "location": 203,
            "return": [
                "E"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinguisticGloss.open": {
            "name": "open",
            "location": 210,
            "return": [
                "E"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinguisticGloss.close": {
            "name": "close",
            "location": 214,
            "return": [
                "E"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/enclosure_transformer.py": {
        "EnclosureTransformer.ebl_atf_text_line__open_accidental_omission": {
            "name": "ebl_atf_text_line__open_accidental_omission",
            "location": 21,
            "return": [
                "ebl.transliteration.domain.enclosure_tokens.AccidentalOmission"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "Exception",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "EnclosureTransformer.ebl_atf_text_line__close_accidental_omission": {
            "name": "ebl_atf_text_line__close_accidental_omission",
            "location": 24,
            "return": [
                "ebl.transliteration.domain.enclosure_tokens.AccidentalOmission"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "int",
                    "bool",
                    "Iterable"
                ]
            }
        },
        "EnclosureTransformer.ebl_atf_text_line__open_intentional_omission": {
            "name": "ebl_atf_text_line__open_intentional_omission",
            "location": 27,
            "return": [
                "ebl.transliteration.domain.enclosure_tokens.IntentionalOmission"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "Exception",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "EnclosureTransformer.ebl_atf_text_line__close_intentional_omission": {
            "name": "ebl_atf_text_line__close_intentional_omission",
            "location": 30,
            "return": [
                "ebl.transliteration.domain.enclosure_tokens.IntentionalOmission"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "int",
                    "bool",
                    "Iterable"
                ]
            }
        },
        "EnclosureTransformer.ebl_atf_text_line__open_removal": {
            "name": "ebl_atf_text_line__open_removal",
            "location": 33,
            "return": [
                "ebl.transliteration.domain.enclosure_tokens.Removal"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "Exception",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "EnclosureTransformer.ebl_atf_text_line__close_removal": {
            "name": "ebl_atf_text_line__close_removal",
            "location": 36,
            "return": [
                "ebl.transliteration.domain.enclosure_tokens.Removal"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "int",
                    "bool",
                    "Iterable"
                ]
            }
        },
        "EnclosureTransformer.ebl_atf_text_line__close_broken_away": {
            "name": "ebl_atf_text_line__close_broken_away",
            "location": 39,
            "return": [
                "ebl.transliteration.domain.enclosure_tokens.BrokenAway"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "int",
                    "bool",
                    "Iterable"
                ]
            }
        },
        "EnclosureTransformer.ebl_atf_text_line__open_broken_away": {
            "name": "ebl_atf_text_line__open_broken_away",
            "location": 42,
            "return": [
                "ebl.transliteration.domain.enclosure_tokens.BrokenAway"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "Exception",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "EnclosureTransformer.ebl_atf_text_line__close_perhaps_broken_away": {
            "name": "ebl_atf_text_line__close_perhaps_broken_away",
            "location": 45,
            "return": [
                "ebl.transliteration.domain.enclosure_tokens.PerhapsBrokenAway"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "int",
                    "bool",
                    "Iterable"
                ]
            }
        },
        "EnclosureTransformer.ebl_atf_text_line__open_perhaps_broken_away": {
            "name": "ebl_atf_text_line__open_perhaps_broken_away",
            "location": 48,
            "return": [
                "ebl.transliteration.domain.enclosure_tokens.PerhapsBrokenAway"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "Exception",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "EnclosureTransformer.ebl_atf_text_line__open_document_oriented_gloss": {
            "name": "ebl_atf_text_line__open_document_oriented_gloss",
            "location": 52,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "Exception",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "EnclosureTransformer.ebl_atf_text_line__close_document_oriented_gloss": {
            "name": "ebl_atf_text_line__close_document_oriented_gloss",
            "location": 56,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "int",
                    "bool",
                    "Iterable"
                ]
            }
        },
        "EnclosureTransformer.ebl_atf_text_line__erasure": {
            "name": "ebl_atf_text_line__erasure",
            "location": 60,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "erased": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "over_erased": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "EnclosureTransformer._transform_erasure": {
            "name": "_transform_erasure",
            "location": 63,
            "return": [
                "List[ebl.transliteration.domain.tokens.Token]"
            ],
            "arguments": {
                "self": [],
                "erased": [
                    "Callable",
                    "bool"
                ],
                "over_erased": [
                    "Callable",
                    "bool"
                ]
            }
        },
        "GlossTransformer.ebl_atf_text_line__determinative": {
            "name": "ebl_atf_text_line__determinative",
            "location": 75,
            "return": [
                "Optional[Dict[str, str]]",
                "bool",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "str"
                ]
            }
        },
        "GlossTransformer.ebl_atf_text_line__phonetic_gloss": {
            "name": "ebl_atf_text_line__phonetic_gloss",
            "location": 80,
            "return": [
                "Callable[[Union, Union], Tuple[Any, ...],]"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "str"
                ]
            }
        },
        "GlossTransformer.ebl_atf_text_line__linguistic_gloss": {
            "name": "ebl_atf_text_line__linguistic_gloss",
            "location": 85,
            "return": [
                "Callable[[Union, Union], Tuple[Any, ...],]"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/enclosure_type.py": {
        "EnclosureType.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "str"
                ],
                "forbidden": [
                    "FrozenSet[str]"
                ],
                "required": [
                    "FrozenSet[str]"
                ]
            }
        },
        "EnclosureType.required": {
            "name": "required",
            "location": 41,
            "return": [
                "set",
                "str",
                "FrozenSet[str]",
                "Iterable",
                "AbstractSet[Type[object]]",
                "dict",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnclosureType.forbidden": {
            "name": "forbidden",
            "location": 45,
            "return": [
                "set",
                "str",
                "FrozenSet[str]",
                "Iterable",
                "AbstractSet[Type[object]]",
                "dict",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnclosureType.does_not_forbid": {
            "name": "does_not_forbid",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "enclosures": [
                    "AbstractSet[EnclosureType]"
                ]
            }
        },
        "EnclosureType.are_requirements_satisfied_by": {
            "name": "are_requirements_satisfied_by",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "enclosures": [
                    "AbstractSet[EnclosureType]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/enclosure_visitor.py": {
        "set_enclosure_type": {
            "name": "set_enclosure_type",
            "location": 259,
            "return": [
                "Sequence[ebl.transliteration.domain.tokens.Token]"
            ],
            "arguments": {
                "tokens": [
                    "Union[(Iterable[ebl.transliteration.domain.tokens.Token], Sequence[ebl.transliteration.domain.tokens.Token])]"
                ]
            }
        },
        "EnclosureVisitorState.has_enclosures": {
            "name": "has_enclosures",
            "location": 30,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnclosureVisitorState.is_open": {
            "name": "is_open",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "enclosure": [
                    "ebl.transliteration.domain.enclosure_type.EnclosureType"
                ]
            }
        },
        "EnclosureVisitorState.open": {
            "name": "open",
            "location": 36,
            "return": [
                "EnclosureVisitorState"
            ],
            "arguments": {
                "self": [
                    "_TEnclosureVisitorState"
                ],
                "enclosure": [
                    "ebl.transliteration.domain.enclosure_type.EnclosureType"
                ]
            }
        },
        "EnclosureVisitorState.close": {
            "name": "close",
            "location": 42,
            "return": [
                "EnclosureVisitorState"
            ],
            "arguments": {
                "self": [
                    "_TEnclosureVisitorState"
                ],
                "enclosure": [
                    "ebl.transliteration.domain.enclosure_type.EnclosureType"
                ]
            }
        },
        "EnclosureVisitorState._is_allowed_to_open": {
            "name": "_is_allowed_to_open",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "enclosure": [
                    "ebl.transliteration.domain.enclosure_type.EnclosureType"
                ]
            }
        },
        "EnclosureVisitorState._is_allowed_to_close": {
            "name": "_is_allowed_to_close",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "enclosure": [
                    "ebl.transliteration.domain.enclosure_type.EnclosureType"
                ]
            }
        },
        "EnclosureVisitorState._is_required": {
            "name": "_is_required",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "enclosure": [
                    "ebl.transliteration.domain.enclosure_type.EnclosureType"
                ]
            }
        },
        "EnclosureValidator.enclosures": {
            "name": "enclosures",
            "location": 70,
            "return": [
                "Callable",
                "List[str]",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnclosureValidator.done": {
            "name": "done",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnclosureValidator.visit_variant": {
            "name": "visit_variant",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "variant": [
                    "ebl.transliteration.domain.tokens.Variant"
                ]
            }
        },
        "EnclosureValidator.visit_word": {
            "name": "visit_word",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "ebl.transliteration.domain.word_tokens.Word"
                ]
            }
        },
        "EnclosureValidator.visit_gloss": {
            "name": "visit_gloss",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gloss": [
                    "ebl.transliteration.domain.enclosure_tokens.Gloss"
                ]
            }
        },
        "EnclosureValidator.visit_named_sign": {
            "name": "visit_named_sign",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "named_sign": [
                    "ebl.transliteration.domain.sign_tokens.NamedSign"
                ]
            }
        },
        "EnclosureValidator.visit_akkadian_word": {
            "name": "visit_akkadian_word",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "ebl.transliteration.domain.normalized_akkadian.AkkadianWord"
                ]
            }
        },
        "EnclosureValidator.visit_greek_word": {
            "name": "visit_greek_word",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "ebl.transliteration.domain.greek_tokens.GreekWord"
                ]
            }
        },
        "EnclosureValidator.visit_accidental_omission": {
            "name": "visit_accidental_omission",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "omission": [
                    "ebl.transliteration.domain.enclosure_tokens.AccidentalOmission"
                ]
            }
        },
        "EnclosureValidator.visit_intentional_omission": {
            "name": "visit_intentional_omission",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "omission": [
                    "ebl.transliteration.domain.enclosure_tokens.IntentionalOmission"
                ]
            }
        },
        "EnclosureValidator.visit_removal": {
            "name": "visit_removal",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "removal": [
                    "ebl.transliteration.domain.enclosure_tokens.Removal"
                ]
            }
        },
        "EnclosureValidator.visit_broken_away": {
            "name": "visit_broken_away",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "broken_away": [
                    "ebl.transliteration.domain.enclosure_tokens.BrokenAway"
                ]
            }
        },
        "EnclosureValidator.visit_perhaps_broken_away": {
            "name": "visit_perhaps_broken_away",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "broken_away": [
                    "ebl.transliteration.domain.enclosure_tokens.PerhapsBrokenAway"
                ]
            }
        },
        "EnclosureValidator.visit_emendation": {
            "name": "visit_emendation",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "emendation": [
                    "ebl.transliteration.domain.enclosure_tokens.Emendation"
                ]
            }
        },
        "EnclosureValidator.visit_document_oriented_gloss": {
            "name": "visit_document_oriented_gloss",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gloss": [
                    "ebl.transliteration.domain.enclosure_tokens.DocumentOrientedGloss"
                ]
            }
        },
        "EnclosureValidator._update_state": {
            "name": "_update_state",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "ebl.transliteration.domain.enclosure_tokens.Enclosure"
                ],
                "enclosure": [
                    "ebl.transliteration.domain.enclosure_type.EnclosureType"
                ]
            }
        },
        "EnclosureUpdater.tokens": {
            "name": "tokens",
            "location": 150,
            "return": [
                "tuple",
                "int",
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnclosureUpdater._set_enclosure_type": {
            "name": "_set_enclosure_type",
            "location": 153,
            "return": [
                "ebl.transliteration.domain.tokens.Token"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "ebl.transliteration.domain.tokens.Token"
                ]
            }
        },
        "EnclosureUpdater._append_token": {
            "name": "_append_token",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "ebl.transliteration.domain.tokens.Token"
                ]
            }
        },
        "EnclosureUpdater.visit": {
            "name": "visit",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "ebl.transliteration.domain.tokens.Token"
                ]
            }
        },
        "EnclosureUpdater.visit_variant": {
            "name": "visit_variant",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "variant": [
                    "ebl.transliteration.domain.tokens.Variant"
                ]
            }
        },
        "EnclosureUpdater.visit_word": {
            "name": "visit_word",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "ebl.transliteration.domain.word_tokens.Word"
                ]
            }
        },
        "EnclosureUpdater.visit_named_sign": {
            "name": "visit_named_sign",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "named_sign": [
                    "ebl.transliteration.domain.sign_tokens.NamedSign"
                ]
            }
        },
        "EnclosureUpdater.visit_akkadian_word": {
            "name": "visit_akkadian_word",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "ebl.transliteration.domain.normalized_akkadian.AkkadianWord"
                ]
            }
        },
        "EnclosureUpdater.visit_greek_word": {
            "name": "visit_greek_word",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "ebl.transliteration.domain.greek_tokens.GreekWord"
                ]
            }
        },
        "EnclosureUpdater.visit_gloss": {
            "name": "visit_gloss",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gloss": [
                    "ebl.transliteration.domain.enclosure_tokens.Gloss"
                ]
            }
        },
        "EnclosureUpdater.visit_accidental_omission": {
            "name": "visit_accidental_omission",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "omission": [
                    "ebl.transliteration.domain.enclosure_tokens.AccidentalOmission"
                ]
            }
        },
        "EnclosureUpdater.visit_intentional_omission": {
            "name": "visit_intentional_omission",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "omission": [
                    "ebl.transliteration.domain.enclosure_tokens.IntentionalOmission"
                ]
            }
        },
        "EnclosureUpdater.visit_removal": {
            "name": "visit_removal",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "removal": [
                    "ebl.transliteration.domain.enclosure_tokens.Removal"
                ]
            }
        },
        "EnclosureUpdater.visit_broken_away": {
            "name": "visit_broken_away",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "broken_away": [
                    "ebl.transliteration.domain.enclosure_tokens.BrokenAway"
                ]
            }
        },
        "EnclosureUpdater.visit_perhaps_broken_away": {
            "name": "visit_perhaps_broken_away",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "broken_away": [
                    "ebl.transliteration.domain.enclosure_tokens.PerhapsBrokenAway"
                ]
            }
        },
        "EnclosureUpdater.visit_document_oriented_gloss": {
            "name": "visit_document_oriented_gloss",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gloss": [
                    "ebl.transliteration.domain.enclosure_tokens.DocumentOrientedGloss"
                ]
            }
        },
        "EnclosureUpdater.visit_emendation": {
            "name": "visit_emendation",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "emendation": [
                    "ebl.transliteration.domain.enclosure_tokens.Emendation"
                ]
            }
        },
        "EnclosureUpdater._visit_parts": {
            "name": "_visit_parts",
            "location": 242,
            "return": [
                "Sequence[ebl.transliteration.domain.tokens.Token]"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "Sequence[ebl.transliteration.domain.tokens.Token]"
                ]
            }
        },
        "EnclosureUpdater._update_enclosures": {
            "name": "_update_enclosures",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "ebl.transliteration.domain.enclosure_tokens.Enclosure"
                ],
                "enclosure": [
                    "ebl.transliteration.domain.enclosure_type.EnclosureType"
                ]
            }
        },
        "EnclosureValidator.visit_variant.sub_visit": {
            "name": "sub_visit",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "sub_token": [
                    "ebl.transliteration.domain.tokens.Token",
                    "str"
                ]
            }
        },
        "EnclosureUpdater.visit_variant.sub_visit": {
            "name": "sub_visit",
            "location": 163,
            "return": [
                "str",
                "EnclosureUpdater"
            ],
            "arguments": {
                "sub_token": [
                    "ebl.transliteration.domain.tokens.Token",
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/erasure_visitor.py": {
        "set_erasure_state": {
            "name": "set_erasure_state",
            "location": 22,
            "return": [
                "Sequence[ebl.transliteration.domain.tokens.Token]"
            ],
            "arguments": {
                "tree": [
                    "str",
                    "Callable"
                ],
                "state": [
                    "ebl.transliteration.domain.tokens.ErasureState"
                ]
            }
        },
        "ErasureVisitor.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "ebl.transliteration.domain.tokens.ErasureState"
                ]
            }
        },
        "ErasureVisitor.tokens": {
            "name": "tokens",
            "location": 15,
            "return": [
                "tuple",
                "int",
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErasureVisitor.visit": {
            "name": "visit",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "list"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/genre.py": {},
    "ebl-api-master/ebl/transliteration/domain/greek_tokens.py": {
        "GreekLetter.value": {
            "name": "value",
            "location": 21,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "GreekLetter.clean_value": {
            "name": "clean_value",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GreekLetter.parts": {
            "name": "parts",
            "location": 30,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "GreekLetter.of": {
            "name": "of",
            "location": 34,
            "return": [
                "GreekLetter"
            ],
            "arguments": {
                "letter": [
                    "str"
                ],
                "flags": [
                    "Sequence[atf.Flag]"
                ]
            }
        },
        "GreekWord.language": {
            "name": "language",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GreekWord.normalized": {
            "name": "normalized",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GreekWord.alignable": {
            "name": "alignable",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GreekWord.value": {
            "name": "value",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GreekWord.set_language": {
            "name": "set_language",
            "location": 58,
            "return": [
                "GreekWord"
            ],
            "arguments": {
                "self": [
                    "_TGreekWord"
                ],
                "language": [
                    "ebl.transliteration.domain.language.Language"
                ]
            }
        },
        "GreekWord.accept": {
            "name": "accept",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "ebl.transliteration.domain.tokens.TokenVisitor"
                ]
            }
        },
        "GreekWord.of": {
            "name": "of",
            "location": 65,
            "return": [
                "GreekWord"
            ],
            "arguments": {
                "parts": [
                    "Sequence[ebl.transliteration.domain.tokens.Token]"
                ],
                "language": [
                    "ebl.transliteration.domain.language.Language"
                ],
                "unique_lemma": [
                    "Sequence[ebl.dictionary.domain.word.WordId]"
                ],
                "alignment": [
                    "Optional[int]"
                ],
                "variant": [
                    "Optional[ebl.transliteration.domain.word_tokens.AbstractWord]"
                ],
                "erasure": [
                    "ebl.transliteration.domain.tokens.ErasureState"
                ],
                "has_variant_alignmnet": [
                    "bool"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/labels.py": {
        "no_duplicate_status": {
            "name": "no_duplicate_status",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "_instance": [
                    "int",
                    "str",
                    "Optional[Any]",
                    "bool",
                    "Optional[type]"
                ],
                "_attribute": [
                    "int",
                    "str",
                    "Optional[Any]",
                    "bool",
                    "Optional[type]"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "convert_status_sequence": {
            "name": "convert_status_sequence",
            "location": 37,
            "return": [
                "Tuple[(ebl.transliteration.domain.atf.Status, ...)]"
            ],
            "arguments": {
                "status": [
                    "Union[(Iterable[ebl.transliteration.domain.atf.Status], Sequence[ebl.transliteration.domain.atf.Status])]"
                ]
            }
        },
        "parse_labels": {
            "name": "parse_labels",
            "location": 210,
            "return": [
                "Sequence[Label]"
            ],
            "arguments": {
                "label": [
                    "str"
                ]
            }
        },
        "LabelVisitor.visit_surface_label": {
            "name": "visit_surface_label",
            "location": 20,
            "return": [
                "LabelVisitor"
            ],
            "arguments": {
                "self": [
                    "_TLabelVisitor"
                ],
                "label": [
                    "SurfaceLabel"
                ]
            }
        },
        "LabelVisitor.visit_column_label": {
            "name": "visit_column_label",
            "location": 24,
            "return": [
                "LabelVisitor"
            ],
            "arguments": {
                "self": [
                    "_TLabelVisitor"
                ],
                "label": [
                    "ColumnLabel"
                ]
            }
        },
        "LabelVisitor.visit_object_label": {
            "name": "visit_object_label",
            "location": 28,
            "return": [
                "LabelVisitor"
            ],
            "arguments": {
                "self": [
                    "_TLabelVisitor"
                ],
                "label": [
                    "ObjectLabel"
                ]
            }
        },
        "Label.abbreviation": {
            "name": "abbreviation",
            "location": 57,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Label._atf": {
            "name": "_atf",
            "location": 62,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Label.status_string": {
            "name": "status_string",
            "location": 66,
            "return": [
                "str",
                "type",
                "List[object]",
                "Dict[str, str]",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Label.accept": {
            "name": "accept",
            "location": 70,
            "return": [
                "LabelVisitor"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "LabelVisitor"
                ]
            }
        },
        "Label.to_value": {
            "name": "to_value",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Label.to_atf": {
            "name": "to_atf",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ColumnLabel.from_label": {
            "name": "from_label",
            "location": 85,
            "return": [
                "ColumnLabel"
            ],
            "arguments": {
                "column": [
                    "str"
                ],
                "status": [
                    "Iterable[ebl.transliteration.domain.atf.Status]"
                ]
            }
        },
        "ColumnLabel.from_int": {
            "name": "from_int",
            "location": 89,
            "return": [
                "ColumnLabel"
            ],
            "arguments": {
                "column": [
                    "int"
                ],
                "status": [
                    "Sequence[ebl.transliteration.domain.atf.Status]"
                ]
            }
        },
        "ColumnLabel.abbreviation": {
            "name": "abbreviation",
            "location": 93,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ColumnLabel._atf": {
            "name": "_atf",
            "location": 97,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ColumnLabel.accept": {
            "name": "accept",
            "location": 100,
            "return": [
                "LabelVisitor"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "LabelVisitor"
                ]
            }
        },
        "SurfaceLabel._check_text": {
            "name": "_check_text",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "value": [
                    "int",
                    "str",
                    "tuple",
                    "list",
                    "float"
                ]
            }
        },
        "SurfaceLabel.from_label": {
            "name": "from_label",
            "location": 117,
            "return": [
                "SurfaceLabel"
            ],
            "arguments": {
                "surface": [
                    "ebl.transliteration.domain.atf.Surface"
                ],
                "status": [
                    "Sequence[ebl.transliteration.domain.atf.Status]"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "SurfaceLabel.abbreviation": {
            "name": "abbreviation",
            "location": 123,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "SurfaceLabel._atf": {
            "name": "_atf",
            "location": 131,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SurfaceLabel.accept": {
            "name": "accept",
            "location": 134,
            "return": [
                "LabelVisitor"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "LabelVisitor"
                ]
            }
        },
        "SurfaceLabel.to_atf": {
            "name": "to_atf",
            "location": 137,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectLabel._check_text": {
            "name": "_check_text",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "value": [
                    "str",
                    "list",
                    "bool"
                ]
            }
        },
        "ObjectLabel.from_object": {
            "name": "from_object",
            "location": 153,
            "return": [
                "ObjectLabel"
            ],
            "arguments": {
                "object": [
                    "ebl.transliteration.domain.atf.Object"
                ],
                "status": [
                    "Sequence[ebl.transliteration.domain.atf.Status]"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "ObjectLabel.abbreviation": {
            "name": "abbreviation",
            "location": 159,
            "return": [
                "str",
                "List[str]",
                "type",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectLabel._atf": {
            "name": "_atf",
            "location": 163,
            "return": [
                "typing.Text",
                "str",
                "Optional[float]",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectLabel.accept": {
            "name": "accept",
            "location": 166,
            "return": [
                "LabelVisitor"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "LabelVisitor"
                ]
            }
        },
        "ObjectLabel.to_atf": {
            "name": "to_atf",
            "location": 169,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelTransformer.labels": {
            "name": "labels",
            "location": 178,
            "return": [
                "Sequence[Label]"
            ],
            "arguments": {
                "self": [],
                "children": [
                    "int",
                    "Callable[[str], bool]",
                    "List[object]",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "LabelTransformer.ebl_atf_text_line__column_label": {
            "name": "ebl_atf_text_line__column_label",
            "location": 182,
            "return": [
                "bool",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "numeral": [
                    "str",
                    "Optional[Sequence[str]]"
                ],
                "status": [
                    "str",
                    "Optional[Sequence[str]]"
                ]
            }
        },
        "LabelTransformer.ebl_atf_text_line__surface_label": {
            "name": "ebl_atf_text_line__surface_label",
            "location": 188,
            "return": [
                "int",
                "Type[T]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "surface": [
                    "Iterable[Any]",
                    "bytes",
                    "Optional[Sequence[str]]",
                    "bool"
                ],
                "status": [
                    "Iterable[Any]",
                    "bytes",
                    "Optional[Sequence[str]]",
                    "bool"
                ]
            }
        },
        "LabelTransformer.ebl_atf_text_line__object_label": {
            "name": "ebl_atf_text_line__object_label",
            "location": 196,
            "return": [
                "bool",
                "Mapping[str, Any]",
                "List[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "object_": [
                    "Optional[str]",
                    "str"
                ],
                "status": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "LabelTransformer.ebl_atf_text_line__status": {
            "name": "ebl_atf_text_line__status",
            "location": 201,
            "return": [
                "Sequence[ebl.transliteration.domain.atf.Status]"
            ],
            "arguments": {
                "self": [],
                "children": [
                    "Iterable"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/label_validator.py": {
        "validate_labels": {
            "name": "validate_labels",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "_instance": [
                    "str",
                    "bool",
                    "List[str]",
                    "list"
                ],
                "_attribute": [
                    "str",
                    "bool",
                    "List[str]",
                    "list"
                ],
                "value": [
                    "Sequence[ebl.transliteration.domain.labels.Label]"
                ]
            }
        },
        "LabelValidator.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelValidator.visit_surface_label": {
            "name": "visit_surface_label",
            "location": 18,
            "return": [
                "LabelValidator"
            ],
            "arguments": {
                "self": [
                    "_TLabelValidator"
                ],
                "label": [
                    "ebl.transliteration.domain.labels.SurfaceLabel"
                ]
            }
        },
        "LabelValidator.visit_column_label": {
            "name": "visit_column_label",
            "location": 24,
            "return": [
                "LabelValidator"
            ],
            "arguments": {
                "self": [
                    "_TLabelValidator"
                ],
                "label": [
                    "ebl.transliteration.domain.labels.ColumnLabel"
                ]
            }
        },
        "LabelValidator.visit_object_label": {
            "name": "visit_object_label",
            "location": 30,
            "return": [
                "LabelValidator"
            ],
            "arguments": {
                "self": [
                    "_TLabelValidator"
                ],
                "label": [
                    "ebl.transliteration.domain.labels.ObjectLabel"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/language.py": {
        "Language.lemmatizable": {
            "name": "lemmatizable",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Language.of_atf": {
            "name": "of_atf",
            "location": 16,
            "return": [
                "Language"
            ],
            "arguments": {
                "cls": [
                    "Type[_TLanguage]"
                ],
                "code": [
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/language_visitor.py": {
        "set_language": {
            "name": "set_language",
            "location": 39,
            "return": [
                "Sequence[ebl.transliteration.domain.tokens.Token]"
            ],
            "arguments": {
                "tokens": [
                    "Union[(Iterable[ebl.transliteration.domain.tokens.Token], Sequence[ebl.transliteration.domain.tokens.Token])]"
                ],
                "language": [
                    "ebl.transliteration.domain.language.Language"
                ]
            }
        },
        "LanguageVisitor.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "language": [
                    "ebl.transliteration.domain.language.Language"
                ]
            }
        },
        "LanguageVisitor.tokens": {
            "name": "tokens",
            "location": 15,
            "return": [
                "tuple",
                "int",
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "LanguageVisitor.visit": {
            "name": "visit",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "ebl.transliteration.domain.tokens.Token"
                ]
            }
        },
        "LanguageVisitor.visit_language_shift": {
            "name": "visit_language_shift",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "shift": [
                    "ebl.transliteration.domain.tokens.LanguageShift"
                ]
            }
        },
        "LanguageVisitor.visit_word": {
            "name": "visit_word",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "ebl.transliteration.domain.word_tokens.Word"
                ]
            }
        },
        "LanguageVisitor.visit_greek_word": {
            "name": "visit_greek_word",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "ebl.transliteration.domain.greek_tokens.GreekWord"
                ]
            }
        },
        "LanguageVisitor._append": {
            "name": "_append",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "ebl.transliteration.domain.tokens.Token"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/lark.py": {
        "_token_to_list": {
            "name": "_token_to_list",
            "location": 9,
            "return": [
                "list",
                "str",
                "bool"
            ],
            "arguments": {
                "token": [
                    "bytes",
                    "oj.tokens.Token",
                    "List[allennlp.data.tokenizers.token.Token]",
                    "spacy.tokens.Token",
                    "int",
                    "str"
                ]
            }
        },
        "tokens_to_value_tokens": {
            "name": "tokens_to_value_tokens",
            "location": 18,
            "return": [
                "Sequence[ebl.transliteration.domain.tokens.Token]"
            ],
            "arguments": {
                "children": [
                    "Sequence"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/lark_parser.py": {
        "parse_word": {
            "name": "parse_word",
            "location": 84,
            "return": [
                "ebl.transliteration.domain.word_tokens.Word"
            ],
            "arguments": {
                "atf": [
                    "str"
                ]
            }
        },
        "parse_normalized_akkadian_word": {
            "name": "parse_normalized_akkadian_word",
            "location": 89,
            "return": [
                "ebl.transliteration.domain.word_tokens.Word"
            ],
            "arguments": {
                "atf": [
                    "str"
                ]
            }
        },
        "parse_greek_word": {
            "name": "parse_greek_word",
            "location": 94,
            "return": [
                "ebl.transliteration.domain.greek_tokens.GreekWord"
            ],
            "arguments": {
                "atf": [
                    "str"
                ]
            }
        },
        "parse_compound_grapheme": {
            "name": "parse_compound_grapheme",
            "location": 99,
            "return": [
                "ebl.transliteration.domain.sign_tokens.CompoundGrapheme"
            ],
            "arguments": {
                "atf": [
                    "str"
                ]
            }
        },
        "parse_reading": {
            "name": "parse_reading",
            "location": 104,
            "return": [
                "ebl.transliteration.domain.sign_tokens.Reading"
            ],
            "arguments": {
                "atf": [
                    "str"
                ]
            }
        },
        "parse_erasure": {
            "name": "parse_erasure",
            "location": 109,
            "return": [
                "Sequence[ebl.transliteration.domain.tokens.Token]"
            ],
            "arguments": {
                "atf": [
                    "str"
                ]
            }
        },
        "parse_line": {
            "name": "parse_line",
            "location": 114,
            "return": [
                "ebl.transliteration.domain.line.Line"
            ],
            "arguments": {
                "atf": [
                    "str"
                ]
            }
        },
        "parse_note_line": {
            "name": "parse_note_line",
            "location": 119,
            "return": [
                "ebl.transliteration.domain.note_line.NoteLine"
            ],
            "arguments": {
                "atf": [
                    "str"
                ]
            }
        },
        "parse_markup": {
            "name": "parse_markup",
            "location": 124,
            "return": [
                "Sequence[ebl.transliteration.domain.markup.MarkupPart]"
            ],
            "arguments": {
                "atf": [
                    "str"
                ]
            }
        },
        "parse_parallel_line": {
            "name": "parse_parallel_line",
            "location": 129,
            "return": [
                "ebl.transliteration.domain.parallel_line.ParallelLine"
            ],
            "arguments": {
                "atf": [
                    "str"
                ]
            }
        },
        "parse_translation_line": {
            "name": "parse_translation_line",
            "location": 134,
            "return": [
                "ebl.transliteration.domain.translation_line.TranslationLine"
            ],
            "arguments": {
                "atf": [
                    "str"
                ]
            }
        },
        "parse_text_line": {
            "name": "parse_text_line",
            "location": 139,
            "return": [
                "ebl.transliteration.domain.text_line.TextLine"
            ],
            "arguments": {
                "atf": [
                    "str"
                ]
            }
        },
        "parse_line_number": {
            "name": "parse_line_number",
            "location": 144,
            "return": [
                "ebl.transliteration.domain.line_number.AbstractLineNumber"
            ],
            "arguments": {
                "atf": [
                    "str"
                ]
            }
        },
        "validate_line": {
            "name": "validate_line",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "line": [
                    "ebl.transliteration.domain.line.Line"
                ]
            }
        },
        "parse_atf_lark": {
            "name": "parse_atf_lark",
            "location": 155,
            "return": [
                "ebl.transliteration.domain.text.Text"
            ],
            "arguments": {
                "atf_": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "create_transliteration_error_data": {
            "name": "create_transliteration_error_data",
            "location": 184,
            "return": [
                "Dict[(str, Union[(int, str)])]"
            ],
            "arguments": {
                "error": [
                    "Exception"
                ],
                "line": [
                    "str"
                ],
                "line_number": [
                    "int"
                ]
            }
        },
        "unexpected_input_error": {
            "name": "unexpected_input_error",
            "location": 198,
            "return": [
                "Dict[(str, Union[(int, str)])]"
            ],
            "arguments": {
                "error": [
                    "str",
                    "int"
                ],
                "line": [
                    "str"
                ],
                "line_number": [
                    "int"
                ]
            }
        },
        "parse_error": {
            "name": "parse_error",
            "location": 209,
            "return": [
                "Dict[(str, Union[(int, str)])]"
            ],
            "arguments": {
                "error": [
                    "int"
                ],
                "line": [
                    "str"
                ],
                "line_number": [
                    "int"
                ]
            }
        },
        "enclosure_error": {
            "name": "enclosure_error",
            "location": 213,
            "return": [
                "Dict[(str, Union[(int, str)])]"
            ],
            "arguments": {
                "error": [
                    "ebl.transliteration.domain.enclosure_error.EnclosureError"
                ],
                "line": [
                    "str"
                ],
                "line_number": [
                    "int"
                ]
            }
        },
        "visit_error": {
            "name": "visit_error",
            "location": 217,
            "return": [
                "Dict[(str, Union[(int, str)])]"
            ],
            "arguments": {
                "error": [
                    "str",
                    "Optional[str]"
                ],
                "line": [
                    "str"
                ],
                "line_number": [
                    "int"
                ]
            }
        },
        "LineTransformer.empty_line": {
            "name": "empty_line",
            "location": 52,
            "return": [
                "ebl.transliteration.domain.line.EmptyLine"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "bool",
                    "Callable",
                    "List[object]"
                ]
            }
        },
        "LineTransformer.control_line": {
            "name": "control_line",
            "location": 56,
            "return": [
                "ControlLine",
                "str",
                "search.domain.DocMeta",
                "int"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ],
                "content": [
                    "str"
                ]
            }
        },
        "parse_atf_lark.parse_line_": {
            "name": "parse_line_",
            "location": 156,
            "return": [
                "tuple[typing.Optional[EmptyLine]]",
                "bool",
                "tuple[None]",
                "Optional[str]",
                "str",
                "mypy.errors.Errors"
            ],
            "arguments": {
                "line": [
                    "str",
                    "type",
                    "int"
                ],
                "line_number": [
                    "int",
                    "Optional[Union[int, float]]",
                    "str"
                ]
            }
        },
        "parse_atf_lark.check_errors": {
            "name": "check_errors",
            "location": 164,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "pairs": [
                    "str",
                    "dict",
                    "Exception"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/line.py": {
        "Line.atf": {
            "name": "atf",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.lemmatization": {
            "name": "lemmatization",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.key": {
            "name": "key",
            "location": 27,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.update_lemmatization": {
            "name": "update_lemmatization",
            "location": 30,
            "return": [
                "L"
            ],
            "arguments": {
                "self": [
                    "L"
                ],
                "lemmatization": [
                    "Sequence[ebl.lemmatization.domain.lemmatization.LemmatizationToken]"
                ]
            }
        },
        "Line.update_alignment": {
            "name": "update_alignment",
            "location": 33,
            "return": [
                "L"
            ],
            "arguments": {
                "self": [
                    "L"
                ],
                "alignment": [
                    "Sequence[ebl.transliteration.domain.alignment.AlignmentToken]"
                ]
            }
        },
        "Line.merge": {
            "name": "merge",
            "location": 36,
            "return": [
                "L"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "L"
                ]
            }
        },
        "Line.update_alignments": {
            "name": "update_alignments",
            "location": 39,
            "return": [
                "L"
            ],
            "arguments": {
                "self": [
                    "L"
                ],
                "alignment_map": []
            }
        },
        "Line.accept": {
            "name": "accept",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "ebl.transliteration.domain.tokens.TokenVisitor"
                ]
            }
        },
        "ControlLine.atf": {
            "name": "atf",
            "location": 52,
            "return": [
                "Atf"
            ],
            "arguments": {
                "self": []
            }
        },
        "ControlLine.lemmatization": {
            "name": "lemmatization",
            "location": 56,
            "return": [
                "tuple[LemmatizationToken]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmptyLine.atf": {
            "name": "atf",
            "location": 63,
            "return": [
                "Atf"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmptyLine.lemmatization": {
            "name": "lemmatization",
            "location": 67,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/line_label.py": {
        "LineLabel.set_column": {
            "name": "set_column",
            "location": 18,
            "return": [
                "LineLabel"
            ],
            "arguments": {
                "self": [
                    "_TLineLabel"
                ],
                "column": [
                    "Optional[ebl.transliteration.domain.labels.ColumnLabel]"
                ]
            }
        },
        "LineLabel.set_surface": {
            "name": "set_surface",
            "location": 21,
            "return": [
                "LineLabel"
            ],
            "arguments": {
                "self": [
                    "_TLineLabel"
                ],
                "surface": [
                    "Optional[ebl.transliteration.domain.labels.SurfaceLabel]"
                ]
            }
        },
        "LineLabel.set_object": {
            "name": "set_object",
            "location": 24,
            "return": [
                "LineLabel"
            ],
            "arguments": {
                "self": [
                    "_TLineLabel"
                ],
                "object": [
                    "Optional[ebl.transliteration.domain.labels.ObjectLabel]"
                ]
            }
        },
        "LineLabel.set_line_number": {
            "name": "set_line_number",
            "location": 27,
            "return": [
                "LineLabel"
            ],
            "arguments": {
                "self": [
                    "_TLineLabel"
                ],
                "line_number": [
                    "Optional[ebl.transliteration.domain.line_number.AbstractLineNumber]"
                ]
            }
        },
        "LineLabel.formatted_label": {
            "name": "formatted_label",
            "location": 31,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/line_number.py": {
        "AbstractLineNumber.label": {
            "name": "label",
            "location": 10,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractLineNumber.is_beginning_of_side": {
            "name": "is_beginning_of_side",
            "location": 15,
            "return": [
                "builtins.bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractLineNumber.atf": {
            "name": "atf",
            "location": 19,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractLineNumber.is_matching_number": {
            "name": "is_matching_number",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "int"
                ]
            }
        },
        "LineNumber.label": {
            "name": "label",
            "location": 35,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineNumber.is_beginning_of_side": {
            "name": "is_beginning_of_side",
            "location": 42,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineNumber.is_matching_number": {
            "name": "is_matching_number",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "int"
                ]
            }
        },
        "LineNumberRange.label": {
            "name": "label",
            "location": 55,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineNumberRange.is_beginning_of_side": {
            "name": "is_beginning_of_side",
            "location": 59,
            "return": [
                "abc.BaseConfig",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineNumberRange.is_matching_number": {
            "name": "is_matching_number",
            "location": 62,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "int"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/markup.py": {
        "escape": {
            "name": "escape",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "unescaped": [
                    "str"
                ]
            }
        },
        "convert_part_sequence": {
            "name": "convert_part_sequence",
            "location": 131,
            "return": [
                "Tuple[(MarkupPart, ...)]"
            ],
            "arguments": {
                "parts": [
                    "Iterable[MarkupPart]"
                ]
            }
        },
        "rstrip": {
            "name": "rstrip",
            "location": 135,
            "return": [
                "Sequence[MarkupPart]"
            ],
            "arguments": {
                "parts": [
                    "Sequence[MarkupPart]"
                ]
            }
        },
        "title_case": {
            "name": "title_case",
            "location": 139,
            "return": [
                "Sequence[MarkupPart]"
            ],
            "arguments": {
                "parts": [
                    "Sequence[MarkupPart]"
                ]
            }
        },
        "to_title": {
            "name": "to_title",
            "location": 143,
            "return": [
                "Sequence[MarkupPart]"
            ],
            "arguments": {
                "parts": [
                    "Sequence[MarkupPart]"
                ]
            }
        },
        "MarkupPart.value": {
            "name": "value",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MarkupPart.key": {
            "name": "key",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MarkupPart.rstrip": {
            "name": "rstrip",
            "location": 38,
            "return": [
                "MP"
            ],
            "arguments": {
                "self": [
                    "MP"
                ]
            }
        },
        "MarkupPart.title_case": {
            "name": "title_case",
            "location": 41,
            "return": [
                "MP"
            ],
            "arguments": {
                "self": [
                    "MP"
                ]
            }
        },
        "TextPart.rstrip": {
            "name": "rstrip",
            "location": 49,
            "return": [
                "TP"
            ],
            "arguments": {
                "self": [
                    "TP"
                ]
            }
        },
        "TextPart.title_case": {
            "name": "title_case",
            "location": 52,
            "return": [
                "TP"
            ],
            "arguments": {
                "self": [
                    "TP"
                ]
            }
        },
        "StringPart.value": {
            "name": "value",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EmphasisPart.value": {
            "name": "value",
            "location": 66,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "LanguagePart.code": {
            "name": "code",
            "location": 76,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "LanguagePart.value": {
            "name": "value",
            "location": 86,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "LanguagePart.key": {
            "name": "key",
            "location": 91,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "LanguagePart.of_transliteration": {
            "name": "of_transliteration",
            "location": 96,
            "return": [
                "LanguagePart"
            ],
            "arguments": {
                "language": [
                    "ebl.transliteration.domain.language.Language"
                ],
                "tokens": [
                    "Sequence[ebl.transliteration.domain.tokens.Token]"
                ]
            }
        },
        "BibliographyPart.validate_reference": {
            "name": "validate_reference",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_attribute": [],
                "value": []
            }
        },
        "BibliographyPart.value": {
            "name": "value",
            "location": 121,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BibliographyPart.of": {
            "name": "of",
            "location": 127,
            "return": [
                "BibliographyPart"
            ],
            "arguments": {
                "id": [
                    "ebl.bibliography.domain.reference.BibliographyId"
                ],
                "pages": [
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/museum_number.py": {
        "_is_not_empty": {
            "name": "_is_not_empty",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "str",
                    "attr.Attribute"
                ],
                "attribute": [
                    "attr.Attribute"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "_does_not_contain_period": {
            "name": "_does_not_contain_period",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "str",
                    "List[int]",
                    "Callable[[str, object], None]",
                    "Iterable[float]",
                    "bool",
                    "Optional[BaseException]"
                ],
                "attribute": [
                    "attr.Attribute"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "_require_suffix_if_contains_period": {
            "name": "_require_suffix_if_contains_period",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "museum_number": [
                    "MuseumNumber"
                ],
                "attribute": [
                    "attr.Attribute"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "MuseumNumber.__lt__": {
            "name": "__lt__",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "MuseumNumber.__str__": {
            "name": "__str__",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MuseumNumber._prefix_order": {
            "name": "_prefix_order",
            "location": 63,
            "return": [
                "tuple[int]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MuseumNumber._number_order": {
            "name": "_number_order",
            "location": 73,
            "return": [
                "tuple[int]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MuseumNumber._suffix_order": {
            "name": "_suffix_order",
            "location": 77,
            "return": [
                "tuple[int]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MuseumNumber.of": {
            "name": "of",
            "location": 81,
            "return": [
                "MuseumNumber"
            ],
            "arguments": {
                "source": [
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/normalized_akkadian.py": {
        "AkkadianWord._validate_modifiers": {
            "name": "_validate_modifiers",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "bool",
                    "Sequence[Union[int, str]]",
                    "Union[str, int]",
                    "str",
                    "KT",
                    "int"
                ],
                "value": [
                    "str",
                    "type",
                    "T",
                    "list",
                    "int"
                ]
            }
        },
        "AkkadianWord.language": {
            "name": "language",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AkkadianWord.normalized": {
            "name": "normalized",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AkkadianWord.value": {
            "name": "value",
            "location": 34,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AkkadianWord.accept": {
            "name": "accept",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "ebl.transliteration.domain.tokens.TokenVisitor"
                ]
            }
        },
        "AkkadianWord.of": {
            "name": "of",
            "location": 49,
            "return": [
                "AkkadianWord"
            ],
            "arguments": {
                "parts": [
                    "Sequence[ebl.transliteration.domain.tokens.Token]"
                ],
                "modifier": [
                    "Sequence[ebl.transliteration.domain.atf.Flag]"
                ],
                "unique_lemma": [
                    "Sequence[ebl.dictionary.domain.word.WordId]"
                ],
                "alignment": [
                    "Optional[int]"
                ],
                "variant": [
                    "Optional[ebl.transliteration.domain.word_tokens.AbstractWord]"
                ],
                "has_variant_alignmnet": [
                    "bool"
                ]
            }
        },
        "Break._symbol": {
            "name": "_symbol",
            "location": 78,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Break.parts": {
            "name": "parts",
            "location": 82,
            "return": [
                "tuple",
                "str",
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Break.value": {
            "name": "value",
            "location": 86,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]",
                "Dict[str, Union[str, Set]]",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Break.of": {
            "name": "of",
            "location": 90,
            "return": [
                "B"
            ],
            "arguments": {
                "cls": [
                    "Type[B]"
                ],
                "is_uncertain": [
                    "bool"
                ]
            }
        },
        "Break.certain": {
            "name": "certain",
            "location": 94,
            "return": [
                "B"
            ],
            "arguments": {
                "cls": [
                    "Type[B]"
                ]
            }
        },
        "Break.uncertain": {
            "name": "uncertain",
            "location": 98,
            "return": [
                "B"
            ],
            "arguments": {
                "cls": [
                    "Type[B]"
                ]
            }
        },
        "Caesura._symbol": {
            "name": "_symbol",
            "location": 105,
            "return": [
                "typing.Text",
                "Callable",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Caesura.accept": {
            "name": "accept",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "ebl.transliteration.domain.tokens.TokenVisitor"
                ]
            }
        },
        "MetricalFootSeparator._symbol": {
            "name": "_symbol",
            "location": 115,
            "return": [
                "typing.Text",
                "Callable",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricalFootSeparator.accept": {
            "name": "accept",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "ebl.transliteration.domain.tokens.TokenVisitor"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/note_line.py": {
        "NoteLine.key": {
            "name": "key",
            "location": 16,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoteLine.atf": {
            "name": "atf",
            "location": 21,
            "return": [
                "Atf"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoteLine.lemmatization": {
            "name": "lemmatization",
            "location": 26,
            "return": [
                "tuple[LemmatizationToken]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/note_line_transformer.py": {
        "MarkupTransformer.markup": {
            "name": "markup",
            "location": 20,
            "return": [
                "Sequence[ebl.transliteration.domain.markup.MarkupPart]"
            ],
            "arguments": {
                "self": [],
                "children": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "MarkupTransformer.ebl_atf_text_line__language_part": {
            "name": "ebl_atf_text_line__language_part",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "language": [
                    "int",
                    "str",
                    "Dict[str, Any]"
                ],
                "transliteration": [
                    "int",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "MarkupTransformer.ebl_atf_text_line__emphasis_part": {
            "name": "ebl_atf_text_line__emphasis_part",
            "location": 32,
            "return": [
                "bool",
                "EmphasisPart"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "ebl.corpus.domain.texText",
                    "Tuple[int, int]"
                ]
            }
        },
        "MarkupTransformer.ebl_atf_text_line__string_part": {
            "name": "ebl_atf_text_line__string_part",
            "location": 36,
            "return": [
                "StringPart",
                "Type",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "ebl.corpus.domain.texText",
                    "Tuple[int, int]"
                ]
            }
        },
        "MarkupTransformer.ebl_atf_text_line__bibliography_part": {
            "name": "ebl_atf_text_line__bibliography_part",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "str",
                    "bool",
                    "Union[str, Iterable[str]]"
                ],
                "pages": [
                    "str",
                    "bool",
                    "Union[str, Iterable[str]]"
                ]
            }
        },
        "MarkupTransformer.ebl_atf_text_line__note_text": {
            "name": "ebl_atf_text_line__note_text",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "children": [
                    "int",
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "NoteLineTransformer.note_line": {
            "name": "note_line",
            "location": 50,
            "return": [
                "ebl.transliteration.domain.note_line.NoteLine"
            ],
            "arguments": {
                "self": [],
                "children": [
                    "Sequence[ebl.transliteration.domain.markup.MarkupPart]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/parallel_line.py": {
        "ChapterName.__str__": {
            "name": "__str__",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParallelLine.display_value": {
            "name": "display_value",
            "location": 39,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParallelLine.atf": {
            "name": "atf",
            "location": 43,
            "return": [
                "Atf",
                "int",
                "tuple",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParallelLine.lemmatization": {
            "name": "lemmatization",
            "location": 47,
            "return": [
                "tuple[LemmatizationToken]",
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Labels.all": {
            "name": "all",
            "location": 58,
            "return": [
                "tuple",
                "bool",
                "int",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Labels.__str__": {
            "name": "__str__",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParallelFragment.display_value": {
            "name": "display_value",
            "location": 78,
            "return": [
                "typing.Text",
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParallelText.display_value": {
            "name": "display_value",
            "location": 95,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParallelComposition.display_value": {
            "name": "display_value",
            "location": 108,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/parallel_line_transformer.py": {
        "ParallelLineTransformer.ebl_atf_text_line__parallel_fragment": {
            "name": "ebl_atf_text_line__parallel_fragment",
            "location": 20,
            "return": [
                "ParallelFragment",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "_prefix": [
                    "bool",
                    "BinaryIO",
                    "Optional[int]",
                    "int",
                    "Optional[bytes]"
                ],
                "cf": [
                    "Optional[int]",
                    "int",
                    "float",
                    "str"
                ],
                "museum_number": [
                    "Optional[int]",
                    "int",
                    "float",
                    "str"
                ],
                "duplicates": [
                    "Optional[int]",
                    "int",
                    "float",
                    "str"
                ],
                "object_label": [
                    "Optional[int]",
                    "int",
                    "float",
                    "str"
                ],
                "surface_label": [
                    "Optional[int]",
                    "int",
                    "float",
                    "str"
                ],
                "column_label": [
                    "Optional[int]",
                    "int",
                    "float",
                    "str"
                ],
                "line_number": [
                    "Optional[int]",
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "ParallelLineTransformer.ebl_atf_text_line__museum_number": {
            "name": "ebl_atf_text_line__museum_number",
            "location": 39,
            "return": [
                "ebl.transliteration.domain.museum_number.MuseumNumber"
            ],
            "arguments": {
                "self": [],
                "children": [
                    "bool",
                    "str"
                ]
            }
        },
        "ParallelLineTransformer.ebl_atf_text_line__parallel_text": {
            "name": "ebl_atf_text_line__parallel_text",
            "location": 43,
            "return": [
                "ParallelText",
                "Optional[Type[BaseException]]",
                "Type[Exception]"
            ],
            "arguments": {
                "self": [],
                "_prefix": [
                    "str",
                    "int",
                    "bool",
                    "Callable[[], Iterator[Any]]",
                    "List[str]"
                ],
                "cf": [
                    "Optional[int]",
                    "Optional[bool]",
                    "Optional[str]",
                    "int"
                ],
                "text_id": [
                    "Optional[int]",
                    "Optional[bool]",
                    "Optional[str]",
                    "int"
                ],
                "chapter": [
                    "Optional[int]",
                    "Optional[bool]",
                    "Optional[str]",
                    "int"
                ],
                "line_number": [
                    "Optional[int]",
                    "Optional[bool]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "ParallelLineTransformer.ebl_atf_text_line__text_id": {
            "name": "ebl_atf_text_line__text_id",
            "location": 49,
            "return": [
                "TextId",
                "str",
                "Tuple[str]",
                "list"
            ],
            "arguments": {
                "self": [],
                "genre": [
                    "dict",
                    "List[List[str]]"
                ],
                "category": [
                    "dict",
                    "List[List[str]]"
                ],
                "number": [
                    "dict",
                    "List[List[str]]"
                ]
            }
        },
        "ParallelLineTransformer.ebl_atf_text_line__chapter_name": {
            "name": "ebl_atf_text_line__chapter_name",
            "location": 57,
            "return": [
                "ChapterName",
                "bool",
                "List[str]",
                "Tuple[str]",
                "FrozenSet[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "stage_abbreviation": [
                    "str",
                    "Set[str]"
                ],
                "version": [
                    "str",
                    "Set[str]"
                ],
                "name": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "ParallelLineTransformer.ebl_atf_text_line__parallel_composition": {
            "name": "ebl_atf_text_line__parallel_composition",
            "location": 66,
            "return": [
                "ebl.transliteration.domain.parallel_line.ParallelComposition"
            ],
            "arguments": {
                "self": [],
                "children": [
                    "Optional[str]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/reconstructed_text_parser.py": {
        "parse_reconstructed_word": {
            "name": "parse_reconstructed_word",
            "location": 18,
            "return": [
                "ebl.transliteration.domain.normalized_akkadian.AkkadianWord"
            ],
            "arguments": {
                "word": [
                    "str"
                ]
            }
        },
        "parse_break": {
            "name": "parse_break",
            "location": 25,
            "return": [
                "ebl.transliteration.domain.normalized_akkadian.Break"
            ],
            "arguments": {
                "break_": [
                    "str"
                ]
            }
        },
        "parse_reconstructed_line": {
            "name": "parse_reconstructed_line",
            "location": 30,
            "return": [
                "Sequence[ebl.transliteration.domain.tokens.Token]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/side.py": {},
    "ebl-api-master/ebl/transliteration/domain/sign.py": {
        "Sign.standardization": {
            "name": "standardization",
            "location": 60,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/signs_transformer.py": {
        "SignTransformer.ebl_atf_text_line__unidentified_sign": {
            "name": "ebl_atf_text_line__unidentified_sign",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "flags": [
                    "Tuple[float, float]",
                    "float",
                    "str"
                ]
            }
        },
        "SignTransformer.ebl_atf_text_line__egyptian_metrical_feet_separator": {
            "name": "ebl_atf_text_line__egyptian_metrical_feet_separator",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "flags": [
                    "List[int]",
                    "Callable[[None], bool]"
                ]
            }
        },
        "SignTransformer.ebl_atf_text_line__unclear_sign": {
            "name": "ebl_atf_text_line__unclear_sign",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "flags": [
                    "Tuple[float, float]",
                    "float",
                    "str"
                ]
            }
        },
        "SignTransformer.ebl_atf_text_line__unknown_number_of_signs": {
            "name": "ebl_atf_text_line__unknown_number_of_signs",
            "location": 34,
            "return": [
                "bool",
                "T"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "List[object]"
                ]
            }
        },
        "SignTransformer.ebl_atf_text_line__joiner": {
            "name": "ebl_atf_text_line__joiner",
            "location": 38,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "symbol": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "int"
                ]
            }
        },
        "SignTransformer.ebl_atf_text_line__reading": {
            "name": "ebl_atf_text_line__reading",
            "location": 42,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "int",
                    "Optional[str]",
                    "Tuple[str, Dict[str, Any]]",
                    "List[Tuple[Any, str]]"
                ],
                "sub_index": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "int",
                    "Optional[str]",
                    "Tuple[str, Dict[str, Any]]",
                    "List[Tuple[Any, str]]"
                ],
                "modifiers": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "int",
                    "Optional[str]",
                    "Tuple[str, Dict[str, Any]]",
                    "List[Tuple[Any, str]]"
                ],
                "flags": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "int",
                    "Optional[str]",
                    "Tuple[str, Dict[str, Any]]",
                    "List[Tuple[Any, str]]"
                ],
                "sign": [
                    "None",
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "int",
                    "Optional[str]",
                    "Tuple[str, Dict[str, Any]]",
                    "List[Tuple[Any, str]]"
                ]
            }
        },
        "SignTransformer.ebl_atf_text_line__value_name_part": {
            "name": "ebl_atf_text_line__value_name_part",
            "location": 46,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "children": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "SignTransformer.ebl_atf_text_line__logogram": {
            "name": "ebl_atf_text_line__logogram",
            "location": 50,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "int",
                    "Optional[str]",
                    "Tuple[str, Dict[str, Any]]",
                    "List[Tuple[Any, str]]"
                ],
                "sub_index": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "int",
                    "Optional[str]",
                    "Tuple[str, Dict[str, Any]]",
                    "List[Tuple[Any, str]]"
                ],
                "modifiers": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "int",
                    "Optional[str]",
                    "Tuple[str, Dict[str, Any]]",
                    "List[Tuple[Any, str]]"
                ],
                "flags": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "int",
                    "Optional[str]",
                    "Tuple[str, Dict[str, Any]]",
                    "List[Tuple[Any, str]]"
                ],
                "sign": [
                    "None",
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "int",
                    "Optional[str]",
                    "Tuple[str, Dict[str, Any]]",
                    "List[Tuple[Any, str]]"
                ]
            }
        },
        "SignTransformer.ebl_atf_text_line__surrogate": {
            "name": "ebl_atf_text_line__surrogate",
            "location": 54,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "T",
                    "Optional[str]",
                    "Union[None, str, List[str]]",
                    "Tuple[Type]",
                    "Optional[\"PNSqlCursor\"]",
                    "str",
                    "bool"
                ],
                "sub_index": [
                    "T",
                    "Optional[str]",
                    "Union[None, str, List[str]]",
                    "Tuple[Type]",
                    "Optional[\"PNSqlCursor\"]",
                    "str",
                    "bool"
                ],
                "modifiers": [
                    "T",
                    "Optional[str]",
                    "Union[None, str, List[str]]",
                    "Tuple[Type]",
                    "Optional[\"PNSqlCursor\"]",
                    "str",
                    "bool"
                ],
                "flags": [
                    "T",
                    "Optional[str]",
                    "Union[None, str, List[str]]",
                    "Tuple[Type]",
                    "Optional[\"PNSqlCursor\"]",
                    "str",
                    "bool"
                ],
                "surrogate": [
                    "T",
                    "Optional[str]",
                    "Union[None, str, List[str]]",
                    "Tuple[Type]",
                    "Optional[\"PNSqlCursor\"]",
                    "str",
                    "bool"
                ]
            }
        },
        "SignTransformer.ebl_atf_text_line__logogram_name_part": {
            "name": "ebl_atf_text_line__logogram_name_part",
            "location": 62,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "children": [
                    "str"
                ]
            }
        },
        "SignTransformer.ebl_atf_text_line__number": {
            "name": "ebl_atf_text_line__number",
            "location": 66,
            "return": [
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "bool",
                    "Iterable[int]",
                    "int"
                ],
                "modifiers": [
                    "bool",
                    "Iterable[int]",
                    "int"
                ],
                "flags": [
                    "bool",
                    "Iterable[int]",
                    "int"
                ],
                "sign": [
                    "None",
                    "bool",
                    "Iterable[int]",
                    "int"
                ]
            }
        },
        "SignTransformer.ebl_atf_text_line__number_name_head": {
            "name": "ebl_atf_text_line__number_name_head",
            "location": 70,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "children": [
                    "bool",
                    "str",
                    "Optional[Callable]"
                ]
            }
        },
        "SignTransformer.ebl_atf_text_line__number_name_part": {
            "name": "ebl_atf_text_line__number_name_part",
            "location": 74,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "children": [
                    "str"
                ]
            }
        },
        "SignTransformer.ebl_atf_text_line__sub_index": {
            "name": "ebl_atf_text_line__sub_index",
            "location": 78,
            "return": [
                "bool",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "sub_index": [
                    "typing.Text",
                    "float",
                    "int",
                    "Optional[Sequence[Any]]"
                ]
            }
        },
        "SignTransformer.ebl_atf_text_line__modifiers": {
            "name": "ebl_atf_text_line__modifiers",
            "location": 81,
            "return": [
                "tuple",
                "str",
                "Union[str, List[str]]",
                "Union[List, str]"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "str",
                    "IO[Any]",
                    "dict",
                    "FrozenSet[str]",
                    "int"
                ]
            }
        },
        "SignTransformer.ebl_atf_text_line__flags": {
            "name": "ebl_atf_text_line__flags",
            "location": 84,
            "return": [
                "tuple",
                "int",
                "Dict[str, int]",
                "dict",
                "Generator"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "tuple",
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "SignTransformer.ebl_atf_text_line__grapheme": {
            "name": "ebl_atf_text_line__grapheme",
            "location": 88,
            "return": [
                "bool",
                "BaseException"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "int"
                ],
                "modifiers": [
                    "str",
                    "bool",
                    "int"
                ],
                "flags": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "SignTransformer.ebl_atf_text_line__compound_grapheme": {
            "name": "ebl_atf_text_line__compound_grapheme",
            "location": 91,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "children": [
                    "Pattern",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/sign_tokens.py": {
        "AbstractSign.string_flags": {
            "name": "string_flags",
            "location": 28,
            "return": [
                "list",
                "List[str]",
                "Set[str]",
                "str",
                "Dict[str, str]",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Divider.value": {
            "name": "value",
            "location": 37,
            "return": [
                "typing.Text",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Divider.parts": {
            "name": "parts",
            "location": 43,
            "return": [
                "tuple",
                "str",
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Divider.clean_value": {
            "name": "clean_value",
            "location": 47,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Divider.string_flags": {
            "name": "string_flags",
            "location": 52,
            "return": [
                "list",
                "List[str]",
                "Set[str]",
                "str",
                "Dict[str, str]",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Divider.accept": {
            "name": "accept",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "ebl.transliteration.domain.tokens.TokenVisitor"
                ]
            }
        },
        "Divider.of": {
            "name": "of",
            "location": 59,
            "return": [
                "Divider"
            ],
            "arguments": {
                "divider": [
                    "str"
                ],
                "modifiers": [
                    "Sequence[str]"
                ],
                "flags": [
                    "Sequence[atf.Flag]"
                ]
            }
        },
        "NamedSign._check_sub_index": {
            "name": "_check_sub_index",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "_attribute": [
                    "Optional[BaseException]",
                    "Callable[[str, object], None]",
                    "Iterable[float]",
                    "bool"
                ],
                "value": [
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Any]",
                    "str",
                    "list",
                    "float",
                    "Optional[bool]"
                ]
            }
        },
        "NamedSign.name": {
            "name": "name",
            "location": 82,
            "return": [
                "str",
                "List[str]",
                "FrozenSet[str]",
                "object",
                "Iterable",
                "tuple",
                "Sequence[dict]",
                "Set[int]",
                "Container[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamedSign.clean_value": {
            "name": "clean_value",
            "location": 88,
            "return": [
                "typing.Text",
                "bool",
                "str",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamedSign.parts": {
            "name": "parts",
            "location": 95,
            "return": [
                "tuple",
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamedSign.value": {
            "name": "value",
            "location": 102,
            "return": [
                "typing.Text",
                "str",
                "int",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamedSign.accept": {
            "name": "accept",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "ebl.transliteration.domain.tokens.TokenVisitor"
                ]
            }
        },
        "Reading.of": {
            "name": "of",
            "location": 117,
            "return": [
                "Reading"
            ],
            "arguments": {
                "name": [
                    "Sequence[Union[(ebl.transliteration.domain.enclosure_tokens.BrokenAway, ebl.transliteration.domain.tokens.ValueToken)]]"
                ],
                "sub_index": [
                    "Optional[int]"
                ],
                "modifiers": [
                    "Sequence[str]"
                ],
                "flags": [
                    "Sequence[atf.Flag]"
                ],
                "sign": [
                    "Optional[ebl.transliteration.domain.tokens.Token]"
                ]
            }
        },
        "Reading.of_name": {
            "name": "of_name",
            "location": 129,
            "return": [
                "Reading"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "sub_index": [
                    "Optional[int]"
                ],
                "modifiers": [
                    "Sequence[str]"
                ],
                "flags": [
                    "Sequence[atf.Flag]"
                ],
                "sign": [
                    "Optional[ebl.transliteration.domain.tokens.Token]"
                ]
            }
        },
        "Logogram.value": {
            "name": "value",
            "location": 146,
            "return": [
                "typing.Text",
                "str",
                "List[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Logogram.clean_value": {
            "name": "clean_value",
            "location": 150,
            "return": [
                "typing.Text",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Logogram._surrogate_value": {
            "name": "_surrogate_value",
            "location": 154,
            "return": [
                "typing.Text",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Logogram.of": {
            "name": "of",
            "location": 162,
            "return": [
                "Logogram"
            ],
            "arguments": {
                "name": [
                    "Sequence[Union[(ebl.transliteration.domain.enclosure_tokens.BrokenAway, ebl.transliteration.domain.tokens.ValueToken)]]"
                ],
                "sub_index": [
                    "Optional[int]"
                ],
                "modifiers": [
                    "Sequence[str]"
                ],
                "flags": [
                    "Sequence[atf.Flag]"
                ],
                "sign": [
                    "Optional[ebl.transliteration.domain.tokens.Token]"
                ],
                "surrogate": [
                    "Sequence[ebl.transliteration.domain.tokens.Token]"
                ]
            }
        },
        "Logogram.of_name": {
            "name": "of_name",
            "location": 182,
            "return": [
                "Logogram"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "sub_index": [
                    "Optional[int]"
                ],
                "modifiers": [
                    "Sequence[str]"
                ],
                "flags": [
                    "Sequence[atf.Flag]"
                ],
                "sign": [
                    "Optional[ebl.transliteration.domain.tokens.Token]"
                ],
                "surrogate": [
                    "Sequence[ebl.transliteration.domain.tokens.Token]"
                ]
            }
        },
        "Number.accept": {
            "name": "accept",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "ebl.transliteration.domain.tokens.TokenVisitor"
                ]
            }
        },
        "Number.of": {
            "name": "of",
            "location": 201,
            "return": [
                "Number"
            ],
            "arguments": {
                "name": [
                    "Sequence[Union[(ebl.transliteration.domain.enclosure_tokens.BrokenAway, ebl.transliteration.domain.tokens.ValueToken)]]"
                ],
                "modifiers": [
                    "Sequence[str]"
                ],
                "flags": [
                    "Sequence[atf.Flag]"
                ],
                "sign": [
                    "Optional[ebl.transliteration.domain.tokens.Token]"
                ],
                "sub_index": [
                    "int"
                ]
            }
        },
        "Number.of_name": {
            "name": "of_name",
            "location": 213,
            "return": [
                "Number"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "modifiers": [
                    "Sequence[str]"
                ],
                "flags": [
                    "Sequence[atf.Flag]"
                ],
                "sign": [
                    "Optional[ebl.transliteration.domain.tokens.Token]"
                ],
                "sub_index": [
                    "int"
                ]
            }
        },
        "Grapheme.value": {
            "name": "value",
            "location": 228,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grapheme.clean_value": {
            "name": "clean_value",
            "location": 234,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grapheme.parts": {
            "name": "parts",
            "location": 239,
            "return": [
                "tuple",
                "str",
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grapheme.accept": {
            "name": "accept",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "ebl.transliteration.domain.tokens.TokenVisitor"
                ]
            }
        },
        "Grapheme.of": {
            "name": "of",
            "location": 246,
            "return": [
                "Grapheme"
            ],
            "arguments": {
                "name": [
                    "ebl.transliteration.domain.sign.SignName"
                ],
                "modifiers": [
                    "Sequence[str]"
                ],
                "flags": [
                    "Sequence[atf.Flag]"
                ]
            }
        },
        "CompoundGrapheme.name": {
            "name": "name",
            "location": 259,
            "return": [
                "SignName",
                "bool",
                "str",
                "Union[str, List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompoundGrapheme.value": {
            "name": "value",
            "location": 265,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompoundGrapheme.parts": {
            "name": "parts",
            "location": 269,
            "return": [
                "list",
                "List[str]",
                "List[Tuple[str, bool]]",
                "bool",
                "Set[Tuple[str, str]]",
                "Iterable[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompoundGrapheme.accept": {
            "name": "accept",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "ebl.transliteration.domain.tokens.TokenVisitor"
                ]
            }
        },
        "CompoundGrapheme.of": {
            "name": "of",
            "location": 276,
            "return": [
                "CompoundGrapheme"
            ],
            "arguments": {
                "parts": [
                    "Sequence[str]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/stage.py": {
        "Stage.abbreviation": {
            "name": "abbreviation",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/standardization.py": {
        "is_splittable": {
            "name": "is_splittable",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "grapheme": [
                    "str"
                ]
            }
        },
        "Standardization.is_splittable": {
            "name": "is_splittable",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Standardization.get_value": {
            "name": "get_value",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "is_deep": [
                    "bool"
                ]
            }
        },
        "Standardization.of_sign": {
            "name": "of_sign",
            "location": 20,
            "return": [
                "Standardization"
            ],
            "arguments": {
                "cls": [
                    "Type[_TStandardization]"
                ],
                "sign": [
                    "ebl.transliteration.domain.sign.Sign"
                ]
            }
        },
        "Standardization.of_string": {
            "name": "of_string",
            "location": 26,
            "return": [
                "Standardization"
            ],
            "arguments": {
                "cls": [
                    "Type[_TStandardization]"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "Standardization.escape_standardization": {
            "name": "escape_standardization",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "sign": [
                    "ebl.transliteration.domain.sign.Sign"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/text.py": {
        "LabelsValidator.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "Text"
                ]
            }
        },
        "LabelsValidator.get_errors": {
            "name": "get_errors",
            "location": 26,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "Sequence[ebl.transliteration.domain.line.Line]"
                ]
            }
        },
        "LabelsValidator._get_overlaps": {
            "name": "_get_overlaps",
            "location": 36,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelsValidator._get_index": {
            "name": "_get_index",
            "location": 44,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "extent": [
                    "ebl.transliteration.domain.translation_line.Extent"
                ]
            }
        },
        "LabelsValidator._validate_line": {
            "name": "_validate_line",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "Iterable[str]",
                    "List[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "LabelsValidator._": {
            "name": "_",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "List[str]",
                    "str",
                    "Iterator[str]",
                    "list"
                ]
            }
        },
        "LabelsValidator._validate_extent": {
            "name": "_validate_extent",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "ebl.transliteration.domain.translation_line.TranslationLine"
                ],
                "extent": [
                    "ebl.transliteration.domain.translation_line.Extent"
                ]
            }
        },
        "Text._validate_extents": {
            "name": "_validate_extents",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "Text.number_of_lines": {
            "name": "number_of_lines",
            "location": 88,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Text.text_lines": {
            "name": "text_lines",
            "location": 92,
            "return": [
                "int",
                "list",
                "Optional[dict]",
                "bool",
                "Iterable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Text.lemmatization": {
            "name": "lemmatization",
            "location": 96,
            "return": [
                "str",
                "List[str]",
                "List[Dict]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Text.atf": {
            "name": "atf",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Text.labels": {
            "name": "labels",
            "location": 104,
            "return": [
                "int",
                "str",
                "bool",
                "List[List[str]]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Text.is_empty": {
            "name": "is_empty",
            "location": 130,
            "return": [
                "Dict[str, Any]",
                "str",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Text.update_lemmatization": {
            "name": "update_lemmatization",
            "location": 133,
            "return": [
                "ext"
            ],
            "arguments": {
                "self": [
                    "_TText"
                ],
                "lemmatization": [
                    "ebl.lemmatization.domain.lemmatization.Lemmatization"
                ]
            }
        },
        "Text.merge": {
            "name": "merge",
            "location": 143,
            "return": [
                "ext"
            ],
            "arguments": {
                "self": [
                    "_TText"
                ],
                "other": [
                    "ext"
                ]
            }
        },
        "Text.set_parser_version": {
            "name": "set_parser_version",
            "location": 155,
            "return": [
                "ext"
            ],
            "arguments": {
                "self": [
                    "_TText"
                ],
                "parser_version": [
                    "str"
                ]
            }
        },
        "Text.of_iterable": {
            "name": "of_iterable",
            "location": 159,
            "return": [
                "Text"
            ],
            "arguments": {
                "lines": [
                    "Iterable[ebl.transliteration.domain.line.Line]"
                ],
                "parser_version": [
                    "str"
                ]
            }
        },
        "Text.merge.map_": {
            "name": "map_",
            "location": 144,
            "return": [],
            "arguments": {
                "line": []
            }
        },
        "Text.merge.inner_merge": {
            "name": "inner_merge",
            "location": 147,
            "return": [],
            "arguments": {
                "old": [],
                "new": []
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/text_id.py": {
        "TextId.__str__": {
            "name": "__str__",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/text_line.py": {
        "update_tokens": {
            "name": "update_tokens",
            "location": 26,
            "return": [
                "Sequence[ebl.transliteration.domain.tokens.Token]"
            ],
            "arguments": {
                "tokens": [
                    "Sequence[ebl.transliteration.domain.tokens.Token]"
                ],
                "updates": [
                    "Sequence[T]"
                ],
                "updater": [
                    "Callable[([ebl.transliteration.domain.tokens.Token, T], ebl.transliteration.domain.tokens.Token)]"
                ],
                "error_class": [
                    "Type[Exception]"
                ]
            }
        },
        "merge_tokens": {
            "name": "merge_tokens",
            "location": 39,
            "return": [
                "Sequence[ebl.transliteration.domain.tokens.Token]"
            ],
            "arguments": {
                "old": [
                    "Sequence[ebl.transliteration.domain.tokens.Token]"
                ],
                "new": [
                    "Sequence[ebl.transliteration.domain.tokens.Token]"
                ]
            }
        },
        "merge_tokens.map_": {
            "name": "map_",
            "location": 40,
            "return": [],
            "arguments": {
                "token": []
            }
        },
        "merge_tokens.inner_merge": {
            "name": "inner_merge",
            "location": 43,
            "return": [],
            "arguments": {
                "old": [],
                "new": []
            }
        },
        "TextLine.key": {
            "name": "key",
            "location": 58,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextLine.content": {
            "name": "content",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextLine.of_iterable": {
            "name": "of_iterable",
            "location": 67,
            "return": [
                "TextLine"
            ],
            "arguments": {
                "line_number": [
                    "ebl.transliteration.domain.line_number.AbstractLineNumber"
                ],
                "content": [
                    "Iterable[ebl.transliteration.domain.tokens.Token]"
                ]
            }
        },
        "TextLine.atf": {
            "name": "atf",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextLine.lemmatization": {
            "name": "lemmatization",
            "location": 79,
            "return": [
                "tuple[LemmatizationToken]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextLine.update_lemmatization": {
            "name": "update_lemmatization",
            "location": 89,
            "return": [
                "extLine"
            ],
            "arguments": {
                "self": [
                    "_TTextLine"
                ],
                "lemmatization": [
                    "Sequence[ebl.lemmatization.domain.lemmatization.LemmatizationToken]"
                ]
            }
        },
        "TextLine.update_alignment": {
            "name": "update_alignment",
            "location": 97,
            "return": [
                "extLine"
            ],
            "arguments": {
                "self": [
                    "_TTextLine"
                ],
                "alignment": [
                    "Sequence[ebl.transliteration.domain.alignment.AlignmentToken]"
                ]
            }
        },
        "TextLine._update_tokens": {
            "name": "_update_tokens",
            "location": 103,
            "return": [
                "extLine"
            ],
            "arguments": {
                "self": [
                    "_TTextLine"
                ],
                "updates": [
                    "Sequence[T]"
                ],
                "updater": [
                    "Callable[([ebl.transliteration.domain.tokens.Token, T], ebl.transliteration.domain.tokens.Token)]"
                ],
                "error_class": [
                    "Type[Exception]"
                ]
            }
        },
        "TextLine.merge": {
            "name": "merge",
            "location": 113,
            "return": [
                "Union[(TextLine, L)]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "L"
                ]
            }
        },
        "TextLine.update_alignments": {
            "name": "update_alignments",
            "location": 123,
            "return": [
                "extLine"
            ],
            "arguments": {
                "self": [
                    "_TTextLine"
                ],
                "alignment_map": [
                    "Sequence[Optional[int]]"
                ]
            }
        },
        "TextLine.accept": {
            "name": "accept",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "ebl.transliteration.domain.tokens.TokenVisitor"
                ]
            }
        },
        "TextLine.update_lemmatization.updater": {
            "name": "updater",
            "location": 92,
            "return": [],
            "arguments": {
                "token": [],
                "lemmatization_token": []
            }
        },
        "TextLine.update_alignment.updater": {
            "name": "updater",
            "location": 98,
            "return": [],
            "arguments": {
                "token": [],
                "alignment_token": []
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/text_line_transformer.py": {
        "WordTransformer.ebl_atf_text_line__lone_determinative": {
            "name": "ebl_atf_text_line__lone_determinative",
            "location": 44,
            "return": [
                "ebl.transliteration.domain.word_tokens.Word"
            ],
            "arguments": {
                "self": [],
                "children": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "WordTransformer.ebl_atf_text_line__word": {
            "name": "ebl_atf_text_line__word",
            "location": 47,
            "return": [
                "ebl.transliteration.domain.word_tokens.Word"
            ],
            "arguments": {
                "self": [],
                "children": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "WordTransformer._create_word": {
            "name": "_create_word",
            "location": 51,
            "return": [
                "ebl.transliteration.domain.word_tokens.Word"
            ],
            "arguments": {
                "word_class": [
                    "Type[ebl.transliteration.domain.word_tokens.Word]"
                ],
                "children": [
                    "Sequence"
                ]
            }
        },
        "WordTransformer.ebl_atf_text_line__joiner": {
            "name": "ebl_atf_text_line__joiner",
            "location": 56,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "symbol": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "int"
                ]
            }
        },
        "WordTransformer.ebl_atf_text_line__in_word_newline": {
            "name": "ebl_atf_text_line__in_word_newline",
            "location": 60,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int"
                ]
            }
        },
        "WordTransformer.ebl_atf_text_line__variant": {
            "name": "ebl_atf_text_line__variant",
            "location": 63,
            "return": [
                "ebl.transliteration.domain.tokens.Variant"
            ],
            "arguments": {
                "self": [],
                "children": [
                    "int",
                    "Iterable[int]",
                    "bool"
                ]
            }
        },
        "WordTransformer.ebl_atf_text_line__inline_erasure": {
            "name": "ebl_atf_text_line__inline_erasure",
            "location": 68,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "erased": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "over_erased": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "NormalizedAkkadianTransformer.ebl_atf_text_line__text": {
            "name": "ebl_atf_text_line__text",
            "location": 73,
            "return": [
                "Sequence[ebl.transliteration.domain.tokens.Token]"
            ],
            "arguments": {
                "self": [],
                "children": [
                    "int",
                    "str",
                    "Sequence"
                ]
            }
        },
        "NormalizedAkkadianTransformer.ebl_atf_text_line__certain_caesura": {
            "name": "ebl_atf_text_line__certain_caesura",
            "location": 76,
            "return": [
                "ebl.transliteration.domain.normalized_akkadian.Caesura"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "int",
                    "bool",
                    "Iterable"
                ]
            }
        },
        "NormalizedAkkadianTransformer.ebl_atf_text_line__uncertain_caesura": {
            "name": "ebl_atf_text_line__uncertain_caesura",
            "location": 79,
            "return": [
                "ebl.transliteration.domain.normalized_akkadian.Caesura"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "int",
                    "bool",
                    "Iterable"
                ]
            }
        },
        "NormalizedAkkadianTransformer.ebl_atf_text_line__certain_foot_separator": {
            "name": "ebl_atf_text_line__certain_foot_separator",
            "location": 82,
            "return": [
                "ebl.transliteration.domain.normalized_akkadian.MetricalFootSeparator"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "int",
                    "bool",
                    "Iterable"
                ]
            }
        },
        "NormalizedAkkadianTransformer.ebl_atf_text_line__uncertain_foot_separator": {
            "name": "ebl_atf_text_line__uncertain_foot_separator",
            "location": 85,
            "return": [
                "ebl.transliteration.domain.normalized_akkadian.MetricalFootSeparator"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "int",
                    "bool",
                    "Iterable"
                ]
            }
        },
        "NormalizedAkkadianTransformer.ebl_atf_text_line__akkadian_word": {
            "name": "ebl_atf_text_line__akkadian_word",
            "location": 89,
            "return": [
                "List[str]",
                "Callable[[Union, Union], Tuple[Any, ...],]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "parts": [
                    "int",
                    "Type",
                    "Dict[str, Any]"
                ],
                "modifiers": [
                    "int",
                    "Type",
                    "Dict[str, Any]"
                ],
                "closing_enclosures": [
                    "int",
                    "Type",
                    "Dict[str, Any]"
                ]
            }
        },
        "NormalizedAkkadianTransformer.ebl_atf_text_line__normalized_modifiers": {
            "name": "ebl_atf_text_line__normalized_modifiers",
            "location": 96,
            "return": [
                "Sequence[atf.Flag]"
            ],
            "arguments": {
                "self": [],
                "modifiers": [
                    "Iterable[atf.Flag]"
                ]
            }
        },
        "NormalizedAkkadianTransformer.ebl_atf_text_line__normalized_modifier": {
            "name": "ebl_atf_text_line__normalized_modifier",
            "location": 102,
            "return": [
                "Flag",
                "str",
                "Type[Any]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "modifier": []
            }
        },
        "NormalizedAkkadianTransformer.ebl_atf_text_line__akkadian_string": {
            "name": "ebl_atf_text_line__akkadian_string",
            "location": 105,
            "return": [
                "ebl.transliteration.domain.tokens.ValueToken"
            ],
            "arguments": {
                "self": [],
                "children": [
                    "Iterable"
                ]
            }
        },
        "NormalizedAkkadianTransformer.ebl_atf_text_line__separator": {
            "name": "ebl_atf_text_line__separator",
            "location": 110,
            "return": [
                "ebl.transliteration.domain.tokens.Joiner"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "int",
                    "bool",
                    "Iterable"
                ]
            }
        },
        "NormalizedAkkadianTransformer.ebl_atf_text_line__open_emendation": {
            "name": "ebl_atf_text_line__open_emendation",
            "location": 113,
            "return": [
                "ebl.transliteration.domain.enclosure_tokens.Emendation"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "Exception",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "NormalizedAkkadianTransformer.ebl_atf_text_line__close_emendation": {
            "name": "ebl_atf_text_line__close_emendation",
            "location": 116,
            "return": [
                "ebl.transliteration.domain.enclosure_tokens.Emendation"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "int",
                    "bool",
                    "Iterable"
                ]
            }
        },
        "GreekTransformer.ebl_atf_text_line__greek_word": {
            "name": "ebl_atf_text_line__greek_word",
            "location": 121,
            "return": [
                "ebl.transliteration.domain.greek_tokens.GreekWord"
            ],
            "arguments": {
                "self": [],
                "children": [
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "GreekTransformer.ebl_atf_text_line__greek_letter": {
            "name": "ebl_atf_text_line__greek_letter",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "alphabet": [
                    "float",
                    "str",
                    "bytes"
                ],
                "flags": [
                    "float",
                    "str",
                    "bytes"
                ]
            }
        },
        "TextLineTransformer.text_line": {
            "name": "text_line",
            "location": 135,
            "return": [
                "type",
                "Type[T]",
                "Type"
            ],
            "arguments": {
                "self": [],
                "line_number": [
                    "str",
                    "int"
                ],
                "content": [
                    "str",
                    "int"
                ]
            }
        },
        "TextLineTransformer.ebl_atf_text_line__line_number_range": {
            "name": "ebl_atf_text_line__line_number_range",
            "location": 139,
            "return": [
                "float",
                "LineNumberRange"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "ebl.transliteration.domain.enclosure_tokens.BrokenAway",
                    "dict",
                    "ebl.transliteration.domain.enclosure_tokens.PerhapsBrokenAway"
                ],
                "end": [
                    "ebl.transliteration.domain.enclosure_tokens.BrokenAway",
                    "dict",
                    "ebl.transliteration.domain.enclosure_tokens.PerhapsBrokenAway"
                ]
            }
        },
        "TextLineTransformer.ebl_atf_text_line__single_line_number": {
            "name": "ebl_atf_text_line__single_line_number",
            "location": 143,
            "return": [
                "List[str]",
                "LineNumber"
            ],
            "arguments": {
                "self": [],
                "prefix_modifier": [
                    "int",
                    "Optional[int]"
                ],
                "number": [
                    "int",
                    "Optional[int]"
                ],
                "prime": [
                    "int",
                    "Optional[int]"
                ],
                "suffix_modifier": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "TextLineTransformer.ebl_atf_text_line__text": {
            "name": "ebl_atf_text_line__text",
            "location": 150,
            "return": [
                "Sequence[ebl.transliteration.domain.tokens.Token]"
            ],
            "arguments": {
                "self": [],
                "children": [
                    "int",
                    "bool",
                    "tuple",
                    "List[int]",
                    "Dict[str, Any]",
                    "str",
                    "float"
                ]
            }
        },
        "TextLineTransformer.ebl_atf_text_line__language_shift": {
            "name": "ebl_atf_text_line__language_shift",
            "location": 154,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "Collection[str]",
                    "Iterable[object]",
                    "Union[int, str]",
                    "bool"
                ]
            }
        },
        "TextLineTransformer.ebl_atf_text_line__normalized_akkadian_shift": {
            "name": "ebl_atf_text_line__normalized_akkadian_shift",
            "location": 158,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "Collection[str]",
                    "Iterable[object]",
                    "Union[int, str]",
                    "bool"
                ]
            }
        },
        "TextLineTransformer.ebl_atf_text_line__greek_shift": {
            "name": "ebl_atf_text_line__greek_shift",
            "location": 162,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "Collection[str]",
                    "Iterable[object]",
                    "Union[int, str]",
                    "bool"
                ]
            }
        },
        "TextLineTransformer.ebl_atf_text_line__tabulation": {
            "name": "ebl_atf_text_line__tabulation",
            "location": 166,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[Union[str, int]]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "TextLineTransformer.ebl_atf_text_line__commentary_protocol": {
            "name": "ebl_atf_text_line__commentary_protocol",
            "location": 170,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "Collection[str]",
                    "Iterable[object]",
                    "Union[int, str]",
                    "bool"
                ]
            }
        },
        "TextLineTransformer.ebl_atf_text_line__divider": {
            "name": "ebl_atf_text_line__divider",
            "location": 174,
            "return": [
                "Iterable[str]",
                "list",
                "Container[\"Taxon\"]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Callable[[T], None]",
                    "Union[int, str]",
                    "Dict[str, Any]",
                    "Optional['ModelOrDc']",
                    "bool",
                    "float",
                    "int",
                    "str"
                ],
                "modifiers": [
                    "Callable[[T], None]",
                    "Union[int, str]",
                    "Dict[str, Any]",
                    "Optional['ModelOrDc']",
                    "bool",
                    "float",
                    "int",
                    "str"
                ],
                "flags": [
                    "Callable[[T], None]",
                    "Union[int, str]",
                    "Dict[str, Any]",
                    "Optional['ModelOrDc']",
                    "bool",
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "TextLineTransformer.ebl_atf_text_line__line_break": {
            "name": "ebl_atf_text_line__line_break",
            "location": 177,
            "return": [
                "ebl.transliteration.domain.tokens.LineBreak"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "int"
                ]
            }
        },
        "TextLineTransformer.ebl_atf_text_line__column_token": {
            "name": "ebl_atf_text_line__column_token",
            "location": 181,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "TextLineTransformer.ebl_atf_text_line__divider_variant": {
            "name": "ebl_atf_text_line__divider_variant",
            "location": 185,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "str",
                    "ebl.transliteration.domain.enclosure_type.EnclosureType",
                    "pyspark.sql.Column"
                ],
                "second": [
                    "str",
                    "ebl.transliteration.domain.enclosure_type.EnclosureType",
                    "pyspark.sql.Column"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/tokens.py": {
        "TokenVisitor.visit": {
            "name": "visit",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "Token"
                ]
            }
        },
        "TokenVisitor.visit_word": {
            "name": "visit_word",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "TokenVisitor.visit_language_shift": {
            "name": "visit_language_shift",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "shift": []
            }
        },
        "TokenVisitor.visit_document_oriented_gloss": {
            "name": "visit_document_oriented_gloss",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gloss": []
            }
        },
        "TokenVisitor.visit_broken_away": {
            "name": "visit_broken_away",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "broken_away": []
            }
        },
        "TokenVisitor.visit_perhaps_broken_away": {
            "name": "visit_perhaps_broken_away",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "broken_away": []
            }
        },
        "TokenVisitor.visit_accidental_omission": {
            "name": "visit_accidental_omission",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "omission": []
            }
        },
        "TokenVisitor.visit_intentional_omission": {
            "name": "visit_intentional_omission",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "omission": []
            }
        },
        "TokenVisitor.visit_removal": {
            "name": "visit_removal",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "removal": []
            }
        },
        "TokenVisitor.visit_emendation": {
            "name": "visit_emendation",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "emendation": []
            }
        },
        "TokenVisitor.visit_erasure": {
            "name": "visit_erasure",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "erasure": []
            }
        },
        "TokenVisitor.visit_divider": {
            "name": "visit_divider",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "divider": []
            }
        },
        "TokenVisitor.visit_egyptian_metrical_feet_separator": {
            "name": "visit_egyptian_metrical_feet_separator",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "egyptian_metrical_feet_separator": []
            }
        },
        "TokenVisitor.visit_line_break": {
            "name": "visit_line_break",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line_break": []
            }
        },
        "TokenVisitor.visit_commentary_protocol": {
            "name": "visit_commentary_protocol",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "protocol": []
            }
        },
        "TokenVisitor.visit_variant": {
            "name": "visit_variant",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "variant": []
            }
        },
        "TokenVisitor.visit_gloss": {
            "name": "visit_gloss",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gloss": []
            }
        },
        "TokenVisitor.visit_named_sign": {
            "name": "visit_named_sign",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "named_sign": []
            }
        },
        "TokenVisitor.visit_number": {
            "name": "visit_number",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "number": []
            }
        },
        "TokenVisitor.visit_grapheme": {
            "name": "visit_grapheme",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grapheme": []
            }
        },
        "TokenVisitor.visit_compound_grapheme": {
            "name": "visit_compound_grapheme",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grapheme": []
            }
        },
        "TokenVisitor.visit_unknown_sign": {
            "name": "visit_unknown_sign",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sign": []
            }
        },
        "TokenVisitor.visit_akkadian_word": {
            "name": "visit_akkadian_word",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "TokenVisitor.visit_greek_word": {
            "name": "visit_greek_word",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "TokenVisitor.visit_metrical_foot_separator": {
            "name": "visit_metrical_foot_separator",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "separator": []
            }
        },
        "TokenVisitor.visit_caesura": {
            "name": "visit_caesura",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "caesura": []
            }
        },
        "Token.value": {
            "name": "value",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.parts": {
            "name": "parts",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.clean_value": {
            "name": "clean_value",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Token.lemmatizable": {
            "name": "lemmatizable",
            "location": 127,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.alignable": {
            "name": "alignable",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Token.get_key": {
            "name": "get_key",
            "location": 134,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.set_unique_lemma": {
            "name": "set_unique_lemma",
            "location": 140,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [
                    "T"
                ],
                "lemma": [
                    "ebl.lemmatization.domain.lemmatization.LemmatizationToken"
                ]
            }
        },
        "Token.update_alignment": {
            "name": "update_alignment",
            "location": 148,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [
                    "T"
                ],
                "alignment_map": []
            }
        },
        "Token.set_enclosure_type": {
            "name": "set_enclosure_type",
            "location": 151,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [
                    "T"
                ],
                "enclosure_type": [
                    "AbstractSet[ebl.transliteration.domain.enclosure_type.EnclosureType]"
                ]
            }
        },
        "Token.set_erasure": {
            "name": "set_erasure",
            "location": 154,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [
                    "T"
                ],
                "erasure": [
                    "ErasureState"
                ]
            }
        },
        "Token.merge": {
            "name": "merge",
            "location": 157,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "T"
                ]
            }
        },
        "Token.accept": {
            "name": "accept",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "TokenVisitor"
                ]
            }
        },
        "ValueToken.value": {
            "name": "value",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValueToken.parts": {
            "name": "parts",
            "location": 176,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValueToken.of": {
            "name": "of",
            "location": 180,
            "return": [
                "VT"
            ],
            "arguments": {
                "cls": [
                    "Type[VT]"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "LanguageShift.language": {
            "name": "language",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LanguageShift.normalized": {
            "name": "normalized",
            "location": 193,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LanguageShift.accept": {
            "name": "accept",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "TokenVisitor"
                ]
            }
        },
        "LanguageShift.normalized_akkadian": {
            "name": "normalized_akkadian",
            "location": 200,
            "return": [
                "ValueToken"
            ],
            "arguments": {}
        },
        "UnknownNumberOfSigns.value": {
            "name": "value",
            "location": 207,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnknownNumberOfSigns.parts": {
            "name": "parts",
            "location": 211,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnknownNumberOfSigns.of": {
            "name": "of",
            "location": 215,
            "return": [
                "UnknownNumberOfSigns"
            ],
            "arguments": {}
        },
        "Tabulation.value": {
            "name": "value",
            "location": 222,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tabulation.parts": {
            "name": "parts",
            "location": 226,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tabulation.of": {
            "name": "of",
            "location": 230,
            "return": [
                "Tabulation"
            ],
            "arguments": {}
        },
        "CommentaryProtocol.protocol": {
            "name": "protocol",
            "location": 237,
            "return": [
                "CommentaryProtocol"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommentaryProtocol.accept": {
            "name": "accept",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "TokenVisitor"
                ]
            }
        },
        "Column.of": {
            "name": "of",
            "location": 249,
            "return": [
                "Column"
            ],
            "arguments": {
                "number": [
                    "Optional[int]"
                ]
            }
        },
        "Column._check_number": {
            "name": "_check_number",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [],
                "value": []
            }
        },
        "Column.value": {
            "name": "value",
            "location": 258,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Column.parts": {
            "name": "parts",
            "location": 262,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variant.of": {
            "name": "of",
            "location": 271,
            "return": [
                "Variant"
            ],
            "arguments": {}
        },
        "Variant.value": {
            "name": "value",
            "location": 275,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Variant.clean_value": {
            "name": "clean_value",
            "location": 279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Variant.parts": {
            "name": "parts",
            "location": 283,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Variant.accept": {
            "name": "accept",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "TokenVisitor"
                ]
            }
        },
        "Joiner.value": {
            "name": "value",
            "location": 295,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Joiner.parts": {
            "name": "parts",
            "location": 299,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Joiner.dot": {
            "name": "dot",
            "location": 303,
            "return": [
                "Joiner"
            ],
            "arguments": {}
        },
        "Joiner.hyphen": {
            "name": "hyphen",
            "location": 307,
            "return": [
                "Joiner"
            ],
            "arguments": {}
        },
        "Joiner.colon": {
            "name": "colon",
            "location": 311,
            "return": [
                "Joiner"
            ],
            "arguments": {}
        },
        "Joiner.plus": {
            "name": "plus",
            "location": 315,
            "return": [
                "Joiner"
            ],
            "arguments": {}
        },
        "Joiner.of": {
            "name": "of",
            "location": 319,
            "return": [
                "Joiner"
            ],
            "arguments": {
                "joiner": [
                    "atf.Joiner"
                ]
            }
        },
        "LineBreak.value": {
            "name": "value",
            "location": 326,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LineBreak.parts": {
            "name": "parts",
            "location": 330,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineBreak.accept": {
            "name": "accept",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "TokenVisitor"
                ]
            }
        },
        "LineBreak.of": {
            "name": "of",
            "location": 337,
            "return": [
                "LineBreak"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/transliteration/domain/translation_line.py": {
        "Extent.column": {
            "name": "column",
            "location": 23,
            "return": [
                "str",
                "bool",
                "list",
                "List[str]",
                "List[Dict]",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Extent.surface": {
            "name": "surface",
            "location": 29,
            "return": [
                "List[str]",
                "bool",
                "Tuple[int]",
                "tuple",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Extent.__str__": {
            "name": "__str__",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TranslationLine.translation": {
            "name": "translation",
            "location": 50,
            "return": [
                "str",
                "int",
                "List[str]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TranslationLine.prefix": {
            "name": "prefix",
            "location": 54,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TranslationLine.atf": {
            "name": "atf",
            "location": 59,
            "return": [
                "Atf",
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "TranslationLine.lemmatization": {
            "name": "lemmatization",
            "location": 63,
            "return": [
                "tuple[LemmatizationToken]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/translation_line_transformer.py": {
        "TranslationLineTransformer.translation_line": {
            "name": "translation_line",
            "location": 11,
            "return": [
                "bool",
                "TranslationLine"
            ],
            "arguments": {
                "self": [],
                "language": [
                    "str"
                ],
                "extent": [
                    "str"
                ]
            }
        },
        "TranslationLineTransformer.ebl_atf_text_line__translation_extent": {
            "name": "ebl_atf_text_line__translation_extent",
            "location": 19,
            "return": [
                "Extent",
                "bool",
                "Tuple[float, float, float]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "str",
                    "bool",
                    "List[int]",
                    "float",
                    "Set[int]"
                ],
                "line_number": [
                    "str",
                    "bool",
                    "List[int]",
                    "float",
                    "Set[int]"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/transliteration_error.py": {
        "TransliterationError.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "errors": [
                    "str",
                    "bool",
                    "float",
                    "int",
                    "Callable"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/transliteration_query.py": {
        "create_sign_regexp": {
            "name": "create_sign_regexp",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "sign": []
            }
        },
        "create_line_regexp": {
            "name": "create_line_regexp",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "line": [
                    "str",
                    "IO[str]"
                ]
            }
        },
        "get_line_number": {
            "name": "get_line_number",
            "location": 17,
            "return": [
                "int"
            ],
            "arguments": {
                "signs": [
                    "str"
                ],
                "position": [
                    "int"
                ]
            }
        },
        "TransliterationQuery.regexp": {
            "name": "regexp",
            "location": 26,
            "return": [
                "typing.Text",
                "float",
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransliterationQuery.is_empty": {
            "name": "is_empty",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransliterationQuery.match": {
            "name": "match",
            "location": 36,
            "return": [
                "Sequence[Tuple[(int, int)]]"
            ],
            "arguments": {
                "self": [],
                "signs": [
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/unknown_sign_tokens.py": {
        "UnknownSign.clean_value": {
            "name": "clean_value",
            "location": 20,
            "return": [
                "int",
                "str",
                "Tuple[int, int]",
                "Tuple[str, int]",
                "T",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnknownSign.of": {
            "name": "of",
            "location": 24,
            "return": [
                "T"
            ],
            "arguments": {
                "cls": [
                    "Type[T]"
                ],
                "flags": [
                    "Sequence[atf.Flag]"
                ]
            }
        },
        "UnknownSign.parts": {
            "name": "parts",
            "location": 28,
            "return": [
                "tuple",
                "str",
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnknownSign._sign": {
            "name": "_sign",
            "location": 33,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnknownSign.string_flags": {
            "name": "string_flags",
            "location": 37,
            "return": [
                "list",
                "List[str]",
                "Set[str]",
                "str",
                "Dict[str, str]",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnknownSign.value": {
            "name": "value",
            "location": 41,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnknownSign.accept": {
            "name": "accept",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "ebl.transliteration.domain.tokens.TokenVisitor"
                ]
            }
        },
        "UnidentifiedSign._sign": {
            "name": "_sign",
            "location": 51,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnclearSign._sign": {
            "name": "_sign",
            "location": 58,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ebl-api-master/ebl/transliteration/domain/word_tokens.py": {
        "AbstractWord.language": {
            "name": "language",
            "location": 30,
            "return": [
                "ebl.transliteration.domain.language.Language",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractWord.normalized": {
            "name": "normalized",
            "location": 35,
            "return": [
                "builtins.bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractWord.parts": {
            "name": "parts",
            "location": 39,
            "return": [
                "list",
                "str",
                "List[List[str]]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractWord.clean_value": {
            "name": "clean_value",
            "location": 43,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]",
                "tuple",
                "List[str]",
                "float",
                "bool",
                "int",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractWord.has_variant": {
            "name": "has_variant",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractWord.lemmatizable": {
            "name": "lemmatizable",
            "location": 55,
            "return": [
                "bool",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractWord.set_unique_lemma": {
            "name": "set_unique_lemma",
            "location": 68,
            "return": [
                "A"
            ],
            "arguments": {
                "self": [
                    "A"
                ],
                "lemma": [
                    "ebl.lemmatization.domain.lemmatization.LemmatizationToken"
                ]
            }
        },
        "AbstractWord.set_alignment": {
            "name": "set_alignment",
            "location": 76,
            "return": [
                "A"
            ],
            "arguments": {
                "self": [
                    "A"
                ],
                "alignment": [
                    "Optional[int]"
                ],
                "variant": [
                    "Optional[AbstractWord]"
                ]
            }
        },
        "AbstractWord.set_has_variant_alignment": {
            "name": "set_has_variant_alignment",
            "location": 81,
            "return": [
                "A"
            ],
            "arguments": {
                "self": [
                    "A"
                ],
                "has_variant_alignment": [
                    "float",
                    "str",
                    "bool",
                    "Optional[Any]"
                ]
            }
        },
        "AbstractWord.update_alignment": {
            "name": "update_alignment",
            "location": 84,
            "return": [
                "A"
            ],
            "arguments": {
                "self": [
                    "A"
                ],
                "alignment_map": [
                    "int",
                    "List[str]",
                    "dict",
                    "Type"
                ]
            }
        },
        "AbstractWord.merge": {
            "name": "merge",
            "location": 97,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "T"
                ]
            }
        },
        "AbstractWord._merge_word": {
            "name": "_merge_word",
            "location": 103,
            "return": [
                "A"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "A"
                ]
            }
        },
        "AbstractWord._is_compatible": {
            "name": "_is_compatible",
            "location": 116,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "ebl.transliteration.domain.tokens.Token"
                ]
            }
        },
        "Word.of": {
            "name": "of",
            "location": 131,
            "return": [
                "W"
            ],
            "arguments": {
                "cls": [
                    "Type[W]"
                ],
                "parts": [
                    "Sequence[ebl.transliteration.domain.tokens.Token]"
                ],
                "language": [
                    "ebl.transliteration.domain.language.Language"
                ],
                "unique_lemma": [
                    "Sequence[ebl.dictionary.domain.word.WordId]"
                ],
                "erasure": [
                    "ebl.transliteration.domain.tokens.ErasureState"
                ],
                "alignment": [
                    "Optional[int]"
                ],
                "variant": [
                    "Optional[AbstractWord]"
                ],
                "has_variant_alignment": [
                    "bool"
                ]
            }
        },
        "Word.language": {
            "name": "language",
            "location": 153,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word.normalized": {
            "name": "normalized",
            "location": 157,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word.value": {
            "name": "value",
            "location": 161,
            "return": [
                "str",
                "int",
                "Tuple[int, int]",
                "Optional[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word.set_language": {
            "name": "set_language",
            "location": 164,
            "return": [
                "Word"
            ],
            "arguments": {
                "self": [
                    "_TWord"
                ],
                "language": [
                    "ebl.transliteration.domain.language.Language"
                ]
            }
        },
        "Word.accept": {
            "name": "accept",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "ebl.transliteration.domain.tokens.TokenVisitor"
                ]
            }
        },
        "LoneDeterminative.of_value": {
            "name": "of_value",
            "location": 174,
            "return": [
                "LoneDeterminative"
            ],
            "arguments": {
                "parts": [
                    "str",
                    "Iterable[int]"
                ],
                "erasure": [
                    "ebl.transliteration.domain.tokens.ErasureState"
                ]
            }
        },
        "LoneDeterminative.lemmatizable": {
            "name": "lemmatizable",
            "location": 180,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "InWordNewline.value": {
            "name": "value",
            "location": 187,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "InWordNewline.parts": {
            "name": "parts",
            "location": 191,
            "return": [
                "tuple",
                "str",
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "InWordNewline.of": {
            "name": "of",
            "location": 195,
            "return": [
                "InWordNewline"
            ],
            "arguments": {}
        }
    },
    "ebl-api-master/ebl/transliteration/domain/__init__.py": {},
    "ebl-api-master/ebl/transliteration/infrastructure/collections.py": {},
    "ebl-api-master/ebl/transliteration/infrastructure/mongo_parallel_repository.py": {
        "MongoParallelRepository.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "MongoParallelRepository.fragment_exists": {
            "name": "fragment_exists",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "museum_number": [
                    "ebl.transliteration.domain.museum_number.MuseumNumber"
                ]
            }
        },
        "MongoParallelRepository.find_implicit_chapter": {
            "name": "find_implicit_chapter",
            "location": 32,
            "return": [
                "ebl.transliteration.domain.parallel_line.ChapterName"
            ],
            "arguments": {
                "self": [],
                "text_id": [
                    "ebl.transliteration.domain.text_id.TextId"
                ]
            }
        },
        "MongoParallelRepository.chapter_exists": {
            "name": "chapter_exists",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "text_id": [
                    "ebl.transliteration.domain.text_id.TextId"
                ],
                "chapter_name": [
                    "ebl.transliteration.domain.parallel_line.ChapterName"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/infrastructure/queries.py": {
        "museum_number_is": {
            "name": "museum_number_is",
            "location": 5,
            "return": [
                "dict"
            ],
            "arguments": {
                "number": [
                    "ebl.transliteration.domain.museum_number.MuseumNumber"
                ]
            }
        }
    },
    "ebl-api-master/ebl/transliteration/infrastructure/__init__.py": {},
    "ebl-api-master/ebl/users/__init__.py": {},
    "ebl-api-master/ebl/users/domain/user.py": {
        "User.profile": {
            "name": "profile",
            "location": 7,
            "return": [
                "builtins.dict",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.ebl_name": {
            "name": "ebl_name",
            "location": 12,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.has_scope": {
            "name": "has_scope",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "str"
                ]
            }
        },
        "User.can_read_folio": {
            "name": "can_read_folio",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Guest.profile": {
            "name": "profile",
            "location": 25,
            "return": [
                "str",
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Guest.ebl_name": {
            "name": "ebl_name",
            "location": 29,
            "return": [
                "typing.Text",
                "str",
                "int",
                "Dict[str, Any]",
                "Container[str]",
                "bool",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiUser.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "script_name": [
                    "str"
                ]
            }
        },
        "ApiUser.profile": {
            "name": "profile",
            "location": 38,
            "return": [
                "dict[typing.Text, ]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiUser.ebl_name": {
            "name": "ebl_name",
            "location": 42,
            "return": [
                "typing.Text",
                "str",
                "int",
                "Dict[str, Any]",
                "Container[str]",
                "bool",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtfImporterUser.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "AtfImporterUser.profile": {
            "name": "profile",
            "location": 51,
            "return": [
                "dict[typing.Text, ]",
                "bool",
                "str",
                "Type",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtfImporterUser.ebl_name": {
            "name": "ebl_name",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ebl-api-master/ebl/users/domain/__init__.py": {},
    "ebl-api-master/ebl/users/infrastructure/auth0.py": {
        "fetch_user_profile": {
            "name": "fetch_user_profile",
            "location": 11,
            "return": [
                "Dict[str, Union[int, str]]",
                "Optional[Dict[str, Any]]",
                "bytes",
                "Optional[Dict[str, str]]",
                "dict",
                "str"
            ],
            "arguments": {
                "issuer": [
                    "str"
                ],
                "authorization": [
                    "str"
                ]
            }
        },
        "Auth0User.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "access_token": [
                    "dict"
                ],
                "profile_factory": [
                    "Callable[([], Any)]"
                ]
            }
        },
        "Auth0User.profile": {
            "name": "profile",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Auth0User.ebl_name": {
            "name": "ebl_name",
            "location": 29,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Auth0User.has_scope": {
            "name": "has_scope",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Auth0Backend.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "public_key": [
                    "str",
                    "medtagger.database.models.User",
                    "bool",
                    "bytes"
                ],
                "audience": [
                    "str",
                    "medtagger.database.models.User",
                    "bool",
                    "bytes"
                ],
                "issuer": [
                    "str",
                    "medtagger.database.models.User",
                    "bool",
                    "bytes"
                ],
                "set_user": [
                    "str",
                    "int"
                ]
            }
        },
        "Auth0Backend.authenticate": {
            "name": "authenticate",
            "location": 51,
            "return": [
                "Auth0User"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "daylighdb.models.User",
                    "str"
                ],
                "resp": [
                    "dict",
                    "Type[T]",
                    "bytes",
                    "Callable[[], None]",
                    "requests.Response"
                ],
                "resource": [
                    "dict",
                    "Type[T]",
                    "bytes",
                    "Callable[[], None]",
                    "requests.Response"
                ]
            }
        }
    },
    "ebl-api-master/ebl/users/infrastructure/__init__.py": {},
    "ebl-api-master/ebl/users/web/require_scope.py": {
        "require_scope": {
            "name": "require_scope",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "req": [
                    "falcon.Request",
                    "Dict[str, Any]"
                ],
                "_resp": [
                    "list",
                    "List[Tuple[str, references.domain.Reference]]",
                    "bool"
                ],
                "_resource": [
                    "list",
                    "List[Tuple[str, references.domain.Reference]]",
                    "bool"
                ],
                "_params": [
                    "list",
                    "List[Tuple[str, references.domain.Reference]]",
                    "bool"
                ],
                "scope": [
                    "str"
                ]
            }
        }
    },
    "ebl-api-master/ebl/users/web/__init__.py": {}
}
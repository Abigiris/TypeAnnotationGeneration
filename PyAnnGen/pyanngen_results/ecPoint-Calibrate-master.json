{
    "ecPoint-Calibrate-master/core/api.py": {
        "handle_error": {
            "name": "handle_error",
            "location": 34,
            "return": [
                "str",
                "Tuple[Union[str,list[str],list]]"
            ],
            "arguments": {
                "e": [
                    "Exception",
                    "raiden.utils.BlockIdentifier"
                ]
            }
        },
        "start_computation": {
            "name": "start_computation",
            "location": 45,
            "return": [
                "Response",
                "bytes",
                "Dict",
                "Optional[Dict[str,Any]]"
            ],
            "arguments": {}
        },
        "get_computation_status": {
            "name": "get_computation_status",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "get_predictors": {
            "name": "get_predictors",
            "location": 64,
            "return": [
                "Response",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {}
        },
        "get_obs_metadata": {
            "name": "get_obs_metadata",
            "location": 82,
            "return": [
                "Response",
                "int",
                "List[str]",
                "Dict[str,str]"
            ],
            "arguments": {}
        },
        "get_pdt_statistics": {
            "name": "get_pdt_statistics",
            "location": 97,
            "return": [
                "Response",
                "bool",
                "int",
                "core.types.FBAccessToken",
                "core.models.User",
                "bytes",
                "Dict[str,str]",
                "List[str]"
            ],
            "arguments": {}
        },
        "get_pdt_metadata": {
            "name": "get_pdt_metadata",
            "location": 106,
            "return": [
                "Response",
                "int",
                "List[str]",
                "Dict[str,str]"
            ],
            "arguments": {}
        },
        "create_weather_types_matrix": {
            "name": "create_weather_types_matrix",
            "location": 116,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "get_wt_codes": {
            "name": "get_wt_codes",
            "location": 137,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_decision_tree": {
            "name": "get_decision_tree",
            "location": 157,
            "return": [
                "list",
                "bool",
                "qutebrowser.utils.usertypes.Backend"
            ],
            "arguments": {}
        },
        "get_wt_histogram": {
            "name": "get_wt_histogram",
            "location": 176,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "save_wt_histograms": {
            "name": "save_wt_histograms",
            "location": 210,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "django.db.models.query.QuerySet",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "get_error_rep": {
            "name": "get_error_rep",
            "location": 258,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "save_operation": {
            "name": "save_operation",
            "location": 283,
            "return": [
                "Response",
                "int",
                "List[str]",
                "Optional[str]",
                "Dict",
                "Dict[str,str]",
                "bytes"
            ],
            "arguments": {}
        },
        "get_predictor_units": {
            "name": "get_predictor_units",
            "location": 453,
            "return": [
                "Response",
                "int",
                "List[str]",
                "Dict[str,str]"
            ],
            "arguments": {}
        },
        "get_breakpoints_suggestions": {
            "name": "get_breakpoints_suggestions",
            "location": 462,
            "return": [
                "int",
                "List[str]",
                "bool",
                "Dict[str, Any]",
                "str",
                "dict",
                "Response",
                "raiden.utils.List[str]"
            ],
            "arguments": {}
        },
        "get_obs_frequency": {
            "name": "get_obs_frequency",
            "location": 528,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "get_metadata": {
            "name": "get_metadata",
            "location": 558,
            "return": [
                "Text",
                "bool",
                "Dict[Text,]",
                "str",
                "int"
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[pathlib.Path]",
                    "Union[str,pathlib.Path]",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 570,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ecPoint-Calibrate-master/core/models.py": {
        "Predictand.is_accumulated": {
            "name": "is_accumulated",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.from_dict": {
            "name": "from_dict",
            "location": 109,
            "return": [
                "Config"
            ],
            "arguments": {
                "cls": [
                    "Type[_TConfig]"
                ],
                "data": [
                    "dict",
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "Sequence[object]"
                ]
            }
        }
    },
    "ecPoint-Calibrate-master/core/smoke.py": {},
    "ecPoint-Calibrate-master/core/utils.py": {
        "tolist": {
            "name": "tolist",
            "location": 9,
            "return": [
                "Callable"
            ],
            "arguments": {
                "gen": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "int_or_float": {
            "name": "int_or_float",
            "location": 18,
            "return": [
                "Union[(int, _T0)]"
            ],
            "arguments": {
                "value": [
                    "float",
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "sanitize_path": {
            "name": "sanitize_path",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[str]",
                    "Union[str, os.PathLike]"
                ]
            }
        },
        "format_date": {
            "name": "format_date",
            "location": 37,
            "return": [
                "datetime.date"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "wrap_title": {
            "name": "wrap_title",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "title": [
                    "int",
                    "Sequence[T]"
                ],
                "chunk_size": [
                    "int",
                    "Sequence[T]"
                ]
            }
        },
        "tolist.patched": {
            "name": "patched",
            "location": 12,
            "return": [
                "str",
                "List[Dict]",
                "List[str]",
                "Union[List, Tuple]",
                "numpy.array",
                "Optional[List[str]]"
            ],
            "arguments": {}
        }
    },
    "ecPoint-Calibrate-master/core/__init__.py": {},
    "ecPoint-Calibrate-master/core/computations/models.py": {
        "Computer.run": {
            "name": "run",
            "location": 40,
            "return": [
                "float",
                "int",
                "str",
                "List[object]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ecPoint-Calibrate-master/core/computations/utils.py": {
        "compute_accumulated_field": {
            "name": "compute_accumulated_field",
            "location": 7,
            "return": [
                "Mapping[str, Sequence[str]]",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "compute_24h_solar_radiation": {
            "name": "compute_24h_solar_radiation",
            "location": 11,
            "return": [
                "float",
                "List[Dict[str,Any]]",
                "Callable"
            ],
            "arguments": {}
        },
        "compute_weighted_average_field": {
            "name": "compute_weighted_average_field",
            "location": 15,
            "return": [
                "int",
                "float"
            ],
            "arguments": {}
        },
        "compute_average_field": {
            "name": "compute_average_field",
            "location": 31,
            "return": [
                "int",
                "bool",
                "List[str]"
            ],
            "arguments": {}
        },
        "compute_vector": {
            "name": "compute_vector",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "compute_maximum": {
            "name": "compute_maximum",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "compute_minimum": {
            "name": "compute_minimum",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "compute_ratio_field": {
            "name": "compute_ratio_field",
            "location": 47,
            "return": [
                "float",
                "Optional[List[str]]",
                "str",
                "Union[int,float]"
            ],
            "arguments": {
                "dividend": [
                    "int",
                    "Optional[List[str]]",
                    "float",
                    "str",
                    "Union[int,float]"
                ],
                "divisor": [
                    "int",
                    "Optional[List[str]]",
                    "float",
                    "str",
                    "Union[int,float]"
                ]
            }
        },
        "compute_instantaneous_field_100": {
            "name": "compute_instantaneous_field_100",
            "location": 51,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "str",
                "List[str]",
                "set"
            ],
            "arguments": {}
        },
        "compute_instantaneous_field_001": {
            "name": "compute_instantaneous_field_001",
            "location": 55,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "str",
                "List[str]",
                "set"
            ],
            "arguments": {}
        },
        "compute_instantaneous_field_010": {
            "name": "compute_instantaneous_field_010",
            "location": 59,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "compute_local_solar_time": {
            "name": "compute_local_solar_time",
            "location": 63,
            "return": [
                "float",
                "int",
                "Optional[str]",
                "IO",
                "bytes",
                "List[str]"
            ],
            "arguments": {
                "longitudes": [
                    "int",
                    "Optional[str]",
                    "IO",
                    "bytes",
                    "List[str]"
                ],
                "hour": [
                    "int",
                    "Optional[str]",
                    "IO",
                    "bytes",
                    "List[str]"
                ]
            }
        }
    },
    "ecPoint-Calibrate-master/core/computations/__init__.py": {},
    "ecPoint-Calibrate-master/core/loaders/ascii.py": {
        "ASCIIEncoder.add_header": {
            "name": "add_header",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "header": [
                    "str",
                    "Dict",
                    "int",
                    "Dict[str,str]"
                ]
            }
        },
        "ASCIIEncoder.add_footer": {
            "name": "add_footer",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "footer": [
                    "str",
                    "IO",
                    "TextIO"
                ]
            }
        },
        "ASCIIEncoder.add_columns_chunk": {
            "name": "add_columns_chunk",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "columns": [
                    "Dict",
                    "str",
                    "List[str]",
                    "boucanpy.core.api_token.ApiTokenRepo",
                    "boucanpy.core.SortQS"
                ]
            }
        },
        "ASCIIDecoder._reader": {
            "name": "_reader",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ASCIIDecoder.dataframe": {
            "name": "dataframe",
            "location": 58,
            "return": [
                "int",
                "Set",
                "Callable",
                "str",
                "Generator[Union[dict,None,None]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ASCIIDecoder.columns": {
            "name": "columns",
            "location": 65,
            "return": [
                "int",
                "List[int]",
                "Optional[List[str]]",
                "List[str]",
                "List",
                "bool",
                "List[List[int]]",
                "Tuple[int,int]",
                "List[Tuple[int,int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ASCIIDecoder.metadata": {
            "name": "metadata",
            "location": 73,
            "return": [
                "Dict[Text,str]",
                "Dict",
                "bytes",
                "int",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ASCIIDecoder.select": {
            "name": "select",
            "location": 83,
            "return": [
                "bool",
                "pandas.DataFrame",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ASCIIDecoder.clone": {
            "name": "clone",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ASCIIDecoder.__iter__": {
            "name": "__iter__",
            "location": 98,
            "return": [
                "ASCIIDecoder"
            ],
            "arguments": {
                "self": [
                    "_TASCIIDecoder@@ASCIIDecoder@@"
                ]
            }
        },
        "ASCIIDecoder.__next__": {
            "name": "__next__",
            "location": 102,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ecPoint-Calibrate-master/core/loaders/fieldset.py": {
        "Fieldset.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "bool",
                    "Iterable[str]",
                    "str",
                    "pathlib.PurePath",
                    "apistar.http.Path"
                ]
            }
        },
        "Fieldset.units": {
            "name": "units",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fieldset.name": {
            "name": "name",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fieldset.from_path": {
            "name": "from_path",
            "location": 26,
            "return": [
                "str",
                "pathlib.Path",
                "int",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "bool"
                ],
                "path": [
                    "str",
                    "pathlib.Path",
                    "Union[str,os.PathLike]"
                ]
            }
        },
        "Fieldset.dataframe": {
            "name": "dataframe",
            "location": 38,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fieldset.nearest_gridpoint": {
            "name": "nearest_gridpoint",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "geopoints": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Fieldset.values": {
            "name": "values",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "values": [
                    "bytes",
                    "str",
                    "int",
                    "list",
                    "float"
                ]
            }
        },
        "Fieldset.vector_of": {
            "name": "vector_of",
            "location": 77,
            "return": [
                "Iterable[T]",
                "str",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "cls": [
                    "Pattern",
                    "int",
                    "str"
                ]
            }
        },
        "Fieldset.max_of": {
            "name": "max_of",
            "location": 99,
            "return": [
                "Iterable[T]",
                "str",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "cls": [
                    "Pattern",
                    "int",
                    "str"
                ]
            }
        },
        "Fieldset.min_of": {
            "name": "min_of",
            "location": 113,
            "return": [
                "Iterable[T]",
                "str",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "cls": [
                    "Pattern",
                    "int",
                    "str"
                ]
            }
        },
        "Fieldset.__add__": {
            "name": "__add__",
            "location": 126,
            "return": [
                "int",
                "Optional[str]",
                "Set",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict",
                    "Set",
                    "Dict[str,Any]",
                    "Mapping[qcodes.datasedescriptions.param_spec.ParamSpec.Base,numpy.ndarray]",
                    "Mapping"
                ]
            }
        },
        "Fieldset.__sub__": {
            "name": "__sub__",
            "location": 131,
            "return": [
                "bool",
                "int",
                "Dict",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[complex,float,int]",
                    "complex",
                    "float",
                    "int"
                ]
            }
        },
        "Fieldset.__mul__": {
            "name": "__mul__",
            "location": 136,
            "return": [
                "bool",
                "int",
                "Dict",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[complex,float,int]",
                    "complex",
                    "float",
                    "int"
                ]
            }
        },
        "Fieldset.__truediv__": {
            "name": "__truediv__",
            "location": 141,
            "return": [
                "bool",
                "int",
                "Dict",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[complex,float,int]",
                    "complex",
                    "float",
                    "int"
                ]
            }
        },
        "Fieldset.__pow__": {
            "name": "__pow__",
            "location": 146,
            "return": [
                "bool",
                "int",
                "Dict",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[complex,float,int]",
                    "complex",
                    "float",
                    "int"
                ]
            }
        },
        "NetCDF.__init__": {
            "name": "__init__",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "NetCDF.from_path": {
            "name": "from_path",
            "location": 170,
            "return": [
                "NetCDF"
            ],
            "arguments": {
                "cls": [
                    "Type[_TNetCDF]"
                ],
                "path": [
                    "str",
                    "pathlib.Path",
                    "Union[str,pathlib.Path]",
                    "pathlib.PurePath"
                ]
            }
        },
        "NetCDF.__mul__": {
            "name": "__mul__",
            "location": 192,
            "return": [
                "NetCDF"
            ],
            "arguments": {
                "self": [
                    "_TNetCDF@@NetCDF@@"
                ],
                "other": []
            }
        },
        "NetCDF.__add__": {
            "name": "__add__",
            "location": 199,
            "return": [
                "NetCDF"
            ],
            "arguments": {
                "self": [
                    "_TNetCDF@@NetCDF@@"
                ],
                "other": [
                    "int"
                ]
            }
        },
        "NetCDF.__sub__": {
            "name": "__sub__",
            "location": 206,
            "return": [
                "NetCDF"
            ],
            "arguments": {
                "self": [
                    "_TNetCDF@@NetCDF@@"
                ],
                "other": []
            }
        },
        "NetCDF.__truediv__": {
            "name": "__truediv__",
            "location": 213,
            "return": [
                "NetCDF"
            ],
            "arguments": {
                "self": [
                    "_TNetCDF@@NetCDF@@"
                ],
                "other": []
            }
        },
        "NetCDF.__pow__": {
            "name": "__pow__",
            "location": 220,
            "return": [
                "NetCDF"
            ],
            "arguments": {
                "self": [
                    "_TNetCDF@@NetCDF@@"
                ],
                "power": [
                    "bool",
                    "str",
                    "float",
                    "Sequence[int]",
                    "int"
                ],
                "modulo": [
                    "int",
                    "None",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "ecPoint-Calibrate-master/core/loaders/geopoints.py": {
        "read": {
            "name": "read",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "path.Path",
                    "str"
                ]
            }
        },
        "get_values": {
            "name": "get_values",
            "location": 15,
            "return": [
                "int",
                "tuple",
                "str",
                "Union[int, Tuple[int, ...]]"
            ],
            "arguments": {
                "geopoints": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "int"
                ]
            }
        },
        "read_units": {
            "name": "read_units",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        }
    },
    "ecPoint-Calibrate-master/core/loaders/parquet.py": {
        "ParquetPointDataTableWriter.metadata": {
            "name": "metadata",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParquetPointDataTableWriter.add_metadata": {
            "name": "add_metadata",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "T"
                ],
                "value": [
                    "str",
                    "T"
                ]
            }
        },
        "ParquetPointDataTableWriter._cast_dataframe": {
            "name": "_cast_dataframe",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "df": [
                    "Optional[numpy.ndarray]"
                ]
            }
        },
        "ParquetPointDataTableWriter.append": {
            "name": "append",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ParquetPointDataTableWriter.close": {
            "name": "close",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParquetPointDataTableWriter.add_columns_chunk": {
            "name": "add_columns_chunk",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "columns": [
                    "Dict",
                    "str",
                    "List[str]",
                    "boucanpy.core.api_token.ApiTokenRepo",
                    "boucanpy.core.SortQS"
                ]
            }
        },
        "ParquetPointDataTableWriter.add_header": {
            "name": "add_header",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "header": [
                    "bool",
                    "Dict[str,Any]",
                    "str",
                    "int",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "ParquetPointDataTableWriter.add_footer": {
            "name": "add_footer",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "footer": [
                    "int",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "ParquetPointDataTableReader.columns": {
            "name": "columns",
            "location": 100,
            "return": [
                "int",
                "List[bool]",
                "Optional[List[str]]",
                "Dict[str,list[str]]",
                "bool",
                "Set[str]",
                "List[List[int]]",
                "List",
                "Tuple[int,int]",
                "List[Tuple[int,int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParquetPointDataTableReader.dataframe": {
            "name": "dataframe",
            "location": 111,
            "return": [
                "int",
                "Callable",
                "Dict[int,Any]",
                "str",
                "Tuple[Union[Any,Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParquetPointDataTableReader.metadata": {
            "name": "metadata",
            "location": 120,
            "return": [
                "int",
                "Callable",
                "Pattern",
                "str",
                "List",
                "Dict[str,str]",
                "DefaultDict",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParquetPointDataTableReader.select": {
            "name": "select",
            "location": 129,
            "return": [
                "bool",
                "pandas.DataFrame",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParquetPointDataTableReader.clone": {
            "name": "clone",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParquetPointDataTableReader.__iter__": {
            "name": "__iter__",
            "location": 146,
            "return": [
                "ParquetPointDataTableReader"
            ],
            "arguments": {
                "self": [
                    "_TParquetPointDataTableReader@@ParquetPointDataTableReader@@"
                ]
            }
        },
        "ParquetPointDataTableReader.__next__": {
            "name": "__next__",
            "location": 150,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ecPoint-Calibrate-master/core/loaders/__init__.py": {
        "load_point_data_by_path": {
            "name": "load_point_data_by_path",
            "location": 116,
            "return": [
                "Union[(core.loaders.ascii.ASCIIDecoder, core.loaders.parquet.ParquetPointDataTableReader)]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path",
                    "List",
                    "List[int]",
                    "pathlib.PurePosixPath"
                ],
                "cheaper": [
                    "bool",
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "ErrorType.bias": {
            "name": "bias",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "Exception",
                    "bool",
                    "str",
                    "dict"
                ],
                "low": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "high": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "BasePointDataReader.dataframe": {
            "name": "dataframe",
            "location": 30,
            "return": [
                "pandas.DataFrame",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePointDataReader.metadata": {
            "name": "metadata",
            "location": 35,
            "return": [
                "Dict",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePointDataReader.units": {
            "name": "units",
            "location": 39,
            "return": [
                "Dict[Text,dict]",
                "bool",
                "str",
                "Mapping[starfish.core.types.Coordinates,starfish.core.types.ArrayLike[starfish.core.types.Number]]",
                "Optional[int]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePointDataReader.columns": {
            "name": "columns",
            "location": 66,
            "return": [
                "List[str]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePointDataReader.select": {
            "name": "select",
            "location": 70,
            "return": [
                "Union[pandas.DataFrame,pandas.Series]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePointDataReader.clone": {
            "name": "clone",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePointDataReader.error_type": {
            "name": "error_type",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePointDataReader.__iter__": {
            "name": "__iter__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePointDataReader.__next__": {
            "name": "__next__",
            "location": 93,
            "return": [
                "pandas.DataFrame",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePointDataReader.predictors": {
            "name": "predictors",
            "location": 97,
            "return": [
                "List",
                "List[str]",
                "Optional[Iterable[str]]",
                "Tuple[str]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ecPoint-Calibrate-master/core/postprocessors/conditional_verification.py": {
        "plot_obs_freq": {
            "name": "plot_obs_freq",
            "location": 8,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "predictor_matrix": [
                    "str",
                    "int",
                    "bool"
                ],
                "code": [
                    "bytes",
                    "memoryview",
                    "str"
                ]
            }
        },
        "plot_avg": {
            "name": "plot_avg",
            "location": 61,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "predictor_matrix": [
                    "str",
                    "List[str]",
                    "Optional[Sequence[str]]",
                    "Optional[str]"
                ],
                "code": [
                    "bytes",
                    "str",
                    "bool",
                    "memoryview"
                ]
            }
        },
        "plot_std": {
            "name": "plot_std",
            "location": 113,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "predictor_matrix": [
                    "str",
                    "List[str]",
                    "Optional[Sequence[str]]",
                    "Optional[str]"
                ],
                "code": [
                    "bytes",
                    "str",
                    "bool",
                    "memoryview"
                ]
            }
        },
        "plot_geo": {
            "name": "plot_geo",
            "location": 167,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "geo": [
                    "str",
                    "TextIO",
                    "Optional[dict]",
                    "Dict",
                    "None"
                ],
                "coastline": [
                    "str",
                    "TextIO",
                    "Optional[dict]",
                    "Dict",
                    "None"
                ],
                "symbol": [
                    "str",
                    "TextIO",
                    "Optional[dict]",
                    "Dict",
                    "None"
                ],
                "legend": [
                    "str",
                    "TextIO",
                    "Optional[dict]",
                    "Dict",
                    "None"
                ],
                "title": [
                    "str",
                    "TextIO",
                    "Optional[dict]",
                    "Dict",
                    "None"
                ],
                "code": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "ecPoint-Calibrate-master/core/postprocessors/decision_tree.py": {
        "autolabel": {
            "name": "autolabel",
            "location": 427,
            "return": [
                "None"
            ],
            "arguments": {
                "ax": [
                    "str"
                ],
                "patches": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "y_cum": [
                    "bool",
                    "float"
                ]
            }
        },
        "human_format": {
            "name": "human_format",
            "location": 446,
            "return": [
                "str"
            ],
            "arguments": {
                "num": [
                    "bool",
                    "float",
                    "int",
                    "Sequence[List[int]]",
                    "Dict[str,List[str]]"
                ]
            }
        },
        "colorize_patches": {
            "name": "colorize_patches",
            "location": 462,
            "return": [
                "None"
            ],
            "arguments": {
                "patches": [
                    "List[int]",
                    "List[str]",
                    "int",
                    "numpy.ndarray",
                    "Dict",
                    "utils.Archive[utils.MultiValue]"
                ],
                "bins": [
                    "List",
                    "int",
                    "str",
                    "raiden.utils.Any"
                ],
                "error_type": [
                    "str",
                    "Type[Any]",
                    "int",
                    "Type",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "DecisionTree.predictors": {
            "name": "predictors",
            "location": 27,
            "return": [
                "List",
                "str",
                "int",
                "Tuple",
                "List[str]",
                "Union[List[str],str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecisionTree.num_predictors": {
            "name": "num_predictors",
            "location": 33,
            "return": [
                "int",
                "numpy.ndarray",
                "str",
                "deque"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecisionTree.num_wt": {
            "name": "num_wt",
            "location": 37,
            "return": [
                "int",
                "numpy.ndarray",
                "str",
                "deque"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecisionTree.leaf_codes": {
            "name": "leaf_codes",
            "location": 41,
            "return": [
                "List",
                "List[object]",
                "pandas.DataFrame",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecisionTree.leaf_colors": {
            "name": "leaf_colors",
            "location": 52,
            "return": [
                "List",
                "bool",
                "int",
                "Tuple[int,int]",
                "Tuple",
                "List[str]",
                "Union[List[str],str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecisionTree._get_threshold_counts": {
            "name": "_get_threshold_counts",
            "location": 75,
            "return": [
                "Tuple[(Any, Any, int)]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "Type",
                    "Type[T]",
                    "numpy.dtype"
                ],
                "sparse_thresholds": [
                    "pandas.Series",
                    "pandas.DataFrame",
                    "List[str]",
                    "static_frame.core.util.Bloc2DKeyType"
                ]
            }
        },
        "DecisionTree.create_from_sparse_thresholds": {
            "name": "create_from_sparse_thresholds",
            "location": 92,
            "return": [
                "DecisionTree"
            ],
            "arguments": {
                "cls": [
                    "Type[_TDecisionTree]"
                ],
                "low": [
                    "int",
                    "bytes",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.Ruleset",
                    "cmk.utils.type_defs.ServiceName",
                    "raiden.utils.AdditionalHash"
                ],
                "high": [
                    "bool",
                    "Dict[str,float]",
                    "int",
                    "pandas.DataFrame",
                    "raiden.utils.Address"
                ],
                "ranges": [
                    "Dict[str,Any]",
                    "Callable",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "DecisionTree.tree": {
            "name": "tree",
            "location": 155,
            "return": [
                "str",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecisionTree.cal_rep_error": {
            "name": "cal_rep_error",
            "location": 206,
            "return": [
                "pandas.DataFrame",
                "str",
                "Sequence"
            ],
            "arguments": {
                "self": [],
                "loader": [
                    "numpy.array"
                ],
                "nBin": [
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "WeatherType.evaluate": {
            "name": "evaluate",
            "location": 255,
            "return": [
                "Tuple[(Any, Tuple[(str, ...)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WeatherType._evaluate": {
            "name": "_evaluate",
            "location": 302,
            "return": [
                "Tuple[(Any, Any, str)]"
            ],
            "arguments": {
                "self": [],
                "predictors_matrix": [
                    "str",
                    "Optional[str]",
                    "Type"
                ]
            }
        },
        "WeatherType.discretize_error": {
            "name": "discretize_error",
            "location": 337,
            "return": [
                "pandas.DataFrame",
                "cmk.utils.type_defs.HostName",
                "Callable",
                "tuple",
                "bool"
            ],
            "arguments": {
                "error": [
                    "Iterable[cirq.Operation]",
                    "Sequence",
                    "List",
                    "Union[Sequence,SweepFixedValues]"
                ],
                "num_bins": [
                    "int",
                    "float",
                    "Dict",
                    "str",
                    "beagle.nodes.Node"
                ]
            }
        },
        "WeatherType.plot": {
            "name": "plot",
            "location": 364,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "List",
                    "bytes",
                    "int",
                    "numpy.ndarray",
                    "pandas.DataFrame"
                ],
                "bins": [
                    "str",
                    "int",
                    "bool",
                    "gluonts.core.componenDType"
                ],
                "title": [
                    "bool",
                    "float",
                    "int"
                ],
                "y_lim": [
                    "bool",
                    "Dict[str,tuple[Union[str,int,int]]]",
                    "int",
                    "Dict[str,Tuple[str,int,int]]"
                ],
                "num_bins": [
                    "int",
                    "List[str]",
                    "str"
                ],
                "out_path": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "WeatherType.plot_maps": {
            "name": "plot_maps",
            "location": 418,
            "return": [
                "Optional[Dict[(str, str)]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "bytearray"
                ],
                "code": [
                    "int",
                    "bytes",
                    "bytearray"
                ],
                "mode": [
                    "bool",
                    "str",
                    "Dict",
                    "AnyStr"
                ]
            }
        },
        "DecisionTree.leaf_codes.g": {
            "name": "g",
            "location": 42,
            "return": [
                "Generator[str,None,None]",
                "Generator"
            ],
            "arguments": {
                "node": [
                    "Optional[mypy.nodes.Node]",
                    "Optional[daily_problems.binary_tree_node.Node]",
                    "Optional[Node]"
                ]
            }
        },
        "DecisionTree.tree.codegen": {
            "name": "codegen",
            "location": 197,
            "return": [
                "int",
                "blib2to3.pytree.Node",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "node": [
                    "str",
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ],
                "code": [
                    "str",
                    "dict",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "ecPoint-Calibrate-master/core/postprocessors/generics.py": {
        "Node.json": {
            "name": "json",
            "location": 16,
            "return": [
                "str",
                "dict",
                "Union[str, Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.is_root": {
            "name": "is_root",
            "location": 20,
            "return": [
                "bool",
                "str",
                "Dict[str,Any]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.is_unbounded": {
            "name": "is_unbounded",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.add_child": {
            "name": "add_child",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[str]",
                    "int",
                    "str"
                ]
            }
        }
    },
    "ecPoint-Calibrate-master/core/postprocessors/ks_test.py": {
        "ks_test_engine": {
            "name": "ks_test_engine",
            "location": 12,
            "return": [
                "Tuple[(Any, int)]"
            ],
            "arguments": {
                "df": [
                    "str",
                    "bytes",
                    "int"
                ],
                "predictor_name": [
                    "int",
                    "str",
                    "bytes"
                ],
                "error_name": [
                    "str",
                    "float",
                    "Optional[float]",
                    "Callable",
                    "None"
                ],
                "breakpoints_num": [
                    "bool",
                    "str",
                    "List[int]",
                    "Set[tuple[Union[str,str]]]",
                    "Set[Tuple[str,str]]",
                    "List[dict[str,Any]]",
                    "int",
                    "List[Dict[str,Any]]"
                ],
                "lower_bound": [
                    "str",
                    "Optional[str]",
                    "None",
                    "bool",
                    "Optional[bool]"
                ],
                "upper_bound": [
                    "str",
                    "Optional[str]",
                    "None",
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "format_ks_stats": {
            "name": "format_ks_stats",
            "location": 57,
            "return": [
                "float",
                "bytes",
                "str",
                "type",
                "int"
            ],
            "arguments": {
                "df": [
                    "List",
                    "numpy.ndarray",
                    "int",
                    "pandas.DataFrame"
                ]
            }
        },
        "plot_ks_stats": {
            "name": "plot_ks_stats",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "df": [
                    "T"
                ],
                "node": [
                    "bool"
                ],
                "predictor": [
                    "str",
                    "Tuple",
                    "float"
                ],
                "unit": [
                    "str",
                    "Tuple",
                    "float"
                ]
            }
        }
    },
    "ecPoint-Calibrate-master/core/postprocessors/__init__.py": {},
    "ecPoint-Calibrate-master/core/processor/log_factory.py": {
        "general_parameters_logs": {
            "name": "general_parameters_logs",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "config": [
                    "Optional[Dict[str,Any]]",
                    "Dict",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "predictand_logs": {
            "name": "predictand_logs",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "config": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "predictors_logs": {
            "name": "predictors_logs",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "config": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "observations_logs": {
            "name": "observations_logs",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "config": [
                    "Dict",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "output_file_logs": {
            "name": "output_file_logs",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "config": [
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "point_data_table_logs": {
            "name": "point_data_table_logs",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "config": [
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Sequence",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "step_information_logs": {
            "name": "step_information_logs",
            "location": 110,
            "return": [
                "str"
            ],
            "arguments": {
                "config": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "ecPoint-Calibrate-master/core/processor/utils.py": {
        "daterange": {
            "name": "daterange",
            "location": 4,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "start_date": [
                    "int",
                    "datetime.date",
                    "datetime.datetime",
                    "str"
                ],
                "end_date": [
                    "datetime.date",
                    "datetime.datetime",
                    "str"
                ]
            }
        },
        "iter_daterange": {
            "name": "iter_daterange",
            "location": 9,
            "return": [
                "Generator[(Tuple[(Any, int, int, int)], Any, None)]"
            ],
            "arguments": {
                "start_date": [
                    "int",
                    "datetime.datetime",
                    "datetime.date"
                ],
                "end_date": [
                    "int",
                    "datetime.datetime",
                    "datetime.date"
                ],
                "start_hour": [
                    "str",
                    "None",
                    "Optional[str]",
                    "datetime.datetime"
                ],
                "model_interval": [
                    "int",
                    "Optional[datetime.datetime]",
                    "datetime.datetime",
                    "Optional[datetime.timedelta]",
                    "str"
                ],
                "step_interval": [
                    "int",
                    "float",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "spinup_limit": [
                    "int",
                    "float",
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "ecPoint-Calibrate-master/core/processor/__init__.py": {
        "run": {
            "name": "run",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "bool",
                    "str",
                    "Dict",
                    "_pytesconfig.Config",
                    "config.Config"
                ]
            }
        },
        "run.get_grib_path": {
            "name": "get_grib_path",
            "location": 149,
            "return": [
                "str",
                "cmk.utils.type_defs.HostName",
                "Optional[str]",
                "Sequence[str]"
            ],
            "arguments": {
                "predictor_code": [
                    "str",
                    "Dict[str, Any]"
                ],
                "step": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        }
    },
    "ecPoint-Calibrate-master/core/svc/postprocessing.py": {
        "get_pdt_statistics": {
            "name": "get_pdt_statistics",
            "location": 5,
            "return": [
                "dict"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_pdt_statistics.get_field_summary": {
            "name": "get_field_summary",
            "location": 10,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[str, str]",
                "int",
                "bool",
                "dict"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "ecPoint-Calibrate-master/core/svc/__init__.py": {},
    "ecPoint-Calibrate-master/tests/conf.py": {},
    "ecPoint-Calibrate-master/tests/__init__.py": {},
    "ecPoint-Calibrate-master/tests/functional/conftest.py": {
        "client": {
            "name": "client",
            "location": 11,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "alfa_cassette": {
            "name": "alfa_cassette",
            "location": 20,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "alfa_loader": {
            "name": "alfa_loader",
            "location": 228,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "alfa_cassette.f": {
            "name": "f",
            "location": 21,
            "return": [
                "dict[typing.Text, typing.Union[dict[typing.Text, typing.Union[str,list[typing.Text]]],list[dict[typing.Text, typing.Union[int,typing.Text,list[dict[typing.Text, typing.Text]]]]]]]"
            ],
            "arguments": {
                "output_path": [],
                "fmt": []
            }
        },
        "alfa_loader.f": {
            "name": "f",
            "location": 229,
            "return": [
                "Dict[Text,Union[dict[Text,Union[str,list[Text]]],list[dict[Text,Union[int,Text,list[dict[Text,Text]]]]]]]",
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "fmt": [
                    "str",
                    "Iterator[str]"
                ]
            }
        }
    },
    "ecPoint-Calibrate-master/tests/functional/test_processing.py": {
        "test_alfa": {
            "name": "test_alfa",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "core.models.Recipe"
                ],
                "alfa_cassette": [
                    "str"
                ],
                "alfa_loader": [],
                "fmt": [
                    "str",
                    "Optional[str]",
                    "flask.testing.FlaskClient"
                ],
                "tmp_path": [
                    "str",
                    "Optional[str]",
                    "Tuple[str, str, str]"
                ]
            }
        }
    },
    "ecPoint-Calibrate-master/tests/unit/test_computations.py": {
        "test_compute_accumulated_field": {
            "name": "test_compute_accumulated_field",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compute_weighted_average_field": {
            "name": "test_compute_weighted_average_field",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ecPoint-Calibrate-master/tests/unit/test_decision_tree.py": {
        "sparse_breakpoints": {
            "name": "sparse_breakpoints",
            "location": 12,
            "return": [
                "Tuple[dict[Text,list[Text]]]",
                "Callable",
                "Tuple[numpy.ndarray]",
                "trezor.utils.Writer",
                "str"
            ],
            "arguments": {}
        },
        "breakpoints": {
            "name": "breakpoints",
            "location": 45,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_decision_tree_with_predefined_threshold_splits": {
            "name": "test_decision_tree_with_predefined_threshold_splits",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "sparse_breakpoints": [
                    "int",
                    "str",
                    "pandas.DataFrame",
                    "float",
                    "core.models.Grouping",
                    "Union[int,float]",
                    "bool"
                ]
            }
        },
        "test_decision_tree_construction": {
            "name": "test_decision_tree_construction",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "breakpoints": [
                    "Dict",
                    "str",
                    "int"
                ]
            }
        }
    },
    "ecPoint-Calibrate-master/tests/unit/utils.py": {
        "strip_node_shape": {
            "name": "strip_node_shape",
            "location": 1,
            "return": [
                "int",
                "Dict[str, Any]",
                "Iterable[str]"
            ],
            "arguments": {
                "node": [
                    "int"
                ]
            }
        }
    },
    "ecPoint-Calibrate-master/tests/unit/loaders/test_ascii.py": {
        "test_good_ascii_file": {
            "name": "test_good_ascii_file",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_alfa_units": {
            "name": "test_alfa_units",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_good_ascii_file_clone": {
            "name": "test_good_ascii_file_clone",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str"
                ]
            }
        }
    },
    "ecPoint-Calibrate-master/tests/unit/loaders/test_fieldet.py": {
        "test_dataframe": {
            "name": "test_dataframe",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_units": {
            "name": "test_units",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_values_getter": {
            "name": "test_values_getter",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_values_setter": {
            "name": "test_values_setter",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_binary_operation_with_vector": {
            "name": "test_binary_operation_with_vector",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "op": [
                    "str",
                    "Dict[Hashable,Iterable[Hashable]]"
                ]
            }
        },
        "test_binary_operation_with_scalar": {
            "name": "test_binary_operation_with_scalar",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "op": [
                    "str",
                    "Dict[Hashable,Iterable[Hashable]]"
                ]
            }
        },
        "test_complex_math_operations": {
            "name": "test_complex_math_operations",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nearest_gridpoint": {
            "name": "test_nearest_gridpoint",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nearest_gridpoint_new_geofile_format": {
            "name": "test_nearest_gridpoint_new_geofile_format",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ecPoint-Calibrate-master/tests/unit/loaders/test_geopoints.py": {
        "test_geopoints_loader_header_ok": {
            "name": "test_geopoints_loader_header_ok",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_geopoints_loader_values_ok": {
            "name": "test_geopoints_loader_values_ok",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_geopoints_loader_new_format_ok": {
            "name": "test_geopoints_loader_new_format_ok",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_geopoints_units_ok": {
            "name": "test_geopoints_units_ok",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str"
                ]
            }
        },
        "test_geopoints_units_missing_metadata": {
            "name": "test_geopoints_units_missing_metadata",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str"
                ]
            }
        },
        "test_geopoints_units_missing_units": {
            "name": "test_geopoints_units_missing_units",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str"
                ]
            }
        },
        "test_geopoints_units_bad_comments_order": {
            "name": "test_geopoints_units_bad_comments_order",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str"
                ]
            }
        }
    },
    "ecPoint-Calibrate-master/tests/unit/loaders/test_parquet.py": {
        "test_good_parquet_file": {
            "name": "test_good_parquet_file",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_good_parquet_file_clone": {
            "name": "test_good_parquet_file_clone",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str"
                ]
            }
        }
    },
    "ecPoint-Calibrate-master/tests/unit/loaders/__init__.py": {}
}
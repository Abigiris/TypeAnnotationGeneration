{
    "edgePy-master/setup.py": {},
    "edgePy-master/docs/source/conf.py": {},
    "edgePy-master/edgePy/DGEList.py": {
        "DGEList.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "counts": [
                    "None",
                    "Optional[numpy.ndarray]",
                    "Dict",
                    "Optional[numpy.array]",
                    "Sequence[int]",
                    "Optional[Dict]",
                    "Optional[Sequence[int]]"
                ],
                "samples": [
                    "None",
                    "Optional[numpy.array]",
                    "Dict",
                    "Optional[Dict]",
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray"
                ],
                "genes": [
                    "None",
                    "str",
                    "Optional[numpy.array]",
                    "float",
                    "Optional[numpy.ndarray]",
                    "Dict",
                    "int",
                    "numpy.ndarray",
                    "Optional[Dict]"
                ],
                "norm_factors": [
                    "None",
                    "Optional[numpy.array]",
                    "Dict",
                    "Optional[numpy.ndarray]",
                    "Tuple[Union[str,int]]",
                    "Optional[Dict]",
                    "Tuple[str,int]"
                ],
                "groups_in_list": [
                    "None",
                    "Optional[numpy.array]",
                    "Dict",
                    "Optional[Dict]",
                    "List[int]",
                    "Sequence[int]",
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray",
                    "Optional[List[int]]",
                    "Optional[Sequence[int]]"
                ],
                "groups_in_dict": [
                    "None",
                    "Optional[Dict]",
                    "Dict",
                    "Optional[numpy.array]",
                    "Optional[numpy.ndarray]"
                ],
                "to_remove_zeroes": [
                    "bool",
                    "int",
                    "Dict[str,Any]",
                    "static_frame.core.util.DtypesSpecifier"
                ],
                "filename": [
                    "bool",
                    "None",
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "current_transform_type": [
                    "bool",
                    "None",
                    "Dict[str,str]",
                    "Optional[Literal[only_clustered,include_clustered]]"
                ],
                "current_log_status": [
                    "bool",
                    "Dict",
                    "Optional[Dict]"
                ]
            }
        },
        "DGEList.copy": {
            "name": "copy",
            "location": 110,
            "return": [
                "DGEList"
            ],
            "arguments": {
                "self": [
                    "_TDGEList@@DGEList@@"
                ],
                "counts": [
                    "None",
                    "Optional[numpy.array]",
                    "bool",
                    "Optional[bool]",
                    "Dict",
                    "str",
                    "Optional[numpy.ndarray]",
                    "Optional[Dict]",
                    "Optional[str]",
                    "int"
                ],
                "samples": [
                    "None",
                    "Optional[numpy.array]",
                    "bool",
                    "Optional[bool]",
                    "Dict",
                    "str",
                    "Optional[numpy.ndarray]",
                    "Optional[Dict]",
                    "Optional[str]",
                    "int"
                ],
                "genes": [
                    "None",
                    "Optional[numpy.array]",
                    "bool",
                    "Optional[bool]",
                    "Dict",
                    "str",
                    "Optional[numpy.ndarray]",
                    "Optional[Dict]",
                    "Optional[str]",
                    "int"
                ],
                "norm_factors": [
                    "None",
                    "Optional[numpy.array]",
                    "bool",
                    "Optional[bool]",
                    "Dict",
                    "str",
                    "Optional[numpy.ndarray]",
                    "Optional[Dict]",
                    "Optional[str]",
                    "int"
                ],
                "groups_in_list": [
                    "None",
                    "Optional[numpy.array]",
                    "bool",
                    "Optional[bool]",
                    "Dict",
                    "str",
                    "Optional[numpy.ndarray]",
                    "Optional[Dict]",
                    "Optional[str]",
                    "int"
                ],
                "groups_in_dict": [
                    "None",
                    "Optional[numpy.array]",
                    "bool",
                    "Optional[bool]",
                    "Dict",
                    "str",
                    "Optional[numpy.ndarray]",
                    "Optional[Dict]",
                    "Optional[str]",
                    "int"
                ],
                "to_remove_zeroes": [
                    "bool",
                    "Optional[numpy.array]",
                    "Optional[bool]",
                    "Optional[numpy.ndarray]",
                    "Optional[Dict]",
                    "Optional[str]",
                    "int"
                ],
                "current_type": [
                    "None",
                    "Optional[numpy.array]",
                    "bool",
                    "Optional[bool]",
                    "Dict",
                    "str",
                    "Optional[numpy.ndarray]",
                    "Optional[Dict]",
                    "Optional[str]",
                    "int"
                ],
                "current_log": [
                    "bool",
                    "Optional[numpy.array]",
                    "Optional[bool]",
                    "Optional[numpy.ndarray]",
                    "Optional[Dict]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "DGEList._sample_group_dict": {
            "name": "_sample_group_dict",
            "location": 140,
            "return": [
                "Dict[(Any, list)]"
            ],
            "arguments": {
                "groups_list": [
                    "List[str]",
                    "Tuple[Union[list[Any],list[Any]]]",
                    "int",
                    "Tuple[List[Any],List[Any]]",
                    "bool"
                ],
                "samples": [
                    "str",
                    "float",
                    "numpy.array"
                ]
            }
        },
        "DGEList._sample_group_list": {
            "name": "_sample_group_list",
            "location": 161,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "groups_dict": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "MutableMapping"
                ],
                "samples": [
                    "Dict",
                    "Dict[str,Union[str,int]]",
                    "allennlp.common.util.JsonDict"
                ]
            }
        },
        "DGEList._format_fields": {
            "name": "_format_fields",
            "location": 186,
            "return": [
                "Generator[(str, Any, None)]"
            ],
            "arguments": {
                "fields": [
                    "str",
                    "bool",
                    "Iterable[Tuple[str,Any]]",
                    "List[str]"
                ]
            }
        },
        "DGEList.counts": {
            "name": "counts",
            "location": 209,
            "return": [
                "str",
                "Union[tuple,list]",
                "List[int]",
                "Type",
                "Dict[str,Any]",
                "Dict",
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "counts": [
                    "numpy.ndarray",
                    "int",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "DGEList.samples": {
            "name": "samples",
            "location": 263,
            "return": [
                "None",
                "str",
                "Dict[str,Any]",
                "Dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "samples": [
                    "List[Dict[str, Any]]",
                    "int",
                    "Optional[Union[int, Any]]",
                    "Optional[\"Outcome\"]",
                    "Optional[Union[astropy.units.quantity.Quantity, numpy.ndarray]]"
                ]
            }
        },
        "DGEList.genes": {
            "name": "genes",
            "location": 289,
            "return": [
                "None",
                "str",
                "Dict[str,Any]",
                "Dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "genes": [
                    "numpy.ndarray",
                    "Callable",
                    "str"
                ]
            }
        },
        "DGEList.library_size": {
            "name": "library_size",
            "location": 301,
            "return": [
                "dict",
                "bool",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DGEList.log_transform": {
            "name": "log_transform",
            "location": 310,
            "return": [
                "numpy.ndarray",
                "tuple",
                "str",
                "float",
                "list",
                "int",
                "numpy.array"
            ],
            "arguments": {
                "self": [],
                "counts": [
                    "int",
                    "List[str]",
                    "float",
                    "List[Tuple[int, int]]"
                ],
                "prior_count": [
                    "int",
                    "str",
                    "List[int]",
                    "bytes",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "DGEList.cpm": {
            "name": "cpm",
            "location": 315,
            "return": [
                "Callable",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "transform_to_log": [
                    "bool",
                    "Optional[str]",
                    "Callable",
                    "Optional[bool]",
                    "Optional[Union[str,int]]",
                    "Dict"
                ],
                "prior_count": [
                    "float",
                    "int",
                    "Dict"
                ]
            }
        },
        "DGEList.rpkm": {
            "name": "rpkm",
            "location": 325,
            "return": [
                "Callable",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "gene_data": [
                    "str",
                    "int"
                ],
                "transform_to_log": [
                    "bool",
                    "numpy.ndarray",
                    "Optional[numpy.ndarray]",
                    "Optional[List]",
                    "List"
                ],
                "prior_count": [
                    "float",
                    "Callable",
                    "List[int]"
                ]
            }
        },
        "DGEList.get_gene_mask_and_lengths": {
            "name": "get_gene_mask_and_lengths",
            "location": 360,
            "return": [
                "Tuple[(list, List[bool])]"
            ],
            "arguments": {
                "self": [],
                "gene_data": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "DGEList.tpm": {
            "name": "tpm",
            "location": 401,
            "return": [
                "Callable",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "gene_lengths": [
                    "str",
                    "List[str]",
                    "numpy.ndarray",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "transform_to_log": [
                    "bool",
                    "List[str]",
                    "List",
                    "Optional[str]"
                ],
                "prior_count": [
                    "float",
                    "List[numpy.array]",
                    "numpy.ndarray",
                    "bool"
                ],
                "mean_fragment_lengths": [
                    "str",
                    "List[str]",
                    "numpy.ndarray",
                    "Optional[str]",
                    "Optional[bool]"
                ]
            }
        },
        "DGEList.__repr__": {
            "name": "__repr__",
            "location": 449,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DGEList.write_npz_file": {
            "name": "write_npz_file",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "DGEList.read_npz_file": {
            "name": "read_npz_file",
            "location": 476,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Dict"
                ]
            }
        },
        "DGEList.create_DGEList": {
            "name": "create_DGEList",
            "location": 496,
            "return": [
                "DGEList"
            ],
            "arguments": {
                "cls": [
                    "Type[_TDGEList]"
                ],
                "sample_list": [
                    "List[str]",
                    "bytes",
                    "Tuple[int]",
                    "Type[T]",
                    "list",
                    "Sequence[Sequence[float]]",
                    "List[numpy.ndarray]"
                ],
                "data_set": [
                    "Dict[Hashable,Any]",
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "Union[str,None]",
                    "Optional[Iterable[str]]"
                ],
                "gene_list": [
                    "List[str]",
                    "bytes",
                    "Tuple[int]",
                    "Type[T]",
                    "list",
                    "Sequence[Sequence[float]]",
                    "List[numpy.ndarray]"
                ],
                "sample_to_category": [
                    "None",
                    "List[str]",
                    "Optional[List[str]]",
                    "bool",
                    "str",
                    "bytes",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]",
                    "numpy.array"
                ],
                "category_to_samples": [
                    "None",
                    "List[str]",
                    "Optional[List[str]]",
                    "bool",
                    "str",
                    "bytes",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]",
                    "numpy.array"
                ]
            }
        },
        "DGEList.create_DGEList_data_file": {
            "name": "create_DGEList_data_file",
            "location": 526,
            "return": [
                "DGEList"
            ],
            "arguments": {
                "cls": [
                    "Type[_TDGEList]"
                ],
                "data_file": [
                    "str",
                    "pathlib.Path",
                    "int",
                    "None",
                    "Optional[str]"
                ],
                "group_file": [
                    "str",
                    "pathlib.Path",
                    "Sequence[str]",
                    "None",
                    "bool",
                    "Optional[str]",
                    "List[Union[str,int]]",
                    "BinaryIO",
                    "io.TextIOBase"
                ]
            }
        },
        "DGEList.create_DGEList_handle": {
            "name": "create_DGEList_handle",
            "location": 551,
            "return": [
                "DGEList"
            ],
            "arguments": {
                "cls": [
                    "Type[_TDGEList]"
                ],
                "data_handle": [
                    "int",
                    "str",
                    "Tuple",
                    "bool"
                ],
                "group_handle": [
                    "Dict",
                    "Type[Any]",
                    "bytes",
                    "Type",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        }
    },
    "edgePy-master/edgePy/util.py": {
        "getLogger": {
            "name": "getLogger",
            "location": 14,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[Callable]",
                    "Callable",
                    "float",
                    "Optional[Any]",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "Any",
                    "Dict[str,Any]"
                ],
                "level": [
                    "str",
                    "Optional[Callable]",
                    "Optional[Any]",
                    "Optional[Dict[str, Any]]",
                    "float"
                ],
                "formatter": [
                    "str",
                    "float",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "edgePy-master/edgePy/__init__.py": {},
    "edgePy-master/edgePy/data_import/data_import.py": {
        "get_dataset_path": {
            "name": "get_dataset_path",
            "location": 10,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bool",
                    "pathlib.Path"
                ]
            }
        }
    },
    "edgePy-master/edgePy/data_import/__init__.py": {},
    "edgePy-master/edgePy/data_import/ensembl/canonical_transcripts.py": {
        "parse_arguments": {
            "name": "parse_arguments",
            "location": 29,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "set"
            ],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "CanonicalTranscript.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "int"
                ],
                "port": [
                    "str",
                    "int"
                ],
                "user": [
                    "str",
                    "int"
                ],
                "password": [
                    "str",
                    "int"
                ],
                "database": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "edgePy-master/edgePy/data_import/ensembl/ensembl_flat_file_reader.py": {
        "CanonicalDataStore.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transcript_filename": [
                    "str",
                    "Union[str,pathlib.Path]",
                    "Dict[str,dict[str,str]]",
                    "List",
                    "BinaryIO",
                    "pathlib.Path",
                    "Dict[str,Dict[str,str]]",
                    "Union[str,BinaryIO]"
                ],
                "symbols_filename": [
                    "str",
                    "bool",
                    "Union[str,pathlib.Path]"
                ]
            }
        },
        "CanonicalDataStore.has_gene": {
            "name": "has_gene",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "gene": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "CanonicalDataStore.get_symbol_from_gene": {
            "name": "get_symbol_from_gene",
            "location": 64,
            "return": [
                "None",
                "bool",
                "Optional[str]",
                "Optional[bool]",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "gene": [
                    "bytes",
                    "Type"
                ]
            }
        },
        "CanonicalDataStore.get_genes_from_symbol": {
            "name": "get_genes_from_symbol",
            "location": 78,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "symbol": [
                    "str",
                    "Dict"
                ]
            }
        },
        "CanonicalDataStore.pick_gene_id": {
            "name": "pick_gene_id",
            "location": 91,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "gene_ids": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "CanonicalDataStore.is_known_symbol": {
            "name": "is_known_symbol",
            "location": 106,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "symbol": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "CanonicalDataStore.is_known_gene": {
            "name": "is_known_gene",
            "location": 116,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "gene": [
                    "str",
                    "int"
                ]
            }
        },
        "CanonicalDataStore.is_canonical_by_transcript": {
            "name": "is_canonical_by_transcript",
            "location": 128,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "transcript_id": [
                    "str",
                    "int",
                    "Iterable[str]",
                    "None",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "CanonicalDataStore.get_canonical_transcript": {
            "name": "get_canonical_transcript",
            "location": 141,
            "return": [
                "None",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "gene_id": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "CanonicalDataStore.get_length_of_transcript": {
            "name": "get_length_of_transcript",
            "location": 154,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "transcript_id": [
                    "str",
                    "Dict[str,str]",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "CanonicalDataStore.get_length_of_canonical_transcript": {
            "name": "get_length_of_canonical_transcript",
            "location": 166,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "gene_id": [
                    "str",
                    "int",
                    "List[str]",
                    "bytes",
                    "Optional[int]",
                    "None"
                ]
            }
        }
    },
    "edgePy-master/edgePy/data_import/ensembl/mysql_wrapper.py": {
        "MySQLWrapper.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "None",
                    "int",
                    "bool"
                ],
                "port": [
                    "str",
                    "bytes",
                    "None",
                    "int"
                ],
                "username": [
                    "str",
                    "int",
                    "None",
                    "float"
                ],
                "password": [
                    "str",
                    "int",
                    "None",
                    "float"
                ],
                "database": [
                    "str",
                    "int",
                    "None",
                    "float"
                ]
            }
        },
        "MySQLWrapper.find_one": {
            "name": "find_one",
            "location": 35,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "sql": [
                    "int",
                    "Set",
                    "str"
                ]
            }
        },
        "MySQLWrapper.insert": {
            "name": "insert",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sql": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "MySQLWrapper.update": {
            "name": "update",
            "location": 48,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "MySQLWrapper.run_sql_query": {
            "name": "run_sql_query",
            "location": 51,
            "return": [
                "Tuple[(Dict[(str, Any)], ...)]"
            ],
            "arguments": {
                "self": [],
                "sql": [
                    "str",
                    "int",
                    "Tuple[bytes]",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        },
        "MySQLWrapper.close": {
            "name": "close",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "edgePy-master/edgePy/data_import/ensembl/__init__.py": {},
    "edgePy-master/edgePy/data_import/mongodb/gene_functions.py": {
        "get_genelist_from_file": {
            "name": "get_genelist_from_file",
            "location": 5,
            "return": [
                "Optional[List[str]]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bytes"
                ]
            }
        },
        "translate_genes": {
            "name": "translate_genes",
            "location": 23,
            "return": [
                "Tuple[(list, dict)]"
            ],
            "arguments": {
                "genes": [
                    "str"
                ],
                "mongo_reader": [
                    "Callable[..., bool]",
                    "str",
                    "Deque",
                    "Iterable[str]",
                    "bool"
                ],
                "database": [
                    "Text",
                    "Callable[...,bool]",
                    "str",
                    "Deque",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "get_gene_list": {
            "name": "get_gene_list",
            "location": 71,
            "return": [
                "dict"
            ],
            "arguments": {
                "mongo_reader": [
                    "Union[str, IO]",
                    "str",
                    "IO",
                    "IO[str]"
                ],
                "database": [
                    "Text",
                    "Union[str,IO]",
                    "str",
                    "IO",
                    "IO[str]"
                ]
            }
        },
        "get_sample_details": {
            "name": "get_sample_details",
            "location": 89,
            "return": [
                "Dict[(Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "group_by": [
                    "str",
                    "bool",
                    "Dict"
                ],
                "mongo_reader": [
                    "dict",
                    "Optional[int]",
                    "str"
                ],
                "database": [
                    "Dict",
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "get_canonical_rpkm": {
            "name": "get_canonical_rpkm",
            "location": 125,
            "return": [
                "None",
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "int",
                "Dict"
            ],
            "arguments": {
                "result": [
                    "str",
                    "Dict[str,Any]",
                    "float",
                    "int",
                    "Callable",
                    "bool"
                ]
            }
        },
        "get_canonical_raw": {
            "name": "get_canonical_raw",
            "location": 143,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "result": [
                    "str",
                    "Dict[str,Any]",
                    "float",
                    "int",
                    "Callable",
                    "bool"
                ]
            }
        }
    },
    "edgePy-master/edgePy/data_import/mongodb/mongo_import.py": {
        "parse_arguments": {
            "name": "parse_arguments",
            "location": 14,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "set"
            ],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser"
                ],
                "ci_values": [
                    "List[str]",
                    "None",
                    "Sequence[str]",
                    "Optional[List[str]]",
                    "argparse.Namespace",
                    "Optional[Sequence[str]]",
                    "argparse.ArgumentParser"
                ]
            }
        },
        "ImportFromMongodb.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "port": [
                    "int",
                    "str",
                    "Callable[,Iterable[float]]"
                ],
                "mongo_key": [
                    "str",
                    "bool",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]",
                    "Union[bool,List[str]]",
                    "List[str]"
                ],
                "mongo_value": [
                    "str",
                    "bool",
                    "Optional[Callable[,bool]]",
                    "Callable[,bool]",
                    "None"
                ],
                "gene_list_file": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "None",
                    "Optional[dict]",
                    "Dict"
                ]
            }
        },
        "ImportFromMongodb.translate_gene_list": {
            "name": "translate_gene_list",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "int",
                    "str"
                ]
            }
        },
        "ImportFromMongodb.get_data_from_mongo": {
            "name": "get_data_from_mongo",
            "location": 89,
            "return": [
                "Tuple[(list, Dict[(Any, dict)], list, dict)]"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "Dict",
                    "str"
                ],
                "rpkm_flag": [
                    "bool",
                    "str",
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "edgePy-master/edgePy/data_import/mongodb/mongo_wrapper.py": {
        "MongoWrapper.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "int",
                    "str",
                    "Dict",
                    "Union[str,int]"
                ],
                "port": [
                    "int",
                    "str",
                    "Union[str, int]"
                ],
                "connect": [
                    "bool",
                    "str",
                    "int"
                ],
                "verbose": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "MongoWrapper.get_db": {
            "name": "get_db",
            "location": 39,
            "return": [
                "Dict[str, Any]",
                "str",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "str",
                    "bool",
                    "bytes",
                    "Tuple[int,int,int]",
                    "Tuple[Union[int,int,int]]"
                ],
                "collection": [
                    "bool",
                    "str"
                ]
            }
        },
        "MongoWrapper.find_as_cursor": {
            "name": "find_as_cursor",
            "location": 58,
            "return": [
                "str",
                "Type",
                "int",
                "Dict[str,List[str]]",
                "Set",
                "Set[str]",
                "Dict[str,str]",
                "Dict[str,Union[int,str]]"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "str",
                    "bool"
                ],
                "collection": [
                    "str",
                    "bool"
                ],
                "query": [
                    "str",
                    "bool",
                    "None"
                ],
                "projection": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "MongoWrapper.find_as_list": {
            "name": "find_as_list",
            "location": 88,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "str",
                    "Dict[Hashable,Any]"
                ],
                "collection": [
                    "str",
                    "Dict[Hashable,Any]"
                ],
                "query": [
                    "str",
                    "Dict[Hashable,Any]",
                    "None"
                ],
                "projection": [
                    "str",
                    "Dict[Hashable,Any]",
                    "None"
                ]
            }
        },
        "MongoWrapper.find_as_dict": {
            "name": "find_as_dict",
            "location": 113,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "List[str]",
                    "Callable"
                ],
                "collection": [
                    "List[str]",
                    "Callable"
                ],
                "query": [
                    "List[str]",
                    "Callable",
                    "None"
                ],
                "field": [
                    "str"
                ],
                "projection": [
                    "List[str]",
                    "Callable",
                    "None"
                ]
            }
        },
        "MongoWrapper.insert": {
            "name": "insert",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "int",
                    "str"
                ],
                "collection": [
                    "int",
                    "str"
                ],
                "data_list": [
                    "int",
                    "str"
                ]
            }
        },
        "MongoWrapper.create_index": {
            "name": "create_index",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "str",
                    "Dict[str,Union[str,int,bool]]",
                    "bytes",
                    "bytearray"
                ],
                "collection": [
                    "str",
                    "Dict[str,Union[str,int,bool]]",
                    "bytes",
                    "bytearray"
                ],
                "key": [
                    "str",
                    "Dict[str,Union[str,int,bool]]",
                    "bytes",
                    "bytearray"
                ]
            }
        },
        "MongoInserter.__init__": {
            "name": "__init__",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "int",
                    "bool"
                ],
                "port": [
                    "str",
                    "int",
                    "bool"
                ],
                "database": [
                    "Optional[bool]",
                    "bool",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "collection": [
                    "Optional[bool]",
                    "bool",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "connect": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "MongoInserter.flush": {
            "name": "flush",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoInserter.add": {
            "name": "add",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "float",
                    "int"
                ]
            }
        },
        "MongoInserter.close": {
            "name": "close",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoInserter.create_index_key": {
            "name": "create_index_key",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "Iterator[str]",
                    "Iterator"
                ]
            }
        },
        "MongoUpdater.__init__": {
            "name": "__init__",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "int",
                    "bool"
                ],
                "port": [
                    "str",
                    "int",
                    "bool"
                ],
                "database": [
                    "Optional[bool]",
                    "bool",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "collection": [
                    "str",
                    "Dict",
                    "bool",
                    "Dict[str,set[str]]",
                    "Dict[str,Set[str]]",
                    "pymongo.database.Database"
                ],
                "connect": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "MongoUpdater.flush": {
            "name": "flush",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoUpdater.add": {
            "name": "add",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "updatedict": [
                    "int",
                    "bytes",
                    "Union[str,bool,None]",
                    "str",
                    "None"
                ],
                "setdict": [
                    "int",
                    "bytes",
                    "Union[str,bool,None]",
                    "str",
                    "None"
                ]
            }
        },
        "MongoUpdater.close": {
            "name": "close",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "edgePy-master/edgePy/data_import/mongodb/__init__.py": {},
    "edgePy-master/scripts/edgepy.py": {
        "parse_arguments": {
            "name": "parse_arguments",
            "location": 17,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "set"
            ],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EdgePy.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "EdgePy.run_ks": {
            "name": "run_ks",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EdgePy.ks_2_samples": {
            "name": "ks_2_samples",
            "location": 151,
            "return": [
                "Tuple[(Dict[(Any, Dict[(str, Any)])], dict, list)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EdgePy.generate_results": {
            "name": "generate_results",
            "location": 184,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "gene_details": [
                    "bool",
                    "Sequence[str]",
                    "Callable"
                ],
                "gene_likelihood1": [
                    "bytes",
                    "str",
                    "bool",
                    "int",
                    "Union[Sequence[str],str]"
                ],
                "group_type1": [
                    "str",
                    "bool",
                    "Type",
                    "int"
                ],
                "group_type2": [
                    "str",
                    "bool",
                    "Type",
                    "int"
                ]
            }
        }
    },
    "edgePy-master/scripts/__init__.py": {},
    "edgePy-master/tests/test_DGEList.py": {
        "dge_list": {
            "name": "dge_list",
            "location": 19,
            "return": [
                "str",
                "List[str]",
                "List[Dict]",
                "Union[str, List[Any]]",
                "bool",
                "list"
            ],
            "arguments": {}
        },
        "test_sample_by_group": {
            "name": "test_sample_by_group",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sample_group_list": {
            "name": "test_sample_group_list",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_minimal_init": {
            "name": "test_minimal_init",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_too_much": {
            "name": "test_too_much",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_too_many_options": {
            "name": "test_too_many_options",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_too_many_options2": {
            "name": "test_too_many_options2",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_library_size": {
            "name": "test_library_size",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_setting_DGElist_counts": {
            "name": "test_setting_DGElist_counts",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cycle_dge_npz": {
            "name": "test_cycle_dge_npz",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "testing_setting_samples_and_counts": {
            "name": "testing_setting_samples_and_counts",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_repr": {
            "name": "test_repr",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_broken_dge_caGENE_SYMBOL_SQLll": {
            "name": "test_broken_dge_caGENE_SYMBOL_SQLll",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cpm": {
            "name": "test_cpm",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rpkm": {
            "name": "test_rpkm",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tpm": {
            "name": "test_tpm",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_init": {
            "name": "test_init",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_DGEList_handle_init": {
            "name": "test_create_DGEList_handle_init",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_data_stream": {
            "name": "test_get_data_stream",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_DGEList": {
            "name": "test_create_DGEList",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "edgePy-master/tests/test_edgePy.py": {
        "test_parse_argumants": {
            "name": "test_parse_argumants",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "edgePy-master/tests/ensembl/test_canonical_transcripts.py": {
        "TestCanonicalTranscripts.setUpClass": {
            "name": "setUpClass",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str,str]",
                    "Dict"
                ]
            }
        },
        "TestCanonicalTranscripts.test_is_canonical_by_transcript": {
            "name": "test_is_canonical_by_transcript",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCanonicalTranscripts.test_get_canonical_transcript": {
            "name": "test_get_canonical_transcript",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCanonicalTranscripts.test_get_length_of_transcript": {
            "name": "test_get_length_of_transcript",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCanonicalTranscripts.test_get_length_of_canonical_transcript": {
            "name": "test_get_length_of_canonical_transcript",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "edgePy-master/tests/ensembl/test_ensembl_flat_file_reader.py": {
        "TestEnsembleFlatFileReader.setUpClass": {
            "name": "setUpClass",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str,str]",
                    "Dict"
                ]
            }
        },
        "TestEnsembleFlatFileReader.test_pick_gene_id_1": {
            "name": "test_pick_gene_id_1",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEnsembleFlatFileReader.test_has_gene": {
            "name": "test_has_gene",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEnsembleFlatFileReader.test_get_symbol_from_gene": {
            "name": "test_get_symbol_from_gene",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEnsembleFlatFileReader.test_get_genes_from_symbol": {
            "name": "test_get_genes_from_symbol",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEnsembleFlatFileReader.test_is_known_symbol": {
            "name": "test_is_known_symbol",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEnsembleFlatFileReader.test_is_known_gene": {
            "name": "test_is_known_gene",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEnsembleFlatFileReader.test_is_canonical_by_transcript": {
            "name": "test_is_canonical_by_transcript",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEnsembleFlatFileReader.test_get_canonical_transcript": {
            "name": "test_get_canonical_transcript",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEnsembleFlatFileReader.test_get_length_of_transcript": {
            "name": "test_get_length_of_transcript",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEnsembleFlatFileReader.test_get_length_of_canonical_transcript": {
            "name": "test_get_length_of_canonical_transcript",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "edgePy-master/tests/mongodb/test_gene_functions.py": {
        "gene_list_file": {
            "name": "gene_list_file",
            "location": 76,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {}
        },
        "test_get_genelist_from_file": {
            "name": "test_get_genelist_from_file",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_genelist_from_file_no_file": {
            "name": "test_get_genelist_from_file_no_file",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_translate_genes_symbol": {
            "name": "test_translate_genes_symbol",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "mongodb": [
                    "int"
                ]
            }
        },
        "test_translate_genes_ensg": {
            "name": "test_translate_genes_ensg",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "mongodb": []
            }
        },
        "test_get_gene_list": {
            "name": "test_get_gene_list",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "mongodb": [
                    "Callable[[List,bool],None]",
                    "Callable[List,bool,None]"
                ]
            }
        },
        "test_get_sample_details": {
            "name": "test_get_sample_details",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "mongodb": [
                    "Callable[[List,bool],None]",
                    "Callable[List,bool,None]"
                ]
            }
        },
        "test_get_canonical_rpkm": {
            "name": "test_get_canonical_rpkm",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_canonical_rpkm_no_canonical": {
            "name": "test_get_canonical_rpkm_no_canonical",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_canonical_raw_no_canonical": {
            "name": "test_get_canonical_raw_no_canonical",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "edgePy-master/tests/mongodb/test_mongo_import.py": {
        "test_parse_arguments": {
            "name": "test_parse_arguments",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_data_from_mongo_nofilters": {
            "name": "test_get_data_from_mongo_nofilters",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "mongodb": [
                    "Callable[[List,bool],None]",
                    "Callable[List,bool,None]"
                ]
            }
        },
        "test_get_data_from_mongo_filters": {
            "name": "test_get_data_from_mongo_filters",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "mongodb": [
                    "Callable[[List,bool],None]",
                    "Dict[str,Any]",
                    "Callable[List,bool,None]"
                ]
            }
        },
        "test_get_data_from_mongo_gene_list": {
            "name": "test_get_data_from_mongo_gene_list",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "mongodb": [
                    "Callable[[List,bool],None]",
                    "Callable[List,bool,None]",
                    "Dict[str,Any]",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        }
    },
    "edgePy-master/tests/mongodb/test_mongo_wrapper.py": {
        "test_mongo_wrapper_find_as_cursor": {
            "name": "test_mongo_wrapper_find_as_cursor",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "mongodb": []
            }
        },
        "test_mongo_wrapper_find_as_cursor_fail": {
            "name": "test_mongo_wrapper_find_as_cursor_fail",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mongo_wrapper_find_as_list": {
            "name": "test_mongo_wrapper_find_as_list",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "mongodb": []
            }
        },
        "test_mongo_wrapper_find_as_dict": {
            "name": "test_mongo_wrapper_find_as_dict",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "mongodb": []
            }
        },
        "test_mongo_wrapper_insert": {
            "name": "test_mongo_wrapper_insert",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "mongodb": []
            }
        },
        "test_mongo_wrapper_create_index": {
            "name": "test_mongo_wrapper_create_index",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "mongodb": [
                    "int"
                ]
            }
        },
        "test_mongo_inserter_flush": {
            "name": "test_mongo_inserter_flush",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "mongodb": []
            }
        },
        "test_mongo_inserter_add": {
            "name": "test_mongo_inserter_add",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "mongodb": [
                    "int"
                ]
            }
        },
        "test_mongo_inserter_close": {
            "name": "test_mongo_inserter_close",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "mongodb": []
            }
        },
        "test_mongo_inserter_create_index_key": {
            "name": "test_mongo_inserter_create_index_key",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "mongodb": [
                    "int"
                ]
            }
        },
        "test_mongo_updater_flush": {
            "name": "test_mongo_updater_flush",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "mongodb": []
            }
        },
        "test_mongo_updater_add": {
            "name": "test_mongo_updater_add",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "mongodb": [
                    "int"
                ]
            }
        },
        "test_mongo_updater_close": {
            "name": "test_mongo_updater_close",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "mongodb": []
            }
        }
    }
}
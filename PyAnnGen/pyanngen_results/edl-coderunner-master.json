{
    "edl-coderunner-master/setup.py": {
        "read": {
            "name": "read",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "edl-coderunner-master/src/ecr/helper.py": {
        "loadMan": {
            "name": "loadMan",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "printHead": {
            "name": "printHead",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "bashVarToPythonVar": {
            "name": "bashVarToPythonVar",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "m": [
                    "int",
                    "str",
                    "Iterable"
                ]
            }
        },
        "formatWithVars": {
            "name": "formatWithVars",
            "location": 53,
            "return": [
                "str",
                "bool",
                "list[str]",
                "Optional[str]",
                "None",
                "int"
            ],
            "arguments": {
                "oristr": [
                    "str",
                    "List[str]",
                    "int",
                    "list[str]",
                    "Optional[str]",
                    "None"
                ],
                "var": [
                    "Dict[str, Optional[str]]",
                    "dict[str, typing.Union[str,None]]",
                    "Tuple['cirq.Qid']",
                    "tuple['cirq.Qid']",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        }
    },
    "edl-coderunner-master/src/ecr/shared.py": {
        "getLogData": {
            "name": "getLogData",
            "location": 26,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "getManager": {
            "name": "getManager",
            "location": 30,
            "return": [
                "None",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "setManager": {
            "name": "setManager",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "man": [
                    "bool",
                    "float"
                ]
            }
        },
        "getCwd": {
            "name": "getCwd",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "setCwd": {
            "name": "setCwd",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "cwd": [
                    "bool",
                    "float"
                ]
            }
        },
        "getVersion": {
            "name": "getVersion",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "getVariables": {
            "name": "getVariables",
            "location": 52,
            "return": [
                "Dict[(str, Optional[str])]"
            ],
            "arguments": {}
        }
    },
    "edl-coderunner-master/src/ecr/types.py": {},
    "edl-coderunner-master/src/ecr/__init__.py": {},
    "edl-coderunner-master/src/ecr/__main__.py": {
        "getITParser": {
            "name": "getITParser",
            "location": 36,
            "return": [
                "ITParser"
            ],
            "arguments": {}
        },
        "doSyscall": {
            "name": "doSyscall",
            "location": 51,
            "return": [
                "int"
            ],
            "arguments": {
                "cmd": [
                    "str",
                    "bool",
                    "list[str]",
                    "List[str]",
                    "core_lib.core.models.Venue"
                ],
                "message": [
                    "str",
                    "bool"
                ]
            }
        },
        "mainInit": {
            "name": "mainInit",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "executeCommand": {
            "name": "executeCommand",
            "location": 91,
            "return": [
                "int"
            ],
            "arguments": {
                "oricmd": [
                    "str"
                ]
            }
        },
        "getCommandCompleter": {
            "name": "getCommandCompleter",
            "location": 123,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 136,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "outmain": {
            "name": "outmain",
            "location": 201,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "BasicError.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "BasicError.__str__": {
            "name": "__str__",
            "location": 20,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "ITParser.error": {
            "name": "error",
            "location": 25,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int"
                ]
            }
        },
        "ITParser.exit": {
            "name": "exit",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "int",
                    "str",
                    "Optional[float]",
                    "preacher.core.status.Status"
                ],
                "message": [
                    "str",
                    "bytes",
                    "None"
                ]
            }
        }
    },
    "edl-coderunner-master/src/ecr/commands/cmd_cd.py": {
        "CdCommand.default": {
            "name": "default",
            "location": 10,
            "return": [
                "ui.command.ReturnCode"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "CdCommand.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CdCommand.createParser": {
            "name": "createParser",
            "location": 25,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "parsers": [
                    "bool",
                    "type",
                    "typing.Type"
                ]
            }
        }
    },
    "edl-coderunner-master/src/ecr/commands/cmd_clean.py": {
        "CleanCommand.default": {
            "name": "default",
            "location": 11,
            "return": [
                "ecr.ui.command.ReturnCode"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "CleanCommand.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "edl-coderunner-master/src/ecr/commands/cmd_clear.py": {
        "ClearCommand.default": {
            "name": "default",
            "location": 13,
            "return": [
                "ui.command.ReturnCode"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "ClearCommand.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClearCommand.createParser": {
            "name": "createParser",
            "location": 37,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "parsers": [
                    "bool",
                    "type",
                    "typing.Type"
                ]
            }
        }
    },
    "edl-coderunner-master/src/ecr/commands/cmd_cls.py": {
        "ClsCommand.default": {
            "name": "default",
            "location": 7,
            "return": [
                "ui.command.ReturnCode"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "ClsCommand.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "edl-coderunner-master/src/ecr/commands/cmd_debug.py": {
        "DebugCommand.default": {
            "name": "default",
            "location": 11,
            "return": [
                "ui.command.ReturnCode"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "DebugCommand.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DebugCommand.createParser": {
            "name": "createParser",
            "location": 74,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "parsers": [
                    "bool",
                    "type",
                    "typing.Type"
                ]
            }
        }
    },
    "edl-coderunner-master/src/ecr/commands/cmd_edit.py": {
        "EditCommand.default": {
            "name": "default",
            "location": 12,
            "return": [
                "ui.command.ReturnCode"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "EditCommand.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EditCommand.createParser": {
            "name": "createParser",
            "location": 39,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "parsers": [
                    "bool",
                    "type",
                    "typing.Type"
                ]
            }
        }
    },
    "edl-coderunner-master/src/ecr/commands/cmd_exit.py": {
        "ExitCommand.default": {
            "name": "default",
            "location": 6,
            "return": [
                "ecr.ui.command.ReturnCode"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "ExitCommand.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "edl-coderunner-master/src/ecr/commands/cmd_init.py": {
        "InitCommand.default": {
            "name": "default",
            "location": 11,
            "return": [
                "ui.command.ReturnCode"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "InitCommand.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InitCommand.createParser": {
            "name": "createParser",
            "location": 30,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "parsers": [
                    "bool",
                    "type",
                    "typing.Type"
                ]
            }
        }
    },
    "edl-coderunner-master/src/ecr/commands/cmd_new.py": {
        "NewCommand.default": {
            "name": "default",
            "location": 12,
            "return": [
                "ui.command.ReturnCode"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "NewCommand.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NewCommand.createParser": {
            "name": "createParser",
            "location": 39,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "parsers": [
                    "bool",
                    "type",
                    "typing.Type"
                ]
            }
        }
    },
    "edl-coderunner-master/src/ecr/commands/cmd_now.py": {
        "NowCommand.default": {
            "name": "default",
            "location": 11,
            "return": [
                "ui.command.ReturnCode"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "NowCommand.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NowCommand.createParser": {
            "name": "createParser",
            "location": 26,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "parsers": [
                    "bool",
                    "type",
                    "typing.Type"
                ]
            }
        }
    },
    "edl-coderunner-master/src/ecr/commands/cmd_pwd.py": {
        "PwdCommand.default": {
            "name": "default",
            "location": 7,
            "return": [
                "ui.command.ReturnCode"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "PwdCommand.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "edl-coderunner-master/src/ecr/commands/cmd_reload.py": {
        "ReloadCommand.default": {
            "name": "default",
            "location": 8,
            "return": [
                "ecr.ui.command.ReturnCode"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "ReloadCommand.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReloadCommand.createParser": {
            "name": "createParser",
            "location": 22,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "parsers": [
                    "bool",
                    "type",
                    "typing.Type"
                ]
            }
        }
    },
    "edl-coderunner-master/src/ecr/commands/cmd_run.py": {
        "RunWatchEventHandler.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "bool",
                    "List[List[str]]",
                    "list[list[str]]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "func": [
                    "str",
                    "bool",
                    "List[int]",
                    "list[int]",
                    "dict",
                    "dict[, ]",
                    "set",
                    "set[]"
                ]
            }
        },
        "RunWatchEventHandler.on_moved": {
            "name": "on_moved",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "int",
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "RunWatchEventHandler.on_created": {
            "name": "on_created",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Callable",
                    "typing.Callable[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "RunWatchEventHandler.on_deleted": {
            "name": "on_deleted",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "RunWatchEventHandler.on_modified": {
            "name": "on_modified",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "int",
                    "MutableMapping[str, Any]",
                    "typing.MutableMapping",
                    "Optional[str]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "RunCommand.default": {
            "name": "default",
            "location": 44,
            "return": [
                "ui.command.ReturnCode"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "RunCommand.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RunCommand.createParser": {
            "name": "createParser",
            "location": 125,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "parsers": [
                    "bool",
                    "type",
                    "typing.Type"
                ]
            }
        },
        "RunCommand.default.func": {
            "name": "func",
            "location": 93,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "edl-coderunner-master/src/ecr/commands/cmd_status.py": {
        "StatusCommand.default": {
            "name": "default",
            "location": 7,
            "return": [
                "ui.command.ReturnCode"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "StatusCommand.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusCommand.createParser": {
            "name": "createParser",
            "location": 20,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "parsers": [
                    "bool",
                    "type",
                    "typing.Type"
                ]
            }
        }
    },
    "edl-coderunner-master/src/ecr/commands/cmd_template.py": {
        "TemplateCommand.default": {
            "name": "default",
            "location": 15,
            "return": [
                "ui.command.ReturnCode"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "TemplateCommand.new": {
            "name": "new",
            "location": 21,
            "return": [
                "ui.command.ReturnCode"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "TemplateCommand.clear": {
            "name": "clear",
            "location": 31,
            "return": [
                "ui.command.ReturnCode"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "TemplateCommand.remove": {
            "name": "remove",
            "location": 43,
            "return": [
                "ui.command.ReturnCode"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "TemplateCommand.showTemplate": {
            "name": "showTemplate",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "basepath": [
                    "typing.IO",
                    "str",
                    "pymap.parsing.command.selecSearchCommand",
                    "IO[str]"
                ]
            }
        },
        "TemplateCommand.show": {
            "name": "show",
            "location": 70,
            "return": [
                "ui.command.ReturnCode"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "TemplateCommand.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemplateCommand.createParser": {
            "name": "createParser",
            "location": 97,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "parsers": [
                    "bool",
                    "type",
                    "typing.Type"
                ]
            }
        }
    },
    "edl-coderunner-master/src/ecr/commands/cmd_test.py": {
        "TestCommand.default": {
            "name": "default",
            "location": 13,
            "return": [
                "ui.command.ReturnCode"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "TestCommand.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCommand.createParser": {
            "name": "createParser",
            "location": 76,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "parsers": [
                    "bool",
                    "type",
                    "typing.Type"
                ]
            }
        },
        "TestCommand.default.func": {
            "name": "func",
            "location": 42,
            "return": [
                "int",
                "bool",
                "Union['IndexBase', 'Series']"
            ],
            "arguments": {}
        }
    },
    "edl-coderunner-master/src/ecr/commands/cmd_version.py": {
        "VersionCommand.default": {
            "name": "default",
            "location": 7,
            "return": [
                "ui.command.ReturnCode"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "VersionCommand.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "edl-coderunner-master/src/ecr/commands/helper.py": {
        "printFileModify": {
            "name": "printFileModify",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "file": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "printFileCreate": {
            "name": "printFileCreate",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "file": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "waterbutler.core.path.WaterButlerPath"
                ]
            }
        },
        "printFileDelete": {
            "name": "printFileDelete",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "file": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "assertInited": {
            "name": "assertInited",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "getItem": {
            "name": "getItem",
            "location": 32,
            "return": [
                "str",
                "tuple[]"
            ],
            "arguments": {
                "tman": [
                    "typing.Callable[, ]",
                    "BaseException",
                    "core.WorkManager",
                    "Callable"
                ],
                "args": []
            }
        }
    },
    "edl-coderunner-master/src/ecr/commands/__init__.py": {},
    "edl-coderunner-master/src/ecr/core/defaultData.py": {},
    "edl-coderunner-master/src/ecr/core/globalData.py": {
        "exists": {
            "name": "exists",
            "location": 5,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "initialize": {
            "name": "initialize",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "edl-coderunner-master/src/ecr/core/manager.py": {},
    "edl-coderunner-master/src/ecr/core/path.py": {
        "getGlobalBasePath": {
            "name": "getGlobalBasePath",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "getMainPath": {
            "name": "getMainPath",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "basepath": [
                    "str"
                ]
            }
        },
        "getConfigPath": {
            "name": "getConfigPath",
            "location": 12,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "basepath": [
                    "str"
                ]
            }
        },
        "getExecutorPath": {
            "name": "getExecutorPath",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "basepath": [
                    "str",
                    "bool"
                ]
            }
        },
        "getJudgerConfigPath": {
            "name": "getJudgerConfigPath",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "basepath": [
                    "str"
                ]
            }
        },
        "getTemplateConfigPath": {
            "name": "getTemplateConfigPath",
            "location": 24,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "basepath": [
                    "str"
                ]
            }
        },
        "getTemplatePath": {
            "name": "getTemplatePath",
            "location": 28,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "basepath": [
                    "str"
                ]
            }
        },
        "getJudgerPath": {
            "name": "getJudgerPath",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "basepath": [
                    "str",
                    "bool"
                ]
            }
        },
        "getFileInputPath": {
            "name": "getFileInputPath",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "basepath": [
                    "str"
                ]
            }
        },
        "getFileOutputPath": {
            "name": "getFileOutputPath",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "basepath": [
                    "str"
                ]
            }
        },
        "getFileStdPath": {
            "name": "getFileStdPath",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "basepath": [
                    "str"
                ]
            }
        },
        "getCodeDirConfigPath": {
            "name": "getCodeDirConfigPath",
            "location": 48,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "basepath": [
                    "str"
                ]
            }
        },
        "getFileExt": {
            "name": "getFileExt",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "getCoreJudgerPath": {
            "name": "getCoreJudgerPath",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "getCoreTemplatePath": {
            "name": "getCoreTemplatePath",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "edl-coderunner-master/src/ecr/core/_manager.py": {
        "getSystemCommand": {
            "name": "getSystemCommand",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "cmd": [
                    "str"
                ],
                "man": [
                    "str",
                    "None"
                ]
            }
        },
        "safeOutput": {
            "name": "safeOutput",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "edl-coderunner-master/src/ecr/core/_Runner.py": {
        "runCommands": {
            "name": "runCommands",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "io": [
                    "str"
                ],
                "commands": [
                    "List[str]"
                ],
                "variables": [
                    "Dict[(str, str)]"
                ],
                "wdir": [
                    "str"
                ],
                "getSystemCommand": [
                    "Callable[([str], str)]"
                ],
                "inputFile": [
                    "str"
                ],
                "outputFile": [
                    "str"
                ],
                "defaultTimeLimit": [
                    "Optional[int]"
                ],
                "showLog": [
                    "bool"
                ]
            }
        },
        "Runner.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "proc": [
                    "subprocess.Popen"
                ],
                "io": [
                    "str"
                ],
                "timelimit": [
                    "Optional[int]"
                ]
            }
        },
        "Runner.terminate": {
            "name": "terminate",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Runner.input": {
            "name": "input",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str"
                ]
            }
        },
        "Runner.run": {
            "name": "run",
            "location": 37,
            "return": [
                "Tuple[(RunResult, Optional[int])]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "edl-coderunner-master/src/ecr/core/_WorkItem.py": {
        "initializeCodeDirectory": {
            "name": "initializeCodeDirectory",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "loadCodeDirectory": {
            "name": "loadCodeDirectory",
            "location": 39,
            "return": [
                "Optional[WorkItem]"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "_runcommands": {
            "name": "_runcommands",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "commands": [
                    "List[str]"
                ],
                "variables": [
                    "Dict[(str, str)]"
                ],
                "wdir": [
                    "str"
                ],
                "getSystemCommand": [
                    "Callable[([str], str)]"
                ],
                "defaultTimeLimit": [
                    "Optional[int]"
                ]
            }
        },
        "initializeCodeDirectoryWithTemplate": {
            "name": "initializeCodeDirectoryWithTemplate",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "man": [
                    "Mapping",
                    "str",
                    "typing.Mapping",
                    "int"
                ],
                "templ": [
                    "str",
                    "pypi2nix.path.Path"
                ],
                "basepath": [
                    "str"
                ],
                "dstpath": [
                    "str"
                ]
            }
        },
        "WorkItem.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "types": [
                    "WorkItemType"
                ]
            }
        }
    },
    "edl-coderunner-master/src/ecr/core/_WorkManager.py": {
        "hasInitialized": {
            "name": "hasInitialized",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "basepath": [
                    "str"
                ]
            }
        },
        "loadFrom": {
            "name": "loadFrom",
            "location": 268,
            "return": [
                "Tuple[(Optional[WorkManager], Optional[Exception])]"
            ],
            "arguments": {
                "basepath": [
                    "str"
                ]
            }
        },
        "load": {
            "name": "load",
            "location": 300,
            "return": [
                "Tuple[(Optional[WorkManager], Optional[Exception])]"
            ],
            "arguments": {
                "basepath": [
                    "str"
                ]
            }
        },
        "clear": {
            "name": "clear",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "basepath": [
                    "str"
                ]
            }
        },
        "initialize": {
            "name": "initialize",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "basepath": [
                    "str"
                ]
            }
        },
        "WorkManager.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "WorkManager.getConfigPath": {
            "name": "getConfigPath",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkManager.getWorkItem": {
            "name": "getWorkItem",
            "location": 63,
            "return": [
                "str",
                "WorkItem"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "isdir": [
                    "bool"
                ],
                "renew": [
                    "bool"
                ]
            }
        },
        "WorkManager.setCurrent": {
            "name": "setCurrent",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str"
                ],
                "isdir": [
                    "bool"
                ]
            }
        },
        "WorkManager.updateCurrent": {
            "name": "updateCurrent",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkManager.newCode": {
            "name": "newCode",
            "location": 89,
            "return": [
                "None",
                "str",
                "Optional[float]",
                "Optional[str]",
                "Optional[int]",
                "Optional[bool]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "None"
                ],
                "template": [
                    "Optional[str]"
                ]
            }
        },
        "WorkManager.edit": {
            "name": "edit",
            "location": 148,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "None",
                    "bool",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Mapping",
                    "typing.Mapping"
                ]
            }
        },
        "WorkManager.clean": {
            "name": "clean",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rmHandler": [
                    "Optional[Callable[([str], None)]]"
                ]
            }
        },
        "WorkManager.execute": {
            "name": "execute",
            "location": 173,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "io": [
                    "Optional[str]"
                ],
                "item": [
                    "str",
                    "None",
                    "int",
                    "bytes",
                    "Optional[Any]",
                    "typing.Any",
                    "bool"
                ]
            }
        },
        "WorkManager.judge": {
            "name": "judge",
            "location": 221,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "None",
                    "bool",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Mapping",
                    "typing.Mapping"
                ],
                "judger": [
                    "Optional[str]"
                ]
            }
        }
    },
    "edl-coderunner-master/src/ecr/core/__init__.py": {},
    "edl-coderunner-master/src/ecr/data/judgers/text.py": {
        "judge": {
            "name": "judge",
            "location": 7,
            "return": [
                "Tuple[(ecr.lib.judger.JudgeResult, Optional[str])]"
            ],
            "arguments": {
                "std": [
                    "ecr.lib.judger.DataItem"
                ],
                "out": [
                    "ecr.lib.judger.DataItem"
                ]
            }
        }
    },
    "edl-coderunner-master/src/ecr/data/templates/base.py": {
        "main": {
            "name": "main",
            "location": 1,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "edl-coderunner-master/src/ecr/data/templates/multitest/tools/judger.py": {
        "judgeOne": {
            "name": "judgeOne",
            "location": 11,
            "return": [
                "tuple[str]",
                "str",
                "tuple[None]",
                "float",
                "Union[int, str]",
                "int"
            ],
            "arguments": {
                "std": [
                    "dict",
                    "int",
                    "dict[, ]"
                ],
                "out": [
                    "dict",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "judge": {
            "name": "judge",
            "location": 21,
            "return": [
                "tuple[None]",
                "bool",
                "Optional[bool]",
                "int",
                "Optional[Sequence[str]]",
                "Optional[Callable]"
            ],
            "arguments": {}
        }
    },
    "edl-coderunner-master/src/ecr/data/templates/multitest/tools/runner.py": {
        "runOne": {
            "name": "runOne",
            "location": 11,
            "return": [
                "bool",
                "Awaitable",
                "Iterable[str]",
                "Optional[int]"
            ],
            "arguments": {
                "cmd": [
                    "str",
                    "int",
                    "AnyStr",
                    "typing.AnyStr"
                ],
                "inputFile": [
                    "str",
                    "int",
                    "AnyStr",
                    "typing.AnyStr"
                ],
                "outputFile": [
                    "str",
                    "int",
                    "AnyStr",
                    "typing.AnyStr"
                ],
                "timelimit": [
                    "str",
                    "int",
                    "AnyStr",
                    "typing.AnyStr"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "edl-coderunner-master/src/ecr/lib/console.py": {
        "write": {
            "name": "write",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "info": {
            "name": "info",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "end": [
                    "str"
                ]
            }
        },
        "warning": {
            "name": "warning",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "str"
                ],
                "end": [
                    "str"
                ]
            }
        },
        "error": {
            "name": "error",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "str"
                ],
                "end": [
                    "str"
                ]
            }
        },
        "ok": {
            "name": "ok",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "str"
                ],
                "end": [
                    "str"
                ]
            }
        }
    },
    "edl-coderunner-master/src/ecr/lib/judger.py": {
        "judged": {
            "name": "judged",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "code": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "message": [
                    "str",
                    "None"
                ]
            }
        },
        "assertArgv": {
            "name": "assertArgv",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "getFileNames": {
            "name": "getFileNames",
            "location": 31,
            "return": [
                "tuple[]",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {}
        },
        "getFileContents": {
            "name": "getFileContents",
            "location": 35,
            "return": [
                "tuple[]",
                "str",
                "dict",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "expectedFile": [
                    "str",
                    "Union[str, TextIO]"
                ],
                "realFile": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "trimLineEnd": {
            "name": "trimLineEnd",
            "location": 49,
            "return": [
                "list[str]",
                "str",
                "int",
                "Optional[dict]",
                "List[str]",
                "Iterable",
                "Set[str]",
                "list"
            ],
            "arguments": {
                "data": [
                    "list[typing.Sized]",
                    "bytes",
                    "List[Sized]",
                    "str",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "float"
                ]
            }
        },
        "judging": {
            "name": "judging",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "func": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "autoload": [
                    "bool",
                    "str",
                    "T"
                ]
            }
        },
        "DataItem.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "bool",
                    "Optional[Exception]",
                    "Exception",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "data": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "edl-coderunner-master/src/ecr/lib/runner.py": {
        "runCommands": {
            "name": "runCommands",
            "location": 5,
            "return": [
                "tartare.core.models.Process",
                "List[str]",
                "tartare.core.contexContext",
                "Callable",
                "int"
            ],
            "arguments": {
                "io": [
                    "str",
                    "Callable[[str], str]",
                    "bool",
                    "typing.Callable[str, str]",
                    "List[str]",
                    "list[str]",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Optional[int]",
                    "None"
                ],
                "commands": [
                    "str",
                    "Callable[[str], str]",
                    "bool",
                    "typing.Callable[str, str]",
                    "List[str]",
                    "list[str]",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Optional[int]",
                    "None"
                ],
                "variables": [
                    "str",
                    "Callable[[str], str]",
                    "bool",
                    "typing.Callable[str, str]",
                    "List[str]",
                    "list[str]",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Optional[int]",
                    "None"
                ],
                "wdir": [
                    "str",
                    "Callable[[str], str]",
                    "bool",
                    "typing.Callable[str, str]",
                    "List[str]",
                    "list[str]",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Optional[int]",
                    "None"
                ],
                "getSystemCommand": [
                    "str",
                    "Callable[[str], str]",
                    "bool",
                    "typing.Callable[str, str]",
                    "List[str]",
                    "list[str]",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Optional[int]",
                    "None"
                ],
                "inputFile": [
                    "str",
                    "Callable[[str], str]",
                    "bool",
                    "typing.Callable[str, str]",
                    "List[str]",
                    "list[str]",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Optional[int]",
                    "None"
                ],
                "outputFile": [
                    "str",
                    "Callable[[str], str]",
                    "bool",
                    "typing.Callable[str, str]",
                    "List[str]",
                    "list[str]",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Optional[int]",
                    "None"
                ],
                "defaultTimeLimit": [
                    "str",
                    "None",
                    "Callable[[str], str]",
                    "bool",
                    "List[str]",
                    "typing.Callable[str, str]",
                    "list[str]",
                    "Dict[str, str]",
                    "Optional[int]",
                    "dict[str, str]"
                ],
                "showLog": [
                    "bool",
                    "str",
                    "Callable[[str], str]",
                    "List[str]",
                    "Dict[str, str]",
                    "Optional[int]"
                ]
            }
        }
    },
    "edl-coderunner-master/src/ecr/lib/__init__.py": {},
    "edl-coderunner-master/src/ecr/log/__init__.py": {
        "initializeLogger": {
            "name": "initializeLogger",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "int",
                    "bytes",
                    "float"
                ],
                "level": [
                    "int",
                    "bytes",
                    "float"
                ]
            }
        },
        "colored": {
            "name": "colored",
            "location": 44,
            "return": [
                "HTML",
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "msg": [
                    "str"
                ]
            }
        },
        "errorWithException": {
            "name": "errorWithException",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "msg": [
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "List[str]",
                    "str",
                    "list[str]",
                    "int",
                    "Callable",
                    "Exception",
                    "typing.Callable[, ]"
                ]
            }
        },
        "LogListHandler.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "bytes",
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "list",
                    "list[]",
                    "Optional[Dict[str, Any]]",
                    "None"
                ]
            }
        },
        "LogListHandler.flush": {
            "name": "flush",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogListHandler.emit": {
            "name": "emit",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str"
                ]
            }
        }
    },
    "edl-coderunner-master/src/ecr/template/path.py": {
        "getConfigPath": {
            "name": "getConfigPath",
            "location": 8,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "basepath": [
                    "str"
                ]
            }
        },
        "getConfigFile": {
            "name": "getConfigFile",
            "location": 12,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "basepath": [
                    "str"
                ]
            }
        }
    },
    "edl-coderunner-master/src/ecr/template/_Template.py": {
        "load": {
            "name": "load",
            "location": 21,
            "return": [
                "Tuple[(Optional[Template], Optional[Exception])]"
            ],
            "arguments": {
                "basepath": [
                    "str"
                ]
            }
        },
        "clear": {
            "name": "clear",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "basepath": [
                    "str"
                ]
            }
        },
        "initialize": {
            "name": "initialize",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "basepath": [
                    "str"
                ]
            }
        },
        "Template.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subject": [
                    "str"
                ],
                "rootpath": [
                    "str"
                ]
            }
        }
    },
    "edl-coderunner-master/src/ecr/template/__init__.py": {},
    "edl-coderunner-master/src/ecr/ui/cli.py": {
        "CLI.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inputCommandSession": [
                    "None"
                ]
            }
        },
        "CLI.write": {
            "name": "write",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CLI.info": {
            "name": "info",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "end": [
                    "str"
                ]
            }
        },
        "CLI.warning": {
            "name": "warning",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "end": [
                    "str"
                ]
            }
        },
        "CLI.error": {
            "name": "error",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "end": [
                    "str"
                ]
            }
        },
        "CLI.ok": {
            "name": "ok",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "end": [
                    "str"
                ]
            }
        },
        "CLI.confirm": {
            "name": "confirm",
            "location": 61,
            "return": [
                "SwitchState"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "choice": [
                    "List[SwitchState]"
                ]
            }
        },
        "CLI.write.func": {
            "name": "func",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "edl-coderunner-master/src/ecr/ui/color.py": {
        "useRed": {
            "name": "useRed",
            "location": 4,
            "return": [
                "HTML",
                "str",
                "Tuple[int, int]"
            ],
            "arguments": {
                "content": [
                    "str"
                ]
            }
        },
        "useGreen": {
            "name": "useGreen",
            "location": 8,
            "return": [
                "HTML",
                "str",
                "Tuple[int, int]"
            ],
            "arguments": {
                "content": [
                    "str"
                ]
            }
        },
        "useBlue": {
            "name": "useBlue",
            "location": 12,
            "return": [
                "HTML",
                "str",
                "Tuple[int, int]"
            ],
            "arguments": {
                "content": [
                    "str"
                ]
            }
        },
        "useCyan": {
            "name": "useCyan",
            "location": 16,
            "return": [
                "HTML",
                "str",
                "Tuple[int, int]"
            ],
            "arguments": {
                "content": [
                    "str"
                ]
            }
        },
        "useYellow": {
            "name": "useYellow",
            "location": 20,
            "return": [
                "HTML",
                "str",
                "Tuple[int, int]"
            ],
            "arguments": {
                "content": [
                    "str"
                ]
            }
        }
    },
    "edl-coderunner-master/src/ecr/ui/command.py": {
        "Command.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verb": [
                    "str"
                ],
                "help": [
                    "str"
                ],
                "func": [
                    "Callable[([argparse.Namespace], ReturnCode)]"
                ]
            }
        },
        "Command.createParser": {
            "name": "createParser",
            "location": 21,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "parsers": [
                    "argparse.ArgumentParser",
                    "argparse._SubParsersAction"
                ]
            }
        }
    },
    "edl-coderunner-master/src/ecr/ui/__init__.py": {
        "getConsole": {
            "name": "getConsole",
            "location": 7,
            "return": [
                "CLI",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "setConsole": {
            "name": "setConsole",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "cli": [
                    "bool",
                    "float"
                ]
            }
        }
    },
    "edl-coderunner-master/src/ecr/ui/helper/BashLexer.py": {
        "BashLexer.analyse_text": {
            "name": "analyse_text",
            "location": 101,
            "return": [
                "Optional[Union[(float, int)]]"
            ],
            "arguments": {
                "text": [
                    "BashLexer"
                ]
            }
        }
    },
    "edl-coderunner-master/src/ecr/ui/helper/PathCompleter.py": {
        "PathCompleter.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "only_directories": [
                    "bool",
                    "str",
                    "MutableMapping[str, str]",
                    "List[Dict]",
                    "dict",
                    "Optional[str]"
                ],
                "get_paths": [
                    "Optional[str]",
                    "None",
                    "Optional[Callable[[str], str]]",
                    "str",
                    "typing.Callable[str, str]"
                ],
                "file_filter": [
                    "dict",
                    "None",
                    "Dict[str, str]",
                    "dict[, ]",
                    "Optional[str]",
                    "dict[str, str]",
                    "str"
                ],
                "min_input_len": [
                    "int",
                    "str",
                    "Union[str, int]"
                ],
                "expanduser": [
                    "bool",
                    "Optional[str]",
                    "Optional[bool]"
                ]
            }
        },
        "PathCompleter.get_completions": {
            "name": "get_completions",
            "location": 30,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "str",
                    "bytes",
                    "IO[bytes]",
                    "typing.IO"
                ],
                "complete_event": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "dict",
                    "int"
                ]
            }
        }
    },
    "edl-coderunner-master/src/ecr/ui/helper/__init__.py": {}
}
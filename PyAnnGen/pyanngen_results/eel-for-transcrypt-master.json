{
    "eel-for-transcrypt-master/setup.py": {},
    "eel-for-transcrypt-master/docs/conf.py": {},
    "eel-for-transcrypt-master/eel_for_transcrypt/browsers.py": {
        "_build_url_from_dict": {
            "name": "_build_url_from_dict",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "page": [
                    "dict[str, str]",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict",
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]",
                    "Sequence[str]"
                ],
                "options": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "_build_url_from_string": {
            "name": "_build_url_from_string",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "page": [
                    "str",
                    "Union[List, str]"
                ],
                "options": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "_build_urls": {
            "name": "_build_urls",
            "location": 18,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "start_pages": [
                    "list[str]",
                    "str",
                    "int",
                    "bool",
                    "Optional[List[str]]"
                ],
                "options": [
                    "int",
                    "str",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "open": {
            "name": "open",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "start_pages": [
                    "str",
                    "bool",
                    "Optional[Any]",
                    "typing.Any",
                    "list",
                    "None",
                    "list[]"
                ],
                "options": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Optional[dict]",
                    "int"
                ]
            }
        }
    },
    "eel-for-transcrypt-master/eel_for_transcrypt/chrome.py": {
        "run": {
            "name": "run",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {
                "options": [
                    "list[str]",
                    "List[str]",
                    "IO",
                    "Iterable[Any]",
                    "bool"
                ],
                "start_urls": [
                    "Optional[str]",
                    "Tuple[int, int]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "get_instance_path": {
            "name": "get_instance_path",
            "location": 21,
            "return": [
                "None",
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "find_chrome_mac": {
            "name": "find_chrome_mac",
            "location": 32,
            "return": [
                "Optional[str]"
            ],
            "arguments": {}
        },
        "find_chrome_linux": {
            "name": "find_chrome_linux",
            "location": 44,
            "return": [
                "str",
                "Optional[str]",
                "Optional[int]",
                "list[str]",
                "list[dict[str, str]]",
                "bool",
                "None"
            ],
            "arguments": {}
        },
        "find_chrome_win": {
            "name": "find_chrome_win",
            "location": 58,
            "return": [
                "str",
                "None"
            ],
            "arguments": {}
        }
    },
    "eel-for-transcrypt-master/eel_for_transcrypt/__init__.py": {
        "listpossible_local_imports": {
            "name": "listpossible_local_imports",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "set_timeouts": {
            "name": "set_timeouts",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "timeout": [
                    "bool",
                    "int"
                ]
            }
        },
        "set_timeout_js": {
            "name": "set_timeout_js",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "timeout": [
                    "int",
                    "Iterator[int]",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "set_timeout_py": {
            "name": "set_timeout_py",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "timeout": [
                    "int",
                    "Iterator[int]",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "notcommented": {
            "name": "notcommented",
            "location": 113,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "line": [
                    "List[AnyStr]",
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "Iterable[Sequence[str]]"
                ]
            }
        },
        "find_exposed_transcrypt_functions": {
            "name": "find_exposed_transcrypt_functions",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "filepath": [
                    "str"
                ],
                "caller": [
                    "Tuple[int]",
                    "Sequence",
                    "str"
                ]
            }
        },
        "search_in_import": {
            "name": "search_in_import",
            "location": 133,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "strval": [
                    "IO",
                    "dict",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "add_to_callers": {
            "name": "add_to_callers",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "caller": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "strval": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "jscaller": {
            "name": "jscaller",
            "location": 142,
            "return": [
                "mypy.types.Type",
                "type",
                "eggman.types.Handler"
            ],
            "arguments": {}
        },
        "new_import": {
            "name": "new_import",
            "location": 148,
            "return": [
                "Callable[([Any, Any, Any, Any, Any], Any)]"
            ],
            "arguments": {
                "old_import": [
                    "bool",
                    "int",
                    "List[str]",
                    "Dict[str, Any]",
                    "str",
                    "slice"
                ]
            }
        },
        "new_import_backend": {
            "name": "new_import_backend",
            "location": 181,
            "return": [
                "Callable[([Any, Any, Any, Any, Any], Any)]"
            ],
            "arguments": {
                "old_import": [
                    "bool",
                    "int",
                    "List[str]",
                    "Dict[str, Any]",
                    "str",
                    "slice"
                ]
            }
        },
        "import_frontend_functions": {
            "name": "import_frontend_functions",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "import_backend_modules": {
            "name": "import_backend_modules",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {
                "already_imported": [
                    "Optional",
                    "List[Dict[str, str]]",
                    "dict"
                ]
            }
        },
        "apply_factories": {
            "name": "apply_factories",
            "location": 258,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "inputfactory": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "outputfactory": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "expose": {
            "name": "expose",
            "location": 280,
            "return": [
                "Union[(Callable, _T0)]"
            ],
            "arguments": {
                "name_or_function": [
                    "_T0"
                ],
                "outputfactory": [
                    "bool",
                    "mypy.types.Overloaded",
                    "str",
                    "List[mypy.types.Type]",
                    "Set[str]",
                    "List[str]"
                ],
                "inputfactory": [
                    "bool",
                    "mypy.types.Overloaded",
                    "str",
                    "List[mypy.types.Type]",
                    "Set[str]",
                    "List[str]"
                ]
            }
        },
        "init": {
            "name": "init",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "List[str]",
                    "str",
                    "int"
                ],
                "search_exposed_js": [
                    "bool",
                    "list",
                    "str"
                ],
                "search_into_imports": [
                    "bool",
                    "list",
                    "str"
                ]
            }
        },
        "register_backend_names": {
            "name": "register_backend_names",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "listofnames": [
                    "str",
                    "Callable",
                    "bool"
                ]
            }
        },
        "register_frontend_js_files": {
            "name": "register_frontend_js_files",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "filepathlist": [
                    "str",
                    "bool",
                    "Union[str, IO[bytes]]"
                ]
            }
        },
        "build_autobridgejs": {
            "name": "build_autobridgejs",
            "location": 324,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "search_in_static_files": {
            "name": "search_in_static_files",
            "location": 350,
            "return": [
                "set"
            ],
            "arguments": {
                "root_path": [
                    "str",
                    "os.PathLike"
                ]
            }
        },
        "start": {
            "name": "start",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "sleep": {
            "name": "sleep",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {
                "seconds": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "spawn": {
            "name": "spawn",
            "location": 418,
            "return": [
                "None"
            ],
            "arguments": {
                "function": []
            }
        },
        "_eel": {
            "name": "_eel",
            "location": 424,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "_bridge": {
            "name": "_bridge",
            "location": 434,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "_static": {
            "name": "_static",
            "location": 441,
            "return": [
                "Callable[[Mapping], Awaitable]",
                "Callable[[], Awaitable[Mapping]]",
                "List[Dict]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "_websocket": {
            "name": "_websocket",
            "location": 446,
            "return": [
                ""
            ],
            "arguments": {
                "ws": [
                    "types.PILVideo",
                    "int",
                    "str"
                ]
            }
        },
        "_repeated_send": {
            "name": "_repeated_send",
            "location": 474,
            "return": [
                "None"
            ],
            "arguments": {
                "ws": [
                    "str"
                ],
                "msg": [
                    "str",
                    "int",
                    "Exception",
                    "Callable",
                    "Union[str, int]",
                    "logging.Logger"
                ]
            }
        },
        "call_debug_eel": {
            "name": "call_debug_eel",
            "location": 488,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_process_message": {
            "name": "_process_message",
            "location": 495,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "bytes"
                ],
                "ws": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_get_real_path": {
            "name": "_get_real_path",
            "location": 541,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "_mock_js_function": {
            "name": "_mock_js_function",
            "location": 548,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "str",
                    "Dict[str, Any]",
                    "callable",
                    "List[Callable]",
                    "dict"
                ]
            }
        },
        "_import_js_function": {
            "name": "_import_js_function",
            "location": 556,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "str",
                    "Dict[str, Any]",
                    "callable",
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "_call_object": {
            "name": "_call_object",
            "location": 563,
            "return": [
                "Dict[(str, Union[(float, _T0, _T1)])]"
            ],
            "arguments": {
                "name": [
                    "_T0"
                ],
                "args": [
                    "_T1"
                ]
            }
        },
        "_mock_call": {
            "name": "_mock_call",
            "location": 570,
            "return": [
                "Callable"
            ],
            "arguments": {
                "name": [
                    "str",
                    "type",
                    "Optional[str]"
                ],
                "args": []
            }
        },
        "_js_call": {
            "name": "_js_call",
            "location": 577,
            "return": [
                "Callable"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "args": []
            }
        },
        "_call_return": {
            "name": "_call_return",
            "location": 586,
            "return": [
                "Callable"
            ],
            "arguments": {
                "call": [
                    "bool",
                    "type",
                    "Optional[List]",
                    "mypy.types.Instance"
                ]
            }
        },
        "_expose": {
            "name": "_expose",
            "location": 630,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "function": [
                    "str",
                    "dict"
                ]
            }
        },
        "_websocket_close": {
            "name": "_websocket_close",
            "location": 636,
            "return": [
                "None"
            ],
            "arguments": {
                "page": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_debug_health_check": {
            "name": "_debug_health_check",
            "location": 649,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "eel_json_dumps": {
            "name": "eel_json_dumps",
            "location": 672,
            "return": [
                "str"
            ],
            "arguments": {
                "target": [
                    "dict",
                    "os.DirEntry",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "BroadcastQueue.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BroadcastQueue.register": {
            "name": "register",
            "location": 84,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BroadcastQueue.broadcast": {
            "name": "broadcast",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "multiprocessing.Queue",
                    "str"
                ]
            }
        },
        "new_import.new_new_import": {
            "name": "new_new_import",
            "location": 155,
            "return": [
                "List[int]",
                "str",
                "List[List[int]]"
            ],
            "arguments": {
                "strval": [
                    "str",
                    "Dict[str, Any]",
                    "tuple",
                    "int",
                    "bool",
                    "dict"
                ],
                "globs": [],
                "locs": [],
                "alist": [
                    "List[Dict[str, Any]]"
                ],
                "anumber": []
            }
        },
        "new_import_backend.new_new_back_import": {
            "name": "new_new_back_import",
            "location": 190,
            "return": [
                "List[int]",
                "str",
                "List[List[int]]"
            ],
            "arguments": {
                "strval": [
                    "Dict[str, Any]",
                    "str",
                    "list"
                ],
                "globs": [],
                "locs": [],
                "alist": [],
                "anumber": []
            }
        },
        "apply_factories.new_decorator": {
            "name": "new_decorator",
            "location": 259,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "func": [
                    "Callable"
                ]
            }
        },
        "_call_return.return_func": {
            "name": "return_func",
            "location": 589,
            "return": [
                "bool",
                "type",
                "Optional[T]"
            ],
            "arguments": {
                "callback": [
                    "bool"
                ]
            }
        },
        "EelJSONEncoder.default": {
            "name": "default",
            "location": 666,
            "return": [
                "List[int]",
                "int",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "mypy.types.TypeVarDef",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "apply_factories.new_decorator.newfunction": {
            "name": "newfunction",
            "location": 261,
            "return": [
                "int",
                "str",
                "Tuple[float, float, float]"
            ],
            "arguments": {}
        },
        "expose.decorator": {
            "name": "decorator",
            "location": 290,
            "return": [
                "Sequence['cirq.Qid']",
                "list"
            ],
            "arguments": {
                "function": [
                    "Type[T]",
                    "str",
                    "Set[str]",
                    "Exception",
                    "int",
                    "Callable"
                ]
            }
        },
        "start.run_lambda": {
            "name": "run_lambda",
            "location": 401,
            "return": [],
            "arguments": {}
        },
        "_call_return.return_func.agenerator": {
            "name": "agenerator",
            "location": 607,
            "return": [
                ""
            ],
            "arguments": {
                "val": [
                    "float",
                    "Dict[str, Dict[str, int]]"
                ]
            }
        }
    },
    "eel-for-transcrypt-master/eel_for_transcrypt/__main__.py": {},
    "eel-for-transcrypt-master/tests/anotherbackend.py": {
        "substract": {
            "name": "substract",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "a": [
                    "bool",
                    "str",
                    "Iterable",
                    "Iterable[str]",
                    "Sequence[T]"
                ],
                "b": [
                    "bool",
                    "str",
                    "Iterable",
                    "Iterable[str]",
                    "Sequence[T]"
                ]
            }
        }
    },
    "eel-for-transcrypt-master/tests/backend.py": {
        "restart": {
            "name": "restart",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "page": [],
                "websockets": []
            }
        },
        "start": {
            "name": "start",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "block": [
                    "bool"
                ],
                "webpath": [
                    "typing.Text"
                ],
                "alive": [
                    "bool"
                ]
            }
        }
    },
    "eel-for-transcrypt-master/tests/transtest.py": {
        "chrome_options": {
            "name": "chrome_options",
            "location": 28,
            "return": [],
            "arguments": {
                "chrome_options": []
            }
        },
        "transpiled_file": {
            "name": "transpiled_file",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "build_send_getback_a_dataclass": {
            "name": "build_send_getback_a_dataclass",
            "location": 45,
            "return": [],
            "arguments": {
                "transpiled_file": [],
                "selenium": []
            }
        },
        "accept_a_dataclass": {
            "name": "accept_a_dataclass",
            "location": 53,
            "return": [],
            "arguments": {
                "transpiled_file": [],
                "selenium": []
            }
        },
        "get_a_dataclass": {
            "name": "get_a_dataclass",
            "location": 61,
            "return": [],
            "arguments": {
                "transpiled_file": [],
                "selenium": []
            }
        },
        "identity_js": {
            "name": "identity_js",
            "location": 69,
            "return": [],
            "arguments": {
                "transpiled_file": [],
                "selenium": []
            }
        },
        "call_a_python_generator_from_js": {
            "name": "call_a_python_generator_from_js",
            "location": 77,
            "return": [],
            "arguments": {
                "transpiled_file": [],
                "selenium": []
            }
        },
        "transcrypt_async_generator": {
            "name": "transcrypt_async_generator",
            "location": 85,
            "return": [],
            "arguments": {
                "transpiled_file": [],
                "selenium": []
            }
        },
        "transcrypt_generator": {
            "name": "transcrypt_generator",
            "location": 93,
            "return": [],
            "arguments": {
                "transpiled_file": [],
                "selenium": []
            }
        },
        "identity_py": {
            "name": "identity_py",
            "location": 101,
            "return": [],
            "arguments": {
                "transpiled_file": [],
                "selenium": []
            }
        },
        "start": {
            "name": "start",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "selenium": [],
                "block": [
                    "bool"
                ],
                "webpath": [
                    "typing.Text"
                ],
                "alive": [
                    "bool"
                ]
            }
        },
        "restart": {
            "name": "restart",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "selenium": [],
                "page": [],
                "websockets": []
            }
        },
        "wait_for_value1": {
            "name": "wait_for_value1",
            "location": 128,
            "return": [
                "bool"
            ],
            "arguments": {
                "selenium": []
            }
        },
        "test_identity_simple_types_strategy": {
            "name": "test_identity_simple_types_strategy",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [],
                "identity_js": []
            }
        },
        "test_identity_collections": {
            "name": "test_identity_collections",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [],
                "identity_js": []
            }
        },
        "test_identity_simple_types": {
            "name": "test_identity_simple_types",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "identity_js": []
            }
        },
        "test_identity_caller": {
            "name": "test_identity_caller",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "identity_py": []
            }
        },
        "test_identity_simple_types_strategy_py": {
            "name": "test_identity_simple_types_strategy_py",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [],
                "identity_py": []
            }
        },
        "test_identity_collections_py": {
            "name": "test_identity_collections_py",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [],
                "identity_py": []
            }
        },
        "test_transcrypt_generator": {
            "name": "test_transcrypt_generator",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "transcrypt_generator": []
            }
        },
        "test_python_generator": {
            "name": "test_python_generator",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "call_a_python_generator_from_js": []
            }
        },
        "test_transcrypt_generator_single_val": {
            "name": "test_transcrypt_generator_single_val",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "transcrypt_generator": []
            }
        },
        "test_python_generator_single_val": {
            "name": "test_python_generator_single_val",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "call_a_python_generator_from_js": []
            }
        },
        "test_spike_dataclass": {
            "name": "test_spike_dataclass",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [],
                "get_a_dataclass": [],
                "build_send_getback_a_dataclass": [],
                "accept_a_dataclass": []
            }
        },
        "test_not_too_sluggish_js_function": {
            "name": "test_not_too_sluggish_js_function",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "transpiled_file": [],
                "selenium": []
            }
        },
        "test_too_sluggish_js_function": {
            "name": "test_too_sluggish_js_function",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "transpiled_file": [],
                "selenium": []
            }
        },
        "test_too_sluggish_py_function": {
            "name": "test_too_sluggish_py_function",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "transpiled_file": [],
                "selenium": []
            }
        },
        "test_python_call_with_kwargs": {
            "name": "test_python_call_with_kwargs",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "transpiled_file": [],
                "selenium": []
            }
        },
        "call_a_gen": {
            "name": "call_a_gen",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "transcrypt_async_generator": []
            }
        },
        "test_call_multiple_js_generators": {
            "name": "test_call_multiple_js_generators",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "transcrypt_async_generator": []
            }
        }
    },
    "eel-for-transcrypt-master/tests/web/anotherfrontend.py": {
        "__pragma__": {
            "name": "__pragma__",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "biglogger": {
            "name": "biglogger",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "val": []
            }
        }
    },
    "eel-for-transcrypt-master/tests/web/backend_pytest.py": {
        "i_return_the_same": {
            "name": "i_return_the_same",
            "location": 5,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "int",
                "Callable[[str], bool]",
                "List[object]",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "anything": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "a_generator": {
            "name": "a_generator",
            "location": 9,
            "return": [
                "",
                "typing.Generator[range]"
            ],
            "arguments": {
                "mn": [
                    "int",
                    "float",
                    "str"
                ],
                "mx": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "return_a_dataclass": {
            "name": "return_a_dataclass",
            "location": 16,
            "return": [
                "int",
                "str",
                "Optional[str]",
                "None"
            ],
            "arguments": {
                "datac": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "sluggish": {
            "name": "sluggish",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "timeout": [
                    "float",
                    "int",
                    "None",
                    "Optional[float]",
                    "bool",
                    "Union[int, float]"
                ]
            }
        }
    },
    "eel-for-transcrypt-master/tests/web/common.py": {
        "InventoryItem.compute": {
            "name": "compute",
            "location": 10,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "eel-for-transcrypt-master/tests/web/frontendscrypt.py": {
        "__pragma__": {
            "name": "__pragma__",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "logdone": {
            "name": "logdone",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "show_previous_results": {
            "name": "show_previous_results",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "lines": []
            }
        },
        "SharedState.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val1": [],
                "val2": []
            }
        }
    },
    "eel-for-transcrypt-master/tests/web/fronts.py": {},
    "eel-for-transcrypt-master/tests/web/pyparser.py": {
        "notcommented": {
            "name": "notcommented",
            "location": 5,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "line": [
                    "list[typing.AnyStr]",
                    "str",
                    "List[AnyStr]",
                    "list[str]",
                    "List[str]",
                    "Iterable[str]",
                    "Iterable[Sequence[str]]"
                ]
            }
        }
    },
    "eel-for-transcrypt-master/tests/web/tests.py": {
        "applyfact": {
            "name": "applyfact",
            "location": 19,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "inputfactory": [
                    "int",
                    "None",
                    "str",
                    "Iterable['Context']",
                    "typing.Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "outputfactory": [
                    "int",
                    "None",
                    "str",
                    "Iterable['Context']",
                    "typing.Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "identity_js": {
            "name": "identity_js",
            "location": 45,
            "return": [
                "_T0"
            ],
            "arguments": {
                "anything": [
                    "_T0"
                ]
            }
        },
        "transcrypt_generator": {
            "name": "transcrypt_generator",
            "location": 52,
            "return": [
                "Generator[(int, Any, None)]"
            ],
            "arguments": {
                "mn": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "mx": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "timer": {
            "name": "timer",
            "location": 95,
            "return": [
                "allennlp.common.util.JsonDict",
                "Union[\"RangeSet[T]\", Iterable[Any]]",
                "int"
            ],
            "arguments": {
                "length": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "aminusb": {
            "name": "aminusb",
            "location": 110,
            "return": [
                "int",
                "float",
                "Tuple[Any, Any, Any]",
                "bytearray",
                "str"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ],
                "b": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "applyfact.applyfact_inside": {
            "name": "applyfact_inside",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "timer.timer_elapse": {
            "name": "timer_elapse",
            "location": 97,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "resolve": [
                    "str",
                    "bool",
                    "bytes",
                    "int"
                ]
            }
        },
        "applyfact.applyfact_inside.newfunction": {
            "name": "newfunction",
            "location": 22,
            "return": [
                "int",
                "str",
                "Tuple[float, float, float]"
            ],
            "arguments": {}
        }
    },
    "eel-for-transcrypt-master/tests/web/imports/allthepongs.py": {},
    "eel-for-transcrypt-master/tests/web/imports/ping1.py": {
        "pingball": {
            "name": "pingball",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "counter": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "eel-for-transcrypt-master/tests/web/imports/ping2.py": {
        "ping2": {
            "name": "ping2",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "counter": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "eel-for-transcrypt-master/tests/web/imports/pong1.py": {
        "__pragma__": {
            "name": "__pragma__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "eel-for-transcrypt-master/tests/web/imports/pong2.py": {
        "__pragma__": {
            "name": "__pragma__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "pingball": {
            "name": "pingball",
            "location": 23,
            "return": [],
            "arguments": {
                "counter": []
            }
        }
    },
    "eel-for-transcrypt-master/tests/web/imports/test_imports.py": {
        "chrome_options": {
            "name": "chrome_options",
            "location": 27,
            "return": [],
            "arguments": {
                "chrome_options": []
            }
        },
        "transpiled_file": {
            "name": "transpiled_file",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "start": {
            "name": "start",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "selenium": [],
                "block": [
                    "bool"
                ],
                "webpath": [
                    "typing.Text"
                ],
                "alive": [
                    "bool"
                ]
            }
        },
        "restart": {
            "name": "restart",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "selenium": [],
                "page": [],
                "websockets": []
            }
        },
        "wait_for_value1": {
            "name": "wait_for_value1",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "selenium": []
            }
        },
        "test_imports": {
            "name": "test_imports",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "transpiled_file": [],
                "selenium": []
            }
        },
        "test_already_imported": {
            "name": "test_already_imported",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "transpiled_file": []
            }
        },
        "test_already_imported_but_safer": {
            "name": "test_already_imported_but_safer",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "transpiled_file": []
            }
        },
        "test_correct_import_frontends": {
            "name": "test_correct_import_frontends",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "transpiled_file": []
            }
        },
        "test_correct_import_frontends_as": {
            "name": "test_correct_import_frontends_as",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "transpiled_file": []
            }
        },
        "test_back_uncorrect_imports": {
            "name": "test_back_uncorrect_imports",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "transpiled_file": []
            }
        },
        "test_uncorrect_imports_front": {
            "name": "test_uncorrect_imports_front",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "transpiled_file": []
            }
        }
    }
}
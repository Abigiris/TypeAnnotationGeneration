{
    "elib_miz-master/setup.py": {
        "read_local_files": {
            "name": "read_local_files",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "read_local_files._read_single_file": {
            "name": "_read_single_file",
            "location": 47,
            "return": [
                "str",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "file_path": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "elib_miz-master/elib_miz/dummy_miz.py": {},
    "elib_miz-master/elib_miz/exc.py": {
        "MizFileNotFoundError.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "miz_file_path": [
                    "str"
                ]
            }
        },
        "MizFileAlreadyExistsError.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "miz_file_path": [
                    "str"
                ]
            }
        },
        "InvalidDateTimeString.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "time_str": [
                    "str"
                ]
            }
        }
    },
    "elib_miz-master/elib_miz/mission.py": {
        "BaseMissionObject.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mission_dict": [
                    "dict",
                    "bool",
                    "int"
                ],
                "l10n": [
                    "int",
                    "Dict[str, float]"
                ]
            }
        },
        "BaseMissionObject.get_country_by_name": {
            "name": "get_country_by_name",
            "location": 46,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "country_name": [
                    "str"
                ]
            }
        },
        "BaseMissionObject.get_country_by_id": {
            "name": "get_country_by_id",
            "location": 66,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "country_id": [
                    "str",
                    "bytes"
                ]
            }
        },
        "BaseMissionObject.get_groups_from_category": {
            "name": "get_groups_from_category",
            "location": 86,
            "return": [
                "typing.Iterator['Group']"
            ],
            "arguments": {
                "self": [],
                "category": []
            }
        },
        "BaseMissionObject.get_units_from_category": {
            "name": "get_units_from_category",
            "location": 100,
            "return": [
                "typing.Iterator['BaseUnit']"
            ],
            "arguments": {
                "self": [],
                "category": [
                    "str",
                    "dict"
                ]
            }
        },
        "BaseMissionObject.get_group_by_id": {
            "name": "get_group_by_id",
            "location": 114,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "group_id": [
                    "str",
                    "int",
                    "Iterable[int]"
                ]
            }
        },
        "BaseMissionObject.get_clients_groups": {
            "name": "get_clients_groups",
            "location": 130,
            "return": [
                "typing.Iterator['Group']"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMissionObject.get_group_by_name": {
            "name": "get_group_by_name",
            "location": 141,
            "return": [
                "Optional[str]",
                "bool",
                "dict",
                "list"
            ],
            "arguments": {
                "self": [],
                "group_name": [
                    "str"
                ]
            }
        },
        "BaseMissionObject.get_unit_by_name": {
            "name": "get_unit_by_name",
            "location": 157,
            "return": [
                "Optional[str]",
                "bool",
                "dict",
                "list"
            ],
            "arguments": {
                "self": [],
                "unit_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "BaseMissionObject.get_unit_by_id": {
            "name": "get_unit_by_id",
            "location": 173,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "unit_id": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[Any]"
                ]
            }
        },
        "BaseMissionObject.units": {
            "name": "units",
            "location": 190,
            "return": [
                "typing.Iterator['BaseUnit']"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMissionObject.groups": {
            "name": "groups",
            "location": 202,
            "return": [
                "typing.Iterator['Group']"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMissionObject.next_group_id": {
            "name": "next_group_id",
            "location": 214,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMissionObject.next_unit_id": {
            "name": "next_unit_id",
            "location": 228,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMissionObject.coalitions": {
            "name": "coalitions",
            "location": 242,
            "return": [
                "typing.Iterator['Coalition']"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMissionObject.countries": {
            "name": "countries",
            "location": 251,
            "return": [
                "typing.Iterator['Country']"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMissionObject._section_date": {
            "name": "_section_date",
            "location": 261,
            "return": [
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMissionObject.second": {
            "name": "second",
            "location": 270,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "BaseMissionObject.minute": {
            "name": "minute",
            "location": 282,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "BaseMissionObject.hour": {
            "name": "hour",
            "location": 294,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "BaseMissionObject.day": {
            "name": "day",
            "location": 308,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "Optional[str]"
                ]
            }
        },
        "BaseMissionObject.month": {
            "name": "month",
            "location": 321,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "dict",
                    "bool",
                    "Callable"
                ]
            }
        },
        "BaseMissionObject.year": {
            "name": "year",
            "location": 334,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "dict",
                    "bool",
                    "Callable"
                ]
            }
        },
        "BaseMissionObject.mission_start_time": {
            "name": "mission_start_time",
            "location": 347,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "float"
                ]
            }
        },
        "BaseMissionObject._start_time_as_string": {
            "name": "_start_time_as_string",
            "location": 352,
            "return": [
                "Tuple[float, float]",
                "str",
                "bool"
            ],
            "arguments": {
                "start_time": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "BaseMissionObject._start_date_as_string": {
            "name": "_start_date_as_string",
            "location": 356,
            "return": [
                "str"
            ],
            "arguments": {
                "day": [
                    "int",
                    "str",
                    "bool"
                ],
                "month": [
                    "int",
                    "str",
                    "bool"
                ],
                "year": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "BaseMissionObject._start_datetime_as_string": {
            "name": "_start_datetime_as_string",
            "location": 359,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "startime": [
                    "str",
                    "float"
                ]
            }
        },
        "BaseMissionObject.mission_start_time_as_string": {
            "name": "mission_start_time_as_string",
            "location": 363,
            "return": [
                "str",
                "int",
                "Optional[Set[str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMissionObject.mission_start_date_as_string": {
            "name": "mission_start_date_as_string",
            "location": 370,
            "return": [
                "str",
                "bool",
                "Optional[List[Any]]",
                "Type[T]",
                "dict",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMissionObject.mission_start_datetime_as_string": {
            "name": "mission_start_datetime_as_string",
            "location": 377,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMissionObject._sortie_name_key": {
            "name": "_sortie_name_key",
            "location": 384,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMissionObject.sortie_name": {
            "name": "sortie_name",
            "location": 395,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bytes",
                    "AnyStr"
                ]
            }
        },
        "Mission.__init__": {
            "name": "__init__",
            "location": 460,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mission_dict": [
                    "int",
                    "float",
                    "bool"
                ],
                "l10n": [
                    "int",
                    "Optional[Any]",
                    "Optional[float]",
                    "bool",
                    "float"
                ]
            }
        },
        "Mission.__repr__": {
            "name": "__repr__",
            "location": 467,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mission.theatre": {
            "name": "theatre",
            "location": 471,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mission.blue_coa": {
            "name": "blue_coa",
            "location": 479,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mission.red_coa": {
            "name": "red_coa",
            "location": 486,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mission.farps": {
            "name": "farps",
            "location": 492,
            "return": [
                "typing.Iterator['Static']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coalition.__init__": {
            "name": "__init__",
            "location": 508,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mission_dict": [],
                "ln10": [],
                "coa_color": [
                    "str",
                    "bool",
                    "List[str]",
                    "Sequence[str]",
                    "float",
                    "bytes",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Coalition.__repr__": {
            "name": "__repr__",
            "location": 513,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coalition.__eq__": {
            "name": "__eq__",
            "location": 516,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "List[Dict[str, str]]",
                    "Callable[[str], str]"
                ]
            }
        },
        "Coalition._section_coalition": {
            "name": "_section_coalition",
            "location": 522,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coalition._section_bullseye": {
            "name": "_section_bullseye",
            "location": 526,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coalition.bullseye_x": {
            "name": "bullseye_x",
            "location": 530,
            "return": [
                "int",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coalition.bullseye_y": {
            "name": "bullseye_y",
            "location": 537,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coalition.bullseye_position": {
            "name": "bullseye_position",
            "location": 544,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coalition._section_nav_points": {
            "name": "_section_nav_points",
            "location": 551,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coalition.coalition_name": {
            "name": "coalition_name",
            "location": 555,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coalition._section_country": {
            "name": "_section_country",
            "location": 562,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coalition.countries": {
            "name": "countries",
            "location": 566,
            "return": [
                "typing.Iterator['Country']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coalition.get_country_by_name": {
            "name": "get_country_by_name",
            "location": 578,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "country_name": [
                    "str"
                ]
            }
        },
        "Coalition.get_country_by_id": {
            "name": "get_country_by_id",
            "location": 597,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "country_id": [
                    "bytes",
                    "str",
                    "Set[str]",
                    "bool",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Coalition.groups": {
            "name": "groups",
            "location": 617,
            "return": [
                "typing.Iterator['Group']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coalition.statics": {
            "name": "statics",
            "location": 628,
            "return": [
                "typing.Iterator['Static']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coalition.farps": {
            "name": "farps",
            "location": 639,
            "return": [
                "typing.Iterator['Static']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coalition.get_groups_from_category": {
            "name": "get_groups_from_category",
            "location": 648,
            "return": [
                "typing.Iterator['Group']"
            ],
            "arguments": {
                "self": [],
                "category": []
            }
        },
        "Coalition.get_units_from_category": {
            "name": "get_units_from_category",
            "location": 661,
            "return": [
                "typing.Iterator['BaseUnit']"
            ],
            "arguments": {
                "self": [],
                "category": [
                    "str",
                    "dict"
                ]
            }
        },
        "Coalition.get_group_by_id": {
            "name": "get_group_by_id",
            "location": 674,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "group_id": [
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "Trig.__init__": {
            "name": "__init__",
            "location": 695,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mission_dict": [
                    "int",
                    "float",
                    "bool"
                ],
                "l10n": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Trig._section_trig": {
            "name": "_section_trig",
            "location": 699,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Result.__init__": {
            "name": "__init__",
            "location": 708,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mission_dict": [
                    "int",
                    "float",
                    "bool"
                ],
                "l10n": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Result._section_result": {
            "name": "_section_result",
            "location": 712,
            "return": [
                "Dict[str, bool]",
                "Dict[str, Tuple[Any, Any]]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroundControl.__init__": {
            "name": "__init__",
            "location": 722,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mission_dict": [
                    "int",
                    "float",
                    "bool"
                ],
                "l10n": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "GroundControl.__repr__": {
            "name": "__repr__",
            "location": 725,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroundControl._section_ground_control": {
            "name": "_section_ground_control",
            "location": 729,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroundControl._section_ground_control_roles": {
            "name": "_section_ground_control_roles",
            "location": 733,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroundControl.pilots_control_vehicles": {
            "name": "pilots_control_vehicles",
            "location": 744,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict",
                    "bool",
                    "T"
                ]
            }
        },
        "GroundControl._section_artillery_commander": {
            "name": "_section_artillery_commander",
            "location": 749,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroundControl.artillery_commander_red": {
            "name": "artillery_commander_red",
            "location": 760,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict",
                    "bool",
                    "T"
                ]
            }
        },
        "GroundControl.instructor_blue": {
            "name": "instructor_blue",
            "location": 772,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Callable",
                    "bool",
                    "float"
                ]
            }
        },
        "GroundControl.instructor_red": {
            "name": "instructor_red",
            "location": 784,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Callable",
                    "bool",
                    "float"
                ]
            }
        },
        "GroundControl._section_observer": {
            "name": "_section_observer",
            "location": 789,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroundControl.observer_blue": {
            "name": "observer_blue",
            "location": 800,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Callable",
                    "bool",
                    "float"
                ]
            }
        },
        "GroundControl.observer_red": {
            "name": "observer_red",
            "location": 812,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Callable",
                    "bool",
                    "float"
                ]
            }
        },
        "GroundControl._section_forward_observer": {
            "name": "_section_forward_observer",
            "location": 817,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroundControl.forward_observer_blue": {
            "name": "forward_observer_blue",
            "location": 828,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict",
                    "bool",
                    "T"
                ]
            }
        },
        "GroundControl.forward_observer_red": {
            "name": "forward_observer_red",
            "location": 840,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict",
                    "bool",
                    "T"
                ]
            }
        },
        "GroundControl.artillery_commander_blue": {
            "name": "artillery_commander_blue",
            "location": 852,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict",
                    "bool",
                    "T"
                ]
            }
        },
        "GroundControl._section_instructor": {
            "name": "_section_instructor",
            "location": 857,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Weather.__init__": {
            "name": "__init__",
            "location": 914,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mission_dict": [
                    "int",
                    "float",
                    "bool"
                ],
                "l10n": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Weather.__repr__": {
            "name": "__repr__",
            "location": 917,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Weather.__eq__": {
            "name": "__eq__",
            "location": 920,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "List[Dict[str, str]]",
                    "Callable[[str], str]"
                ]
            }
        },
        "Weather.get_season_code_from_name": {
            "name": "get_season_code_from_name",
            "location": 925,
            "return": [
                "bool",
                "str",
                "type",
                "int"
            ],
            "arguments": {
                "self": [],
                "season_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Weather._section_wind_at_ground_level": {
            "name": "_section_wind_at_ground_level",
            "location": 936,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Weather.turbulence": {
            "name": "turbulence",
            "location": 947,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Callable",
                    "bool",
                    "float"
                ]
            }
        },
        "Weather.wind_ground_speed": {
            "name": "wind_ground_speed",
            "location": 959,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bool",
                    "T",
                    "bytes"
                ]
            }
        },
        "Weather._section_fog": {
            "name": "_section_fog",
            "location": 964,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Weather.fog_thickness": {
            "name": "fog_thickness",
            "location": 975,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[bytes, str]",
                    "T"
                ]
            }
        },
        "Weather.fog_visibility": {
            "name": "fog_visibility",
            "location": 987,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[bytes, str]",
                    "T"
                ]
            }
        },
        "Weather.fog_enabled": {
            "name": "fog_enabled",
            "location": 999,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Callable",
                    "bool",
                    "float"
                ]
            }
        },
        "Weather.dust_enabled": {
            "name": "dust_enabled",
            "location": 1014,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Callable",
                    "bool",
                    "float"
                ]
            }
        },
        "Weather.dust_density": {
            "name": "dust_density",
            "location": 1029,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[bytes, str]",
                    "T"
                ]
            }
        },
        "Weather._section_visibility": {
            "name": "_section_visibility",
            "location": 1034,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Weather.visibility": {
            "name": "visibility",
            "location": 1045,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Callable",
                    "bool",
                    "float"
                ]
            }
        },
        "Weather.precipitation_code": {
            "name": "precipitation_code",
            "location": 1057,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "Collection[str]",
                    "int"
                ]
            }
        },
        "Weather.wind_at8000_dir": {
            "name": "wind_at8000_dir",
            "location": 1078,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "dict",
                    "Dict[str, str]",
                    "bytes",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "List[Dict]"
                ]
            }
        },
        "Weather._section_weather": {
            "name": "_section_weather",
            "location": 1083,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Weather.temperature": {
            "name": "temperature",
            "location": 1094,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Callable",
                    "bool",
                    "float"
                ]
            }
        },
        "Weather._section_wind_at8000": {
            "name": "_section_wind_at8000",
            "location": 1103,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Weather.wind_ground_dir": {
            "name": "wind_ground_dir",
            "location": 1114,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "Weather._section_wind": {
            "name": "_section_wind",
            "location": 1119,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Weather._section_wind_at2000": {
            "name": "_section_wind_at2000",
            "location": 1123,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Weather.season_name": {
            "name": "season_name",
            "location": 1127,
            "return": [
                "str",
                "Type",
                "Callable[..., T]",
                "List[Tuple[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Weather.altimeter": {
            "name": "altimeter",
            "location": 1141,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Callable",
                    "bool",
                    "float"
                ]
            }
        },
        "Weather.wind_at2000_speed": {
            "name": "wind_at2000_speed",
            "location": 1153,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[bytes, str]",
                    "T"
                ]
            }
        },
        "Weather.wind_at2000_dir": {
            "name": "wind_at2000_dir",
            "location": 1165,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "dict",
                    "Dict[str, str]",
                    "bytes",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "List[Dict]"
                ]
            }
        },
        "Weather._section_season": {
            "name": "_section_season",
            "location": 1170,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Weather.atmosphere_type": {
            "name": "atmosphere_type",
            "location": 1181,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "type",
                    "Type",
                    "dict",
                    "Iterable",
                    "Union[str]",
                    "T"
                ]
            }
        },
        "Weather.season_code": {
            "name": "season_code",
            "location": 1193,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Set[str]",
                    "Optional[bool]"
                ]
            }
        },
        "Weather._section_clouds": {
            "name": "_section_clouds",
            "location": 1202,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Weather.cloud_thickness": {
            "name": "cloud_thickness",
            "location": 1213,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[bytes, str]",
                    "T"
                ]
            }
        },
        "Weather.cloud_base": {
            "name": "cloud_base",
            "location": 1225,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "Weather.cloud_density": {
            "name": "cloud_density",
            "location": 1237,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[bytes, str]",
                    "T"
                ]
            }
        },
        "Weather.wind_at8000_speed": {
            "name": "wind_at8000_speed",
            "location": 1249,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[bytes, str]",
                    "T"
                ]
            }
        },
        "Country.__init__": {
            "name": "__init__",
            "location": 1260,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mission_dict": [
                    "int",
                    "float",
                    "bool"
                ],
                "l10n": [
                    "int",
                    "float",
                    "bool"
                ],
                "coa_color": [
                    "int",
                    "float",
                    "bool"
                ],
                "country_index": [
                    "str",
                    "list",
                    "int",
                    "bool"
                ]
            }
        },
        "Country.__repr__": {
            "name": "__repr__",
            "location": 1271,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Country.__eq__": {
            "name": "__eq__",
            "location": 1274,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "List[Dict[str, str]]",
                    "Callable[[str], str]"
                ]
            }
        },
        "Country._section_this_country": {
            "name": "_section_this_country",
            "location": 1280,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Country.country_id": {
            "name": "country_id",
            "location": 1284,
            "return": [
                "str",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Country.country_name": {
            "name": "country_name",
            "location": 1291,
            "return": [
                "Dict[str, str]",
                "str",
                "List[Callable]",
                "list",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Country.groups": {
            "name": "groups",
            "location": 1298,
            "return": [
                "typing.Iterator['Group']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Country.statics": {
            "name": "statics",
            "location": 1312,
            "return": [
                "typing.Iterator['Static']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Country.get_groups_from_category": {
            "name": "get_groups_from_category",
            "location": 1323,
            "return": [
                "typing.Iterator['Group']"
            ],
            "arguments": {
                "self": [],
                "category": []
            }
        },
        "Country.get_group_by_id": {
            "name": "get_group_by_id",
            "location": 1336,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "group_id": [
                    "int",
                    "str"
                ]
            }
        },
        "Static.__init__": {
            "name": "__init__",
            "location": 1356,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mission_dict": [
                    "str",
                    "bool"
                ],
                "l10n": [
                    "str",
                    "bool"
                ],
                "coa_color": [
                    "str",
                    "bool"
                ],
                "country_index": [
                    "str",
                    "bool"
                ],
                "static_index": [
                    "int",
                    "Tuple[float, float]",
                    "list",
                    "bool"
                ]
            }
        },
        "Static.static_id": {
            "name": "static_id",
            "location": 1368,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "int",
                    "float"
                ]
            }
        },
        "Static._section_static": {
            "name": "_section_static",
            "location": 1373,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Static._static_name_key": {
            "name": "_static_name_key",
            "location": 1377,
            "return": [
                "List[str]",
                "bool",
                "type",
                "str",
                "int",
                "Optional[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Static.static_name": {
            "name": "static_name",
            "location": 1388,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[Any]",
                    "List[str]"
                ]
            }
        },
        "Static.static_category": {
            "name": "static_category",
            "location": 1393,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Static.static_is_farp": {
            "name": "static_is_farp",
            "location": 1400,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Static.static_position": {
            "name": "static_position",
            "location": 1407,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.__init__": {
            "name": "__init__",
            "location": 1458,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mission_dict": [
                    "int",
                    "float",
                    "bool"
                ],
                "l10n": [
                    "int",
                    "float",
                    "bool"
                ],
                "coa_color": [
                    "int",
                    "float",
                    "bool"
                ],
                "country_index": [
                    "int",
                    "float",
                    "bool"
                ],
                "group_category": [
                    "int",
                    "float"
                ],
                "group_index": [
                    "int",
                    "float"
                ]
            }
        },
        "Group.__repr__": {
            "name": "__repr__",
            "location": 1471,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.__eq__": {
            "name": "__eq__",
            "location": 1475,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Tuple[int, int]"
                ]
            }
        },
        "Group.group_route": {
            "name": "group_route",
            "location": 1493,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "Dict[str, Any]",
                    "tuple"
                ]
            }
        },
        "Group._section_group": {
            "name": "_section_group",
            "location": 1498,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group._group_name_key": {
            "name": "_group_name_key",
            "location": 1502,
            "return": [
                "List[str]",
                "bool",
                "type",
                "str",
                "int",
                "Optional[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.group_name": {
            "name": "group_name",
            "location": 1513,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "Group.group_hidden": {
            "name": "group_hidden",
            "location": 1525,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Callable",
                    "bool",
                    "float"
                ]
            }
        },
        "Group.group_id": {
            "name": "group_id",
            "location": 1537,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "int",
                    "float"
                ]
            }
        },
        "Group.group_start_delay": {
            "name": "group_start_delay",
            "location": 1549,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Union[int, float]",
                    "str",
                    "float"
                ]
            }
        },
        "Group.group_start_time": {
            "name": "group_start_time",
            "location": 1563,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "Group.group_start_date_time_as_string": {
            "name": "group_start_date_time_as_string",
            "location": 1568,
            "return": [
                "bool",
                "Union[type, Tuple[type, ...]]",
                "Dict[str, Any]",
                "Dict[int, Dict[int, Any]]",
                "Type",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.units": {
            "name": "units",
            "location": 1575,
            "return": [
                "typing.Iterator['BaseUnit']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.first_unit": {
            "name": "first_unit",
            "location": 1589,
            "return": [
                "List[Dict]",
                "List[str]",
                "List[int]",
                "str",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.group_size": {
            "name": "group_size",
            "location": 1595,
            "return": [
                "List[Dict]",
                "str",
                "Union[str, List[Any]]",
                "bool",
                "list",
                "List[str]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.get_unit_by_index": {
            "name": "get_unit_by_index",
            "location": 1601,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "unit_index": [
                    "bool",
                    "int"
                ]
            }
        },
        "Group.group_is_client_group": {
            "name": "group_is_client_group",
            "location": 1619,
            "return": [
                "bool",
                "IO",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.group_start_position": {
            "name": "group_start_position",
            "location": 1631,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUnit.__init__": {
            "name": "__init__",
            "location": 1648,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mission_dict": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "l10n": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "coa_color": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "country_index": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "group_category": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "group_index": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "unit_index": [
                    "str",
                    "list",
                    "int",
                    "bool"
                ]
            }
        },
        "BaseUnit.__repr__": {
            "name": "__repr__",
            "location": 1652,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUnit._section_unit": {
            "name": "_section_unit",
            "location": 1658,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUnit._unit_name_key": {
            "name": "_unit_name_key",
            "location": 1662,
            "return": [
                "List[str]",
                "bool",
                "type",
                "str",
                "int",
                "Optional[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUnit.unit_name": {
            "name": "unit_name",
            "location": 1673,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Union[str, int, float]",
                    "str"
                ]
            }
        },
        "BaseUnit.skill": {
            "name": "skill",
            "location": 1685,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Callable",
                    "bool",
                    "float"
                ]
            }
        },
        "BaseUnit.speed": {
            "name": "speed",
            "location": 1697,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Callable",
                    "bool",
                    "float"
                ]
            }
        },
        "BaseUnit.unit_type": {
            "name": "unit_type",
            "location": 1709,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "type",
                    "Type",
                    "dict",
                    "Iterable",
                    "Union[str]",
                    "T"
                ]
            }
        },
        "BaseUnit.unit_id": {
            "name": "unit_id",
            "location": 1721,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "int",
                    "float"
                ]
            }
        },
        "BaseUnit.unit_pos_x": {
            "name": "unit_pos_x",
            "location": 1733,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "BaseUnit.unit_pos_y": {
            "name": "unit_pos_y",
            "location": 1745,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Callable",
                    "bool",
                    "float"
                ]
            }
        },
        "BaseUnit.unit_position": {
            "name": "unit_position",
            "location": 1757,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "BaseUnit.heading": {
            "name": "heading",
            "location": 1768,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[bytes, str]",
                    "T"
                ]
            }
        },
        "BaseUnit.radio_presets": {
            "name": "radio_presets",
            "location": 1773,
            "return": [
                "typing.Iterator['FlyingUnit.RadioPresets']"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUnit.has_radio_presets": {
            "name": "has_radio_presets",
            "location": 1780,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUnit.__eq__": {
            "name": "__eq__",
            "location": 1786,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "float",
                    "List[Dict[str, str]]",
                    "List[float]"
                ]
            }
        },
        "FlyingUnit.__init__": {
            "name": "__init__",
            "location": 2034,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mission_dict": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "l10n": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "coa_color": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "country_index": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "group_category": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "group_index": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "unit_index": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ]
            }
        },
        "FlyingUnit.radio_presets": {
            "name": "radio_presets",
            "location": 2038,
            "return": [
                "typing.Iterator['FlyingUnit.RadioPresets']"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlyingUnit.radios": {
            "name": "radios",
            "location": 2049,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlyingUnit.get_radio_by_name": {
            "name": "get_radio_by_name",
            "location": 2058,
            "return": [
                "Optional[int]",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "radio_name": [
                    "str",
                    "tuple"
                ]
            }
        },
        "FlyingUnit.get_radio_by_number": {
            "name": "get_radio_by_number",
            "location": 2073,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "radio_number": []
            }
        },
        "FlyingUnit.livery": {
            "name": "livery",
            "location": 2097,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "Optional[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "FlyingUnit.onboard_num": {
            "name": "onboard_num",
            "location": 2110,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[str]",
                    "List[Tuple[int, int]]",
                    "Tuple[int, str]",
                    "int",
                    "str",
                    "float",
                    "List[int]"
                ]
            }
        },
        "Helicopter.__init__": {
            "name": "__init__",
            "location": 2120,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mission_dict": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "l10n": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "coa_color": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "country_index": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "group_category": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "group_index": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "unit_index": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ]
            }
        },
        "Plane.__init__": {
            "name": "__init__",
            "location": 2129,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mission_dict": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "l10n": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "coa_color": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "country_index": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "group_category": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "group_index": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "unit_index": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ]
            }
        },
        "Vehicle.__init__": {
            "name": "__init__",
            "location": 2138,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mission_dict": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "l10n": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "coa_color": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "country_index": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "group_category": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "group_index": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "unit_index": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ]
            }
        },
        "Ship.__init__": {
            "name": "__init__",
            "location": 2147,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mission_dict": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "l10n": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "coa_color": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "country_index": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "group_category": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "group_index": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "unit_index": [
                    "int",
                    "bool",
                    "float",
                    "bytes",
                    "Optional[float]"
                ]
            }
        },
        "Group.Route.__init__": {
            "name": "__init__",
            "location": 1438,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent_group": [
                    "Set[str]",
                    "int",
                    "Optional[Mapping]",
                    "Type['AbstractIntegrationConversation']",
                    "bool",
                    "str",
                    "Optional[List[Any]]"
                ]
            }
        },
        "Group.Route.__repr__": {
            "name": "__repr__",
            "location": 1441,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.Route._section_route": {
            "name": "_section_route",
            "location": 1445,
            "return": [
                "Optional[int]",
                "Optional[List[Callable]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.Route.points": {
            "name": "points",
            "location": 1449,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FlyingUnit.RadioPresets.__init__": {
            "name": "__init__",
            "location": 1937,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent_unit": [
                    "str",
                    "int",
                    "List[str]",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "float"
                ],
                "radio_num": [
                    "str",
                    "int",
                    "List[str]",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "FlyingUnit.RadioPresets.__eq__": {
            "name": "__eq__",
            "location": 1942,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "str"
                ]
            }
        },
        "FlyingUnit.RadioPresets.radio_name": {
            "name": "radio_name",
            "location": 1954,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlyingUnit.RadioPresets.channels_qty": {
            "name": "channels_qty",
            "location": 1961,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FlyingUnit.RadioPresets.min": {
            "name": "min",
            "location": 1968,
            "return": [
                "tuple",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlyingUnit.RadioPresets.max": {
            "name": "max",
            "location": 1975,
            "return": [
                "tuple",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlyingUnit.RadioPresets._section_radio": {
            "name": "_section_radio",
            "location": 1982,
            "return": [
                "Optional[int]",
                "Optional[List[Callable]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlyingUnit.RadioPresets._section_channels": {
            "name": "_section_channels",
            "location": 1986,
            "return": [
                "Dict[str, int]",
                "int",
                "Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlyingUnit.RadioPresets.channels": {
            "name": "channels",
            "location": 1990,
            "return": [
                "typing.Iterator[builtins.tuple]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlyingUnit.RadioPresets.get_frequency": {
            "name": "get_frequency",
            "location": 1997,
            "return": [
                "str",
                "Dict[str, Dict[str, Any]]",
                "datetime.date.time"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "Callable",
                    "str"
                ]
            }
        },
        "FlyingUnit.RadioPresets.set_frequency": {
            "name": "set_frequency",
            "location": 2012,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "int"
                ],
                "frequency": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "Group.Route.Point.__init__": {
            "name": "__init__",
            "location": 1432,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent_route": [
                    "Set[str]",
                    "int",
                    "Optional[Mapping]",
                    "Type['AbstractIntegrationConversation']",
                    "bool",
                    "str",
                    "Optional[List[Any]]"
                ]
            }
        },
        "Group.Route.Point.__repr__": {
            "name": "__repr__",
            "location": 1435,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "elib_miz-master/elib_miz/mission_time.py": {
        "MissionTime.from_datetime": {
            "name": "from_datetime",
            "location": 37,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "datetime_": [
                    "str",
                    "datetime.date",
                    "datetime.datetime"
                ]
            }
        },
        "MissionTime.now": {
            "name": "now",
            "location": 56,
            "return": [
                "int",
                "Type"
            ],
            "arguments": {}
        },
        "MissionTime.from_miz": {
            "name": "from_miz",
            "location": 66,
            "return": [
                "float",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "miz_file_path": [
                    "str",
                    "pathlib.Path",
                    "List[str]",
                    "paradigm.catalog.Path",
                    "Union[pathlib.Path, str]"
                ]
            }
        },
        "MissionTime.from_string": {
            "name": "from_string",
            "location": 87,
            "return": [
                "str",
                "datetime.datetime",
                "List[datetime.date]",
                "bool",
                "Callable[[], None]"
            ],
            "arguments": {
                "datetime_str": [
                    "str"
                ]
            }
        },
        "MissionTime.datetime": {
            "name": "datetime",
            "location": 115,
            "return": [
                "int",
                "str",
                "Optional[float]",
                "datetime.datetime",
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MissionTime.mission_start_time": {
            "name": "mission_start_time",
            "location": 126,
            "return": [
                "str",
                "List[str]",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MissionTime.iso_format": {
            "name": "iso_format",
            "location": 134,
            "return": [
                "str",
                "datetime.date",
                "int",
                "datetime.datetime"
            ],
            "arguments": {
                "self": []
            }
        },
        "MissionTime.apply_to_miz": {
            "name": "apply_to_miz",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_miz_file": [
                    "bool",
                    "pathlib.Path",
                    "str"
                ],
                "out_miz_file": [
                    "pathlib.Path",
                    "bool",
                    "str",
                    "List[str]",
                    "List[pathlib.Path]"
                ],
                "overwrite": [
                    "str",
                    "pathlib.Path",
                    "List[str]"
                ]
            }
        }
    },
    "elib_miz-master/elib_miz/miz.py": {},
    "elib_miz-master/elib_miz/sltp.py": {
        "BaseSLTPError.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SLTPParsingError.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SLTPEmptyObjectError.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SLTP.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SLTP.decode": {
            "name": "decode",
            "location": 62,
            "return": [
                "Tuple[(Any, str)]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "bytes"
                ]
            }
        },
        "SLTP.encode": {
            "name": "encode",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str"
                ],
                "qualifier": [
                    "str"
                ]
            }
        },
        "SLTP.__encode": {
            "name": "__encode",
            "location": 120,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "dict_name": [
                    "Optional[str]",
                    "str",
                    "type"
                ]
            }
        },
        "SLTP.__get_context": {
            "name": "__get_context",
            "location": 167,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "SLTP.white": {
            "name": "white",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SLTP.next_chr": {
            "name": "next_chr",
            "location": 185,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SLTP.value": {
            "name": "value",
            "location": 194,
            "return": [
                "Optional[Union[(dict, float, int, str)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SLTP.string": {
            "name": "string",
            "location": 213,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "end": [
                    "bool",
                    "None",
                    "float",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "SLTP.object": {
            "name": "object",
            "location": 232,
            "return": [
                "Union[(list, Dict[(Any, nothing)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SLTP.word": {
            "name": "word",
            "location": 292,
            "return": [
                "Optional[Union[(bool, str)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SLTP.number": {
            "name": "number",
            "location": 309,
            "return": [
                "Union[(float, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SLTP.digit": {
            "name": "digit",
            "location": 345,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SLTP.hex": {
            "name": "hex",
            "location": 353,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SLTP.number.next_digit": {
            "name": "next_digit",
            "location": 311,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "err": [
                    "str"
                ]
            }
        }
    },
    "elib_miz-master/elib_miz/static.py": {},
    "elib_miz-master/elib_miz/validator.py": {
        "Validator.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Validator.validate": {
            "name": "validate",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "str",
                    "None",
                    "Optional[Any]",
                    "Optional[str]",
                    "typing.Any",
                    "Optional[List[str]]",
                    "list[str]",
                    "Union[str, int]",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "param_name": [
                    "str",
                    "int",
                    "Callable[[], Any]",
                    "typing.Callable[[], typing.Any]"
                ],
                "exc": [
                    "None",
                    "Optional[bool]",
                    "bool",
                    "str",
                    "Optional[str]",
                    "typing.IO",
                    "Optional[IO[bytes]]"
                ],
                "logger": [
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "Validator.error": {
            "name": "error",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error_msg": [
                    "str",
                    "Exception"
                ]
            }
        }
    },
    "elib_miz-master/elib_miz/__init__.py": {},
    "elib_miz-master/test/conftest.py": {
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "pytest_unconfigure": {
            "name": "pytest_unconfigure",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "_all": {
            "name": "_all",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "str",
                    "Dict[str, str]",
                    "int"
                ],
                "tmpdir": [
                    "Optional[str]",
                    "str",
                    "int",
                    "dict"
                ],
                "out_file": [
                    "pathlib.Path",
                    "str",
                    "dict",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "parser": []
            }
        },
        "pytest_runtest_setup": {
            "name": "pytest_runtest_setup",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "item": [
                    "int",
                    "str",
                    "type",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "test_file": {
            "name": "test_file",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "str"
                ],
                "test_files_folder": [
                    "str"
                ]
            }
        },
        "latest_test_file": {
            "name": "latest_test_file",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "test_files_folder": [
                    "pathlib.Path",
                    "str",
                    "os.PathLike"
                ]
            }
        },
        "out_file": {
            "name": "out_file",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "test_files_folder": [
                    "pathlib.Path",
                    "str",
                    "Path",
                    "Optional[str]"
                ]
            }
        },
        "bad_zip_file": {
            "name": "bad_zip_file",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "missing_file": {
            "name": "missing_file",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "duplicate_group_id": {
            "name": "duplicate_group_id",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "dust_miz_file": {
            "name": "dust_miz_file",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "all_objects": {
            "name": "all_objects",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "large_file": {
            "name": "large_file",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "request": []
            }
        },
        "radio_file": {
            "name": "radio_file",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_files_folder": {
            "name": "test_files_folder",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "remove_out_file": {
            "name": "remove_out_file",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "mission": {
            "name": "mission",
            "location": 158,
            "return": [
                "elib_miz.Mission"
            ],
            "arguments": {}
        },
        "sltp_pass": {
            "name": "sltp_pass",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "Callable"
                ]
            }
        },
        "sltp_diff": {
            "name": "sltp_diff",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "Callable"
                ]
            }
        },
        "sltp_long": {
            "name": "sltp_long",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "Callable"
                ]
            }
        },
        "sltp_fail": {
            "name": "sltp_fail",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "Callable"
                ]
            }
        }
    },
    "elib_miz-master/test/test_mission_time.py": {
        "test_from_string": {
            "name": "test_from_string",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "example_datetime": [
                    "str",
                    "Awaitable"
                ]
            }
        },
        "test_now": {
            "name": "test_now",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_apply_to_miz": {
            "name": "test_apply_to_miz",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "test_file": [
                    "str",
                    "Optional[str]",
                    "pathlib.Path",
                    "bool",
                    "List[str]"
                ],
                "example_datetime": [
                    "str",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "test_from_miz": {
            "name": "test_from_miz",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "latest_test_file": [
                    "str",
                    "int"
                ]
            }
        },
        "test_from_miz_missing_file": {
            "name": "test_from_miz_missing_file",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_from_string_invalid_string": {
            "name": "test_from_string_invalid_string",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "invalid_string": [
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "test_date_time_prop": {
            "name": "test_date_time_prop",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_apply_to_miz_file_errors": {
            "name": "test_apply_to_miz_file_errors",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "elib_miz-master/test/test_miz.py": {
        "test_init": {
            "name": "test_init",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "Optional[List[str]]",
                    "pathlib.Path",
                    "pypi2nix.path.Path"
                ],
                "cls": [
                    "str",
                    "T",
                    "Exception",
                    "Container[T]"
                ]
            }
        },
        "test_unzip": {
            "name": "test_unzip",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "test_file": [
                    "pathlib.Path",
                    "str",
                    "path.Path"
                ]
            }
        },
        "test_mission_dict": {
            "name": "test_mission_dict",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "test_file": [
                    "pathlib.Path",
                    "str",
                    "path.Path"
                ]
            }
        },
        "test_l10n_dict": {
            "name": "test_l10n_dict",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "test_file": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "test_map_resources": {
            "name": "test_map_resources",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "test_file": [
                    "pathlib.Path",
                    "str",
                    "path.Path"
                ]
            }
        },
        "test_resources": {
            "name": "test_resources",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "test_file": [
                    "pathlib.Path",
                    "str",
                    "path.Path"
                ]
            }
        },
        "test_context": {
            "name": "test_context",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "test_file": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "test_fog": {
            "name": "test_fog",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "dust_miz_file": [
                    "path.Path",
                    "str",
                    "pathlib.Path"
                ]
            }
        }
    },
    "elib_miz-master/test/test_sltp.py": {
        "_assert_same": {
            "name": "_assert_same",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "input_": [
                    "bytes",
                    "int",
                    "List[int]",
                    "str"
                ],
                "output": [
                    "Sequence[float]",
                    "str",
                    "List[str]",
                    "int",
                    "tuple",
                    "list"
                ]
            }
        },
        "_assert_different": {
            "name": "_assert_different",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "input_": [
                    "bool"
                ],
                "output": [
                    "str",
                    "T",
                    "Type[T]"
                ]
            }
        },
        "_do_test": {
            "name": "_do_test",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "test_file": [
                    "str",
                    "dict"
                ],
                "compare_func": [
                    "int",
                    "Optional[str]",
                    "Sequence[int]",
                    "bool"
                ]
            }
        },
        "test_encode_decode_files": {
            "name": "test_encode_decode_files",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "sltp_pass": [
                    "Callable"
                ]
            }
        },
        "test_encode_decode_files_long": {
            "name": "test_encode_decode_files_long",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "sltp_long": [
                    "Callable"
                ]
            }
        },
        "test_encode_decode_files_fail": {
            "name": "test_encode_decode_files_fail",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "sltp_fail": [
                    "Callable"
                ]
            }
        },
        "test_encode_decode_files_diff": {
            "name": "test_encode_decode_files_diff",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "sltp_diff": [
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "elib_miz-master/test/__init__.py": {},
    "elib_miz-master/test/test_mission/test_base_mission_object.py": {
        "test_init": {
            "name": "test_init",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_get_country_by_name": {
            "name": "test_get_country_by_name",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mission": []
            }
        },
        "test_get_country_by_id": {
            "name": "test_get_country_by_id",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mission": [
                    "str"
                ]
            }
        },
        "test_get_groups_from_category": {
            "name": "test_get_groups_from_category",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mission": [
                    "str",
                    "Tuple[int, int]"
                ],
                "category": [
                    "int"
                ]
            }
        },
        "test_get_units_from_category": {
            "name": "test_get_units_from_category",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mission": [
                    "str",
                    "Tuple[int, int]"
                ],
                "category": [
                    "int"
                ]
            }
        },
        "test_get_group_by_id": {
            "name": "test_get_group_by_id",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mission": [
                    "Tuple[str, int]"
                ]
            }
        },
        "test_get_unit_by_id": {
            "name": "test_get_unit_by_id",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mission": [
                    "Tuple[str, int]"
                ]
            }
        },
        "test_get_clients_groups": {
            "name": "test_get_clients_groups",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mission": [
                    "int"
                ]
            }
        },
        "test_day": {
            "name": "test_day",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mission": [
                    "int",
                    "str",
                    "List[Tuple[str, Any]]",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "test_wrong_day": {
            "name": "test_wrong_day",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mission": [
                    "int",
                    "float",
                    "str",
                    "None",
                    "Optional[int]",
                    "bool"
                ],
                "day": [
                    "int",
                    "float",
                    "str",
                    "None",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "test_month": {
            "name": "test_month",
            "location": 83,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mission": [
                    "str",
                    "int"
                ]
            }
        },
        "test_wrong_month": {
            "name": "test_wrong_month",
            "location": 90,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mission": [],
                "month": []
            }
        },
        "test_year": {
            "name": "test_year",
            "location": 95,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mission": [
                    "int"
                ]
            }
        },
        "test_wrong_year": {
            "name": "test_wrong_year",
            "location": 102,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mission": [
                    "int",
                    "str",
                    "None",
                    "bool",
                    "Optional[int]"
                ],
                "year": [
                    "int",
                    "str",
                    "None",
                    "bool",
                    "Optional[int]"
                ]
            }
        }
    },
    "elib_miz-master/test/test_mission/test_coalition.py": {
        "test_eq": {
            "name": "test_eq",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mission": [
                    "str",
                    "float"
                ]
            }
        },
        "test_statics": {
            "name": "test_statics",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mission": []
            }
        },
        "test_farps": {
            "name": "test_farps",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mission": []
            }
        },
        "get_unit_by_id": {
            "name": "get_unit_by_id",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mission": [
                    "Optional[int]",
                    "int",
                    "Dict[str, Any]",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "elib_miz-master/test/test_mission/test_country.py": {
        "test_country_generator": {
            "name": "test_country_generator",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "str",
                    "float"
                ]
            }
        },
        "test_get_country_by_name": {
            "name": "test_get_country_by_name",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "mission": []
            }
        },
        "test_get_country": {
            "name": "test_get_country",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "float",
                    "Optional[str]",
                    "int"
                ],
                "test_file": [
                    "str"
                ]
            }
        },
        "test_compare_country": {
            "name": "test_compare_country",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "str"
                ]
            }
        }
    },
    "elib_miz-master/test/test_mission/test_datetime.py": {
        "test_mission_year_get": {
            "name": "test_mission_year_get",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mission": []
            }
        },
        "test_mission_year_set": {
            "name": "test_mission_year_set",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mission": [
                    "int"
                ],
                "year": [
                    "int"
                ]
            }
        },
        "test_mission_month_get": {
            "name": "test_mission_month_get",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mission": []
            }
        },
        "test_mission_month_set": {
            "name": "test_mission_month_set",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mission": [],
                "month": []
            }
        },
        "test_mission_day": {
            "name": "test_mission_day",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mission": [
                    "int",
                    "str",
                    "None",
                    "bool",
                    "Optional[int]",
                    "set[str]",
                    "list[dict[str, str]]",
                    "Optional[Set[str]]",
                    "List[Dict[str, str]]"
                ],
                "day": [
                    "int",
                    "str",
                    "None",
                    "bool",
                    "Optional[int]",
                    "set[str]",
                    "list[dict[str, str]]",
                    "Optional[Set[str]]",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "test_mission_day_limit": {
            "name": "test_mission_day_limit",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mission": [
                    "int",
                    "str"
                ],
                "month": [
                    "int"
                ],
                "day": [
                    "float",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "test_mission_hour": {
            "name": "test_mission_hour",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mission": [
                    "str",
                    "float"
                ],
                "hour": [
                    "str",
                    "float"
                ]
            }
        },
        "test_mission_minute": {
            "name": "test_mission_minute",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mission": [
                    "str",
                    "float"
                ],
                "minute": [
                    "str",
                    "float"
                ]
            }
        },
        "test_mission_second": {
            "name": "test_mission_second",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mission": [
                    "str",
                    "float"
                ],
                "second": [
                    "str",
                    "float"
                ]
            }
        },
        "test_mission_datetime_mixed_in": {
            "name": "test_mission_datetime_mixed_in",
            "location": 86,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mission": [
                    "int"
                ],
                "year": [
                    "int"
                ],
                "month": [
                    "int",
                    "str"
                ],
                "day": [
                    "int",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "Type[Any]",
                    "typing.Type"
                ],
                "hour": [
                    "str"
                ],
                "minute": [
                    "str"
                ],
                "second": [
                    "str"
                ]
            }
        }
    },
    "elib_miz-master/test/test_mission/test_group.py": {
        "test_groups": {
            "name": "test_groups",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "List[Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "test_get_groups_from_category": {
            "name": "test_get_groups_from_category",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "str",
                    "int"
                ],
                "all_objects": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_get_group_by_id": {
            "name": "test_get_group_by_id",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "mission": []
            }
        },
        "test_group_by_name": {
            "name": "test_group_by_name",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "mission": []
            }
        },
        "test_set_hidden": {
            "name": "test_set_hidden",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "test_file": [
                    "str"
                ],
                "out_file": []
            }
        },
        "test_get_unit": {
            "name": "test_get_unit",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "str"
                ]
            }
        },
        "test_get_group_by_name": {
            "name": "test_get_group_by_name",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "mission": []
            }
        }
    },
    "elib_miz-master/test/test_mission/test_large.py": {
        "test_large_decode": {
            "name": "test_large_decode",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "large_file": [
                    "Optional[str]"
                ]
            }
        },
        "test_large_zip": {
            "name": "test_large_zip",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "large_file": [
                    "pypi2nix.path.Path",
                    "str"
                ]
            }
        }
    },
    "elib_miz-master/test/test_mission/test_mission.py": {
        "test_bullseye": {
            "name": "test_bullseye",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "str",
                    "float"
                ]
            }
        },
        "test_ln10": {
            "name": "test_ln10",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "str",
                    "float"
                ]
            }
        },
        "test_name": {
            "name": "test_name",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "str"
                ]
            }
        },
        "test_ground_control": {
            "name": "test_ground_control",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "str"
                ]
            }
        },
        "test_objects": {
            "name": "test_objects",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "all_objects": [
                    "dict",
                    "Dict[str, Any]",
                    "bytes",
                    "List[int]",
                    "int"
                ]
            }
        },
        "test_coalitions_generator": {
            "name": "test_coalitions_generator",
            "location": 211,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "str",
                    "float"
                ]
            }
        },
        "test_repr": {
            "name": "test_repr",
            "location": 220,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "bool"
                ]
            }
        },
        "test_next_group_id": {
            "name": "test_next_group_id",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "str",
                    "Tuple[str]",
                    "bytes",
                    "int",
                    "bool"
                ],
                "duplicate_group_id": [
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "test_next_unit_id": {
            "name": "test_next_unit_id",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "str",
                    "Tuple[str]",
                    "bytes",
                    "int",
                    "bool"
                ],
                "duplicate_group_id": [
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "test_sortie_name": {
            "name": "test_sortie_name",
            "location": 238,
            "return": [
                ""
            ],
            "arguments": {
                "test_file": [
                    "str",
                    "bool"
                ],
                "out_file": []
            }
        },
        "test_farps": {
            "name": "test_farps",
            "location": 252,
            "return": [
                ""
            ],
            "arguments": {
                "mission": []
            }
        }
    },
    "elib_miz-master/test/test_mission/test_mission_weather.py": {
        "test_qnh": {
            "name": "test_qnh",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "mission": [
                    "str",
                    "float"
                ]
            }
        },
        "test_seasons": {
            "name": "test_seasons",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "mission": [
                    "int",
                    "str"
                ]
            }
        },
        "test_wind": {
            "name": "test_wind",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "mission": []
            }
        },
        "test_turbulence": {
            "name": "test_turbulence",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "mission": [
                    "Mapping[str, Any]",
                    "bool",
                    "typing.Mapping"
                ]
            }
        },
        "test_atmosphere_type": {
            "name": "test_atmosphere_type",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "mission": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_fog": {
            "name": "test_fog",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "mission": []
            }
        },
        "test_clouds": {
            "name": "test_clouds",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "mission": [
                    "bool",
                    "str",
                    "float",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_precipitations": {
            "name": "test_precipitations",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "mission": []
            }
        },
        "test_compare_weather": {
            "name": "test_compare_weather",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "mission": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "elib_miz-master/test/test_mission/test_miz_file.py": {
        "test_init": {
            "name": "test_init",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "test_file": [
                    "int"
                ]
            }
        },
        "test_context": {
            "name": "test_context",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "test_file": [
                    "str"
                ]
            }
        },
        "test_unzip": {
            "name": "test_unzip",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "test_file": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_decode": {
            "name": "test_decode",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "test_file": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_zip": {
            "name": "test_zip",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "out_file": [],
                "test_file": [
                    "str"
                ]
            }
        },
        "test_is_unzipped": {
            "name": "test_is_unzipped",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "test_file": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "test_missing_file_in_miz": {
            "name": "test_missing_file_in_miz",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "missing_file": []
            }
        },
        "test_bad_zip_file": {
            "name": "test_bad_zip_file",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "bad_zip_file": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "test_temp_dir_cleaning": {
            "name": "test_temp_dir_cleaning",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "test_file": []
            }
        }
    },
    "elib_miz-master/test/test_mission/test_radios.py": {
        "test_radios": {
            "name": "test_radios",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "unit_id": [
                    "str",
                    "int"
                ],
                "unit_type": [
                    "str",
                    "List[List[str]]",
                    "Dict[str, str]"
                ],
                "radios_to_test": [
                    "Optional[bool]",
                    "str",
                    "bool",
                    "List[str]",
                    "int"
                ],
                "radio_file": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_radios_set_freq": {
            "name": "test_radios_set_freq",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "radio_file": [
                    "bool"
                ],
                "out_file": [
                    "Optional[str]"
                ]
            }
        },
        "test_radios_equal": {
            "name": "test_radios_equal",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "radio_file": [
                    "str",
                    "bool",
                    "BinaryIO"
                ]
            }
        },
        "test_radios_generator": {
            "name": "test_radios_generator",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "radio_file": [
                    "str",
                    "bool",
                    "BinaryIO"
                ]
            }
        }
    },
    "elib_miz-master/test/test_mission/test_start_time.py": {
        "test_mission_start_time": {
            "name": "test_mission_start_time",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "time": [
                    "Callable",
                    "int",
                    "str"
                ],
                "mission": []
            }
        },
        "test_wrong_mission_start_time": {
            "name": "test_wrong_mission_start_time",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "time": [
                    "Optional[str]",
                    "Callable[[str], None]",
                    "str",
                    "bool",
                    "Callable"
                ],
                "mission": [
                    "Optional[str]",
                    "Callable[[str], None]",
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "test_wrong_mission_start_time_neg": {
            "name": "test_wrong_mission_start_time_neg",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "time": [
                    "Optional[str]",
                    "Callable[[str], None]",
                    "str",
                    "bool",
                    "Callable"
                ],
                "mission": [
                    "Optional[str]",
                    "Callable[[str], None]",
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "test_group_start_time": {
            "name": "test_group_start_time",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "test_file": [
                    "str"
                ],
                "out_file": []
            }
        }
    },
    "elib_miz-master/test/test_mission/test_unit.py": {
        "test_units": {
            "name": "test_units",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "str",
                    "float"
                ]
            }
        },
        "test_get_units_from_category": {
            "name": "test_get_units_from_category",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "str",
                    "int"
                ],
                "all_objects": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_get_unit_by_id": {
            "name": "test_get_unit_by_id",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "mission": []
            }
        },
        "test_unit_by_name": {
            "name": "test_unit_by_name",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "test_get_unit_by_name": {
            "name": "test_get_unit_by_name",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "mission": []
            }
        },
        "test_get_unit_by_id_missing": {
            "name": "test_get_unit_by_id_missing",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "int"
                ]
            }
        },
        "test_get_unit_by_name_missing": {
            "name": "test_get_unit_by_name_missing",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "mission": [
                    "str"
                ]
            }
        }
    }
}
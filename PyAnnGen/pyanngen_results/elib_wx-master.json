{
    "elib_wx-master/generate_airport_db.py": {
        "_generate_db": {
            "name": "_generate_db",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "source_csv": [
                    "str"
                ]
            }
        }
    },
    "elib_wx-master/setup.py": {
        "read_local_files": {
            "name": "read_local_files",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "read_local_files._read_single_file": {
            "name": "_read_single_file",
            "location": 53,
            "return": [
                "str",
                "Dict",
                "Optional[str]"
            ],
            "arguments": {
                "file_path": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "elib_wx-master/elib_wx/airports_db.py": {
        "get_airport_name_from_icao": {
            "name": "get_airport_name_from_icao",
            "location": 30,
            "return": [
                "str",
                "Text",
                "Dict"
            ],
            "arguments": {
                "icao": [
                    "bool",
                    "List[str]",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "find_icao_by_name": {
            "name": "find_icao_by_name",
            "location": 57,
            "return": [
                "dict"
            ],
            "arguments": {
                "airport_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "elib_wx-master/elib_wx/exc.py": {
        "InvalidWeatherSourceError.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "List",
                    "Match",
                    "Type[object]",
                    "Type"
                ],
                "msg": [
                    "str"
                ]
            }
        },
        "InvalidICAOError.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "icao": [
                    "str",
                    "bool",
                    "Union[str,Dict[str,str]]",
                    "Dict[str,str]"
                ]
            }
        },
        "StationNotFoundError.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "icao": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "FileAlreadyExistsError.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "IO[str]",
                    "IO"
                ]
            }
        },
        "SourceMizFileNotFoundError.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str"
                ]
            }
        }
    },
    "elib_wx-master/elib_wx/static.py": {},
    "elib_wx-master/elib_wx/utils.py": {
        "extract_station_from_metar_str": {
            "name": "extract_station_from_metar_str",
            "location": 13,
            "return": [
                "Any"
            ],
            "arguments": {
                "metar_str": []
            }
        },
        "num_to_words": {
            "name": "num_to_words",
            "location": 29,
            "return": [
                "Any"
            ],
            "arguments": {
                "num": [],
                "group": [
                    "int"
                ]
            }
        },
        "num_to_ordinal": {
            "name": "num_to_ordinal",
            "location": 43,
            "return": [
                "Any"
            ],
            "arguments": {
                "num": []
            }
        },
        "_translate_unit": {
            "name": "_translate_unit",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "unit": []
            }
        },
        "translate_temperature_str": {
            "name": "translate_temperature_str",
            "location": 61,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "code": [],
                "unit": [
                    "typing.Text"
                ],
                "spoken": [
                    "bool"
                ]
            }
        },
        "temp_minmax": {
            "name": "temp_minmax",
            "location": 85,
            "return": [
                "str"
            ],
            "arguments": {
                "code": [],
                "spoken": [
                    "bool"
                ]
            }
        },
        "pressure_tendency": {
            "name": "pressure_tendency",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "code": [],
                "unit": [
                    "typing.Text"
                ],
                "spoken": [
                    "bool"
                ]
            }
        },
        "precip_36": {
            "name": "precip_36",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "code": [],
                "unit": [
                    "typing.Text"
                ],
                "spoken": [
                    "bool"
                ]
            }
        },
        "precip_24": {
            "name": "precip_24",
            "location": 126,
            "return": [
                "str"
            ],
            "arguments": {
                "code": [],
                "unit": [
                    "typing.Text"
                ],
                "spoken": [
                    "bool"
                ]
            }
        },
        "sunshine_duration": {
            "name": "sunshine_duration",
            "location": 137,
            "return": [
                "str"
            ],
            "arguments": {
                "code": [],
                "unit": [
                    "typing.Text"
                ],
                "spoken": [
                    "bool"
                ]
            }
        }
    },
    "elib_wx-master/elib_wx/weather.py": {
        "Weather.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Dict[str, Any]",
                    "List[TextIO]"
                ]
            }
        },
        "Weather.is_cavok": {
            "name": "is_cavok",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Weather.apply_to_mission_dict": {
            "name": "apply_to_mission_dict",
            "location": 46,
            "return": [
                "int",
                "dict",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "mission": [
                    "Dict[str,Any]",
                    "str",
                    "Tuple[str,str]",
                    "Dict",
                    "Tuple[Union[str,str]]"
                ]
            }
        },
        "Weather.apply_to_miz": {
            "name": "apply_to_miz",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_file": [
                    "str",
                    "bool"
                ],
                "out_file": [
                    "str",
                    "bool"
                ]
            }
        },
        "Weather.generate_dcs_weather": {
            "name": "generate_dcs_weather",
            "location": 73,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Weather.fill_from_metar_data": {
            "name": "fill_from_metar_data",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Weather._set_station_name": {
            "name": "_set_station_name",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Weather._from_icao": {
            "name": "_from_icao",
            "location": 95,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Weather._from_metar_string": {
            "name": "_from_metar_string",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Weather._from_miz_file": {
            "name": "_from_miz_file",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Weather._wind_as_str": {
            "name": "_wind_as_str",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "spoken": [
                    "Tuple[int,int]",
                    "str",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "Weather._visibility_as_str": {
            "name": "_visibility_as_str",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "spoken": [
                    "Tuple[int,int]",
                    "str",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "Weather._temperature_as_str": {
            "name": "_temperature_as_str",
            "location": 110,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "spoken": [
                    "Tuple[int,int]",
                    "str",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "Weather._dew_point_as_str": {
            "name": "_dew_point_as_str",
            "location": 113,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "spoken": [
                    "str",
                    "Set",
                    "Tuple"
                ]
            }
        },
        "Weather._altimeter_as_str": {
            "name": "_altimeter_as_str",
            "location": 116,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "spoken": [
                    "Tuple[int,int]",
                    "str",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "Weather._others_as_str": {
            "name": "_others_as_str",
            "location": 119,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Weather._clouds_as_str": {
            "name": "_clouds_as_str",
            "location": 122,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "spoken": [
                    "Tuple[int,int]",
                    "str",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "Weather._remarks_as_str": {
            "name": "_remarks_as_str",
            "location": 125,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "spoken": [
                    "Tuple[int,int]",
                    "str",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "Weather._make_str_intro": {
            "name": "_make_str_intro",
            "location": 128,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "spoken": []
            }
        },
        "Weather._as_str": {
            "name": "_as_str",
            "location": 131,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "spoken": [
                    "str",
                    "List[str]",
                    "float"
                ]
            }
        }
    },
    "elib_wx-master/elib_wx/weather_abc.py": {
        "WeatherABC.station_icao": {
            "name": "station_icao",
            "location": 62,
            "return": [
                "str",
                "dict[, ]",
                "bytes",
                "float",
                "tuple[typing.Union[str,str]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[Any]",
                    "Dict[str, Any]",
                    "bool",
                    "float"
                ]
            }
        },
        "WeatherABC.apply_to_mission_dict": {
            "name": "apply_to_mission_dict",
            "location": 74,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "mission": [
                    "str",
                    "bool"
                ]
            }
        },
        "WeatherABC.apply_to_miz": {
            "name": "apply_to_miz",
            "location": 85,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "source_file": [
                    "bool",
                    "str"
                ],
                "out_file": [
                    "bool",
                    "str"
                ]
            }
        },
        "WeatherABC.generate_dcs_weather": {
            "name": "generate_dcs_weather",
            "location": 98,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "WeatherABC.fill_from_metar_data": {
            "name": "fill_from_metar_data",
            "location": 109,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "WeatherABC._set_station_name": {
            "name": "_set_station_name",
            "location": 115,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "WeatherABC._from_icao": {
            "name": "_from_icao",
            "location": 123,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "WeatherABC._from_metar_string": {
            "name": "_from_metar_string",
            "location": 129,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "WeatherABC._from_miz_file": {
            "name": "_from_miz_file",
            "location": 135,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "WeatherABC.is_cavok": {
            "name": "is_cavok",
            "location": 142,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WeatherABC._wind_as_str": {
            "name": "_wind_as_str",
            "location": 149,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "spoken": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "WeatherABC._visibility_as_str": {
            "name": "_visibility_as_str",
            "location": 158,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "spoken": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "WeatherABC._temperature_as_str": {
            "name": "_temperature_as_str",
            "location": 167,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "spoken": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "WeatherABC._dew_point_as_str": {
            "name": "_dew_point_as_str",
            "location": 176,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "spoken": [
                    "str",
                    "bool"
                ]
            }
        },
        "WeatherABC._altimeter_as_str": {
            "name": "_altimeter_as_str",
            "location": 185,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "spoken": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "WeatherABC._others_as_str": {
            "name": "_others_as_str",
            "location": 194,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "WeatherABC._clouds_as_str": {
            "name": "_clouds_as_str",
            "location": 201,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "spoken": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "WeatherABC._remarks_as_str": {
            "name": "_remarks_as_str",
            "location": 210,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "spoken": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "WeatherABC._make_str_intro": {
            "name": "_make_str_intro",
            "location": 219,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "spoken": [
                    "str",
                    "bool",
                    "float",
                    "int",
                    "IO",
                    "IO[str]"
                ]
            }
        },
        "WeatherABC._as_str": {
            "name": "_as_str",
            "location": 228,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "spoken": [
                    "str",
                    "List[str]",
                    "bool",
                    "Dict"
                ]
            }
        },
        "WeatherABC.as_str": {
            "name": "as_str",
            "location": 237,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "WeatherABC.as_speech": {
            "name": "as_speech",
            "location": 244,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "elib_wx-master/elib_wx/weather_dcs.py": {
        "DCSWeather.normalize_altimeter": {
            "name": "normalize_altimeter",
            "location": 37,
            "return": [
                "int"
            ],
            "arguments": {
                "value": []
            }
        },
        "DCSWeather.normalize_temperature": {
            "name": "normalize_temperature",
            "location": 50,
            "return": [
                "int"
            ],
            "arguments": {
                "value": []
            }
        },
        "DCSWeather.normalize_turbulence": {
            "name": "normalize_turbulence",
            "location": 63,
            "return": [
                "int"
            ],
            "arguments": {
                "value": []
            }
        },
        "DCSWeather.normalize_dust_density": {
            "name": "normalize_dust_density",
            "location": 76,
            "return": [
                "int"
            ],
            "arguments": {
                "value": []
            }
        },
        "DCSWeather.normalize_fog_visibility": {
            "name": "normalize_fog_visibility",
            "location": 89,
            "return": [
                "int"
            ],
            "arguments": {
                "value": []
            }
        },
        "DCSWeather.normalize_cloud_base": {
            "name": "normalize_cloud_base",
            "location": 102,
            "return": [
                "int"
            ],
            "arguments": {
                "value": []
            }
        },
        "DCSWeather.normalize_cloud_thickness": {
            "name": "normalize_cloud_thickness",
            "location": 115,
            "return": [
                "int"
            ],
            "arguments": {
                "value": []
            }
        },
        "DCSWeather.normalize_wind_speed": {
            "name": "normalize_wind_speed",
            "location": 128,
            "return": [
                "int"
            ],
            "arguments": {
                "value": [],
                "name": [
                    "typing.Text"
                ]
            }
        }
    },
    "elib_wx-master/elib_wx/weather_dcs_generate.py": {
        "_make_ground_wind": {
            "name": "_make_ground_wind",
            "location": 21,
            "return": [
                "Tuple[(int, Any, int)]"
            ],
            "arguments": {
                "weather_object": [
                    "int"
                ]
            }
        },
        "_make_wind_in_altitude": {
            "name": "_make_wind_in_altitude",
            "location": 41,
            "return": [
                "Tuple[(int, Any, int, Any)]"
            ],
            "arguments": {
                "weather_object": []
            }
        },
        "_make_fog": {
            "name": "_make_fog",
            "location": 55,
            "return": [
                "Tuple[(bool, int, int)]"
            ],
            "arguments": {
                "weather_object": [
                    "int",
                    "str",
                    "Dict"
                ]
            }
        },
        "_make_dust": {
            "name": "_make_dust",
            "location": 67,
            "return": [
                "Tuple[(bool, int)]"
            ],
            "arguments": {
                "weather_object": []
            }
        },
        "_make_clouds": {
            "name": "_make_clouds",
            "location": 83,
            "return": [
                "Tuple[(int, int, int)]"
            ],
            "arguments": {
                "weather_object": [
                    "int"
                ]
            }
        },
        "_make_precipitations": {
            "name": "_make_precipitations",
            "location": 155,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "weather_object": [
                    "Collection[int]",
                    "str",
                    "Collection",
                    "int",
                    "List[int]",
                    "List[Tuple[str,int,int]]",
                    "List[tuple[Union[str,int,int]]]"
                ],
                "temperature": [
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "cloud_density": [
                    "str"
                ]
            }
        },
        "generate_dcs_weather": {
            "name": "generate_dcs_weather",
            "location": 177,
            "return": [
                "DCSWeather",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "weather_object": [
                    "str"
                ]
            }
        }
    },
    "elib_wx-master/elib_wx/weather_from_icao.py": {
        "weather_from_icao": {
            "name": "weather_from_icao",
            "location": 10,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "weather_object": [
                    "float"
                ]
            }
        }
    },
    "elib_wx-master/elib_wx/weather_from_metar_data.py": {
        "_make_altimeter": {
            "name": "_make_altimeter",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "weather_object": [
                    "int",
                    "bytes",
                    "float",
                    "Dict[str,str]"
                ]
            }
        },
        "_make_visibility": {
            "name": "_make_visibility",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "weather_object": [
                    "int",
                    "float"
                ]
            }
        },
        "_make_temperature": {
            "name": "_make_temperature",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "weather_object": [
                    "bool",
                    "bytes"
                ]
            }
        },
        "_make_dew_point": {
            "name": "_make_dew_point",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "weather_object": [
                    "bool"
                ]
            }
        },
        "_make_wind": {
            "name": "_make_wind",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "weather_object": [
                    "internals.values.python_values.builtin_mutvalues.Tuple"
                ]
            }
        },
        "weather_from_metar_data": {
            "name": "weather_from_metar_data",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "weather_object": [
                    "Dict[str,Any]",
                    "Dict",
                    "elib_wx.weather_abc.WeatherABC"
                ]
            }
        }
    },
    "elib_wx-master/elib_wx/weather_from_metar_string.py": {
        "weather_from_metar_string": {
            "name": "weather_from_metar_string",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "weather_object": [
                    "Sequence[str]",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "elib_wx-master/elib_wx/weather_from_miz.py": {
        "_make_clouds": {
            "name": "_make_clouds",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "weather_object": [
                    "Type[Frame]",
                    "Type"
                ],
                "mission_weather": [
                    "Type[BaseException]",
                    "int",
                    "Type"
                ]
            }
        },
        "_make_fog": {
            "name": "_make_fog",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "weather_object": [
                    "int"
                ],
                "mission_weather": [
                    "int",
                    "str",
                    "Dict",
                    "Set",
                    "bool"
                ]
            }
        },
        "_make_turbulence": {
            "name": "_make_turbulence",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "weather_object": [
                    "str"
                ],
                "mission_weather": [
                    "Callable",
                    "int"
                ]
            }
        },
        "_make_date_time": {
            "name": "_make_date_time",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "weather_object": [
                    "int",
                    "str",
                    "datetime.datetime"
                ],
                "mission": [
                    "str",
                    "int",
                    "Exception",
                    "Tuple[Tuple[str,...]]",
                    "Tuple[tuple[Union[str,...]]]"
                ]
            }
        },
        "_make_dust": {
            "name": "_make_dust",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "weather_object": [
                    "int",
                    "Iterable[T]",
                    "Sequence[cirq.Qid]",
                    "str",
                    "List"
                ],
                "mission_weather": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_make_precipitations": {
            "name": "_make_precipitations",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "weather_object": [
                    "List",
                    "str",
                    "List[int]",
                    "bytes"
                ],
                "mission_weather": [
                    "int",
                    "str",
                    "Sequence[int]",
                    "float",
                    "List[int]",
                    "Union[float,int]"
                ]
            }
        },
        "_make_metar": {
            "name": "_make_metar",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "weather_object": [
                    "List",
                    "int",
                    "Dict",
                    "slice",
                    "bool"
                ]
            }
        },
        "weather_from_miz_file": {
            "name": "weather_from_miz_file",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "weather_object": [
                    "str"
                ]
            }
        }
    },
    "elib_wx-master/elib_wx/weather_to_mission.py": {
        "apply_weather_to_mission_dict": {
            "name": "apply_weather_to_mission_dict",
            "location": 15,
            "return": [
                "Callable",
                "int"
            ],
            "arguments": {
                "weather_object": [
                    "bytes",
                    "List[str]",
                    "Mapping",
                    "str"
                ],
                "mission": [
                    "Dict",
                    "elib_miz.Mission",
                    "List",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "elib_wx-master/elib_wx/weather_to_miz.py": {
        "apply_weather_to_miz": {
            "name": "apply_weather_to_miz",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "weather_object": [
                    "Dict",
                    "elib_wx.weather_abc.WeatherABC",
                    "Mapping",
                    "bytes",
                    "List[str]",
                    "Mapping[str,Any]",
                    "None",
                    "Optional[List[str]]",
                    "UdpTransport"
                ],
                "source_file": [
                    "str",
                    "bool",
                    "bytes",
                    "pathlib.Path",
                    "Union[str,pathlib.Path]"
                ],
                "out_file": [
                    "str",
                    "pathlib.Path"
                ]
            }
        }
    },
    "elib_wx-master/elib_wx/weather_translate.py": {
        "wind": {
            "name": "wind",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "weather_object": [
                    "str",
                    "List[cirq.Qid]"
                ],
                "spoken": [
                    "Dict",
                    "str"
                ]
            }
        },
        "visibility": {
            "name": "visibility",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "weather_object": [
                    "Sequence[int]",
                    "Dict"
                ],
                "spoken": [
                    "str"
                ]
            }
        },
        "temperature": {
            "name": "temperature",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "weather_object": [
                    "str"
                ],
                "spoken": [
                    "str"
                ]
            }
        },
        "dew_point": {
            "name": "dew_point",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "weather_object": [],
                "spoken": []
            }
        },
        "altimeter": {
            "name": "altimeter",
            "location": 109,
            "return": [
                "str"
            ],
            "arguments": {
                "weather_object": [
                    "str"
                ],
                "spoken": [
                    "str"
                ]
            }
        },
        "other": {
            "name": "other",
            "location": 124,
            "return": [
                "str"
            ],
            "arguments": {
                "weather_object": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "_parse_cloud_layer_as_str": {
            "name": "_parse_cloud_layer_as_str",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cloud": [
                    "float",
                    "Union[int,str]",
                    "int",
                    "bool",
                    "str"
                ],
                "ret": [
                    "List",
                    "str",
                    "Dict"
                ],
                "spoken": [
                    "bool",
                    "str",
                    "List[str]",
                    "Dict[str,Any]",
                    "int"
                ]
            }
        },
        "clouds": {
            "name": "clouds",
            "location": 172,
            "return": [
                "str"
            ],
            "arguments": {
                "weather_object": [
                    "str"
                ],
                "spoken": [
                    "bool",
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "_parse_rmk": {
            "name": "_parse_rmk",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "rmk": [
                    "List[int]",
                    "Dict[str, Any]"
                ],
                "ret": [
                    "dict",
                    "int",
                    "bool",
                    "AsyncGenerator",
                    "Coroutine",
                    "str"
                ],
                "spoken": [
                    "Pattern",
                    "str",
                    "int"
                ]
            }
        },
        "remarks": {
            "name": "remarks",
            "location": 238,
            "return": [
                "str"
            ],
            "arguments": {
                "weather_object": [
                    "bool",
                    "str"
                ],
                "spoken": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "intro": {
            "name": "intro",
            "location": 268,
            "return": [
                "str"
            ],
            "arguments": {
                "weather_object": [
                    "int",
                    "Union[str,int]",
                    "str"
                ],
                "spoken": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "elib_wx-master/elib_wx/__init__.py": {},
    "elib_wx-master/elib_wx/avwx/core.py": {
        "valid_station": {
            "name": "valid_station",
            "location": 27,
            "return": [
                "Callable[[str], bool]",
                "List[object]",
                "Optional[str]",
                "dict",
                "int"
            ],
            "arguments": {
                "station": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "Tuple[str]",
                    "int"
                ]
            }
        },
        "uses_na_format": {
            "name": "uses_na_format",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "station": [
                    "str",
                    "int"
                ]
            }
        },
        "is_unknown": {
            "name": "is_unknown",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "val": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "unpack_fraction": {
            "name": "unpack_fraction",
            "location": 79,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "num": [
                    "str",
                    "int"
                ]
            }
        },
        "remove_leading_zeros": {
            "name": "remove_leading_zeros",
            "location": 95,
            "return": [
                "Text",
                "List[int]",
                "int",
                "Set[str]",
                "str",
                "Dict[str,int]"
            ],
            "arguments": {
                "num": [
                    "int",
                    "float",
                    "Union[int, float]",
                    "Union['Context', int]"
                ]
            }
        },
        "spoken_number": {
            "name": "spoken_number",
            "location": 120,
            "return": [
                "str"
            ],
            "arguments": {
                "num": [
                    "str",
                    "int",
                    "datetime.timedelta",
                    "float"
                ]
            }
        },
        "_make_number": {
            "name": "_make_number",
            "location": 139,
            "return": [
                "Optional[elib_wx.avwx.structs.Number]"
            ],
            "arguments": {
                "num": [
                    "Optional[str]",
                    "Optional[int]",
                    "Union[int, None]",
                    "int",
                    "bytes"
                ],
                "repr_": [
                    "None",
                    "int",
                    "Optional[int]",
                    "Union[int,None]"
                ],
                "speak": [
                    "int",
                    "None",
                    "bool",
                    "datetime.datetime"
                ]
            }
        },
        "make_number": {
            "name": "make_number",
            "location": 163,
            "return": [
                "Optional[elib_wx.avwx.structs.Number]"
            ],
            "arguments": {
                "num": [
                    "int",
                    "list",
                    "Sized",
                    "List[str]"
                ],
                "repr_": [
                    "int",
                    "None",
                    "str",
                    "Optional[int]",
                    "float"
                ],
                "speak": [
                    "int",
                    "None",
                    "str",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "find_first_in_list": {
            "name": "find_first_in_list",
            "location": 183,
            "return": [
                "int",
                "float",
                "str",
                "bool",
                "datetime.datetime"
            ],
            "arguments": {
                "txt": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ],
                "str_list": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_remarks": {
            "name": "get_remarks",
            "location": 196,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "txt": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "get_taf_remarks": {
            "name": "get_taf_remarks",
            "location": 220,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "txt": [
                    "str",
                    "List",
                    "List[int]",
                    "List[str]",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]",
                    "Tuple[int]"
                ]
            }
        },
        "sanitize_report_string": {
            "name": "sanitize_report_string",
            "location": 235,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "txt": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "sanitize_line": {
            "name": "sanitize_line",
            "location": 278,
            "return": [
                "str",
                "int",
                "set"
            ],
            "arguments": {
                "txt": [
                    "Optional[Tuple[str, ...]]",
                    "int",
                    "Dict[str, Any]",
                    "Iterable[Type]",
                    "Mapping[str, str]"
                ]
            }
        },
        "_extra_space_exists": {
            "name": "_extra_space_exists",
            "location": 294,
            "return": [
                "bool"
            ],
            "arguments": {
                "str1": [
                    "str",
                    "bytes",
                    "Optional[Union[str,Any]]",
                    "Optional[int]",
                    "datetime.tzinfo"
                ],
                "str2": [
                    "str",
                    "int"
                ],
                "ls1": [
                    "int",
                    "str"
                ],
                "ls2": [
                    "float",
                    "bool",
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "Optional[float]"
                ]
            }
        },
        "extra_space_exists": {
            "name": "extra_space_exists",
            "location": 316,
            "return": [
                "bool"
            ],
            "arguments": {
                "str1": [
                    "str"
                ],
                "str2": [
                    "str",
                    "int"
                ]
            }
        },
        "sanitize_report_list": {
            "name": "sanitize_report_list",
            "location": 353,
            "return": [
                "Tuple[(_T0, list, Any)]"
            ],
            "arguments": {
                "wxdata": [
                    "Set[int]"
                ],
                "remove_clr_and_skc": [
                    "bool",
                    "Dict",
                    "Dict[str,str]",
                    "Dict[Tuple[int,...],float]"
                ]
            }
        },
        "get_altimeter": {
            "name": "get_altimeter",
            "location": 429,
            "return": [
                "Tuple[(_T0, Any)]"
            ],
            "arguments": {
                "wxdata": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "units": [
                    "str",
                    "int",
                    "bool",
                    "Dict",
                    "Optional[Dict]",
                    "None"
                ],
                "version": [
                    "Text",
                    "bool",
                    "int",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "get_taf_alt_ice_turb": {
            "name": "get_taf_alt_ice_turb",
            "location": 490,
            "return": [
                "Tuple[(_T0, Any, list, list)]"
            ],
            "arguments": {
                "wxdata": [
                    "Pattern",
                    "int",
                    "Dict[str, List[str]]",
                    "bool"
                ]
            }
        },
        "is_possible_temp": {
            "name": "is_possible_temp",
            "location": 508,
            "return": [
                "bool"
            ],
            "arguments": {
                "temp": [
                    "str",
                    "int"
                ]
            }
        },
        "get_temp_and_dew": {
            "name": "get_temp_and_dew",
            "location": 518,
            "return": [
                "Tuple[(_T0, Any, Any)]"
            ],
            "arguments": {
                "wxdata": [
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "get_station_and_time": {
            "name": "get_station_and_time",
            "location": 547,
            "return": [
                "Tuple[(_T0, Any, Any)]"
            ],
            "arguments": {
                "wxdata": [
                    "List[str]",
                    "str",
                    "bool",
                    "bytes",
                    "int"
                ]
            }
        },
        "get_wind": {
            "name": "get_wind",
            "location": 563,
            "return": [
                "Tuple[(_T0, Any, Any, Any, list)]"
            ],
            "arguments": {
                "wxdata": [
                    "List",
                    "List[int]",
                    "int"
                ],
                "units": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_visibility": {
            "name": "get_visibility",
            "location": 626,
            "return": [
                "Tuple[(_T0, Any)]"
            ],
            "arguments": {
                "wxdata": [
                    "int",
                    "datetime.datetime",
                    "Callable[[int], None]",
                    "List[Tuple[int, int, int]]"
                ],
                "units": [
                    "str",
                    "bool"
                ]
            }
        },
        "starts_new_line": {
            "name": "starts_new_line",
            "location": 666,
            "return": [
                "bool"
            ],
            "arguments": {
                "item": [
                    "str"
                ]
            }
        },
        "split_taf": {
            "name": "split_taf",
            "location": 680,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "txt": [
                    "str",
                    "Optional[str]",
                    "Tuple[Tuple[int,...]]"
                ]
            }
        },
        "get_type_and_times": {
            "name": "get_type_and_times",
            "location": 696,
            "return": [
                "Tuple[(_T0, Any, Any, Any)]"
            ],
            "arguments": {
                "wxdata": [
                    "_T0@@"
                ]
            }
        },
        "_is_tempo_or_prob": {
            "name": "_is_tempo_or_prob",
            "location": 726,
            "return": [
                "bool"
            ],
            "arguments": {
                "report_type": [
                    "str",
                    "type",
                    "Type[Any]"
                ]
            }
        },
        "_get_next_time": {
            "name": "_get_next_time",
            "location": 737,
            "return": [
                "Text",
                "str",
                "Sequence[str]",
                "Set[str]",
                "List"
            ],
            "arguments": {
                "lines": [
                    "str",
                    "int"
                ],
                "target": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "find_missing_taf_times": {
            "name": "find_missing_taf_times",
            "location": 747,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "lines": [
                    "str",
                    "List[str]",
                    "int",
                    "Optional[int]"
                ],
                "start": [
                    "int",
                    "str",
                    "Tuple[int,int,int,int]",
                    "Tuple[Union[int,int,int,int]]",
                    "Optional[Tuple[int,int]]",
                    "None"
                ],
                "end": [
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "get_temp_min_and_max": {
            "name": "get_temp_min_and_max",
            "location": 775,
            "return": [
                "Tuple[(_T0, Any, Any)]"
            ],
            "arguments": {
                "wxlist": [
                    "List",
                    "float",
                    "Optional[list]"
                ]
            }
        },
        "_get_digit_list": {
            "name": "_get_digit_list",
            "location": 804,
            "return": [
                "Tuple[(_T0, list)]"
            ],
            "arguments": {
                "alist": [
                    "Tuple[int, int]",
                    "List[Tuple[int, int]]",
                    "List[List[Any]]",
                    "Tuple[int]",
                    "List[str]",
                    "Dict[str, Dict[str, Any]]",
                    "List[list]",
                    "list",
                    "Callable"
                ],
                "from_index": [
                    "List[List[Any]]",
                    "Tuple[int, int]",
                    "List[Tuple[int, int]]",
                    "List[str]",
                    "Tuple[int]",
                    "Callable",
                    "List[list]",
                    "Dict[str, Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "get_oceania_temp_and_alt": {
            "name": "get_oceania_temp_and_alt",
            "location": 816,
            "return": [
                "Tuple[(_T0, list, list)]"
            ],
            "arguments": {
                "wxlist": [
                    "List",
                    "Dict",
                    "int"
                ]
            }
        },
        "sanitize_cloud": {
            "name": "sanitize_cloud",
            "location": 830,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cloud": [
                    "str",
                    "int"
                ]
            }
        },
        "split_cloud": {
            "name": "split_cloud",
            "location": 847,
            "return": [
                "Tuple[(Any, Optional[int], Any)]"
            ],
            "arguments": {
                "cloud": [
                    "str"
                ]
            }
        },
        "make_cloud": {
            "name": "make_cloud",
            "location": 879,
            "return": [
                "elib_wx.avwx.structs.Cloud"
            ],
            "arguments": {
                "cloud": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "get_clouds": {
            "name": "get_clouds",
            "location": 888,
            "return": [
                "Tuple[(_T0, List[elib_wx.avwx.structs.Cloud])]"
            ],
            "arguments": {
                "wxdata": [
                    "str"
                ]
            }
        },
        "get_flight_rules": {
            "name": "get_flight_rules",
            "location": 908,
            "return": [
                "int"
            ],
            "arguments": {
                "vis": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "None",
                    "int"
                ],
                "ceiling": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "List[int]",
                    "bytes",
                    "Optional[bytes]",
                    "Optional[int]"
                ]
            }
        },
        "get_taf_flight_rules": {
            "name": "get_taf_flight_rules",
            "location": 942,
            "return": [
                "str",
                "List[tuple[Union[str,Any]]]",
                "List[str]",
                "Sequence[str]"
            ],
            "arguments": {
                "lines": [
                    "str",
                    "List[tuple[Union[str,Any]]]",
                    "int",
                    "List[Tuple[str,Any]]"
                ]
            }
        },
        "get_ceiling": {
            "name": "get_ceiling",
            "location": 964,
            "return": [
                "Text",
                "None",
                "Optional[int]",
                "bool",
                "str",
                "Optional[Literal[only_clustered,include_clustered]]",
                "Dict",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "clouds": [
                    "str",
                    "Dict",
                    "bool",
                    "T"
                ]
            }
        },
        "parse_date": {
            "name": "parse_date",
            "location": 980,
            "return": [
                "Optional[_datetime.datetime]"
            ],
            "arguments": {
                "date": [
                    "str",
                    "datetime.datetime",
                    "datetime.date",
                    "List[int]"
                ],
                "hour_threshold": [
                    "int",
                    "str",
                    "datetime.date"
                ]
            }
        },
        "make_timestamp": {
            "name": "make_timestamp",
            "location": 1009,
            "return": [
                "elib_wx.avwx.structs.Timestamp"
            ],
            "arguments": {
                "timestamp": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "elib_wx-master/elib_wx/avwx/exceptions.py": {
        "BadStationError.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "station": [
                    "str",
                    "bool",
                    "Union[str,Dict[str,str]]",
                    "Dict[str,str]"
                ],
                "msg": [
                    "str",
                    "Dict[str,Callable]",
                    "int",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        }
    },
    "elib_wx-master/elib_wx/avwx/metar.py": {
        "fetch": {
            "name": "fetch",
            "location": 21,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "station": [
                    "str",
                    "Exception",
                    "logging.Logger"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 32,
            "return": [
                "Tuple[Any, Any, Any]",
                "str"
            ],
            "arguments": {
                "station": [
                    "str"
                ],
                "txt": [
                    "str"
                ]
            }
        },
        "parse_na": {
            "name": "parse_na",
            "location": 40,
            "return": [
                "Tuple[(elib_wx.avwx.structs.MetarData, elib_wx.avwx.structs.Units)]"
            ],
            "arguments": {
                "txt": [
                    "Dict",
                    "Dict[str,Any]",
                    "int"
                ]
            }
        },
        "parse_in": {
            "name": "parse_in",
            "location": 66,
            "return": [
                "Tuple[(elib_wx.avwx.structs.MetarData, elib_wx.avwx.structs.Units)]"
            ],
            "arguments": {
                "txt": [
                    "int",
                    "Dict[str,Any]",
                    "List[str]"
                ]
            }
        }
    },
    "elib_wx-master/elib_wx/avwx/remarks.py": {
        "_tdec": {
            "name": "_tdec",
            "location": 15,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "code": [],
                "unit": [
                    "typing.Text"
                ]
            }
        },
        "temp_minmax": {
            "name": "temp_minmax",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "code": []
            }
        },
        "pressure_tendency": {
            "name": "pressure_tendency",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "code": [],
                "unit": [
                    "typing.Text"
                ]
            }
        },
        "precip_36": {
            "name": "precip_36",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "code": [],
                "unit": [
                    "typing.Text"
                ]
            }
        },
        "precip_24": {
            "name": "precip_24",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "code": [],
                "unit": [
                    "typing.Text"
                ]
            }
        },
        "sunshine_duration": {
            "name": "sunshine_duration",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "code": [],
                "unit": [
                    "typing.Text"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 80,
            "return": [
                "elib_wx.avwx.structs.RemarksData"
            ],
            "arguments": {
                "rmk": []
            }
        },
        "translate": {
            "name": "translate",
            "location": 92,
            "return": [
                "Dict[(Any, str)]"
            ],
            "arguments": {
                "remarks": []
            }
        }
    },
    "elib_wx-master/elib_wx/avwx/service.py": {
        "get_service": {
            "name": "get_service",
            "location": 161,
            "return": [
                "Type[Union[(AMO, MAC, NOAA)]]"
            ],
            "arguments": {
                "station": [
                    "str"
                ]
            }
        },
        "Service.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_type": [
                    "str",
                    "Optional[Dict[str,str]]",
                    "bool",
                    "Dict[str,str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Service.make_err": {
            "name": "make_err",
            "location": 33,
            "return": [
                "elib_wx.avwx.exceptions.InvalidRequestError"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[dict]",
                    "Mapping",
                    "Optional[Dict[str,str]]",
                    "int"
                ],
                "key": [
                    "Text",
                    "str",
                    "Optional[Callable]",
                    "List[Optional[Any]]",
                    "Optional[List[str]]",
                    "bool",
                    "Tuple[str,str]"
                ]
            }
        },
        "Service._extract": {
            "name": "_extract",
            "location": 40,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "station": [
                    "int",
                    "None",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Service.fetch": {
            "name": "fetch",
            "location": 46,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "station": [
                    "str",
                    "int"
                ]
            }
        },
        "NOAA._extract": {
            "name": "_extract",
            "location": 80,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "int",
                    "Callable",
                    "str"
                ],
                "station": [
                    "logging.Logger",
                    "Callable",
                    "None",
                    "Tuple[str]",
                    "int"
                ]
            }
        },
        "AMO._extract": {
            "name": "_extract",
            "location": 116,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "int",
                    "Callable",
                    "str"
                ],
                "station": [
                    "int",
                    "None",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "MAC._extract": {
            "name": "_extract",
            "location": 144,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "str",
                    "int",
                    "Callable"
                ],
                "station": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[int]",
                    "float",
                    "Optional[float]",
                    "bool"
                ]
            }
        }
    },
    "elib_wx-master/elib_wx/avwx/speech.py": {
        "ordinal": {
            "name": "ordinal",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "_number": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "wind": {
            "name": "wind",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "direction": [
                    "str",
                    "bytearray",
                    "bool",
                    "int"
                ],
                "speed": [
                    "str",
                    "bytearray",
                    "bool",
                    "int"
                ],
                "gust": [
                    "str",
                    "bytearray",
                    "bool",
                    "int"
                ],
                "vardir": [
                    "str",
                    "None",
                    "bytearray",
                    "bool",
                    "int"
                ],
                "unit": [
                    "Text",
                    "str",
                    "Dict[str,Any]",
                    "Dict",
                    "Dict[str,str]",
                    "int"
                ]
            }
        },
        "temperature": {
            "name": "temperature",
            "location": 37,
            "return": [
                "str",
                "Dict[str,Any]",
                "Dict",
                "int",
                "Mapping",
                "bytes"
            ],
            "arguments": {
                "header": [
                    "str",
                    "List[str]",
                    "bytes",
                    "int"
                ],
                "temp": [
                    "Dict",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None",
                    "Optional[float]",
                    "float"
                ],
                "unit": [
                    "int",
                    "Text"
                ]
            }
        },
        "visibility": {
            "name": "visibility",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "vis": [
                    "float",
                    "None",
                    "Optional[float]",
                    "int",
                    "Optional[int]",
                    "structs.Number"
                ],
                "unit": [
                    "Text",
                    "int",
                    "Dict",
                    "blurr.core.aggregate.AggregateSchema"
                ]
            }
        },
        "altimeter": {
            "name": "altimeter",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "alt": [
                    "bytes",
                    "bool",
                    "Optional[int]",
                    "None"
                ],
                "unit": [
                    "Text",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "other": {
            "name": "other",
            "location": 90,
            "return": [
                "str"
            ],
            "arguments": {
                "wxcodes": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "type_and_times": {
            "name": "type_and_times",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "type_": [
                    "BaseException"
                ],
                "start": [
                    "str",
                    "int"
                ],
                "end": [
                    "int",
                    "Optional[int]",
                    "List[str]",
                    "None",
                    "str",
                    "Optional[str]",
                    "Exception",
                    "Optional[Exception]"
                ],
                "probability": [
                    "structs.Number",
                    "str",
                    "None",
                    "List[str]",
                    "Dict[str,Any]",
                    "Optional[Sequence[T]]",
                    "Sequence[T]"
                ]
            }
        },
        "wind_shear": {
            "name": "wind_shear",
            "location": 123,
            "return": [
                "str"
            ],
            "arguments": {
                "shear": [
                    "str",
                    "bytearray",
                    "bool",
                    "Callable",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "unit_alt": [
                    "Text",
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[str,str]"
                ],
                "unit_wind": [
                    "Text",
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[str,str]"
                ]
            }
        },
        "metar": {
            "name": "metar",
            "location": 132,
            "return": [
                "str"
            ],
            "arguments": {
                "data": [
                    "structs.MetarData"
                ],
                "units": [
                    "Dict[str,Any]",
                    "List",
                    "structs.Units",
                    "T"
                ]
            }
        },
        "taf_line": {
            "name": "taf_line",
            "location": 156,
            "return": [
                "str"
            ],
            "arguments": {
                "line": [
                    "str",
                    "int",
                    "float"
                ],
                "units": [
                    "str",
                    "structs.Units",
                    "bool",
                    "List",
                    "Dict[str,Callable[str,Any]]",
                    "Union[list,str]",
                    "Dict[str,Callable[[str],Any]]"
                ]
            }
        },
        "taf": {
            "name": "taf",
            "location": 182,
            "return": [
                "str"
            ],
            "arguments": {
                "data": [
                    "Optional[int]",
                    "int",
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "units": [
                    "str",
                    "structs.Units",
                    "bytes",
                    "Dict"
                ]
            }
        }
    },
    "elib_wx-master/elib_wx/avwx/static.py": {},
    "elib_wx-master/elib_wx/avwx/structs.py": {},
    "elib_wx-master/elib_wx/avwx/summary.py": {
        "metar": {
            "name": "metar",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "trans": [
                    "float",
                    "Sequence[cirq.Qid]",
                    "structs.MetarTrans"
                ]
            }
        },
        "taf": {
            "name": "taf",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "trans": [
                    "float",
                    "Sequence[cirq.Qid]",
                    "structs.MetarTrans"
                ]
            }
        }
    },
    "elib_wx-master/elib_wx/avwx/taf.py": {
        "fetch": {
            "name": "fetch",
            "location": 16,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "station": [
                    "str",
                    "int",
                    "List"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 26,
            "return": [
                "Tuple[(elib_wx.avwx.structs.TafData, elib_wx.avwx.structs.Units)]"
            ],
            "arguments": {
                "station": [
                    "str",
                    "int"
                ],
                "txt": [
                    "str",
                    "int"
                ]
            }
        },
        "parse_lines": {
            "name": "parse_lines",
            "location": 77,
            "return": [
                "list"
            ],
            "arguments": {
                "lines": [
                    "str"
                ],
                "units": [
                    "str",
                    "List",
                    "List[str]",
                    "int"
                ],
                "use_na": [
                    "bool",
                    "str",
                    "List",
                    "List[str]",
                    "int"
                ]
            }
        },
        "parse_na_line": {
            "name": "parse_na_line",
            "location": 111,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "txt": [
                    "str",
                    "bytes"
                ],
                "units": [
                    "str",
                    "structs.Units",
                    "None",
                    "Optional[CustomerResourceIdentifier]",
                    "Optional[str]"
                ]
            }
        },
        "parse_in_line": {
            "name": "parse_in_line",
            "location": 133,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "txt": [
                    "str",
                    "Tuple[str]",
                    "Optional[Dict]"
                ],
                "units": [
                    "str",
                    "structs.Units",
                    "bool",
                    "None",
                    "Optional[str]"
                ]
            }
        }
    },
    "elib_wx-master/elib_wx/avwx/translate.py": {
        "get_cardinal_direction": {
            "name": "get_cardinal_direction",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "direction": []
            }
        },
        "wind": {
            "name": "wind",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "direction": [],
                "speed": [],
                "gust": [],
                "vardir": [],
                "unit": [
                    "typing.Text"
                ],
                "cardinals": [
                    "bool"
                ],
                "spoken": [
                    "bool"
                ]
            }
        },
        "visibility": {
            "name": "visibility",
            "location": 126,
            "return": [
                "str"
            ],
            "arguments": {
                "vis": [],
                "unit": [
                    "typing.Text"
                ]
            }
        },
        "temperature": {
            "name": "temperature",
            "location": 150,
            "return": [
                "str"
            ],
            "arguments": {
                "temp": [],
                "unit": [
                    "typing.Text"
                ]
            }
        },
        "altimeter": {
            "name": "altimeter",
            "location": 170,
            "return": [
                "str"
            ],
            "arguments": {
                "alt": [],
                "unit": [
                    "typing.Text"
                ]
            }
        },
        "clouds": {
            "name": "clouds",
            "location": 189,
            "return": [
                "str"
            ],
            "arguments": {
                "clds": [],
                "unit": [
                    "typing.Text"
                ]
            }
        },
        "wxcode": {
            "name": "wxcode",
            "location": 217,
            "return": [
                "typing.Text",
                "str"
            ],
            "arguments": {
                "code": []
            }
        },
        "other_list": {
            "name": "other_list",
            "location": 244,
            "return": [
                "str"
            ],
            "arguments": {
                "wxcodes": []
            }
        },
        "wind_shear": {
            "name": "wind_shear",
            "location": 253,
            "return": [
                "str"
            ],
            "arguments": {
                "shear": [],
                "unit_alt": [
                    "typing.Text"
                ],
                "unit_wind": [
                    "typing.Text"
                ],
                "spoken": [
                    "bool"
                ]
            }
        },
        "turb_ice": {
            "name": "turb_ice",
            "location": 266,
            "return": [
                "str"
            ],
            "arguments": {
                "turbice": [],
                "unit": [
                    "typing.Text"
                ]
            }
        },
        "min_max_temp": {
            "name": "min_max_temp",
            "location": 301,
            "return": [
                "str"
            ],
            "arguments": {
                "temp": [],
                "unit": [
                    "typing.Text"
                ]
            }
        },
        "shared": {
            "name": "shared",
            "location": 322,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "wxdata": [],
                "units": []
            }
        },
        "metar": {
            "name": "metar",
            "location": 334,
            "return": [
                "elib_wx.avwx.structs.MetarTrans"
            ],
            "arguments": {
                "wxdata": [],
                "units": []
            }
        },
        "taf": {
            "name": "taf",
            "location": 350,
            "return": [
                "elib_wx.avwx.structs.TafTrans"
            ],
            "arguments": {
                "wxdata": [],
                "units": []
            }
        }
    },
    "elib_wx-master/elib_wx/avwx/__init__.py": {
        "Report.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "station": [
                    "bool",
                    "blurr.core.record.Record",
                    "pymatgen.core.structure.Structure"
                ]
            }
        },
        "Report.update": {
            "name": "update",
            "location": 62,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "report": [
                    "int",
                    "None",
                    "str",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "Metar.update": {
            "name": "update",
            "location": 77,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "report": [
                    "Optional[int]",
                    "None",
                    "Optional[str]",
                    "int",
                    "Optional[float]",
                    "str",
                    "Optional[Sequence[Any]]",
                    "float",
                    "Sequence[Any]"
                ]
            }
        },
        "Metar.summary": {
            "name": "summary",
            "location": 95,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Metar.speech": {
            "name": "speech",
            "location": 104,
            "return": [
                "bool",
                "Dict[str, Any]",
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Taf.update": {
            "name": "update",
            "location": 121,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "report": [
                    "Optional[int]",
                    "None",
                    "Optional[str]",
                    "int",
                    "Optional[float]",
                    "str",
                    "Optional[Sequence[Any]]",
                    "float",
                    "Sequence[Any]"
                ]
            }
        },
        "Taf.summary": {
            "name": "summary",
            "location": 140,
            "return": [
                "List",
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Taf.speech": {
            "name": "speech",
            "location": 149,
            "return": [
                "bool",
                "Dict[str, Any]",
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "elib_wx-master/elib_wx/values/value.py": {
        "_gauss": {
            "name": "_gauss",
            "location": 20,
            "return": [
                "int"
            ],
            "arguments": {
                "mean": [],
                "sigma": []
            }
        },
        "Value.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "unit": [
                    "None"
                ]
            }
        },
        "Value.set_value": {
            "name": "set_value",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "unit": [
                    "None"
                ]
            }
        },
        "Value._get_unit_from_dict": {
            "name": "_get_unit_from_dict",
            "location": 63,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "unit": [
                    "None"
                ]
            }
        },
        "Value.value": {
            "name": "value",
            "location": 72,
            "return": [
                "Union[(float, int)]"
            ],
            "arguments": {
                "self": [],
                "unit": [
                    "None"
                ]
            }
        },
        "Value._pad": {
            "name": "_pad",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "unit": [],
                "value": []
            }
        },
        "Value.as_str": {
            "name": "as_str",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "unit": [
                    "None"
                ]
            }
        },
        "Value.as_str_all_units": {
            "name": "as_str_all_units",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Value.spoken": {
            "name": "spoken",
            "location": 115,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "unit": [
                    "None"
                ]
            }
        },
        "Value.spoken_all_units": {
            "name": "spoken_all_units",
            "location": 133,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Value.to_string": {
            "name": "to_string",
            "location": 141,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "unit": [
                    "None"
                ],
                "spoken": [
                    "bool"
                ],
                "all_units": [
                    "bool"
                ]
            }
        },
        "Value.__str__": {
            "name": "__str__",
            "location": 164,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Value.__repr__": {
            "name": "__repr__",
            "location": 167,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Value._validate": {
            "name": "_validate",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Visibility.value": {
            "name": "value",
            "location": 191,
            "return": [
                "Union[(float, int)]"
            ],
            "arguments": {
                "self": [],
                "unit": [
                    "None"
                ]
            }
        },
        "Direction._validate": {
            "name": "_validate",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Direction.normalize": {
            "name": "normalize",
            "location": 232,
            "return": [
                "int"
            ],
            "arguments": {
                "value": []
            }
        },
        "Direction.random_value": {
            "name": "random_value",
            "location": 244,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "Direction.random": {
            "name": "random",
            "location": 253,
            "return": [
                "Direction"
            ],
            "arguments": {}
        },
        "Direction.reverse": {
            "name": "reverse",
            "location": 262,
            "return": [
                "Direction"
            ],
            "arguments": {
                "self": [
                    "_TDirection@@Direction@@"
                ]
            }
        },
        "WindDirection.__init__": {
            "name": "__init__",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "unit": [
                    "None"
                ]
            }
        },
        "WindDirection.randomize_at_2000m": {
            "name": "randomize_at_2000m",
            "location": 282,
            "return": [
                "WindDirection"
            ],
            "arguments": {
                "self": [
                    "_TWindDirection@@WindDirection@@"
                ]
            }
        },
        "WindDirection.randomize_at_8000m": {
            "name": "randomize_at_8000m",
            "location": 293,
            "return": [
                "WindDirection"
            ],
            "arguments": {
                "self": [
                    "_TWindDirection@@WindDirection@@"
                ]
            }
        },
        "WindDirection.reverse": {
            "name": "reverse",
            "location": 304,
            "return": [
                "WindDirection"
            ],
            "arguments": {
                "self": [
                    "_TWindDirection@@WindDirection@@"
                ]
            }
        },
        "WindDirection.random": {
            "name": "random",
            "location": 314,
            "return": [
                "WindDirection"
            ],
            "arguments": {}
        },
        "WindSpeed.__init__": {
            "name": "__init__",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "unit": [
                    "None"
                ]
            }
        },
        "WindSpeed.random_value": {
            "name": "random_value",
            "location": 347,
            "return": [
                "float"
            ],
            "arguments": {}
        },
        "WindSpeed.randomize": {
            "name": "randomize",
            "location": 355,
            "return": [
                "WindSpeed"
            ],
            "arguments": {
                "base_speed": [],
                "offset": [
                    "float"
                ],
                "coef": [
                    "float"
                ],
                "sigma": [
                    "None"
                ]
            }
        },
        "WindSpeed.randomize_at_2000m": {
            "name": "randomize_at_2000m",
            "location": 383,
            "return": [
                "WindSpeed"
            ],
            "arguments": {
                "self": [
                    "_TWindSpeed@@WindSpeed@@"
                ]
            }
        },
        "WindSpeed.randomize_at_8000m": {
            "name": "randomize_at_8000m",
            "location": 390,
            "return": [
                "WindSpeed"
            ],
            "arguments": {
                "self": [
                    "_TWindSpeed@@WindSpeed@@"
                ]
            }
        },
        "WindSpeed.random": {
            "name": "random",
            "location": 398,
            "return": [
                "WindSpeed"
            ],
            "arguments": {}
        },
        "CloudBase.value": {
            "name": "value",
            "location": 422,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "unit": [
                    "None"
                ]
            }
        },
        "Temperature.make_dummy_dew_point": {
            "name": "make_dummy_dew_point",
            "location": 446,
            "return": [
                "Temperature"
            ],
            "arguments": {
                "self": [
                    "_TTemperature@@Temperature@@"
                ]
            }
        },
        "Temperature.set_value": {
            "name": "set_value",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "unit": [
                    "None"
                ]
            }
        },
        "Temperature.value": {
            "name": "value",
            "location": 480,
            "return": [
                "Union[(float, int)]"
            ],
            "arguments": {
                "self": [],
                "unit": []
            }
        }
    },
    "elib_wx-master/elib_wx/values/__init__.py": {},
    "elib_wx-master/test/conftest.py": {
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str,Any]"
                ]
            }
        },
        "pytest_unconfigure": {
            "name": "pytest_unconfigure",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        },
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "pytest_runtest_setup": {
            "name": "pytest_runtest_setup",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "item": [
                    "str",
                    "Union[int, slice]",
                    "list"
                ]
            }
        },
        "_global_tear_down": {
            "name": "_global_tear_down",
            "location": 55,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "Sequence[str]",
                    "Union[str,pathlib.Path]"
                ],
                "monkeypatch": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_clean_os_env": {
            "name": "_clean_os_env",
            "location": 73,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "metar_string": {
            "name": "metar_string",
            "location": 86,
            "return": [
                "str",
                "Generator"
            ],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "with_db": {
            "name": "with_db",
            "location": 92,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "all_metar_strings": {
            "name": "all_metar_strings",
            "location": 99,
            "return": [
                "List[str]",
                "Generator[list]"
            ],
            "arguments": {}
        },
        "examples_data_file": {
            "name": "examples_data_file",
            "location": 105,
            "return": [
                "pathlib.Path",
                "Generator"
            ],
            "arguments": {}
        },
        "caucasus_test_file": {
            "name": "caucasus_test_file",
            "location": 111,
            "return": [
                "pathlib.Path",
                "List[str]",
                "Optional[str]",
                "Union[str, pathlib.Path]",
                "str"
            ],
            "arguments": {}
        },
        "nevada_test_file": {
            "name": "nevada_test_file",
            "location": 116,
            "return": [
                "pathlib.Path",
                "List[str]",
                "Optional[str]",
                "Union[str, pathlib.Path]",
                "str"
            ],
            "arguments": {}
        },
        "persian_gulf_test_file": {
            "name": "persian_gulf_test_file",
            "location": 121,
            "return": [
                "pathlib.Path",
                "List[str]",
                "Optional[str]",
                "str"
            ],
            "arguments": {}
        },
        "wx_test_file_1": {
            "name": "wx_test_file_1",
            "location": 126,
            "return": [
                "pathlib.Path",
                "List[str]",
                "Optional[str]",
                "Union[str, pathlib.Path]",
                "str"
            ],
            "arguments": {}
        },
        "wx_test_file_heavy_dust": {
            "name": "wx_test_file_heavy_dust",
            "location": 131,
            "return": [
                "pathlib.Path",
                "List[str]",
                "Optional[str]",
                "Union[str, pathlib.Path]",
                "str"
            ],
            "arguments": {}
        },
        "wx_test_file_snow": {
            "name": "wx_test_file_snow",
            "location": 136,
            "return": [
                "pathlib.Path",
                "List[str]",
                "Optional[str]",
                "Union[str, pathlib.Path]",
                "str"
            ],
            "arguments": {}
        },
        "wx_test_file_snowstorm": {
            "name": "wx_test_file_snowstorm",
            "location": 141,
            "return": [
                "pathlib.Path",
                "List[str]",
                "Optional[str]",
                "Union[str, pathlib.Path]",
                "str"
            ],
            "arguments": {}
        },
        "wx_test_file_thunderstorm": {
            "name": "wx_test_file_thunderstorm",
            "location": 146,
            "return": [
                "pathlib.Path",
                "List[str]",
                "Optional[str]",
                "Union[str, pathlib.Path]",
                "str"
            ],
            "arguments": {}
        }
    },
    "elib_wx-master/test/refresh_test_data.py": {
        "iterate_metar_files": {
            "name": "iterate_metar_files",
            "location": 23,
            "return": [
                "Generator[(pathlib.Path, Any, None)]"
            ],
            "arguments": {}
        },
        "iterate_test_data": {
            "name": "iterate_test_data",
            "location": 35,
            "return": [
                "Generator[(str, Any, None)]"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "elib_wx-master/test/test_data.py": {
        "test_generate_data_for_review": {
            "name": "test_generate_data_for_review",
            "location": 43,
            "return": [],
            "arguments": {
                "all_metar_strings": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "dict"
                ],
                "examples_data_file": [
                    "Callable",
                    "str",
                    "IO[bytes]"
                ],
                "with_db": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "dict"
                ]
            }
        },
        "CustomHandler.emit": {
            "name": "emit",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "CustomHandler.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomHandler.handle": {
            "name": "handle",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "int"
                ]
            }
        },
        "CustomHandler.process": {
            "name": "process",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_file": [
                    "pathlib.Path",
                    "str",
                    "IO[Any]",
                    "Union[pathlib.Path, str]",
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "elib_wx-master/test/utils.py": {
        "_TestValue.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestValue._get_value": {
            "name": "_get_value",
            "location": 22,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "_obj": [
                    "str",
                    "List[Dict[str,Any]]",
                    "Dict",
                    "List[dict[str,Any]]",
                    "Callable[[KT,VT],bool]",
                    "Callable[_,bool]"
                ]
            }
        },
        "_TestValue.verify": {
            "name": "verify",
            "location": 28,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "_obj": [
                    "float",
                    "int"
                ]
            }
        },
        "_TestCall.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attr_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "expected": [
                    "List[int]",
                    "int",
                    "Optional[str]",
                    "str",
                    "None",
                    "bool",
                    "List[List[int]]",
                    "List[list[int]]"
                ]
            }
        },
        "_TestCall._get_value": {
            "name": "_get_value",
            "location": 40,
            "return": [
                "str",
                "Callable",
                "dict",
                "type"
            ],
            "arguments": {
                "self": [],
                "_obj": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "_TestCall.verify": {
            "name": "verify",
            "location": 43,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "_obj": [
                    "float",
                    "int"
                ]
            }
        }
    },
    "elib_wx-master/test/__init__.py": {},
    "elib_wx-master/test/test_avwx/test_core.py": {
        "test_split_cloud": {
            "name": "test_split_cloud",
            "location": 635,
            "return": [
                "None"
            ],
            "arguments": {
                "cloud": [
                    "str"
                ],
                "out": [
                    "str"
                ]
            }
        },
        "test_get_clouds": {
            "name": "test_get_clouds",
            "location": 661,
            "return": [
                "None"
            ],
            "arguments": {
                "wx": [],
                "clouds": [
                    "str",
                    "Type",
                    "Mapping"
                ]
            }
        },
        "BaseTest.assert_number": {
            "name": "assert_number",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num": [
                    "Set[str]",
                    "str",
                    "float",
                    "int",
                    "Any"
                ],
                "repr_": [
                    "int",
                    "List",
                    "str",
                    "List[int]",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]",
                    "List[List[int]]",
                    "List[list[int]]"
                ],
                "value": [
                    "float",
                    "None",
                    "str",
                    "List",
                    "int",
                    "List[datetime.date]",
                    "List[int]",
                    "List[float]"
                ],
                "spoken": [
                    "int",
                    "None",
                    "List",
                    "str",
                    "List[int]",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]",
                    "List[List[int]]",
                    "List[list[int]]"
                ]
            }
        },
        "TestGlobal.test_valid_station": {
            "name": "test_valid_station",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGlobal.test_uses_na_format": {
            "name": "test_uses_na_format",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGlobal.test_is_unknown": {
            "name": "test_is_unknown",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGlobal.test_unpack_fraction": {
            "name": "test_unpack_fraction",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGlobal.test_remove_leading_zeros": {
            "name": "test_remove_leading_zeros",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGlobal.test_spoken_number": {
            "name": "test_spoken_number",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGlobal.test_make_number": {
            "name": "test_make_number",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGlobal.test_find_first_in_list": {
            "name": "test_find_first_in_list",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGlobal.test_extra_space_exists": {
            "name": "test_extra_space_exists",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGlobal.test_sanitize_report_list": {
            "name": "test_sanitize_report_list",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGlobal.test_is_possible_temp": {
            "name": "test_is_possible_temp",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGlobal.test_get_temp_and_dew": {
            "name": "test_get_temp_and_dew",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGlobal.test_get_station_and_time": {
            "name": "test_get_station_and_time",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGlobal.test_get_wind": {
            "name": "test_get_wind",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGlobal.test_get_visibility": {
            "name": "test_get_visibility",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGlobal.test_get_digit_list": {
            "name": "test_get_digit_list",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGlobal.test_sanitize_cloud": {
            "name": "test_sanitize_cloud",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGlobal.test_make_cloud": {
            "name": "test_make_cloud",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGlobal.test_get_flight_rules": {
            "name": "test_get_flight_rules",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGlobal.test_get_ceiling": {
            "name": "test_get_ceiling",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGlobal.test_parse_date": {
            "name": "test_parse_date",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGlobal.test_make_timestamp": {
            "name": "test_make_timestamp",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMetar.test_get_remarks": {
            "name": "test_get_remarks",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMetar.test_sanitize_report_string": {
            "name": "test_sanitize_report_string",
            "location": 442,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMetar.test_get_altimeter": {
            "name": "test_get_altimeter",
            "location": 450,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTaf.test_get_taf_remarks": {
            "name": "test_get_taf_remarks",
            "location": 490,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTaf.test_sanitize_line": {
            "name": "test_sanitize_line",
            "location": 504,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTaf.test_is_tempo_or_prob": {
            "name": "test_is_tempo_or_prob",
            "location": 514,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTaf.test_get_taf_alt_ice_turb": {
            "name": "test_get_taf_alt_ice_turb",
            "location": 523,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTaf.test_starts_new_line": {
            "name": "test_starts_new_line",
            "location": 534,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTaf.test_split_taf": {
            "name": "test_split_taf",
            "location": 543,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTaf.test_get_type_and_times": {
            "name": "test_get_type_and_times",
            "location": 559,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTaf.test_find_missing_taf_times": {
            "name": "test_find_missing_taf_times",
            "location": 575,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTaf.test_get_temp_min_and_max": {
            "name": "test_get_temp_min_and_max",
            "location": 596,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTaf.test_get_oceania_temp_and_alt": {
            "name": "test_get_oceania_temp_and_alt",
            "location": 607,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "elib_wx-master/test/test_avwx/test_metar.py": {
        "TestMetar.test_parse": {
            "name": "test_parse",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMetar.test_metar_ete": {
            "name": "test_metar_ete",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "elib_wx-master/test/test_avwx/test_remarks.py": {
        "TestRemarks.test_tdec": {
            "name": "test_tdec",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemarks.test_temp_minmax": {
            "name": "test_temp_minmax",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemarks.test_pressure_tendency": {
            "name": "test_pressure_tendency",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemarks.test_precip_36": {
            "name": "test_precip_36",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemarks.test_precip_24": {
            "name": "test_precip_24",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemarks.test_sunshine_duration": {
            "name": "test_sunshine_duration",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemarks.test_parse": {
            "name": "test_parse",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemarks.test_translate": {
            "name": "test_translate",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "elib_wx-master/test/test_avwx/test_service.py": {
        "test_fetch_amo": {
            "name": "test_fetch_amo",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestService.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestService.test_init": {
            "name": "test_init",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestService.test_service": {
            "name": "test_service",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestService.test_make_err": {
            "name": "test_make_err",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestService.test_fetch": {
            "name": "test_fetch",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNOAA.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNOAA.test_fetch": {
            "name": "test_fetch",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMAC.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMAC.test_fetch": {
            "name": "test_fetch",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModule.test_get_service": {
            "name": "test_get_service",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "elib_wx-master/test/test_avwx/test_speech.py": {
        "test_type_and_times": {
            "name": "test_type_and_times",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "type_": [
                    "str"
                ],
                "start_time": [
                    "str",
                    "bool",
                    "None",
                    "int",
                    "List[str]",
                    "Union[None,int,str]",
                    "Optional[List[str]]"
                ],
                "end_time": [
                    "str",
                    "bool",
                    "None",
                    "int",
                    "List[str]",
                    "Union[None,int,str]",
                    "Optional[List[str]]"
                ],
                "prob": [
                    "Dict",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "spoken": [
                    "bool",
                    "str"
                ]
            }
        },
        "TestSpeech.test_wind": {
            "name": "test_wind",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpeech.test_temperature": {
            "name": "test_temperature",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpeech.test_visibility": {
            "name": "test_visibility",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpeech.test_altimeter": {
            "name": "test_altimeter",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpeech.test_other": {
            "name": "test_other",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpeech.test_metar": {
            "name": "test_metar",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpeech.test_wind_shear": {
            "name": "test_wind_shear",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpeech.test_taf_line": {
            "name": "test_taf_line",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpeech.test_taf": {
            "name": "test_taf",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "elib_wx-master/test/test_avwx/test_summary.py": {
        "TestSummary.test_metar": {
            "name": "test_metar",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSummary.test_taf": {
            "name": "test_taf",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "elib_wx-master/test/test_avwx/test_taf.py": {
        "test_fetch": {
            "name": "test_fetch",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse": {
            "name": "test_parse",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_prob_line": {
            "name": "test_prob_line",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_wind_shear": {
            "name": "test_wind_shear",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_prob_tempo": {
            "name": "test_prob_tempo",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_taf_ete": {
            "name": "test_taf_ete",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_taf_ete._nodate": {
            "name": "_nodate",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bool",
                    "float",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "elib_wx-master/test/test_avwx/test_translate.py": {
        "test_visibility": {
            "name": "test_visibility",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "vis": [],
                "unit": [],
                "translation": []
            }
        },
        "test_altimeter": {
            "name": "test_altimeter",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "alt": [],
                "unit": [],
                "translation": []
            }
        },
        "test_clouds_special": {
            "name": "test_clouds_special",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clouds": {
            "name": "test_clouds",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "clouds": [],
                "translation": []
            }
        },
        "test_wxcode": {
            "name": "test_wxcode",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "code": [],
                "translation": []
            }
        },
        "test_other_list": {
            "name": "test_other_list",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "codes": [],
                "translation": []
            }
        },
        "test_shared": {
            "name": "test_shared",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestMetar.test_cardinal_direction": {
            "name": "test_cardinal_direction",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMetar.test_wind": {
            "name": "test_wind",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMetar.test_temperature": {
            "name": "test_temperature",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMetar.test_metar": {
            "name": "test_metar",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTaf.test_wind_shear": {
            "name": "test_wind_shear",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTaf.test_turb_ice": {
            "name": "test_turb_ice",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTaf.test_min_max_temp": {
            "name": "test_min_max_temp",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTaf.test_taf": {
            "name": "test_taf",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "elib_wx-master/test/test_weather/test_all_metars.py": {
        "test_all_metars": {
            "name": "test_all_metars",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "metar_string": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "elib_wx-master/test/test_weather/test_from_icao.py": {
        "test_weather_from_icao": {
            "name": "test_weather_from_icao",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "with_db": []
            }
        },
        "test_weather_from_icao_unknown_icao": {
            "name": "test_weather_from_icao_unknown_icao",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_weather_from_icao_wrong_icao": {
            "name": "test_weather_from_icao_wrong_icao",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "elib_wx-master/test/test_weather/test_from_miz_file.py": {
        "test_from_miz_caucasus": {
            "name": "test_from_miz_caucasus",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "caucasus_test_file": []
            }
        },
        "test_from_miz_persian_gulf": {
            "name": "test_from_miz_persian_gulf",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "persian_gulf_test_file": []
            }
        },
        "test_from_miz_nevada": {
            "name": "test_from_miz_nevada",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "nevada_test_file": []
            }
        },
        "test_from_miz_wx1": {
            "name": "test_from_miz_wx1",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "wx_test_file_1": []
            }
        },
        "test_from_miz_thunderstorm": {
            "name": "test_from_miz_thunderstorm",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "wx_test_file_thunderstorm": []
            }
        },
        "test_from_miz_snow": {
            "name": "test_from_miz_snow",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "wx_test_file_snow": []
            }
        },
        "test_from_miz_snowstorm": {
            "name": "test_from_miz_snowstorm",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "wx_test_file_snowstorm": []
            }
        },
        "test_from_miz_heavy_dust": {
            "name": "test_from_miz_heavy_dust",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "wx_test_file_heavy_dust": []
            }
        }
    },
    "elib_wx-master/test/test_weather/test_source.py": {
        "test_from_metar_string": {
            "name": "test_from_metar_string",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_from_icao": {
            "name": "test_from_icao",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_wrong_source": {
            "name": "test_wrong_source",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [
                    "str",
                    "int",
                    "float",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "elib_wx-master/test/test_weather/test_weather_icao.py": {
        "test_unknown_icao": {
            "name": "test_unknown_icao",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_wrong_icao": {
            "name": "test_wrong_icao",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_known_icao": {
            "name": "test_known_icao",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "with_db": [
                    "bool"
                ]
            }
        }
    },
    "elib_wx-master/test/test_weather/test_wx_remarks.py": {
        "test_remarks": {
            "name": "test_remarks",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "metar_str": [
                    "str"
                ],
                "expected_remarks_speech": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "elib_wx-master/test/test_weather/test_dcs_weather/conftest.py": {
        "test_data": {
            "name": "test_data",
            "location": 59,
            "return": [
                "Tuple[str,Set[test.utils._TestValue]]",
                "Generator[tuple]"
            ],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        }
    },
    "elib_wx-master/test/test_weather/test_dcs_weather/test_apply_to_miz.py": {
        "test_apply_to_miz": {
            "name": "test_apply_to_miz",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "test_data": [
                    "str",
                    "List",
                    "Path",
                    "pathlib.Path"
                ],
                "wx_test_file_1": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "test_apply_to_miz_file_exists": {
            "name": "test_apply_to_miz_file_exists",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "test_data": [
                    "str"
                ],
                "wx_test_file_1": [
                    "str",
                    "None",
                    "pathlib.Path",
                    "Optional[pathlib.Path]"
                ]
            }
        },
        "test_apply_to_miz_file_exists_overwrite": {
            "name": "test_apply_to_miz_file_exists_overwrite",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "wx_test_file_1": [
                    "Dict[str,P]",
                    "str",
                    "pathlib.Path",
                    "Dict[str,cerulean.Path]"
                ]
            }
        },
        "test_apply_to_miz_no_source_file": {
            "name": "test_apply_to_miz_no_source_file",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "elib_wx-master/test/test_weather/test_dcs_weather/test_generate_dcs_weather.py": {
        "test_generate_dcs_weather": {
            "name": "test_generate_dcs_weather",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "test_data": [
                    "str",
                    "int",
                    "Union[str, TextIO]",
                    "dict"
                ]
            }
        },
        "test_dcs_wind_direction": {
            "name": "test_dcs_wind_direction",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "wind_dir": [
                    "str"
                ],
                "expected": [
                    "bytes",
                    "BinaryIO",
                    "Dict[str, Any]",
                    "bool",
                    "str"
                ]
            }
        },
        "test_generate_dcs_weather_cloud_layers": {
            "name": "test_generate_dcs_weather_cloud_layers",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "coverage": [
                    "int",
                    "bool"
                ],
                "range_": [
                    "int",
                    "Callable"
                ]
            }
        },
        "test_generate_dcs_weather_rain": {
            "name": "test_generate_dcs_weather_rain",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "coverage": [
                    "str",
                    "int",
                    "bool"
                ],
                "range_": [
                    "int",
                    "bool",
                    "Optional[Set[str]]",
                    "List[Dict[str, str]]"
                ],
                "rain_marker": [
                    "str",
                    "int",
                    "bool"
                ],
                "modifier": [
                    "str",
                    "int",
                    "bool"
                ],
                "temperature": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_generate_dcs_weather_rain_debug": {
            "name": "test_generate_dcs_weather_rain_debug",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_generate_dcs_weather_snow": {
            "name": "test_generate_dcs_weather_snow",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "coverage": [
                    "str",
                    "int",
                    "bool"
                ],
                "range_": [
                    "int",
                    "bool",
                    "Optional[Set[str]]",
                    "List[Dict[str, str]]"
                ],
                "snow_marker": [
                    "str",
                    "int",
                    "bool"
                ],
                "modifier": [
                    "str",
                    "int",
                    "bool"
                ],
                "temperature": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_generate_dcs_weather_thunderstorm": {
            "name": "test_generate_dcs_weather_thunderstorm",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "coverage": [
                    "str",
                    "int",
                    "bool"
                ],
                "range_": [
                    "int",
                    "bool",
                    "Optional[Set[str]]",
                    "List[Dict[str, str]]"
                ],
                "snow_marker": [
                    "str",
                    "int",
                    "bool"
                ],
                "modifier": [
                    "str",
                    "int",
                    "bool"
                ],
                "temperature": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_generate_dcs_weather_snow_storm": {
            "name": "test_generate_dcs_weather_snow_storm",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "coverage": [
                    "str",
                    "int",
                    "bool"
                ],
                "range_": [
                    "int",
                    "bool",
                    "Optional[Set[str]]",
                    "List[Dict[str, str]]"
                ],
                "snow_marker": [
                    "str",
                    "int",
                    "bool"
                ],
                "modifier": [
                    "str",
                    "int",
                    "bool"
                ],
                "temperature": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_generate_dcs_weather_dust": {
            "name": "test_generate_dcs_weather_dust",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "dust_marker": [
                    "Dict[str, float]",
                    "str"
                ],
                "modifier": [
                    "Dict[str, float]",
                    "str"
                ],
                "visibility": [
                    "Dict[str, float]",
                    "str"
                ]
            }
        },
        "test_missing_cloud_layer_altitude": {
            "name": "test_missing_cloud_layer_altitude",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_wrong_cloud_layer_altitude": {
            "name": "test_wrong_cloud_layer_altitude",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_turbulence_but_wind_speed_zero": {
            "name": "test_turbulence_but_wind_speed_zero",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_from_miz": {
            "name": "test_from_miz",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "caucasus_test_file": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "elib_wx-master/test/test_weather/test_dcs_weather/test_normalize.py": {
        "test_normalize": {
            "name": "test_normalize",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "attr": [
                    "str",
                    "Dict",
                    "int"
                ],
                "min_": [
                    "str"
                ],
                "max_": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        }
    },
    "elib_wx-master/test/test_weather/test_from_metar_str/test_from_metar_altimeter.py": {
        "test_altimeter_in_weather_from_metar_str": {
            "name": "test_altimeter_in_weather_from_metar_str",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "metar_str": [
                    "str"
                ],
                "expected": [
                    "bytes",
                    "str"
                ]
            }
        },
        "test_altimeter_in_weather_from_metar_str_no_altimeter_given": {
            "name": "test_altimeter_in_weather_from_metar_str_no_altimeter_given",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "elib_wx-master/test/test_weather/test_from_metar_str/test_from_metar_clouds.py": {
        "test_clouds_in_weather_from_metar_str": {
            "name": "test_clouds_in_weather_from_metar_str",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "metar_str": [
                    "str"
                ],
                "expected": [
                    "bytes",
                    "str"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "density": [
                    "str",
                    "Dict[str,Any]"
                ],
                "modifier": [
                    "str",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None",
                    "Optional[Union[str,Any]]",
                    "Any"
                ],
                "altitude": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "test_no_altitude": {
            "name": "test_no_altitude",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unknown_modifier": {
            "name": "test_unknown_modifier",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "elib_wx-master/test/test_weather/test_from_metar_str/test_from_metar_temperature.py": {
        "test_temperature_in_weather_from_metar_str": {
            "name": "test_temperature_in_weather_from_metar_str",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "metar_str": [],
                "expected": []
            }
        },
        "test_temperature_in_weather_from_metar_str_no_dewpoint_given": {
            "name": "test_temperature_in_weather_from_metar_str_no_dewpoint_given",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_temperature_in_weather_from_metar_str_no_temperature_given": {
            "name": "test_temperature_in_weather_from_metar_str_no_temperature_given",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "elib_wx-master/test/test_weather/test_from_metar_str/test_from_metar_visibility.py": {
        "test_visibility_in_weather_from_metar_str": {
            "name": "test_visibility_in_weather_from_metar_str",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "metar_str": [
                    "str"
                ],
                "expected": [
                    "bytes",
                    "str"
                ]
            }
        },
        "test_visibility_in_weather_from_metar_str_no_visibility_given": {
            "name": "test_visibility_in_weather_from_metar_str_no_visibility_given",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_visibility_in_weather_from_metar_str_special_cases": {
            "name": "test_visibility_in_weather_from_metar_str_special_cases",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "visibility": [
                    "str",
                    "int",
                    "Sequence[Sequence[T]]"
                ],
                "expected": [
                    "str",
                    "List[Optional[str]]",
                    "Optional[float]",
                    "Callable",
                    "float",
                    "None"
                ]
            }
        }
    },
    "elib_wx-master/test/test_weather/test_from_metar_str/test_from_metar_wind.py": {
        "test_wind_in_weather_from_metar_str": {
            "name": "test_wind_in_weather_from_metar_str",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "metar_str": [
                    "str"
                ],
                "expected": [
                    "bytes",
                    "str"
                ]
            }
        },
        "test_wind_in_weather_from_metar_str_no_wind_given": {
            "name": "test_wind_in_weather_from_metar_str_no_wind_given",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
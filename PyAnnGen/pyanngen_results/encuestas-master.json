{
    "encuestas-master/manage.py": {},
    "encuestas-master/merge_production_dotenvs_in_dotenv.py": {
        "merge": {
            "name": "merge",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "output_file_path": [
                    "str"
                ],
                "merged_file_paths": [
                    "Sequence[str]"
                ],
                "append_linesep": [
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_merge": {
            "name": "test_merge",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir_factory": [
                    "bool",
                    "int",
                    "str"
                ],
                "merged_file_count": [
                    "int",
                    "str",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]"
                ],
                "append_linesep": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "encuestas-master/query_test.py": {},
    "encuestas-master/config/urls.py": {},
    "encuestas-master/config/wsgi.py": {},
    "encuestas-master/config/__init__.py": {},
    "encuestas-master/config/settings/base.py": {},
    "encuestas-master/config/settings/local.py": {},
    "encuestas-master/config/settings/production.py": {},
    "encuestas-master/config/settings/test.py": {},
    "encuestas-master/config/settings/__init__.py": {},
    "encuestas-master/docs/conf.py": {},
    "encuestas-master/docs/__init__.py": {},
    "encuestas-master/encuestas/__init__.py": {},
    "encuestas-master/encuestas/api/apps.py": {},
    "encuestas-master/encuestas/api/serializers.py": {
        "RespuestaGuardar.save": {
            "name": "save",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "encuestas-master/encuestas/api/urls.py": {},
    "encuestas-master/encuestas/api/views.py": {},
    "encuestas-master/encuestas/api/__init__.py": {},
    "encuestas-master/encuestas/backoffice/apps.py": {},
    "encuestas-master/encuestas/backoffice/urls.py": {},
    "encuestas-master/encuestas/backoffice/views.py": {
        "dashboard": {
            "name": "dashboard",
            "location": 13,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "encuesta": {
            "name": "encuesta",
            "location": 71,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "int",
                    "str",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest",
                    "Union[zerver.models.UserProfile, zilencer.models.RemoteZulipServer]"
                ],
                "id_encuesta": [
                    "str",
                    "bool",
                    "None",
                    "Optional[int]",
                    "shop.transfer.models.ShopID",
                    "int"
                ]
            }
        },
        "encuestalist": {
            "name": "encuestalist",
            "location": 85,
            "return": [
                "HttpResponse",
                "str",
                "Optional[str]",
                "Tuple[str, Optional[int]]",
                "bytes"
            ],
            "arguments": {
                "request": [
                    "str",
                    "bytes",
                    "dict[, ]",
                    "bool",
                    "dict",
                    "Union[bool, str]",
                    "int"
                ],
                "id_encuesta": [
                    "str",
                    "bool",
                    "None",
                    "Optional[int]",
                    "shop.transfer.models.ShopID",
                    "int"
                ]
            }
        },
        "export_xls": {
            "name": "export_xls",
            "location": 147,
            "return": [
                "HttpResponse",
                "bytes",
                "dict"
            ],
            "arguments": {
                "request": [
                    "bool",
                    "str",
                    "int"
                ],
                "id_encuesta": [
                    "str",
                    "bool",
                    "None",
                    "Optional[int]",
                    "shop.transfer.models.ShopID",
                    "int"
                ]
            }
        }
    },
    "encuestas-master/encuestas/backoffice/__init__.py": {},
    "encuestas-master/encuestas/encuesta/admin.py": {},
    "encuestas-master/encuestas/encuesta/apps.py": {},
    "encuestas-master/encuestas/encuesta/models.py": {
        "Ciudad.__str__": {
            "name": "__str__",
            "location": 7,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Encuesta.__str__": {
            "name": "__str__",
            "location": 23,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatosEncuestado.__str__": {
            "name": "__str__",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pregunta.__str__": {
            "name": "__str__",
            "location": 61,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpcionRespuesta.__str__": {
            "name": "__str__",
            "location": 74,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Respuesta.__str__": {
            "name": "__str__",
            "location": 90,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "encuestas-master/encuestas/encuesta/urls.py": {},
    "encuestas-master/encuestas/encuesta/views.py": {
        "encuesta": {
            "name": "encuesta",
            "location": 6,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "typing.Callable[, ]",
                    "django.http.HttpRequest",
                    "Callable"
                ]
            }
        },
        "encuestaUno": {
            "name": "encuestaUno",
            "location": 10,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "typing.Callable[, ]",
                    "django.http.HttpRequest",
                    "Callable"
                ]
            }
        }
    },
    "encuestas-master/encuestas/encuesta/__init__.py": {},
    "encuestas-master/encuestas/encuesta/migrations/0001_initial.py": {},
    "encuestas-master/encuestas/encuesta/migrations/0002_auto_20190818_1708.py": {},
    "encuestas-master/encuestas/encuesta/migrations/0003_pregunta_especifica.py": {},
    "encuestas-master/encuestas/encuesta/migrations/0004_auto_20190819_0330.py": {},
    "encuestas-master/encuestas/encuesta/migrations/0005_auto_20190819_0801.py": {},
    "encuestas-master/encuestas/encuesta/migrations/0006_opcionrespuesta_genero.py": {},
    "encuestas-master/encuestas/encuesta/migrations/0007_auto_20190819_1655.py": {},
    "encuestas-master/encuestas/encuesta/migrations/0008_auto_20190819_2104.py": {},
    "encuestas-master/encuestas/encuesta/migrations/0009_auto_20190819_2105.py": {},
    "encuestas-master/encuestas/encuesta/migrations/__init__.py": {},
    "encuestas-master/encuestas/users/admin.py": {},
    "encuestas-master/encuestas/users/apps.py": {},
    "encuestas-master/encuestas/users/models.py": {
        "create_auth_token": {
            "name": "create_auth_token",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sender": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "list[dict[str, typing.Any]]",
                    "list",
                    "list[]",
                    "Sequence",
                    "typing.Sequence[]",
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ],
                "instance": [
                    "List[str]",
                    "None",
                    "str",
                    "Optional[Set[str]]",
                    "list[str]",
                    "bool",
                    "set[str]",
                    "models.User"
                ],
                "created": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "list",
                    "Sequence",
                    "Optional[Any]"
                ]
            }
        },
        "User.__str__": {
            "name": "__str__",
            "location": 51,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "encuestas-master/encuestas/users/permissions.py": {
        "IsUserOrReadOnly.has_object_permission": {
            "name": "has_object_permission",
            "location": 8,
            "return": [
                "bool",
                "Dict[str, Tuple[Any, Any]]",
                "Dict[str, bool]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "rest_framework.requesRequest"
                ],
                "view": [
                    "dict",
                    "dict[, ]"
                ],
                "obj": [
                    "str",
                    "rest_framework.requesRequest"
                ]
            }
        }
    },
    "encuestas-master/encuestas/users/serializers.py": {
        "CreateUserSerializer.create": {
            "name": "create",
            "location": 34,
            "return": [
                "str",
                "core.models.User",
                "list[str]",
                "dict[str, typing.Union[int,str]]",
                "user_models.User",
                "dict[str, str]",
                "lms.lmsdb.models.User",
                "lms.lmsdb.models.Solution",
                "zam_repondeur.models.Lecture",
                "aiolambda.Maybe[auth.user.User]",
                "database.User"
            ],
            "arguments": {
                "self": [],
                "validated_data": [
                    "str",
                    "raiden.utils.List[raiden.utils.Tuple[str, int]]",
                    "dict[, ]",
                    "typing.Sequence[]",
                    "dict",
                    "Sequence"
                ]
            }
        },
        "UserLoginSerializer.validate": {
            "name": "validate",
            "location": 51,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "_T0"
                ]
            }
        },
        "UserLoginSerializer.create": {
            "name": "create",
            "location": 62,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "bytes",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "UserSignUpSerializer.validate": {
            "name": "validate",
            "location": 89,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "_T0"
                ]
            }
        },
        "UserSignUpSerializer.create": {
            "name": "create",
            "location": 97,
            "return": [
                "str",
                "core.models.User",
                "int",
                "dict[str, typing.Union[int,str]]",
                "user_models.User",
                "dict[str, str]",
                "lms.lmsdb.models.User",
                "lms.lmsdb.models.Solution",
                "zam_repondeur.models.Lecture",
                "aiolambda.Maybe[auth.user.User]",
                "database.User"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "dict",
                    "src.models.generic_task.TaskState",
                    "str",
                    "bool"
                ]
            }
        },
        "UserSignUpSerializer.send_confirmation_email": {
            "name": "send_confirmation_email",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "bool",
                    "zerver.models.UserProfile",
                    "bob_emploi.frontend.api.user_pb2.User",
                    "int",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.Address"
                ]
            }
        },
        "UserSignUpSerializer.gen_verification_token": {
            "name": "gen_verification_token",
            "location": 115,
            "return": [
                "str",
                "Dict[str, Any]",
                "django.conf.settings.AUTH_USER_MODEL",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "int",
                    "str",
                    "datetime.datetime",
                    "None",
                    "zerver.models.Message",
                    "Optional[str]",
                    "tracim.models.auth.User",
                    "bool",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "AccountVerificationSerializer.validate_token": {
            "name": "validate_token",
            "location": 129,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "_T0"
                ]
            }
        },
        "AccountVerificationSerializer.save": {
            "name": "save",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "encuestas-master/encuestas/users/urls.py": {},
    "encuestas-master/encuestas/users/views.py": {
        "UserViewSet.get_permissions": {
            "name": "get_permissions",
            "location": 23,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserViewSet.login": {
            "name": "login",
            "location": 34,
            "return": [
                "Response",
                "flask.Response",
                "asgard.models.user.User",
                "dict",
                "int",
                "models.Dashboard"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "UserViewSet.signup": {
            "name": "signup",
            "location": 45,
            "return": [
                "Response",
                "flask.Response",
                "asgard.models.user.User",
                "dict",
                "int",
                "models.Dashboard"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "UserViewSet.verify": {
            "name": "verify",
            "location": 53,
            "return": [
                "Response",
                "int",
                "List[Callable]"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "encuestas-master/encuestas/users/__init__.py": {},
    "encuestas-master/encuestas/users/migrations/0001_initial.py": {},
    "encuestas-master/encuestas/users/migrations/__init__.py": {},
    "encuestas-master/encuestas/users/test/factories.py": {},
    "encuestas-master/encuestas/users/test/test_serializers.py": {
        "TestCreateUserSerializer.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateUserSerializer.test_serializer_with_empty_data": {
            "name": "test_serializer_with_empty_data",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateUserSerializer.test_serializer_with_valid_data": {
            "name": "test_serializer_with_valid_data",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateUserSerializer.test_serializer_hashes_password": {
            "name": "test_serializer_hashes_password",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "encuestas-master/encuestas/users/test/test_views.py": {
        "TestUserListTestCase.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserListTestCase.test_post_request_with_no_data_fails": {
            "name": "test_post_request_with_no_data_fails",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserListTestCase.test_post_request_with_valid_data_succeeds": {
            "name": "test_post_request_with_valid_data_succeeds",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserDetailTestCase.setUp": {
            "name": "setUp",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserDetailTestCase.test_get_request_returns_a_given_user": {
            "name": "test_get_request_returns_a_given_user",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserDetailTestCase.test_put_request_updates_a_user": {
            "name": "test_put_request_updates_a_user",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "encuestas-master/encuestas/users/test/__init__.py": {},
    "encuestas-master/encuestas/utils/fileManager.py": {
        "uglifyImageName": {
            "name": "uglifyImageName",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "instance": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "None",
                    "Optional[float]",
                    "Optional[Union[Any, Any]]",
                    "float",
                    "typing.Any"
                ],
                "filename": [
                    "str",
                    "Optional[str]",
                    "os.PathLike"
                ],
                "ruc": [
                    "str",
                    "None",
                    "List[str]",
                    "bool",
                    "tuple",
                    "list[str]",
                    "tuple[]"
                ]
            }
        },
        "uglifyImageNameEst": {
            "name": "uglifyImageNameEst",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "instance": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "None",
                    "Optional[float]",
                    "Optional[Union[Any, Any]]",
                    "float",
                    "typing.Any"
                ],
                "filename": [
                    "str",
                    "Optional[str]",
                    "os.PathLike"
                ],
                "ruc": [
                    "str",
                    "None",
                    "List[str]",
                    "bool",
                    "tuple",
                    "list[str]",
                    "tuple[]"
                ]
            }
        },
        "create_thumb": {
            "name": "create_thumb",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "file": [
                    "Sequence[str]",
                    "int",
                    "typing.Sequence[str]",
                    "BinaryIO",
                    "typing.BinaryIO"
                ],
                "thumbnail_size": [
                    "tuple[int]",
                    "int",
                    "Tuple[int, int, int]",
                    "Union[int, float]",
                    "str",
                    "PIL.ImageDraw"
                ]
            }
        },
        "ManageFiles.get_object": {
            "name": "get_object",
            "location": 43,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManageFiles.get_fieldimage": {
            "name": "get_fieldimage",
            "location": 45,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManageFiles.get_fieldthumb": {
            "name": "get_fieldthumb",
            "location": 47,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManageFiles.create_thumb": {
            "name": "create_thumb",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "encuestas-master/encuestas/utils/models.py": {},
    "encuestas-master/encuestas/utils/permissions.py": {
        "IsUserOwner.has_object_permission": {
            "name": "has_object_permission",
            "location": 5,
            "return": [
                "bool",
                "dict",
                "Dict[str, Tuple[Any, Any]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "rest_framework.requesRequest"
                ],
                "view": [
                    "dict",
                    "dict[, ]"
                ],
                "obj": [
                    "str",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "IsEmpresaOwner.has_object_permission": {
            "name": "has_object_permission",
            "location": 9,
            "return": [
                "bool",
                "dict",
                "Dict[str, bool]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "rest_framework.requesRequest"
                ],
                "view": [
                    "dict",
                    "dict[, ]"
                ],
                "obj": [
                    "str",
                    "rest_framework.requesRequest"
                ]
            }
        }
    },
    "encuestas-master/encuestas/utils/validators.py": {
        "validar_ruc_cedula": {
            "name": "validar_ruc_cedula",
            "location": 1,
            "return": [
                "bool"
            ],
            "arguments": {
                "nro": [
                    "str",
                    "int"
                ],
                "tipo": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "encuestas-master/encuestas/utils/__init__.py": {}
}
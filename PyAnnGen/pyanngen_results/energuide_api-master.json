{
    "energuide_api-master/etl/setup.py": {},
    "energuide_api-master/etl/src/energuide/bilingual.py": {},
    "energuide_api-master/etl/src/energuide/cli.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "load": {
            "name": "load",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "username": [
                    "str",
                    "bool",
                    "int"
                ],
                "password": [
                    "str",
                    "bool",
                    "int"
                ],
                "host": [
                    "str",
                    "bool",
                    "int"
                ],
                "port": [
                    "str",
                    "bool",
                    "int"
                ],
                "db_name": [
                    "str",
                    "List[str]",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "collection": [
                    "str",
                    "List[str]",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "azure": [
                    "bool",
                    "Iterable[float]",
                    "int"
                ],
                "filename": [
                    "str",
                    "int",
                    "bool"
                ],
                "update": [
                    "bool",
                    "str",
                    "None",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "progress": [
                    "str",
                    "bool",
                    "Optional[Union[str,Any]]",
                    "Any",
                    "None"
                ],
                "production": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "extract": {
            "name": "extract",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "infile": [
                    "float",
                    "int",
                    "str"
                ],
                "outfile": [
                    "str",
                    "bool"
                ],
                "progress": [
                    "str",
                    "int",
                    "Sequence[int]",
                    "bytes"
                ]
            }
        }
    },
    "energuide_api-master/etl/src/energuide/database.py": {
        "mongo_client": {
            "name": "mongo_client",
            "location": 55,
            "return": [
                "Iterable[pymongo.MongoClient]",
                "Generator"
            ],
            "arguments": {
                "database_coordinates": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "load": {
            "name": "load",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "coords": [
                    "str",
                    "Dict[str,Any]"
                ],
                "database_name": [
                    "str"
                ],
                "collection_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "data": [
                    "List[str]",
                    "bool",
                    "str",
                    "Optional[List[str]]"
                ],
                "update": [
                    "bool",
                    "Dict[str,Any]",
                    "MutableMapping[str,str]",
                    "Set[str]",
                    "Dict[str,str]",
                    "Dict"
                ]
            }
        },
        "DatabaseCoordinates.connection_string": {
            "name": "connection_string",
            "location": 45,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "energuide_api-master/etl/src/energuide/dwelling.py": {
        "_cast_nullable_string": {
            "name": "_cast_nullable_string",
            "location": 102,
            "return": [
                "None",
                "int",
                "Optional[str]",
                "Optional[List[Any]]",
                "Optional[List[str]]",
                "Optional[Any]",
                "Optional[Union[str,Any]]",
                "Optional[Dict[str,Any]]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Union[int, float]"
                ]
            }
        },
        "EvaluationType.from_code": {
            "name": "from_code",
            "location": 28,
            "return": [
                "bool",
                "Optional[Any]",
                "Type[Any]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "code": [
                    "str",
                    "bool",
                    "Union[int,float]",
                    "float"
                ]
            }
        },
        "Region._from_name": {
            "name": "_from_name",
            "location": 55,
            "return": [
                "None",
                "bool",
                "str",
                "Union[str,Pattern]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Region._from_code": {
            "name": "_from_code",
            "location": 60,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]",
                "bool",
                "Optional[Dict]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "Region.from_data": {
            "name": "from_data",
            "location": 68,
            "return": [
                "str",
                "List[int]",
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "Callable[[Any], str]"
                ],
                "data": [
                    "str",
                    "Dict",
                    "Callable[[Any],str]",
                    "Callable[Any,str]"
                ]
            }
        },
        "ParsedDwellingDataRow.from_row": {
            "name": "from_row",
            "location": 145,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "row": [
                    "Dict[str,Any]",
                    "List[str]",
                    "List[float]",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "Evaluation.__init__": {
            "name": "__init__",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Evaluation.from_data": {
            "name": "from_data",
            "location": 238,
            "return": [
                "Evaluation",
                "Type[BaseException]",
                "Optional[Type[BaseException]]",
                "Type"
            ],
            "arguments": {
                "cls": [
                    "Dict",
                    "Dict[str,Any]",
                    "Type[T]",
                    "Type",
                    "List[Dict]",
                    "List[dict]",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "data": [
                    "Dict",
                    "Optional[energuide.elemenElement]",
                    "None"
                ]
            }
        },
        "Evaluation.evaluation_type": {
            "name": "evaluation_type",
            "location": 260,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Evaluation.entry_date": {
            "name": "entry_date",
            "location": 264,
            "return": [
                "datetime.datetime",
                "str",
                "int",
                "datetime.date",
                "Union[datetime.datetime, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Evaluation.ers_rating": {
            "name": "ers_rating",
            "location": 268,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Evaluation.creation_date": {
            "name": "creation_date",
            "location": 272,
            "return": [
                "datetime.datetime",
                "str",
                "int",
                "datetime.date",
                "Union[datetime.datetime, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Evaluation.modification_date": {
            "name": "modification_date",
            "location": 276,
            "return": [
                "datetime.datetime",
                "str",
                "int",
                "datetime.date",
                "Union[datetime.datetime, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Evaluation.file_id": {
            "name": "file_id",
            "location": 280,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Evaluation.ceilings": {
            "name": "ceilings",
            "location": 284,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Evaluation.floors": {
            "name": "floors",
            "location": 288,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Evaluation.walls": {
            "name": "walls",
            "location": 292,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Evaluation.doors": {
            "name": "doors",
            "location": 296,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Evaluation.windows": {
            "name": "windows",
            "location": 300,
            "return": [
                "List[List[int]]",
                "str",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Evaluation.heated_floor": {
            "name": "heated_floor",
            "location": 304,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Evaluation.ventilations": {
            "name": "ventilations",
            "location": 308,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Evaluation.water_heatings": {
            "name": "water_heatings",
            "location": 312,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Evaluation.foundations": {
            "name": "foundations",
            "location": 316,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Evaluation.energy_upgrades": {
            "name": "energy_upgrades",
            "location": 320,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Evaluation.heating_system": {
            "name": "heating_system",
            "location": 324,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Evaluation.to_dict": {
            "name": "to_dict",
            "location": 327,
            "return": [
                "Dict[Text,Union[None,list]]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dwelling.__init__": {
            "name": "__init__",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dwelling._from_parsed_group": {
            "name": "_from_parsed_group",
            "location": 368,
            "return": [
                "Dwelling",
                "str",
                "Exception",
                "Dict",
                "int"
            ],
            "arguments": {
                "cls": [
                    "Dict",
                    "Dict[str,Any]",
                    "Type[T]",
                    "Type",
                    "memoryview",
                    "str",
                    "List[Dict]",
                    "List[dict]"
                ],
                "data": []
            }
        },
        "Dwelling.from_group": {
            "name": "from_group",
            "location": 386,
            "return": [
                "Dict[str, bool]",
                "int",
                "Exception",
                "dict",
                "str"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "list",
                    "Dict[str, str]"
                ],
                "data": [
                    "Dict",
                    "Dict[str,Any]",
                    "Type[T]"
                ]
            }
        },
        "Dwelling.house_id": {
            "name": "house_id",
            "location": 391,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dwelling.year_built": {
            "name": "year_built",
            "location": 395,
            "return": [
                "str",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dwelling.city": {
            "name": "city",
            "location": 399,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dwelling.region": {
            "name": "region",
            "location": 403,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dwelling.forward_sortation_area": {
            "name": "forward_sortation_area",
            "location": 407,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dwelling.evaluations": {
            "name": "evaluations",
            "location": 411,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dwelling.to_dict": {
            "name": "to_dict",
            "location": 414,
            "return": [
                "Dict[Text,list]",
                "Mapping[str,Any]",
                "Optional[str]",
                "Callable",
                "str",
                "Dict[str,Union[str,Set]]",
                "Optional[Dict[str,str]]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "energuide_api-master/etl/src/energuide/element.py": {
        "Element.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int",
                    "List[Dict[str,Any]]",
                    "Callable[...,T]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "Element.new": {
            "name": "new",
            "location": 21,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str,Any]",
                    "Set[str]",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,dict[str,Any]]"
                ],
                "tag": [
                    "str",
                    "Dict[str,Any]",
                    "Set[str]",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,dict[str,Any]]"
                ]
            }
        },
        "Element.from_string": {
            "name": "from_string",
            "location": 25,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "Callable",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "xml.etree.ElementTree.Element"
                ],
                "data": [
                    "str",
                    "xml.etree.ElementTree.Element",
                    "Dict"
                ]
            }
        },
        "Element.parse": {
            "name": "parse",
            "location": 32,
            "return": [
                "List[int]",
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "IO",
                    "Union[str,bytes]"
                ]
            }
        },
        "Element.findtext": {
            "name": "findtext",
            "location": 36,
            "return": [
                "int",
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.get_text": {
            "name": "get_text",
            "location": 39,
            "return": [
                "str",
                "None",
                "bool",
                "Dict",
                "Set",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.attrib": {
            "name": "attrib",
            "location": 51,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.xpath": {
            "name": "xpath",
            "location": 54,
            "return": [
                "List[Union[Element,Text]]",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.find": {
            "name": "find",
            "location": 58,
            "return": [
                "int",
                "Element",
                "bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.to_string": {
            "name": "to_string",
            "location": 62,
            "return": [
                "str",
                "Union[tuple, list]",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.__iter__": {
            "name": "__iter__",
            "location": 65,
            "return": [
                "Iterator[Any]",
                "Generator[Element]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.tag": {
            "name": "tag",
            "location": 70,
            "return": [
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.insert": {
            "name": "insert",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "Callable"
                ],
                "element": [
                    "Callable"
                ]
            }
        },
        "Element.get": {
            "name": "get",
            "location": 76,
            "return": [
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "xpath": [
                    "str"
                ],
                "type_": [
                    "str",
                    "Dict[str,Any]",
                    "Tuple[type]",
                    "Tuple[Type]"
                ]
            }
        }
    },
    "energuide_api-master/etl/src/energuide/exceptions.py": {
        "InvalidEmbeddedDataTypeError.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_class": [
                    "str",
                    "int",
                    "Type",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "msg": [
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[T]"
                ]
            }
        }
    },
    "energuide_api-master/etl/src/energuide/extractor.py": {
        "_empty_to_none": {
            "name": "_empty_to_none",
            "location": 39,
            "return": [
                "Tuple[int, int]",
                "bool",
                "float"
            ],
            "arguments": {
                "row": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, int]"
                ]
            }
        },
        "_validated": {
            "name": "_validated",
            "location": 46,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "row": [
                    "Dict[str,Any]",
                    "Dict",
                    "str",
                    "memoryview"
                ],
                "validator": [
                    "str",
                    "bytes",
                    "Dict[str, str]"
                ]
            }
        },
        "_read_csv": {
            "name": "_read_csv",
            "location": 53,
            "return": [
                "Iterator[Dict[str,Any]]",
                "Generator"
            ],
            "arguments": {
                "filepath": [
                    "str"
                ],
                "show_progress": [
                    "bool",
                    "str",
                    "Union[int,str]"
                ]
            }
        },
        "_safe_merge": {
            "name": "_safe_merge",
            "location": 69,
            "return": [
                "Dict[str, List[int]]",
                "str",
                "Optional[float]",
                "List[Dict[str, Any]]",
                "int",
                "bool"
            ],
            "arguments": {
                "data": [
                    "Dict[str, Any]",
                    "\"ks.Series\"",
                    "int",
                    "dict"
                ],
                "extra": [
                    "Dict[str,Any]",
                    "Dict",
                    "Dict[str,int]",
                    "bytes"
                ]
            }
        },
        "_extract_snippets": {
            "name": "_extract_snippets",
            "location": 77,
            "return": [
                "Tuple[int, int]",
                "float",
                "bool",
                "int"
            ],
            "arguments": {
                "row": [
                    "Dict[str, str]"
                ]
            }
        },
        "extract_data": {
            "name": "extract_data",
            "location": 105,
            "return": [
                "Iterator[Optional[Dict[str,Any]]]",
                "Generator",
                "Generator[None]"
            ],
            "arguments": {
                "input_path": [
                    "str"
                ],
                "show_progress": [
                    "str",
                    "bool"
                ]
            }
        },
        "write_data": {
            "name": "write_data",
            "location": 121,
            "return": [
                "Tuple[int]",
                "str",
                "int",
                "Generator",
                "bool"
            ],
            "arguments": {
                "data": [
                    "Iterable[Optional[Any]]",
                    "bool",
                    "str",
                    "[str]",
                    "Sequence[str]"
                ],
                "output_path": [
                    "str",
                    "bytes",
                    "List"
                ]
            }
        }
    },
    "energuide_api-master/etl/src/energuide/flask_app.py": {
        "_run_tl_and_verify": {
            "name": "_run_tl_and_verify",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "frontend": {
            "name": "frontend",
            "location": 84,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_alive": {
            "name": "test_alive",
            "location": 89,
            "return": [
                "Text",
                "str",
                "float"
            ],
            "arguments": {}
        },
        "robots": {
            "name": "robots",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "system_status": {
            "name": "system_status",
            "location": 99,
            "return": [
                "Text",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "run_tl": {
            "name": "run_tl",
            "location": 104,
            "return": [
                "Tuple[Text]",
                "Dict",
                "Callable",
                "List[str]"
            ],
            "arguments": {}
        },
        "ThreadRunner.start_new_thread": {
            "name": "start_new_thread",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Callable[,None]",
                    "int",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "target": [
                    "Callable[,None]",
                    "List[int]",
                    "bool",
                    "IO",
                    "str",
                    "telepresence.cli.PortMapping",
                    "int"
                ]
            }
        },
        "ThreadRunner.is_thread_running": {
            "name": "is_thread_running",
            "location": 74,
            "return": [
                "bool",
                "Optional[str]",
                "List[\"Taxon\"]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Tuple[List[str],Optional[Any]]",
                    "Tuple[Union[list[str],Any,None]]"
                ]
            }
        },
        "ThreadRunner.join": {
            "name": "join",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "Dict[str,str]",
                    "Dict",
                    "Optional[dict]",
                    "None",
                    "Optional[int]",
                    "Optional[Dict[str,str]]"
                ]
            }
        }
    },
    "energuide_api-master/etl/src/energuide/logger.py": {
        "unwrap_exception_message": {
            "name": "unwrap_exception_message",
            "location": 4,
            "return": [
                "Text",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "exc": [
                    "BaseException"
                ],
                "join": [
                    "Text",
                    "str",
                    "Tuple[float]",
                    "bool",
                    "List",
                    "List[str]"
                ]
            }
        },
        "get_logger": {
            "name": "get_logger",
            "location": 12,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "energuide_api-master/etl/src/energuide/snippets.py": {
        "_extract_nodes": {
            "name": "_extract_nodes",
            "location": 108,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "node": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "_get_nullable_fields": {
            "name": "_get_nullable_fields",
            "location": 112,
            "return": [
                "None",
                "Dict",
                "Callable",
                "Dict[str,Any]",
                "str",
                "Optional[float]",
                "Callable[[str],T]",
                "bytes"
            ],
            "arguments": {
                "root": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "snip_other_data": {
            "name": "snip_other_data",
            "location": 121,
            "return": [
                "OtherDataSnippet",
                "Optional[Dict[str,Any]]",
                "IO[bytes]",
                "bytes",
                "Dict[str,Any]"
            ],
            "arguments": {
                "root": [
                    "Optional[Mapping]",
                    "str",
                    "Mapping",
                    "None"
                ]
            }
        },
        "snip_house": {
            "name": "snip_house",
            "location": 129,
            "return": [
                "HouseSnippet",
                "str",
                "float"
            ],
            "arguments": {
                "house": [
                    "str",
                    "float"
                ]
            }
        },
        "snip_codes": {
            "name": "snip_codes",
            "location": 164,
            "return": [
                "Codes",
                "Dict[str,Tuple[Any,Any]]",
                "int",
                "Dict[str,Type[Any]]",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "codes": [
                    "str",
                    "bool",
                    "dict",
                    "int",
                    "float"
                ]
            }
        },
        "snip_energy_upgrades": {
            "name": "snip_energy_upgrades",
            "location": 174,
            "return": [
                "EnergyUpgradesSnippet",
                "Callable",
                "str"
            ],
            "arguments": {
                "energy_upgrades": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Codes.to_dict": {
            "name": "to_dict",
            "location": 20,
            "return": [
                "Dict[Text,dict[Text,]]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HouseSnippet.to_dict": {
            "name": "to_dict",
            "location": 61,
            "return": [
                "Dict[Text,]",
                "str",
                "bytes",
                "bool",
                "Sequence[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnergyUpgradesSnippet.to_dict": {
            "name": "to_dict",
            "location": 88,
            "return": [
                "Dict[Text,]",
                "str",
                "bytes",
                "bool",
                "Sequence[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OtherDataSnippet.to_dict": {
            "name": "to_dict",
            "location": 101,
            "return": [
                "Dict[Text,]",
                "str",
                "bytes",
                "bool",
                "Sequence[float]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "energuide_api-master/etl/src/energuide/transform.py": {
        "_read_groups": {
            "name": "_read_groups",
            "location": 113,
            "return": [
                "Iterator[List[Dict[str,Any]]]",
                "Generator[list]"
            ],
            "arguments": {
                "extracted_rows": [
                    "Iterable[dict[str,Any]]",
                    "None",
                    "Iterable[Dict[str,Any]]",
                    "Dict[str,str]",
                    "Dict",
                    "Dict[str,Any]",
                    "Optional[Dict]"
                ]
            }
        },
        "_generate_dwellings": {
            "name": "_generate_dwellings",
            "location": 119,
            "return": [
                "None",
                "Dict",
                "bool"
            ],
            "arguments": {
                "grouped": [
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]",
                    "str",
                    "Optional[str]",
                    "Sequence[str]",
                    "int"
                ]
            }
        },
        "transform": {
            "name": "transform",
            "location": 142,
            "return": [
                "Iterator[energuide.dwelling.Dwelling]",
                "Generator"
            ],
            "arguments": {
                "extract_reader": [
                    "int"
                ],
                "show_progress": [
                    "int",
                    "bool"
                ]
            }
        },
        "AzureCoordinates.from_env": {
            "name": "from_env",
            "location": 27,
            "return": [
                "AzureCoordinates",
                "str",
                "Optional[str]",
                "Optional[Dict[str,Any]]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "bool",
                    "List[int]",
                    "Iterable"
                ]
            }
        },
        "ExtractProtocol.extracted_rows": {
            "name": "extracted_rows",
            "location": 37,
            "return": [
                "Iterator[Dict[str,Any]]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtractProtocol.num_rows": {
            "name": "num_rows",
            "location": 40,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalExtractReader.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "zip_filename": [
                    "str",
                    "bytes"
                ]
            }
        },
        "LocalExtractReader.extracted_rows": {
            "name": "extracted_rows",
            "location": 49,
            "return": [
                "Iterator[Dict[str,Any]]",
                "Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalExtractReader.num_rows": {
            "name": "num_rows",
            "location": 57,
            "return": [
                "int",
                "Callable",
                "bool",
                "energuide.elemenElement"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureExtractReader.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "coords": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "AzureExtractReader._azure_service": {
            "name": "_azure_service",
            "location": 71,
            "return": [
                "int",
                "List[int]",
                "Callable",
                "str",
                "Dict",
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureExtractReader._new_files": {
            "name": "_new_files",
            "location": 79,
            "return": [
                "List",
                "List[str]",
                "str",
                "bool",
                "List[Tuple[str,str,str]]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureExtractReader.extracted_rows": {
            "name": "extracted_rows",
            "location": 102,
            "return": [
                "Iterator[Dict[str,Any]]",
                "Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureExtractReader.num_rows": {
            "name": "num_rows",
            "location": 109,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "energuide_api-master/etl/src/energuide/validator.py": {
        "DwellingValidator._validate_type_xml": {
            "name": "_validate_type_xml",
            "location": 8,
            "return": [
                "bool",
                "int",
                "Optional[float]",
                "str",
                "Dict[str,Any]",
                "Callable[...,None]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "FrozenSet[int]",
                    "frozenset"
                ]
            }
        },
        "DwellingValidator._normalize_coerce_parse_xml": {
            "name": "_normalize_coerce_parse_xml",
            "location": 11,
            "return": [
                "Dict[str, Any]",
                "str",
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "energuide_api-master/etl/src/energuide/__init__.py": {},
    "energuide_api-master/etl/src/energuide/embedded/area.py": {
        "Area.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "area_metric": [
                    "int",
                    "float",
                    "str",
                    "Union[float,int]",
                    "Tuple[int]",
                    "Type",
                    "Tuple[Union[float,float]]",
                    "Union[str,type]",
                    "Union[float,Tuple[float,float]]"
                ]
            }
        },
        "Area.square_metres": {
            "name": "square_metres",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Area.square_feet": {
            "name": "square_feet",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Area.from_square_feet": {
            "name": "from_square_feet",
            "location": 16,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Dict",
                    "Type[T]",
                    "str",
                    "Type"
                ],
                "area_square_feet": [
                    "bool",
                    "Dict",
                    "Type[T]",
                    "str",
                    "Type"
                ]
            }
        },
        "Area.__eq__": {
            "name": "__eq__",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Tuple[int,int,int]",
                    "Any",
                    "Tuple[Union[int,int,int]]"
                ]
            }
        },
        "Area.__repr__": {
            "name": "__repr__",
            "location": 22,
            "return": [
                "Text",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "energuide_api-master/etl/src/energuide/embedded/basement.py": {
        "BasementHeader.from_data": {
            "name": "from_data",
            "location": 67,
            "return": [
                "BasementHeader"
            ],
            "arguments": {
                "cls": [],
                "header": []
            }
        },
        "BasementHeader._header_area": {
            "name": "_header_area",
            "location": 85,
            "return": [
                "Area"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasementHeader.to_dict": {
            "name": "to_dict",
            "location": 88,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasementFloor._empty_floor": {
            "name": "_empty_floor",
            "location": 117,
            "return": [
                "BasementFloor"
            ],
            "arguments": {
                "cls": [],
                "floor_type": []
            }
        },
        "BasementFloor._from_data": {
            "name": "_from_data",
            "location": 130,
            "return": [
                "BasementFloor"
            ],
            "arguments": {
                "cls": [],
                "floor": [],
                "construction_type": [],
                "floor_type": []
            }
        },
        "BasementFloor.from_basement": {
            "name": "from_basement",
            "location": 177,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cls": [],
                "floor": []
            }
        },
        "BasementFloor.from_crawlspace": {
            "name": "from_crawlspace",
            "location": 184,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cls": [],
                "floor": []
            }
        },
        "BasementFloor.from_slab": {
            "name": "from_slab",
            "location": 194,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cls": [],
                "floor": []
            }
        },
        "BasementFloor.to_dict": {
            "name": "to_dict",
            "location": 200,
            "return": [
                "dict[typing.Text, None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasementWall._from_data": {
            "name": "_from_data",
            "location": 244,
            "return": [
                "BasementWall"
            ],
            "arguments": {
                "cls": [],
                "wall": [],
                "wall_perimeter": [],
                "wall_height": [],
                "tag": [],
                "backup_percentage": []
            }
        },
        "BasementWall.from_basement": {
            "name": "from_basement",
            "location": 270,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cls": [],
                "wall": [],
                "wall_perimeter": []
            }
        },
        "BasementWall.from_crawlspace": {
            "name": "from_crawlspace",
            "location": 317,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cls": [],
                "wall": [],
                "wall_perimeter": []
            }
        },
        "BasementWall.to_dict": {
            "name": "to_dict",
            "location": 339,
            "return": [
                "dict[typing.Text, None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Basement.from_data": {
            "name": "from_data",
            "location": 398,
            "return": [
                "Basement"
            ],
            "arguments": {
                "cls": [],
                "basement": []
            }
        },
        "Basement._derive_foundation_type": {
            "name": "_derive_foundation_type",
            "location": 443,
            "return": [],
            "arguments": {
                "tag": []
            }
        },
        "Basement._derive_material": {
            "name": "_derive_material",
            "location": 453,
            "return": [],
            "arguments": {
                "configuration_type": []
            }
        },
        "Basement.material": {
            "name": "material",
            "location": 464,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Basement.to_dict": {
            "name": "to_dict",
            "location": 467,
            "return": [
                "dict[typing.Text, typing.Union[None,list[]]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "energuide_api-master/etl/src/energuide/embedded/ceiling.py": {
        "Ceiling.from_data": {
            "name": "from_data",
            "location": 22,
            "return": [
                "Ceiling",
                "int",
                "str",
                "Mapping[str,Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict",
                    "Callable",
                    "Exception"
                ],
                "ceiling": [
                    "energuide.elemenElement",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "Ceiling.to_dict": {
            "name": "to_dict",
            "location": 40,
            "return": [
                "Dict[Text,]",
                "int",
                "Tuple",
                "str",
                "bool",
                "Union[float,str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "energuide_api-master/etl/src/energuide/embedded/code.py": {
        "WallCode.from_data": {
            "name": "from_data",
            "location": 22,
            "return": [
                "WallCode",
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "Dict[str,str]",
                    "Callable",
                    "Type"
                ],
                "wall_code": [
                    "str",
                    "int"
                ]
            }
        },
        "WindowCode.from_data": {
            "name": "from_data",
            "location": 66,
            "return": [
                "WindowCode",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable[,bool]",
                    "bool",
                    "List[dict]",
                    "int"
                ],
                "window_code": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "Codes.from_data": {
            "name": "from_data",
            "location": 129,
            "return": [
                "Codes",
                "str",
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "bool"
                ],
                "codes": [
                    "str",
                    "List[str]",
                    "Callable[[bytes],bytes]",
                    "Dict"
                ]
            }
        }
    },
    "energuide_api-master/etl/src/energuide/embedded/distance.py": {
        "Distance.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "distance_metres": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Distance.metres": {
            "name": "metres",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Distance.feet": {
            "name": "feet",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Distance.from_feet": {
            "name": "from_feet",
            "location": 16,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "Dict",
                    "str",
                    "bool",
                    "Callable",
                    "Dict[str,Any]"
                ],
                "distance_feet": [
                    "Dict",
                    "str",
                    "bool",
                    "Callable",
                    "Dict[str,Any]"
                ]
            }
        },
        "Distance.__eq__": {
            "name": "__eq__",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int,BitVec]",
                    "int"
                ]
            }
        },
        "Distance.__repr__": {
            "name": "__repr__",
            "location": 22,
            "return": [
                "Text",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "energuide_api-master/etl/src/energuide/embedded/door.py": {
        "Door.from_data": {
            "name": "from_data",
            "location": 22,
            "return": [
                "Door",
                "int",
                "str",
                "Mapping[str,Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict",
                    "Callable",
                    "Exception"
                ],
                "door": [
                    "energuide.elemenElement",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "Door.u_factor": {
            "name": "u_factor",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Door.u_factor_imperial": {
            "name": "u_factor_imperial",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Door._door_area": {
            "name": "_door_area",
            "location": 46,
            "return": [
                "Callable",
                "Tuple[Any, Any, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Door.to_dict": {
            "name": "to_dict",
            "location": 49,
            "return": [
                "Dict[Text,]",
                "Dict[str,Any]",
                "Dict[str,Set[str]]",
                "List",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "energuide_api-master/etl/src/energuide/embedded/floor.py": {
        "Floor.from_data": {
            "name": "from_data",
            "location": 20,
            "return": [
                "Floor",
                "int",
                "str",
                "Mapping[str,Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict",
                    "Callable",
                    "Exception"
                ],
                "floor": [
                    "energuide.elemenElement",
                    "Optional['models.LTI1p3Provider']",
                    "int",
                    "Dict[str, float]",
                    "Sequence",
                    "T"
                ]
            }
        },
        "Floor.to_dict": {
            "name": "to_dict",
            "location": 32,
            "return": [
                "Dict[Text,]",
                "int",
                "str",
                "List[Dict]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "energuide_api-master/etl/src/energuide/embedded/heated_floor_area.py": {
        "HeatedFloorArea.from_data": {
            "name": "from_data",
            "location": 15,
            "return": [
                "HeatedFloorArea",
                "int",
                "str",
                "Callable",
                "Callable[[None,None],bool]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict",
                    "Callable",
                    "Exception"
                ],
                "heated_floor_area": [
                    "bytes",
                    "Dict",
                    "energuide.elemenElement"
                ]
            }
        },
        "HeatedFloorArea.to_dict": {
            "name": "to_dict",
            "location": 24,
            "return": [
                "Dict[Text,]",
                "str",
                "bytes",
                "bool",
                "Sequence[float]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "energuide_api-master/etl/src/energuide/embedded/heating.py": {
        "Heating._get_output_size": {
            "name": "_get_output_size",
            "location": 82,
            "return": [],
            "arguments": {
                "cls": [],
                "node": []
            }
        },
        "Heating._get_heating_type": {
            "name": "_get_heating_type",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "node": []
            }
        },
        "Heating._get_energy_source": {
            "name": "_get_energy_source",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "node": []
            }
        },
        "Heating._get_equipment_type": {
            "name": "_get_equipment_type",
            "location": 130,
            "return": [],
            "arguments": {
                "cls": [],
                "node": []
            }
        },
        "Heating._get_steady_state": {
            "name": "_get_steady_state",
            "location": 136,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "node": []
            }
        },
        "Heating.from_data": {
            "name": "from_data",
            "location": 145,
            "return": [
                "Heating"
            ],
            "arguments": {
                "cls": [],
                "node": []
            }
        },
        "Heating.to_dict": {
            "name": "to_dict",
            "location": 174,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "energuide_api-master/etl/src/energuide/embedded/insulation.py": {
        "Insulation.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rsi": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Insulation.rsi": {
            "name": "rsi",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Insulation.r_value": {
            "name": "r_value",
            "location": 12,
            "return": [
                "IO[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Insulation.from_r_value": {
            "name": "from_r_value",
            "location": 16,
            "return": [
                "str",
                "bool",
                "Type[Any]",
                "type",
                "Type"
            ],
            "arguments": {
                "cls": [
                    "float",
                    "str",
                    "Dict",
                    "int",
                    "bool"
                ],
                "r_value": [
                    "float",
                    "str",
                    "Dict",
                    "int",
                    "bool"
                ]
            }
        },
        "Insulation.__eq__": {
            "name": "__eq__",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int,BitVec]",
                    "int"
                ]
            }
        },
        "Insulation.__repr__": {
            "name": "__repr__",
            "location": 22,
            "return": [
                "Text",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "energuide_api-master/etl/src/energuide/embedded/upgrade.py": {
        "Upgrade.from_data": {
            "name": "from_data",
            "location": 14,
            "return": [
                "Upgrade",
                "bool",
                "Tuple[str,List[str],List[float],List[str],List[float],List[float],List[Any]]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "bool",
                    "str",
                    "int"
                ],
                "setting": [
                    "str",
                    "Tuple",
                    "Dict[int,List[int]]",
                    "Set[str]",
                    "Dict[int,list[int]]"
                ]
            }
        },
        "Upgrade.to_dict": {
            "name": "to_dict",
            "location": 21,
            "return": [
                "bool",
                "Dict[Text,]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "energuide_api-master/etl/src/energuide/embedded/ventilation.py": {
        "Ventilation._derive_ventilation_type": {
            "name": "_derive_ventilation_type",
            "location": 48,
            "return": [],
            "arguments": {
                "total_supply_flow": [],
                "energy_star": [],
                "institute_certified": []
            }
        },
        "Ventilation.from_data": {
            "name": "from_data",
            "location": 62,
            "return": [
                "Ventilation"
            ],
            "arguments": {
                "cls": [],
                "ventilation": []
            }
        },
        "Ventilation.air_flow_rate_cmf": {
            "name": "air_flow_rate_cmf",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ventilation.to_dict": {
            "name": "to_dict",
            "location": 82,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "energuide_api-master/etl/src/energuide/embedded/wall.py": {
        "Wall.from_data": {
            "name": "from_data",
            "location": 27,
            "return": [
                "Wall",
                "int",
                "str",
                "Mapping[str,Any]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Type[T]",
                    "Type",
                    "Dict[str,Any]",
                    "FrozenSet[int]",
                    "frozenset",
                    "List[libkol.Item]",
                    "List[I]"
                ],
                "wall": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "wall_codes": [
                    "int",
                    "Dict[str,energuide.embedded.code.WallCode]",
                    "None",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "Wall._wall_area": {
            "name": "_wall_area",
            "location": 47,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wall.to_dict": {
            "name": "to_dict",
            "location": 50,
            "return": [
                "Dict[Text,dict[str,Union[str,None]]]",
                "str",
                "Dict[str,str]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "energuide_api-master/etl/src/energuide/embedded/water_heating.py": {
        "WaterHeating._from_data": {
            "name": "_from_data",
            "location": 282,
            "return": [
                "WaterHeating"
            ],
            "arguments": {
                "cls": [],
                "water_heating": []
            }
        },
        "WaterHeating.from_data": {
            "name": "from_data",
            "location": 313,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cls": [],
                "water_heating": []
            }
        },
        "WaterHeating.tank_volume_gallon": {
            "name": "tank_volume_gallon",
            "location": 319,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WaterHeating.to_dict": {
            "name": "to_dict",
            "location": 322,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "energuide_api-master/etl/src/energuide/embedded/window.py": {
        "Window.from_data": {
            "name": "from_data",
            "location": 33,
            "return": [
                "Dict",
                "Window"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Mapping",
                    "int",
                    "Mapping[str,str]"
                ],
                "window": [
                    "str",
                    "int",
                    "bool",
                    "Dict[str, str]",
                    "dict"
                ],
                "window_codes": [
                    "str",
                    "int"
                ]
            }
        },
        "Window._window_area": {
            "name": "_window_area",
            "location": 52,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.to_dict": {
            "name": "to_dict",
            "location": 55,
            "return": [
                "str",
                "Dict[Text,dict[str,Union[str,None]]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "energuide_api-master/etl/src/energuide/embedded/__init__.py": {},
    "energuide_api-master/etl/tests/conftest.py": {
        "azure_emulator_is_running": {
            "name": "azure_emulator_is_running",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "username": {
            "name": "username",
            "location": 31,
            "return": [
                "str",
                "Optional[str]",
                "Optional[int]",
                "bool"
            ],
            "arguments": {}
        },
        "password": {
            "name": "password",
            "location": 36,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "host": {
            "name": "host",
            "location": 41,
            "return": [
                "str",
                "Optional[str]",
                "Optional[int]",
                "bool"
            ],
            "arguments": {}
        },
        "port": {
            "name": "port",
            "location": 46,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "production": {
            "name": "production",
            "location": 51,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {}
        },
        "database_name": {
            "name": "database_name",
            "location": 56,
            "return": [
                "Iterable[str]",
                "Generator[Text]"
            ],
            "arguments": {
                "database_coordinates": [
                    "str"
                ]
            }
        },
        "collection": {
            "name": "collection",
            "location": 68,
            "return": [
                "str",
                "Optional[str]",
                "Optional[int]",
                "bool"
            ],
            "arguments": {}
        },
        "database_coordinates": {
            "name": "database_coordinates",
            "location": 73,
            "return": [
                "str",
                "bool",
                "Dict[str, List[str]]"
            ],
            "arguments": {
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "host": [
                    "str"
                ],
                "port": [
                    "str"
                ],
                "production": [
                    "str"
                ]
            }
        },
        "mongo_client": {
            "name": "mongo_client",
            "location": 88,
            "return": [
                "Iterable[pymongo.MongoClient]",
                "Generator"
            ],
            "arguments": {
                "database_coordinates": [
                    "str"
                ]
            }
        },
        "energuide_fixture": {
            "name": "energuide_fixture",
            "location": 95,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "energuide_zip_fixture": {
            "name": "energuide_zip_fixture",
            "location": 100,
            "return": [
                "Text",
                "int",
                "List[int]",
                "IO",
                "bytes",
                "List[str]"
            ],
            "arguments": {
                "tmpdir": [
                    "int",
                    "List[int]",
                    "IO",
                    "bytes",
                    "List[str]"
                ],
                "energuide_fixture": [
                    "int",
                    "bytes",
                    "Dict[str,str]",
                    "Dict"
                ]
            }
        },
        "sample_fixture": {
            "name": "sample_fixture",
            "location": 109,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "_get_blob_service": {
            "name": "_get_blob_service",
            "location": 113,
            "return": [
                "int",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "coords": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "azure_coordinates": {
            "name": "azure_coordinates",
            "location": 120,
            "return": [
                "str",
                "List[bytes]",
                "bool",
                "bytes"
            ],
            "arguments": {
                "monkeypatch": [
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "azure_emulator": {
            "name": "azure_emulator",
            "location": 136,
            "return": [
                "Iterator[energuide.transform.AzureCoordinates]",
                "Generator[str]"
            ],
            "arguments": {
                "azure_coordinates": [
                    "str"
                ]
            }
        },
        "populated_azure_emulator": {
            "name": "populated_azure_emulator",
            "location": 144,
            "return": [
                "int",
                "Callable",
                "bytes",
                "str",
                "BinaryIO",
                "None"
            ],
            "arguments": {
                "azure_emulator": [
                    "int",
                    "bytes",
                    "BinaryIO",
                    "Optional[int]",
                    "None"
                ],
                "energuide_zip_fixture": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "energuide_api-master/etl/tests/test_cli.py": {
        "data1": {
            "name": "data1",
            "location": 13,
            "return": [
                "Dict[Text,Union[Text,None]]",
                "int",
                "Dict",
                "bool",
                "Dict[str,Any]"
            ],
            "arguments": {}
        },
        "data2": {
            "name": "data2",
            "location": 48,
            "return": [
                "Dict[str, List[int]]",
                "str",
                "Optional[float]",
                "dict",
                "float",
                "int"
            ],
            "arguments": {}
        },
        "data_dict": {
            "name": "data_dict",
            "location": 56,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "request": [
                    "Set[str]"
                ]
            }
        },
        "valid_filepath": {
            "name": "valid_filepath",
            "location": 61,
            "return": [
                "Text",
                "Callable[[str],bool]",
                "List[object]",
                "Optional[str]",
                "Dict",
                "int"
            ],
            "arguments": {
                "tmpdir": [
                    "int",
                    "str",
                    "Optional[float]",
                    "float",
                    "None",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ],
                "data_dict": [
                    "Dict",
                    "Dict[str,Any]",
                    "bool",
                    "bytes"
                ]
            }
        },
        "invalid_filepath": {
            "name": "invalid_filepath",
            "location": 72,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tmpdir": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_load_filename": {
            "name": "test_load_filename",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "energuide_zip_fixture": [
                    "str"
                ],
                "database_name": [
                    "str"
                ],
                "collection": [
                    "str",
                    "int",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Dict",
                    "List[str]",
                    "None",
                    "bool"
                ],
                "mongo_client": [
                    "str",
                    "int",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Dict",
                    "List[str]",
                    "None",
                    "bool"
                ]
            }
        },
        "test_load_azure": {
            "name": "test_load_azure",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "database_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "collection": [
                    "int",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ],
                "mongo_client": [
                    "int",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "test_load_update": {
            "name": "test_load_update",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "energuide_zip_fixture": [
                    "str"
                ],
                "database_name": [
                    "str"
                ],
                "collection": [
                    "str",
                    "int",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Dict",
                    "None",
                    "bool"
                ],
                "mongo_client": [
                    "str",
                    "int",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Dict",
                    "None",
                    "bool"
                ]
            }
        },
        "test_extract_valid": {
            "name": "test_extract_valid",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_filepath": [
                    "str",
                    "int",
                    "Type"
                ],
                "tmpdir": [
                    "List[int]",
                    "energuide.embedded.window.Window"
                ]
            }
        },
        "test_extract_invalid": {
            "name": "test_extract_invalid",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "invalid_filepath": [
                    "str",
                    "int"
                ],
                "tmpdir": [
                    "str",
                    "float"
                ]
            }
        },
        "test_extract_missing": {
            "name": "test_extract_missing",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ]
            }
        }
    },
    "energuide_api-master/etl/tests/test_database.py": {
        "load_data": {
            "name": "load_data",
            "location": 9,
            "return": [
                "List",
                "Callable",
                "Tuple[str,str]"
            ],
            "arguments": {}
        },
        "test_load": {
            "name": "test_load",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "database_coordinates": [
                    "str"
                ],
                "mongo_client": [
                    "str",
                    "pymongo.MongoClient"
                ],
                "database_name": [
                    "str",
                    "Callable",
                    "Dict[str,str]"
                ],
                "collection": [
                    "str",
                    "Callable",
                    "Dict[str,str]"
                ],
                "load_data": [
                    "str"
                ]
            }
        },
        "test_load_update": {
            "name": "test_load_update",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "database_coordinates": [
                    "str",
                    "Callable"
                ],
                "mongo_client": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "database_name": [
                    "str",
                    "Callable",
                    "Dict[str,str]"
                ],
                "collection": [
                    "str",
                    "Callable",
                    "Dict[str,str]"
                ],
                "load_data": [
                    "str",
                    "Callable"
                ]
            }
        }
    },
    "energuide_api-master/etl/tests/test_dwelling.py": {
        "ceiling_input": {
            "name": "ceiling_input",
            "location": 29,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "floor_input": {
            "name": "floor_input",
            "location": 47,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "wall_input": {
            "name": "wall_input",
            "location": 61,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "door_input": {
            "name": "door_input",
            "location": 75,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "window_input": {
            "name": "window_input",
            "location": 92,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "heated_floor_area_input": {
            "name": "heated_floor_area_input",
            "location": 106,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "heating_cooling_input": {
            "name": "heating_cooling_input",
            "location": 113,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "ventilation_input": {
            "name": "ventilation_input",
            "location": 197,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "water_heating_input": {
            "name": "water_heating_input",
            "location": 241,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "basement_input": {
            "name": "basement_input",
            "location": 276,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "crawlspace_input": {
            "name": "crawlspace_input",
            "location": 319,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "slab_input": {
            "name": "slab_input",
            "location": 348,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "raw_codes": {
            "name": "raw_codes",
            "location": 366,
            "return": [
                "dict[typing.Text, list[typing.Text]]"
            ],
            "arguments": {}
        },
        "upgrades_input": {
            "name": "upgrades_input",
            "location": 468,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "sample_input_d": {
            "name": "sample_input_d",
            "location": 477,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "ceiling_input": [],
                "floor_input": [],
                "wall_input": [],
                "door_input": [],
                "window_input": [],
                "heated_floor_area_input": [],
                "heating_cooling_input": [],
                "ventilation_input": [],
                "water_heating_input": [],
                "basement_input": [],
                "crawlspace_input": [],
                "slab_input": [],
                "upgrades_input": [],
                "raw_codes": []
            }
        },
        "sample_input_e": {
            "name": "sample_input_e",
            "location": 522,
            "return": [],
            "arguments": {
                "sample_input_d": []
            }
        },
        "sample_input_missing": {
            "name": "sample_input_missing",
            "location": 529,
            "return": [],
            "arguments": {
                "sample_input_d": []
            }
        },
        "sample_parsed_d": {
            "name": "sample_parsed_d",
            "location": 540,
            "return": [],
            "arguments": {
                "sample_input_d": []
            }
        },
        "sample_parsed_e": {
            "name": "sample_parsed_e",
            "location": 545,
            "return": [],
            "arguments": {
                "sample_input_e": []
            }
        },
        "TestEvaluationType.test_from_code": {
            "name": "test_from_code",
            "location": 551,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegion.test_from_name": {
            "name": "test_from_name",
            "location": 559,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegion.test_from_unknown_name": {
            "name": "test_from_unknown_name",
            "location": 573,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegion.test_from_code": {
            "name": "test_from_code",
            "location": 576,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegion.test_from_unknown_code": {
            "name": "test_from_unknown_code",
            "location": 589,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParsedDwellingDataRow.test_from_row": {
            "name": "test_from_row",
            "location": 595,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_input_d": []
            }
        },
        "TestParsedDwellingDataRow.test_null_fields_are_accepted": {
            "name": "test_null_fields_are_accepted",
            "location": 829,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_input_missing": []
            }
        },
        "TestParsedDwellingDataRow.test_bad_postal_code": {
            "name": "test_bad_postal_code",
            "location": 834,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_input_d": []
            }
        },
        "TestParsedDwellingDataRow.test_from_bad_row": {
            "name": "test_from_bad_row",
            "location": 839,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParsedDwellingDataRow.test_missing_ers": {
            "name": "test_missing_ers",
            "location": 848,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_input_d": []
            }
        },
        "TestDwellingEvaluation.test_eval_type": {
            "name": "test_eval_type",
            "location": 856,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_parsed_d": []
            }
        },
        "TestDwellingEvaluation.test_entry_date": {
            "name": "test_entry_date",
            "location": 860,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_parsed_d": []
            }
        },
        "TestDwellingEvaluation.test_creation_date": {
            "name": "test_creation_date",
            "location": 864,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_parsed_d": []
            }
        },
        "TestDwellingEvaluation.test_modification_date": {
            "name": "test_modification_date",
            "location": 868,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_parsed_d": []
            }
        },
        "TestDwellingEvaluation.test_to_dict": {
            "name": "test_to_dict",
            "location": 872,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_parsed_d": []
            }
        },
        "TestDwelling.sample": {
            "name": "sample",
            "location": 880,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "sample_input_d": [],
                "sample_input_e": []
            }
        },
        "TestDwelling.test_house_id": {
            "name": "test_house_id",
            "location": 886,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample": []
            }
        },
        "TestDwelling.test_year_built": {
            "name": "test_year_built",
            "location": 890,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample": []
            }
        },
        "TestDwelling.test_address_data": {
            "name": "test_address_data",
            "location": 894,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample": []
            }
        },
        "TestDwelling.test_single_pre_evaluation": {
            "name": "test_single_pre_evaluation",
            "location": 900,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_input_d": []
            }
        },
        "TestDwelling.test_single_post_evaluation": {
            "name": "test_single_post_evaluation",
            "location": 904,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_input_e": []
            }
        },
        "TestDwelling.test_evaluations": {
            "name": "test_evaluations",
            "location": 908,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample": []
            }
        },
        "TestDwelling.test_no_data": {
            "name": "test_no_data",
            "location": 912,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDwelling.test_to_dict": {
            "name": "test_to_dict",
            "location": 917,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample": []
            }
        }
    },
    "energuide_api-master/etl/tests/test_element.py": {
        "fragment": {
            "name": "fragment",
            "location": 8,
            "return": [
                "Text",
                "bool",
                "str",
                "Dict"
            ],
            "arguments": {}
        },
        "fragment_file_path": {
            "name": "fragment_file_path",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "fragment": [
                    "str"
                ],
                "tmpdir": [
                    "str",
                    "IO[str]",
                    "int",
                    "List[Optional[str]]"
                ]
            }
        },
        "fragment_node": {
            "name": "fragment_node",
            "location": 21,
            "return": [
                "bool",
                "Union[int, float, complex]",
                "OrderedDict"
            ],
            "arguments": {
                "fragment": [
                    "str",
                    "int"
                ]
            }
        },
        "test_from_string": {
            "name": "test_from_string",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment": [
                    "str"
                ]
            }
        },
        "test_findtext": {
            "name": "test_findtext",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_node": [
                    "str",
                    "energuide.elemenElement",
                    "Union[str,Path]"
                ]
            }
        },
        "test_get_text": {
            "name": "test_get_text",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_node": [
                    "Callable",
                    "int",
                    "energuide.elemenElement"
                ]
            }
        },
        "test_get_text_raises_when_not_found": {
            "name": "test_get_text_raises_when_not_found",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_node": [
                    "energuide.elemenElement",
                    "Callable"
                ]
            }
        },
        "test_attrib": {
            "name": "test_attrib",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_node": [
                    "bool",
                    "energuide.elemenElement",
                    "float",
                    "Callable"
                ]
            }
        },
        "test_xpath_returns_elements": {
            "name": "test_xpath_returns_elements",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_node": [
                    "float",
                    "energuide.embedded.window.Window"
                ]
            }
        },
        "test_parse": {
            "name": "test_parse",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_file_path": [
                    "str",
                    "int"
                ]
            }
        },
        "test_iter": {
            "name": "test_iter",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_node": [
                    "Dict",
                    "str",
                    "Callable[[T],T]"
                ]
            }
        },
        "test_find": {
            "name": "test_find",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_node": [
                    "float",
                    "int"
                ]
            }
        },
        "test_find_returns_none": {
            "name": "test_find_returns_none",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_node": [
                    "str",
                    "bool",
                    "energuide.elemenElement"
                ]
            }
        },
        "test_to_string": {
            "name": "test_to_string",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_node": [
                    "energuide.elemenElement",
                    "bool",
                    "type",
                    "List[str]",
                    "Exception"
                ]
            }
        },
        "test_tag": {
            "name": "test_tag",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_node": [
                    "Dict[str,Any]",
                    "energuide.elemenElement"
                ]
            }
        },
        "test_new": {
            "name": "test_new",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_from_malformed_string": {
            "name": "test_from_malformed_string",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_insert_node": {
            "name": "test_insert_node",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_int": {
            "name": "test_get_int",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_node": [
                    "energuide.elemenElement",
                    "int",
                    "str"
                ]
            }
        },
        "test_get_float": {
            "name": "test_get_float",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_node": [
                    "energuide.elemenElement",
                    "int",
                    "str"
                ]
            }
        },
        "test_get_str": {
            "name": "test_get_str",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_node": [
                    "Dict[Hashable,Any]",
                    "energuide.elemenElement",
                    "Optional[Dict[Hashable,Any]]"
                ]
            }
        },
        "test_get_raises_when_not_found": {
            "name": "test_get_raises_when_not_found",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_node": [
                    "Dict",
                    "energuide.elemenElement",
                    "Dict[str,tuple[Union[str,str]]]",
                    "Dict[str,Tuple[str,str]]"
                ]
            }
        },
        "test_get_raises_when_cant_cast": {
            "name": "test_get_raises_when_cant_cast",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_node": [
                    "Dict[str,tuple[Union[str,str]]]",
                    "Dict",
                    "energuide.elemenElement",
                    "Dict[str,Tuple[str,str]]",
                    "str"
                ]
            }
        }
    },
    "energuide_api-master/etl/tests/test_extractor.py": {
        "_write_csv": {
            "name": "_write_csv",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "Optional[str]"
                ],
                "data": [
                    "Dict",
                    "Dict[str,str]"
                ]
            }
        },
        "base_data": {
            "name": "base_data",
            "location": 20,
            "return": [
                "Dict[Text,Text]",
                "Optional[str]",
                "Dict[str,Any]",
                "Dict",
                "str"
            ],
            "arguments": {}
        },
        "extra_data": {
            "name": "extra_data",
            "location": 39,
            "return": [
                "Dict[str, List[int]]",
                "dict",
                "str",
                "Optional[float]",
                "bytes"
            ],
            "arguments": {}
        },
        "missing_data": {
            "name": "missing_data",
            "location": 47,
            "return": [
                "List[dict[str,Any]]",
                "Dict",
                "Dict[str,List[int]]",
                "Dict[str,int]",
                "str",
                "List[str]",
                "Optional[float]",
                "bytes"
            ],
            "arguments": {}
        },
        "nullable_data": {
            "name": "nullable_data",
            "location": 54,
            "return": [
                "Dict[str, List[int]]",
                "dict",
                "str",
                "Optional[float]",
                "bytes"
            ],
            "arguments": {}
        },
        "valid_filepath": {
            "name": "valid_filepath",
            "location": 61,
            "return": [
                "str",
                "Callable[[str],bool]",
                "List[object]",
                "Optional[str]",
                "Dict",
                "int"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "int",
                    "Dict"
                ],
                "request": [
                    "Callable",
                    "bytes",
                    "Mapping[str,Any]",
                    "Dict",
                    "Mapping",
                    "str",
                    "Optional[Job]",
                    "None"
                ]
            }
        },
        "missing_filepath": {
            "name": "missing_filepath",
            "location": 69,
            "return": [
                "str",
                "int",
                "Dict",
                "Callable"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "Dict",
                    "Optional[Union[Dict,str,int,bytes]]",
                    "int",
                    "bytes",
                    "None"
                ],
                "missing_data": [
                    "Dict[str,str]",
                    "List",
                    "Dict",
                    "str"
                ]
            }
        },
        "extra_filepath": {
            "name": "extra_filepath",
            "location": 76,
            "return": [
                "str",
                "int",
                "Dict",
                "Callable"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "Dict",
                    "Optional[Union[Dict,str,int,bytes]]",
                    "int",
                    "bytes",
                    "None"
                ],
                "extra_data": [
                    "Dict[str,str]",
                    "List",
                    "Dict",
                    "str"
                ]
            }
        },
        "test_extract_valid": {
            "name": "test_extract_valid",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_filepath": [
                    "Iterable",
                    "bytes",
                    "energuide.flask_app.ThreadRunner"
                ]
            }
        },
        "test_purge_unknown": {
            "name": "test_purge_unknown",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "extra_filepath": [
                    "int"
                ]
            }
        },
        "test_extract_missing": {
            "name": "test_extract_missing",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "missing_filepath": []
            }
        },
        "test_empty_to_none": {
            "name": "test_empty_to_none",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "bytes"
                ],
                "nullable_data": [
                    "Dict[str,Union[str,None]]",
                    "bool",
                    "Dict[str,Optional[str]]",
                    "Dict[str,Any]"
                ]
            }
        },
        "test_extract_with_snippets": {
            "name": "test_extract_with_snippets",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "Tuple[int,int]",
                    "Optional[str]",
                    "int"
                ],
                "base_data": [
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "test_extract_with_tsv_snippets": {
            "name": "test_extract_with_tsv_snippets",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "Tuple[int,int]",
                    "Optional[str]",
                    "int"
                ],
                "base_data": [
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "test_write_data": {
            "name": "test_write_data",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_write_bad_data": {
            "name": "test_write_bad_data",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        }
    },
    "energuide_api-master/etl/tests/test_flask_app.py": {
        "sample_salt": {
            "name": "sample_salt",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "sample_secret_key": {
            "name": "sample_secret_key",
            "location": 21,
            "return": [
                "dict",
                "bool",
                "flask.Flask",
                "Optional[dict]",
                "Optional[Dict]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "monkeypatch": [
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "sample_signature": {
            "name": "sample_signature",
            "location": 27,
            "return": [
                "bool",
                "str",
                "float"
            ],
            "arguments": {
                "sample_salt": [
                    "str",
                    "bytes",
                    "defaultdict",
                    "dict",
                    "Dict[str, str]"
                ],
                "sample_secret_key": [
                    "str",
                    "bytes",
                    "defaultdict",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "test_client": {
            "name": "test_client",
            "location": 34,
            "return": [],
            "arguments": {
                "monkeypatch": [
                    "str"
                ],
                "database_name": [
                    "str"
                ]
            }
        },
        "thread_runner": {
            "name": "thread_runner",
            "location": 40,
            "return": [
                "typing.Generator"
            ],
            "arguments": {}
        },
        "busy_thread_runner": {
            "name": "busy_thread_runner",
            "location": 46,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "thread_runner": [
                    "energuide.flask_app.ThreadRunner",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "fake_db_coords": {
            "name": "fake_db_coords",
            "location": 59,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "monkeypatch": [
                    "bool"
                ]
            }
        },
        "test_threadrunner": {
            "name": "test_threadrunner",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "thread_runner": [
                    "energuide.flask_app.ThreadRunner",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_frontend": {
            "name": "test_frontend",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_alive": {
            "name": "test_alive",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "flask.testing.FlaskClient",
                    "str"
                ]
            }
        },
        "test_robots": {
            "name": "test_robots",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "flask.testing.FlaskClient",
                    "str"
                ]
            }
        },
        "test_run_tl": {
            "name": "test_run_tl",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "str",
                    "flask.testing.FlaskClient"
                ],
                "thread_runner": [
                    "energuide.flask_app.ThreadRunner",
                    "str"
                ],
                "mongo_client": [
                    "str",
                    "pymongo.MongoClient"
                ],
                "database_name": [
                    "str",
                    "pymongo.MongoClient"
                ],
                "collection": [
                    "str",
                    "pymongo.MongoClient"
                ],
                "sample_salt": [
                    "str",
                    "flask.testing.FlaskClient"
                ],
                "sample_signature": [
                    "str",
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_run_tl_busy": {
            "name": "test_run_tl_busy",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "str",
                    "flask.testing.FlaskClient",
                    "django.http.HttpRequest"
                ],
                "sample_salt": [
                    "str",
                    "flask.testing.FlaskClient",
                    "django.http.HttpRequest"
                ],
                "sample_signature": [
                    "str",
                    "flask.testing.FlaskClient",
                    "django.http.HttpRequest"
                ]
            }
        },
        "test_run_tl_no_salt": {
            "name": "test_run_tl_no_salt",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "str",
                    "flask.testing.FlaskClient"
                ],
                "energuide_zip_fixture": [
                    "str",
                    "flask.testing.FlaskClient"
                ],
                "sample_signature": [
                    "str",
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_run_tl_no_signature": {
            "name": "test_run_tl_no_signature",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "str",
                    "flask.testing.FlaskClient"
                ],
                "energuide_zip_fixture": [
                    "str",
                    "flask.testing.FlaskClient"
                ],
                "sample_salt": [
                    "str",
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_run_tl_bad_signature": {
            "name": "test_run_tl_bad_signature",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "str",
                    "flask.testing.FlaskClient"
                ],
                "energuide_zip_fixture": [
                    "str",
                    "flask.testing.FlaskClient"
                ],
                "sample_salt": [
                    "str",
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_status_idle": {
            "name": "test_status_idle",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_status_busy": {
            "name": "test_status_busy",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "busy_thread_runner.sleeper": {
            "name": "sleeper",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "fake_db_coords.connection_string": {
            "name": "connection_string",
            "location": 60,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_threadrunner.sleeper": {
            "name": "sleeper",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "energuide_api-master/etl/tests/test_logger.py": {
        "test_unwrap_exception_message": {
            "name": "test_unwrap_exception_message",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "energuide_api-master/etl/tests/test_snippets.py": {
        "doc": {
            "name": "doc",
            "location": 9,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {}
        },
        "house": {
            "name": "house",
            "location": 17,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "doc": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "code": {
            "name": "code",
            "location": 24,
            "return": [
                "int",
                "str",
                "Dict"
            ],
            "arguments": {
                "doc": [
                    "bytes",
                    "str",
                    "int",
                    "Callable[[Mapping],T]",
                    "List[List[str]]",
                    "Tuple"
                ]
            }
        },
        "energy_upgrades": {
            "name": "energy_upgrades",
            "location": 31,
            "return": [
                "int",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "doc": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "test_house_snippet_to_dict": {
            "name": "test_house_snippet_to_dict",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "house": [
                    "energuide.elemenElement"
                ]
            }
        },
        "test_energy_snippet_to_dict": {
            "name": "test_energy_snippet_to_dict",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "energy_upgrades": [
                    "energuide.elemenElement"
                ]
            }
        },
        "test_other_data_snippet_to_dict": {
            "name": "test_other_data_snippet_to_dict",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ceiling_snippet": {
            "name": "test_ceiling_snippet",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "house": [
                    "str",
                    "float"
                ]
            }
        },
        "test_floor_snippet": {
            "name": "test_floor_snippet",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "house": [
                    "str",
                    "float"
                ]
            }
        },
        "test_wall_snippet": {
            "name": "test_wall_snippet",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "house": [
                    "str",
                    "float"
                ]
            }
        },
        "test_window_snippet": {
            "name": "test_window_snippet",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "house": [
                    "str",
                    "Iterable[Any]",
                    "int"
                ]
            }
        },
        "test_heated_floor_area_snippet": {
            "name": "test_heated_floor_area_snippet",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "house": [
                    "str",
                    "float"
                ]
            }
        },
        "test_deeply_embedded_components": {
            "name": "test_deeply_embedded_components",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_wall_code_snippet": {
            "name": "test_wall_code_snippet",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "code": [
                    "int",
                    "str",
                    "energuide.elemenElement",
                    "None",
                    "Union[str,object]",
                    "Optional[int]"
                ]
            }
        },
        "test_window_code_snippet": {
            "name": "test_window_code_snippet",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "code": [
                    "int",
                    "str",
                    "energuide.elemenElement",
                    "None",
                    "Union[str,object]",
                    "Optional[int]"
                ]
            }
        },
        "test_door_snippet": {
            "name": "test_door_snippet",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "house": [
                    "str",
                    "float"
                ]
            }
        },
        "test_heating_cooling_snippet": {
            "name": "test_heating_cooling_snippet",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "house": [
                    "str",
                    "float"
                ]
            }
        },
        "test_ventilation_snippet": {
            "name": "test_ventilation_snippet",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "house": [
                    "str",
                    "float"
                ]
            }
        },
        "test_water_heating_snippet": {
            "name": "test_water_heating_snippet",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "house": [
                    "str",
                    "float"
                ]
            }
        },
        "test_basement_snippet": {
            "name": "test_basement_snippet",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "house": [
                    "str",
                    "float"
                ]
            }
        },
        "test_crawlspace_snippet": {
            "name": "test_crawlspace_snippet",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "house": [
                    "str",
                    "float"
                ]
            }
        },
        "test_slab_snippet": {
            "name": "test_slab_snippet",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "house": [
                    "str",
                    "float"
                ]
            }
        },
        "test_upgrades_snippet": {
            "name": "test_upgrades_snippet",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "energy_upgrades": [
                    "str",
                    "float"
                ]
            }
        },
        "test_other_data_snippet": {
            "name": "test_other_data_snippet",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "doc": []
            }
        }
    },
    "energuide_api-master/etl/tests/test_transform.py": {
        "local_reader": {
            "name": "local_reader",
            "location": 12,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "energuide_zip_fixture": [
                    "str",
                    "int",
                    "List[Optional[Any]]",
                    "bool"
                ]
            }
        },
        "azure_reader": {
            "name": "azure_reader",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "populated_azure_emulator": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_reader": {
            "name": "test_reader",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "local_reader": [
                    "energuide.transform.LocalExtractReader"
                ]
            }
        },
        "test_reader_sorted_by_eval_id": {
            "name": "test_reader_sorted_by_eval_id",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "local_reader": [
                    "energuide.transform.LocalExtractReader"
                ]
            }
        },
        "test_reader_num_rows": {
            "name": "test_reader_num_rows",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "local_reader": [
                    "int",
                    "energuide.transform.LocalExtractReader",
                    "List[dict[str,Any]]",
                    "str",
                    "energuide.transform.AzureExtractReader",
                    "List[Dict[str,Any]]"
                ]
            }
        },
        "test_azure_reader_extracted_rows": {
            "name": "test_azure_reader_extracted_rows",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "azure_reader": [
                    "energuide.transform.LocalExtractReader"
                ]
            }
        },
        "touch_one_file_in_azure": {
            "name": "touch_one_file_in_azure",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "azure_emulator": [
                    "bool",
                    "List[int]",
                    "str",
                    "Dict[str,str]",
                    "Dict",
                    "bytes",
                    "int",
                    "Union[bytes,str]"
                ],
                "energuide_zip_fixture": [
                    "str",
                    "Optional[List[str]]",
                    "bool",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_azure_reader_extracted_rows_new_data": {
            "name": "test_azure_reader_extracted_rows_new_data",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "azure_reader": [
                    "Callable",
                    "int",
                    "bool"
                ],
                "azure_emulator": [
                    "str",
                    "int",
                    "List[list[Any]]",
                    "energuide.transform.AzureCoordinates",
                    "List[List[Any]]"
                ],
                "energuide_zip_fixture": [
                    "str",
                    "int",
                    "List[list[Any]]",
                    "energuide.transform.AzureCoordinates",
                    "List[List[Any]]"
                ]
            }
        },
        "test_azure_reader_num_rows": {
            "name": "test_azure_reader_num_rows",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "azure_reader": [
                    "int",
                    "energuide.transform.AzureExtractReader",
                    "List[dict[str,Any]]",
                    "str",
                    "energuide.transform.LocalExtractReader",
                    "List[Dict[str,Any]]"
                ]
            }
        },
        "test_azure_reader_num_rows_new_data": {
            "name": "test_azure_reader_num_rows_new_data",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "azure_reader": [
                    "energuide.transform.AzureExtractReader",
                    "int",
                    "datetime.date.time"
                ]
            }
        },
        "test_azure_coordinates_from_env": {
            "name": "test_azure_coordinates_from_env",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_transform": {
            "name": "test_transform",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "local_reader": [
                    "str",
                    "float"
                ]
            }
        },
        "test_bad_data": {
            "name": "test_bad_data",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "local_reader": [
                    "energuide.transform.LocalExtractReader"
                ],
                "monkeypatch": [
                    "str"
                ],
                "capsys": [
                    "int",
                    "BaseException",
                    "str"
                ]
            }
        },
        "test_bad_data.raise_error": {
            "name": "raise_error",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "energuide_api-master/etl/tests/test_translation.py": {
        "test_translation": {
            "name": "test_translation",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "energuide_api-master/etl/tests/test_validator.py": {
        "test_validates_xml": {
            "name": "test_validates_xml",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_string_fails_validation": {
            "name": "test_string_fails_validation",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_coerce_to_xml": {
            "name": "test_coerce_to_xml",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_embedded_xml": {
            "name": "test_embedded_xml",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "energuide_api-master/etl/tests/__init__.py": {},
    "energuide_api-master/etl/tests/embedded/test_area.py": {
        "test_area": {
            "name": "test_area",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_from_square_feet": {
            "name": "test_from_square_feet",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_equality": {
            "name": "test_equality",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "energuide_api-master/etl/tests/embedded/test_basement.py": {
        "sample_basement_floors_raw": {
            "name": "sample_basement_floors_raw",
            "location": 13,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "sample_crawlspace_floors_raw": {
            "name": "sample_crawlspace_floors_raw",
            "location": 26,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "sample_basement_wall_raw": {
            "name": "sample_basement_wall_raw",
            "location": 38,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "sample_crawlspace_wall_raw": {
            "name": "sample_crawlspace_wall_raw",
            "location": 69,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "sample_basement_header_raw": {
            "name": "sample_basement_header_raw",
            "location": 87,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "sample_basement_raw": {
            "name": "sample_basement_raw",
            "location": 104,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "sample_basement_header_raw": [],
                "sample_basement_wall_raw": [],
                "sample_basement_floors_raw": []
            }
        },
        "sample_crawlspace_raw": {
            "name": "sample_crawlspace_raw",
            "location": 123,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "sample_crawlspace_floors_raw": [],
                "sample_crawlspace_wall_raw": [],
                "sample_basement_header_raw": []
            }
        },
        "sample_basement_floors_element": {
            "name": "sample_basement_floors_element",
            "location": 142,
            "return": [],
            "arguments": {
                "sample_basement_floors_raw": []
            }
        },
        "sample_crawlspace_floors_element": {
            "name": "sample_crawlspace_floors_element",
            "location": 147,
            "return": [],
            "arguments": {
                "sample_crawlspace_floors_raw": []
            }
        },
        "sample_basement_wall_element": {
            "name": "sample_basement_wall_element",
            "location": 152,
            "return": [],
            "arguments": {
                "sample_basement_wall_raw": []
            }
        },
        "sample_crawlspace_wall_element": {
            "name": "sample_crawlspace_wall_element",
            "location": 157,
            "return": [],
            "arguments": {
                "sample_crawlspace_wall_raw": []
            }
        },
        "sample_basement_header_element": {
            "name": "sample_basement_header_element",
            "location": 162,
            "return": [],
            "arguments": {
                "sample_basement_header_raw": []
            }
        },
        "sample_basement_element": {
            "name": "sample_basement_element",
            "location": 167,
            "return": [],
            "arguments": {
                "sample_basement_raw": []
            }
        },
        "sample_crawlspace_element": {
            "name": "sample_crawlspace_element",
            "location": 172,
            "return": [],
            "arguments": {
                "sample_crawlspace_raw": []
            }
        },
        "sample_slab_element": {
            "name": "sample_slab_element",
            "location": 177,
            "return": [],
            "arguments": {}
        },
        "sample_basement_walls": {
            "name": "sample_basement_walls",
            "location": 191,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "sample_crawlspace_walls": {
            "name": "sample_crawlspace_walls",
            "location": 221,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "sample_basement_floors": {
            "name": "sample_basement_floors",
            "location": 234,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "sample_crawlspace_floors": {
            "name": "sample_crawlspace_floors",
            "location": 248,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "sample_slab_floors": {
            "name": "sample_slab_floors",
            "location": 273,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "sample_basement_header": {
            "name": "sample_basement_header",
            "location": 289,
            "return": [],
            "arguments": {}
        },
        "sample_basement": {
            "name": "sample_basement",
            "location": 299,
            "return": [],
            "arguments": {
                "sample_basement_floors": [],
                "sample_basement_walls": [],
                "sample_basement_header": []
            }
        },
        "sample_crawlspace": {
            "name": "sample_crawlspace",
            "location": 316,
            "return": [],
            "arguments": {
                "sample_crawlspace_floors": [],
                "sample_crawlspace_walls": [],
                "sample_basement_header": []
            }
        },
        "sample_slab": {
            "name": "sample_slab",
            "location": 333,
            "return": [],
            "arguments": {
                "sample_slab_floors": []
            }
        },
        "test_basement_walls_from_data": {
            "name": "test_basement_walls_from_data",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_basement_walls": [],
                "sample_basement_wall_element": []
            }
        },
        "test_crawlspace_walls_from_data": {
            "name": "test_crawlspace_walls_from_data",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_crawlspace_walls": [],
                "sample_crawlspace_wall_element": []
            }
        },
        "test_basement_walls_to_dict": {
            "name": "test_basement_walls_to_dict",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_basement_wall_element": []
            }
        },
        "test_crawlspace_walls_to_dict": {
            "name": "test_crawlspace_walls_to_dict",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_crawlspace_wall_element": []
            }
        },
        "test_basement_floors_from_data": {
            "name": "test_basement_floors_from_data",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_basement_floors": [],
                "sample_basement_floors_element": []
            }
        },
        "test_crawlspace_floors_from_data": {
            "name": "test_crawlspace_floors_from_data",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_crawlspace_floors": [],
                "sample_crawlspace_floors_element": []
            }
        },
        "test_basement_floors_to_dict": {
            "name": "test_basement_floors_to_dict",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_basement_floors_element": []
            }
        },
        "test_crawlspace_floors_to_dict": {
            "name": "test_crawlspace_floors_to_dict",
            "location": 427,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_crawlspace_floors_element": []
            }
        },
        "test_basement_header_from_data": {
            "name": "test_basement_header_from_data",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_basement_header": [],
                "sample_basement_header_element": []
            }
        },
        "test_basement_header_to_dict": {
            "name": "test_basement_header_to_dict",
            "location": 457,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_basement_header_element": []
            }
        },
        "test_basement_from_data": {
            "name": "test_basement_from_data",
            "location": 473,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_basement": [],
                "sample_basement_element": []
            }
        },
        "test_crawlspace_from_data": {
            "name": "test_crawlspace_from_data",
            "location": 480,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_crawlspace": [],
                "sample_crawlspace_element": []
            }
        },
        "test_slab_from_data": {
            "name": "test_slab_from_data",
            "location": 487,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_slab": [],
                "sample_slab_element": []
            }
        },
        "test_slab_to_dict": {
            "name": "test_slab_to_dict",
            "location": 495,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_slab_element": []
            }
        },
        "test_crawlspace_to_dict": {
            "name": "test_crawlspace_to_dict",
            "location": 525,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_crawlspace_element": []
            }
        },
        "test_basement_to_dict": {
            "name": "test_basement_to_dict",
            "location": 591,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_basement_element": []
            }
        },
        "bad_xml": {
            "name": "bad_xml",
            "location": 672,
            "return": [
                "list[tuple[typing.Union[typing.Text,typing.Callable[, ]]]]"
            ],
            "arguments": {}
        },
        "test_bad_data": {
            "name": "test_bad_data",
            "location": 912,
            "return": [
                "None"
            ],
            "arguments": {
                "bad_xml": [],
                "parse_function": [],
                "data_class": []
            }
        }
    },
    "energuide_api-master/etl/tests/embedded/test_ceiling.py": {
        "sample_raw": {
            "name": "sample_raw",
            "location": 12,
            "return": [
                "dict",
                "str",
                "Tuple[str]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "sample": {
            "name": "sample",
            "location": 74,
            "return": [
                "str",
                "Match[str]",
                "List[str]"
            ],
            "arguments": {}
        },
        "test_from_data": {
            "name": "test_from_data",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_raw": [
                    "energuide.elemenElement",
                    "energuide.dwelling.ParsedDwellingDataRow"
                ],
                "sample": [
                    "str",
                    "energuide.embedded.door.Door",
                    "energuide.embedded.window.Window"
                ]
            }
        },
        "test_bad_data": {
            "name": "test_bad_data",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "bad_xml": [
                    "str"
                ]
            }
        },
        "test_to_dict": {
            "name": "test_to_dict",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "sample": [
                    "energuide.embedded.window.Window",
                    "energuide.embedded.door.Door",
                    "str",
                    "int"
                ]
            }
        }
    },
    "energuide_api-master/etl/tests/embedded/test_code.py": {
        "raw_wall_code": {
            "name": "raw_wall_code",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "wall_code": {
            "name": "wall_code",
            "location": 86,
            "return": [],
            "arguments": {}
        },
        "raw_window_code": {
            "name": "raw_window_code",
            "location": 104,
            "return": [],
            "arguments": {}
        },
        "window_code": {
            "name": "window_code",
            "location": 140,
            "return": [],
            "arguments": {}
        },
        "raw_codes": {
            "name": "raw_codes",
            "location": 159,
            "return": [
                "dict[typing.Text, list[]]"
            ],
            "arguments": {
                "raw_wall_code": [],
                "raw_window_code": []
            }
        },
        "test_wall_code_from_data": {
            "name": "test_wall_code_from_data",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "raw_wall_code": [],
                "wall_code": []
            }
        },
        "test_window_code_from_data": {
            "name": "test_window_code_from_data",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "raw_window_code": [],
                "window_code": []
            }
        },
        "test_bad_wall_code": {
            "name": "test_bad_wall_code",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "bad_xml": []
            }
        },
        "test_bad_window_code": {
            "name": "test_bad_window_code",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "bad_xml": []
            }
        },
        "test_code_from_data": {
            "name": "test_code_from_data",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "raw_wall_code": [],
                "raw_window_code": [],
                "wall_code": [],
                "window_code": []
            }
        }
    },
    "energuide_api-master/etl/tests/embedded/test_distance.py": {
        "test_distance": {
            "name": "test_distance",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_from_square_feet": {
            "name": "test_from_square_feet",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_equality": {
            "name": "test_equality",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "energuide_api-master/etl/tests/embedded/test_door.py": {
        "sample_raw": {
            "name": "sample_raw",
            "location": 11,
            "return": [
                "bool",
                "Mapping[str, Any]",
                "Dict[str, Any]",
                "str",
                "Callable[[str], Any]"
            ],
            "arguments": {}
        },
        "sample": {
            "name": "sample",
            "location": 69,
            "return": [
                "bool",
                "Iterable[str]",
                "int"
            ],
            "arguments": {}
        },
        "test_from_data": {
            "name": "test_from_data",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_raw": [
                    "energuide.elemenElement",
                    "energuide.dwelling.ParsedDwellingDataRow"
                ],
                "sample": [
                    "str",
                    "energuide.embedded.door.Door",
                    "energuide.embedded.window.Window"
                ]
            }
        },
        "test_bad_data": {
            "name": "test_bad_data",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "bad_xml": [
                    "str"
                ]
            }
        },
        "test_to_dict": {
            "name": "test_to_dict",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "sample": [
                    "energuide.embedded.window.Window",
                    "energuide.embedded.door.Door",
                    "str",
                    "int"
                ]
            }
        },
        "test_properties": {
            "name": "test_properties",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_raw": [
                    "energuide.elemenElement",
                    "energuide.dwelling.ParsedDwellingDataRow"
                ]
            }
        }
    },
    "energuide_api-master/etl/tests/embedded/test_floor.py": {
        "sample_raw": {
            "name": "sample_raw",
            "location": 11,
            "return": [
                "bool",
                "Mapping[str, Any]",
                "Dict[str, Any]",
                "str",
                "Callable[[str], Any]"
            ],
            "arguments": {}
        },
        "sample": {
            "name": "sample",
            "location": 59,
            "return": [
                "str",
                "dict",
                "List[str]"
            ],
            "arguments": {}
        },
        "test_from_data": {
            "name": "test_from_data",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_raw": [
                    "energuide.elemenElement",
                    "energuide.dwelling.ParsedDwellingDataRow"
                ],
                "sample": [
                    "str",
                    "energuide.embedded.door.Door",
                    "energuide.embedded.window.Window"
                ]
            }
        },
        "test_bad_data": {
            "name": "test_bad_data",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "bad_xml": [
                    "str"
                ]
            }
        },
        "test_to_dict": {
            "name": "test_to_dict",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "sample": [
                    "energuide.embedded.window.Window",
                    "energuide.embedded.door.Door",
                    "str",
                    "int"
                ]
            }
        }
    },
    "energuide_api-master/etl/tests/embedded/test_heated_floor_area.py": {
        "sample": {
            "name": "sample",
            "location": 8,
            "return": [
                "bool",
                "Mapping[str, Any]",
                "Dict[str, Any]",
                "str",
                "Callable[[str], Any]"
            ],
            "arguments": {}
        },
        "test_from_data": {
            "name": "test_from_data",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "sample": [
                    "energuide.elemenElement"
                ]
            }
        },
        "test_bad_data": {
            "name": "test_bad_data",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "bad_xml": [
                    "str",
                    "int"
                ]
            }
        },
        "test_to_dict": {
            "name": "test_to_dict",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "sample": [
                    "energuide.elemenElement"
                ]
            }
        }
    },
    "energuide_api-master/etl/tests/embedded/test_heating.py": {
        "sample_node": {
            "name": "sample_node",
            "location": 9,
            "return": [
                "int",
                "Dict[str, Any]",
                "Iterable[str]"
            ],
            "arguments": {
                "heating_type": [
                    "Text",
                    "bool",
                    "Iterable[T]"
                ],
                "equipment_node": [
                    "int",
                    "None",
                    "str",
                    "Dict[str,Any]",
                    "bool"
                ],
                "specification_node": [
                    "int",
                    "None",
                    "str",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        },
        "sample_heating_node": {
            "name": "sample_heating_node",
            "location": 45,
            "return": [
                "List[Union[list[Any],int,str,dict[str,str]]]",
                "int",
                "Union",
                "Union[Sequence,SweepFixedValues]"
            ],
            "arguments": {
                "node_name": [
                    "int",
                    "str",
                    "float",
                    "List[str]",
                    "Union[str,List[str]]",
                    "bool"
                ]
            }
        },
        "sample_specifications": {
            "name": "sample_specifications",
            "location": 58,
            "return": [
                "dict",
                "str",
                "Tuple[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "efficiency": [
                    "float"
                ],
                "is_steady_state": [
                    "bool"
                ],
                "capacity": [
                    "float"
                ],
                "capacity_units": [
                    "typing.Text"
                ]
            }
        },
        "sample_equipment": {
            "name": "sample_equipment",
            "location": 70,
            "return": [
                "dict",
                "str",
                "Tuple[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "energy_source_code": [
                    "int",
                    "Optional[str]",
                    "IO[str]"
                ],
                "equipment_type_english": [
                    "Text",
                    "Optional[str]",
                    "IO[str]"
                ],
                "equipment_type_french": [
                    "Text",
                    "Optional[str]",
                    "IO[str]"
                ]
            }
        },
        "sample_raw": {
            "name": "sample_raw",
            "location": 86,
            "return": [
                "float",
                "str"
            ],
            "arguments": {}
        },
        "sample": {
            "name": "sample",
            "location": 91,
            "return": [
                "tuple"
            ],
            "arguments": {}
        },
        "test_from_data": {
            "name": "test_from_data",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_raw": [
                    "energuide.elemenElement",
                    "energuide.dwelling.ParsedDwellingDataRow"
                ],
                "sample": [
                    "str",
                    "energuide.embedded.door.Door",
                    "energuide.embedded.window.Window"
                ]
            }
        },
        "test_converts_btu": {
            "name": "test_converts_btu",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "unit": [
                    "int",
                    "str",
                    "float",
                    "Tuple[float,float,float,float,float]",
                    "Tuple[Union[float,float,float,float,float]]"
                ]
            }
        },
        "test_output_size_unknown_units": {
            "name": "test_output_size_unknown_units",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unknown_heating_type": {
            "name": "test_unknown_heating_type",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_boiler": {
            "name": "test_boiler",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_wood_energy_source": {
            "name": "test_wood_energy_source",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "energy_code": [
                    "str"
                ]
            }
        },
        "test_unknown_energy_source_code": {
            "name": "test_unknown_energy_source_code",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_steady_state": {
            "name": "test_steady_state",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_to_dict": {
            "name": "test_to_dict",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "sample": [
                    "str",
                    "int",
                    "energuide.embedded.window.Window",
                    "energuide.embedded.door.Door"
                ]
            }
        }
    },
    "energuide_api-master/etl/tests/embedded/test_insulation.py": {
        "test_insulation": {
            "name": "test_insulation",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_from_r_value": {
            "name": "test_from_r_value",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_equality": {
            "name": "test_equality",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "energuide_api-master/etl/tests/embedded/test_upgrade.py": {
        "sample_raw": {
            "name": "sample_raw",
            "location": 7,
            "return": [
                "bool",
                "Mapping[str, Any]",
                "Dict[str, Any]",
                "str",
                "Callable[[str], Any]"
            ],
            "arguments": {}
        },
        "sample": {
            "name": "sample",
            "location": 15,
            "return": [
                "tuple"
            ],
            "arguments": {}
        },
        "test_from_data": {
            "name": "test_from_data",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_raw": [
                    "energuide.elemenElement",
                    "energuide.dwelling.ParsedDwellingDataRow"
                ],
                "sample": [
                    "str",
                    "energuide.embedded.door.Door",
                    "energuide.embedded.window.Window"
                ]
            }
        },
        "test_to_dict": {
            "name": "test_to_dict",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "sample": [
                    "energuide.embedded.window.Window",
                    "energuide.embedded.door.Door",
                    "str",
                    "int"
                ]
            }
        }
    },
    "energuide_api-master/etl/tests/embedded/test_ventilation.py": {
        "sample": {
            "name": "sample",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_from_data": {
            "name": "test_from_data",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "sample": []
            }
        },
        "test_bad_data": {
            "name": "test_bad_data",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "bad_xml": []
            }
        },
        "test_to_dict": {
            "name": "test_to_dict",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "sample": []
            }
        },
        "test_properties": {
            "name": "test_properties",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "sample": []
            }
        }
    },
    "energuide_api-master/etl/tests/embedded/test_wall.py": {
        "raw_sample": {
            "name": "raw_sample",
            "location": 13,
            "return": [
                "bool",
                "Mapping[str, Any]",
                "Dict[str, Any]",
                "str",
                "Callable[[str], Any]"
            ],
            "arguments": {}
        },
        "sample_wall_code": {
            "name": "sample_wall_code",
            "location": 60,
            "return": [
                "Dict[Text,]",
                "bool",
                "Optional[int]",
                "Dict",
                "int",
                "bytes"
            ],
            "arguments": {}
        },
        "sample": {
            "name": "sample",
            "location": 78,
            "return": [
                "str",
                "dict",
                "IO[str]",
                "List[str]"
            ],
            "arguments": {
                "sample_wall_code": [
                    "Dict[str, energuide.embedded.code.WallCode]",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "test_from_data": {
            "name": "test_from_data",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "raw_sample": [
                    "bytes",
                    "str"
                ],
                "sample_wall_code": [
                    "bytes",
                    "str"
                ],
                "sample": [
                    "int",
                    "energuide.embedded.wall.Wall",
                    "str",
                    "float",
                    "Union[str,float]"
                ]
            }
        },
        "test_from_data_missing_codes": {
            "name": "test_from_data_missing_codes",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bad_data": {
            "name": "test_bad_data",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "bad_xml": [
                    "str"
                ]
            }
        },
        "test_to_dict": {
            "name": "test_to_dict",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "sample": [
                    "energuide.embedded.window.Window",
                    "energuide.embedded.door.Door",
                    "str",
                    "int"
                ]
            }
        }
    },
    "energuide_api-master/etl/tests/embedded/test_water_heating.py": {
        "sample_ef": {
            "name": "sample_ef",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "sample_percentage": {
            "name": "sample_percentage",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "sample_drain_water_heat_recovery": {
            "name": "sample_drain_water_heat_recovery",
            "location": 80,
            "return": [],
            "arguments": {}
        },
        "test_from_data_ef": {
            "name": "test_from_data_ef",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_ef": []
            }
        },
        "test_from_data_percentage": {
            "name": "test_from_data_percentage",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_percentage": []
            }
        },
        "test_drain_water_heat_recovery": {
            "name": "test_drain_water_heat_recovery",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_drain_water_heat_recovery": []
            }
        },
        "test_bad_data": {
            "name": "test_bad_data",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "bad_xml": []
            }
        },
        "test_to_dict": {
            "name": "test_to_dict",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_ef": []
            }
        },
        "test_properties": {
            "name": "test_properties",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_ef": []
            }
        }
    },
    "energuide_api-master/etl/tests/embedded/test_window.py": {
        "raw_sample": {
            "name": "raw_sample",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "sample_window_code": {
            "name": "sample_window_code",
            "location": 62,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {}
        },
        "sample": {
            "name": "sample",
            "location": 81,
            "return": [],
            "arguments": {
                "sample_window_code": []
            }
        },
        "test_from_data": {
            "name": "test_from_data",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "raw_sample": [],
                "sample_window_code": [],
                "sample": []
            }
        },
        "test_bad_data": {
            "name": "test_bad_data",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "bad_xml": []
            }
        },
        "test_from_data_missing_codes": {
            "name": "test_from_data_missing_codes",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_to_dict": {
            "name": "test_to_dict",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "sample": []
            }
        }
    },
    "energuide_api-master/etl/tests/embedded/__init__.py": {},
    "energuide_api-master/extract_endpoint/setup.py": {},
    "energuide_api-master/extract_endpoint/src/extract_endpoint/azure_utils.py": {
        "upload_bytes_to_azure": {
            "name": "upload_bytes_to_azure",
            "location": 20,
            "return": [
                "bool",
                "List[str]",
                "List[List[Any]]"
            ],
            "arguments": {
                "coords": [
                    "str",
                    "Dict",
                    "Type[Declared]",
                    "Type"
                ],
                "data": [
                    "bytes",
                    "str",
                    "Dict[str,str]",
                    "Optional[str]",
                    "None"
                ],
                "filename": [
                    "str",
                    "bytes",
                    "Dict",
                    "int",
                    "Optional[dict]",
                    "None"
                ]
            }
        },
        "download_bytes_from_azure": {
            "name": "download_bytes_from_azure",
            "location": 28,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "coords": [
                    "str",
                    "bool",
                    "Callable"
                ],
                "filename": [
                    "str",
                    "Tuple[str]"
                ]
            }
        }
    },
    "energuide_api-master/extract_endpoint/src/extract_endpoint/endpoint.py": {
        "_run_tl_url": {
            "name": "_run_tl_url",
            "location": 57,
            "return": [
                "str",
                "Iterable[float]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "_tl_status_url": {
            "name": "_tl_status_url",
            "location": 61,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "frontend": {
            "name": "frontend",
            "location": 66,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_alive": {
            "name": "test_alive",
            "location": 71,
            "return": [
                "Text",
                "str",
                "float"
            ],
            "arguments": {}
        },
        "robots": {
            "name": "robots",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "timestamp": {
            "name": "timestamp",
            "location": 81,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "system_status": {
            "name": "system_status",
            "location": 92,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {}
        },
        "send_to_tl": {
            "name": "send_to_tl",
            "location": 101,
            "return": [
                "dict",
                "List[str]",
                "int"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Dict",
                    "Optional[int]",
                    "int",
                    "Dict[str,object]",
                    "None",
                    "apistar.http.ResponseData",
                    "Mapping[str,Union[int,slice]]",
                    "Mapping"
                ]
            }
        },
        "run_tl": {
            "name": "run_tl",
            "location": 112,
            "return": [
                "str",
                "bytes",
                "bool",
                "Optional[int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "data": [
                    "Dict[str,Any]",
                    "None",
                    "Dict[str,Optional[str]]",
                    "Optional[List[str]]",
                    "Dict[str,Union[str,None]]",
                    "List[Tuple[bytes,bytes]]",
                    "List[str]",
                    "Optional[AbstractSet[str]]",
                    "List[tuple[Union[bytes,bytes]]]",
                    "raiden.utils.Optional[raiden.utils.Address]",
                    "AbstractSet"
                ]
            }
        },
        "run_tl_route": {
            "name": "run_tl_route",
            "location": 123,
            "return": [
                "Tuple[Text]",
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "unzip_upload_run_tl": {
            "name": "unzip_upload_run_tl",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "bool",
                    "str",
                    "io.StringIO"
                ]
            }
        },
        "upload_file": {
            "name": "upload_file",
            "location": 151,
            "return": [
                "Tuple[Text]",
                "Dict",
                "str",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "ThreadRunner.start_new_thread": {
            "name": "start_new_thread",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Callable[,None]",
                    "int",
                    "raiden.utils.PaymentWithFeeAmount",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "target": [
                    "Callable[,None]",
                    "List[int]",
                    "bool",
                    "IO",
                    "str",
                    "int"
                ]
            }
        },
        "ThreadRunner.is_thread_running": {
            "name": "is_thread_running",
            "location": 48,
            "return": [
                "bool",
                "Optional[str]",
                "List[\"Taxon\"]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Tuple[List[str],Optional[Any]]",
                    "Tuple[Union[list[str],Any,None]]"
                ]
            }
        },
        "ThreadRunner.join": {
            "name": "join",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "Dict",
                    "Dict[str,str]",
                    "None",
                    "Optional[dict]",
                    "werkzeug.datastructures.FileStorage",
                    "Optional[int]",
                    "Optional[Dict[str,str]]"
                ]
            }
        }
    },
    "energuide_api-master/extract_endpoint/src/extract_endpoint/logger.py": {
        "unwrap_exception_message": {
            "name": "unwrap_exception_message",
            "location": 4,
            "return": [
                "Text",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "exc": [
                    "BaseException"
                ],
                "join": [
                    "Text",
                    "str",
                    "Tuple[float]",
                    "bool",
                    "List",
                    "List[str]"
                ]
            }
        },
        "get_logger": {
            "name": "get_logger",
            "location": 12,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "energuide_api-master/extract_endpoint/src/extract_endpoint/post_to_endpoint.py": {
        "_etl_secret_key": {
            "name": "_etl_secret_key",
            "location": 15,
            "return": [
                "bool",
                "Optional[str]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "_endpoint_address": {
            "name": "_endpoint_address",
            "location": 19,
            "return": [
                "bool",
                "str",
                "int",
                "dict"
            ],
            "arguments": {}
        },
        "post_stream": {
            "name": "post_stream",
            "location": 23,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "stream": [
                    "str",
                    "Set[str]",
                    "bytes",
                    "List[str]",
                    "List[bytes]",
                    "int"
                ],
                "timestamp": [
                    "str"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "trigger_tl": {
            "name": "trigger_tl",
            "location": 44,
            "return": [
                "bool",
                "[dict]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Dict",
                    "Optional[Any]",
                    "Any",
                    "None"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "upload": {
            "name": "upload",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [
                    "str",
                    "int"
                ],
                "timestamp": [
                    "str",
                    "int"
                ],
                "url": [
                    "str",
                    "int"
                ]
            }
        },
        "run_tl": {
            "name": "run_tl",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "bytes"
                ]
            }
        },
        "status": {
            "name": "status",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Dict[str,str]",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "energuide_api-master/extract_endpoint/src/extract_endpoint/__init__.py": {},
    "energuide_api-master/extract_endpoint/tests/conftest.py": {
        "azure_emulator_coords": {
            "name": "azure_emulator_coords",
            "location": 14,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {}
        },
        "azure_service": {
            "name": "azure_service",
            "location": 24,
            "return": [
                "azure.storage.blob.BlockBlobService",
                "Generator"
            ],
            "arguments": {
                "azure_emulator_coords": [
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        },
        "sample_timestamp": {
            "name": "sample_timestamp",
            "location": 34,
            "return": [
                "str",
                "datetime.datetime",
                "int",
                "Sequence[str]",
                "datetime.date",
                "Tuple[str, str]"
            ],
            "arguments": {}
        },
        "sample_filenames": {
            "name": "sample_filenames",
            "location": 39,
            "return": [
                "str",
                "Tuple[Text]"
            ],
            "arguments": {}
        },
        "sample_file_contents": {
            "name": "sample_file_contents",
            "location": 44,
            "return": [
                "Tuple[Text]",
                "str",
                "Dict[str,str]"
            ],
            "arguments": {}
        },
        "sample_zipfile": {
            "name": "sample_zipfile",
            "location": 49,
            "return": [
                "str",
                "TextIO",
                "BinaryIO",
                "py._path.local.LocalPath"
            ],
            "arguments": {
                "sample_filenames": [
                    "Tuple[str,str]",
                    "int",
                    "Tuple[Union[str,str]]"
                ],
                "sample_file_contents": [
                    "Tuple[str,str]",
                    "int",
                    "Tuple[Union[str,str]]"
                ]
            }
        },
        "sample_secret_key": {
            "name": "sample_secret_key",
            "location": 62,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Optional[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "monkeypatch": [
                    "Mapping[str,Any]",
                    "Dict[str,Any]",
                    "Mapping"
                ]
            }
        },
        "sample_zipfile_fixture": {
            "name": "sample_zipfile_fixture",
            "location": 68,
            "return": [
                "Text",
                "str",
                "TextIO",
                "BinaryIO",
                "py._path.local.LocalPath"
            ],
            "arguments": {
                "tmpdir": [
                    "int",
                    "List[Optional[str]]",
                    "IO[str]",
                    "IO"
                ],
                "sample_filenames": [
                    "Tuple[str,str]",
                    "List[str]",
                    "Tuple[Union[str,str]]"
                ],
                "sample_file_contents": [
                    "Tuple[str,str]",
                    "List[str]",
                    "Tuple[Union[str,str]]"
                ]
            }
        }
    },
    "energuide_api-master/extract_endpoint/tests/test_azure_utils.py": {
        "sample_stream_content": {
            "name": "sample_stream_content",
            "location": 9,
            "return": [
                "int",
                "Text"
            ],
            "arguments": {}
        },
        "sample_data": {
            "name": "sample_data",
            "location": 14,
            "return": [
                "bytes",
                "str",
                "bool"
            ],
            "arguments": {
                "sample_stream_content": [
                    "str",
                    "bytes",
                    "Optional[List[T]]"
                ]
            }
        },
        "sample_filename": {
            "name": "sample_filename",
            "location": 19,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {}
        },
        "put_file_in_azure": {
            "name": "put_file_in_azure",
            "location": 24,
            "return": [
                "Generator",
                "Generator[Text]"
            ],
            "arguments": {
                "azure_emulator_coords": [],
                "azure_service": [],
                "sample_stream_content": [
                    "str"
                ]
            }
        },
        "check_file_in_azure": {
            "name": "check_file_in_azure",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "azure_service": [
                    "str",
                    "Generator",
                    "bytes"
                ],
                "azure_emulator_coords": [
                    "str",
                    "Generator",
                    "bytes"
                ],
                "filename": [
                    "str",
                    "Generator",
                    "bytes"
                ],
                "contents": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "test_upload_bytes": {
            "name": "test_upload_bytes",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "azure_emulator_coords": [],
                "azure_service": [],
                "sample_data": [
                    "int"
                ],
                "sample_stream_content": [],
                "sample_filename": []
            }
        },
        "test_download_bytes": {
            "name": "test_download_bytes",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "azure_emulator_coords": [],
                "put_file_in_azure": [],
                "sample_stream_content": []
            }
        },
        "test_download_bytes_bad_filename": {
            "name": "test_download_bytes_bad_filename",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "azure_emulator_coords": [
                    "bool"
                ]
            }
        }
    },
    "energuide_api-master/extract_endpoint/tests/test_endpoint.py": {
        "test_client": {
            "name": "test_client",
            "location": 17,
            "return": [],
            "arguments": {
                "monkeypatch": [],
                "azure_emulator_coords": []
            }
        },
        "sample_salt": {
            "name": "sample_salt",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "sample_salt_signature": {
            "name": "sample_salt_signature",
            "location": 30,
            "return": [
                "bool",
                "str",
                "float"
            ],
            "arguments": {
                "sample_salt": [
                    "str",
                    "bytes",
                    "defaultdict",
                    "Dict[str, str]"
                ],
                "sample_secret_key": [
                    "str",
                    "bytes",
                    "defaultdict",
                    "Dict[str, str]"
                ]
            }
        },
        "sample_zipfile_signature": {
            "name": "sample_zipfile_signature",
            "location": 37,
            "return": [
                "int",
                "Set[str]",
                "set",
                "str"
            ],
            "arguments": {
                "sample_salt": [
                    "str",
                    "bytes",
                    "defaultdict",
                    "Dict[str, str]"
                ],
                "sample_secret_key": [
                    "str",
                    "bytes",
                    "defaultdict",
                    "Dict[str, str]"
                ],
                "sample_zipfile": [
                    "bytes",
                    "int",
                    "Optional[dict]",
                    "Optional[str]",
                    "str",
                    "dict",
                    "Mapping[str, str]",
                    "Optional[bytes]"
                ]
            }
        },
        "sample_nonzipfile": {
            "name": "sample_nonzipfile",
            "location": 47,
            "return": [
                "io.StringIO",
                "float"
            ],
            "arguments": {}
        },
        "sample_nonzipfile_signature": {
            "name": "sample_nonzipfile_signature",
            "location": 52,
            "return": [
                "int",
                "Set[str]",
                "set",
                "str"
            ],
            "arguments": {
                "sample_salt": [
                    "str",
                    "bytes",
                    "defaultdict",
                    "Dict[str, str]"
                ],
                "sample_secret_key": [
                    "str",
                    "bytes",
                    "defaultdict",
                    "Dict[str, str]"
                ],
                "sample_nonzipfile": [
                    "bytes",
                    "int",
                    "Optional[dict]",
                    "Optional[str]",
                    "str",
                    "dict",
                    "Mapping[str, str]",
                    "Optional[bytes]"
                ]
            }
        },
        "upload_timestamp_file": {
            "name": "upload_timestamp_file",
            "location": 62,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "azure_emulator_coords": [
                    "str",
                    "Iterable[str]"
                ],
                "azure_service": [
                    "str",
                    "Iterable[str]"
                ],
                "sample_timestamp": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "mocked_tl_app": {
            "name": "mocked_tl_app",
            "location": 72,
            "return": [],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "int"
                ],
                "sample_secret_key": [
                    "str",
                    "bool",
                    "List[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "thread_runner": {
            "name": "thread_runner",
            "location": 88,
            "return": [
                "typing.Generator"
            ],
            "arguments": {}
        },
        "busy_thread_runner": {
            "name": "busy_thread_runner",
            "location": 94,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "thread_runner": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "test_threadrunner": {
            "name": "test_threadrunner",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "thread_runner": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "check_file_in_azure": {
            "name": "check_file_in_azure",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "azure_service": [
                    "str",
                    "Generator",
                    "bytes"
                ],
                "azure_emulator_coords": [
                    "str",
                    "Generator",
                    "bytes"
                ],
                "filename": [
                    "str",
                    "Generator",
                    "bytes"
                ],
                "contents": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "test_run_tl_url": {
            "name": "test_run_tl_url",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "bool"
                ]
            }
        },
        "test_run_tl": {
            "name": "test_run_tl",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_salt": [
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]"
                ],
                "sample_salt_signature": [
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "test_run_tl_no_data": {
            "name": "test_run_tl_no_data",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_run_tl_bad_data": {
            "name": "test_run_tl_bad_data",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_run_tl_route": {
            "name": "test_run_tl_route",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "str",
                    "flask.testing.FlaskClient",
                    "List[str]"
                ],
                "sample_salt": [
                    "str",
                    "flask.testing.FlaskClient",
                    "List[str]"
                ],
                "sample_salt_signature": [
                    "str",
                    "flask.testing.FlaskClient",
                    "List[str]"
                ]
            }
        },
        "test_run_tl_route_no_data": {
            "name": "test_run_tl_route_no_data",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": []
            }
        },
        "test_frontend": {
            "name": "test_frontend",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_alive": {
            "name": "test_alive",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "flask.testing.FlaskClient",
                    "str"
                ]
            }
        },
        "test_robots": {
            "name": "test_robots",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "flask.testing.FlaskClient",
                    "str"
                ]
            }
        },
        "test_timestamp": {
            "name": "test_timestamp",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "flask.testing.FlaskClient",
                    "str"
                ],
                "sample_timestamp": [
                    "dict"
                ]
            }
        },
        "test_timestamp_no_file": {
            "name": "test_timestamp_no_file",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_upload_with_timestamp": {
            "name": "test_upload_with_timestamp",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "azure_service": [
                    "str",
                    "Callable"
                ],
                "azure_emulator_coords": [
                    "str",
                    "Callable"
                ],
                "sample_filenames": [
                    "str",
                    "int"
                ],
                "sample_file_contents": [
                    "str",
                    "int"
                ],
                "test_client": [
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "thread_runner": [
                    "Optional[str]",
                    "str"
                ],
                "sample_timestamp": [
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "sample_salt": [
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "sample_zipfile_signature": [
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "sample_zipfile": [
                    "str",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "test_upload_without_timestamp": {
            "name": "test_upload_without_timestamp",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "str",
                    "int",
                    "dict"
                ],
                "sample_salt": [
                    "str",
                    "int",
                    "dict"
                ],
                "sample_zipfile_signature": [
                    "str",
                    "int",
                    "dict"
                ],
                "sample_zipfile": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "test_upload_no_key_in_env": {
            "name": "test_upload_no_key_in_env",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "str",
                    "flask.testing.FlaskClient"
                ],
                "sample_timestamp": [
                    "str",
                    "flask.testing.FlaskClient"
                ],
                "sample_salt": [
                    "str",
                    "flask.testing.FlaskClient"
                ],
                "sample_zipfile_signature": [
                    "str",
                    "flask.testing.FlaskClient"
                ],
                "sample_zipfile": [
                    "str",
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_upload_no_salt": {
            "name": "test_upload_no_salt",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "str",
                    "flask.testing.FlaskClient",
                    "List[str]"
                ],
                "sample_timestamp": [
                    "str",
                    "flask.testing.FlaskClient",
                    "List[str]"
                ],
                "sample_zipfile_signature": [
                    "str",
                    "flask.testing.FlaskClient",
                    "List[str]"
                ],
                "sample_zipfile": [
                    "str",
                    "flask.testing.FlaskClient",
                    "List[str]"
                ]
            }
        },
        "test_upload_wrong_salt": {
            "name": "test_upload_wrong_salt",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "str",
                    "int"
                ],
                "sample_timestamp": [
                    "str",
                    "int"
                ],
                "sample_zipfile_signature": [
                    "str",
                    "int"
                ],
                "sample_zipfile": [
                    "str",
                    "int"
                ]
            }
        },
        "test_upload_no_signature": {
            "name": "test_upload_no_signature",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "str",
                    "flask.testing.FlaskClient"
                ],
                "sample_timestamp": [
                    "str",
                    "flask.testing.FlaskClient"
                ],
                "sample_salt": [
                    "str",
                    "flask.testing.FlaskClient"
                ],
                "sample_zipfile": [
                    "str",
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_upload_wrong_signature": {
            "name": "test_upload_wrong_signature",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "str",
                    "flask.testing.FlaskClient"
                ],
                "sample_timestamp": [
                    "str",
                    "flask.testing.FlaskClient"
                ],
                "sample_salt": [
                    "str",
                    "flask.testing.FlaskClient"
                ],
                "sample_zipfile": [
                    "str",
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_upload_no_file": {
            "name": "test_upload_no_file",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "str",
                    "flask.testing.FlaskClient",
                    "float",
                    "List[str]"
                ],
                "sample_timestamp": [
                    "str",
                    "flask.testing.FlaskClient",
                    "float",
                    "List[str]"
                ],
                "sample_salt": [
                    "str",
                    "flask.testing.FlaskClient",
                    "float",
                    "List[str]"
                ],
                "sample_zipfile_signature": [
                    "str",
                    "flask.testing.FlaskClient",
                    "float",
                    "List[str]"
                ]
            }
        },
        "test_upload_with_non_zipfile": {
            "name": "test_upload_with_non_zipfile",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "str",
                    "float",
                    "flask.testing.FlaskClient"
                ],
                "sample_timestamp": [
                    "str",
                    "float",
                    "flask.testing.FlaskClient"
                ],
                "sample_salt": [
                    "str",
                    "float",
                    "flask.testing.FlaskClient"
                ],
                "sample_nonzipfile_signature": [
                    "str",
                    "float",
                    "flask.testing.FlaskClient"
                ],
                "sample_nonzipfile": [
                    "str",
                    "float",
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_status_idle": {
            "name": "test_status_idle",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_status_busy": {
            "name": "test_status_busy",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "mocked_tl_app.mock_send_to_tl": {
            "name": "mock_send_to_tl",
            "location": 73,
            "return": [
                "int",
                "Optional[Dict]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "data": [
                    "Optional[Union[Dict, str, int, bytes]]",
                    "str",
                    "bytes",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "dict",
                    "Tuple[str, List[str]]"
                ]
            }
        },
        "busy_thread_runner.sleeper": {
            "name": "sleeper",
            "location": 97,
            "return": [],
            "arguments": {}
        },
        "test_threadrunner.sleeper": {
            "name": "sleeper",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "energuide_api-master/extract_endpoint/tests/test_post_to_endpoint.py": {
        "endpoint_host": {
            "name": "endpoint_host",
            "location": 23,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "upload_url": {
            "name": "upload_url",
            "location": 28,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "endpoint_host": [
                    "str",
                    "bool",
                    "Dict[str,object]"
                ]
            }
        },
        "run_endpoint": {
            "name": "run_endpoint",
            "location": 33,
            "return": [
                "Generator",
                "Generator[None]"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "int",
                    "dict",
                    "bytes",
                    "bool"
                ],
                "azure_emulator_coords": [
                    "str",
                    "int"
                ],
                "sample_secret_key": [
                    "str",
                    "bytes",
                    "Dict"
                ],
                "endpoint_host": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "sample_stream_content": {
            "name": "sample_stream_content",
            "location": 57,
            "return": [
                "int",
                "Text"
            ],
            "arguments": {}
        },
        "sample_stream": {
            "name": "sample_stream",
            "location": 62,
            "return": [
                "NamedStream",
                "str",
                "click.HelpFormatter"
            ],
            "arguments": {
                "sample_stream_content": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "List[Dict[str,Any]]"
                ],
                "sample_filename": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "sample_stream_stdin": {
            "name": "sample_stream_stdin",
            "location": 67,
            "return": [
                "NamedStream",
                "str",
                "click.HelpFormatter"
            ],
            "arguments": {
                "sample_stream_content": [
                    "str",
                    "bytes",
                    "Dict"
                ]
            }
        },
        "sample_filename": {
            "name": "sample_filename",
            "location": 72,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {}
        },
        "sample_timestamp_filename": {
            "name": "sample_timestamp_filename",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "check_file_in_azure": {
            "name": "check_file_in_azure",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "azure_service": [
                    "str",
                    "Generator",
                    "bytes"
                ],
                "azure_emulator_coords": [
                    "str",
                    "Generator",
                    "bytes"
                ],
                "filename": [
                    "str",
                    "Generator",
                    "bytes"
                ],
                "contents": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "test_post_stream_cli": {
            "name": "test_post_stream_cli",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_timestamp": [
                    "Callable",
                    "bool",
                    "Callable[[str],None]"
                ],
                "sample_zipfile_fixture": [
                    "Callable",
                    "bool",
                    "Callable[[str],None]"
                ],
                "upload_url": [
                    "Callable",
                    "bool",
                    "Callable[[str],None]"
                ]
            }
        },
        "test_etl_secret_key": {
            "name": "test_etl_secret_key",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_endpoint_address": {
            "name": "test_endpoint_address",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "float"
                ]
            }
        },
        "test_post_stream_cli_no_stream": {
            "name": "test_post_stream_cli_no_stream",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "upload_url": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "int",
                    "None"
                ],
                "sample_timestamp": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "int",
                    "None"
                ]
            }
        },
        "test_post_stream_cli_no_timestamp": {
            "name": "test_post_stream_cli_no_timestamp",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_zipfile_fixture": [
                    "str",
                    "int",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ],
                "upload_url": [
                    "str",
                    "int",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_post_stream_cli_no_url": {
            "name": "test_post_stream_cli_no_url",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_timestamp": [],
                "sample_zipfile_fixture": []
            }
        },
        "test_run_tl": {
            "name": "test_run_tl",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_status": {
            "name": "test_status",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "NamedStream.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "energuide_api-master/extract_endpoint/tests/__init__.py": {},
    "energuide_api-master/nrcan_etl/setup.py": {},
    "energuide_api-master/nrcan_etl/src/energuide/cli.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "load": {
            "name": "load",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "username": [
                    "str",
                    "bool",
                    "int"
                ],
                "password": [
                    "str",
                    "bool",
                    "int"
                ],
                "host": [
                    "str",
                    "bool",
                    "int"
                ],
                "port": [
                    "str",
                    "bool",
                    "int"
                ],
                "db_name": [
                    "str",
                    "List[str]",
                    "int",
                    "Optional[str]"
                ],
                "collection": [
                    "str",
                    "List[str]",
                    "int",
                    "Optional[str]"
                ],
                "azure": [
                    "bool",
                    "int",
                    "Iterable[float]"
                ],
                "filename": [
                    "str",
                    "int",
                    "bool"
                ],
                "update": [
                    "bool",
                    "Optional[bool]",
                    "Optional[str]",
                    "str"
                ],
                "progress": [
                    "str",
                    "bool",
                    "Optional[Union[str, Any]]"
                ],
                "production": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "extract": {
            "name": "extract",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "infile": [
                    "float",
                    "int",
                    "str"
                ],
                "outfile": [
                    "str",
                    "bool"
                ],
                "progress": [
                    "str",
                    "int",
                    "Sequence[int]",
                    "bytes"
                ]
            }
        }
    },
    "energuide_api-master/nrcan_etl/src/energuide/database.py": {
        "mongo_client": {
            "name": "mongo_client",
            "location": 55,
            "return": [
                "Iterable[pymongo.MongoClient]",
                "Generator"
            ],
            "arguments": {
                "database_coordinates": [
                    "str",
                    "Optional[str]",
                    "Iterable[str]"
                ]
            }
        },
        "_chunk": {
            "name": "_chunk",
            "location": 70,
            "return": [
                "Generator[list]",
                "Union[tuple,list]",
                "None",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "data": [
                    "\"ks.Series\"",
                    "List[Dict[str, Any]]",
                    "Dict[str, Any]"
                ],
                "size": [
                    "int",
                    "List[Dict]",
                    "Sequence[Sequence[float]]",
                    "List",
                    "Tuple[int]",
                    "str",
                    "Sequence[int]"
                ]
            }
        },
        "load": {
            "name": "load",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "coords": [
                    "str",
                    "Dict[str, Any]"
                ],
                "database_name": [
                    "str"
                ],
                "collection_name": [
                    "str",
                    "Optional[str]"
                ],
                "data": [
                    "str",
                    "dict",
                    "list",
                    "List[str]"
                ],
                "update": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        },
        "DatabaseCoordinates.connection_string": {
            "name": "connection_string",
            "location": 45,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "energuide_api-master/nrcan_etl/src/energuide/dwelling.py": {
        "_filter_dummy_evaluations": {
            "name": "_filter_dummy_evaluations",
            "location": 217,
            "return": [
                "List[Union[list[None],tuple[Union[str,Any]],tuple[None]]]",
                "List[Dict]",
                "Optional[Union[str,Any,Any,Any]]",
                "List[List[Any]]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "int",
                    "bytes",
                    "Mapping[str,str]",
                    "Mapping",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ParsedDwellingDataRow.from_row": {
            "name": "from_row",
            "location": 96,
            "return": [
                "ParsedDwellingDataRow",
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None"
                ],
                "row": [
                    "Dict[str,Any]",
                    "List[str]",
                    "List[float]",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "Evaluation.from_data": {
            "name": "from_data",
            "location": 178,
            "return": [
                "Evaluation",
                "Dict",
                "str",
                "Machine",
                "Optional[Tuple[str]]"
            ],
            "arguments": {
                "cls": [
                    "Dict",
                    "Dict[str,Any]",
                    "Type[T]",
                    "Type",
                    "List[Dict]",
                    "List[dict]",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "data": [
                    "Dict[str,Any]",
                    "Dict",
                    "Mapping",
                    "bool",
                    "Mapping[str,Any]",
                    "Type",
                    "Iterable"
                ]
            }
        },
        "Evaluation.to_dict": {
            "name": "to_dict",
            "location": 197,
            "return": [
                "Dict[Text,Union[None,list]]",
                "str",
                "Optional[str]",
                "Dict",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "_filter_dummy_evaluations.split": {
            "name": "split",
            "location": 219,
            "return": [
                "List",
                "Optional[str]",
                "str",
                "Type[BaseException]",
                "Optional[Type[BaseException]]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Optional[dict]",
                    "bool"
                ]
            }
        },
        "Dwelling._from_parsed_group": {
            "name": "_from_parsed_group",
            "location": 252,
            "return": [
                "Dwelling",
                "str",
                "Exception",
                "Dict",
                "int"
            ],
            "arguments": {
                "cls": [
                    "Dict",
                    "Dict[str,Any]",
                    "Type[T]",
                    "Type",
                    "memoryview",
                    "str",
                    "List[Dict]",
                    "List[dict]"
                ],
                "data": [
                    "str",
                    "List[float]",
                    "defaultdict"
                ]
            }
        },
        "Dwelling.from_group": {
            "name": "from_group",
            "location": 268,
            "return": [
                "Dict[str, bool]",
                "int",
                "Exception",
                "dict",
                "str"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "list",
                    "Dict[str, str]"
                ],
                "data": [
                    "Dict",
                    "Dict[str,Any]",
                    "Type[T]"
                ]
            }
        },
        "Dwelling.to_dict": {
            "name": "to_dict",
            "location": 273,
            "return": [
                "Dict[Text,list]",
                "Mapping[str,Any]",
                "Optional[str]",
                "Callable",
                "str",
                "Dict[str,Union[str,Set]]",
                "Optional[Dict[str,str]]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "energuide_api-master/nrcan_etl/src/energuide/element.py": {
        "Element.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int",
                    "List[Dict[str,Any]]",
                    "Callable[...,T]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "Element.new": {
            "name": "new",
            "location": 21,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str,Any]",
                    "Set[str]",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,dict[str,Any]]"
                ],
                "tag": [
                    "str",
                    "Dict[str,Any]",
                    "Set[str]",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,dict[str,Any]]"
                ]
            }
        },
        "Element.from_string": {
            "name": "from_string",
            "location": 25,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "Callable",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "xml.etree.ElementTree.Element"
                ],
                "data": [
                    "str",
                    "xml.etree.ElementTree.Element",
                    "Dict"
                ]
            }
        },
        "Element.parse": {
            "name": "parse",
            "location": 32,
            "return": [
                "List[int]",
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "IO",
                    "Union[str,bytes]"
                ]
            }
        },
        "Element.findtext": {
            "name": "findtext",
            "location": 36,
            "return": [
                "int",
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.get_text": {
            "name": "get_text",
            "location": 39,
            "return": [
                "str",
                "None",
                "bool",
                "Dict",
                "Set",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.attrib": {
            "name": "attrib",
            "location": 51,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.xpath": {
            "name": "xpath",
            "location": 54,
            "return": [
                "List[Union[Element,Text]]",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.find": {
            "name": "find",
            "location": 58,
            "return": [
                "int",
                "Element",
                "bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.to_string": {
            "name": "to_string",
            "location": 62,
            "return": [
                "str",
                "Union[tuple, list]",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.__iter__": {
            "name": "__iter__",
            "location": 65,
            "return": [
                "Iterator[Any]",
                "Generator[Element]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.tag": {
            "name": "tag",
            "location": 70,
            "return": [
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.insert": {
            "name": "insert",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "Callable"
                ],
                "element": [
                    "Callable"
                ]
            }
        },
        "Element.get": {
            "name": "get",
            "location": 76,
            "return": [
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "xpath": [
                    "str"
                ],
                "type_": [
                    "str",
                    "Dict[str,Any]",
                    "Tuple[type]",
                    "Tuple[Type]"
                ]
            }
        }
    },
    "energuide_api-master/nrcan_etl/src/energuide/exceptions.py": {
        "InvalidEmbeddedDataTypeError.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_class": [
                    "str",
                    "int",
                    "Type",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "msg": [
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[T]"
                ]
            }
        }
    },
    "energuide_api-master/nrcan_etl/src/energuide/extractor.py": {
        "_empty_to_none": {
            "name": "_empty_to_none",
            "location": 69,
            "return": [
                "Tuple[int, int]",
                "bool",
                "float"
            ],
            "arguments": {
                "row": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, int]"
                ]
            }
        },
        "_validated": {
            "name": "_validated",
            "location": 76,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "row": [
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "memoryview"
                ],
                "validator": [
                    "str",
                    "bytes",
                    "Dict[str, str]"
                ]
            }
        },
        "_truncate_postal_code": {
            "name": "_truncate_postal_code",
            "location": 85,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "row": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, int]",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "_safe_merge": {
            "name": "_safe_merge",
            "location": 91,
            "return": [
                "Dict[str, List[int]]",
                "str",
                "Optional[float]",
                "List[Dict[str, Any]]",
                "int",
                "bool"
            ],
            "arguments": {
                "data": [
                    "Dict[str, Any]",
                    "\"ks.Series\"",
                    "int",
                    "dict"
                ],
                "extra": [
                    "Dict[str, Any]",
                    "dict",
                    "bytes",
                    "Dict[str, int]"
                ]
            }
        },
        "_snip_upgrade_order": {
            "name": "_snip_upgrade_order",
            "location": 99,
            "return": [
                "Tuple[int, int]",
                "float",
                "bool",
                "int"
            ],
            "arguments": {
                "row": [
                    "MutableMapping[str, Any]",
                    "Iterator[str]"
                ]
            }
        },
        "_drop_unwanted": {
            "name": "_drop_unwanted",
            "location": 112,
            "return": [
                "Tuple[int, int]",
                "float",
                "bool",
                "int"
            ],
            "arguments": {
                "row": [
                    "Dict[str, Optional[str]]",
                    "bool",
                    "dict"
                ]
            }
        },
        "_read_csv": {
            "name": "_read_csv",
            "location": 117,
            "return": [
                "Iterator[Dict[str,str]]",
                "Generator"
            ],
            "arguments": {
                "filepath": [
                    "str"
                ],
                "show_progress": [
                    "bool",
                    "str",
                    "Union[int, str]"
                ]
            }
        },
        "extract_data": {
            "name": "extract_data",
            "location": 133,
            "return": [
                "Iterator[Optional[Dict[str,Any]]]",
                "Generator",
                "Generator[None]"
            ],
            "arguments": {
                "input_path": [
                    "str"
                ],
                "show_progress": [
                    "str",
                    "bool"
                ]
            }
        },
        "write_data": {
            "name": "write_data",
            "location": 151,
            "return": [
                "Tuple[int]",
                "str",
                "int",
                "Generator",
                "bool"
            ],
            "arguments": {
                "data": [
                    "Iterable[Optional[Any]]",
                    "bool",
                    "str",
                    "[str]",
                    "Sequence[str]"
                ],
                "output_path": [
                    "str",
                    "bytes",
                    "list"
                ]
            }
        }
    },
    "energuide_api-master/nrcan_etl/src/energuide/flask_app.py": {
        "_run_tl_and_verify": {
            "name": "_run_tl_and_verify",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "frontend": {
            "name": "frontend",
            "location": 84,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "robots": {
            "name": "robots",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "system_status": {
            "name": "system_status",
            "location": 94,
            "return": [
                "Text",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "run_tl": {
            "name": "run_tl",
            "location": 99,
            "return": [
                "Tuple[Text]",
                "Dict",
                "Callable",
                "List[str]"
            ],
            "arguments": {}
        },
        "ThreadRunner.start_new_thread": {
            "name": "start_new_thread",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Callable[[], None]",
                    "int",
                    "Optional[str]"
                ],
                "target": [
                    "Callable[[], None]",
                    "List[int]",
                    "bool",
                    "telepresence.cli.PortMapping",
                    "IO",
                    "str",
                    "int"
                ]
            }
        },
        "ThreadRunner.is_thread_running": {
            "name": "is_thread_running",
            "location": 74,
            "return": [
                "bool",
                "Optional[str]",
                "List[\"Taxon\"]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "Tuple[List[str], Optional[Any]]",
                    "bool"
                ]
            }
        },
        "ThreadRunner.join": {
            "name": "join",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "Optional[dict]",
                    "Optional[int]",
                    "Dict[str, str]",
                    "Optional[Dict[str, str]]"
                ]
            }
        }
    },
    "energuide_api-master/nrcan_etl/src/energuide/logger.py": {
        "unwrap_exception_message": {
            "name": "unwrap_exception_message",
            "location": 4,
            "return": [
                "Text",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "exc": [
                    "BaseException"
                ],
                "join": [
                    "Text",
                    "str",
                    "Tuple[float]",
                    "bool",
                    "List",
                    "List[str]"
                ]
            }
        },
        "get_logger": {
            "name": "get_logger",
            "location": 12,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "energuide_api-master/nrcan_etl/src/energuide/snippets.py": {
        "snip_energy_upgrade_order": {
            "name": "snip_energy_upgrade_order",
            "location": 21,
            "return": [
                "EnergyUpgradesSnippet",
                "Callable",
                "str"
            ],
            "arguments": {
                "energy_upgrades": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "EnergyUpgradesSnippet.to_dict": {
            "name": "to_dict",
            "location": 15,
            "return": [
                "Dict[Text,]",
                "str",
                "bytes",
                "bool",
                "Sequence[float]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "energuide_api-master/nrcan_etl/src/energuide/transform.py": {
        "_read_groups": {
            "name": "_read_groups",
            "location": 114,
            "return": [
                "Iterator[List[Dict[str,Any]]]",
                "Generator[list]"
            ],
            "arguments": {
                "extracted_rows": [
                    "Iterable[dict[str,Any]]",
                    "None",
                    "Iterable[Dict[str,Any]]",
                    "Dict[str,str]",
                    "Dict",
                    "Dict[str,Any]",
                    "Optional[Dict]"
                ]
            }
        },
        "_generate_dwellings": {
            "name": "_generate_dwellings",
            "location": 120,
            "return": [
                "None",
                "Dict",
                "bool"
            ],
            "arguments": {
                "grouped": [
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]",
                    "str",
                    "Optional[str]",
                    "Sequence[str]",
                    "int"
                ]
            }
        },
        "transform": {
            "name": "transform",
            "location": 143,
            "return": [
                "Iterator[energuide.dwelling.Dwelling]",
                "Generator"
            ],
            "arguments": {
                "extract_reader": [
                    "int"
                ],
                "show_progress": [
                    "int",
                    "bool"
                ]
            }
        },
        "AzureCoordinates.from_env": {
            "name": "from_env",
            "location": 27,
            "return": [
                "AzureCoordinates",
                "str",
                "Optional[str]",
                "Optional[Dict[str,Any]]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "bool",
                    "List[int]",
                    "Iterable"
                ]
            }
        },
        "ExtractProtocol.extracted_rows": {
            "name": "extracted_rows",
            "location": 37,
            "return": [
                "Iterator[Dict[str,Any]]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtractProtocol.num_rows": {
            "name": "num_rows",
            "location": 40,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalExtractReader.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "zip_filename": [
                    "str",
                    "bytes"
                ]
            }
        },
        "LocalExtractReader.extracted_rows": {
            "name": "extracted_rows",
            "location": 49,
            "return": [
                "Iterator[Dict[str,Any]]",
                "Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalExtractReader.num_rows": {
            "name": "num_rows",
            "location": 57,
            "return": [
                "int",
                "Callable",
                "bool",
                "energuide.elemenElement"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureExtractReader.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "coords": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "AzureExtractReader._azure_service": {
            "name": "_azure_service",
            "location": 72,
            "return": [
                "int",
                "List[int]",
                "Callable",
                "str",
                "Dict",
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureExtractReader._new_files": {
            "name": "_new_files",
            "location": 80,
            "return": [
                "List",
                "List[str]",
                "str",
                "bool",
                "List[Tuple[str,str,str]]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureExtractReader.extracted_rows": {
            "name": "extracted_rows",
            "location": 103,
            "return": [
                "Iterator[Dict[str,Any]]",
                "Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureExtractReader.num_rows": {
            "name": "num_rows",
            "location": 110,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "energuide_api-master/nrcan_etl/src/energuide/validator.py": {
        "DwellingValidator._validate_type_xml": {
            "name": "_validate_type_xml",
            "location": 8,
            "return": [
                "bool",
                "int",
                "Optional[float]",
                "str",
                "Dict[str,Any]",
                "Callable[...,None]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "FrozenSet[int]",
                    "frozenset"
                ]
            }
        },
        "DwellingValidator._normalize_coerce_parse_xml": {
            "name": "_normalize_coerce_parse_xml",
            "location": 11,
            "return": [
                "Dict[str, Any]",
                "str",
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "energuide_api-master/nrcan_etl/src/energuide/__init__.py": {},
    "energuide_api-master/nrcan_etl/src/energuide/embedded/composite.py": {
        "CompositeValue.to_dict": {
            "name": "to_dict",
            "location": 10,
            "return": [
                "Dict[Text,]",
                "str",
                "Mapping"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "energuide_api-master/nrcan_etl/src/energuide/embedded/evaluation_type.py": {
        "EvaluationType.from_code": {
            "name": "from_code",
            "location": 12,
            "return": [
                "bool",
                "Optional[Any]",
                "Type[Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "code": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "energuide_api-master/nrcan_etl/src/energuide/embedded/house_type.py": {
        "HouseType.normalize": {
            "name": "normalize",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "str",
                    "Sequence[str]",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "unclean_string": [
                    "str"
                ]
            }
        }
    },
    "energuide_api-master/nrcan_etl/src/energuide/embedded/measurement.py": {
        "Measurement.to_dict": {
            "name": "to_dict",
            "location": 12,
            "return": [
                "Dict[Text,Union[dict[str,str],list,frozenset,list[Union[int,Any,Any]],Type,tuple[Union[Literal,Literal,Literal,Literal,Literal]],list[Callable[...,Any]]]]",
                "str",
                "bytes",
                "bool",
                "Sequence[float]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "energuide_api-master/nrcan_etl/src/energuide/embedded/region.py": {
        "Region._from_name": {
            "name": "_from_name",
            "location": 59,
            "return": [
                "None",
                "bool",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Region._from_code": {
            "name": "_from_code",
            "location": 74,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]",
                "bool",
                "Optional[Dict]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "Region._from_fuzzy_match": {
            "name": "_from_fuzzy_match",
            "location": 84,
            "return": [
                "None",
                "str",
                "Optional[str]",
                "Optional[int]",
                "Sequence[int]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict"
                ],
                "data": [
                    "str",
                    "bytearray",
                    "Iterable[bytes]"
                ]
            }
        },
        "Region.from_data": {
            "name": "from_data",
            "location": 108,
            "return": [
                "List[int]",
                "str",
                "bool",
                "bytes",
                "int"
            ],
            "arguments": {
                "cls": [
                    "Dict[str,Any]",
                    "Dict",
                    "str",
                    "Dict[str,int]",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "data": [
                    "dict",
                    "int"
                ]
            }
        }
    },
    "energuide_api-master/nrcan_etl/src/energuide/embedded/upgrade.py": {
        "Upgrade.from_data": {
            "name": "from_data",
            "location": 14,
            "return": [
                "bool",
                "Upgrade"
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "bool",
                    "str",
                    "int"
                ],
                "setting": [
                    "List[str]",
                    "List[T]",
                    "Callable",
                    "list"
                ]
            }
        },
        "Upgrade.to_dict": {
            "name": "to_dict",
            "location": 21,
            "return": [
                "bool",
                "Dict[Text,]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "energuide_api-master/nrcan_etl/src/energuide/embedded/walls.py": {
        "Wall.from_data": {
            "name": "from_data",
            "location": 15,
            "return": [
                "Wall",
                "int",
                "str",
                "Callable",
                "Callable[[None,None],bool]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict",
                    "Callable",
                    "Exception"
                ],
                "insulation": [
                    "str",
                    "Dict"
                ],
                "heat_lost": [
                    "Optional[float]",
                    "float",
                    "int",
                    "List[str]",
                    "None",
                    "Dict",
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "Wall.to_dict": {
            "name": "to_dict",
            "location": 42,
            "return": [
                "Dict[Text,list]",
                "List[Dict[str,Any]]",
                "List",
                "Dict[str,Any]",
                "Dict[str,List[Any]]",
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "energuide_api-master/nrcan_etl/tests/conftest.py": {
        "azure_emulator_is_running": {
            "name": "azure_emulator_is_running",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "username": {
            "name": "username",
            "location": 31,
            "return": [
                "str",
                "Optional[str]",
                "Optional[int]",
                "bool"
            ],
            "arguments": {}
        },
        "password": {
            "name": "password",
            "location": 36,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "host": {
            "name": "host",
            "location": 41,
            "return": [
                "str",
                "Optional[str]",
                "Optional[int]",
                "bool"
            ],
            "arguments": {}
        },
        "port": {
            "name": "port",
            "location": 46,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "production": {
            "name": "production",
            "location": 51,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {}
        },
        "database_name": {
            "name": "database_name",
            "location": 56,
            "return": [
                "Iterable[str]",
                "Generator[Text]"
            ],
            "arguments": {
                "database_coordinates": [
                    "str"
                ]
            }
        },
        "collection": {
            "name": "collection",
            "location": 68,
            "return": [
                "str",
                "Optional[str]",
                "Optional[int]",
                "bool"
            ],
            "arguments": {}
        },
        "database_coordinates": {
            "name": "database_coordinates",
            "location": 73,
            "return": [
                "str",
                "bool",
                "Dict[str, List[str]]"
            ],
            "arguments": {
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "host": [
                    "str"
                ],
                "port": [
                    "str"
                ],
                "production": [
                    "str"
                ]
            }
        },
        "mongo_client": {
            "name": "mongo_client",
            "location": 88,
            "return": [
                "Iterable[pymongo.MongoClient]",
                "Generator"
            ],
            "arguments": {
                "database_coordinates": [
                    "str"
                ]
            }
        },
        "energuide_fixture": {
            "name": "energuide_fixture",
            "location": 94,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "energuide_zip_fixture": {
            "name": "energuide_zip_fixture",
            "location": 99,
            "return": [
                "int",
                "List[int]",
                "IO",
                "bytes",
                "List[str]"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "bool"
                ],
                "energuide_fixture": [
                    "int",
                    "bytes",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "_get_blob_service": {
            "name": "_get_blob_service",
            "location": 107,
            "return": [
                "int",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "coords": [
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "azure_coordinates": {
            "name": "azure_coordinates",
            "location": 114,
            "return": [
                "str",
                "List[bytes]",
                "bool",
                "bytes"
            ],
            "arguments": {
                "monkeypatch": [
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "azure_emulator": {
            "name": "azure_emulator",
            "location": 130,
            "return": [
                "Iterator[energuide.transform.AzureCoordinates]",
                "Generator"
            ],
            "arguments": {
                "azure_coordinates": [
                    "str"
                ]
            }
        },
        "populated_azure_emulator": {
            "name": "populated_azure_emulator",
            "location": 138,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "azure_emulator": [
                    "int",
                    "bytes",
                    "BinaryIO",
                    "Optional[int]"
                ],
                "energuide_zip_fixture": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "energuide_api-master/nrcan_etl/tests/test_cli.py": {
        "data1": {
            "name": "data1",
            "location": 13,
            "return": [
                "Dict[Text,Text]",
                "Dict",
                "Dict[str,str]",
                "str",
                "Dict[str,float]",
                "Dict[str,Any]"
            ],
            "arguments": {}
        },
        "data2": {
            "name": "data2",
            "location": 48,
            "return": [
                "Dict[str, List[int]]",
                "str",
                "Optional[float]",
                "dict",
                "float",
                "int"
            ],
            "arguments": {}
        },
        "data_dict": {
            "name": "data_dict",
            "location": 56,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "request": [
                    "Set[str]"
                ]
            }
        },
        "valid_filepath": {
            "name": "valid_filepath",
            "location": 61,
            "return": [
                "str",
                "Callable[[str],bool]",
                "List[object]",
                "Optional[str]",
                "Dict",
                "int"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "bool",
                    "int"
                ],
                "data_dict": [
                    "Dict",
                    "Dict[str,Any]",
                    "bool",
                    "bytes"
                ]
            }
        },
        "invalid_filepath": {
            "name": "invalid_filepath",
            "location": 73,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tmpdir": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_load_filename": {
            "name": "test_load_filename",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "energuide_zip_fixture": [
                    "str"
                ],
                "database_name": [
                    "str"
                ],
                "collection": [
                    "str",
                    "int",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Dict",
                    "List[str]",
                    "None",
                    "bool"
                ],
                "mongo_client": [
                    "str",
                    "int",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Dict",
                    "List[str]",
                    "None",
                    "bool"
                ]
            }
        },
        "test_load_azure": {
            "name": "test_load_azure",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "database_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "collection": [
                    "int",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ],
                "mongo_client": [
                    "int",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "test_load_update": {
            "name": "test_load_update",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "energuide_zip_fixture": [
                    "str"
                ],
                "database_name": [
                    "str"
                ],
                "collection": [
                    "str",
                    "int",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Dict",
                    "None",
                    "bool"
                ],
                "mongo_client": [
                    "str",
                    "int",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Dict",
                    "None",
                    "bool"
                ]
            }
        },
        "test_extract_valid": {
            "name": "test_extract_valid",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_filepath": [
                    "str",
                    "int",
                    "Type"
                ],
                "tmpdir": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "py._path.local.LocalPath",
                    "None"
                ]
            }
        },
        "test_extract_invalid": {
            "name": "test_extract_invalid",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "invalid_filepath": [
                    "str",
                    "int"
                ],
                "tmpdir": [
                    "str",
                    "float"
                ]
            }
        },
        "test_extract_missing": {
            "name": "test_extract_missing",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ]
            }
        }
    },
    "energuide_api-master/nrcan_etl/tests/test_database.py": {
        "load_data": {
            "name": "load_data",
            "location": 10,
            "return": [
                "List",
                "Callable",
                "Tuple[str,str]"
            ],
            "arguments": {}
        },
        "test_load": {
            "name": "test_load",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "database_coordinates": [
                    "str"
                ],
                "mongo_client": [
                    "str",
                    "pymongo.MongoClient"
                ],
                "database_name": [
                    "str",
                    "Callable",
                    "Dict[str,str]"
                ],
                "collection": [
                    "str",
                    "Callable",
                    "Dict[str,str]"
                ],
                "load_data": [
                    "str"
                ]
            }
        },
        "test_load_update": {
            "name": "test_load_update",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "database_coordinates": [
                    "str",
                    "Callable"
                ],
                "mongo_client": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "database_name": [
                    "str",
                    "Callable",
                    "Dict[str,str]"
                ],
                "collection": [
                    "str",
                    "Callable",
                    "Dict[str,str]"
                ],
                "load_data": [
                    "str",
                    "Callable"
                ]
            }
        }
    },
    "energuide_api-master/nrcan_etl/tests/test_dwelling.py": {
        "upgrades_input": {
            "name": "upgrades_input",
            "location": 20,
            "return": [
                "List[Text]",
                "str",
                "Union[List[str],str]"
            ],
            "arguments": {}
        },
        "sample_input_d": {
            "name": "sample_input_d",
            "location": 29,
            "return": [
                "Dict[Text,Union[Text,list[str],bool]]",
                "Dict[int,Dict[int,int]]",
                "Dict",
                "Dict[str,str]"
            ],
            "arguments": {
                "upgrades_input": [
                    "List[str]",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "sample_input_e": {
            "name": "sample_input_e",
            "location": 65,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "Set[str]"
            ],
            "arguments": {
                "sample_input_d": [
                    "Dict[str,Any]",
                    "Dict",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "sample_input_missing": {
            "name": "sample_input_missing",
            "location": 73,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "sample_input_d": [
                    "Dict[str,Any]",
                    "Dict",
                    "str",
                    "int"
                ]
            }
        },
        "sample_parsed_d": {
            "name": "sample_parsed_d",
            "location": 82,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "sample_input_d": [
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        },
        "sample_parsed_e": {
            "name": "sample_parsed_e",
            "location": 87,
            "return": [
                "float",
                "bool"
            ],
            "arguments": {
                "sample_input_e": [
                    "Dict[str,Any]"
                ]
            }
        },
        "TestParsedDwellingDataRow.test_from_row": {
            "name": "test_from_row",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_input_d": [
                    "Dict[str,Any]",
                    "Dict",
                    "int"
                ]
            }
        },
        "TestParsedDwellingDataRow.test_null_fields_are_accepted": {
            "name": "test_null_fields_are_accepted",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_input_missing": [
                    "Dict[str,Any]"
                ]
            }
        },
        "TestParsedDwellingDataRow.test_bad_postal_code": {
            "name": "test_bad_postal_code",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_input_d": [
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "TestParsedDwellingDataRow.test_from_bad_row": {
            "name": "test_from_bad_row",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDwellingEvaluation.test_eval_type": {
            "name": "test_eval_type",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_parsed_d": [
                    "energuide.dwelling.ParsedDwellingDataRow",
                    "energuide.elemenElement"
                ]
            }
        },
        "TestDwellingEvaluation.test_entry_date": {
            "name": "test_entry_date",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_parsed_d": [
                    "energuide.dwelling.ParsedDwellingDataRow",
                    "energuide.elemenElement"
                ]
            }
        },
        "TestDwellingEvaluation.test_creation_date": {
            "name": "test_creation_date",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_parsed_d": [
                    "energuide.dwelling.ParsedDwellingDataRow",
                    "energuide.elemenElement"
                ]
            }
        },
        "TestDwellingEvaluation.test_modification_date": {
            "name": "test_modification_date",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_parsed_d": [
                    "energuide.dwelling.ParsedDwellingDataRow",
                    "energuide.elemenElement"
                ]
            }
        },
        "TestDwellingEvaluation.test_to_dict": {
            "name": "test_to_dict",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_parsed_d": [
                    "energuide.dwelling.ParsedDwellingDataRow",
                    "energuide.elemenElement"
                ]
            }
        },
        "TestDwelling.sample": {
            "name": "sample",
            "location": 321,
            "return": [
                "List[Union[dict[str,Any],float,int,Collection,None]]",
                "Dict[str,int]",
                "Dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "sample_input_d": [
                    "Dict[str,Any]",
                    "float",
                    "int",
                    "Optional[Collection[int]]",
                    "Collection",
                    "None"
                ],
                "sample_input_e": [
                    "Dict[str,Any]",
                    "float",
                    "int",
                    "Optional[Collection[int]]",
                    "Collection",
                    "None"
                ]
            }
        },
        "TestDwelling.dummy_sample": {
            "name": "dummy_sample",
            "location": 328,
            "return": [
                "List[Union[dict[str,Any],int,Any,None,float,Callable,str,dict]]",
                "Dict[str,int]",
                "Dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "sample_input_d": [
                    "Dict[str,Any]",
                    "int",
                    "float",
                    "Callable",
                    "Optional[Any]",
                    "str",
                    "Any",
                    "None"
                ],
                "sample_input_e": [
                    "bool",
                    "dict"
                ]
            }
        },
        "TestDwelling.test_house_id": {
            "name": "test_house_id",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample": [
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "TestDwelling.test_year_built": {
            "name": "test_year_built",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample": [
                    "List[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "TestDwelling.test_address_data": {
            "name": "test_address_data",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample": [
                    "List[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "TestDwelling.test_evaluations": {
            "name": "test_evaluations",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample": [
                    "List[Dict[str,Any]]",
                    "str",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "TestDwelling.test_no_data": {
            "name": "test_no_data",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDwelling.test_to_dict": {
            "name": "test_to_dict",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample": [
                    "List[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "TestDwelling.test_filter_dummies": {
            "name": "test_filter_dummies",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dummy_sample": [
                    "List[Dict[str,Any]]",
                    "str",
                    "List[dict[str,Any]]"
                ]
            }
        }
    },
    "energuide_api-master/nrcan_etl/tests/test_element.py": {
        "fragment": {
            "name": "fragment",
            "location": 8,
            "return": [
                "Text",
                "bool",
                "str",
                "Dict"
            ],
            "arguments": {}
        },
        "fragment_file_path": {
            "name": "fragment_file_path",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "fragment": [
                    "str"
                ],
                "tmpdir": [
                    "str",
                    "IO[str]",
                    "int",
                    "List[Optional[str]]"
                ]
            }
        },
        "fragment_node": {
            "name": "fragment_node",
            "location": 21,
            "return": [
                "bool",
                "Union[int, float, complex]",
                "OrderedDict"
            ],
            "arguments": {
                "fragment": [
                    "str",
                    "int"
                ]
            }
        },
        "test_from_string": {
            "name": "test_from_string",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment": [
                    "str"
                ]
            }
        },
        "test_findtext": {
            "name": "test_findtext",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_node": [
                    "str",
                    "energuide.elemenElement",
                    "Union[str,Path]"
                ]
            }
        },
        "test_get_text": {
            "name": "test_get_text",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_node": [
                    "Callable",
                    "int",
                    "energuide.elemenElement"
                ]
            }
        },
        "test_get_text_raises_when_not_found": {
            "name": "test_get_text_raises_when_not_found",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_node": [
                    "energuide.elemenElement",
                    "Callable"
                ]
            }
        },
        "test_attrib": {
            "name": "test_attrib",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_node": [
                    "bool",
                    "energuide.elemenElement",
                    "float",
                    "Callable"
                ]
            }
        },
        "test_xpath_returns_elements": {
            "name": "test_xpath_returns_elements",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_node": [
                    "float",
                    "energuide.embedded.window.Window"
                ]
            }
        },
        "test_parse": {
            "name": "test_parse",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_file_path": [
                    "str",
                    "int"
                ]
            }
        },
        "test_iter": {
            "name": "test_iter",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_node": [
                    "Dict",
                    "str",
                    "Callable[[T],T]"
                ]
            }
        },
        "test_find": {
            "name": "test_find",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_node": [
                    "float",
                    "int"
                ]
            }
        },
        "test_find_returns_none": {
            "name": "test_find_returns_none",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_node": [
                    "str",
                    "bool",
                    "energuide.elemenElement"
                ]
            }
        },
        "test_to_string": {
            "name": "test_to_string",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_node": [
                    "energuide.elemenElement",
                    "bool",
                    "type",
                    "List[str]",
                    "Exception"
                ]
            }
        },
        "test_tag": {
            "name": "test_tag",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_node": [
                    "Dict[str,Any]",
                    "energuide.elemenElement"
                ]
            }
        },
        "test_new": {
            "name": "test_new",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_from_malformed_string": {
            "name": "test_from_malformed_string",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_insert_node": {
            "name": "test_insert_node",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_int": {
            "name": "test_get_int",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_node": [
                    "energuide.elemenElement",
                    "int",
                    "str"
                ]
            }
        },
        "test_get_float": {
            "name": "test_get_float",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_node": [
                    "energuide.elemenElement",
                    "int",
                    "str"
                ]
            }
        },
        "test_get_str": {
            "name": "test_get_str",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_node": [
                    "Dict[Hashable,Any]",
                    "energuide.elemenElement",
                    "Optional[Dict[Hashable,Any]]"
                ]
            }
        },
        "test_get_raises_when_not_found": {
            "name": "test_get_raises_when_not_found",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_node": [
                    "Dict",
                    "energuide.elemenElement",
                    "Dict[str,tuple[Union[str,str]]]",
                    "Dict[str,Tuple[str,str]]"
                ]
            }
        },
        "test_get_raises_when_cant_cast": {
            "name": "test_get_raises_when_cant_cast",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "fragment_node": [
                    "Dict[str,tuple[Union[str,str]]]",
                    "Dict",
                    "energuide.elemenElement",
                    "Dict[str,Tuple[str,str]]",
                    "str"
                ]
            }
        }
    },
    "energuide_api-master/nrcan_etl/tests/test_extractor.py": {
        "_write_csv": {
            "name": "_write_csv",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "Optional[str]"
                ],
                "data": [
                    "Dict",
                    "Dict[str,str]"
                ]
            }
        },
        "base_data": {
            "name": "base_data",
            "location": 20,
            "return": [
                "Dict[Text,Text]",
                "str",
                "Dict[str,Any]",
                "Dict[str,float]",
                "Dict[str,Dict[str,Any]]",
                "Dict[str,Union[str,Set]]"
            ],
            "arguments": {}
        },
        "extra_data": {
            "name": "extra_data",
            "location": 57,
            "return": [
                "Dict[str, List[int]]",
                "dict",
                "str",
                "Optional[float]",
                "bytes"
            ],
            "arguments": {}
        },
        "missing_data": {
            "name": "missing_data",
            "location": 65,
            "return": [
                "List[dict[str,Any]]",
                "Dict",
                "Dict[str,List[int]]",
                "Dict[str,int]",
                "str",
                "List[str]",
                "Optional[float]",
                "bytes"
            ],
            "arguments": {}
        },
        "nullable_data": {
            "name": "nullable_data",
            "location": 72,
            "return": [
                "Dict[str, List[int]]",
                "dict",
                "str",
                "Optional[float]",
                "bytes"
            ],
            "arguments": {}
        },
        "valid_filepath": {
            "name": "valid_filepath",
            "location": 79,
            "return": [
                "str",
                "Callable[[str],bool]",
                "List[object]",
                "Optional[str]",
                "Dict",
                "int"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "int",
                    "Dict"
                ],
                "request": [
                    "Callable",
                    "bytes",
                    "Mapping[str,Any]",
                    "Dict",
                    "Mapping",
                    "str",
                    "Optional[Job]",
                    "None"
                ]
            }
        },
        "missing_filepath": {
            "name": "missing_filepath",
            "location": 87,
            "return": [
                "str",
                "int",
                "Dict",
                "Callable"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "Dict",
                    "Optional[Union[Dict,str,int,bytes]]",
                    "int",
                    "bytes",
                    "None"
                ],
                "missing_data": [
                    "Dict[str,str]",
                    "List",
                    "Dict",
                    "str"
                ]
            }
        },
        "extra_filepath": {
            "name": "extra_filepath",
            "location": 94,
            "return": [
                "str",
                "int",
                "Dict",
                "Callable"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "Dict",
                    "Optional[Union[Dict,str,int,bytes]]",
                    "int",
                    "bytes",
                    "None"
                ],
                "extra_data": [
                    "Dict[str,str]",
                    "List",
                    "Dict",
                    "str"
                ]
            }
        },
        "test_extract_valid": {
            "name": "test_extract_valid",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_filepath": [
                    "Iterable",
                    "bytes",
                    "energuide.flask_app.ThreadRunner"
                ]
            }
        },
        "test_purge_unknown": {
            "name": "test_purge_unknown",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "extra_filepath": [
                    "int"
                ]
            }
        },
        "test_extract_missing": {
            "name": "test_extract_missing",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "missing_filepath": []
            }
        },
        "test_empty_to_none": {
            "name": "test_empty_to_none",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "bytes"
                ],
                "nullable_data": [
                    "Dict[str,Union[str,None]]",
                    "bool",
                    "Dict[str,Optional[str]]",
                    "Dict[str,Any]"
                ]
            }
        },
        "test_write_data": {
            "name": "test_write_data",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ]
            }
        },
        "test_write_bad_data": {
            "name": "test_write_bad_data",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "energuide_api-master/nrcan_etl/tests/test_flask_app.py": {
        "sample_salt": {
            "name": "sample_salt",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "sample_secret_key": {
            "name": "sample_secret_key",
            "location": 21,
            "return": [
                "dict",
                "bool",
                "flask.Flask",
                "Optional[dict]",
                "Optional[Dict]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "monkeypatch": [
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "sample_signature": {
            "name": "sample_signature",
            "location": 27,
            "return": [
                "bool",
                "str",
                "float"
            ],
            "arguments": {
                "sample_salt": [
                    "str",
                    "bytes",
                    "defaultdict",
                    "dict",
                    "Dict[str, str]"
                ],
                "sample_secret_key": [
                    "str",
                    "bytes",
                    "defaultdict",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "test_client": {
            "name": "test_client",
            "location": 34,
            "return": [],
            "arguments": {
                "monkeypatch": [
                    "str"
                ],
                "database_name": [
                    "str"
                ]
            }
        },
        "thread_runner": {
            "name": "thread_runner",
            "location": 40,
            "return": [
                "typing.Generator"
            ],
            "arguments": {}
        },
        "busy_thread_runner": {
            "name": "busy_thread_runner",
            "location": 46,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "thread_runner": [
                    "energuide.flask_app.ThreadRunner",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "fake_db_coords": {
            "name": "fake_db_coords",
            "location": 59,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "monkeypatch": [
                    "bool"
                ]
            }
        },
        "test_threadrunner": {
            "name": "test_threadrunner",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "thread_runner": [
                    "energuide.flask_app.ThreadRunner",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_frontend": {
            "name": "test_frontend",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_robots": {
            "name": "test_robots",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "flask.testing.FlaskClient",
                    "str"
                ]
            }
        },
        "test_run_tl": {
            "name": "test_run_tl",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "str",
                    "flask.testing.FlaskClient"
                ],
                "thread_runner": [
                    "energuide.flask_app.ThreadRunner",
                    "str"
                ],
                "mongo_client": [
                    "str",
                    "pymongo.MongoClient"
                ],
                "database_name": [
                    "str",
                    "pymongo.MongoClient"
                ],
                "collection": [
                    "str",
                    "pymongo.MongoClient"
                ],
                "sample_salt": [
                    "str",
                    "flask.testing.FlaskClient"
                ],
                "sample_signature": [
                    "str",
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_run_tl_busy": {
            "name": "test_run_tl_busy",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "str",
                    "flask.testing.FlaskClient",
                    "django.http.HttpRequest"
                ],
                "sample_salt": [
                    "str",
                    "flask.testing.FlaskClient",
                    "django.http.HttpRequest"
                ],
                "sample_signature": [
                    "str",
                    "flask.testing.FlaskClient",
                    "django.http.HttpRequest"
                ]
            }
        },
        "test_run_tl_no_salt": {
            "name": "test_run_tl_no_salt",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "str",
                    "flask.testing.FlaskClient"
                ],
                "energuide_zip_fixture": [
                    "str",
                    "flask.testing.FlaskClient"
                ],
                "sample_signature": [
                    "str",
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_run_tl_no_signature": {
            "name": "test_run_tl_no_signature",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "str",
                    "flask.testing.FlaskClient"
                ],
                "energuide_zip_fixture": [
                    "str",
                    "flask.testing.FlaskClient"
                ],
                "sample_salt": [
                    "str",
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_run_tl_bad_signature": {
            "name": "test_run_tl_bad_signature",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "str",
                    "flask.testing.FlaskClient"
                ],
                "energuide_zip_fixture": [
                    "str",
                    "flask.testing.FlaskClient"
                ],
                "sample_salt": [
                    "str",
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_status_idle": {
            "name": "test_status_idle",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_status_busy": {
            "name": "test_status_busy",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "busy_thread_runner.sleeper": {
            "name": "sleeper",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "fake_db_coords.connection_string": {
            "name": "connection_string",
            "location": 60,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_threadrunner.sleeper": {
            "name": "sleeper",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "energuide_api-master/nrcan_etl/tests/test_logger.py": {
        "test_unwrap_exception_message": {
            "name": "test_unwrap_exception_message",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "energuide_api-master/nrcan_etl/tests/test_snippets.py": {
        "doc": {
            "name": "doc",
            "location": 9,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {}
        },
        "test_energy_snippet_to_dict": {
            "name": "test_energy_snippet_to_dict",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "doc": [
                    "energuide.elemenElement"
                ]
            }
        },
        "test_upgrades_snippet": {
            "name": "test_upgrades_snippet",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "doc": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "energuide_api-master/nrcan_etl/tests/test_transform.py": {
        "local_reader": {
            "name": "local_reader",
            "location": 11,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "energuide_zip_fixture": [
                    "str",
                    "int",
                    "List[Optional[Any]]",
                    "bool"
                ]
            }
        },
        "azure_reader": {
            "name": "azure_reader",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "populated_azure_emulator": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_reader": {
            "name": "test_reader",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "local_reader": [
                    "energuide.transform.LocalExtractReader"
                ]
            }
        },
        "test_reader_sorted_by_house_id": {
            "name": "test_reader_sorted_by_house_id",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "local_reader": [
                    "energuide.transform.LocalExtractReader"
                ]
            }
        },
        "test_reader_num_rows": {
            "name": "test_reader_num_rows",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "local_reader": [
                    "int",
                    "energuide.transform.LocalExtractReader",
                    "List[dict[str,Any]]",
                    "str",
                    "energuide.transform.AzureExtractReader",
                    "List[Dict[str,Any]]"
                ]
            }
        },
        "test_azure_reader_extracted_rows": {
            "name": "test_azure_reader_extracted_rows",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "azure_reader": [
                    "energuide.transform.LocalExtractReader"
                ]
            }
        },
        "touch_one_file_in_azure": {
            "name": "touch_one_file_in_azure",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "azure_emulator": [
                    "bool",
                    "List[int]",
                    "str",
                    "Dict[str,str]",
                    "Dict",
                    "bytes",
                    "int",
                    "Union[bytes,str]"
                ],
                "energuide_zip_fixture": [
                    "str",
                    "Optional[List[str]]",
                    "bool",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_azure_reader_extracted_rows_new_data": {
            "name": "test_azure_reader_extracted_rows_new_data",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "azure_reader": [
                    "Callable",
                    "int",
                    "bool"
                ],
                "azure_emulator": [
                    "str",
                    "int",
                    "List[list[Any]]",
                    "energuide.transform.AzureCoordinates",
                    "List[List[Any]]"
                ],
                "energuide_zip_fixture": [
                    "str",
                    "int",
                    "List[list[Any]]",
                    "energuide.transform.AzureCoordinates",
                    "List[List[Any]]"
                ]
            }
        },
        "test_azure_reader_num_rows": {
            "name": "test_azure_reader_num_rows",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "azure_reader": [
                    "int",
                    "energuide.transform.AzureExtractReader",
                    "List[dict[str,Any]]",
                    "str",
                    "energuide.transform.LocalExtractReader",
                    "List[Dict[str,Any]]"
                ]
            }
        },
        "test_azure_reader_num_rows_new_data": {
            "name": "test_azure_reader_num_rows_new_data",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "azure_reader": [
                    "energuide.transform.AzureExtractReader",
                    "int",
                    "datetime.date.time"
                ]
            }
        },
        "test_azure_coordinates_from_env": {
            "name": "test_azure_coordinates_from_env",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_transform": {
            "name": "test_transform",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "local_reader": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "energuide_api-master/nrcan_etl/tests/test_validator.py": {
        "test_validates_xml": {
            "name": "test_validates_xml",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_string_fails_validation": {
            "name": "test_string_fails_validation",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_coerce_to_xml": {
            "name": "test_coerce_to_xml",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_embedded_xml": {
            "name": "test_embedded_xml",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "energuide_api-master/nrcan_etl/tests/__init__.py": {},
    "energuide_api-master/nrcan_etl/tests/embedded/test_evaluation_type.py": {
        "TestEvaluationType.test_from_code": {
            "name": "test_from_code",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ],
                "eval_type": [
                    "str"
                ]
            }
        }
    },
    "energuide_api-master/nrcan_etl/tests/embedded/test_house_type.py": {
        "house_types": {
            "name": "house_types",
            "location": 6,
            "return": [
                "List[tuple[Text]]",
                "str",
                "bool",
                "Dict[str,Any]",
                "Iterator",
                "int"
            ],
            "arguments": {}
        },
        "test_normalize": {
            "name": "test_normalize",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "dirty": [
                    "Callable",
                    "Type[Any]",
                    "Type"
                ],
                "clean": [
                    "Callable",
                    "Type[Any]",
                    "Type"
                ]
            }
        }
    },
    "energuide_api-master/nrcan_etl/tests/embedded/test_measurement.py": {
        "test_measurement_to_dict": {
            "name": "test_measurement_to_dict",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_seriealize_properties": {
            "name": "test_seriealize_properties",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_seriealize_properties.Test.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "float"
                ]
            }
        },
        "test_seriealize_properties.Test.to_dict": {
            "name": "to_dict",
            "location": 22,
            "return": [
                "Dict[Text,]",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "energuide_api-master/nrcan_etl/tests/embedded/test_region.py": {
        "TestRegion.test_from_name": {
            "name": "test_from_name",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegion.test_alternative_name": {
            "name": "test_alternative_name",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegion.test_from_unknown_name": {
            "name": "test_from_unknown_name",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegion.test_fuzzy_names": {
            "name": "test_fuzzy_names",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegion.test_french_name": {
            "name": "test_french_name",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegion.test_from_code": {
            "name": "test_from_code",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegion.test_alternative_code": {
            "name": "test_alternative_code",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegion.test_from_unknown_code": {
            "name": "test_from_unknown_code",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "energuide_api-master/nrcan_etl/tests/embedded/test_upgrade.py": {
        "sample_raw": {
            "name": "sample_raw",
            "location": 7,
            "return": [
                "bool",
                "Mapping[str, Any]",
                "Dict[str, Any]",
                "str",
                "Callable[[str], Any]"
            ],
            "arguments": {}
        },
        "sample": {
            "name": "sample",
            "location": 15,
            "return": [
                "tuple"
            ],
            "arguments": {}
        },
        "test_from_data": {
            "name": "test_from_data",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_raw": [
                    "energuide.elemenElement",
                    "energuide.dwelling.ParsedDwellingDataRow"
                ],
                "sample": [
                    "str",
                    "energuide.embedded.door.Door",
                    "energuide.embedded.window.Window"
                ]
            }
        },
        "test_to_dict": {
            "name": "test_to_dict",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "sample": [
                    "energuide.embedded.window.Window",
                    "energuide.embedded.door.Door",
                    "str",
                    "int"
                ]
            }
        }
    },
    "energuide_api-master/nrcan_etl/tests/embedded/test_walls.py": {
        "test_from_data": {
            "name": "test_from_data",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_to_dict": {
            "name": "test_to_dict",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_wall_missing_accepted": {
            "name": "test_wall_missing_accepted",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bad_insulation_string": {
            "name": "test_bad_insulation_string",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_incomplete_insulation_string": {
            "name": "test_incomplete_insulation_string",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
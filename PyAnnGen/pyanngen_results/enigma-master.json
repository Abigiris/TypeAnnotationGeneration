{
    "enigma-master/enigma/enigma.py": {
        "Enigma.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Enigma.encode": {
            "name": "encode",
            "location": 19,
            "return": [
                "str",
                "int",
                "bool",
                "Optional[str]",
                "List[dict]",
                "None"
            ],
            "arguments": {
                "self": [],
                "plain_text": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None"
                ],
                "blocks": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "Enigma.encode_letter": {
            "name": "encode_letter",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "letter": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Enigma.prepare_input": {
            "name": "prepare_input",
            "location": 32,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "str",
                    "List[str]",
                    "List"
                ]
            }
        },
        "Enigma.format_output": {
            "name": "format_output",
            "location": 40,
            "return": [
                "str",
                "bool",
                "BaseException",
                "Exception",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "output": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "None"
                ],
                "blocks": [
                    "int",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "Enigma.split_into_blocks": {
            "name": "split_into_blocks",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "int",
                    "str",
                    "List[int]",
                    "Sized",
                    "List[float]"
                ],
                "block_size": [
                    "int",
                    "str",
                    "List[int]",
                    "Sized",
                    "List[float]"
                ]
            }
        }
    },
    "enigma-master/enigma/exceptions.py": {},
    "enigma-master/enigma/plugboard.py": {
        "Plugboard.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connections": [
                    "str",
                    "None",
                    "Dict[str,str]",
                    "List[str]",
                    "Optional[Sequence[str]]",
                    "Sequence[str]"
                ]
            }
        },
        "Plugboard.encode": {
            "name": "encode",
            "location": 27,
            "return": [
                "int",
                "str",
                "List[str]",
                "Tuple",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[str]",
                    "Tuple",
                    "str",
                    "bool",
                    "Iterable[T_co]",
                    "T"
                ]
            }
        },
        "Plugboard.validate_connection": {
            "name": "validate_connection",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "str",
                    "Mapping[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "InvalidPlugboard.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "str",
                    "Sequence[str]",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        }
    },
    "enigma-master/enigma/__init__.py": {},
    "enigma-master/enigma/__version__.py": {},
    "enigma-master/enigma/models/enigma_model.py": {
        "PresetRotor.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "str"
                ],
                "ring_setting": [
                    "str"
                ]
            }
        },
        "PresetReflector.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnigmaModel.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "enigma-master/enigma/models/m3.py": {},
    "enigma-master/enigma/models/__init__.py": {},
    "enigma-master/enigma/rotor/encoder.py": {
        "Encoder.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wiring": [
                    "Text",
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "enigma-master/enigma/rotor/reflector.py": {
        "Reflector.encode": {
            "name": "encode",
            "location": 11,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "int",
                    "Sequence[str]",
                    "Dict[str,list[Any]]",
                    "Dict[str,List[Any]]",
                    "bool"
                ]
            }
        },
        "Reflector._find_pin": {
            "name": "_find_pin",
            "location": 36,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "pin_letter": [
                    "str",
                    "int",
                    "List[int]",
                    "Sequence[int]",
                    "Optional[Collection[int]]",
                    "Collection",
                    "None"
                ]
            }
        },
        "Reflector._find_letter": {
            "name": "_find_letter",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "pin_number": [
                    "int",
                    "Set",
                    "str"
                ]
            }
        }
    },
    "enigma-master/enigma/rotor/rotor.py": {
        "Rotor.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wiring": [
                    "Text",
                    "str",
                    "bool",
                    "Optional[int]"
                ],
                "ring_setting": [
                    "int",
                    "str",
                    "MutableMapping[str,str]",
                    "Dict"
                ],
                "position": [
                    "Text",
                    "int",
                    "str",
                    "Sequence[str]"
                ],
                "turnover_positions": [
                    "List[Text]",
                    "int",
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "Rotor.encode": {
            "name": "encode",
            "location": 62,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "letter": [
                    "int",
                    "Sequence[str]",
                    "Dict[str,list[Any]]",
                    "Dict[str,List[Any]]",
                    "bool"
                ],
                "reverse": [
                    "bool"
                ]
            }
        },
        "Rotor.rotate": {
            "name": "rotate",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "turns": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Rotor.set_position": {
            "name": "set_position",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "letter_position": [
                    "str",
                    "List[str]",
                    "bool",
                    "bytes",
                    "Dict[str,int]"
                ]
            }
        },
        "Rotor.rotate_next_rotor": {
            "name": "rotate_next_rotor",
            "location": 109,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rotor.position": {
            "name": "position",
            "location": 116,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rotor._find_pin": {
            "name": "_find_pin",
            "location": 123,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "pin_letter": [
                    "str",
                    "int"
                ]
            }
        },
        "Rotor._find_letter": {
            "name": "_find_letter",
            "location": 131,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "pin_number": [
                    "int",
                    "Set",
                    "str"
                ]
            }
        }
    },
    "enigma-master/enigma/rotor/rotor_mechanism.py": {
        "RotorMechanism.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RotorMechanism.encode": {
            "name": "encode",
            "location": 29,
            "return": [
                "str",
                "int",
                "List[int]",
                "Callable[[Mapping],T]",
                "List",
                "Dict[int,Union[Any,Any]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "List[Dict]",
                    "List",
                    "List[dict]",
                    "Sequence",
                    "Tuple[int,int,int]",
                    "Tuple[Union[int,int,int]]"
                ]
            }
        },
        "RotorMechanism.encode_rotor_right_left": {
            "name": "encode_rotor_right_left",
            "location": 39,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "rotor_position": [
                    "int",
                    "float"
                ],
                "value": [
                    "int"
                ]
            }
        },
        "RotorMechanism.encode_rotor_left_right": {
            "name": "encode_rotor_left_right",
            "location": 49,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "rotor_position": [
                    "List[str]",
                    "str",
                    "bool",
                    "List[tuple[Union[int,str]]]",
                    "List[Tuple[int,str]]",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]"
                ],
                "value": [
                    "int",
                    "str",
                    "Iterable[int]",
                    "List[str]",
                    "float",
                    "Optional[float]",
                    "None"
                ]
            }
        },
        "RotorMechanism.update_rotor_positions": {
            "name": "update_rotor_positions",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "enigma-master/enigma/rotor/wiring.py": {
        "Wiring.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wiring": [
                    "Iterable[Any]",
                    "List[str]",
                    "Iterable",
                    "int"
                ]
            }
        },
        "Wiring.__repr__": {
            "name": "__repr__",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wiring.__len__": {
            "name": "__len__",
            "location": 23,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wiring.left_pin": {
            "name": "left_pin",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "right_pin": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Wiring.right_pin": {
            "name": "right_pin",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "left_pin": [
                    "int",
                    "Sequence[int]",
                    "str"
                ]
            }
        }
    },
    "enigma-master/enigma/rotor/__init__.py": {},
    "enigma-master/tests/__init__.py": {},
    "enigma-master/tests/test_enigma/test_enigma.py": {
        "TestEnigma.get_enigma": {
            "name": "get_enigma",
            "location": 11,
            "return": [
                "enigma.enigma.Enigma"
            ],
            "arguments": {
                "self": [],
                "rotors": [
                    "list[dict[typing.Text, typing.Union[typing.Text,int,list[typing.Text]]]]"
                ],
                "reflector": [
                    "Text",
                    "int",
                    "bool"
                ],
                "plugboard": [
                    "List",
                    "bool",
                    "int"
                ]
            }
        },
        "TestEnigma.test_enigma_default_encoding": {
            "name": "test_enigma_default_encoding",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "enigma-master/tests/test_enigma/test_package.py": {
        "TestPackage.test_version_file_attributes": {
            "name": "test_version_file_attributes",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "enigma-master/tests/test_enigma/__init__.py": {},
    "enigma-master/tests/test_models/test_m3.py": {
        "TestM3.test_M3": {
            "name": "test_M3",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "enigma-master/tests/test_models/__init__.py": {},
    "enigma-master/tests/test_plugboard/test_plugboard.py": {
        "TestPlugboard.test_empty_plugboard": {
            "name": "test_empty_plugboard",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlugboard.test_plugboard_encoding": {
            "name": "test_plugboard_encoding",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlugboard.test_plugboard_raises_for_invalid_connection": {
            "name": "test_plugboard_raises_for_invalid_connection",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlugboard.test_plugboard_raises_for_invalid_argument": {
            "name": "test_plugboard_raises_for_invalid_argument",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "enigma-master/tests/test_plugboard/__init__.py": {},
    "enigma-master/tests/test_rotor/rotor_test.py": {
        "RotorTest.get_rotor": {
            "name": "get_rotor",
            "location": 12,
            "return": [
                "enigma.rotor.rotor.Rotor"
            ],
            "arguments": {
                "self": [],
                "wiring": [
                    "str",
                    "Text"
                ],
                "ring_setting": [
                    "str",
                    "int"
                ],
                "position": [
                    "str",
                    "Text"
                ],
                "turnover_positions": [
                    "str",
                    "List[Text]"
                ]
            }
        },
        "RotorTest.get_reflector": {
            "name": "get_reflector",
            "location": 27,
            "return": [
                "enigma.rotor.reflector.Reflector"
            ],
            "arguments": {
                "self": [],
                "wiring": [
                    "Text",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "enigma-master/tests/test_rotor/test_encoder.py": {
        "TestEncoder.test_encoder": {
            "name": "test_encoder",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "enigma-master/tests/test_rotor/test_reflector.py": {
        "TestReflector.test_reflector_output": {
            "name": "test_reflector_output",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "enigma-master/tests/test_rotor/test_rotor.py": {
        "TestRotors.rotor_position_test": {
            "name": "rotor_position_test",
            "location": 13,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "positions": [
                    "bool"
                ],
                "ring_setting": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "TestRotors.rotor_turnover_positions_test": {
            "name": "rotor_turnover_positions_test",
            "location": 22,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "turnover_positionses": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool",
                    "Iterable[List[Any]]"
                ],
                "ring_setting": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "TestRotors.test_straight_rotor": {
            "name": "test_straight_rotor",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRotors.test_set_rotor_position": {
            "name": "test_set_rotor_position",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRotors.test_set_rotor_position_with_ring_setting": {
            "name": "test_set_rotor_position_with_ring_setting",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRotors.test_set_rotor_turnover_positions": {
            "name": "test_set_rotor_turnover_positions",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRotors.test_set_multiple_rotor_turnover_positions": {
            "name": "test_set_multiple_rotor_turnover_positions",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRotors.test_rotor_starting_position": {
            "name": "test_rotor_starting_position",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRotors.test_rotor_complete_rotation": {
            "name": "test_rotor_complete_rotation",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRotors.test_rotor_position_updates_on_rotation": {
            "name": "test_rotor_position_updates_on_rotation",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRotors.test_get_ring_setting": {
            "name": "test_get_ring_setting",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRotors.test_ring_setting": {
            "name": "test_ring_setting",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRotors.test_rotor_rotate_next_rotor": {
            "name": "test_rotor_rotate_next_rotor",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRotors.test_rotor_I_position_A_input_A": {
            "name": "test_rotor_I_position_A_input_A",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRotors.test_rotor_I_position_A_after_rotation": {
            "name": "test_rotor_I_position_A_after_rotation",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRotors.test_rotor_III": {
            "name": "test_rotor_III",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRotors.test_rotor_I_position_A_input_A_reverse": {
            "name": "test_rotor_I_position_A_input_A_reverse",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRotors.test_rotor_I_position_A_after_rotation_reverse": {
            "name": "test_rotor_I_position_A_after_rotation_reverse",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRotors.test_rotor_III_reverse": {
            "name": "test_rotor_III_reverse",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "enigma-master/tests/test_rotor/test_rotor_mechanism.py": {
        "TestRotorMechanism.get_rotors": {
            "name": "get_rotors",
            "location": 12,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "Set"
                ]
            }
        },
        "TestRotorMechanism.get_rotor_mechanism": {
            "name": "get_rotor_mechanism",
            "location": 16,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "rotors": [
                    "List[dict[Text,Union[Text,int,list[Text]]]]",
                    "str",
                    "float"
                ],
                "reflector": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestRotorMechanism.test_default_position_encoding": {
            "name": "test_default_position_encoding",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRotorMechanism.test_first_rotor_rotates": {
            "name": "test_first_rotor_rotates",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRotorMechanism.test_second_rotor_rotates": {
            "name": "test_second_rotor_rotates",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRotorMechanism.test_rotor_mechanism_without_a_reflector": {
            "name": "test_rotor_mechanism_without_a_reflector",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "enigma-master/tests/test_rotor/test_wiring.py": {
        "TestWiring.test_wiring_pins": {
            "name": "test_wiring_pins",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWiring.test_wiring_to_sting": {
            "name": "test_wiring_to_sting",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "enigma-master/tests/test_rotor/__init__.py": {}
}
{
    "eniric-master/conftest.py": {
        "published_data": {
            "name": "published_data",
            "location": 16,
            "return": [
                "str",
                "int",
                "Generator",
                "pandas.DataFrame",
                "bool"
            ],
            "arguments": {}
        },
        "model_parameters": {
            "name": "model_parameters",
            "location": 31,
            "return": [
                "int",
                "pandas.DataFrame",
                "float"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "test_spec": {
            "name": "test_spec",
            "location": 51,
            "return": [
                "str",
                "Tuple",
                "Tuple[None]"
            ],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "wav_unit": {
            "name": "wav_unit",
            "location": 68,
            "return": [
                "int",
                "pandas.DataFrame",
                "list"
            ],
            "arguments": {
                "request": [
                    "Callable"
                ]
            }
        },
        "flux_unit": {
            "name": "flux_unit",
            "location": 74,
            "return": [
                "int",
                "pandas.DataFrame",
                "list"
            ],
            "arguments": {
                "request": [
                    "Callable"
                ]
            }
        },
        "trans_unit": {
            "name": "trans_unit",
            "location": 80,
            "return": [
                "int",
                "pandas.DataFrame",
                "list"
            ],
            "arguments": {
                "request": [
                    "Callable"
                ]
            }
        },
        "grad_flag": {
            "name": "grad_flag",
            "location": 86,
            "return": [
                "int",
                "pandas.DataFrame",
                "float"
            ],
            "arguments": {
                "request": [
                    "Iterable[int]"
                ]
            }
        },
        "atm_model": {
            "name": "atm_model",
            "location": 98,
            "return": [
                "dict",
                "sphinx.config.Config"
            ],
            "arguments": {
                "request": []
            }
        },
        "atmosphere_fixture": {
            "name": "atmosphere_fixture",
            "location": 104,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "request": [
                    "str"
                ],
                "atm_model": [
                    "str"
                ]
            }
        },
        "short_atmosphere": {
            "name": "short_atmosphere",
            "location": 112,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "atmosphere_fixture": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "sliced_atmmodel_default_mask": {
            "name": "sliced_atmmodel_default_mask",
            "location": 118,
            "return": [
                "Callable",
                "str",
                "numpy.ndarray"
            ],
            "arguments": {
                "request": [],
                "atm_model": [
                    "str",
                    "Dict[str,Any]",
                    "bytes"
                ]
            }
        },
        "testing_spectrum": {
            "name": "testing_spectrum",
            "location": 126,
            "return": [
                "Tuple",
                "str",
                "float"
            ],
            "arguments": {
                "request": [
                    "float",
                    "Dict"
                ],
                "use_test_config": [
                    "str",
                    "bool"
                ]
            }
        },
        "use_test_config": {
            "name": "use_test_config",
            "location": 132,
            "return": [
                "typing.Generator[None]"
            ],
            "arguments": {}
        }
    },
    "eniric-master/setup.py": {},
    "eniric-master/docs/source/conf.py": {},
    "eniric-master/eniric/atmosphere.py": {
        "consecutive_truths": {
            "name": "consecutive_truths",
            "location": 365,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "condition": [
                    "str",
                    "int",
                    "T",
                    "numpy.ndarray"
                ]
            }
        },
        "Atmosphere.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wavelength": [
                    "str",
                    "int",
                    "List[str]",
                    "Tuple[int]",
                    "Optional[str]",
                    "None"
                ],
                "transmission": [
                    "str",
                    "int",
                    "List[str]",
                    "Tuple[int]",
                    "Optional[str]",
                    "None"
                ],
                "mask": [
                    "Optional[str]",
                    "None",
                    "Optional[Callable]",
                    "str",
                    "bool",
                    "Optional[Hashable]",
                    "Callable",
                    "Hashable",
                    "int"
                ],
                "std": [
                    "Optional[float]",
                    "None",
                    "Optional[str]",
                    "float",
                    "int",
                    "Optional[int]",
                    "str",
                    "Optional[Callable]",
                    "Optional[Hashable]",
                    "Callable",
                    "Hashable"
                ],
                "shifted": [
                    "bool",
                    "int",
                    "float"
                ],
                "verbose": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "Atmosphere.from_file": {
            "name": "from_file",
            "location": 100,
            "return": [
                "Atmosphere"
            ],
            "arguments": {
                "cls": [
                    "Type[_TAtmosphere]"
                ],
                "atmmodel": [
                    "str",
                    "int",
                    "List[str]",
                    "Union[List[str],Tuple[str,...]]",
                    "Tuple[Union[str,...]]"
                ]
            }
        },
        "Atmosphere.from_band": {
            "name": "from_band",
            "location": 124,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]",
                "numpy.ndarray"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "band": [
                    "str",
                    "Dict[str,Any]",
                    "Dict",
                    "Dict[str,str]"
                ],
                "bary": [
                    "bool",
                    "str",
                    "Callable"
                ]
            }
        },
        "Atmosphere.to_file": {
            "name": "to_file",
            "location": 170,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str",
                    "int"
                ],
                "header": [
                    "Optional[str]",
                    "None",
                    "Optional[bytes]",
                    "str",
                    "Optional[bool]",
                    "bytes",
                    "Optional[int]",
                    "bool"
                ],
                "fmt": [
                    "Text",
                    "str",
                    "int"
                ]
            }
        },
        "Atmosphere.__getitem__": {
            "name": "__getitem__",
            "location": 198,
            "return": [
                "Atmosphere"
            ],
            "arguments": {
                "self": [
                    "_TAtmosphere@@Atmosphere@@"
                ],
                "item": [
                    "int",
                    "str",
                    "Union[int,slice]"
                ]
            }
        },
        "Atmosphere.at": {
            "name": "at",
            "location": 207,
            "return": [
                "Atmosphere"
            ],
            "arguments": {
                "self": [
                    "_TAtmosphere@@Atmosphere@@"
                ],
                "wave": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Atmosphere.wave_select": {
            "name": "wave_select",
            "location": 231,
            "return": [
                "Atmosphere"
            ],
            "arguments": {
                "self": [
                    "_TAtmosphere@@Atmosphere@@"
                ],
                "wl_min": [
                    "int",
                    "Callable",
                    "str"
                ],
                "wl_max": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Atmosphere.band_select": {
            "name": "band_select",
            "location": 236,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "band": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Atmosphere.copy": {
            "name": "copy",
            "location": 241,
            "return": [
                "Atmosphere"
            ],
            "arguments": {
                "self": [
                    "_TAtmosphere@@Atmosphere@@"
                ]
            }
        },
        "Atmosphere.mask_transmission": {
            "name": "mask_transmission",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "depth": [
                    "float",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Atmosphere.barycenter_broaden": {
            "name": "barycenter_broaden",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rv": [
                    "float",
                    "int",
                    "str",
                    "Optional[int]",
                    "Optional[Set[str]]"
                ],
                "consecutive_test": [
                    "bool",
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Atmosphere.broaden": {
            "name": "broaden",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resolution": [
                    "int",
                    "float",
                    "List[float]",
                    "str",
                    "Callable[numpy.ndarray,numpy.ndarray,float]",
                    "bool",
                    "Callable[[numpy.ndarray,numpy.ndarray],float]"
                ],
                "fwhm_lim": [
                    "int",
                    "float",
                    "List[float]",
                    "bool",
                    "Callable[[numpy.ndarray,numpy.ndarray],float]",
                    "str"
                ],
                "num_procs": [
                    "int",
                    "None",
                    "float",
                    "List[float]",
                    "str",
                    "bool",
                    "Callable[[numpy.ndarray,numpy.ndarray],float]",
                    "Callable[numpy.ndarray,numpy.ndarray,float]"
                ]
            }
        }
    },
    "eniric-master/eniric/broaden.py": {
        "rotational_convolution": {
            "name": "rotational_convolution",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "Iterator",
                "str",
                "float",
                "Dict[str,str]"
            ],
            "arguments": {
                "wavelength": [
                    "bool",
                    "Dict[str,Any]",
                    "List[str]",
                    "int"
                ],
                "extended_wav": [
                    "int",
                    "float",
                    "Iterator",
                    "bool",
                    "Iterator[numpy.ndarray]"
                ],
                "extended_flux": [
                    "int",
                    "float",
                    "Iterator",
                    "bool",
                    "Iterator[numpy.ndarray]"
                ],
                "vsini": [
                    "bool",
                    "str",
                    "List",
                    "Set[str]",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "resolution_convolution": {
            "name": "resolution_convolution",
            "location": 148,
            "return": [
                "Dict[str,str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "wavelength": [
                    "int",
                    "float",
                    "Iterator[numpy.ndarray]",
                    "Iterator"
                ],
                "extended_wav": [
                    "bool",
                    "str",
                    "List",
                    "int",
                    "None",
                    "Optional[str]"
                ],
                "extended_flux": [
                    "bool",
                    "str",
                    "List",
                    "int",
                    "None",
                    "Optional[str]"
                ],
                "R": [
                    "bool",
                    "str",
                    "List",
                    "int",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "convolution": {
            "name": "convolution",
            "location": 254,
            "return": [
                "Tuple[Union[list,int,dict,list[int],list[list[int]],str,Pattern,dict[str,int],list[tuple[Union[Any,Any]]]]]",
                "bytearray",
                "float",
                "numpy.ndarray",
                "str",
                "List[int]"
            ],
            "arguments": {
                "wav": [
                    "int",
                    "float",
                    "List[int]",
                    "Iterator[str]",
                    "Iterator",
                    "Optional[float]",
                    "None"
                ],
                "flux": [
                    "int",
                    "float",
                    "List[int]",
                    "Iterator[str]",
                    "Iterator",
                    "Optional[float]",
                    "None"
                ],
                "vsini": [
                    "float",
                    "int",
                    "str"
                ],
                "R": [
                    "float",
                    "int"
                ],
                "band": [
                    "Text",
                    "int",
                    "float",
                    "numpy.ndarray",
                    "bool"
                ]
            }
        },
        "unitary_gaussian": {
            "name": "unitary_gaussian",
            "location": 356,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "numpy.ndarray"
                ],
                "center": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "Iterable[T]"
                ],
                "fwhm": [
                    "int",
                    "float",
                    "Union[int,slice]",
                    "numpy.ndarray"
                ]
            }
        },
        "rotation_kernel": {
            "name": "rotation_kernel",
            "location": 392,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "delta_lambdas": [
                    "bool",
                    "float",
                    "int",
                    "str"
                ],
                "delta_lambda_l": [
                    "bool",
                    "float",
                    "int",
                    "str"
                ],
                "vsini": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ],
                "epsilon": [
                    "bool"
                ]
            }
        },
        "oned_circle_kernel": {
            "name": "oned_circle_kernel",
            "location": 428,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "numpy.ndarray"
                ],
                "center": [
                    "int",
                    "numpy.ndarray"
                ],
                "fwhm": [
                    "int"
                ]
            }
        },
        "rotational_convolution.element_rot_convolution": {
            "name": "element_rot_convolution",
            "location": 72,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "single_wav": [
                    "int",
                    "List[bytes]",
                    "str"
                ]
            }
        },
        "resolution_convolution.element_res_convolution": {
            "name": "element_res_convolution",
            "location": 189,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "single_wav": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "eniric-master/eniric/corrections.py": {
        "correct_artigau_2018": {
            "name": "correct_artigau_2018",
            "location": 43,
            "return": [
                "float"
            ],
            "arguments": {
                "band": []
            }
        }
    },
    "eniric-master/eniric/io_module.py": {
        "pdread_2col": {
            "name": "pdread_2col",
            "location": 12,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "noheader": [
                    "bool",
                    "str",
                    "IO"
                ]
            }
        },
        "pdread_3col": {
            "name": "pdread_3col",
            "location": 55,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "noheader": [
                    "bool",
                    "str",
                    "IO"
                ]
            }
        },
        "pdread_4col": {
            "name": "pdread_4col",
            "location": 101,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "noheader": [
                    "bool",
                    "str",
                    "IO"
                ]
            }
        },
        "pdwrite_2col": {
            "name": "pdwrite_2col",
            "location": 154,
            "return": [
                "int"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Dict[str,Any]"
                ],
                "data1": [
                    "str",
                    "numpy.ndarray",
                    "Dict[str,str]",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "data2": [
                    "str",
                    "numpy.ndarray",
                    "Dict[str,str]",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "sep": [
                    "Text",
                    "str",
                    "Dict[str,Any]"
                ],
                "header": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Dict[str,np.ndarray]",
                    "Optional[dict]"
                ],
                "float_format": [
                    "str",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "pdwrite_3col": {
            "name": "pdwrite_3col",
            "location": 197,
            "return": [
                "int"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "None",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "data1": [
                    "str",
                    "List[str]",
                    "Dict[str,str]",
                    "Optional[List[str]]",
                    "int",
                    "None",
                    "Dict",
                    "numpy.ndarray",
                    "Dict[str,Any]"
                ],
                "data2": [
                    "str",
                    "List[str]",
                    "Dict[str,str]",
                    "Optional[List[str]]",
                    "int",
                    "None",
                    "Dict",
                    "numpy.ndarray",
                    "Dict[str,Any]"
                ],
                "data3": [
                    "str",
                    "List[str]",
                    "Dict[str,str]",
                    "Optional[List[str]]",
                    "int",
                    "None",
                    "Dict",
                    "numpy.ndarray",
                    "Dict[str,Any]"
                ],
                "sep": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Dict[str,Any]"
                ],
                "header": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[dict]",
                    "Dict"
                ],
                "float_format": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        },
        "pdwrite_cols": {
            "name": "pdwrite_cols",
            "location": 245,
            "return": [
                "int"
            ],
            "arguments": {
                "filename": [
                    "Dict",
                    "Optional[dict]",
                    "Type",
                    "Optional[float]",
                    "None",
                    "float"
                ]
            }
        }
    },
    "eniric-master/eniric/legacy.py": {
        "RVprec_calc_masked": {
            "name": "RVprec_calc_masked",
            "location": 13,
            "return": [
                "float",
                "str",
                "Callable[[Mapping],T]"
            ],
            "arguments": {
                "wavelength": [
                    "float",
                    "str",
                    "Iterable[str]",
                    "Optional[numpy.ndarray]",
                    "Callable",
                    "ndarray"
                ],
                "flux": [
                    "float",
                    "str",
                    "Iterable[str]",
                    "Callable",
                    "None",
                    "Optional[numpy.ndarray]",
                    "ndarray"
                ],
                "mask": [
                    "Optional[str]",
                    "None",
                    "Optional[float]",
                    "str",
                    "Optional[int]",
                    "float",
                    "int"
                ]
            }
        },
        "mask_clumping": {
            "name": "mask_clumping",
            "location": 88,
            "return": [
                "Tuple[(list, list)]"
            ],
            "arguments": {
                "wave": [
                    "int",
                    "str",
                    "Sequence[cirq.Qid]",
                    "Sequence[Q]",
                    "Optional[str]",
                    "None"
                ],
                "flux": [
                    "int",
                    "str",
                    "Sequence[cirq.Qid]",
                    "Sequence[Q]",
                    "Optional[str]",
                    "None"
                ],
                "mask": [
                    "str"
                ]
            }
        },
        "RVprec_calc_weights_masked": {
            "name": "RVprec_calc_weights_masked",
            "location": 126,
            "return": [
                "int",
                "bytearray",
                "Optional[str]",
                "IO"
            ],
            "arguments": {
                "wavelength": [
                    "int",
                    "bytearray",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "flux": [
                    "int",
                    "bytearray",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "mask": [
                    "int",
                    "bytearray",
                    "None",
                    "Optional[str]",
                    "str"
                ]
            }
        }
    },
    "eniric-master/eniric/precision.py": {
        "rv_precision": {
            "name": "rv_precision",
            "location": 66,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "str",
                "Optional[int]",
                "set"
            ],
            "arguments": {
                "wavelength": [
                    "int",
                    "Callable",
                    "str"
                ],
                "flux": [
                    "int",
                    "Callable",
                    "str"
                ],
                "mask": [
                    "int",
                    "Callable",
                    "None",
                    "str"
                ]
            }
        },
        "quality": {
            "name": "quality",
            "location": 94,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "wavelength": [
                    "int",
                    "Callable",
                    "str"
                ],
                "flux": [
                    "str",
                    "float"
                ],
                "mask": [
                    "int",
                    "Callable",
                    "None",
                    "str"
                ]
            }
        },
        "sqrt_sum_wis": {
            "name": "sqrt_sum_wis",
            "location": 132,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "wavelength": [
                    "List[int]",
                    "List[str]",
                    "numpy.ndarray",
                    "list",
                    "int",
                    "Sequence[T]"
                ],
                "flux": [
                    "int",
                    "Callable",
                    "str"
                ],
                "mask": [
                    "bytes",
                    "int",
                    "None",
                    "Tuple"
                ],
                "grad": [
                    "bool",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "mask_check": {
            "name": "mask_check",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "mask": [
                    "Set[str]",
                    "int",
                    "ndarray",
                    "numpy.ndarray"
                ]
            }
        },
        "slope": {
            "name": "slope",
            "location": 203,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "wavelength": [
                    "int",
                    "Callable",
                    "str"
                ],
                "flux": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "pixel_weights": {
            "name": "pixel_weights",
            "location": 225,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "wavelength": [
                    "str",
                    "Union[numpy.ndarray,astropy.units.quantity.Quantity]",
                    "float",
                    "Iterable[str]",
                    "ndarray"
                ],
                "flux": [
                    "None",
                    "float",
                    "Union[numpy.ndarray,astropy.units.quantity.Quantity]",
                    "str",
                    "Iterable[str]",
                    "Optional[numpy.ndarray]",
                    "ndarray"
                ],
                "grad": [
                    "bool",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict"
                ]
            }
        },
        "incremental_quality": {
            "name": "incremental_quality",
            "location": 274,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "wavelength": [
                    "float",
                    "bool",
                    "ndarray",
                    "int"
                ],
                "flux": [
                    "str",
                    "bool",
                    "float",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "incremental_rv": {
            "name": "incremental_rv",
            "location": 331,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "wavelength": [
                    "float",
                    "bool",
                    "ndarray",
                    "int"
                ],
                "flux": [
                    "str",
                    "bool",
                    "float",
                    "int",
                    "Sequence[int]"
                ]
            }
        }
    },
    "eniric-master/eniric/resample.py": {
        "log_resample": {
            "name": "log_resample",
            "location": 8,
            "return": [
                "float",
                "numpy.ndarray",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "wavelength": [
                    "str",
                    "numpy.ndarray",
                    "Tuple[int]",
                    "List[dict[str,Any]]",
                    "int",
                    "List[int]",
                    "List[Dict[str,Any]]"
                ],
                "sampling": [
                    "float",
                    "int",
                    "Union[str,type]",
                    "str",
                    "Type"
                ],
                "resolution": [
                    "float",
                    "int",
                    "Union[str,type]",
                    "str",
                    "Type"
                ]
            }
        },
        "wl_logspace": {
            "name": "wl_logspace",
            "location": 44,
            "return": [
                "Text",
                "Iterable[str]",
                "str",
                "int",
                "numpy.array"
            ],
            "arguments": {
                "start": [
                    "int",
                    "str"
                ],
                "stop": [
                    "int"
                ],
                "base": [
                    "int",
                    "str"
                ],
                "end_point": [
                    "int",
                    "bool"
                ]
            }
        },
        "log_chunks": {
            "name": "log_chunks",
            "location": 73,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {
                "wavelength": [
                    "str",
                    "List[bytes]",
                    "int",
                    "float",
                    "numpy.ndarray",
                    "Iterable[float]"
                ],
                "percent": [
                    "int",
                    "float",
                    "str",
                    "numpy.ndarray",
                    "List[bytes]",
                    "Iterable[float]"
                ]
            }
        }
    },
    "eniric-master/eniric/snr_normalization.py": {
        "snr_constant_band": {
            "name": "snr_constant_band",
            "location": 41,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "wav": [
                    "str",
                    "int",
                    "Generator",
                    "Dict"
                ],
                "flux": [
                    "float",
                    "numpy.ndarray"
                ],
                "snr": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "band": [
                    "Text",
                    "int",
                    "Callable",
                    "str"
                ],
                "sampling": [
                    "float",
                    "numpy.ndarray"
                ],
                "verbose": [
                    "bool",
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "snr_constant_wav": {
            "name": "snr_constant_wav",
            "location": 96,
            "return": [
                "int",
                "str",
                "Callable[[Mapping],T]",
                "List[int]"
            ],
            "arguments": {
                "wav": [
                    "int",
                    "Mapping[str, Tuple[float, float, float]]",
                    "str"
                ],
                "flux": [
                    "Dict[str,Any]",
                    "bool",
                    "float",
                    "int"
                ],
                "wav_ref": [
                    "str",
                    "int",
                    "numpy.ndarray",
                    "Callable[[numpy.ndarray,numpy.ndarray],float]",
                    "bool"
                ],
                "snr": [
                    "int",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.ChannelID",
                    "raiden.utils.Locksroot",
                    "bool",
                    "Callable"
                ],
                "sampling": [
                    "float",
                    "Union[int,float]",
                    "int",
                    "numpy.ndarray",
                    "str",
                    "Callable[[numpy.ndarray,numpy.ndarray],float]",
                    "Optional[numpy.ndarray]"
                ],
                "verbose": [
                    "bool",
                    "Optional[numpy.ndarray]"
                ]
            }
        },
        "sampling_index": {
            "name": "sampling_index",
            "location": 154,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "index": [
                    "int",
                    "str",
                    "Dict[int,numpy.ndarray]",
                    "Tuple[int,int,int]",
                    "Tuple[Union[int,int,int]]"
                ],
                "sampling": [
                    "int",
                    "List[List[int]]",
                    "float",
                    "str",
                    "List[str]"
                ],
                "array_length": [
                    "Optional[int]",
                    "None",
                    "float",
                    "int",
                    "str"
                ]
            }
        }
    },
    "eniric-master/eniric/utilities.py": {
        "band_selector": {
            "name": "band_selector",
            "location": 30,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "wav": [
                    "int",
                    "Callable",
                    "str"
                ],
                "flux": [
                    "int",
                    "Callable",
                    "str"
                ],
                "band": [
                    "str"
                ]
            }
        },
        "band_limits": {
            "name": "band_limits",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "band": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "band_middle": {
            "name": "band_middle",
            "location": 78,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "band": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "wav_selector": {
            "name": "wav_selector",
            "location": 96,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "wav": [
                    "float",
                    "str",
                    "numpy.ndarray",
                    "ndarray"
                ],
                "flux": [
                    "float",
                    "str",
                    "numpy.ndarray",
                    "ndarray"
                ],
                "wav_min": [
                    "int",
                    "Callable",
                    "str"
                ],
                "wav_max": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "mask_between": {
            "name": "mask_between",
            "location": 133,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "bytes",
                    "numpy.ndarray"
                ],
                "xmin": [
                    "float",
                    "int",
                    "bytes",
                    "numpy.ndarray"
                ],
                "xmax": [
                    "float",
                    "int",
                    "bytes",
                    "numpy.ndarray"
                ]
            }
        },
        "silent_remove": {
            "name": "silent_remove",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bool",
                    "IO[str]",
                    "IO"
                ]
            }
        },
        "issequenceforme": {
            "name": "issequenceforme",
            "location": 148,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "str",
                    "float",
                    "Union[Callable,str]",
                    "Callable",
                    "Union[int,List[int]]",
                    "List[int]",
                    "Optional[Any]",
                    "Any",
                    "None"
                ]
            }
        },
        "resolutions2ints": {
            "name": "resolutions2ints",
            "location": 154,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "resolution": [
                    "bytes",
                    "T",
                    "float"
                ]
            }
        },
        "res2int": {
            "name": "res2int",
            "location": 170,
            "return": [
                "int"
            ],
            "arguments": {
                "res": [
                    "int",
                    "str",
                    "Optional[float]"
                ]
            }
        },
        "resolutions2strs": {
            "name": "resolutions2strs",
            "location": 188,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "resolution": [
                    "bytes",
                    "T",
                    "float"
                ]
            }
        },
        "res2str": {
            "name": "res2str",
            "location": 204,
            "return": [
                "str"
            ],
            "arguments": {
                "res": [
                    "int",
                    "float",
                    "Optional[int]",
                    "Optional[float]",
                    "List[int]",
                    "str"
                ]
            }
        },
        "rv_cumulative": {
            "name": "rv_cumulative",
            "location": 225,
            "return": [
                "list"
            ],
            "arguments": {
                "rv_vector": [
                    "str",
                    "bool"
                ],
                "single": [
                    "bool",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict"
                ]
            }
        },
        "rv_cumulative_full": {
            "name": "rv_cumulative_full",
            "location": 246,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "rv_vector": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "weighted_error": {
            "name": "weighted_error",
            "location": 267,
            "return": [
                "float",
                "str",
                "int",
                "Tuple",
                "List[int]",
                "Iterable[numpy.dtype]"
            ],
            "arguments": {
                "rv_vector": [
                    "int",
                    "Dict"
                ]
            }
        },
        "moving_average": {
            "name": "moving_average",
            "location": 275,
            "return": [
                "str",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "x": [
                    "Callable[str,str,float]",
                    "float",
                    "Callable[[str,str],float]",
                    "int",
                    "None",
                    "Optional[numpy.ndarray]",
                    "Tuple[Union[int,int]]",
                    "numpy.ndarray",
                    "Tuple[int,int]"
                ],
                "window_size": [
                    "int",
                    "float",
                    "bytearray",
                    "Sequence[Any]"
                ]
            }
        },
        "load_aces_spectrum": {
            "name": "load_aces_spectrum",
            "location": 282,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "params": [
                    "str",
                    "int",
                    "bytes",
                    "bool",
                    "Dict[str, str]"
                ],
                "photons": [
                    "bool",
                    "str",
                    "List[Dict[str,str]]",
                    "Tuple",
                    "Tuple[float,float]"
                ],
                "air": [
                    "bool",
                    "int",
                    "float",
                    "str",
                    "List[str]"
                ],
                "wl_range": [
                    "Tuple[int]",
                    "int",
                    "float",
                    "str",
                    "List[str]"
                ]
            }
        },
        "load_btsettl_spectrum": {
            "name": "load_btsettl_spectrum",
            "location": 347,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "params": [
                    "dict",
                    "int",
                    "List[str]"
                ],
                "photons": [
                    "bool",
                    "str",
                    "List[Dict[str,str]]",
                    "Tuple",
                    "Tuple[float,float]"
                ],
                "air": [
                    "bool",
                    "int",
                    "float",
                    "str",
                    "List[str]"
                ],
                "wl_range": [
                    "Tuple[int]",
                    "int",
                    "float",
                    "str",
                    "List[str]"
                ]
            }
        },
        "doppler_shift_wav": {
            "name": "doppler_shift_wav",
            "location": 428,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "wavelength": [
                    "numpy.ndarray",
                    "dict"
                ],
                "vel": [
                    "float",
                    "bool",
                    "numpy.ndarray"
                ]
            }
        },
        "doppler_shift_flux": {
            "name": "doppler_shift_flux",
            "location": 458,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "numpy.ndarray",
                "str"
            ],
            "arguments": {
                "wavelength": [
                    "int",
                    "bytes",
                    "float",
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]"
                ],
                "flux": [
                    "int",
                    "Dict[str,Any]",
                    "float",
                    "str",
                    "bool",
                    "numpy.ndarray"
                ],
                "vel": [
                    "bool",
                    "float",
                    "int"
                ],
                "new_wav": [
                    "None"
                ]
            }
        },
        "doppler_limits": {
            "name": "doppler_limits",
            "location": 493,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "rvmax": [
                    "int",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "wmin": [
                    "int",
                    "str",
                    "Callable"
                ],
                "wmax": [
                    "int",
                    "str",
                    "Callable"
                ]
            }
        },
        "cpu_minus_one": {
            "name": "cpu_minus_one",
            "location": 519,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "eniric-master/eniric/_config.py": {
        "Config.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool"
                ]
            }
        },
        "Config.get_pathdir": {
            "name": "get_pathdir",
            "location": 32,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.__contains__": {
            "name": "__contains__",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "Config.__delitem__": {
            "name": "__delitem__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Dict",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "Config.__eq__": {
            "name": "__eq__",
            "location": 44,
            "return": [
                "Dict[str, Dict[str, Any]]",
                "Optional[str]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "Callable",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "Config.__getitem__": {
            "name": "__getitem__",
            "location": 47,
            "return": [
                "str",
                "Mapping[str, str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Dict",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "Config.__setitem__": {
            "name": "__setitem__",
            "location": 50,
            "return": [
                "bool",
                "Dict",
                "List[str]",
                "Type",
                "Set[str]",
                "Dict[int,str]",
                "Dict[str,Any]",
                "Dict[str,str]",
                "str",
                "Pattern",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Dict",
                    "Optional[int]",
                    "None",
                    "bool"
                ],
                "value": [
                    "str",
                    "int",
                    "Dict",
                    "Optional[int]",
                    "None",
                    "bool"
                ]
            }
        },
        "Config.__getattr__": {
            "name": "__getattr__",
            "location": 54,
            "return": [
                "str",
                "int",
                "List[str]",
                "List",
                "Dict[str,Any]",
                "None",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Config.__setattr__": {
            "name": "__setattr__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ],
                "value": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Config._rewrite": {
            "name": "_rewrite",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.update": {
            "name": "update",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "List[Dict]",
                    "None",
                    "Type[Any]",
                    "List[dict]",
                    "Type"
                ]
            }
        },
        "Config.change_file": {
            "name": "change_file",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Config.copy_file": {
            "name": "copy_file",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "switch": [
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "List[str]",
                    "List"
                ]
            }
        }
    },
    "eniric-master/eniric/__init__.py": {},
    "eniric-master/scripts/barycenter_broaden_atmmodel.py": {
        "_parser": {
            "name": "_parser",
            "location": 24,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "bands": [
                    "str",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "int",
                    "Optional[Dict[str,Any]]",
                    "Optional[Dict[str,str]]",
                    "Optional[bool]"
                ],
                "verbose": [
                    "bool",
                    "List[str]",
                    "Optional[Sequence[str]]",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "eniric-master/scripts/csv2tsv.py": {
        "_parser": {
            "name": "_parser",
            "location": 15,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {}
        }
    },
    "eniric-master/scripts/phoenix_precision.py": {
        "_parser": {
            "name": "_parser",
            "location": 40,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {}
        },
        "do_analysis": {
            "name": "do_analysis",
            "location": 169,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "star_params": [
                    "bool",
                    "None",
                    "numpy.ndarray",
                    "Optional[numpy.ndarray]",
                    "int"
                ],
                "vsini": [
                    "float",
                    "str",
                    "int",
                    "Optional[numpy.ndarray]",
                    "None"
                ],
                "R": [
                    "float",
                    "str",
                    "int",
                    "Optional[numpy.ndarray]",
                    "None"
                ],
                "band": [
                    "float",
                    "int",
                    "str",
                    "Optional[numpy.ndarray]",
                    "None"
                ],
                "sampling": [
                    "float",
                    "str",
                    "int",
                    "Optional[numpy.ndarray]"
                ],
                "conv_kwargs": [
                    "int",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "snr": [
                    "float",
                    "bool",
                    "int",
                    "numpy.ndarray",
                    "str"
                ],
                "ref_band": [
                    "Text",
                    "int",
                    "str",
                    "Dict",
                    "bool"
                ],
                "rv": [
                    "float",
                    "bool",
                    "int",
                    "str"
                ],
                "air": [
                    "bool",
                    "numpy.ndarray",
                    "Optional[numpy.ndarray]",
                    "int"
                ],
                "model": [
                    "Text",
                    "bool",
                    "Optional[str]",
                    "str",
                    "int"
                ],
                "verbose": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "convolve_and_resample": {
            "name": "convolve_and_resample",
            "location": 311,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "wav": [
                    "float",
                    "str",
                    "numpy.ndarray",
                    "int",
                    "bytes",
                    "bool"
                ],
                "flux": [
                    "float",
                    "str",
                    "numpy.ndarray",
                    "int",
                    "bytes",
                    "bool"
                ],
                "vsini": [
                    "float",
                    "str",
                    "numpy.ndarray",
                    "int",
                    "bytes",
                    "bool"
                ],
                "R": [
                    "float",
                    "int",
                    "str",
                    "bytes",
                    "numpy.ndarray"
                ],
                "band": [
                    "float",
                    "str",
                    "numpy.ndarray",
                    "int",
                    "bytes",
                    "bool"
                ],
                "sampling": [
                    "float",
                    "str"
                ]
            }
        },
        "model_format_args": {
            "name": "model_format_args",
            "location": 337,
            "return": [
                "Tuple[(int, float, float, float, Any, int, float, float, float)]"
            ],
            "arguments": {
                "model": [],
                "pars": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "header_row": {
            "name": "header_row",
            "location": 362,
            "return": [
                "str"
            ],
            "arguments": {
                "add_rv": [
                    "bool",
                    "str",
                    "MutableSequence[str]",
                    "Set[str]",
                    "Iterable[bytes]"
                ]
            }
        },
        "get_already_computed": {
            "name": "get_already_computed",
            "location": 377,
            "return": [
                "list"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "add_rv": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "str",
                    "List"
                ]
            }
        },
        "is_already_computed": {
            "name": "is_already_computed",
            "location": 393,
            "return": [
                "bool"
            ],
            "arguments": {
                "computed_values": [
                    "Tuple",
                    "str",
                    "Dict[str,Any]",
                    "bool",
                    "numpy.dtype",
                    "Counter",
                    "Optional[int]",
                    "numpy.ndarray"
                ],
                "model": [
                    "Optional[Any]",
                    "Dict",
                    "Any",
                    "str",
                    "None"
                ],
                "pars": [
                    "Optional[Any]",
                    "Dict",
                    "Any",
                    "str",
                    "None"
                ],
                "add_rv": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[List[int]]",
                    "Optional[list]"
                ],
                "correct": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "Optional[float]",
                    "dss.config.Replica"
                ],
                "verbose": [
                    "bool",
                    "numpy.dtype",
                    "Counter",
                    "Optional[int]",
                    "Tuple",
                    "str",
                    "numpy.ndarray",
                    "Dict[str,Any]"
                ]
            }
        },
        "strip_whitespace": {
            "name": "strip_whitespace",
            "location": 431,
            "return": [
                "str"
            ],
            "arguments": {
                "line": [
                    "str",
                    "bytes"
                ]
            }
        },
        "select_csv_columns": {
            "name": "select_csv_columns",
            "location": 435,
            "return": [
                "str"
            ],
            "arguments": {
                "line": [
                    "str",
                    "bytes",
                    "int",
                    "List[str]"
                ],
                "ncols": [
                    "int",
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "check_model": {
            "name": "check_model",
            "location": 452,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "model": [
                    "str",
                    "Union[List,str]",
                    "List",
                    "Union[int,str]",
                    "int"
                ]
            }
        }
    },
    "eniric-master/scripts/precision_four_panel.py": {
        "load_dataframe": {
            "name": "load_dataframe",
            "location": 22,
            "return": [
                "str",
                "bool",
                "pandas._FilePathOrBuffer"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "plot_precision": {
            "name": "plot_precision",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "precision_file": [
                    "str",
                    "bool",
                    "TextIO"
                ],
                "teffs": [
                    "None",
                    "Optional[str]",
                    "bool",
                    "str",
                    "Any",
                    "List[str]",
                    "Optional[int]",
                    "Optional[bool]",
                    "Union[str,os.PathLike,None]"
                ],
                "logg": [
                    "float",
                    "str",
                    "Union[Sequence[str],Sequence[int]]",
                    "Iterable[str]",
                    "Iterable[Dict[str,Any]]",
                    "Optional[str]"
                ],
                "fe_h": [
                    "float",
                    "str",
                    "Union[Sequence[str],Sequence[int]]",
                    "Iterable[str]",
                    "Iterable[Dict[str,Any]]",
                    "Optional[str]"
                ],
                "vsini": [
                    "float",
                    "str",
                    "Dict[int,Dict[int,Any]]",
                    "Exception",
                    "int",
                    "HexpySession",
                    "List[str]",
                    "Dict[str,str]"
                ],
                "sampling": [
                    "int",
                    "str",
                    "Dict[int,Dict[int,Any]]",
                    "Exception",
                    "HexpySession",
                    "List[str]",
                    "Dict[str,str]"
                ]
            }
        },
        "filter_df": {
            "name": "filter_df",
            "location": 243,
            "return": [
                "float",
                "Callable[[None], bool]",
                "pandas.DataFrame",
                "List[str]",
                "int"
            ],
            "arguments": {
                "df": [
                    "numpy.ndarray",
                    "\"Task\"",
                    "Tuple[int, int]",
                    "dict",
                    "float",
                    "List[Dict[str, Any]]",
                    "str"
                ],
                "filter_dict": [
                    "Dict[str,float]",
                    "Dict",
                    "Dict[str,dict]",
                    "Dict[str,str]",
                    "Dict[str,int]",
                    "Dict[str,Any]",
                    "Mapping[str,Mapping[str,Any]]"
                ],
                "drop_list": [
                    "None",
                    "Tuple[numpy.ndarray,numpy.ndarray]",
                    "str",
                    "Tuple[Union[numpy.ndarray,numpy.ndarray]]",
                    "bool",
                    "Dict",
                    "Optional[Iterable[int]]",
                    "List[str]",
                    "Optional[List[str]]",
                    "int"
                ]
            }
        },
        "cumulative_df": {
            "name": "cumulative_df",
            "location": 252,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "df": [
                    "str",
                    "int",
                    "Hashable"
                ],
                "full_cum": [
                    "bool",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict"
                ]
            }
        },
        "cumulative_plot": {
            "name": "cumulative_plot",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "precision_file": [
                    "str",
                    "bool",
                    "TextIO"
                ],
                "teffs": [
                    "None",
                    "Optional[str]",
                    "bool",
                    "str",
                    "Any",
                    "List[str]",
                    "Optional[int]",
                    "Optional[bool]",
                    "Union[str,os.PathLike,None]"
                ],
                "logg": [
                    "float",
                    "str",
                    "bytes"
                ],
                "fe_h": [
                    "float",
                    "str",
                    "bytes"
                ],
                "vsini": [
                    "float",
                    "str",
                    "Dict[int,Dict[int,Any]]",
                    "Exception",
                    "int",
                    "HexpySession",
                    "List[str]",
                    "Dict[str,str]"
                ],
                "sampling": [
                    "int",
                    "str",
                    "Dict[int,Dict[int,Any]]",
                    "Exception",
                    "HexpySession",
                    "List[str]",
                    "Dict[str,str]"
                ],
                "full_cum": [
                    "bool",
                    "str",
                    "TextIO"
                ]
            }
        },
        "_parser": {
            "name": "_parser",
            "location": 515,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {}
        }
    },
    "eniric-master/scripts/split_atmmodel.py": {
        "_parser": {
            "name": "_parser",
            "location": 26,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {}
        },
        "check_positive": {
            "name": "check_positive",
            "location": 70,
            "return": [
                "float"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int",
                    "Hashable",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 101,
            "return": [
                "int"
            ],
            "arguments": {
                "model": [
                    "str",
                    "Optional[str]",
                    "Dict",
                    "Callable"
                ],
                "bands": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "bool",
                    "Optional[bool]",
                    "Optional[List[str]]"
                ],
                "new_name": [
                    "None",
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "Optional[List[str]]"
                ],
                "data_dir": [
                    "Optional[IO[bytes]]",
                    "None",
                    "Optional[str]",
                    "IO",
                    "str"
                ],
                "rv_extend": [
                    "float",
                    "str",
                    "bool",
                    "Optional[str]",
                    "Iterable[str]",
                    "Optional[List[str]]"
                ],
                "cutoff_depth": [
                    "float",
                    "str",
                    "bool",
                    "Optional[str]",
                    "Iterable[str]",
                    "Optional[List[str]]"
                ],
                "verbose": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "eniric-master/scripts/untar_here.py": {
        "_parser": {
            "name": "_parser",
            "location": 16,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {}
        }
    },
    "eniric-master/scripts/__init__.py": {},
    "eniric-master/scripts/download/download_test_aces.py": {
        "_parser": {
            "name": "_parser",
            "location": 17,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {}
        }
    },
    "eniric-master/scripts/download/__init__.py": {},
    "eniric-master/tests/test_atmosphere.py": {
        "test_Atmosphere_funtional_test": {
            "name": "test_Atmosphere_funtional_test",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "short_atmosphere": []
            }
        },
        "test_atmosphere_class": {
            "name": "test_atmosphere_class",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "wave": [
                    "List[numpy.ndarray]",
                    "float",
                    "str",
                    "numpy.ndarray"
                ],
                "transmission": [
                    "List[numpy.ndarray]",
                    "float",
                    "str",
                    "numpy.ndarray"
                ],
                "std": [
                    "List[numpy.ndarray]",
                    "float",
                    "str",
                    "numpy.ndarray"
                ],
                "mask": [
                    "List[numpy.ndarray]",
                    "float",
                    "str",
                    "numpy.ndarray"
                ]
            }
        },
        "test_atmosphere_class_turns_lists_to_arrays": {
            "name": "test_atmosphere_class_turns_lists_to_arrays",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "wave": [
                    "str",
                    "int"
                ],
                "transmission": [],
                "std": [],
                "mask": []
            }
        },
        "test_atmosphere_class_nomask": {
            "name": "test_atmosphere_class_nomask",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "wave": [],
                "transmission": [
                    "str",
                    "numpy.ndarray"
                ]
            }
        },
        "test_atmosphere_from_file": {
            "name": "test_atmosphere_from_file",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "atm_model": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_atmosphere_masking": {
            "name": "test_atmosphere_masking",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "trans": [
                    "List[numpy.ndarray]",
                    "numpy.ndarray",
                    "int",
                    "str"
                ],
                "percent": [
                    "float",
                    "str"
                ]
            }
        },
        "test_values_within_the_rv_of_telluric_lines_are_masked": {
            "name": "test_values_within_the_rv_of_telluric_lines_are_masked",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "sliced_atmmodel_default_mask": [
                    "str",
                    "Callable"
                ],
                "rv": [
                    "bool"
                ]
            }
        },
        "test_atmos_barycenter_shift_mask": {
            "name": "test_atmos_barycenter_shift_mask",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "sliced_atmmodel_default_mask": [
                    "str"
                ],
                "consec_test": []
            }
        },
        "test_consecutive_truths": {
            "name": "test_consecutive_truths",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_atmos_broadening": {
            "name": "test_atmos_broadening",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "atmosphere_fixture": [
                    "str",
                    "float"
                ],
                "resolution": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "test_atmos_broadening_reduces_number_of_masked_points": {
            "name": "test_atmos_broadening_reduces_number_of_masked_points",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "atmosphere_fixture": [],
                "resolution": [
                    "int"
                ]
            }
        },
        "test_Atmosphere_has_getitem": {
            "name": "test_Atmosphere_has_getitem",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_Atmosphere_sliceable": {
            "name": "test_Atmosphere_sliceable",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "short_atmosphere": [
                    "str",
                    "float"
                ]
            }
        },
        "test_Atmosphere_copyable": {
            "name": "test_Atmosphere_copyable",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "short_atmosphere": [
                    "str",
                    "float"
                ]
            }
        },
        "test_Atmosphere_copyable_attr": {
            "name": "test_Atmosphere_copyable_attr",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_Atmosphere_band_select": {
            "name": "test_Atmosphere_band_select",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_from_band_is_a_constructor": {
            "name": "test_from_band_is_a_constructor",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "band": [
                    "int",
                    "str",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        }
    },
    "eniric-master/tests/test_broaden.py": {
        "test_rotational_kernel": {
            "name": "test_rotational_kernel",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "delta_lambdas": [
                    "List[str]",
                    "int"
                ],
                "vsini": [
                    "str",
                    "float"
                ],
                "epsilon": [
                    "str",
                    "float"
                ]
            }
        },
        "test_unitary_gaussian": {
            "name": "test_unitary_gaussian",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "float",
                    "Sequence[cirq.Qid]",
                    "int",
                    "Dict"
                ],
                "center": [
                    "float",
                    "List[float]",
                    "int"
                ],
                "fwhm": [
                    "float",
                    "int",
                    "Callable",
                    "Union[int,float]"
                ]
            }
        },
        "test_unitary_gaussian_type_errors": {
            "name": "test_unitary_gaussian_type_errors",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_convolution_can_accept_int": {
            "name": "test_convolution_can_accept_int",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "num_proc": [
                    "List[Dict[str,Any]]",
                    "str",
                    "List[dict[str,Any]]",
                    "bool"
                ]
            }
        },
        "test_rot_convolution_can_accept_int": {
            "name": "test_rot_convolution_can_accept_int",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "num_proc": [
                    "int",
                    "bool",
                    "numpy.ndarray"
                ]
            }
        },
        "test_res_convolution_can_accept_int": {
            "name": "test_res_convolution_can_accept_int",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "num_proc": [
                    "str",
                    "int",
                    "Dict[str,str]",
                    "Dict",
                    "List"
                ]
            }
        },
        "test_convolution_can_accept_worker_pool": {
            "name": "test_convolution_can_accept_worker_pool",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "num_proc": [
                    "int",
                    "Sequence[int]",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "test_rot_convolution_can_accept_worker_pool": {
            "name": "test_rot_convolution_can_accept_worker_pool",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "num_proc": [
                    "int",
                    "Sequence[int]",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "test_res_convolution_can_accept_worker_pool": {
            "name": "test_res_convolution_can_accept_worker_pool",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "num_proc": [
                    "int",
                    "Sequence[int]",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "test_rot_convolution_with_bad_num_proc": {
            "name": "test_rot_convolution_with_bad_num_proc",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "num_proc": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_res_convolution_with_bad_num_proc": {
            "name": "test_res_convolution_with_bad_num_proc",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "num_proc": [
                    "int",
                    "Sequence[int]",
                    "bool"
                ]
            }
        },
        "test_convolution_can_accept_None": {
            "name": "test_convolution_can_accept_None",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rot_convolution_can_accept_None": {
            "name": "test_rot_convolution_can_accept_None",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_res_convolution_can_accept_None": {
            "name": "test_res_convolution_can_accept_None",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_zero_rotation": {
            "name": "test_zero_rotation",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "zero_vsini": [
                    "int",
                    "str",
                    "float",
                    "Union[int,float]"
                ]
            }
        },
        "test_zero_rotation_with_different_x": {
            "name": "test_zero_rotation_with_different_x",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "zero_vsini": [
                    "float",
                    "int",
                    "str",
                    "List[numpy.ndarray]",
                    "Union[int,float]"
                ]
            }
        }
    },
    "eniric-master/tests/test_config.py": {
        "TestConfig.test_config": {
            "name": "test_config",
            "location": 15,
            "return": [
                "typing.Generator[Config]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_default_filename": {
            "name": "test_default_filename",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_base_dots": {
            "name": "test_base_dots",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_default_paths_keys": {
            "name": "test_default_paths_keys",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "values": [
                    "str"
                ]
            }
        },
        "TestConfig.test_paths_keys": {
            "name": "test_paths_keys",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_config": [
                    "str"
                ],
                "key": [
                    "str"
                ],
                "values": [
                    "str"
                ]
            }
        },
        "TestConfig.test_paths": {
            "name": "test_paths",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_cache": {
            "name": "test_cache",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_atmmodel": {
            "name": "test_atmmodel",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_config": [
                    "bool"
                ]
            }
        },
        "TestConfig.test_default_bands": {
            "name": "test_default_bands",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_bands": {
            "name": "test_bands",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_config": [
                    "Dict"
                ]
            }
        },
        "TestConfig.test_custom_bands": {
            "name": "test_custom_bands",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_change_file": {
            "name": "test_change_file",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_set_attr_fail_on_default": {
            "name": "test_set_attr_fail_on_default",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_set_base_attr": {
            "name": "test_set_base_attr",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_config": [
                    "Type",
                    "robotica.types.Config",
                    "Dict",
                    "Dict[str,Any]",
                    "Type[BaseConfig]"
                ]
            }
        },
        "TestConfig.test_set_non_base_attr": {
            "name": "test_set_non_base_attr",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_config": [
                    "Dict[str,Any]",
                    "tbump.config.Config"
                ]
            }
        },
        "TestConfig.test_copy_config": {
            "name": "test_copy_config",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "str",
                    "int",
                    "dss.config.Replica"
                ],
                "switch": []
            }
        },
        "TestConfig.test_lazy_load": {
            "name": "test_lazy_load",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_config": [
                    "model.Config",
                    "entity_embeddings.Config"
                ]
            }
        },
        "TestConfig.test_pathdir": {
            "name": "test_pathdir",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_pathdir_getter": {
            "name": "test_pathdir_getter",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_update_config_with_None": {
            "name": "test_update_config_with_None",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_update_test_config_with_None": {
            "name": "test_update_test_config_with_None",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_config": []
            }
        },
        "TestConfig.test_update_test_config_with_dict": {
            "name": "test_update_test_config_with_dict",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_config": [
                    "backup.config.Config"
                ]
            }
        },
        "TestConfig.test_update_with_kwargs": {
            "name": "test_update_with_kwargs",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_config": [
                    "Dict",
                    "backup.config.Config",
                    "str",
                    "List[str]",
                    "sphinx.config.Config"
                ]
            }
        },
        "TestConfig.test_delitem": {
            "name": "test_delitem",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_config": [
                    "str",
                    "Dict",
                    "bool",
                    "Optional[str]"
                ],
                "key": [
                    "bool",
                    "str",
                    "Dict",
                    "Optional[str]"
                ]
            }
        }
    },
    "eniric-master/tests/test_corrections.py": {
        "test_bands_in_correction": {
            "name": "test_bands_in_correction",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "band": [
                    "str",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "test_bands_not_in_correction": {
            "name": "test_bands_not_in_correction",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "band": [
                    "Dict"
                ]
            }
        },
        "test_corection_specific_values": {
            "name": "test_corection_specific_values",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "band": [
                    "str",
                    "Callable[[str],bool]",
                    "Callable[str,bool]"
                ],
                "value": [
                    "str",
                    "Callable[[str],bool]",
                    "Callable[str,bool]"
                ]
            }
        }
    },
    "eniric-master/tests/test_eniric_scripts.py": {
        "test_check_positive": {
            "name": "test_check_positive",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_check_positive_errors": {
            "name": "test_check_positive_errors",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "val": [],
                "error": []
            }
        }
    },
    "eniric-master/tests/test_legacy.py": {
        "test_RV_prec_masked": {
            "name": "test_RV_prec_masked",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "test_spec": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "test_mask_clumping_of_mask": {
            "name": "test_mask_clumping_of_mask",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "mask": []
            }
        },
        "test_manual_clumping": {
            "name": "test_manual_clumping",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_legacy_RV_warns_nonfinite": {
            "name": "test_legacy_RV_warns_nonfinite",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "grad_flag": [
                    "float",
                    "numpy.ndarray",
                    "List",
                    "Sequence[cirq.Qid]",
                    "Tuple[Union[float,float,float]]",
                    "Tuple[float,float,float]"
                ]
            }
        },
        "test_weights_clumping_grad": {
            "name": "test_weights_clumping_grad",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "testing_spectrum": [
                    "List[str]",
                    "str"
                ],
                "grad_flag": [
                    "str",
                    "Callable",
                    "Dict[int,Dict[int,Any]]",
                    "int",
                    "Dict[int,dict[int,Any]]"
                ],
                "band": [
                    "str"
                ]
            }
        }
    },
    "eniric-master/tests/test_phoenix_precision.py": {
        "test_strp_space": {
            "name": "test_strp_space",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "initial": [
                    "str",
                    "Dict[str,Any]"
                ],
                "expected": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "test_select_csv_columns": {
            "name": "test_select_csv_columns",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_select_csv_columns_with_ncols": {
            "name": "test_select_csv_columns_with_ncols",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "initial": [
                    "str",
                    "List[str]"
                ],
                "ncols": [
                    "str",
                    "List[str]"
                ],
                "expected": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_check_model": {
            "name": "test_check_model",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "model_in": [
                    "str",
                    "bytes",
                    "List[str]"
                ],
                "expected_model": [
                    "str",
                    "Type[Exception]",
                    "Type"
                ]
            }
        },
        "test_model_depreciation": {
            "name": "test_model_depreciation",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_check_model_error": {
            "name": "test_check_model_error",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "invalid_model": [
                    "Type",
                    "str"
                ]
            }
        }
    },
    "eniric-master/tests/test_precision.py": {
        "test_rvprev_calc": {
            "name": "test_rvprev_calc",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "test_spec": [
                    "str"
                ],
                "wav_unit": [
                    "List[str]",
                    "str"
                ],
                "flux_unit": [
                    "List[str]",
                    "str"
                ],
                "trans_unit": [
                    "str"
                ]
            }
        },
        "test_rvprev_calc_with_lists": {
            "name": "test_rvprev_calc_with_lists",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "test_spec": [
                    "str"
                ]
            }
        },
        "test_sqrt_sum_wis_with_no_units": {
            "name": "test_sqrt_sum_wis_with_no_units",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "test_spec": [
                    "str"
                ]
            }
        },
        "test_sqrt_sum_wis": {
            "name": "test_sqrt_sum_wis",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "test_spec": [
                    "str"
                ],
                "wav_unit": [
                    "List[str]",
                    "str"
                ],
                "flux_unit": [
                    "List[str]",
                    "str"
                ],
                "trans_unit": [
                    "str"
                ]
            }
        },
        "test_relation_of_rv_to_sqrtsumwis": {
            "name": "test_relation_of_rv_to_sqrtsumwis",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "test_spec": [
                    "str"
                ],
                "wav_unit": [
                    "str"
                ],
                "flux_unit": [
                    "str"
                ],
                "trans_unit": []
            }
        },
        "test_transmission_reduces_precision": {
            "name": "test_transmission_reduces_precision",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "test_spec": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "test_both_gradients_possible": {
            "name": "test_both_gradients_possible",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "test_spec": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "test_quality_independent_of_flux_level": {
            "name": "test_quality_independent_of_flux_level",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "scale": []
            }
        },
        "test_quality_independent_of_units": {
            "name": "test_quality_independent_of_units",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "test_spec": [
                    "str",
                    "List[str]",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "wav_unit": [
                    "List[str]",
                    "str"
                ],
                "flux_unit": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "test_pixel_weights_gradient_with_fixed_values": {
            "name": "test_pixel_weights_gradient_with_fixed_values",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "wave": [
                    "Iterable[Tuple[int, int]]",
                    "Callable"
                ],
                "flux": [
                    "Iterable[Tuple[int, int]]",
                    "Callable"
                ],
                "expected": [
                    "Callable",
                    "str",
                    "Dict[str,Any]"
                ],
                "wav_unit2": [
                    "Iterable[Tuple[int, int]]",
                    "Callable"
                ],
                "flux_unit2": [
                    "Iterable[Tuple[int, int]]",
                    "Callable"
                ],
                "quantity": []
            }
        },
        "test_pixel_weights": {
            "name": "test_pixel_weights",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "wave": [
                    "str",
                    "int"
                ],
                "flux": [
                    "str",
                    "int"
                ],
                "expected": [
                    "str",
                    "Callable"
                ],
                "wav_unit2": [
                    "str",
                    "int"
                ],
                "flux_unit2": [
                    "str",
                    "int"
                ],
                "quantity": [
                    "str",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]"
                ]
            }
        },
        "test_mask_check": {
            "name": "test_mask_check",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "mask": [
                    "str",
                    "float"
                ]
            }
        },
        "test_mask_check_type_error": {
            "name": "test_mask_check_type_error",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "mask": [
                    "Type"
                ]
            }
        },
        "test_sqrt_sum_wis_with_mask_with_unit_fails": {
            "name": "test_sqrt_sum_wis_with_mask_with_unit_fails",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "test_spec": [
                    "str",
                    "List[str]",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]",
                    "Mapping[str,Any]"
                ],
                "wav_unit": [
                    "List[str]",
                    "str"
                ],
                "flux_unit": [
                    "List[str]",
                    "str"
                ],
                "trans_unit2": [
                    "int",
                    "bool"
                ]
            }
        },
        "test_sqrt_sum_wis_transmission_outofbounds": {
            "name": "test_sqrt_sum_wis_transmission_outofbounds",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "test_spec": [
                    "str",
                    "List[str]",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]",
                    "Mapping[str,Any]"
                ],
                "wav_unit": [
                    "List[str]",
                    "str"
                ],
                "flux_unit": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "test_sqrtsumwis_warns_nonfinite": {
            "name": "test_sqrtsumwis_warns_nonfinite",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "grad_flag": [
                    "int",
                    "Sequence[Q]",
                    "numpy.ndarray",
                    "Sequence[cirq.Qid]"
                ]
            }
        },
        "increment_percent": {
            "name": "increment_percent",
            "location": 287,
            "return": [
                "int",
                "list"
            ],
            "arguments": {
                "request": [
                    "Callable"
                ]
            }
        },
        "real_spec": {
            "name": "real_spec",
            "location": 292,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "use_test_config": [
                    "int",
                    "str",
                    "Dict",
                    "float",
                    "bool"
                ]
            }
        },
        "test_increment_quality_gives_reasonable_length": {
            "name": "test_increment_quality_gives_reasonable_length",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "real_spec": [
                    "str"
                ],
                "increment_percent": [
                    "Union[int,float]",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "test_increments_rv_gives_reasonable_length": {
            "name": "test_increments_rv_gives_reasonable_length",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "real_spec": [
                    "str",
                    "float"
                ],
                "increment_percent": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_increments_rv_accumulate_same_as_full": {
            "name": "test_increments_rv_accumulate_same_as_full",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "real_spec": [],
                "increment_percent": [],
                "no_mask": []
            }
        }
    },
    "eniric-master/tests/test_read_write.py": {
        "test_write_read_2col": {
            "name": "test_write_read_2col",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ]
            }
        },
        "test_write_read_3col": {
            "name": "test_write_read_3col",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ]
            }
        },
        "test_pdwrire_cols": {
            "name": "test_pdwrire_cols",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "Iterable[numpy.dtype]",
                    "Callable"
                ]
            }
        },
        "test_write_col_errors_different_length": {
            "name": "test_write_col_errors_different_length",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "int"
                ]
            }
        },
        "test_write_col_errors": {
            "name": "test_write_col_errors",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "int"
                ]
            }
        },
        "test_write_col_errors_bad_keyword": {
            "name": "test_write_col_errors_bad_keyword",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "eniric-master/tests/test_resample.py": {
        "test_log_resample": {
            "name": "test_log_resample",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "wav_start": [
                    "int",
                    "str",
                    "bool"
                ],
                "wav_stop": [
                    "int",
                    "str",
                    "bool"
                ],
                "sampling": [
                    "List[float]"
                ],
                "resolution": [
                    "List[float]"
                ]
            }
        },
        "logspace_params": {
            "name": "logspace_params",
            "location": 24,
            "return": [
                "int",
                "list"
            ],
            "arguments": {
                "request": [
                    "Callable"
                ]
            }
        },
        "test_wl_logspace_endpoint": {
            "name": "test_wl_logspace_endpoint",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "logspace_params": []
            }
        },
        "test_wl_logspace_increases_by_bnd": {
            "name": "test_wl_logspace_increases_by_bnd",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "logspace_params": []
            }
        }
    },
    "eniric-master/tests/test_snr_normalization.py": {
        "test_snr_normalization": {
            "name": "test_snr_normalization",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "desired_snr": [
                    "Dict[str,Any]"
                ],
                "band": [
                    "int",
                    "str"
                ],
                "testing_spectrum": []
            }
        },
        "test_snr_normalization_constant": {
            "name": "test_snr_normalization_constant",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "desired_snr": [
                    "int",
                    "str"
                ],
                "band": [
                    "int",
                    "str"
                ],
                "testing_spectrum": []
            }
        },
        "test_band_snr_norm": {
            "name": "test_band_snr_norm",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "testing_spectrum": [
                    "List[str]",
                    "str"
                ],
                "sampling": [
                    "bool"
                ]
            }
        },
        "test_sampling_index": {
            "name": "test_sampling_index",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sampling_size_and_type": {
            "name": "test_sampling_size_and_type",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "sample": [
                    "str"
                ]
            }
        },
        "test_sampling_index_array": {
            "name": "test_sampling_index_array",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_snr_constant_band_returns_mid_value_const": {
            "name": "test_snr_constant_band_returns_mid_value_const",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "band": [
                    "Dict"
                ]
            }
        },
        "test_snr_normalization_logic": {
            "name": "test_snr_normalization_logic",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "band": [
                    "bool",
                    "str"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "test_snr_constant_band_with_invalid_wavelength": {
            "name": "test_snr_constant_band_with_invalid_wavelength",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "wav": [
                    "str",
                    "float"
                ],
                "band": [
                    "str",
                    "float"
                ]
            }
        },
        "test_snr_constant_wav_ref_outside_wav": {
            "name": "test_snr_constant_wav_ref_outside_wav",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "wav_ref": []
            }
        }
    },
    "eniric-master/tests/test_utilities.py": {
        "test_wav_selector": {
            "name": "test_wav_selector",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ],
                "wav_min": [
                    "float"
                ],
                "wav_max": [
                    "float"
                ]
            }
        },
        "test_band_limits": {
            "name": "test_band_limits",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "band": [
                    "str",
                    "float"
                ]
            }
        },
        "test_band_selector": {
            "name": "test_band_selector",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "band": [
                    "str",
                    "float"
                ]
            }
        },
        "test_band_limits_raises_errors": {
            "name": "test_band_limits_raises_errors",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "band": [
                    "str"
                ],
                "error": [
                    "str"
                ]
            }
        },
        "test_band_selector_raises_errors": {
            "name": "test_band_selector_raises_errors",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "band": [
                    "str"
                ],
                "error": [
                    "str"
                ]
            }
        },
        "test_band_selector_with_no_selection": {
            "name": "test_band_selector_with_no_selection",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "band": []
            }
        },
        "test_band_middle": {
            "name": "test_band_middle",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "band": [
                    "str",
                    "Set"
                ]
            }
        },
        "test_band_midpoint_j": {
            "name": "test_band_midpoint_j",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_silent_remove": {
            "name": "test_silent_remove",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_res2int": {
            "name": "test_res2int",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "resolution": [
                    "str",
                    "int",
                    "numpy.array",
                    "bool"
                ],
                "result": [
                    "str",
                    "int",
                    "numpy.array",
                    "bool"
                ]
            }
        },
        "test_res2str": {
            "name": "test_res2str",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "resolution": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "result": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "test_resolutions2ints_lists": {
            "name": "test_resolutions2ints_lists",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "resolutions": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "results": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_resolutions2strs_list": {
            "name": "test_resolutions2strs_list",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "resolutions": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "results": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_res2int_doesnt_change_int": {
            "name": "test_res2int_doesnt_change_int",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "resolution": [
                    "str",
                    "int",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "test_compatibility_res2int_res2str": {
            "name": "test_compatibility_res2int_res2str",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "resolution": [
                    "int"
                ]
            }
        },
        "test_compatibility_resolutions2ints_resolutions2strs": {
            "name": "test_compatibility_resolutions2ints_resolutions2strs",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "resolution": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_res2int_fails_on_list": {
            "name": "test_res2int_fails_on_list",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "resolutions": [
                    "List[Dict[str,Any]]",
                    "str",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "test_resolutions2ints_fails_on_single": {
            "name": "test_resolutions2ints_fails_on_single",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "resolutions": [
                    "str",
                    "float"
                ]
            }
        },
        "test_res2str_fails_on_list": {
            "name": "test_res2str_fails_on_list",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "resolutions": [
                    "bool"
                ]
            }
        },
        "test_resolutions2strs_fails_on_single": {
            "name": "test_resolutions2strs_fails_on_single",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "resolutions": [
                    "str",
                    "float"
                ]
            }
        },
        "test_mask_between": {
            "name": "test_mask_between",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "float",
                    "List[float]"
                ],
                "x1": [
                    "float",
                    "int"
                ],
                "x2": [
                    "float",
                    "int"
                ]
            }
        },
        "test_rv_cumulative": {
            "name": "test_rv_cumulative",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "input_": [],
                "flag": [
                    "Callable[...,Awaitable]",
                    "Callable[...,collections.abc.Awaitable]"
                ]
            }
        },
        "test_rv_cumulative_full": {
            "name": "test_rv_cumulative_full",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "input_": []
            }
        },
        "test_rv_cumulative_full_errors_on_size": {
            "name": "test_rv_cumulative_full_errors_on_size",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "input_": [
                    "str"
                ]
            }
        },
        "test_moving_average_size": {
            "name": "test_moving_average_size",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "window_size": [
                    "float",
                    "List[Tuple[int,int]]",
                    "Dict[str,Any]",
                    "List[tuple[Union[int,int]]]",
                    "List",
                    "Tuple[int,int]",
                    "int",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "test_weighted_error": {
            "name": "test_weighted_error",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "input_": [
                    "str",
                    "int",
                    "numpy.ndarray",
                    "Union[int,str]"
                ],
                "expected": [
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "Union[utils.CWLObjectType,MutableSequence[utils.CWLObjectType],None]",
                    "MutableSequence",
                    "None"
                ]
            }
        },
        "wavelength": {
            "name": "wavelength",
            "location": 364,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_doppler_shift_at_speed_of_light": {
            "name": "test_doppler_shift_at_speed_of_light",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "wavelength": [
                    "Union[int,float]",
                    "int",
                    "Sequence[Union[int,float]]",
                    "str",
                    "float",
                    "Union[Tuple[int],Tuple[int,int]]",
                    "Tuple[int]"
                ],
                "direction": [
                    "float",
                    "Union[int,float]",
                    "int"
                ],
                "multiplier": [
                    "bool",
                    "float",
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "doppler_shift_zero": {
            "name": "doppler_shift_zero",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "wavelength": [
                    "int",
                    "List",
                    "str"
                ]
            }
        },
        "test_if_doppler_shift_changes_quality": {
            "name": "test_if_doppler_shift_changes_quality",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {
                "testing_spectrum": [
                    "List[str]",
                    "str"
                ],
                "rv": [
                    "Dict[str,Any]",
                    "raiden.utils.TokenNetworkRegistryAddress"
                ]
            }
        },
        "test_doppler_limits": {
            "name": "test_doppler_limits",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {
                "rv": [
                    "bool"
                ],
                "wmin": [
                    "int"
                ],
                "wmax": [
                    "int"
                ]
            }
        },
        "test_doppler_limits_rv_0": {
            "name": "test_doppler_limits_rv_0",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {
                "wmin": [
                    "int"
                ],
                "wmax": [
                    "int"
                ]
            }
        },
        "test_load_btsettl_spectrum": {
            "name": "test_load_btsettl_spectrum",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "photons": [
                    "bool"
                ],
                "use_test_config": [
                    "Callable",
                    "Dict[str,Any]",
                    "int"
                ]
            }
        },
        "test_invalid_feh_alpha_load_btsettl_spectrum": {
            "name": "test_invalid_feh_alpha_load_btsettl_spectrum",
            "location": 441,
            "return": [
                "None"
            ],
            "arguments": {
                "params": []
            }
        },
        "test_load_aces_spectrum": {
            "name": "test_load_aces_spectrum",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {
                "photons": [
                    "bool"
                ],
                "use_test_config": [
                    "Callable",
                    "Dict[str,Any]",
                    "int"
                ]
            }
        },
        "test_invalid_load_aces_spectrum": {
            "name": "test_invalid_load_aces_spectrum",
            "location": 467,
            "return": [
                "None"
            ],
            "arguments": {
                "params": []
            }
        },
        "test_invalid_load_btsettl_spectrum": {
            "name": "test_invalid_load_btsettl_spectrum",
            "location": 474,
            "return": [
                "None"
            ],
            "arguments": {
                "params": []
            }
        }
    },
    "eniric-master/tests/__init__.py": {}
}
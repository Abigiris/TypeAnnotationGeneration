{
    "ennead-master/setup.py": {},
    "ennead-master/ennead/app.py": {
        "inject_user": {
            "name": "inject_user",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "create_app": {
            "name": "create_app",
            "location": 34,
            "return": [
                "flask.Flask",
                "Flask"
            ],
            "arguments": {
                "config_path": [
                    "Optional[str]"
                ]
            }
        }
    },
    "ennead-master/ennead/config.py": {
        "Config.from_filename": {
            "name": "from_filename",
            "location": 30,
            "return": [
                "Config"
            ],
            "arguments": {
                "cls": [
                    "Type[_TConfig]"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "Config.from_env": {
            "name": "from_env",
            "location": 41,
            "return": [
                "Config"
            ],
            "arguments": {
                "cls": [
                    "Type[_TConfig]"
                ]
            }
        },
        "Config.DB_CLASS": {
            "name": "DB_CLASS",
            "location": 66,
            "return": [
                "str",
                "int",
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ennead-master/ennead/__init__.py": {},
    "ennead-master/ennead/models/base.py": {},
    "ennead-master/ennead/models/file.py": {
        "File.path": {
            "name": "path",
            "location": 32,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.from_data": {
            "name": "from_data",
            "location": 38,
            "return": [
                "File"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFile]"
                ],
                "directory": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "data": [
                    "bytes"
                ],
                "user": [
                    "ennead.models.user.User"
                ]
            }
        }
    },
    "ennead-master/ennead/models/task.py": {
        "Task.html_description": {
            "name": "html_description",
            "location": 50,
            "return": [
                "Optional[int]",
                "bool",
                "Optional[bool]",
                "int",
                "Optional[List[Any]]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ennead-master/ennead/models/thread.py": {},
    "ennead-master/ennead/models/user.py": {
        "User._hash_password": {
            "name": "_hash_password",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str"
                ]
            }
        },
        "User.set_password": {
            "name": "set_password",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_password": [
                    "str"
                ]
            }
        },
        "User.check_password": {
            "name": "check_password",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str"
                ]
            }
        },
        "User.is_teacher": {
            "name": "is_teacher",
            "location": 79,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.score": {
            "name": "score",
            "location": 85,
            "return": [
                "bool",
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ennead-master/ennead/models/__init__.py": {},
    "ennead-master/ennead/utils/markdown.py": {
        "render_markdown": {
            "name": "render_markdown",
            "location": 94,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "markdown": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "DisallowHTML.extendMarkdown": {
            "name": "extendMarkdown",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "BetterImages.handleMatch": {
            "name": "handleMatch",
            "location": 23,
            "return": [
                "tuple[typing.Union[typing.Type,str,dict[, ],int,typing.Pattern,float,tuple[typing.Union[int,int,int]],list[int],typing.Match,None]]",
                "Dict[str, Any]",
                "int",
                "Iterable[int]"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "Optional[Exception]",
                    "Exception",
                    "List[str]",
                    "None",
                    "int",
                    "Optional[str]",
                    "list[str]",
                    "AsyncGenerator",
                    "str",
                    "collections.abc.AsyncGenerator"
                ],
                "data": [
                    "Optional[Exception]",
                    "Exception",
                    "List[str]",
                    "None",
                    "int",
                    "Optional[str]",
                    "list[str]",
                    "AsyncGenerator",
                    "str",
                    "collections.abc.AsyncGenerator"
                ]
            }
        },
        "DictCache.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictCache.set": {
            "name": "set",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[int]",
                    "None",
                    "Union[str, int]"
                ],
                "value": [
                    "str",
                    "Optional[int]",
                    "int",
                    "bytes",
                    "Union[str, int]"
                ]
            }
        },
        "DictCache.get": {
            "name": "get",
            "location": 47,
            "return": [
                "str",
                "None",
                "typing.Any",
                "Dict[int, str]",
                "int",
                "Mapping",
                "dict"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str",
                    "int",
                    "dict[, ]",
                    "dict",
                    "VT"
                ],
                "default": [
                    "str",
                    "None",
                    "Optional[Any]",
                    "typing.Any"
                ]
            }
        },
        "CachedMarkdown.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CachedMarkdown.render": {
            "name": "render",
            "location": 73,
            "return": [
                "str",
                "int",
                "typing.Type",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "markdown": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "ennead-master/ennead/utils/__init__.py": {
        "require_logged_in": {
            "name": "require_logged_in",
            "location": 15,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": [
                    "Callable"
                ]
            }
        },
        "require_not_logged_in": {
            "name": "require_not_logged_in",
            "location": 27,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": [
                    "Callable"
                ]
            }
        },
        "require_teacher": {
            "name": "require_teacher",
            "location": 39,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": [
                    "Callable"
                ]
            }
        },
        "require_logged_in.wrapped": {
            "name": "wrapped",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "require_not_logged_in.wrapped": {
            "name": "wrapped",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "require_teacher.wrapped": {
            "name": "wrapped",
            "location": 44,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {}
        }
    },
    "ennead-master/ennead/views/admin.py": {
        "adm_task_list_page": {
            "name": "adm_task_list_page",
            "location": 11,
            "return": [
                "dict",
                "salon.models.Stylist",
                "services.ticketing.models.ticket_evenTicketEvent",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "task_edit_page": {
            "name": "task_edit_page",
            "location": 18,
            "return": [
                "str",
                "purplship.providers.purolator.utils.Settings",
                "dict"
            ],
            "arguments": {
                "task_id": [
                    "str",
                    "int",
                    "transfer.models.OrderID",
                    "None",
                    "golem.task.TaskId",
                    "golem.task.SubtaskId",
                    "Optional[int]"
                ]
            }
        },
        "task_edit": {
            "name": "task_edit",
            "location": 30,
            "return": [
                "int",
                "cmk.utils.type_defs.UserId",
                "Callable",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "task_delete": {
            "name": "task_delete",
            "location": 60,
            "return": [
                "str",
                "bool",
                "int",
                "models.Dashboard",
                "Optional[Dict]"
            ],
            "arguments": {
                "task_id": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "ennead-master/ennead/views/auth.py": {
        "register_page": {
            "name": "register_page",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "register": {
            "name": "register",
            "location": 25,
            "return": [
                "Dict[str, Any]",
                "Response",
                "str",
                "int",
                "aiolambda.Maybe[auth.user.User]"
            ],
            "arguments": {}
        },
        "login_page": {
            "name": "login_page",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "login": {
            "name": "login",
            "location": 71,
            "return": [
                "Dict[str, Any]",
                "Response",
                "str",
                "int",
                "aiolambda.Maybe[auth.user.User]"
            ],
            "arguments": {}
        },
        "logout": {
            "name": "logout",
            "location": 89,
            "return": [
                "str",
                "Dict[str, str]",
                "bool",
                "int"
            ],
            "arguments": {}
        }
    },
    "ennead-master/ennead/views/file.py": {
        "uploaded_file": {
            "name": "uploaded_file",
            "location": 10,
            "return": [
                "str",
                "bool",
                "dict",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "upload_file": {
            "name": "upload_file",
            "location": 17,
            "return": [
                "Response",
                "str",
                "dict",
                "Optional[MutableMapping[Any, Any]]"
            ],
            "arguments": {}
        },
        "files_page": {
            "name": "files_page",
            "location": 33,
            "return": [
                "str",
                "dict",
                "Dict[str, str]",
                "Optional[\"Path\"]",
                "List[str]",
                "Tuple[str]"
            ],
            "arguments": {}
        }
    },
    "ennead-master/ennead/views/system.py": {
        "render_markdown_endpoint": {
            "name": "render_markdown_endpoint",
            "location": 7,
            "return": [
                "Response",
                "bytes",
                "dict",
                "flask.Response"
            ],
            "arguments": {}
        }
    },
    "ennead-master/ennead/views/tasks.py": {
        "index": {
            "name": "index",
            "location": 6,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {}
        }
    }
}
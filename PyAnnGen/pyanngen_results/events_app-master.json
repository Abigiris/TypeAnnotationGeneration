{
    "events_app-master/config.py": {
        "Config.init_app": {
            "name": "init_app",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "bool"
                ]
            }
        }
    },
    "events_app-master/crawl.py": {},
    "events_app-master/events_app.py": {
        "make_shell_context": {
            "name": "make_shell_context",
            "location": 14,
            "return": [
                "str",
                "Tuple[flask.Response, int]",
                "Dict[str, Union[bool, str]]",
                "Dict[str, int]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "events_app-master/upload_data_to_db.py": {
        "add_data_to_db": {
            "name": "add_data_to_db",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_data": {
            "name": "get_data",
            "location": 28,
            "return": [
                "Dict[(Any, list)]"
            ],
            "arguments": {}
        },
        "prepare_keys": {
            "name": "prepare_keys",
            "location": 33,
            "return": [
                "dict"
            ],
            "arguments": {
                "keys": [
                    "str",
                    "List",
                    "int",
                    "bytes",
                    "KT"
                ]
            }
        },
        "upload_services": {
            "name": "upload_services",
            "location": 40,
            "return": [
                "Dict[(Any, app.models.WebSource)]"
            ],
            "arguments": {
                "services_names": [
                    "Dict",
                    "str"
                ]
            }
        },
        "upload_events": {
            "name": "upload_events",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[str,str]"
                ],
                "services_objects_map": [
                    "dict",
                    "helpers.JSONType",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "events_app-master/app/models.py": {
        "Event.__repr__": {
            "name": "__repr__",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebSource.__repr__": {
            "name": "__repr__",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "events_app-master/app/__init__.py": {
        "create_app": {
            "name": "create_app",
            "location": 15,
            "return": [
                "flask.Flask",
                "Flask"
            ],
            "arguments": {
                "config_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "events_app-master/app/main/errors.py": {
        "page_not_found": {
            "name": "page_not_found",
            "location": 7,
            "return": [
                "Tuple[int]",
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "e": [
                    "Exception",
                    "int",
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "interal_server_error": {
            "name": "interal_server_error",
            "location": 12,
            "return": [
                "Tuple[int]",
                "str",
                "bool",
                "Dict[str,Any]"
            ],
            "arguments": {
                "e": [
                    "str",
                    "UnicodeError",
                    "bool"
                ]
            }
        }
    },
    "events_app-master/app/main/templates_helpers.py": {
        "link_to_source": {
            "name": "link_to_source",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {
                "source": [
                    "str",
                    "Tuple[str]",
                    "Optional[str]",
                    "None"
                ],
                "classes": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "Tuple[str]"
                ]
            }
        },
        "link_to_date": {
            "name": "link_to_date",
            "location": 14,
            "return": [
                "Text",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "date": []
            }
        },
        "list_services": {
            "name": "list_services",
            "location": 19,
            "return": [
                "str",
                "bool",
                "multinedb.models.workspace.Workspace",
                "Optional[int]",
                "List[Dict[str,str]]"
            ],
            "arguments": {}
        }
    },
    "events_app-master/app/main/views.py": {
        "index": {
            "name": "index",
            "location": 13,
            "return": [
                "str",
                "Dict[str, Any]",
                "zerver.models.Realm",
                "type"
            ],
            "arguments": {}
        },
        "services": {
            "name": "services",
            "location": 20,
            "return": [
                "models.characters.mods_base.SlotTypes",
                "models.characters.chassis.Chassis",
                "str",
                "Dict[str, Any]",
                "rotkehlchen.db.dbhandler.DBHandler"
            ],
            "arguments": {
                "service_name": [
                    "str",
                    "int"
                ]
            }
        },
        "dates": {
            "name": "dates",
            "location": 36,
            "return": [
                "zerver.models.Realm",
                "str",
                "dict",
                "Callable",
                "Optional[str]",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "event_date": [
                    "datetime.date",
                    "int",
                    "str",
                    "datetime.datetime"
                ]
            }
        }
    },
    "events_app-master/app/main/__init__.py": {},
    "events_app-master/data_scraping/data_cleaning.py": {
        "standarize_data": {
            "name": "standarize_data",
            "location": 88,
            "return": [
                "Dict[(Any, list)]"
            ],
            "arguments": {
                "raw_data": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "DataStandarizer.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "bytes",
                    "Dict[str, str]",
                    "list",
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "DataStandarizer.cleaned_raw_data": {
            "name": "cleaned_raw_data",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BerghainDataStandarizer.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bs4.BeautifulSoup",
                    "int",
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "BerghainDataStandarizer.cleaned_raw_data": {
            "name": "cleaned_raw_data",
            "location": 22,
            "return": [
                "bool",
                "IO[bytes]",
                "bytes",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BerghainDataStandarizer._prepare_rows": {
            "name": "_prepare_rows",
            "location": 31,
            "return": [
                "List[Dict[(str, List[str])]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BerghainDataStandarizer._prepare_date": {
            "name": "_prepare_date",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "raw_date": [
                    "datetime.datetime",
                    "datetime.date",
                    "str",
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]"
                ]
            }
        },
        "CoBerlinDataStandarizer.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bs4.BeautifulSoup",
                    "int",
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "CoBerlinDataStandarizer.cleaned_raw_data": {
            "name": "cleaned_raw_data",
            "location": 50,
            "return": [
                "bool",
                "IO[bytes]",
                "bytes",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoBerlinDataStandarizer._prepare_rows": {
            "name": "_prepare_rows",
            "location": 58,
            "return": [
                "List[Dict[(str, List[str])]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoBerlinDataStandarizer._prepare_date": {
            "name": "_prepare_date",
            "location": 80,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "raw_date": [
                    "datetime.date",
                    "str",
                    "List[datetime.date]",
                    "datetime.datetime",
                    "int"
                ]
            }
        }
    },
    "events_app-master/data_scraping/data_scraping.py": {
        "prepare_data_from_each_service": {
            "name": "prepare_data_from_each_service",
            "location": 74,
            "return": [
                "Dict[(Any, Optional[list])]"
            ],
            "arguments": {
                "file_path": [
                    "str",
                    "None",
                    "pathlib.Path",
                    "Optional[str]"
                ],
                "scrapper": [
                    "Scrapper",
                    "str",
                    "List[str]",
                    "int",
                    "Iterable[Tuple[str,str,str]]"
                ],
                "globals": [
                    "List[int]",
                    "None",
                    "str",
                    "Dict[bytes,bytes]",
                    "MutableMapping[str,str]",
                    "Tuple[Any,Any]",
                    "MutableMapping",
                    "Tuple[Union[Any,Any]]"
                ]
            }
        },
        "FileReader.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "FileReader.data": {
            "name": "data",
            "location": 16,
            "return": [
                "str",
                "dict",
                "Dict[str, Dict[str, float]]",
                "int",
                "Dict[str, pathlib.Path]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fetcher.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service_link": [
                    "Sequence[str]",
                    "str",
                    "Sequence[Sequence[str]]",
                    "Iterable[str]"
                ],
                "http": [
                    "List[str]",
                    "str",
                    "Sequence",
                    "int",
                    "List[List[Any]]"
                ]
            }
        },
        "Fetcher.download_data": {
            "name": "download_data",
            "location": 28,
            "return": [
                "dict",
                "Optional[str]",
                "int",
                "List[str]",
                "str",
                "Optional[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoBerlinDataFetcher.prepare_all_pages": {
            "name": "prepare_all_pages",
            "location": 35,
            "return": [
                "List",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_data": [
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[str,Union[str,int]]",
                    "Dict[str,str]",
                    "bytes",
                    "Optional[Dict]",
                    "None"
                ],
                "actual_parser": [
                    "str",
                    "bool"
                ]
            }
        },
        "Parser.parse_raw_data": {
            "name": "parse_raw_data",
            "location": 57,
            "return": [
                "list",
                "str",
                "argparse.ArgumentParser"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scrapper.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service_link": [
                    "bool",
                    "Hashable",
                    "int"
                ],
                "fetcher": [
                    "Fetcher",
                    "bool",
                    "int",
                    "Callable"
                ],
                "parser": [
                    "Parser",
                    "Optional[Callable[[Dict],Any]]",
                    "str",
                    "List[str]",
                    "Dict",
                    "bool",
                    "Dict[str,str]"
                ]
            }
        },
        "Scrapper.parsed_data": {
            "name": "parsed_data",
            "location": 69,
            "return": [
                "argparse.ArgumentParser",
                "Tuple[Dict[str, str], List[str]]",
                "argparse.Namespace"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "events_app-master/data_scraping/__init__.py": {},
    "events_app-master/migrations/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online.process_revision_directives": {
            "name": "process_revision_directives",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "revision": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "directives": [
                    "Callable[[Mapping], T]",
                    "list",
                    "List[List[str]]",
                    "int",
                    "str",
                    "tuple"
                ]
            }
        }
    },
    "events_app-master/migrations/versions/891211ea0a36_initial_migration.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "events_app-master/tests/test_app/test_app.py": {
        "FlaskClientTestCase.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskClientTestCase.tearDown": {
            "name": "tearDown",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskClientTestCase.test_index": {
            "name": "test_index",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskClientTestCase.test_service_berghain": {
            "name": "test_service_berghain",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskClientTestCase.test_service_co_berlin": {
            "name": "test_service_co_berlin",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskClientTestCase.test_date": {
            "name": "test_date",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "events_app-master/tests/test_app/test_db.py": {
        "FlaskClientDifferentWebSourcesTestCase.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskClientDifferentWebSourcesTestCase.tearDown": {
            "name": "tearDown",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskClientDifferentWebSourcesTestCase.test_index_events": {
            "name": "test_index_events",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskClientDifferentWebSourcesTestCase.test_events_for_service_1": {
            "name": "test_events_for_service_1",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskClientDifferentWebSourcesTestCase.test_events_for_service_2": {
            "name": "test_events_for_service_2",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskClientDifferentWebSourcesTestCase.test_events_for_date_1": {
            "name": "test_events_for_date_1",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskClientDifferentWebSourcesTestCase.test_events_for_date_2": {
            "name": "test_events_for_date_2",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "events_app-master/tests/test_app/__init__.py": {},
    "events_app-master/tests/test_data_scrapping/test_data_cleaning.py": {
        "TestBerghainDataStandarizer.berghain_html": {
            "name": "berghain_html",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBerghainDataStandarizer.test_clean_all_berghain_data": {
            "name": "test_clean_all_berghain_data",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "berghain_html": []
            }
        },
        "TestCoBerlinDataStandarizer.coberlin_html": {
            "name": "coberlin_html",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCoBerlinDataStandarizer.test_clean_all_coberlin_data": {
            "name": "test_clean_all_coberlin_data",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "coberlin_html": []
            }
        },
        "TestStandarizeData.raw_data": {
            "name": "raw_data",
            "location": 53,
            "return": [
                "dict[typing.Text, list[BeautifulSoup]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStandarizeData.test_standarize_data": {
            "name": "test_standarize_data",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_data": []
            }
        }
    },
    "events_app-master/tests/test_data_scrapping/test_data_scrapping.py": {
        "test_prepare_data_from_each_service_usage": {
            "name": "test_prepare_data_from_each_service_usage",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "MockExternalFetcher.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "http_method": [
                    "str",
                    "Dict[str,str]",
                    "bytes",
                    "bool"
                ],
                "link": [
                    "str",
                    "Dict[str,str]",
                    "bytes",
                    "bool"
                ],
                "response": [
                    "str",
                    "Dict[str,str]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "MockExternalFetcher.data": {
            "name": "data",
            "location": 21,
            "return": [
                "dict",
                "Optional[str]",
                "List[dict]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockExternalFetcher.request": {
            "name": "request",
            "location": 24,
            "return": [
                "Optional[MockExternalFetcher]"
            ],
            "arguments": {
                "self": [],
                "http_method": [
                    "str",
                    "float"
                ],
                "link": [
                    "str",
                    "float"
                ]
            }
        },
        "MockBeautifulSoup.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_data": [
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[int,Dict]",
                    "Dict[str,Union[str,bool]]",
                    "Dict[int,dict]"
                ],
                "features": [
                    "int",
                    "Optional[Dict]",
                    "Dict",
                    "None"
                ]
            }
        },
        "MockFetcher.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "link": [
                    "str",
                    "Optional[Callable]",
                    "bool",
                    "Callable",
                    "List[List[Any]]",
                    "None",
                    "List[list[Any]]"
                ]
            }
        },
        "MockFetcher.download_data": {
            "name": "download_data",
            "location": 40,
            "return": [
                "str",
                "dict",
                "float",
                "list",
                "List[List[Any]]",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockFetcher.prepare_all_pages": {
            "name": "prepare_all_pages",
            "location": 44,
            "return": [
                "List",
                "str",
                "bool",
                "Iterable[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockParser.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetched_data": [
                    "bytes",
                    "Dict[str,str]",
                    "Dict[str,dict]",
                    "Tuple[int,str,bytearray]",
                    "Tuple[Union[int,str,bytearray]]"
                ]
            }
        },
        "MockParser.parse_raw_data": {
            "name": "parse_raw_data",
            "location": 53,
            "return": [
                "Optional[float]",
                "IO[bytes]",
                "bool",
                "dict",
                "Optional[Dict[str, Any]]",
                "str",
                "Dict[str, List[int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockScrapper.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service_link": [
                    "bool",
                    "Hashable",
                    "int"
                ],
                "fetcher": [
                    "bool",
                    "int",
                    "Callable"
                ],
                "parser": [
                    "Optional[Callable[[Dict], Any]]",
                    "str",
                    "List[str]",
                    "dict",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "MockScrapper.parsed_data": {
            "name": "parsed_data",
            "location": 64,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFetcher.test_downloading_data": {
            "name": "test_downloading_data",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoBerlinDataFetcher.coberlin_html": {
            "name": "coberlin_html",
            "location": 78,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoBerlinDataFetcher.test_prepare_all_pages": {
            "name": "test_prepare_all_pages",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "coberlin_html": []
            }
        },
        "TestParser.raw_data": {
            "name": "raw_data",
            "location": 93,
            "return": [
                "Text",
                "str",
                "int",
                "Generator",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_parser": {
            "name": "test_parser",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_data": [
                    "Dict",
                    "str",
                    "Optional[dict]",
                    "None"
                ]
            }
        },
        "TestScrapper.test_scrapper": {
            "name": "test_scrapper",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileReader.test_reader": {
            "name": "test_reader",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "events_app-master/tests/test_data_scrapping/test_upload_to_db.py": {
        "DBTest.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DBTest.tearDown": {
            "name": "tearDown",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DBTest.test_app_exists": {
            "name": "test_app_exists",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DBTest.test_app_is_testing": {
            "name": "test_app_is_testing",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DBTest.test_prepare_keys": {
            "name": "test_prepare_keys",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DBTest.test_upload_services": {
            "name": "test_upload_services",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DBTest.test_upload_events": {
            "name": "test_upload_events",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "events_app-master/tests/test_data_scrapping/__init__.py": {},
    "events_app-master/tests/test_data_scrapping/fixtures/__init__.py": {}
}
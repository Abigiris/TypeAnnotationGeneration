{
    "everyclass-server-master/server.py": {
        "test": {
            "name": "test",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "everyclass-server-master/everyclass/__init__.py": {},
    "everyclass-server-master/everyclass/server/views_main.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test": {
            "name": "test",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "about": {
            "name": "about",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "guide": {
            "name": "guide",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "testing": {
            "name": "testing",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "donate": {
            "name": "donate",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "health_check": {
            "name": "health_check",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "enter_maintenance": {
            "name": "enter_maintenance",
            "location": 55,
            "return": [
                "typing.Text",
                "Response"
            ],
            "arguments": {}
        },
        "exit_maintenance": {
            "name": "exit_maintenance",
            "location": 72,
            "return": [
                "typing.Text",
                "Response"
            ],
            "arguments": {}
        }
    },
    "everyclass-server-master/everyclass/server/__init__.py": {
        "cron_update_remote_manifest": {
            "name": "cron_update_remote_manifest",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "create_app": {
            "name": "create_app",
            "location": 109,
            "return": [
                "Flask"
            ],
            "arguments": {}
        },
        "enable_gc": {
            "name": "enable_gc",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "init_plugins": {
            "name": "init_plugins",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "init_db": {
            "name": "init_db",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "fetch_remote_manifests": {
            "name": "fetch_remote_manifests",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "daily_update_data_time": {
            "name": "daily_update_data_time",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "signum": []
            }
        },
        "create_app.set_user_id": {
            "name": "set_user_id",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "create_app.log_request": {
            "name": "log_request",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "create_app.response_minify": {
            "name": "response_minify",
            "location": 210,
            "return": [],
            "arguments": {
                "response": []
            }
        },
        "create_app.shutdown_db_session": {
            "name": "shutdown_db_session",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "exception": [
                    "None"
                ]
            }
        },
        "create_app.version_filter": {
            "name": "version_filter",
            "location": 223,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "create_app.inject_consts": {
            "name": "inject_consts",
            "location": 242,
            "return": [],
            "arguments": {}
        },
        "create_app.page_not_found": {
            "name": "page_not_found",
            "location": 248,
            "return": [],
            "arguments": {
                "error": []
            }
        },
        "create_app.handle_biz_exception": {
            "name": "handle_biz_exception",
            "location": 254,
            "return": [],
            "arguments": {
                "error": []
            }
        },
        "create_app.internal_server_error": {
            "name": "internal_server_error",
            "location": 264,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "error": []
            }
        }
    },
    "everyclass-server-master/everyclass/server/calendar/service.py": {
        "reset_calendar_tokens": {
            "name": "reset_calendar_tokens",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "student_id": [
                    "str"
                ],
                "typ": [
                    "Optional[str]"
                ]
            }
        },
        "get_calendar_token": {
            "name": "get_calendar_token",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "resource_type": [
                    "str"
                ],
                "identifier": [
                    "str"
                ],
                "semester": [
                    "str"
                ]
            }
        },
        "find_calendar_token": {
            "name": "find_calendar_token",
            "location": 47,
            "return": [
                "Optional[dict]"
            ],
            "arguments": {
                "token": [
                    "str"
                ]
            }
        },
        "use_calendar_token": {
            "name": "use_calendar_token",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "token": [
                    "str"
                ]
            }
        },
        "generate_ics_file": {
            "name": "generate_ics_file",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "type_": [
                    "str"
                ],
                "identifier": [
                    "str"
                ],
                "semester": [
                    "str"
                ]
            }
        }
    },
    "everyclass-server-master/everyclass/server/calendar/views.py": {
        "cal_page": {
            "name": "cal_page",
            "location": 24,
            "return": [],
            "arguments": {
                "url_res_type": [],
                "url_res_identifier": [],
                "url_semester": []
            }
        },
        "ics_download": {
            "name": "ics_download",
            "location": 69,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "calendar_token": []
            }
        },
        "android_client_get_semester": {
            "name": "android_client_get_semester",
            "location": 91,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "identifier": []
            }
        },
        "android_client_get_ics": {
            "name": "android_client_get_ics",
            "location": 112,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "resource_type": [],
                "identifier": [],
                "semester": []
            }
        },
        "legacy_get_ics": {
            "name": "legacy_get_ics",
            "location": 165,
            "return": [
                "tuple[typing.Union[str,int]]"
            ],
            "arguments": {
                "student_id": [],
                "semester_str": []
            }
        }
    },
    "everyclass-server-master/everyclass/server/calendar/views_api.py": {
        "get_calendar_token": {
            "name": "get_calendar_token",
            "location": 14,
            "return": [],
            "arguments": {
                "id_sec": [],
                "semester": []
            }
        }
    },
    "everyclass-server-master/everyclass/server/calendar/__init__.py": {},
    "everyclass-server-master/everyclass/server/calendar/domain/ics_generator.py": {
        "generate": {
            "name": "generate",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "cards": [
                    "Dict[(Tuple[(int, int)], List[dict])]"
                ],
                "semester": [
                    "everyclass.server.entity.model.semester.Semester"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "_get_datetime": {
            "name": "_get_datetime",
            "location": 87,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "week": [
                    "int"
                ],
                "day": [
                    "int"
                ],
                "time": [
                    "Tuple[(int, int)]"
                ],
                "semester": [
                    "Tuple[(int, int, int)]"
                ]
            }
        },
        "_build_event": {
            "name": "_build_event",
            "location": 118,
            "return": [],
            "arguments": {
                "card_name": [
                    "str"
                ],
                "times": [
                    "Tuple[(_datetime.datetime, _datetime.datetime)]"
                ],
                "classroom": [
                    "str"
                ],
                "teacher": [
                    "str"
                ],
                "current_week": [
                    "int"
                ],
                "week_string": [
                    "str"
                ],
                "cid": [
                    "str"
                ]
            }
        },
        "calendar_dir": {
            "name": "calendar_dir",
            "location": 158,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "everyclass-server-master/everyclass/server/calendar/domain/__init__.py": {},
    "everyclass-server-master/everyclass/server/calendar/model/calendar_token.py": {},
    "everyclass-server-master/everyclass/server/calendar/model/__init__.py": {},
    "everyclass-server-master/everyclass/server/calendar/repo/calendar_token.py": {
        "insert_calendar_token": {
            "name": "insert_calendar_token",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "resource_type": [
                    "str"
                ],
                "semester": [
                    "str"
                ],
                "identifier": [
                    "str"
                ]
            }
        },
        "update_last_used_time": {
            "name": "update_last_used_time",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "token": [
                    "str"
                ]
            }
        },
        "reset_tokens": {
            "name": "reset_tokens",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "student_id": [
                    "str"
                ],
                "typ": [
                    "Optional[str]"
                ]
            }
        },
        "_parse": {
            "name": "_parse",
            "location": 51,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "result": []
            }
        },
        "find_calendar_token": {
            "name": "find_calendar_token",
            "location": 73,
            "return": [
                "Optional[dict]"
            ],
            "arguments": {
                "tid": [],
                "sid": [
                    "str"
                ],
                "semester": [
                    "str"
                ],
                "token": []
            }
        },
        "use_cache": {
            "name": "use_cache",
            "location": 100,
            "return": [
                "bool"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "use_cache.set_current": {
            "name": "set_current",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "everyclass-server-master/everyclass/server/calendar/repo/__init__.py": {},
    "everyclass-server-master/everyclass/server/course/service.py": {
        "get_class_categories": {
            "name": "get_class_categories",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "get_advice_questions": {
            "name": "get_advice_questions",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "get_advice_result": {
            "name": "get_advice_result",
            "location": 15,
            "return": [],
            "arguments": {
                "answer_sheet": []
            }
        }
    },
    "everyclass-server-master/everyclass/server/course/views.py": {
        "is_taking": {
            "name": "is_taking",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "cotc": []
            }
        },
        "electives": {
            "name": "electives",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "elective_assistant": {
            "name": "elective_assistant",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "show_review": {
            "name": "show_review",
            "location": 44,
            "return": [],
            "arguments": {
                "cotc_id": []
            }
        },
        "edit_review": {
            "name": "edit_review",
            "location": 72,
            "return": [],
            "arguments": {
                "cotc_id": []
            }
        }
    },
    "everyclass-server-master/everyclass/server/course/views_api.py": {
        "class_categories": {
            "name": "class_categories",
            "location": 11,
            "return": [
                "Tuple[str, int, Dict[str, str]]",
                "List[Dict[str, Any]]",
                "List[str]",
                "Dict[str, str]",
                "cmk.gui.utils.html.HTML",
                "str"
            ],
            "arguments": {}
        },
        "get_advice_questionnaire": {
            "name": "get_advice_questionnaire",
            "location": 16,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "get_advice": {
            "name": "get_advice",
            "location": 21,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "everyclass-server-master/everyclass/server/course/__init__.py": {},
    "everyclass-server-master/everyclass/server/course/model/course.py": {
        "CourseMeta.get_categories": {
            "name": "get_categories",
            "location": 27,
            "return": [
                "dict[typing.Text, typing.Union[list[dict[typing.Text, ]],int]]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "CourseMeta.import_demo_content": {
            "name": "import_demo_content",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        }
    },
    "everyclass-server-master/everyclass/server/course/model/klass.py": {
        "KlassMeta.__json_encode__": {
            "name": "__json_encode__",
            "location": 32,
            "return": [
                "dict[typing.Text, typing.Union[list[dict[typing.Text, ]],float]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KlassMeta.get_all": {
            "name": "get_all",
            "location": 43,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "KlassMeta.import_demo_content": {
            "name": "import_demo_content",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        }
    },
    "everyclass-server-master/everyclass/server/course/model/klass_review.py": {
        "KlassReview.new": {
            "name": "new",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "klass_id": [],
                "user_id": [],
                "rk": [],
                "ra": [],
                "fs": [],
                "gr": [],
                "comment": []
            }
        },
        "KlassReview.sync_to_class_meta": {
            "name": "sync_to_class_meta",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "KlassReview.import_demo_content": {
            "name": "import_demo_content",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        }
    },
    "everyclass-server-master/everyclass/server/course/model/questionnaire.py": {
        "Option.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "option_id": [],
                "description": []
            }
        },
        "Option.__json_encode__": {
            "name": "__json_encode__",
            "location": 11,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Question.__json_encode__": {
            "name": "__json_encode__",
            "location": 23,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Question.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "description": [],
                "options": [],
                "multiple": [
                    "bool"
                ],
                "condition": [
                    "None"
                ]
            }
        },
        "Questionnaire.__json_encode__": {
            "name": "__json_encode__",
            "location": 42,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Questionnaire.add_questions": {
            "name": "add_questions",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "questions": []
            }
        },
        "Questionnaire.get": {
            "name": "get",
            "location": 52,
            "return": [
                "Questionnaire"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Answer.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "question_id": [],
                "answer": []
            }
        },
        "AnswerSheet.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "answers": []
            }
        },
        "AnswerSheet.get_answer": {
            "name": "get_answer",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "question_id": []
            }
        },
        "AnswerSheet.get_advice": {
            "name": "get_advice",
            "location": 114,
            "return": [
                "dict[typing.Text, tuple[Score]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "everyclass-server-master/everyclass/server/course/model/suggest.py": {
        "Score.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Score.__json_encode__": {
            "name": "__json_encode__",
            "location": 10,
            "return": [
                "dict[typing.Text, ]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Score.add_score": {
            "name": "add_score",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "score": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Optional[bool]",
                    "bool",
                    "None"
                ],
                "processor_name": [
                    "str",
                    "cmk.utils.type_defs.CheckPluginName",
                    "bool",
                    "typing.Container",
                    "Container[str]"
                ],
                "reason": [
                    "str",
                    "None",
                    "list",
                    "bool",
                    "List[str]",
                    "list[]",
                    "list[str]",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        }
    },
    "everyclass-server-master/everyclass/server/course/model/__init__.py": {},
    "everyclass-server-master/everyclass/server/entity/domain.py": {
        "get_semester_date": {
            "name": "get_semester_date",
            "location": 9,
            "return": [
                "tuple[typing.Union[str,int]]"
            ],
            "arguments": {
                "date": []
            }
        },
        "semester_calculate": {
            "name": "semester_calculate",
            "location": 31,
            "return": [
                "list[tuple[bool]]"
            ],
            "arguments": {
                "current_semester": [],
                "semester_list": []
            }
        },
        "replace_exception": {
            "name": "replace_exception",
            "location": 43,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "replace_exception._func": {
            "name": "_func",
            "location": 46,
            "return": [],
            "arguments": {}
        }
    },
    "everyclass-server-master/everyclass/server/entity/exceptions.py": {
        "AlreadyReported.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "everyclass-server-master/everyclass/server/entity/service.py": {
        "search": {
            "name": "search",
            "location": 13,
            "return": [],
            "arguments": {
                "keyword": []
            }
        },
        "get_student": {
            "name": "get_student",
            "location": 18,
            "return": [],
            "arguments": {
                "student_id": []
            }
        },
        "get_student_timetable": {
            "name": "get_student_timetable",
            "location": 23,
            "return": [],
            "arguments": {
                "student_id": [],
                "semester": []
            }
        },
        "get_teacher_timetable": {
            "name": "get_teacher_timetable",
            "location": 28,
            "return": [],
            "arguments": {
                "teacher_id": [],
                "semester": []
            }
        },
        "get_classroom_timetable": {
            "name": "get_classroom_timetable",
            "location": 33,
            "return": [],
            "arguments": {
                "semester": [],
                "room_id": []
            }
        },
        "get_card": {
            "name": "get_card",
            "location": 38,
            "return": [],
            "arguments": {
                "semester": [],
                "card_id": []
            }
        },
        "get_teacher": {
            "name": "get_teacher",
            "location": 43,
            "return": [],
            "arguments": {
                "teacher_id": []
            }
        },
        "get_rooms": {
            "name": "get_rooms",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "get_available_rooms": {
            "name": "get_available_rooms",
            "location": 53,
            "return": [
                "AvailableRooms"
            ],
            "arguments": {
                "campus": [],
                "building": [],
                "date": [],
                "time": []
            }
        },
        "report_unavailable_room": {
            "name": "report_unavailable_room",
            "location": 58,
            "return": [],
            "arguments": {
                "room_id": [],
                "date": [],
                "time": [],
                "user_type": [],
                "user_id": []
            }
        },
        "get_people_info": {
            "name": "get_people_info",
            "location": 70,
            "return": [
                "tuple[bool]"
            ],
            "arguments": {
                "identifier": []
            }
        },
        "multi_people_schedule": {
            "name": "multi_people_schedule",
            "location": 87,
            "return": [
                "MultiPeopleSchedule"
            ],
            "arguments": {
                "people": [],
                "date": [],
                "current_user": []
            }
        }
    },
    "everyclass-server-master/everyclass/server/entity/views.py": {
        "query": {
            "name": "query",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "get_student": {
            "name": "get_student",
            "location": 133,
            "return": [],
            "arguments": {
                "url_sid": [],
                "url_semester": []
            }
        },
        "get_teacher": {
            "name": "get_teacher",
            "location": 196,
            "return": [],
            "arguments": {
                "url_tid": [],
                "url_semester": []
            }
        },
        "get_classroom": {
            "name": "get_classroom",
            "location": 252,
            "return": [],
            "arguments": {
                "url_rid": [],
                "url_semester": []
            }
        },
        "get_card": {
            "name": "get_card",
            "location": 291,
            "return": [],
            "arguments": {
                "url_cid": [],
                "url_semester": []
            }
        },
        "available_rooms": {
            "name": "available_rooms",
            "location": 323,
            "return": [],
            "arguments": {}
        },
        "multi_people_schedule": {
            "name": "multi_people_schedule",
            "location": 328,
            "return": [],
            "arguments": {}
        },
        "_empty_column_check": {
            "name": "_empty_column_check",
            "location": 332,
            "return": [
                "tuple[bool]"
            ],
            "arguments": {
                "cards": []
            }
        }
    },
    "everyclass-server-master/everyclass/server/entity/views_api.py": {
        "multi_people_schedule": {
            "name": "multi_people_schedule",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "multi_people_schedule_search": {
            "name": "multi_people_schedule_search",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "get_all_rooms": {
            "name": "get_all_rooms",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "get_available_rooms": {
            "name": "get_available_rooms",
            "location": 73,
            "return": [],
            "arguments": {}
        },
        "report_unavailable_room": {
            "name": "report_unavailable_room",
            "location": 96,
            "return": [],
            "arguments": {}
        }
    },
    "everyclass-server-master/everyclass/server/entity/__init__.py": {},
    "everyclass-server-master/everyclass/server/entity/model/available_rooms.py": {
        "Room.__json_encode__": {
            "name": "__json_encode__",
            "location": 24,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Room.make": {
            "name": "make",
            "location": 28,
            "return": [],
            "arguments": {
                "cls": [],
                "name": [],
                "room_id": [],
                "feedback_cnt": []
            }
        },
        "AvailableRooms.__json_encode__": {
            "name": "__json_encode__",
            "location": 38,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvailableRooms.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "campus": [],
                "building": [],
                "date": [],
                "time": []
            }
        },
        "UnavailableRoomReport.new": {
            "name": "new",
            "location": 73,
            "return": [
                "UnavailableRoomReport"
            ],
            "arguments": {
                "cls": [],
                "room_id": [],
                "date": [],
                "time": [],
                "user_type": [],
                "user_id": []
            }
        }
    },
    "everyclass-server-master/everyclass/server/entity/model/multi_people_schedule.py": {
        "Event.__json_encode__": {
            "name": "__json_encode__",
            "location": 15,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "People.__json_encode__": {
            "name": "__json_encode__",
            "location": 24,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiPeopleSchedule.__json_encode__": {
            "name": "__json_encode__",
            "location": 34,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiPeopleSchedule.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "people": [],
                "date": [],
                "current_user": []
            }
        },
        "SearchResultItem.__json_encode__": {
            "name": "__json_encode__",
            "location": 101,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "everyclass-server-master/everyclass/server/entity/model/rooms.py": {
        "Room.__json_encode__": {
            "name": "__json_encode__",
            "location": 15,
            "return": [
                "dict[typing.Text, ]",
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Room.make": {
            "name": "make",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "room_id": [
                    "str",
                    "int"
                ],
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "Building.__json_encode__": {
            "name": "__json_encode__",
            "location": 28,
            "return": [
                "dict[typing.Text, ]",
                "bool",
                "str",
                "Type",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Building.make": {
            "name": "make",
            "location": 32,
            "return": [
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "name": [
                    "str"
                ],
                "rooms": [
                    "str"
                ]
            }
        },
        "Campus.__json_encode__": {
            "name": "__json_encode__",
            "location": 42,
            "return": [
                "dict[typing.Text, ]",
                "bool",
                "str",
                "Type",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Campus.make": {
            "name": "make",
            "location": 46,
            "return": [
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "name": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "dct": [
                    "dict[, ]",
                    "dict[str, str]",
                    "dict",
                    "Mapping[str, Dict[str, Any]]",
                    "Optional[Dict[str, str]]",
                    "Iterable[str]",
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "Mapping[int, str]"
                ]
            }
        },
        "AllRooms.__json_encode__": {
            "name": "__json_encode__",
            "location": 57,
            "return": [
                "dict[typing.Text, ]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllRooms.make": {
            "name": "make",
            "location": 61,
            "return": [
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "cls": [
                    "complex",
                    "bytes",
                    "str",
                    "Optional[int]",
                    "int",
                    "bool",
                    "None"
                ],
                "dct": [
                    "dict[, ]",
                    "dict[str, dict[str, str]]",
                    "dict",
                    "Mapping",
                    "Dict[str, Dict[str, str]]",
                    "str",
                    "Mapping[str, Dict[str, Any]]"
                ]
            }
        }
    },
    "everyclass-server-master/everyclass/server/entity/model/semester.py": {
        "Semester.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "para": []
            }
        },
        "Semester.__repr__": {
            "name": "__repr__",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Semester.__str__": {
            "name": "__str__",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Semester.__eq__": {
            "name": "__eq__",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Semester.to_tuple": {
            "name": "to_tuple",
            "location": 44,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Semester.to_str": {
            "name": "to_str",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "simplify": [
                    "bool"
                ]
            }
        }
    },
    "everyclass-server-master/everyclass/server/entity/model/__init__.py": {},
    "everyclass-server-master/everyclass/server/user/exceptions.py": {
        "UserNotExists.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WrongPassword.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlreadyRegisteredError.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidTokenError.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IdentityVerifyRequestNotFoundError.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IdentityVerifyRequestStatusError.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PasswordTooWeakError.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoginRequired.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PermissionAdjustRequired.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "everyclass-server-master/everyclass/server/user/service.py": {
        "add_user": {
            "name": "add_user",
            "location": 23,
            "return": [],
            "arguments": {
                "identifier": [],
                "password": [],
                "password_encrypted": [
                    "bool"
                ]
            }
        },
        "user_exist": {
            "name": "user_exist",
            "location": 27,
            "return": [],
            "arguments": {
                "identifier": []
            }
        },
        "check_password": {
            "name": "check_password",
            "location": 31,
            "return": [],
            "arguments": {
                "identifier": [],
                "password": []
            }
        },
        "record_simple_password": {
            "name": "record_simple_password",
            "location": 38,
            "return": [],
            "arguments": {
                "password": [],
                "identifier": []
            }
        },
        "register_by_email": {
            "name": "register_by_email",
            "location": 42,
            "return": [],
            "arguments": {
                "identifier": []
            }
        },
        "register_by_email_token_check": {
            "name": "register_by_email_token_check",
            "location": 58,
            "return": [],
            "arguments": {
                "token": []
            }
        },
        "register_by_email_set_password": {
            "name": "register_by_email_set_password",
            "location": 80,
            "return": [],
            "arguments": {
                "request_id": [],
                "password": []
            }
        },
        "register_by_password": {
            "name": "register_by_password",
            "location": 104,
            "return": [],
            "arguments": {
                "jw_password": [],
                "password": [],
                "identifier": []
            }
        },
        "register_by_password_status_refresh": {
            "name": "register_by_password_status_refresh",
            "location": 131,
            "return": [
                "tuple[typing.Union[bool,typing.Text]]",
                "tuple[typing.Optional[bool]]"
            ],
            "arguments": {
                "request_id": []
            }
        },
        "score_password_strength": {
            "name": "score_password_strength",
            "location": 158,
            "return": [],
            "arguments": {
                "password": []
            }
        },
        "get_privacy_level": {
            "name": "get_privacy_level",
            "location": 165,
            "return": [],
            "arguments": {
                "student_id": []
            }
        },
        "set_privacy_level": {
            "name": "set_privacy_level",
            "location": 169,
            "return": [],
            "arguments": {
                "student_id": [],
                "new_level": []
            }
        },
        "has_access": {
            "name": "has_access",
            "location": 180,
            "return": [
                "tuple[typing.Optional[bool]]",
                "tuple[typing.Union[bool,typing.Text]]"
            ],
            "arguments": {
                "host": [],
                "visitor": [
                    "None"
                ],
                "footprint": [
                    "bool"
                ]
            }
        },
        "new_grant_request": {
            "name": "new_grant_request",
            "location": 210,
            "return": [],
            "arguments": {
                "from_uid": [],
                "to_uid": []
            }
        },
        "get_pending_requests": {
            "name": "get_pending_requests",
            "location": 214,
            "return": [],
            "arguments": {
                "user_identifier": []
            }
        },
        "accept_grant": {
            "name": "accept_grant",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "grant_id": [],
                "current_user_id": []
            }
        },
        "reject_grant": {
            "name": "reject_grant",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "grant_id": [],
                "current_user_id": []
            }
        },
        "_update_track": {
            "name": "_update_track",
            "location": 240,
            "return": [],
            "arguments": {
                "host": [],
                "visitor": []
            }
        },
        "_add_visitor_count": {
            "name": "_add_visitor_count",
            "location": 244,
            "return": [],
            "arguments": {
                "host": [],
                "visitor": [
                    "None"
                ]
            }
        },
        "get_visitor_count": {
            "name": "get_visitor_count",
            "location": 248,
            "return": [],
            "arguments": {
                "identifier": []
            }
        },
        "get_visitors": {
            "name": "get_visitors",
            "location": 252,
            "return": [
                "list[Visitor]"
            ],
            "arguments": {
                "identifier": []
            }
        },
        "get_user_id": {
            "name": "get_user_id",
            "location": 278,
            "return": [],
            "arguments": {}
        },
        "issue_token": {
            "name": "issue_token",
            "location": 288,
            "return": [],
            "arguments": {
                "user_identifier": []
            }
        },
        "decode_jwt_payload": {
            "name": "decode_jwt_payload",
            "location": 299,
            "return": [],
            "arguments": {
                "token": []
            }
        },
        "get_username_from_jwt": {
            "name": "get_username_from_jwt",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "token": []
            }
        }
    },
    "everyclass-server-master/everyclass/server/user/views.py": {
        "login": {
            "name": "login",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "register": {
            "name": "register",
            "location": 84,
            "return": [],
            "arguments": {}
        },
        "register_choice": {
            "name": "register_choice",
            "location": 115,
            "return": [],
            "arguments": {}
        },
        "register_by_email": {
            "name": "register_by_email",
            "location": 123,
            "return": [],
            "arguments": {}
        },
        "email_verification": {
            "name": "email_verification",
            "location": 139,
            "return": [],
            "arguments": {}
        },
        "register_by_password": {
            "name": "register_by_password",
            "location": 186,
            "return": [],
            "arguments": {}
        },
        "password_strength_check": {
            "name": "password_strength_check",
            "location": 221,
            "return": [],
            "arguments": {}
        },
        "register_by_password_status": {
            "name": "register_by_password_status",
            "location": 236,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "_set_current_user": {
            "name": "_set_current_user",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "identifier": []
            }
        },
        "_set_current_registering": {
            "name": "_set_current_registering",
            "location": 282,
            "return": [],
            "arguments": {
                "identifier": []
            }
        },
        "register_by_password_success": {
            "name": "register_by_password_success",
            "location": 301,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 308,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "pending_grants": {
            "name": "pending_grants",
            "location": 332,
            "return": [],
            "arguments": {}
        },
        "logout": {
            "name": "logout",
            "location": 339,
            "return": [],
            "arguments": {}
        },
        "js_set_preference": {
            "name": "js_set_preference",
            "location": 348,
            "return": [],
            "arguments": {}
        },
        "reset_calendar_token": {
            "name": "reset_calendar_token",
            "location": 364,
            "return": [],
            "arguments": {}
        },
        "visitors": {
            "name": "visitors",
            "location": 373,
            "return": [],
            "arguments": {}
        }
    },
    "everyclass-server-master/everyclass/server/user/views_api.py": {
        "login": {
            "name": "login",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "register_by_email": {
            "name": "register_by_email",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "email_verification_check": {
            "name": "email_verification_check",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "email_verification": {
            "name": "email_verification",
            "location": 72,
            "return": [],
            "arguments": {}
        },
        "apply_grant": {
            "name": "apply_grant",
            "location": 94,
            "return": [],
            "arguments": {}
        },
        "my_pending_grants": {
            "name": "my_pending_grants",
            "location": 107,
            "return": [],
            "arguments": {}
        },
        "accept_grant": {
            "name": "accept_grant",
            "location": 113,
            "return": [],
            "arguments": {
                "grant_id": []
            }
        }
    },
    "everyclass-server-master/everyclass/server/user/__init__.py": {},
    "everyclass-server-master/everyclass/server/user/model/grant.py": {
        "Grant.__json_encode__": {
            "name": "__json_encode__",
            "location": 35,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grant.new": {
            "name": "new",
            "location": 47,
            "return": [
                "Grant"
            ],
            "arguments": {
                "cls": [],
                "user_id": [],
                "to_user_id": []
            }
        },
        "Grant.accept": {
            "name": "accept",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grant.reject": {
            "name": "reject",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grant.has_grant": {
            "name": "has_grant",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "user_id": [],
                "to_user_id": []
            }
        },
        "Grant.request_for_grant": {
            "name": "request_for_grant",
            "location": 85,
            "return": [],
            "arguments": {
                "cls": [],
                "user_id": [],
                "to_user_id": []
            }
        },
        "Grant.get_requests": {
            "name": "get_requests",
            "location": 102,
            "return": [],
            "arguments": {
                "cls": [],
                "user_id": []
            }
        },
        "Grant.get_by_id": {
            "name": "get_by_id",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "record_id": []
            }
        }
    },
    "everyclass-server-master/everyclass/server/user/model/privacy_settings.py": {},
    "everyclass-server-master/everyclass/server/user/model/simple_password.py": {
        "SimplePassword.new": {
            "name": "new",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool"
                ],
                "password": [
                    "str"
                ],
                "identifier": [
                    "str"
                ]
            }
        }
    },
    "everyclass-server-master/everyclass/server/user/model/user.py": {
        "User.__repr__": {
            "name": "__repr__",
            "location": 20,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.check_password": {
            "name": "check_password",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "password": []
            }
        },
        "User.add_user": {
            "name": "add_user",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "identifier": [],
                "password": [],
                "password_encrypted": [
                    "bool"
                ]
            }
        },
        "User.get_by_id": {
            "name": "get_by_id",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "identifier": []
            }
        },
        "User.exists": {
            "name": "exists",
            "location": 57,
            "return": [],
            "arguments": {
                "cls": [],
                "identifier": []
            }
        }
    },
    "everyclass-server-master/everyclass/server/user/model/verification_request.py": {
        "VerificationRequest._set_status": {
            "name": "_set_status",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": []
            }
        },
        "VerificationRequest.set_status_token_passed": {
            "name": "set_status_token_passed",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerificationRequest.set_status_password_set": {
            "name": "set_status_password_set",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerificationRequest.set_status_success": {
            "name": "set_status_success",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerificationRequest._new_request": {
            "name": "_new_request",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "identifier": [],
                "verification_method": [],
                "status": [],
                "password": [
                    "None"
                ]
            }
        },
        "VerificationRequest.new_email_request": {
            "name": "new_email_request",
            "location": 97,
            "return": [],
            "arguments": {
                "cls": [],
                "identifier": []
            }
        },
        "VerificationRequest.new_password_request": {
            "name": "new_password_request",
            "location": 101,
            "return": [],
            "arguments": {
                "cls": [],
                "identifier": [],
                "password": []
            }
        },
        "VerificationRequest.find_by_id": {
            "name": "find_by_id",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "request_id": []
            }
        }
    },
    "everyclass-server-master/everyclass/server/user/model/visitor.py": {},
    "everyclass-server-master/everyclass/server/user/model/__init__.py": {},
    "everyclass-server-master/everyclass/server/user/repo/privacy_settings.py": {
        "get_level": {
            "name": "get_level",
            "location": 7,
            "return": [
                "float",
                "tuple",
                "Optional[bool]",
                "bool"
            ],
            "arguments": {
                "student_id": [
                    "str"
                ]
            }
        },
        "set_level": {
            "name": "set_level",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "student_id": [
                    "str",
                    "int",
                    "datetime.datetime"
                ],
                "new_level": [
                    "str",
                    "int",
                    "datetime.datetime"
                ]
            }
        }
    },
    "everyclass-server-master/everyclass/server/user/repo/user_id_sequence.py": {
        "new": {
            "name": "new",
            "location": 4,
            "return": [
                "int",
                "List[List[int]]",
                "str",
                "Tuple[int, int]",
                "List[Tuple[int, int]]"
            ],
            "arguments": {}
        },
        "init_table": {
            "name": "init_table",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "everyclass-server-master/everyclass/server/user/repo/visit_count.py": {
        "add_visitor_count": {
            "name": "add_visitor_count",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "identifier": [
                    "str"
                ],
                "visitor": [
                    "str"
                ]
            }
        },
        "get_visitor_count": {
            "name": "get_visitor_count",
            "location": 17,
            "return": [
                "int"
            ],
            "arguments": {
                "identifier": [
                    "str"
                ]
            }
        }
    },
    "everyclass-server-master/everyclass/server/user/repo/visit_track.py": {
        "update_track": {
            "name": "update_track",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [],
                "visitor": []
            }
        },
        "get_visitors": {
            "name": "get_visitors",
            "location": 17,
            "return": [],
            "arguments": {
                "identifier": []
            }
        }
    },
    "everyclass-server-master/everyclass/server/user/repo/__init__.py": {},
    "everyclass-server-master/everyclass/server/utils/api_helpers.py": {
        "generate_success_response": {
            "name": "generate_success_response",
            "location": 30,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "generate_error_response": {
            "name": "generate_error_response",
            "location": 36,
            "return": [],
            "arguments": {
                "obj": [],
                "status_code": [],
                "status_message_overwrite": [
                    "None"
                ]
            }
        },
        "token_required": {
            "name": "token_required",
            "location": 49,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "login_required": {
            "name": "login_required",
            "location": 71,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "token_required.wrapped": {
            "name": "wrapped",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "login_required.wrapped": {
            "name": "wrapped",
            "location": 75,
            "return": [],
            "arguments": {}
        }
    },
    "everyclass-server-master/everyclass/server/utils/base_exceptions.py": {
        "BizException.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status_message": [],
                "status_code": []
            }
        },
        "PermissionException.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status_message": [],
                "status_code": [
                    "None"
                ]
            }
        },
        "InvalidRequestException.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status_message": [],
                "status_code": [
                    "None"
                ]
            }
        },
        "InternalError.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status_message": [],
                "status_code": [
                    "None"
                ]
            }
        }
    },
    "everyclass-server-master/everyclass/server/utils/common_helpers.py": {
        "plugin_available": {
            "name": "plugin_available",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "plugin_name": [
                    "str"
                ]
            }
        },
        "get_ut_uid": {
            "name": "get_ut_uid",
            "location": 26,
            "return": [
                "Tuple[(str, Any)]"
            ],
            "arguments": {}
        },
        "get_logged_in_uid": {
            "name": "get_logged_in_uid",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "everyclass-server-master/everyclass/server/utils/encryption.py": {
        "_fill_16": {
            "name": "_fill_16",
            "location": 10,
            "return": [
                "bytes"
            ],
            "arguments": {
                "text": []
            }
        },
        "_aes_decrypt": {
            "name": "_aes_decrypt",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "aes_key": [],
                "aes_text": []
            }
        },
        "_aes_encrypt": {
            "name": "_aes_encrypt",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "aes_key": [],
                "aes_text": []
            }
        },
        "encrypt": {
            "name": "encrypt",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "resource_type": [
                    "str"
                ],
                "data": [
                    "str"
                ],
                "encryption_key": [
                    "str"
                ]
            }
        },
        "decrypt": {
            "name": "decrypt",
            "location": 79,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "data": [
                    "str"
                ],
                "encryption_key": [
                    "str"
                ],
                "resource_type": [
                    "str"
                ]
            }
        }
    },
    "everyclass-server-master/everyclass/server/utils/jsonable.py": {
        "to_json": {
            "name": "to_json",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": []
            }
        },
        "to_json_response": {
            "name": "to_json_response",
            "location": 39,
            "return": [
                "Response"
            ],
            "arguments": {
                "obj": []
            }
        },
        "JSONSerializable.__json_encode__": {
            "name": "__json_encode__",
            "location": 14,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdvancedJSONEncoder.default": {
            "name": "default",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        }
    },
    "everyclass-server-master/everyclass/server/utils/session.py": {
        "EncryptedSession.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial": [
                    "None"
                ]
            }
        },
        "EncryptedSessionInterface.open_session": {
            "name": "open_session",
            "location": 27,
            "return": [
                "EncryptedSession"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "request": []
            }
        },
        "EncryptedSessionInterface.save_session": {
            "name": "save_session",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "session": [],
                "response": []
            }
        },
        "EncryptedSession.__init__.on_update": {
            "name": "on_update",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "everyclass-server-master/everyclass/server/utils/web_consts.py": {},
    "everyclass-server-master/everyclass/server/utils/web_helpers.py": {
        "disallow_in_maintenance": {
            "name": "disallow_in_maintenance",
            "location": 16,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "url_semester_check": {
            "name": "url_semester_check",
            "location": 31,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "login_required": {
            "name": "login_required",
            "location": 45,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "_error_page": {
            "name": "_error_page",
            "location": 59,
            "return": [],
            "arguments": {
                "message": [],
                "sentry_capture": [
                    "bool"
                ],
                "log": [
                    "None"
                ]
            }
        },
        "handle_exception_with_error_page": {
            "name": "handle_exception_with_error_page",
            "location": 72,
            "return": [],
            "arguments": {
                "e": []
            }
        },
        "check_permission": {
            "name": "check_permission",
            "location": 101,
            "return": [
                "tuple[bool]",
                "tuple[typing.Optional[bool]]"
            ],
            "arguments": {
                "student": []
            }
        },
        "disallow_in_maintenance.wrapped": {
            "name": "wrapped",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "url_semester_check.wrapped": {
            "name": "wrapped",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "login_required.wrapped": {
            "name": "wrapped",
            "location": 51,
            "return": [],
            "arguments": {}
        }
    },
    "everyclass-server-master/everyclass/server/utils/__init__.py": {},
    "everyclass-server-master/everyclass/server/utils/config/default.py": {
        "LazyRefType.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "var_name": []
            }
        },
        "LazyRefType.link": {
            "name": "link",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "final_config": []
            }
        }
    },
    "everyclass-server-master/everyclass/server/utils/config/__init__.py": {
        "get_config": {
            "name": "get_config",
            "location": 12,
            "return": [
                "Type[MixedConfig]"
            ],
            "arguments": {}
        }
    },
    "everyclass-server-master/everyclass/server/utils/db/dao.py": {
        "MongoDAOBase.create_index": {
            "name": "create_index",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "COTeachingClass.get_id_by_card": {
            "name": "get_id_by_card",
            "location": 58,
            "return": [
                "int"
            ],
            "arguments": {
                "cls": [],
                "card": []
            }
        },
        "COTeachingClass.get_doc": {
            "name": "get_doc",
            "location": 102,
            "return": [
                "Optional[dict]"
            ],
            "arguments": {
                "cls": [],
                "cotc_id": [
                    "int"
                ]
            }
        },
        "COTeachingClass.create_index": {
            "name": "create_index",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "CourseReview.get_review": {
            "name": "get_review",
            "location": 132,
            "return": [
                "dict"
            ],
            "arguments": {
                "cls": [],
                "cotc_id": [
                    "int"
                ]
            }
        },
        "CourseReview.get_my_review": {
            "name": "get_my_review",
            "location": 173,
            "return": [
                "dict"
            ],
            "arguments": {
                "cls": [],
                "cotc_id": [
                    "int"
                ],
                "student_id": [
                    "str"
                ]
            }
        },
        "CourseReview.edit_my_review": {
            "name": "edit_my_review",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "cotc_id": [
                    "int"
                ],
                "student_id": [
                    "str"
                ],
                "rate": [
                    "int"
                ],
                "review": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "CourseReview.create_index": {
            "name": "create_index",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Redis.new_cotc_id": {
            "name": "new_cotc_id",
            "location": 199,
            "return": [
                "int"
            ],
            "arguments": {
                "cls": []
            }
        }
    },
    "everyclass-server-master/everyclass/server/utils/db/mongodb.py": {
        "init_pool": {
            "name": "init_pool",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "current_application": []
            }
        },
        "get_connection": {
            "name": "get_connection",
            "location": 12,
            "return": [],
            "arguments": {}
        }
    },
    "everyclass-server-master/everyclass/server/utils/db/postgres.py": {
        "register_model_to_base": {
            "name": "register_model_to_base",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "create_table": {
            "name": "create_table",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "init_pool": {
            "name": "init_pool",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "pg_conn_context": {
            "name": "pg_conn_context",
            "location": 44,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "everyclass-server-master/everyclass/server/utils/db/redis.py": {},
    "everyclass-server-master/everyclass/server/utils/db/__init__.py": {},
    "everyclass-server-master/everyclass/server/utils/db_migrate/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "everyclass-server-master/everyclass/server/utils/db_migrate/prod_versions/000b9794afd0_add_calendar_token_index.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "everyclass-server-master/everyclass/server/utils/db_migrate/prod_versions/5e04dbf30fb0_first_commit_for_prod.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "everyclass-server-master/everyclass/server/utils/db_migrate/staging_versions/0883574300ef_add_calendar_token_index.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "everyclass-server-master/everyclass/server/utils/db_migrate/staging_versions/7edc4e5ad74a_first_commit_for_staging.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "everyclass-server-master/tests/test_basic_function.py": {
        "TestCase1.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase1.tearDown": {
            "name": "tearDown",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase1.test_app_exists": {
            "name": "test_app_exists",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicFunctionTestCase.test_import_config": {
            "name": "test_import_config",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicFunctionTestCase.test_string_semester": {
            "name": "test_string_semester",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicFunctionTestCase.test_tuple_semester": {
            "name": "test_tuple_semester",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "everyclass-server-master/tests/test_utils.py": {
        "UtilTest.test_weeks_to_string": {
            "name": "test_weeks_to_string",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilTest.test_get_time_chinese": {
            "name": "test_get_time_chinese",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilTest.test_get_day_chinese": {
            "name": "test_get_day_chinese",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilTest.test_get_time": {
            "name": "test_get_time",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilTest.test_lesson_string_to_tuple": {
            "name": "test_lesson_string_to_tuple",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilTest.test_contains_chinese": {
            "name": "test_contains_chinese",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceIdentifierEncryptTest.test_encrypt": {
            "name": "test_encrypt",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceIdentifierEncryptTest.test_decrypt": {
            "name": "test_decrypt",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "everyclass-server-master/tests/__init__.py": {}
}
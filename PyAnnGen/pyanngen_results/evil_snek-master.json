{
    "evil_snek-master/evil_snek/app.py": {
        "create_folder": {
            "name": "create_folder",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "folder_path": [
                    "str"
                ]
            }
        },
        "report_character_properties": {
            "name": "report_character_properties",
            "location": 33,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "diablo_window_dimensions": [
                    "float",
                    "str"
                ]
            }
        },
        "report_belt": {
            "name": "report_belt",
            "location": 82,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "diablo_window_dimensions": [
                    "bool"
                ]
            }
        }
    },
    "evil_snek-master/evil_snek/devil_vision.py": {
        "bw_and_normalize": {
            "name": "bw_and_normalize",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "image": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "get_property_by_name": {
            "name": "get_property_by_name",
            "location": 40,
            "return": [
                "Union[(Descriptor, int)]"
            ],
            "arguments": {
                "target_name": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "get_property": {
            "name": "get_property",
            "location": 48,
            "return": [
                "int"
            ],
            "arguments": {
                "screenshot": [
                    "int",
                    "str",
                    "bool"
                ],
                "property": [
                    "int",
                    "Union[pandas.DataFrame,numpy.ndarray]"
                ]
            }
        },
        "post_process_property_screenshot": {
            "name": "post_process_property_screenshot",
            "location": 59,
            "return": [
                "str",
                "Dict",
                "numpy.ndarray",
                "Optional[Type]"
            ],
            "arguments": {
                "property_screenshot": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "post_processing_func": [
                    "int",
                    "str",
                    "Dict[str,Dict[str,Any]]",
                    "List[str]"
                ]
            }
        },
        "initialize_window_size": {
            "name": "initialize_window_size",
            "location": 73,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "window_parameters": [
                    "int",
                    "bool"
                ]
            }
        },
        "take_screenshot": {
            "name": "take_screenshot",
            "location": 88,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {
                "window_dimensions": [
                    "Callable",
                    "Tuple",
                    "numpy.ndarray"
                ]
            }
        },
        "save_image": {
            "name": "save_image",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "folder_path": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "filename": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "image": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "invert_image": {
            "name": "invert_image",
            "location": 99,
            "return": [
                "int",
                "Tuple"
            ],
            "arguments": {
                "image": [
                    "int",
                    "numpy.ndarray",
                    "numpy.array",
                    "str",
                    "Tuple[int,int,int]",
                    "float"
                ]
            }
        },
        "threshold_chracter_text": {
            "name": "threshold_chracter_text",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "image": [
                    "None",
                    "int",
                    "numpy.array",
                    "Optional[T]",
                    "numpy.ndarray"
                ]
            }
        },
        "get_number_from_ocr_location": {
            "name": "get_number_from_ocr_location",
            "location": 113,
            "return": [
                "int"
            ],
            "arguments": {
                "pixels_from_left": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "get_health_in_belt": {
            "name": "get_health_in_belt",
            "location": 140,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "screenshot": [
                    "str",
                    "bytes"
                ]
            }
        },
        "analyze_number_from_image": {
            "name": "analyze_number_from_image",
            "location": 166,
            "return": [
                "int"
            ],
            "arguments": {
                "image_to_analyse": [
                    "str",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "opencv_fun": {
            "name": "opencv_fun",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "window_dimensions": [
                    "Sequence[str]",
                    "int"
                ],
                "temp_data_path": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Descriptor.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict",
                    "Dict[str,Any]"
                ],
                "xstart": [
                    "bool",
                    "Callable",
                    "Mapping",
                    "int",
                    "Mapping[str,Any]"
                ],
                "xsize": [
                    "bool",
                    "Callable",
                    "Mapping",
                    "int",
                    "Mapping[str,Any]"
                ],
                "ystart": [
                    "bool",
                    "Callable",
                    "Mapping",
                    "int",
                    "Mapping[str,Any]"
                ],
                "post_processor": [
                    "int",
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        }
    },
    "evil_snek-master/evil_snek/fake_ui.py": {
        "initalize_window_handler": {
            "name": "initalize_window_handler",
            "location": 32,
            "return": [
                "Tuple[(Any, Union[(wintypes.RECT, List[int])])]"
            ],
            "arguments": {
                "window_title": [
                    "Text",
                    "Union[float,int]",
                    "Dict[str,str]",
                    "Type[T]",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Type"
                ]
            }
        },
        "press_button": {
            "name": "press_button",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "whnd": [
                    "str",
                    "float",
                    "int"
                ],
                "virtual_key": [
                    "str"
                ],
                "scan_code": [
                    "str",
                    "int",
                    "List[str]",
                    "Iterable[int]"
                ]
            }
        },
        "left_click": {
            "name": "left_click",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "whnd": [],
                "coordinates": []
            }
        }
    },
    "evil_snek-master/evil_snek/screenshot_cropper.py": {
        "custom_cropper": {
            "name": "custom_cropper",
            "location": 10,
            "return": [
                "Tuple[Tuple[int, Any]]"
            ],
            "arguments": {
                "character_tab_screenshot": [
                    "int",
                    "float",
                    "Callable",
                    "Optional[Union[int, float]]"
                ],
                "x_start_rel": [
                    "int",
                    "str",
                    "float"
                ],
                "x_size_rel": [
                    "int",
                    "str"
                ],
                "y_start_rel": [
                    "int",
                    "Sequence[int]",
                    "bytes"
                ]
            }
        },
        "crop_belt": {
            "name": "crop_belt",
            "location": 21,
            "return": [
                "Optional[int]",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "screenshot": [
                    "float",
                    "Callable",
                    "int",
                    "dict"
                ]
            }
        }
    },
    "evil_snek-master/tests/test_belt_accuracy.py": {
        "test_health_potion_detection_1440_0": {
            "name": "test_health_potion_detection_1440_0",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_health_potion_detection_1440_1": {
            "name": "test_health_potion_detection_1440_1",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "evil_snek-master/tests/test_belt_performance.py": {
        "test_health_potion_detection_1440_0": {
            "name": "test_health_potion_detection_1440_0",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "evil_snek-master/tests/test_character_tab_ocr.py": {
        "character_tab_test_helper": {
            "name": "character_tab_test_helper",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "test_chracter_sheet": [
                    "str",
                    "int",
                    "List",
                    "bool",
                    "Union[int,str]"
                ],
                "property_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "expected_value": [
                    "int",
                    "IO",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "test_crop_ocr_xp_1440_0": {
            "name": "test_crop_ocr_xp_1440_0",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_crop_ocr_nextlvl_xp_1440_0": {
            "name": "test_crop_ocr_nextlvl_xp_1440_0",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_crop_ocr_gold_1440_0": {
            "name": "test_crop_ocr_gold_1440_0",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_crop_ocr_hp_1440_0": {
            "name": "test_crop_ocr_hp_1440_0",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_crop_ocr_hp_max_1440_0": {
            "name": "test_crop_ocr_hp_max_1440_0",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_crop_ocr_mana_1440_0": {
            "name": "test_crop_ocr_mana_1440_0",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_crop_ocr_mana_max_1440_0": {
            "name": "test_crop_ocr_mana_max_1440_0",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_crop_ocr_xp_1440_1": {
            "name": "test_crop_ocr_xp_1440_1",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_crop_ocr_nextlvl_xp_1440_1": {
            "name": "test_crop_ocr_nextlvl_xp_1440_1",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_crop_ocr_gold_1440_1": {
            "name": "test_crop_ocr_gold_1440_1",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_crop_ocr_hp_1440_1": {
            "name": "test_crop_ocr_hp_1440_1",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_crop_ocr_hp_max_1440_1": {
            "name": "test_crop_ocr_hp_max_1440_1",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_crop_ocr_mana_1440_1": {
            "name": "test_crop_ocr_mana_1440_1",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_crop_ocr_mana_max_1440_1": {
            "name": "test_crop_ocr_mana_max_1440_1",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "evil_snek-master/tests/test_crop_and_ocr_performance.py": {
        "character_tab_test_helper": {
            "name": "character_tab_test_helper",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "property_name": [
                    "str",
                    "bool"
                ],
                "expected_value": [
                    "int",
                    "str",
                    "float",
                    "Union[str,List[str]]",
                    "List",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_crop_ocr_xp_1440_0_perf": {
            "name": "test_crop_ocr_xp_1440_0_perf",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "evil_snek-master/tests/__init__.py": {}
}
{
    "experi-master/setup.py": {
        "get_version": {
            "name": "get_version",
            "location": 13,
            "return": [],
            "arguments": {}
        }
    },
    "experi-master/docs/conf.py": {},
    "experi-master/examples/launch_experi.py": {},
    "experi-master/src/experi/commands.py": {
        "Command.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "Union[(str, List[str])]"
                ],
                "variables": [
                    "Dict[(str, Any)]"
                ],
                "creates": [
                    "str"
                ],
                "requires": [
                    "str"
                ]
            }
        },
        "Command.get_variables": {
            "name": "get_variables",
            "location": 57,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.creates": {
            "name": "creates",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Command.requires": {
            "name": "requires",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Command.cmd": {
            "name": "cmd",
            "location": 86,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Command._format_string": {
            "name": "_format_string",
            "location": 92,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ]
            }
        },
        "Command.__iter__": {
            "name": "__iter__",
            "location": 97,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.__str__": {
            "name": "__str__",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.__eq__": {
            "name": "__eq__",
            "location": 103,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Command.__hash__": {
            "name": "__hash__",
            "location": 108,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "commands": [],
                "scheduler_options": [
                    "None"
                ],
                "directory": [
                    "None"
                ],
                "use_dependencies": [
                    "bool"
                ]
            }
        },
        "Job.__iter__": {
            "name": "__iter__",
            "location": 132,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.__len__": {
            "name": "__len__",
            "location": 141,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.as_bash_array": {
            "name": "as_bash_array",
            "location": 144,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "experi-master/src/experi/run.py": {
        "combine_dictionaries": {
            "name": "combine_dictionaries",
            "location": 39,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "dicts": [
                    "List[Dict[(str, Any)]]"
                ]
            }
        },
        "iterator_zip": {
            "name": "iterator_zip",
            "location": 49,
            "return": [
                "Iterable[List[Dict[(str, Union[(float, int, str)])]]]"
            ],
            "arguments": {
                "variables": [
                    "Union[(float, str, Dict[(str, Union[(float, str)])], List[Union[(float, str)]])]"
                ],
                "parent": [
                    "str"
                ]
            }
        },
        "iterator_product": {
            "name": "iterator_product",
            "location": 69,
            "return": [
                "Iterable[List[Dict[(str, Union[(float, int, str)])]]]"
            ],
            "arguments": {
                "variables": [
                    "Union[(float, str, Dict[(str, Union[(float, str)])], List[Union[(float, str)]])]"
                ],
                "parent": [
                    "str"
                ]
            }
        },
        "iterator_chain": {
            "name": "iterator_chain",
            "location": 90,
            "return": [
                "Iterable[List[Dict[(str, Union[(float, int, str)])]]]"
            ],
            "arguments": {
                "variables": [
                    "Union[(float, str, Dict[(str, Union[(float, str)])], List[Union[(float, str)]])]"
                ],
                "parent": [
                    "str"
                ]
            }
        },
        "arange": {
            "name": "arange",
            "location": 117,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "start": [
                    "None"
                ],
                "stop": [
                    "None"
                ],
                "step": [
                    "None"
                ],
                "dtype": [
                    "None"
                ]
            }
        },
        "iterator_arange": {
            "name": "iterator_arange",
            "location": 123,
            "return": [
                "Iterable[List[Dict[(str, Union[(float, int, str)])]]]"
            ],
            "arguments": {
                "variables": [
                    "Union[(float, str, Dict[(str, Union[(float, str)])], List[Union[(float, str)]])]"
                ],
                "parent": [
                    "str"
                ]
            }
        },
        "iterator_cycle": {
            "name": "iterator_cycle",
            "location": 149,
            "return": [
                "Iterable[List[Dict[(str, Union[(float, int, str)])]]]"
            ],
            "arguments": {
                "variables": [
                    "Union[(float, str, Dict[(str, Union[(float, str)])], List[Union[(float, str)]])]"
                ],
                "parent": [
                    "str"
                ]
            }
        },
        "variable_matrix": {
            "name": "variable_matrix",
            "location": 174,
            "return": [
                "Iterable[Dict[(str, Union[(float, int, str)])]]"
            ],
            "arguments": {
                "variables": [
                    "Union[(float, str, Dict[(str, Union[(float, str)])], List[Union[(float, str)]])]"
                ],
                "parent": [
                    "str"
                ],
                "iterator": [
                    "str"
                ]
            }
        },
        "uniqueify": {
            "name": "uniqueify",
            "location": 229,
            "return": [
                "list"
            ],
            "arguments": {
                "my_list": []
            }
        },
        "process_jobs": {
            "name": "process_jobs",
            "location": 241,
            "return": [
                "Iterator[experi.commands.Job]"
            ],
            "arguments": {
                "jobs": [
                    "List[dict]"
                ],
                "matrix": [
                    "List[Dict[(str, Union[(float, str)])]]"
                ],
                "scheduler_options": [
                    "Dict[(str, Any)]"
                ],
                "directory": [
                    "pathlib.Path"
                ],
                "use_dependencies": [
                    "bool"
                ]
            }
        },
        "process_command": {
            "name": "process_command",
            "location": 263,
            "return": [
                "List[experi.commands.Command]"
            ],
            "arguments": {
                "command": [
                    "Union[(str, Dict[(str, Union[(float, str)])])]"
                ],
                "matrix": [
                    "List[Dict[(str, Union[(float, str)])]]"
                ]
            }
        },
        "read_file": {
            "name": "read_file",
            "location": 289,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "filename": [
                    "Union[(str, pathlib.Path)]"
                ]
            }
        },
        "process_structure": {
            "name": "process_structure",
            "location": 298,
            "return": [
                "Iterator[experi.commands.Job]"
            ],
            "arguments": {
                "structure": [
                    "Dict[(str, Any)]"
                ],
                "scheduler": [
                    "str"
                ],
                "directory": [
                    "pathlib.Path"
                ],
                "use_dependencies": [
                    "bool"
                ]
            }
        },
        "run_jobs": {
            "name": "run_jobs",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "jobs": [
                    "Iterator[experi.commands.Job]"
                ],
                "scheduler": [
                    "str"
                ],
                "directory": [],
                "dry_run": [
                    "bool"
                ]
            }
        },
        "run_bash_jobs": {
            "name": "run_bash_jobs",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "jobs": [
                    "Iterator[experi.commands.Job]"
                ],
                "directory": [
                    "Union[(str, pathlib.Path)]"
                ],
                "dry_run": [
                    "bool"
                ]
            }
        },
        "run_scheduler_jobs": {
            "name": "run_scheduler_jobs",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "scheduler": [
                    "str"
                ],
                "jobs": [
                    "Iterator[experi.commands.Job]"
                ],
                "directory": [
                    "Union[(str, pathlib.Path)]"
                ],
                "basename": [
                    "str"
                ],
                "dry_run": [
                    "bool"
                ]
            }
        },
        "determine_scheduler": {
            "name": "determine_scheduler",
            "location": 485,
            "return": [
                "str"
            ],
            "arguments": {
                "scheduler": [
                    "Optional[str]"
                ],
                "experiment_definition": [
                    "Dict[(str, Union[(float, str)])]"
                ]
            }
        },
        "_set_verbosity": {
            "name": "_set_verbosity",
            "location": 516,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [],
                "param": [],
                "value": []
            }
        },
        "launch": {
            "name": "launch",
            "location": 523,
            "return": [
                "None"
            ],
            "arguments": {
                "input_file": [
                    "typing.Text"
                ],
                "use_dependencies": [
                    "bool"
                ],
                "dry_run": [
                    "bool"
                ],
                "scheduler": [
                    "None"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 577,
            "return": [
                "None"
            ],
            "arguments": {
                "input_file": [],
                "use_dependencies": [],
                "dry_run": [],
                "scheduler": []
            }
        }
    },
    "experi-master/src/experi/scheduler.py": {
        "parse_setup": {
            "name": "parse_setup",
            "location": 281,
            "return": [
                "str"
            ],
            "arguments": {
                "options": [
                    "Union[(list, str)]"
                ]
            }
        },
        "create_header_string": {
            "name": "create_header_string",
            "location": 293,
            "return": [
                "str"
            ],
            "arguments": {
                "scheduler": [
                    "str"
                ]
            }
        },
        "get_array_string": {
            "name": "get_array_string",
            "location": 302,
            "return": [
                "str"
            ],
            "arguments": {
                "scheduler": [
                    "str"
                ],
                "num_commands": [
                    "int"
                ]
            }
        },
        "create_scheduler_file": {
            "name": "create_scheduler_file",
            "location": 318,
            "return": [
                "str"
            ],
            "arguments": {
                "scheduler": [
                    "str"
                ],
                "job": [
                    "experi.commands.Job"
                ]
            }
        },
        "SchedulerOptions.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchedulerOptions.create_header": {
            "name": "create_header",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchedulerOptions.get_name": {
            "name": "get_name",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchedulerOptions.get_resources": {
            "name": "get_resources",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchedulerOptions.get_project": {
            "name": "get_project",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchedulerOptions.get_times": {
            "name": "get_times",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchedulerOptions.get_logging": {
            "name": "get_logging",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchedulerOptions.get_mail": {
            "name": "get_mail",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchedulerOptions.get_arbitrary_keys": {
            "name": "get_arbitrary_keys",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShellOptions.get_resources": {
            "name": "get_resources",
            "location": 130,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShellOptions.get_times": {
            "name": "get_times",
            "location": 136,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShellOptions.get_project": {
            "name": "get_project",
            "location": 142,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShellOptions.get_logging": {
            "name": "get_logging",
            "location": 145,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShellOptions.get_arbitrary_keys": {
            "name": "get_arbitrary_keys",
            "location": 148,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShellOptions.get_name": {
            "name": "get_name",
            "location": 155,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShellOptions.get_mail": {
            "name": "get_mail",
            "location": 158,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShellOptions.create_header": {
            "name": "create_header",
            "location": 163,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PBSOptions.get_resources": {
            "name": "get_resources",
            "location": 177,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PBSOptions.get_times": {
            "name": "get_times",
            "location": 183,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PBSOptions.get_project": {
            "name": "get_project",
            "location": 189,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PBSOptions.get_logging": {
            "name": "get_logging",
            "location": 194,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PBSOptions.get_arbitrary_keys": {
            "name": "get_arbitrary_keys",
            "location": 206,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PBSOptions.get_name": {
            "name": "get_name",
            "location": 216,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PBSOptions.get_mail": {
            "name": "get_mail",
            "location": 219,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SLURMOptions.get_resources": {
            "name": "get_resources",
            "location": 231,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SLURMOptions.get_times": {
            "name": "get_times",
            "location": 242,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SLURMOptions.get_project": {
            "name": "get_project",
            "location": 245,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SLURMOptions.get_logging": {
            "name": "get_logging",
            "location": 250,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SLURMOptions.get_arbitrary_keys": {
            "name": "get_arbitrary_keys",
            "location": 257,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SLURMOptions.get_name": {
            "name": "get_name",
            "location": 267,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SLURMOptions.get_mail": {
            "name": "get_mail",
            "location": 270,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "experi-master/src/experi/version.py": {},
    "experi-master/src/experi/__init__.py": {},
    "experi-master/test/cli_test.py": {
        "runner": {
            "name": "runner",
            "location": 22,
            "return": [
                "typing.Generator[CliRunner]"
            ],
            "arguments": {}
        },
        "test_version": {
            "name": "test_version",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": []
            }
        },
        "test_missing_input_file": {
            "name": "test_missing_input_file",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": []
            }
        },
        "test_file": {
            "name": "test_file",
            "location": 46,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "test_dry_run": {
            "name": "test_dry_run",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [],
                "test_file": [],
                "scheduler": []
            }
        }
    },
    "experi-master/test/commands_test.py": {
        "test_command_simple": {
            "name": "test_command_simple",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_command_substitution": {
            "name": "test_command_substitution",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_creates_substitution": {
            "name": "test_creates_substitution",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_requires_substitution": {
            "name": "test_requires_substitution",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_creates_complex_substitution": {
            "name": "test_creates_complex_substitution",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_requires_complex_substitution": {
            "name": "test_requires_complex_substitution",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_hashable_command": {
            "name": "test_hashable_command",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_uniqueify_command": {
            "name": "test_uniqueify_command",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_command_equality": {
            "name": "test_command_equality",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cmd_list": {
            "name": "test_cmd_list",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_variables": {
            "name": "test_get_variables",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "variables": []
            }
        },
        "test_get_variables_empty": {
            "name": "test_get_variables_empty",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_command_init": {
            "name": "test_command_init",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_job_length": {
            "name": "test_job_length",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_job_length_depends": {
            "name": "test_job_length_depends",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_dir": []
            }
        },
        "test_command_equality.Subcommand.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cmd": []
            }
        }
    },
    "experi-master/test/conftest.py": {
        "tmp_dir": {
            "name": "tmp_dir",
            "location": 18,
            "return": [
                "typing.Generator[Path]"
            ],
            "arguments": {}
        }
    },
    "experi-master/test/examples_test.py": {
        "runner": {
            "name": "runner",
            "location": 19,
            "return": [
                "typing.Generator[CliRunner]"
            ],
            "arguments": {}
        },
        "example_files": {
            "name": "example_files",
            "location": 23,
            "return": [
                "Generator[(str, Any, None)]"
            ],
            "arguments": {}
        },
        "test_examples": {
            "name": "test_examples",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [],
                "filename": []
            }
        }
    },
    "experi-master/test/experirun_test.py": {
        "test_command": {
            "name": "test_command",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "experi-master/test/iter_test.py": {
        "test_behaviour": {
            "name": "test_behaviour",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "test_file": []
            }
        }
    },
    "experi-master/test/range_test.py": {
        "get_ranges": {
            "name": "get_ranges",
            "location": 20,
            "return": [
                "List[Tuple[(str, list)]]"
            ],
            "arguments": {}
        },
        "parse_string": {
            "name": "parse_string",
            "location": 54,
            "return": [
                "List[Dict[(str, Union[(float, int, str)])]]"
            ],
            "arguments": {
                "string": []
            }
        },
        "generate_comparison": {
            "name": "generate_comparison",
            "location": 59,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "values": []
            }
        },
        "test_range": {
            "name": "test_range",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "string": [],
                "expected": []
            }
        },
        "test_stop_required": {
            "name": "test_stop_required",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_range_errors": {
            "name": "test_range_errors",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "create_string": {
            "name": "create_string",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "start": [],
                "stop": [],
                "step": [],
                "dtype": []
            }
        },
        "test_values": {
            "name": "test_values",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "start": [],
                "stop": [],
                "step": [],
                "dtype": []
            }
        }
    },
    "experi-master/test/run_test.py": {
        "create_jobs": {
            "name": "create_jobs",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "test_bash_operators": {
            "name": "test_bash_operators",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_dir": [],
                "create_jobs": [],
                "command": []
            }
        },
        "test_process_scheduler": {
            "name": "test_process_scheduler",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "structure": []
            }
        },
        "test_dependencies": {
            "name": "test_dependencies",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_dir": []
            }
        },
        "test_dependencies_list": {
            "name": "test_dependencies_list",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_dir": []
            }
        },
        "test_dry_run": {
            "name": "test_dry_run",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_dir": []
            }
        },
        "test_launch": {
            "name": "test_launch",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "scheduler": [],
                "dry_run": [],
                "use_dependencies": []
            }
        },
        "create_jobs._create_jobs": {
            "name": "_create_jobs",
            "location": 22,
            "return": [
                "typing.Generator[Job]"
            ],
            "arguments": {
                "command": []
            }
        }
    },
    "experi-master/test/scheduler_test.py": {
        "test_jobs_as_bash_array": {
            "name": "test_jobs_as_bash_array",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "job": [],
                "result": []
            }
        },
        "test_default_files": {
            "name": "test_default_files",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "scheduler": [],
                "expected": []
            }
        },
        "test_scheduler_creation": {
            "name": "test_scheduler_creation",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_dir": [],
                "scheduler": []
            }
        },
        "scheduler": {
            "name": "scheduler",
            "location": 94,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "TestHeader.test_project": {
            "name": "test_project",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scheduler": []
            }
        },
        "TestHeader.test_mail": {
            "name": "test_mail",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scheduler": []
            }
        }
    },
    "experi-master/test/variables_test.py": {
        "test_variable_generality": {
            "name": "test_variable_generality",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "variable_start": [],
                "variable_end": []
            }
        }
    }
}
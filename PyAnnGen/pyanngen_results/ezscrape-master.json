{
    "ezscrape-master/setup.py": {},
    "ezscrape-master/ezscrape/project_logger.py": {
        "setup_logger": {
            "name": "setup_logger",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "log_file_path": [
                    "str"
                ]
            }
        },
        "test_logging": {
            "name": "test_logging",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ezscrape-master/ezscrape/__init__.py": {},
    "ezscrape-master/ezscrape/scraping/core.py": {
        "WaitForPageElem.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wait_type": [
                    "WaitForPageType"
                ],
                "wait_text": [
                    "str"
                ]
            }
        },
        "WaitForPageElem.wait_text": {
            "name": "wait_text",
            "location": 53,
            "return": [
                "None",
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "new_wait_text": [
                    "str",
                    "T",
                    "Dict[str, Any]",
                    "Dict[str, T]",
                    "bool"
                ]
            }
        },
        "WaitForPageElem.wait_type": {
            "name": "wait_type",
            "location": 67,
            "return": [
                "None",
                "int",
                "str",
                "typing.Final",
                "typing.Type",
                "set[str]",
                "set[int]"
            ],
            "arguments": {
                "self": [],
                "new_wait_type": [
                    "Union[str, 'Type']",
                    "Type"
                ]
            }
        },
        "WaitForXpathElem.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xpath": [
                    "str"
                ]
            }
        },
        "ScrapeConfig.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "ScrapeConfig.url": {
            "name": "url",
            "location": 110,
            "return": [
                "None",
                "str"
            ],
            "arguments": {
                "self": [],
                "new_url": [
                    "str",
                    "Callable[[str], str]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "ScrapeConfig.__str__": {
            "name": "__str__",
            "location": 116,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrapeResult.__init__": {
            "name": "__init__",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "ScrapeResult.request_time_ms": {
            "name": "request_time_ms",
            "location": 143,
            "return": [
                "float",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrapeResult.first_page": {
            "name": "first_page",
            "location": 151,
            "return": [
                "None",
                "str",
                "Optional[str]",
                "Optional[List[Any]]",
                "list",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrapeResult.add_scrape_page": {
            "name": "add_scrape_page",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "html": [
                    "str"
                ]
            }
        },
        "ScrapeResult.__iter__": {
            "name": "__iter__",
            "location": 167,
            "return": [
                "Iterator[ScrapePage]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrapeResult.__next__": {
            "name": "__next__",
            "location": 171,
            "return": [
                "ScrapePage"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrapeResult.__len__": {
            "name": "__len__",
            "location": 179,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrapeResult.__bool__": {
            "name": "__bool__",
            "location": 182,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scraper.__init__": {
            "name": "__init__",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "ScrapeConfig"
                ]
            }
        },
        "Scraper._validate_config": {
            "name": "_validate_config",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "tuple",
                    "tuple[]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "config": [
                    "ScrapeConfig"
                ]
            }
        },
        "Scraper.config": {
            "name": "config",
            "location": 205,
            "return": [
                "None",
                "dict[, ]",
                "dict[str, typing.Union[int,str,typing.Any]]",
                "dict[str, int]",
                "dict[str, dict[, ]]",
                "typing.Type"
            ],
            "arguments": {
                "self": [],
                "new_config": [
                    "Optional[Dict[str, Any]]",
                    "List[str]",
                    "dict",
                    "Type['BaseConfig']",
                    "Dict[str, Any]"
                ]
            }
        },
        "Scraper.scrape": {
            "name": "scrape",
            "location": 216,
            "return": [
                "ScrapeResult"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scraper.__str__": {
            "name": "__str__",
            "location": 220,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ezscrape-master/ezscrape/scraping/exceptions.py": {},
    "ezscrape-master/ezscrape/scraping/scraper.py": {
        "scrape_url": {
            "name": "scrape_url",
            "location": 26,
            "return": [
                "core.ScrapeResult"
            ],
            "arguments": {
                "config": [
                    "core.ScrapeConfig"
                ]
            }
        },
        "is_local_address": {
            "name": "is_local_address",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "check_url": {
            "name": "check_url",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        }
    },
    "ezscrape-master/ezscrape/scraping/scraper_requests.py": {
        "RequestsScraper.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "core.ScrapeConfig"
                ]
            }
        },
        "RequestsScraper.scrape": {
            "name": "scrape",
            "location": 26,
            "return": [
                "core.ScrapeResult"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestsScraper._get_caller_ip": {
            "name": "_get_caller_ip",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "requests.models.Response"
                ]
            }
        },
        "RequestsScraper._validate_config": {
            "name": "_validate_config",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "tuple",
                    "tuple[]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "config": [
                    "core.ScrapeConfig"
                ]
            }
        }
    },
    "ezscrape-master/ezscrape/scraping/scraper_selenium.py": {
        "get_by_type_from_page_wait_element": {
            "name": "get_by_type_from_page_wait_element",
            "location": 291,
            "return": [
                "webdriver.common.by.By"
            ],
            "arguments": {
                "wait_element": [
                    "core.WaitForPageType"
                ]
            }
        },
        "WaitCondition.key": {
            "name": "key",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScraperWait.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conditions": [
                    "List[WaitCondition]"
                ]
            }
        },
        "ScraperWait.__call__": {
            "name": "__call__",
            "location": 74,
            "return": [
                "Union[(bool, webdriver.remote.webelement.WebElement)]"
            ],
            "arguments": {
                "self": [],
                "driver": [
                    "webdriver.remote.webdriver.WebDriver"
                ]
            }
        },
        "ScraperWait._find_element": {
            "name": "_find_element",
            "location": 112,
            "return": [
                "webdriver.remote.webelement.WebElement"
            ],
            "arguments": {
                "driver": [
                    "webdriver.remote.webdriver.WebDriver"
                ],
                "locator": [
                    "Tuple[(webdriver.common.by.By, str)]"
                ]
            }
        },
        "SeleniumChromeSession.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeleniumChromeSession.__enter__": {
            "name": "__enter__",
            "location": 183,
            "return": [
                "webdriver.remote.webdriver.WebDriver"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeleniumChromeSession.__exit__": {
            "name": "__exit__",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "BaseException",
                    "Exception",
                    "Type[BaseException]",
                    "type",
                    "str"
                ]
            }
        },
        "SeleniumChromeScraper.__init__": {
            "name": "__init__",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "core.ScrapeConfig"
                ]
            }
        },
        "SeleniumChromeScraper.scrape": {
            "name": "scrape",
            "location": 199,
            "return": [
                "core.ScrapeResult"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeleniumChromeScraper._scrape_with_driver": {
            "name": "_scrape_with_driver",
            "location": 208,
            "return": [
                "core.ScrapeResult"
            ],
            "arguments": {
                "self": [],
                "driver": [
                    "webdriver.chrome.webdriver.WebDriver"
                ]
            }
        }
    },
    "ezscrape-master/ezscrape/scraping/web_lib.py": {
        "random_useragent": {
            "name": "random_useragent",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "phrase_from_response_code": {
            "name": "phrase_from_response_code",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "code": [
                    "int"
                ]
            }
        },
        "split_url": {
            "name": "split_url",
            "location": 37,
            "return": [
                "UrlSplit"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        }
    },
    "ezscrape-master/ezscrape/scraping/__init__.py": {},
    "ezscrape-master/tests/common.py": {
        "whatsmyip_ip_from_html": {
            "name": "whatsmyip_ip_from_html",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "html": [
                    "str"
                ]
            }
        }
    },
    "ezscrape-master/tests/__init__.py": {},
    "ezscrape-master/tests/scraping/test_core.py": {
        "test_WaitForPageElem_ok": {
            "name": "test_WaitForPageElem_ok",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_WaitForPageElem_invalid_text": {
            "name": "test_WaitForPageElem_invalid_text",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_WaitForPageElem_invalid_type": {
            "name": "test_WaitForPageElem_invalid_type",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_WaitForXpathElem_ok": {
            "name": "test_WaitForXpathElem_ok",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_WaitForXpathElem_invalid_text": {
            "name": "test_WaitForXpathElem_invalid_text",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scrape_config_default_values_set": {
            "name": "test_scrape_config_default_values_set",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scrape_config_set_invalid_url": {
            "name": "test_scrape_config_set_invalid_url",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "invalid_url": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_scrape_result_single_page_not_found": {
            "name": "test_scrape_result_single_page_not_found",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scrape_result_single_page_found": {
            "name": "test_scrape_result_single_page_found",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scrape_result_no_pages": {
            "name": "test_scrape_result_no_pages",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scrape_result_page_count": {
            "name": "test_scrape_result_page_count",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scrape_result_multiple_pages_added": {
            "name": "test_scrape_result_multiple_pages_added",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scrape_result_overall_request_time": {
            "name": "test_scrape_result_overall_request_time",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scraper_scrape_not_implemented": {
            "name": "test_scraper_scrape_not_implemented",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scraper_valid_config": {
            "name": "test_scraper_valid_config",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scraper_invalid_config": {
            "name": "test_scraper_invalid_config",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ezscrape-master/tests/scraping/test_exceptions.py": {},
    "ezscrape-master/tests/scraping/test_scraper.py": {
        "test_scrape_url_scraper_no_js": {
            "name": "test_scrape_url_scraper_no_js",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_scrape_url_scraper_js": {
            "name": "test_scrape_url_scraper_js",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_is_local_address": {
            "name": "test_is_local_address",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "is_local": [
                    "str"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "test_local_test_server_running": {
            "name": "test_local_test_server_running",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_check_url_online": {
            "name": "test_check_url_online",
            "location": 91,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_check_url_local_only_exception": {
            "name": "test_check_url_local_only_exception",
            "location": 100,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "ezscrape-master/tests/scraping/test_scraper_requests.py": {
        "test_requests_scraper_valid_config": {
            "name": "test_requests_scraper_valid_config",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_requests_scraper_invalid_config": {
            "name": "test_requests_scraper_invalid_config",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "xpath_located": [
                    "List[str]",
                    "bool",
                    "list[str]",
                    "List[Tuple[str, Any]]",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ],
                "xpath_next": [
                    "List[str]",
                    "bool",
                    "list[str]",
                    "List[Tuple[str, Any]]",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ],
                "wait_for_load": [
                    "List[str]",
                    "bool",
                    "list[str]",
                    "List[Tuple[str, Any]]",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ]
            }
        },
        "test_requests_scraper_scrape_ok": {
            "name": "test_requests_scraper_scrape_ok",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_requests_bad_url": {
            "name": "test_requests_bad_url",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_requests_scraper_scrape_timeout": {
            "name": "test_requests_scraper_scrape_timeout",
            "location": 92,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_proxies": {
            "name": "test_proxies",
            "location": 121,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Optional[Dict]",
                    "Optional[str]",
                    "Optional",
                    "bool",
                    "Dict[str, Any]"
                ],
                "http_proxy": [],
                "https_proxy": []
            }
        }
    },
    "ezscrape-master/tests/scraping/test_scraper_selenium.py": {
        "test_selenium_scraper_valid_config": {
            "name": "test_selenium_scraper_valid_config",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_selenium_scraper_invalid_config": {
            "name": "test_selenium_scraper_invalid_config",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_by_type_from_page_wait_element_all_handled": {
            "name": "test_get_by_type_from_page_wait_element_all_handled",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_by_type_from_page_wait_element": {
            "name": "test_get_by_type_from_page_wait_element",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "wait_type": [
                    "str",
                    "Type[Any]",
                    "BaseException",
                    "typing.Type",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "expected_by_type": [
                    "str",
                    "Type[Any]",
                    "BaseException",
                    "typing.Type",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_get_by_type_from_page_wait_element_invalid": {
            "name": "test_get_by_type_from_page_wait_element_invalid",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_selenium_scraper_scrape_ok_single_page": {
            "name": "test_selenium_scraper_scrape_ok_single_page",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "bool"
                ],
                "javascript": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_selenium_scraper_page_load_wait_not_enough_time": {
            "name": "test_selenium_scraper_page_load_wait_not_enough_time",
            "location": 83,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_selenium_scraper_page_load_wait_enough_time": {
            "name": "test_selenium_scraper_page_load_wait_enough_time",
            "location": 95,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_selenium_scraper_scrape_wait_for_xpath": {
            "name": "test_selenium_scraper_scrape_wait_for_xpath",
            "location": 111,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_selenium_scraper_scrape_paging": {
            "name": "test_selenium_scraper_scrape_paging",
            "location": 129,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_selenium_chrome_good_scrape_max_next_page_reached": {
            "name": "test_selenium_chrome_good_scrape_max_next_page_reached",
            "location": 146,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_selenium_chrome_context_manager_good_scrape": {
            "name": "test_selenium_chrome_context_manager_good_scrape",
            "location": 157,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_selenium_invalid_url": {
            "name": "test_selenium_invalid_url",
            "location": 175,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_selenium_url_not_reachable": {
            "name": "test_selenium_url_not_reachable",
            "location": 186,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_selenium_scrape_timeout": {
            "name": "test_selenium_scrape_timeout",
            "location": 200,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_selenium_limit_pages": {
            "name": "test_selenium_limit_pages",
            "location": 214,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_class_WaitCondition": {
            "name": "test_class_WaitCondition",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_class_ScraperWait_timeout": {
            "name": "test_class_ScraperWait_timeout",
            "location": 229,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_class_ScraperWait_timeout_1_of_2_must_haves": {
            "name": "test_class_ScraperWait_timeout_1_of_2_must_haves",
            "location": 251,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_class_ScraperWait_logic_type_combos": {
            "name": "test_class_ScraperWait_logic_type_combos",
            "location": 284,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "wait_logic": [
                    "str",
                    "Dict[str, Any]",
                    "float",
                    "dict[str, typing.Any]",
                    "int",
                    "dict",
                    "dict[, ]"
                ],
                "wait_type": [
                    "str",
                    "Dict[str, Any]",
                    "float",
                    "dict[str, typing.Any]",
                    "int",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_class_ScraperWait_1_of_2_might_haves": {
            "name": "test_class_ScraperWait_1_of_2_might_haves",
            "location": 305,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "ezscrape-master/tests/scraping/test_web_lib.py": {
        "test_phrase_from_response_code": {
            "name": "test_phrase_from_response_code",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_phrase_from_response_code_invalid_code": {
            "name": "test_phrase_from_response_code_invalid_code",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_split_url": {
            "name": "test_split_url",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
{
    "f-master/setup.py": {},
    "f-master/f/applicative.py": {
        "Applicative.pure": {
            "name": "pure",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "value": [
                    "int",
                    "complex",
                    "Tuple[str, int]",
                    "tuple[typing.Union[str,int]]",
                    "list",
                    "list[]"
                ]
            }
        },
        "Applicative.apply": {
            "name": "apply",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "typing.Callable[, ]",
                    "Callable",
                    "T"
                ]
            }
        },
        "Applicative.__mul__": {
            "name": "__mul__",
            "location": 14,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "str",
                    "bool",
                    "tuple[typing.Union[str,str,int]]",
                    "Tuple[str, str, int]",
                    "float",
                    "typing.Callable[, ]",
                    "int",
                    "Callable",
                    "list[str]",
                    "List[str]"
                ]
            }
        }
    },
    "f-master/f/functor.py": {
        "Functor.fmap": {
            "name": "fmap",
            "location": 10,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "fu": [
                    "str",
                    "int",
                    "Optional[bool]"
                ],
                "f": [
                    "str",
                    "int",
                    "Optional[bool]",
                    "None"
                ]
            }
        },
        "Functor.map": {
            "name": "map",
            "location": 14,
            "return": [
                "'Functor[B]'",
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "typing.Callable[, ]",
                    "Callable",
                    "T"
                ]
            }
        },
        "Functor.__or__": {
            "name": "__or__",
            "location": 18,
            "return": [
                "'Functor[B]'",
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "typing.Callable[, ]",
                    "Callable",
                    "T"
                ]
            }
        }
    },
    "f-master/f/list.py": {
        "List.empty": {
            "name": "empty",
            "location": 13,
            "return": [
                "List",
                "List[str]",
                "List[T]",
                "str"
            ],
            "arguments": {}
        },
        "List.pure": {
            "name": "pure",
            "location": 18,
            "return": [
                "List",
                "List[str]",
                "Set[str]"
            ],
            "arguments": {
                "value": [
                    "float",
                    "int",
                    "T"
                ]
            }
        },
        "List.__or__": {
            "name": "__or__",
            "location": 21,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "str",
                    "bool",
                    "tuple[typing.Union[str,str,int]]",
                    "Tuple[str, str, int]",
                    "float",
                    "typing.Callable[, ]",
                    "int",
                    "Callable",
                    "list[str]",
                    "List[str]"
                ]
            }
        },
        "List.append": {
            "name": "append",
            "location": 24,
            "return": [
                "List",
                "List[str]",
                "Dict[int, int]",
                "str",
                "list",
                "List[List[str]]"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "set[str]",
                    "Set[str]",
                    "str",
                    "list[]",
                    "Iterable[Any]",
                    "list"
                ]
            }
        },
        "List.__contains__": {
            "name": "__contains__",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "Callable",
                    "bool"
                ]
            }
        },
        "List.__add__": {
            "name": "__add__",
            "location": 30,
            "return": [
                "list[typing.Union[dict[, ],list[str],typing.AbstractSet,str]]",
                "bool",
                "pymatgen.util.Vector3Like",
                "Optional[int]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict[, ]",
                    "dict",
                    "list[str]",
                    "str",
                    "List[str]",
                    "typing.AbstractSet",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "List.__len__": {
            "name": "__len__",
            "location": 33,
            "return": [
                "int",
                "str",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "List.__iter__": {
            "name": "__iter__",
            "location": 36,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "List.bind": {
            "name": "bind",
            "location": 39,
            "return": [
                "tuple",
                "bool"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "typing.Type",
                    "int",
                    "Type[\"SerializationDialect\"]",
                    "typing.Iterable[]",
                    "Iterable",
                    "dict"
                ]
            }
        },
        "List.skip": {
            "name": "skip",
            "location": 42,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "str",
                    "float",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "List.__and__": {
            "name": "__and__",
            "location": 45,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "List.__rshift__": {
            "name": "__rshift__",
            "location": 48,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "str",
                    "bool",
                    "tuple[typing.Union[str,str,int]]",
                    "Tuple[str, str, int]",
                    "float",
                    "typing.Callable[, ]",
                    "int",
                    "Callable",
                    "list[str]",
                    "List[str]"
                ]
            }
        },
        "List.__getitem__": {
            "name": "__getitem__",
            "location": 51,
            "return": [
                "str",
                "bytes",
                "Dict[Tuple[str, str], Tuple[float, float]]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "List.reverse": {
            "name": "reverse",
            "location": 55,
            "return": [
                "List",
                "list",
                "str",
                "List[T]",
                "List['Frame']"
            ],
            "arguments": {
                "self": []
            }
        },
        "List.filter": {
            "name": "filter",
            "location": 58,
            "return": [
                "List",
                "str",
                "bool",
                "Optional[Union[str, Any]]",
                "list"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        },
        "List.reduce": {
            "name": "reduce",
            "location": 61,
            "return": [
                "int",
                "Dict[str, int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "typing.Iterable[typing.Any]",
                    "int",
                    "Iterable[Any]",
                    "typing.Callable[..., None]",
                    "Callable[..., None]",
                    "Callable"
                ],
                "initial": [
                    "typing.Iterable[typing.Any]",
                    "int",
                    "Iterable[Any]",
                    "typing.Callable[..., None]",
                    "Callable[..., None]",
                    "Callable"
                ]
            }
        },
        "List.head": {
            "name": "head",
            "location": 65,
            "return": [
                "None",
                "int",
                "bool",
                "Union[int, Tuple[int, ...]]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "List.__reversed__": {
            "name": "__reversed__",
            "location": 68,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "List.tail": {
            "name": "tail",
            "location": 72,
            "return": [
                "List",
                "List[str]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "List.map": {
            "name": "map",
            "location": 75,
            "return": [
                "List",
                "List[Dict]",
                "List[str]",
                "List[int]",
                "str",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "typing.Callable[, ]",
                    "Callable",
                    "typing.Mapping",
                    "typing.IO",
                    "Mapping[str, Any]",
                    "IO[bytes]",
                    "\"SpeciesNameComplex\"",
                    "Callable[[], Any]"
                ]
            }
        },
        "List.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "tuple[typing.Union[float,float]]",
                    "list[str]",
                    "int",
                    "Sequence[Any]",
                    "Tuple[float, float]",
                    "Union[int, float]",
                    "List[str]",
                    "Iterable[int]",
                    "float"
                ]
            }
        },
        "List.concat": {
            "name": "concat",
            "location": 82,
            "return": [
                "int",
                "util.IDM",
                "str",
                "Generator"
            ],
            "arguments": {
                "self": [],
                "ms": [
                    "int",
                    "str"
                ]
            }
        },
        "List.__matmul__": {
            "name": "__matmul__",
            "location": 85,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict[, ]",
                    "dict",
                    "typing.AbstractSet",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "List.__eq__": {
            "name": "__eq__",
            "location": 88,
            "return": [
                "bool",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.AbstractSet",
                    "bool",
                    "AbstractSet[T]",
                    "list[]",
                    "AbstractSet[Any]",
                    "typing.Callable[, ]",
                    "Union[list, 'ListProxy']",
                    "Callable"
                ]
            }
        },
        "List.values": {
            "name": "values",
            "location": 92,
            "return": [
                "str",
                "int",
                "Type[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "List.__repr__": {
            "name": "__repr__",
            "location": 95,
            "return": [
                "typing.Text",
                "int",
                "Optional[dict]",
                "Tuple[int]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "f-master/f/maybe.py": {
        "Maybe.pure": {
            "name": "pure",
            "location": 14,
            "return": [
                "Just",
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "value": [
                    "float",
                    "int",
                    "tuple",
                    "tuple[]"
                ]
            }
        },
        "Maybe.bind": {
            "name": "bind",
            "location": 18,
            "return": [
                "'Maybe[N]'",
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "typing.Callable[, ]",
                    "Callable",
                    "T"
                ]
            }
        },
        "Maybe.__rshift__": {
            "name": "__rshift__",
            "location": 21,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "str",
                    "bool",
                    "tuple[typing.Union[str,str,int]]",
                    "Tuple[str, str, int]",
                    "float",
                    "typing.Callable[, ]",
                    "int",
                    "Callable",
                    "list[str]",
                    "List[str]"
                ]
            }
        },
        "Maybe.skip": {
            "name": "skip",
            "location": 24,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "Maybe.__or__": {
            "name": "__or__",
            "location": 27,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "str",
                    "bool",
                    "tuple[typing.Union[str,str,int]]",
                    "Tuple[str, str, int]",
                    "float",
                    "typing.Callable[, ]",
                    "int",
                    "Callable",
                    "list[str]",
                    "List[str]"
                ]
            }
        },
        "Maybe.__and__": {
            "name": "__and__",
            "location": 30,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "Maybe.map": {
            "name": "map",
            "location": 34,
            "return": [
                "'Maybe[N]'",
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "typing.Callable[, ]",
                    "Callable",
                    "T"
                ]
            }
        },
        "Maybe.__eq__": {
            "name": "__eq__",
            "location": 37,
            "return": [
                "bool",
                "Dict[str, Any]",
                "str",
                "Dict[str, Dict[str, Any]]",
                "dict",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "str",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "Just.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "Just.value": {
            "name": "value",
            "location": 46,
            "return": [
                "str",
                "int",
                "Type[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Just.bind": {
            "name": "bind",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Mapping[str, Dict[str, Any]]",
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "Just.map": {
            "name": "map",
            "location": 52,
            "return": [
                "Just",
                "int",
                "Dict[str, int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "typing.Callable[[], typing.Any]",
                    "T",
                    "typing.IO",
                    "tuple[]",
                    "util.Unary[V, N]",
                    "Callable[[], Any]",
                    "IO[bytes]",
                    "tuple"
                ]
            }
        },
        "Just.__repr__": {
            "name": "__repr__",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Nothing.bind": {
            "name": "bind",
            "location": 61,
            "return": [
                "Nothing",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Nothing.map": {
            "name": "map",
            "location": 64,
            "return": [
                "Nothing",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Nothing.__repr__": {
            "name": "__repr__",
            "location": 67,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "f-master/f/monad.py": {
        "Monad.pure": {
            "name": "pure",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "value": [
                    "int",
                    "complex",
                    "Tuple[str, int]",
                    "tuple[typing.Union[str,int]]",
                    "list",
                    "list[]"
                ]
            }
        },
        "Monad.bind": {
            "name": "bind",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "typing.Callable[, ]",
                    "Callable",
                    "T"
                ]
            }
        },
        "Monad.skip": {
            "name": "skip",
            "location": 16,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "str",
                    "float",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "Monad.__and__": {
            "name": "__and__",
            "location": 20,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "Monad.__rshift__": {
            "name": "__rshift__",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "typing.Callable[, ]",
                    "Callable",
                    "T"
                ]
            }
        }
    },
    "f-master/f/monoid.py": {
        "append": {
            "name": "append",
            "location": 8,
            "return": [
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "first": [
                    "int",
                    "str",
                    "Callable"
                ],
                "second": [
                    "int",
                    "str",
                    "Callable"
                ]
            }
        },
        "concat": {
            "name": "concat",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "m": [
                    "int",
                    "dict[, ]",
                    "str",
                    "dict",
                    "list[float]",
                    "List[float]",
                    "bool"
                ],
                "ms": [
                    "int",
                    "dict[, ]",
                    "str",
                    "dict",
                    "list[float]",
                    "List[float]",
                    "bool"
                ]
            }
        },
        "Monoid.empty": {
            "name": "empty",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "Monoid.append": {
            "name": "append",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Monoid.concat": {
            "name": "concat",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "ms": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Monoid.__add__": {
            "name": "__add__",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "T"
                ]
            }
        },
        "Monoid.__matmul__": {
            "name": "__matmul__",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "list[str]",
                    "List[str]",
                    "int",
                    "Union[int, float]",
                    "float",
                    "AbstractSet[T]",
                    "typing.AbstractSet"
                ]
            }
        }
    },
    "f-master/f/reader.py": {
        "Reader.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "typing.Callable[[], bool]",
                    "bool",
                    "Callable[[], bool]",
                    "list[tuple[typing.Union[str,str,str,str]]]",
                    "List[Tuple[str, str, str, str]]",
                    "list[str]",
                    "List[Tuple[str, str, str]]",
                    "List[str]"
                ]
            }
        },
        "Reader.pure": {
            "name": "pure",
            "location": 16,
            "return": [
                "Reader",
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "value": []
            }
        },
        "Reader.ask": {
            "name": "ask",
            "location": 20,
            "return": [
                "Reader",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Reader.__call__": {
            "name": "__call__",
            "location": 25,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "w": [
                    "Callable",
                    "int",
                    "typing.Callable[, ]",
                    "float"
                ]
            }
        },
        "Reader.bind": {
            "name": "bind",
            "location": 28,
            "return": [
                "Reader",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "int",
                    "typing.Callable[..., None]",
                    "Callable[..., None]",
                    "Callable"
                ]
            }
        },
        "Reader.__or__": {
            "name": "__or__",
            "location": 33,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "str",
                    "bool",
                    "tuple[typing.Union[str,str,int]]",
                    "Tuple[str, str, int]",
                    "float",
                    "typing.Callable[, ]",
                    "int",
                    "Callable",
                    "list[str]",
                    "List[str]"
                ]
            }
        },
        "Reader.map": {
            "name": "map",
            "location": 36,
            "return": [
                "Reader",
                "List[Dict[str, Any]]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable",
                    "typing.Callable[, ]",
                    "IO[bytes]",
                    "typing.IO"
                ]
            }
        },
        "Reader.skip": {
            "name": "skip",
            "location": 41,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "str",
                    "float",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "Reader.__and__": {
            "name": "__and__",
            "location": 44,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "Reader.__rshift__": {
            "name": "__rshift__",
            "location": 49,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "str",
                    "bool",
                    "tuple[typing.Union[str,str,int]]",
                    "Tuple[str, str, int]",
                    "float",
                    "typing.Callable[, ]",
                    "int",
                    "Callable",
                    "list[str]",
                    "List[str]"
                ]
            }
        }
    },
    "f-master/f/util.py": {
        "identity": {
            "name": "identity",
            "location": 8,
            "return": [
                "str",
                "int",
                "bytes",
                "bool",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "v": [
                    "int",
                    "bytes",
                    "str",
                    "bool"
                ]
            }
        },
        "compose": {
            "name": "compose",
            "location": 14,
            "return": [
                "typing.Callable[, ]",
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "f": [
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[..., None]"
                ],
                "g": [
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "has_type": {
            "name": "has_type",
            "location": 21,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "Iterator",
                "int"
            ],
            "arguments": {
                "t": [
                    "bool",
                    "typing.Type",
                    "typing.Callable[..., T]",
                    "Type",
                    "Type[T]",
                    "Callable[..., T]",
                    "int"
                ]
            }
        },
        "has_type._": {
            "name": "_",
            "location": 22,
            "return": [
                "bool",
                "list",
                "int"
            ],
            "arguments": {
                "v": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "f-master/f/__init__.py": {},
    "f-master/test/functor_test.py": {
        "FunctorTest.test_equality": {
            "name": "test_equality",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctorTest.test_inequality": {
            "name": "test_inequality",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctorTest.test_identity_law": {
            "name": "test_identity_law",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctorTest.test_composition_law": {
            "name": "test_composition_law",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "f-master/test/monad_test.py": {
        "MonadTest.test_right_identity_law": {
            "name": "test_right_identity_law",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonadTest.test_left_identity_law": {
            "name": "test_left_identity_law",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonadTest.test_associativity_law": {
            "name": "test_associativity_law",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "f-master/test/monoid_test.py": {
        "MonoidTest.test_left_append_identity_law": {
            "name": "test_left_append_identity_law",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonoidTest.test_right_append_identity_law": {
            "name": "test_right_append_identity_law",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonoidTest.test_append_associativity_law": {
            "name": "test_append_associativity_law",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "f-master/test/strategies.py": {
        "_everything": {
            "name": "_everything",
            "location": 14,
            "return": [
                "tuple[]",
                "List[dict]",
                "bool",
                "OrderedDict"
            ],
            "arguments": {
                "allow_nan": [
                    "Tuple[int, int]",
                    "bool"
                ]
            }
        },
        "anything": {
            "name": "anything",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "allow_nan": [
                    "bool",
                    "str"
                ]
            }
        },
        "unaries": {
            "name": "unaries",
            "location": 22,
            "return": [
                "str",
                "Optional[BaseException]"
            ],
            "arguments": {
                "return_strategy": [
                    "typing.Iterable[T]",
                    "int",
                    "Iterable[T]",
                    "str",
                    "float",
                    "VT",
                    "bool"
                ]
            }
        },
        "maybes": {
            "name": "maybes",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "value_strategy": [
                    "str",
                    "Optional[str]",
                    "float",
                    "None",
                    "dict",
                    "dict[, ]",
                    "Optional",
                    "typing.Optional[]"
                ]
            }
        },
        "lists": {
            "name": "lists",
            "location": 34,
            "return": [
                "bool",
                "Tuple[str, str]",
                "str",
                "Optional[str]",
                "Counter"
            ],
            "arguments": {
                "element_strategies": [
                    "bytes",
                    "str",
                    "bool"
                ]
            }
        },
        "readers": {
            "name": "readers",
            "location": 41,
            "return": [
                "str",
                "Tuple[str, str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "value_strategy": [
                    "bool",
                    "str",
                    "typing.Mapping",
                    "Mapping[str, Any]",
                    "int"
                ]
            }
        },
        "unaries._": {
            "name": "_",
            "location": 23,
            "return": [
                "typing.Callable[, ]",
                "str",
                "float",
                "Tuple[str]",
                "int"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "f-master/test/test_list.py": {
        "TestList.test_left_append_identity_law": {
            "name": "test_left_append_identity_law",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "l": [
                    "bool",
                    "int"
                ]
            }
        },
        "TestList.test_getitem": {
            "name": "test_getitem",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "l": [
                    "List[int]",
                    "bytes"
                ],
                "index": [
                    "List[int]",
                    "bytes"
                ]
            }
        },
        "TestList.test_right_append_identity_law": {
            "name": "test_right_append_identity_law",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "l": [
                    "set[]",
                    "set",
                    "int",
                    "Iterable",
                    "set[str]",
                    "typing.Sequence[str]",
                    "Set[str]",
                    "Sequence[str]"
                ]
            }
        },
        "TestList.test_concat": {
            "name": "test_concat",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "l": [
                    "float",
                    "list",
                    "list[]"
                ],
                "ls": [
                    "float",
                    "list",
                    "list[]"
                ]
            }
        },
        "TestList.test_append_associativity_law": {
            "name": "test_append_associativity_law",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "y": [
                    "int",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "z": [
                    "int",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "TestList.test_associativity_law": {
            "name": "test_associativity_law",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "l": [
                    "float",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "f": [
                    "float",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "g": [
                    "float",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "TestList.test_equality": {
            "name": "test_equality",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "List[int]",
                    "list[int]",
                    "list",
                    "list[]"
                ]
            }
        },
        "TestList.test_composition_law": {
            "name": "test_composition_law",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [],
                "g": [],
                "l": [
                    "str",
                    "int"
                ]
            }
        },
        "TestList.test_identity_law": {
            "name": "test_identity_law",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "l": [
                    "bool",
                    "int"
                ]
            }
        },
        "TestList.test_inequality": {
            "name": "test_inequality",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "List[str]",
                    "list[str]"
                ],
                "second": [
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "TestList.test_left_identity_law": {
            "name": "test_left_identity_law",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Type[Tuple[Any, Any, Any]]",
                    "typing.Type",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "f": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Type[Tuple[Any, Any, Any]]",
                    "typing.Type",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestList.test_right_identity_law": {
            "name": "test_right_identity_law",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "l": [
                    "set[]",
                    "set",
                    "int",
                    "Iterable",
                    "set[str]",
                    "typing.Sequence[str]",
                    "Set[str]",
                    "Sequence[str]"
                ]
            }
        },
        "TestList.test_in": {
            "name": "test_in",
            "location": 63,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "l": [
                    "str",
                    "list[]",
                    "Sequence[Hashable]",
                    "list"
                ],
                "v": [
                    "str",
                    "Sequence[Hashable]",
                    "typing.Sequence[typing.Hashable]",
                    "list",
                    "list[]"
                ]
            }
        },
        "TestList.test_reverse": {
            "name": "test_reverse",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "l": [
                    "Iterable[Any]",
                    "typing.Iterable[typing.Any]",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "TestList.test_head": {
            "name": "test_head",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "l": []
            }
        },
        "TestList.test_tail": {
            "name": "test_tail",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "l": [
                    "Iterable[Any]",
                    "typing.Iterable[typing.Any]",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "TestList.test_filter": {
            "name": "test_filter",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "l": [
                    "Callable[[list], None]",
                    "typing.Callable[list[], None]"
                ]
            }
        },
        "TestList.test_reduce": {
            "name": "test_reduce",
            "location": 87,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "l": [
                    "dict[, ]",
                    "str",
                    "type",
                    "set[]",
                    "dict",
                    "int",
                    "set"
                ],
                "i": [
                    "type",
                    "typing.Type",
                    "int",
                    "dict",
                    "str",
                    "dict[, ]",
                    "set",
                    "set[]"
                ]
            }
        },
        "TestList.test_filter.p": {
            "name": "p",
            "location": 81,
            "return": [
                "bool"
            ],
            "arguments": {
                "v": [
                    "int",
                    "str",
                    "List[str]",
                    "T"
                ]
            }
        }
    },
    "f-master/test/test_maybe.py": {
        "TestMaybe.test_equality": {
            "name": "test_equality",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMaybe.test_inequality": {
            "name": "test_inequality",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMaybe.test_identity_law": {
            "name": "test_identity_law",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMaybe.test_right_identity_law": {
            "name": "test_right_identity_law",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "maybe": [
                    "str",
                    "float"
                ]
            }
        },
        "TestMaybe.test_left_identity_law": {
            "name": "test_left_identity_law",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "f": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestMaybe.test_associativity_law": {
            "name": "test_associativity_law",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "maybe": [
                    "float"
                ],
                "f": [
                    "float"
                ],
                "g": [
                    "float"
                ]
            }
        },
        "TestMaybe._test_just_equality": {
            "name": "_test_just_equality",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "set[str]",
                    "int",
                    "Set[str]",
                    "typing.Callable[, ]",
                    "Callable",
                    "T"
                ]
            }
        },
        "TestMaybe._test_nothing_equality": {
            "name": "_test_nothing_equality",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMaybe._test_just_inequality": {
            "name": "_test_just_inequality",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "TestMaybe._test_nothing_inequality": {
            "name": "_test_nothing_inequality",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "typing.Mapping",
                    "Mapping[str, Any]",
                    "int",
                    "str",
                    "Union[int, float]",
                    "float",
                    "Maybe[_T]",
                    "bool"
                ],
                "second": [
                    "typing.Mapping",
                    "Mapping[str, Any]",
                    "int",
                    "str",
                    "Union[int, float]",
                    "float",
                    "Maybe[_T]",
                    "bool"
                ]
            }
        },
        "TestMaybe._test_just_identity_law": {
            "name": "_test_just_identity_law",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Set[str]",
                    "set[str]",
                    "Callable",
                    "typing.Callable[, ]",
                    "Dict[str, Callable[[], None]]",
                    "dict[str, typing.Callable[[], None]]"
                ]
            }
        },
        "TestMaybe._test_nothing_identity_law": {
            "name": "_test_nothing_identity_law",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMaybe.test_composition_law": {
            "name": "test_composition_law",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable",
                    "typing.Callable[, ]",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "g": [
                    "Callable",
                    "typing.Callable[, ]",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "value": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "list",
                    "list[]"
                ]
            }
        }
    },
    "f-master/test/test_reader.py": {
        "TestReader.test_right_identity_law": {
            "name": "test_right_identity_law",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Set[Hashable]",
                    "set[typing.Hashable]",
                    "Hashable",
                    "typing.Hashable",
                    "dict",
                    "dict[, ]",
                    "Sequence[Hashable]",
                    "typing.Sequence[typing.Hashable]"
                ],
                "context": [
                    "Set[Hashable]",
                    "set[typing.Hashable]",
                    "Hashable",
                    "typing.Hashable",
                    "dict",
                    "dict[, ]",
                    "Sequence[Hashable]",
                    "typing.Sequence[typing.Hashable]"
                ]
            }
        },
        "TestReader.test_left_identity_law": {
            "name": "test_left_identity_law",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Set[Hashable]",
                    "set[typing.Hashable]",
                    "str",
                    "Hashable",
                    "typing.Hashable",
                    "List[int]",
                    "list[int]"
                ],
                "value": [
                    "Set[Hashable]",
                    "set[typing.Hashable]",
                    "str",
                    "Hashable",
                    "typing.Hashable",
                    "List[int]",
                    "list[int]"
                ],
                "context": [
                    "Set[Hashable]",
                    "set[typing.Hashable]",
                    "str",
                    "Hashable",
                    "typing.Hashable",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "TestReader.test_associativity_law": {
            "name": "test_associativity_law",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "reader": [
                    "float",
                    "str",
                    "bytes"
                ],
                "f": [
                    "float",
                    "str",
                    "bytes"
                ],
                "g": [
                    "float",
                    "str",
                    "bytes"
                ],
                "context": [
                    "float",
                    "str",
                    "bytes"
                ]
            }
        },
        "TestReader.test_equality": {
            "name": "test_equality",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Set[Hashable]",
                    "set[typing.Hashable]",
                    "Hashable",
                    "typing.Hashable"
                ],
                "context": [
                    "Set[Hashable]",
                    "set[typing.Hashable]",
                    "Hashable",
                    "typing.Hashable"
                ]
            }
        },
        "TestReader.test_inequality": {
            "name": "test_inequality",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "first": [],
                "second": [],
                "context": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestReader.test_identity_law": {
            "name": "test_identity_law",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "dict",
                    "dict[, ]",
                    "str",
                    "Sequence[Hashable]",
                    "typing.Sequence[typing.Hashable]"
                ],
                "context": [
                    "dict",
                    "dict[, ]",
                    "str",
                    "Sequence[Hashable]",
                    "typing.Sequence[typing.Hashable]"
                ]
            }
        },
        "TestReader.test_composition_law": {
            "name": "test_composition_law",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable",
                    "typing.Callable[, ]",
                    "Sequence[Hashable]",
                    "typing.Sequence[typing.Hashable]",
                    "Hashable",
                    "typing.Hashable"
                ],
                "g": [
                    "Callable",
                    "typing.Callable[, ]",
                    "Sequence[Hashable]",
                    "typing.Sequence[typing.Hashable]",
                    "Hashable",
                    "typing.Hashable"
                ],
                "value": [
                    "Hashable",
                    "typing.Hashable",
                    "bool",
                    "Sequence[Hashable]",
                    "typing.Sequence[typing.Hashable]"
                ],
                "context": [
                    "Hashable",
                    "typing.Hashable",
                    "bool",
                    "Sequence[Hashable]",
                    "typing.Sequence[typing.Hashable]"
                ]
            }
        }
    },
    "f-master/test/test_types.py": {
        "python_files": {
            "name": "python_files",
            "location": 9,
            "return": [
                "list[]",
                "str",
                "list"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "type_check": {
            "name": "type_check",
            "location": 20,
            "return": [
                "str",
                "Exception",
                "Callable[..., T]",
                "Iterator"
            ],
            "arguments": {
                "file": [
                    "str"
                ]
            }
        },
        "test_positives": {
            "name": "test_positives",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "file": [
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "test_negatives": {
            "name": "test_negatives",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "file": [
                    "bytes",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "f-master/test/__init__.py": {},
    "f-master/test/type_tests/negatives/maybe_bind_arguments.py": {
        "test_just": {
            "name": "test_just",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "f-master/test/type_tests/negatives/maybe_bind_return_type.py": {
        "test_just": {
            "name": "test_just",
            "location": 4,
            "return": [
                "bool",
                "Mapping[str, Any]",
                "Maybe[_T]"
            ],
            "arguments": {}
        }
    },
    "f-master/test/type_tests/negatives/maybe_map_arguments.py": {
        "test": {
            "name": "test",
            "location": 4,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {}
        }
    },
    "f-master/test/type_tests/negatives/maybe_map_return_type.py": {
        "test_just": {
            "name": "test_just",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "f-master/test/type_tests/negatives/maybe_pure.py": {
        "test": {
            "name": "test",
            "location": 3,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "f-master/test/type_tests/negatives/maybe_skip.py": {
        "test_just": {
            "name": "test_just",
            "location": 4,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "f-master/test/type_tests/positives/maybe_bind_arguments.py": {
        "test_just": {
            "name": "test_just",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "test_nothing": {
            "name": "test_nothing",
            "location": 8,
            "return": [],
            "arguments": {}
        }
    },
    "f-master/test/type_tests/positives/maybe_bind_return_type.py": {
        "test_just": {
            "name": "test_just",
            "location": 4,
            "return": [
                "bool",
                "Mapping[str, Any]",
                "Maybe[_T]"
            ],
            "arguments": {}
        },
        "test_nothing": {
            "name": "test_nothing",
            "location": 8,
            "return": [
                "bool",
                "Mapping[str, Any]",
                "Maybe[_T]"
            ],
            "arguments": {}
        }
    },
    "f-master/test/type_tests/positives/maybe_map_arguments.py": {
        "test_just": {
            "name": "test_just",
            "location": 4,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "test_nothing": {
            "name": "test_nothing",
            "location": 8,
            "return": [
                "float",
                "Maybe[_T]"
            ],
            "arguments": {}
        }
    },
    "f-master/test/type_tests/positives/maybe_map_return_type.py": {
        "test_just": {
            "name": "test_just",
            "location": 4,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "test_nothing": {
            "name": "test_nothing",
            "location": 8,
            "return": [
                "str",
                "float"
            ],
            "arguments": {}
        }
    },
    "f-master/test/type_tests/positives/maybe_pure.py": {
        "test": {
            "name": "test",
            "location": 3,
            "return": [
                "str",
                "float"
            ],
            "arguments": {}
        }
    },
    "f-master/test/type_tests/positives/maybe_skip.py": {
        "test_just": {
            "name": "test_just",
            "location": 4,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    }
}
{
    "falcon-master/geo_rest/tasks.py": {
        "lookup_address": {
            "name": "lookup_address",
            "location": 5,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "address": [
                    "str"
                ]
            }
        },
        "lookup_coordinates": {
            "name": "lookup_coordinates",
            "location": 16,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "coordinates": [
                    "List[float]"
                ]
            }
        }
    },
    "falcon-master/geo_rest/views.py": {
        "validate_coordinates": {
            "name": "validate_coordinates",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "coordinates": [
                    "str",
                    "Dict[str, Any]",
                    "List[float]",
                    "app.models.dto.CoordinateDTO",
                    "List[app.models.Question]"
                ]
            }
        },
        "address": {
            "name": "address",
            "location": 36,
            "return": [
                "str",
                "tuple[int]",
                "tuple[typing.Union[int,dict[typing.Text, ]]]"
            ],
            "arguments": {
                "coordinates": [
                    "str",
                    "float",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "coordinates": {
            "name": "coordinates",
            "location": 102,
            "return": [
                "tuple[int]",
                "bool",
                "tuple[typing.Union[int,dict[typing.Text, ]]]",
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "address": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "address_job": {
            "name": "address_job",
            "location": 162,
            "return": [
                "tuple[int]",
                "bool",
                "str"
            ],
            "arguments": {
                "job_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "coordinates_job": {
            "name": "coordinates_job",
            "location": 216,
            "return": [
                "int",
                "tuple[int]"
            ],
            "arguments": {
                "job_id": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "handle_error": {
            "name": "handle_error",
            "location": 260,
            "return": [
                "tuple[typing.Union[str,dict[str, str],dict[, ],dict[int, typing.Type]]]",
                "Dict[str, Any]",
                "tuple[]",
                "flask.Markup",
                "List[str]"
            ],
            "arguments": {
                "err": [
                    "dict",
                    "dict[, ]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        }
    },
    "falcon-master/geo_rest/__init__.py": {},
    "falcon-master/tests/test_geo_rest.py": {
        "client": {
            "name": "client",
            "location": 11,
            "return": [
                "",
                "typing.Generator[dict[str, typing.Any]]"
            ],
            "arguments": {}
        },
        "mq": {
            "name": "mq",
            "location": 18,
            "return": [
                "",
                "typing.Generator[Queue]"
            ],
            "arguments": {}
        },
        "mock_side_effects": {
            "name": "mock_side_effects",
            "location": 28,
            "return": [
                "",
                "typing.Generator[Resources]"
            ],
            "arguments": {
                "mq": [
                    "list[str]",
                    "str",
                    "List[str]",
                    "Iterable"
                ],
                "mocker": [
                    "str",
                    "Dict[str, BinaryIO]",
                    "bool",
                    "float"
                ],
                "monkeypatch": [
                    "str",
                    "bool",
                    "Dict[str, BinaryIO]",
                    "float",
                    "dict[str, typing.BinaryIO]"
                ]
            }
        },
        "test_address_success": {
            "name": "test_address_success",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "dict"
                ],
                "mock_side_effects": [
                    "List[T]",
                    "list[T]",
                    "Callable",
                    "typing.Callable[, ]",
                    "Generator[None, Any, None]",
                    "typing.Generator[typing.Union[None,typing.Any,None]]"
                ]
            }
        },
        "test_address_missing_argument": {
            "name": "test_address_missing_argument",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "dict"
                ],
                "mock_side_effects": [
                    "List[T]",
                    "list[T]",
                    "Callable",
                    "typing.Callable[, ]",
                    "Generator[None, Any, None]",
                    "typing.Generator[typing.Union[None,typing.Any,None]]"
                ]
            }
        },
        "test_address_invalid_coordinates": {
            "name": "test_address_invalid_coordinates",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "mock_side_effects": [],
                "test_input": [
                    "str"
                ]
            }
        },
        "test_address_queue_failure": {
            "name": "test_address_queue_failure",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_address_job_success": {
            "name": "test_address_job_success",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "mock_side_effects": []
            }
        },
        "test_address_job_match_not_found": {
            "name": "test_address_job_match_not_found",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "mock_side_effects": []
            }
        },
        "test_address_job_missing": {
            "name": "test_address_job_missing",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "mock_side_effects": [
                    "List[T]",
                    "list[T]",
                    "Callable",
                    "typing.Callable[, ]",
                    "Generator[None, Any, None]",
                    "typing.Generator[typing.Union[None,typing.Any,None]]"
                ]
            }
        },
        "test_address_job_backend_failure": {
            "name": "test_address_job_backend_failure",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_address_happypath": {
            "name": "test_address_happypath",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "mock_side_effects": []
            }
        },
        "test_coordinates_success": {
            "name": "test_coordinates_success",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "dict"
                ],
                "mock_side_effects": []
            }
        },
        "test_coordinates_missing_argument": {
            "name": "test_coordinates_missing_argument",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "dict"
                ],
                "mock_side_effects": [
                    "List[T]",
                    "list[T]"
                ]
            }
        },
        "test_coordinates_queue_failure": {
            "name": "test_coordinates_queue_failure",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_coordinates_job_success": {
            "name": "test_coordinates_job_success",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "mock_side_effects": []
            }
        },
        "test_coordinates_job_match_not_found": {
            "name": "test_coordinates_job_match_not_found",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "mock_side_effects": []
            }
        },
        "test_coordinates_job_missing": {
            "name": "test_coordinates_job_missing",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "mock_side_effects": [
                    "List[T]",
                    "list[T]"
                ]
            }
        },
        "test_coordinates_job_backend_failure": {
            "name": "test_coordinates_job_backend_failure",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_coordinates_happypath": {
            "name": "test_coordinates_happypath",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "mock_side_effects": []
            }
        },
        "mock_side_effects.Resources.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_g": [
                    "Dict[str, str]"
                ],
                "mq": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "falcon-master/tests/__init__.py": {}
}
{
    "fantasy-anime-league-master/old_run_fal.py": {},
    "fantasy-anime-league-master/properties.py": {},
    "fantasy-anime-league-master/run_fal.py": {},
    "fantasy-anime-league-master/fal/__init__.py": {},
    "fantasy-anime-league-master/fal/controllers/anime_stats.py": {
        "AnimeStats.is_week_to_calculate": {
            "name": "is_week_to_calculate",
            "location": 70,
            "return": [
                "bool",
                "str",
                "int",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "config_key": [
                    "str",
                    "Dict",
                    "Callable"
                ]
            }
        },
        "AnimeStats._extract_file_contents": {
            "name": "_extract_file_contents",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnimeStats.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnimeStats.get_total_forum_posts": {
            "name": "get_total_forum_posts",
            "location": 103,
            "return": [
                "bool",
                "List[int]",
                "List[str]",
                "Tuple[int,int]",
                "int",
                "Optional[dict]"
            ],
            "arguments": {
                "self": [],
                "anime": [
                    "str",
                    "int",
                    "fal.models.Anime"
                ]
            }
        },
        "AnimeStats.get_anime_stats_from_jikan": {
            "name": "get_anime_stats_from_jikan",
            "location": 129,
            "return": [
                "Dict",
                "JikanResults"
            ],
            "arguments": {
                "self": [],
                "anime": [
                    "Optional[Exception]",
                    "Dict",
                    "Exception",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "AnimeStats.calculate_anime_weekly_points": {
            "name": "calculate_anime_weekly_points",
            "location": 150,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "anime": [
                    "Dict[str,Any]",
                    "str"
                ],
                "stat_data": [
                    "int",
                    "bytes",
                    "str",
                    "Mapping[str,str]",
                    "Mapping"
                ],
                "num_teams_owned_active": [
                    "int",
                    "Optional[int]"
                ],
                "double_score_max_num_teams": [
                    "int",
                    "Optional[int]"
                ],
                "num_regions": [
                    "int",
                    "bytes",
                    "str",
                    "Mapping[str,str]",
                    "Mapping"
                ],
                "is_licensed": [
                    "int",
                    "bytes",
                    "str",
                    "Mapping[str, str]"
                ]
            }
        },
        "AnimeStats.get_anime_simulcast_region_counts": {
            "name": "get_anime_simulcast_region_counts",
            "location": 188,
            "return": [
                "Dict[,int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "sqlalchemy.orm.Session",
                    "nox.sessions.Session",
                    "sqlalchemy.orm.session.Session",
                    "deeplearning.ml4pl.models.log_database.Database",
                    "_pytesmain.Session"
                ]
            }
        },
        "AnimeStats.get_licensed_anime": {
            "name": "get_licensed_anime",
            "location": 207,
            "return": [
                "Set",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "sqlalchemy.orm.Session",
                    "nox.sessions.Session",
                    "sqlalchemy.orm.session.Session",
                    "deeplearning.ml4pl.models.log_database.Database",
                    "_pytesmain.Session"
                ]
            }
        },
        "AnimeStats._execute": {
            "name": "_execute",
            "location": 222,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "int",
                    "Dict[str,Any]",
                    "Dict",
                    "sqlalchemy.orm.Session"
                ],
                "season": [
                    "grouper.models.base.session.Session",
                    "grouper.models.user.User",
                    "labm8.py.sqlutil.Session",
                    "str"
                ]
            }
        }
    },
    "fantasy-anime-league-master/fal/controllers/base.py": {
        "Controller.execute": {
            "name": "execute",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller._execute": {
            "name": "_execute",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "List",
                    "None",
                    "Optional[sqlalchemy.orm.session.Session]",
                    "sqlalchemy.orm.unitofwork.UOWTransaction",
                    "Iterable"
                ],
                "season": [
                    "str",
                    "List",
                    "None",
                    "Optional[sqlalchemy.orm.session.Session]",
                    "sqlalchemy.orm.unitofwork.UOWTransaction",
                    "Iterable"
                ]
            }
        }
    },
    "fantasy-anime-league-master/fal/controllers/bench_swaps.py": {
        "BenchSwaps.get_swaps": {
            "name": "get_swaps",
            "location": 26,
            "return": [
                "List[tuple]",
                "str",
                "bool",
                "List[str]",
                "int",
                "Mapping[str,object]",
                "float"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session",
                    "models.Queue"
                ],
                "page": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session"
                ],
                "actions": [
                    "List",
                    "List[Tuple]",
                    "Dict[str,Any]",
                    "Dict",
                    "medtagger.database.models.Scan",
                    "int"
                ]
            }
        },
        "BenchSwaps._execute": {
            "name": "_execute",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "cmsysboutils.Session",
                    "None",
                    "int",
                    "sqlalchemy.orm.session.Session",
                    "Optional[str]",
                    "recidiviz.persistence.database.session.Session",
                    "Optional[int]"
                ],
                "season": [
                    "str",
                    "nox.sessions.Session",
                    "fal.models.Season",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        }
    },
    "fantasy-anime-league-master/fal/controllers/check_usernames.py": {
        "check": {
            "name": "check",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fantasy-anime-league-master/fal/controllers/collect_series.py": {
        "get_series": {
            "name": "get_series",
            "location": 15,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "season": [
                    "int",
                    "Any",
                    "bool"
                ],
                "year": [
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "output_series": {
            "name": "output_series",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "series": [
                    "Tuple",
                    "str",
                    "List[Exception]",
                    "bool",
                    "Union[str,Sequence[str]]"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "output_series_titles": {
            "name": "output_series_titles",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "titles": [
                    "str",
                    "Dict",
                    "int"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "collect_series": {
            "name": "collect_series",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fantasy-anime-league-master/fal/controllers/load_aces.py": {
        "ace_already_loaded_this_week": {
            "name": "ace_already_loaded_this_week",
            "location": 16,
            "return": [
                "bool",
                "Dict[str,int]",
                "float",
                "str"
            ],
            "arguments": {
                "team": [
                    "Dict[str,Any]",
                    "str",
                    "arxiv.users.domain.Session",
                    "sqlalchemy.orm.Session"
                ],
                "week": [
                    "Dict[str,Any]",
                    "str",
                    "arxiv.users.domain.Session",
                    "sqlalchemy.orm.Session"
                ],
                "session": [
                    "Dict[str,Any]",
                    "str",
                    "arxiv.users.domain.Session",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "team_anime_aced_already": {
            "name": "team_anime_aced_already",
            "location": 36,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "team": [
                    "int",
                    "bytes",
                    "sqlalchemy.orm.session.Session",
                    "labm8.py.sqlutil.Session",
                    "sqlalchemy.orm.Session"
                ],
                "anime": [
                    "int",
                    "bytes",
                    "sqlalchemy.orm.session.Session",
                    "labm8.py.sqlutil.Session",
                    "sqlalchemy.orm.Session"
                ],
                "session": [
                    "int",
                    "bytes",
                    "sqlalchemy.orm.session.Session",
                    "labm8.py.sqlutil.Session",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "load_aces": {
            "name": "load_aces",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "input_lines": [
                    "str",
                    "Iterable[str]",
                    "List",
                    "Iterable[bytes]",
                    "List[str]"
                ]
            }
        }
    },
    "fantasy-anime-league-master/fal/controllers/load_teams.py": {
        "slice_up_team_input": {
            "name": "slice_up_team_input",
            "location": 29,
            "return": [
                "TeamLines",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "team_input": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "add_anime_to_team": {
            "name": "add_anime_to_team",
            "location": 53,
            "return": [
                "None",
                "Dict[str,Any]",
                "Type",
                "Set[VT]",
                "Tuple"
            ],
            "arguments": {
                "team": [
                    "bool",
                    "str",
                    "sqlalchemy.orm.Session",
                    "int"
                ],
                "anime_lines": [
                    "str",
                    "Sequence[str]",
                    "bool",
                    "TextIO",
                    "Optional[int]"
                ],
                "bench": [
                    "Sequence",
                    "int",
                    "Dict[int,dict]",
                    "List[str]"
                ],
                "session": [
                    "List[dict]",
                    "bool",
                    "sqlalchemy.orm.Session",
                    "List[Dict[str, Any]]",
                    "Dict[str, Optional[str]]"
                ]
            }
        },
        "load_teams": {
            "name": "load_teams",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "registration_data": [
                    "Dict",
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "team_ages": {
            "name": "team_ages",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fantasy-anime-league-master/fal/controllers/ptw_counter.py": {
        "localize_number": {
            "name": "localize_number",
            "location": 25,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "num": [
                    "int"
                ]
            }
        },
        "get_ptw_info": {
            "name": "get_ptw_info",
            "location": 30,
            "return": [
                "List[PTWEntry]",
                "List[str]",
                "str",
                "Callable",
                "int"
            ],
            "arguments": {
                "anime_list": [
                    "List",
                    "List[dict[str,Any]]",
                    "List[str]",
                    "List[Dict[str,Any]]",
                    "List[list[str]]",
                    "List[List[str]]",
                    "List[dict]",
                    "List[Dict]",
                    "List[tuple[Union[str,str]]]",
                    "Iterable[str]",
                    "List[Tuple[str,str]]"
                ]
            }
        },
        "output_ptw_info": {
            "name": "output_ptw_info",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "season_of_year": [
                    "bytes",
                    "int",
                    "Callable"
                ],
                "year": [
                    "str",
                    "int",
                    "Tuple",
                    "bytes",
                    "Callable"
                ],
                "ptw": [
                    "Dict",
                    "Dict[str,Any]",
                    "List",
                    "str",
                    "Iterable",
                    "int"
                ]
            }
        },
        "add_ptw_to_database": {
            "name": "add_ptw_to_database",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "anime_id": [
                    "str",
                    "None",
                    "Optional[str]",
                    "datetime.datetime",
                    "Optional[datetime.datetime]"
                ],
                "date": [
                    "str",
                    "None",
                    "Optional[str]",
                    "datetime.datetime",
                    "Optional[datetime.datetime]"
                ],
                "ptw_count": [
                    "str",
                    "int",
                    "None",
                    "datetime.date",
                    "Optional[datetime.datetime]",
                    "datetime.datetime"
                ],
                "session": [
                    "str",
                    "Iterable[str]",
                    "int",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "ptw_counter": {
            "name": "ptw_counter",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fantasy-anime-league-master/fal/controllers/start_new_week.py": {
        "StartNewWeek._execute": {
            "name": "_execute",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "List",
                    "None",
                    "Optional[sqlalchemy.orm.session.Session]",
                    "sqlalchemy.orm.unitofwork.UOWTransaction",
                    "Iterable"
                ],
                "season": [
                    "Callable",
                    "zam_repondeur.models.Article",
                    "tensorflow.Session"
                ]
            }
        }
    },
    "fantasy-anime-league-master/fal/controllers/team_score.py": {
        "already_got_high_bonus": {
            "name": "already_got_high_bonus",
            "location": 20,
            "return": [
                "bool",
                "str",
                "OrderedDict"
            ],
            "arguments": {
                "team_id": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.scoping.scoped_session"
                ],
                "session": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.scoping.scoped_session"
                ]
            }
        },
        "get_team_scores_counts_this_week": {
            "name": "get_team_scores_counts_this_week",
            "location": 28,
            "return": [
                "int",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "week": [
                    "nox.sessions.Session",
                    "sqlalchemy.orm.session.Session",
                    "labm8.py.sqlutil.Session",
                    "sqlalchemy.orm.Session"
                ],
                "session": [
                    "nox.sessions.Session",
                    "sqlalchemy.orm.session.Session",
                    "labm8.py.sqlutil.Session",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "calculate_team_total_score": {
            "name": "calculate_team_total_score",
            "location": 51,
            "return": [
                "dict",
                "Dict[str, bool]",
                "sqlalchemy.MetaData",
                "bytes",
                "str"
            ],
            "arguments": {
                "team": [
                    "Callable",
                    "sqlalchemy.orm.session.Session",
                    "grouper.models.base.session.Session",
                    "sqlalchemy.orm.Session"
                ],
                "session": [
                    "Callable",
                    "sqlalchemy.orm.session.Session",
                    "grouper.models.base.session.Session",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "add_team_anime_scores_and_ace_to_weekly_points": {
            "name": "add_team_anime_scores_and_ace_to_weekly_points",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "this_week_points": [
                    "int",
                    "str",
                    "sqlalchemy.orm.Session",
                    "grouper.models.base.session.Session"
                ],
                "session": [
                    "int",
                    "str",
                    "sqlalchemy.orm.Session",
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "calculate_team_scores": {
            "name": "calculate_team_scores",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fantasy-anime-league-master/fal/controllers/__init__.py": {},
    "fantasy-anime-league-master/fal/models/anime.py": {
        "Anime.from_orm_anime": {
            "name": "from_orm_anime",
            "location": 31,
            "return": [
                "asgard.models.user.User",
                "Mapping[str, Any]",
                "bool",
                "int",
                "Dict[int, dict]",
                "Optional[int]"
            ],
            "arguments": {
                "cls": [
                    "sqlalchemy.orm.Session",
                    "Type[T]",
                    "sqlalchemy.orm.query.Query",
                    "sqlalchemy.orm.scoping.scoped_session",
                    "bool"
                ],
                "orm_anime": [
                    "fal.orm.Anime",
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "session": [
                    "sqlalchemy.orm.Session",
                    "Type[T]",
                    "sqlalchemy.orm.query.Query",
                    "sqlalchemy.orm.scoping.scoped_session",
                    "bool"
                ]
            }
        },
        "Anime.get_by_name": {
            "name": "get_by_name",
            "location": 54,
            "return": [
                "bool",
                "Dict[str, bool]",
                "games.models.Game",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "str",
                    "Sequence[Dict[str, str]]"
                ],
                "name": [
                    "str",
                    "sqlalchemy.orm.Session",
                    "type"
                ],
                "session": [
                    "str",
                    "sqlalchemy.orm.Session",
                    "type"
                ]
            }
        },
        "Anime.create": {
            "name": "create",
            "location": 70,
            "return": [
                "Dict[int, dict]",
                "bool",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "sqlalchemy.orm.Session",
                    "app.models.User",
                    "sqlalchemy.orm.session.Session"
                ],
                "mal_id": [
                    "str",
                    "int",
                    "fal.models.Season",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "int",
                    "fal.models.Season",
                    "Optional[str]"
                ],
                "season": [
                    "fal.models.Season",
                    "str",
                    "int"
                ],
                "session": [
                    "sqlalchemy.orm.Session",
                    "Type[T]",
                    "app.models.User",
                    "sqlalchemy.orm.session.Session",
                    "Union[int, slice]"
                ]
            }
        },
        "Anime.get_forum_posts_for_week": {
            "name": "get_forum_posts_for_week",
            "location": 84,
            "return": [
                "str",
                "zerver.models.Realm",
                "dict",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "week": [
                    "int",
                    "jumeaux.models.Notifier",
                    "Exception",
                    "IO[str]",
                    "Dict[str, int]"
                ]
            }
        },
        "Anime.add_alias": {
            "name": "add_alias",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alias": [
                    "core.models.Resource",
                    "List[django.db.models.Model]"
                ]
            }
        },
        "Anime._get_anime_weekly_stat": {
            "name": "_get_anime_weekly_stat",
            "location": 93,
            "return": [
                "int",
                "salon.models.Stylist",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "week": [
                    "str",
                    "int",
                    "tracim.models.data.Workspace",
                    "Sequence[str]",
                    "bool"
                ]
            }
        }
    },
    "fantasy-anime-league-master/fal/models/base.py": {
        "OrmFacade.commit": {
            "name": "commit",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrmFacade.entity": {
            "name": "entity",
            "location": 33,
            "return": [
                "bool",
                "float",
                "Optional[Any]",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fantasy-anime-league-master/fal/models/season.py": {
        "Season.from_orm_season": {
            "name": "from_orm_season",
            "location": 41,
            "return": [
                "asgard.models.user.User",
                "Mapping[str, Any]",
                "bool",
                "int",
                "Dict[int, dict]",
                "Optional[int]"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "Union[zerver.models.UserProfile,zilencer.models.RemoteZulipServer]",
                    "sqlalchemy.orm.Session",
                    "Type[T]"
                ],
                "orm_season": [
                    "Type",
                    "int",
                    "models.User",
                    "Dict[str,Any]",
                    "Any",
                    "Optional[Union[Any,str]]",
                    "str",
                    "services.user.transfer.models.User",
                    "None"
                ],
                "session": [
                    "Type",
                    "Union[zerver.models.UserProfile,zilencer.models.RemoteZulipServer]",
                    "sqlalchemy.orm.Session",
                    "Type[T]"
                ]
            }
        },
        "Season.get_or_create": {
            "name": "get_or_create",
            "location": 56,
            "return": [
                "str",
                "Callable",
                "List[Dict[str, Any]]",
                "Optional[nativecards.lib.dicts.models.DictionaryEntry]",
                "Tuple[str]"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "Callable",
                    "Type[T]",
                    "int",
                    "contests.models.User",
                    "None",
                    "Optional[int]",
                    "sqlalchemy.Column"
                ],
                "season_of_year": [
                    "int",
                    "str",
                    "grouper.models.base.session.Session",
                    "sqlalchemy.orm.Session"
                ],
                "year": [
                    "int",
                    "str",
                    "grouper.models.base.session.Session",
                    "sqlalchemy.orm.Session"
                ],
                "session": [
                    "str",
                    "int",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "Season.init_new_week": {
            "name": "init_new_week",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current_week": [
                    "bool",
                    "str",
                    "collections.abc.AsyncGenerator",
                    "AsyncGenerator",
                    "None",
                    "ddionrails.studies.models.Study",
                    "models.Name",
                    "Optional[str]"
                ]
            }
        },
        "Season.get_all_anime": {
            "name": "get_all_anime",
            "location": 110,
            "return": [
                "Generator",
                "str",
                "int",
                "allennlp.models.archival.Archive"
            ],
            "arguments": {
                "self": []
            }
        },
        "Season.get_all_teams": {
            "name": "get_all_teams",
            "location": 116,
            "return": [
                "Generator",
                "str",
                "int",
                "allennlp.models.archival.Archive"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fantasy-anime-league-master/fal/models/team.py": {
        "Team.from_orm_team": {
            "name": "from_orm_team",
            "location": 24,
            "return": [
                "Mapping[str, Any]",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable",
                    "sqlalchemy.orm.query.Query"
                ],
                "orm_team": [
                    "Dict",
                    "Dict[str,Any]",
                    "Type[T]",
                    "Type"
                ],
                "session": [
                    "str",
                    "Callable",
                    "sqlalchemy.orm.query.Query"
                ]
            }
        },
        "Team.get_by_name": {
            "name": "get_by_name",
            "location": 37,
            "return": [
                "Mapping[str, Any]",
                "Dict[str, Any]",
                "str",
                "services.user.transfer.models.User"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "Dict",
                    "Type",
                    "Sequence[str]",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "Team.create": {
            "name": "create",
            "location": 52,
            "return": [],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "str",
                    "Type",
                    "Dict[str,object]",
                    "Dict",
                    "Sequence[str]"
                ]
            }
        },
        "Team.bench_swap": {
            "name": "bench_swap",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Team.add_anime_to_team": {
            "name": "add_anime_to_team",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "anime": [
                    "int"
                ],
                "bench": [
                    "int"
                ]
            }
        },
        "Team.get_anime": {
            "name": "get_anime",
            "location": 137,
            "return": [
                "WeekSnapshotOfTeamAnime",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "week": [
                    "app.models.Tweet",
                    "app.models.Position",
                    "esm.models.service_instance.ServiceInstance",
                    "article.transfer.models.ArticleNumber",
                    "app.models.Journey",
                    "app.models.Stage",
                    "app.models.GameMember",
                    "salon.models.Stylist"
                ]
            }
        }
    },
    "fantasy-anime-league-master/fal/models/__init__.py": {},
    "fantasy-anime-league-master/fal/orm/anime.py": {
        "Anime.__repr__": {
            "name": "__repr__",
            "location": 32,
            "return": [
                "Text",
                "cmk.utils.type_defs.UserId",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Anime.add_anime_to_database": {
            "name": "add_anime_to_database",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "id": [
                    "int",
                    "str",
                    "bytes",
                    "sqlalchemy.orm.Session",
                    "bool"
                ],
                "name": [
                    "str",
                    "int",
                    "Iterable[str]"
                ],
                "season": [
                    "str",
                    "int",
                    "Iterable[str]"
                ],
                "session": [
                    "Optional[str]",
                    "str",
                    "int"
                ]
            }
        },
        "Anime.get_anime_from_database_by_name": {
            "name": "get_anime_from_database_by_name",
            "location": 56,
            "return": [
                "Mapping[str, Any]",
                "bool",
                "str",
                "List[Dict]",
                "Tuple[int, int, int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]",
                    "sqlalchemy.orm.Session"
                ],
                "session": [
                    "str",
                    "List[str]",
                    "sqlalchemy.orm.Session"
                ]
            }
        }
    },
    "fantasy-anime-league-master/fal/orm/anime_weekly_stat.py": {
        "AnimeWeeklyStat.__repr__": {
            "name": "__repr__",
            "location": 26,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fantasy-anime-league-master/fal/orm/base.py": {},
    "fantasy-anime-league-master/fal/orm/bench_swap.py": {
        "BenchSwap.__repr__": {
            "name": "__repr__",
            "location": 21,
            "return": [
                "Text",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fantasy-anime-league-master/fal/orm/mfalncfm_main.py": {
        "session_scope": {
            "name": "session_scope",
            "location": 26,
            "return": [
                "Generator[sqlalchemy.orm.Session,None,None]",
                "Generator"
            ],
            "arguments": {
                "echo": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        }
    },
    "fantasy-anime-league-master/fal/orm/plan_to_watch.py": {
        "PlanToWatch.__repr__": {
            "name": "__repr__",
            "location": 21,
            "return": [
                "Text",
                "str",
                "Union[int,float]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fantasy-anime-league-master/fal/orm/season.py": {
        "Season.__repr__": {
            "name": "__repr__",
            "location": 27,
            "return": [
                "Text",
                "str",
                "bool",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Season.get_season_from_database": {
            "name": "get_season_from_database",
            "location": 33,
            "return": [
                "Season",
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "season_of_year": [
                    "int",
                    "str",
                    "List[Optional[str]]"
                ],
                "year": [
                    "int",
                    "str",
                    "List[Optional[str]]"
                ],
                "session": [
                    "str",
                    "sqlalchemy.exdeclarative.DeclarativeMeta",
                    "bool",
                    "recidiviz.persistence.database.session.Session",
                    "sqlalchemy.orm.Session"
                ]
            }
        }
    },
    "fantasy-anime-league-master/fal/orm/secret.py": {},
    "fantasy-anime-league-master/fal/orm/team.py": {
        "Team.get_team_from_database": {
            "name": "get_team_from_database",
            "location": 33,
            "return": [
                "Team",
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Dict[str,str]",
                    "sqlalchemy.orm.Session",
                    "fal.orm.Season",
                    "int"
                ],
                "season": [
                    "str",
                    "Dict[str,str]",
                    "sqlalchemy.orm.Session",
                    "fal.orm.Season",
                    "int"
                ],
                "session": [
                    "str",
                    "sqlalchemy.orm.Session",
                    "apistar.backends.sqlalchemy_backend.Session",
                    "sqlalchemy.orm.session.Session",
                    "Dict[str,str]"
                ]
            }
        },
        "Team.__repr__": {
            "name": "__repr__",
            "location": 49,
            "return": [
                "Text",
                "str",
                "Callable",
                "cmk.utils.type_defs.UserId",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fantasy-anime-league-master/fal/orm/team_weekly_anime.py": {
        "TeamWeeklyAnime.__repr__": {
            "name": "__repr__",
            "location": 23,
            "return": [
                "bool",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fantasy-anime-league-master/fal/orm/team_weekly_points.py": {
        "TeamWeeklyPoints.__repr__": {
            "name": "__repr__",
            "location": 22,
            "return": [
                "Text",
                "bool",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fantasy-anime-league-master/fal/orm/wildcard.py": {},
    "fantasy-anime-league-master/fal/orm/wildcard_usage.py": {},
    "fantasy-anime-league-master/fal/orm/__init__.py": {},
    "fantasy-anime-league-master/fal/utils/deprecated.py": {
        "deprecated": {
            "name": "deprecated",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "reason": [
                    "Text",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "deprecated.decorator": {
            "name": "decorator",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "deprecated.decorator.wrapped": {
            "name": "wrapped",
            "location": 17,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {}
        }
    },
    "fantasy-anime-league-master/fal/utils/__init__.py": {},
    "fantasy-anime-league-master/fal/views/teams.py": {
        "headcount": {
            "name": "headcount",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "season_str": [
                    "str",
                    "int",
                    "List[Tuple[str, Any]]"
                ],
                "year": [
                    "str",
                    "int",
                    "List[Tuple[str, Any]]"
                ],
                "filename": [
                    "str",
                    "Text"
                ]
            }
        },
        "team_overview": {
            "name": "team_overview",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "season_str": [
                    "str",
                    "int",
                    "Dict[int, int]"
                ],
                "year": [
                    "str",
                    "int",
                    "Dict[int, int]"
                ],
                "filename": [
                    "str",
                    "Text"
                ]
            }
        },
        "team_stats": {
            "name": "team_stats",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "season_str": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool",
                    "float"
                ],
                "year": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool",
                    "float"
                ],
                "filename": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "team_dist": {
            "name": "team_dist",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "season_str": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "year": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "filename": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "add_week_to_filename": {
            "name": "add_week_to_filename",
            "location": 207,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "int",
                    "dict",
                    "List[str]"
                ],
                "week": [
                    "str",
                    "int",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "write_teams_to_file": {
            "name": "write_teams_to_file",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "TextIO",
                    "int",
                    "List[str]",
                    "bytes"
                ],
                "num_unique": [
                    "int",
                    "str"
                ],
                "same_teams": [
                    "int",
                    "str",
                    "bool",
                    "dict",
                    "bytes",
                    "List[str]",
                    "Optional[float]"
                ],
                "output_str": [
                    "int",
                    "str"
                ]
            }
        },
        "get_dist": {
            "name": "get_dist",
            "location": 222,
            "return": [
                "Tuple[Union[int,list]]",
                "str",
                "bool",
                "Optional[Dict[str,Any]]"
            ],
            "arguments": {
                "teams": [
                    "List[Dict[str, Any]]",
                    "Iterable[T]"
                ]
            }
        }
    },
    "fantasy-anime-league-master/oldfal/check_usernames.py": {},
    "fantasy-anime-league-master/oldfal/details.py": {},
    "fantasy-anime-league-master/oldfal/funcs.py": {
        "load_data": {
            "name": "load_data",
            "location": 18,
            "return": [
                "str",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "date": [
                    "str",
                    "List[Dict[str, Any]]",
                    "Optional[str]",
                    "bool",
                    "bytes"
                ],
                "zip_file": [
                    "str",
                    "List[Dict[str, Any]]",
                    "Optional[str]",
                    "bool",
                    "bytes"
                ],
                "f_name": [
                    "str",
                    "List[Dict[str, Any]]",
                    "Optional[str]",
                    "bool",
                    "bytes"
                ]
            }
        },
        "save_data": {
            "name": "save_data",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "Union[str, \"DatabaseURL\"]"
                ],
                "date": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "zip_file": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "f_name": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "save_all_data": {
            "name": "save_all_data",
            "location": 27,
            "return": [
                "None",
                "int",
                "IO"
            ],
            "arguments": {
                "date": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "int",
                    "Optional[List[str]]"
                ],
                "teams": [
                    "bool",
                    "Dict[str, str]",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "swaps": [
                    "bool",
                    "Dict[str, str]",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "aces": [
                    "bool",
                    "Dict[str, str]",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "wildcards": [
                    "bool",
                    "Dict[str, str]",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "anime": [
                    "int",
                    "bool",
                    "float"
                ],
                "a_scores": [
                    "int",
                    "bool",
                    "float"
                ],
                "t_scores": [
                    "bool",
                    "Dict[str, str]",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "retrieve": [
                    "bool",
                    "float",
                    "Optional[bool]"
                ]
            }
        },
        "load_all_data": {
            "name": "load_all_data",
            "location": 59,
            "return": [
                "Tuple",
                "bool",
                "Callable",
                "int",
                "str"
            ],
            "arguments": {
                "date": [
                    "str",
                    "bool",
                    "int",
                    "List[str]",
                    "Tuple[str, str]"
                ]
            }
        },
        "open_out_file": {
            "name": "open_out_file",
            "location": 85,
            "return": [
                "str",
                "IO"
            ],
            "arguments": {
                "week": [
                    "str"
                ],
                "f_name": [
                    "str"
                ]
            }
        },
        "map_anime": {
            "name": "map_anime",
            "location": 97,
            "return": [
                "bool",
                "Dict"
            ],
            "arguments": {}
        },
        "map_users": {
            "name": "map_users",
            "location": 102,
            "return": [
                "str",
                "Dict"
            ],
            "arguments": {}
        },
        "get_old_names": {
            "name": "get_old_names",
            "location": 107,
            "return": [
                "Text",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "current_name": [
                    "str",
                    "int",
                    "Union[List[str], str]"
                ],
                "inv_name_changes": [
                    "str",
                    "int",
                    "Union[List[str], str]"
                ]
            }
        },
        "levenshtein": {
            "name": "levenshtein",
            "location": 119,
            "return": [
                "bool",
                "List[List[str]]",
                "int"
            ],
            "arguments": {
                "s1": [
                    "str",
                    "bytes",
                    "float",
                    "int",
                    "dict"
                ],
                "s2": [
                    "str",
                    "bytes",
                    "float",
                    "int",
                    "dict"
                ]
            }
        },
        "spelling_correction": {
            "name": "spelling_correction",
            "location": 134,
            "return": [
                "Text",
                "float",
                "int"
            ],
            "arguments": {
                "wrong_title": [
                    "int"
                ]
            }
        },
        "find_max_dist": {
            "name": "find_max_dist",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fantasy-anime-league-master/oldfal/ranking_overview.py": {
        "get_sign": {
            "name": "get_sign",
            "location": 23,
            "return": [
                "Text",
                "int",
                "List"
            ],
            "arguments": {
                "number": [
                    "bool",
                    "str",
                    "T",
                    "Dict"
                ]
            }
        },
        "get_ranking": {
            "name": "get_ranking",
            "location": 32,
            "return": [
                "Dict",
                "str",
                "Set[str]",
                "bool",
                "MutableMapping[str,int]",
                "List[Optional[str]]",
                "List[str]"
            ],
            "arguments": {
                "w_scores": [
                    "List[Tuple[Any, Any]]",
                    "List[tuple]",
                    "Iterable[int]",
                    "List[float]",
                    "Tuple[int, int, int]",
                    "List[Tuple[int, Any]]",
                    "list"
                ]
            }
        },
        "format_ranking": {
            "name": "format_ranking",
            "location": 43,
            "return": [
                "Text",
                "str",
                "List[int]",
                "Optional[str]"
            ],
            "arguments": {
                "ranks": [
                    "int",
                    "List[List[int]]",
                    "str",
                    "List[int]",
                    "Sequence[str]"
                ]
            }
        },
        "blank": {
            "name": "blank",
            "location": 57,
            "return": [
                "Text",
                "int",
                "str",
                "Dict"
            ],
            "arguments": {
                "m": [
                    "int"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fantasy-anime-league-master/oldfal/results.py": {},
    "fantasy-anime-league-master/oldfal/scorer.py": {},
    "fantasy-anime-league-master/oldfal/teams.py": {},
    "fantasy-anime-league-master/oldfal/weekly_performance.py": {
        "get_sign": {
            "name": "get_sign",
            "location": 21,
            "return": [
                "Text",
                "int",
                "List"
            ],
            "arguments": {
                "number": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "get_ranking": {
            "name": "get_ranking",
            "location": 30,
            "return": [
                "Dict",
                "str",
                "Set[str]",
                "bool",
                "MutableMapping[str,int]",
                "List[Optional[str]]",
                "List[str]"
            ],
            "arguments": {
                "w_scores": [
                    "List[Tuple[Any, Any]]",
                    "List[tuple]",
                    "Iterable[int]",
                    "List[float]",
                    "Tuple[int, int, int]",
                    "List[Tuple[int, Any]]",
                    "list"
                ]
            }
        },
        "blank": {
            "name": "blank",
            "location": 41,
            "return": [
                "Text",
                "int",
                "str",
                "Dict"
            ],
            "arguments": {
                "m": [
                    "int"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fantasy-anime-league-master/oldfal/__init__.py": {},
    "fantasy-anime-league-master/test/__init__.py": {},
    "fantasy-anime-league-master/test/integration/test_anime.py": {
        "test_query_anime": {
            "name": "test_query_anime",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "id": [
                    "int",
                    "str",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session"
                ],
                "name": [
                    "str",
                    "bool",
                    "int",
                    "bytes",
                    "Optional[bytes]",
                    "None"
                ],
                "season_id": [
                    "str",
                    "Set[int]",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "alias": [
                    "int",
                    "str",
                    "List[str]",
                    "bool",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]"
                ],
                "restricted": [
                    "int",
                    "str",
                    "List[str]",
                    "bool",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]"
                ],
                "eligible": [
                    "int",
                    "str",
                    "List[str]",
                    "bool",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]"
                ],
                "season_of_year": [
                    "int",
                    "str",
                    "List[str]",
                    "bool",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]"
                ],
                "year": [
                    "int",
                    "str",
                    "Optional[Money]",
                    "None"
                ]
            }
        }
    },
    "fantasy-anime-league-master/test/integration/test_ptw.py": {
        "test_query_ptw": {
            "name": "test_query_ptw",
            "location": 12,
            "return": [],
            "arguments": {
                "date": [
                    "List[str]",
                    "Optional[str]",
                    "sqlalchemy.orm.Session",
                    "datetime.date"
                ],
                "ptw_counts": [
                    "List[str]",
                    "Optional[str]",
                    "sqlalchemy.orm.Session",
                    "datetime.date"
                ]
            }
        }
    },
    "fantasy-anime-league-master/test/integration/test_season.py": {
        "test_retrieve_teams": {
            "name": "test_retrieve_teams",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fantasy-anime-league-master/test/integration/test_team_weekly_anime.py": {
        "test_query_team_weekly_anime": {
            "name": "test_query_team_weekly_anime",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "team_id": [
                    "str",
                    "bytes",
                    "int",
                    "List[int]",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "anime_ids": [
                    "bytes",
                    "Set[str]",
                    "int",
                    "str"
                ],
                "name": [
                    "str",
                    "Type[Any]",
                    "Type",
                    "Optional[str]",
                    "None"
                ],
                "bench_indices": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "fantasy-anime-league-master/test/unit/conftest.py": {
        "session_factory": {
            "name": "session_factory",
            "location": 23,
            "return": [
                "dict",
                "Exception",
                "str",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {}
        },
        "session": {
            "name": "session",
            "location": 31,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "session_factory": [
                    "bool",
                    "str",
                    "Dict[str, str]",
                    "Tuple[float, float]"
                ]
            }
        },
        "session_scope": {
            "name": "session_scope",
            "location": 39,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "session_factory": [
                    "bool",
                    "str",
                    "Dict[str, str]",
                    "Tuple[float, float]"
                ]
            }
        },
        "config_functor": {
            "name": "config_functor",
            "location": 76,
            "return": [
                "str",
                "Optional[dict]",
                "dict",
                "bool"
            ],
            "arguments": {}
        },
        "session_scope._session_scope": {
            "name": "_session_scope",
            "location": 43,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sections": [
                    "int",
                    "bool",
                    "float"
                ],
                "kv": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Config.__call__": {
            "name": "__call__",
            "location": 56,
            "return": [
                "str",
                "Tuple[str, bytes]",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "section": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "key": [
                    "str",
                    "dict",
                    "bytes"
                ],
                "fallback": [
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "config_functor._config_functor": {
            "name": "_config_functor",
            "location": 77,
            "return": [
                "Config",
                "str",
                "Optional[dict]",
                "Dict",
                "bool"
            ],
            "arguments": {
                "sections": [
                    "str",
                    "bool",
                    "int"
                ],
                "kv": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "fantasy-anime-league-master/test/unit/controllers/test_anime_stats_controller.py": {
        "total_points_with_dropped_and_forum_posts": {
            "name": "total_points_with_dropped_and_forum_posts",
            "location": 24,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {
                "stats": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "num_regions": [
                    "bool",
                    "int"
                ],
                "is_licensed": [
                    "bool",
                    "int"
                ],
                "multiplier": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "total_points_with_simulcast": {
            "name": "total_points_with_simulcast",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "stats": [
                    "Optional[Any]",
                    "int",
                    "Any",
                    "None"
                ],
                "num_regions": [
                    "Optional[Any]",
                    "int",
                    "Any",
                    "None"
                ],
                "is_licensed": [
                    "bool",
                    "Callable",
                    "Optional[int]",
                    "Dict",
                    "None"
                ],
                "multiplier": [
                    "Optional[Any]",
                    "int",
                    "Any",
                    "None"
                ]
            }
        },
        "total_points_with_license": {
            "name": "total_points_with_license",
            "location": 40,
            "return": [
                "int",
                "float",
                "Callable",
                "str"
            ],
            "arguments": {
                "stats": [
                    "int",
                    "float"
                ],
                "num_regions": [
                    "bool",
                    "Callable",
                    "Optional[int]",
                    "Dict",
                    "None"
                ],
                "is_licensed": [
                    "int",
                    "float"
                ],
                "multiplier": [
                    "int",
                    "float"
                ]
            }
        },
        "test_populate_anime_weekly_stats": {
            "name": "test_populate_anime_weekly_stats",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "season_config_mock": [],
                "anime_stats_config_mock": [],
                "get_total_forum_posts": [
                    "Iterable[Iterable[Any]]"
                ],
                "extract_file_contents": [],
                "config_functor": [],
                "orm_season_factory": [
                    "Dict[str,Any]"
                ],
                "orm_anime_factory": [
                    "Dict[str,Sequence[str]]"
                ],
                "orm_team_factory": [],
                "anime_weekly_stat_factory": [
                    "int",
                    "str"
                ],
                "team_weekly_anime_factory": [],
                "anime_stats_factory": [],
                "session": [],
                "session_scope": [
                    "bool",
                    "mock.MagicMock"
                ],
                "week": [
                    "dict"
                ],
                "points": [],
                "total_points_function": [
                    "bool",
                    "str"
                ],
                "section": []
            }
        },
        "test_get_forum_posts": {
            "name": "test_get_forum_posts",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "get_forum_posts_for_week": [
                    "bool",
                    "str",
                    "int"
                ],
                "orm_anime_factory": [
                    "Optional[Any]",
                    "str",
                    "Any",
                    "bool",
                    "None"
                ],
                "config_functor": [
                    "int",
                    "str",
                    "Callable[...,None]",
                    "Callable[[int,int],None]",
                    "Literal"
                ],
                "anime_stats_factory": [
                    "str",
                    "Callable"
                ],
                "session": []
            }
        },
        "test_is_week_to_calculate": {
            "name": "test_is_week_to_calculate",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "config_mock": [],
                "anime_stats_post_init": [],
                "config_functor": [],
                "week": [
                    "Type",
                    "bool"
                ],
                "is_valid": [
                    "bool"
                ],
                "section": [
                    "bool"
                ],
                "anime_stats_factory": [
                    "Type",
                    "bool"
                ]
            }
        },
        "test_get_anime_simulcast_region_counts": {
            "name": "test_get_anime_simulcast_region_counts",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "Optional[bool]",
                    "bool",
                    "sqlalchemy.orm.Session",
                    "None"
                ],
                "orm_season_factory": [
                    "bool"
                ],
                "orm_anime_factory": [
                    "str",
                    "Dict",
                    "int",
                    "Dict[str,Any]"
                ],
                "anime_stats_factory": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "test_get_licensed_anime": {
            "name": "test_get_licensed_anime",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "str",
                    "int",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session",
                    "fal.orm.Team"
                ],
                "orm_season_factory": [
                    "bool"
                ],
                "orm_anime_factory": [
                    "str",
                    "Dict",
                    "int",
                    "Dict[str,Any]"
                ],
                "anime_stats_factory": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        }
    },
    "fantasy-anime-league-master/test/unit/controllers/test_check_usernames.py": {
        "test_check_username_success": {
            "name": "test_check_username_success",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "capfd": [
                    "Mapping[str, Any]",
                    "str"
                ]
            }
        },
        "test_check_username_failure": {
            "name": "test_check_username_failure",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "capfd": [
                    "Mapping[str, Any]",
                    "str"
                ]
            }
        },
        "test_caps_username_success": {
            "name": "test_caps_username_success",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "capfd": [
                    "Mapping[str, Any]",
                    "str"
                ]
            }
        }
    },
    "fantasy-anime-league-master/test/unit/controllers/test_load_aces.py": {
        "test_ace_already_loaded_this_week": {
            "name": "test_ace_already_loaded_this_week",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "team_weekly_anime_factory": [],
                "orm_team_factory": [],
                "orm_anime_factory": [],
                "session": []
            }
        },
        "test_ace_not_already_loaded_this_week": {
            "name": "test_ace_not_already_loaded_this_week",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "team_weekly_anime_factory": [
                    "Callable",
                    "str"
                ],
                "orm_team_factory": [
                    "Callable",
                    "str"
                ],
                "orm_anime_factory": [],
                "session": [
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "test_team_anime_aced_already": {
            "name": "test_team_anime_aced_already",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "team_weekly_anime_factory": [
                    "str",
                    "float"
                ],
                "orm_team_factory": [
                    "str",
                    "float"
                ],
                "orm_anime_factory": [
                    "str",
                    "float"
                ],
                "session": [
                    "str",
                    "float"
                ]
            }
        },
        "test_team_anime_not_aced_already": {
            "name": "test_team_anime_not_aced_already",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "team_weekly_anime_factory": [
                    "str",
                    "float"
                ],
                "orm_team_factory": [
                    "str",
                    "float"
                ],
                "orm_anime_factory": [
                    "str",
                    "float"
                ],
                "session": [
                    "str",
                    "float"
                ]
            }
        },
        "test_load_aces": {
            "name": "test_load_aces",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "session_scope_mock": [],
                "config_mock": [],
                "orm_season_factory": [],
                "orm_team_factory": [
                    "Optional[Dict[str,Any]]",
                    "bool",
                    "Dict[str,Any]",
                    "None"
                ],
                "orm_anime_factory": [
                    "Optional[Dict[str,Any]]",
                    "bool",
                    "Dict[str,Any]",
                    "None"
                ],
                "team_weekly_anime_factory": [],
                "config_functor": [],
                "session_scope": [],
                "session": []
            }
        }
    },
    "fantasy-anime-league-master/test/unit/controllers/test_start_new_week.py": {
        "test_init_new_team_weekly_anime": {
            "name": "test_init_new_team_weekly_anime",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "orm_season_factory": [],
                "orm_team_factory": [],
                "team_weekly_anime_factory": [],
                "session": []
            }
        }
    },
    "fantasy-anime-league-master/test/unit/controllers/test_team_score.py": {
        "test_already_got_high_bonus": {
            "name": "test_already_got_high_bonus",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "team_weekly_points_factory": [
                    "bool",
                    "str"
                ],
                "orm_team_factory": [
                    "bool",
                    "str"
                ],
                "session": [
                    "Callable[[List,bool],None]",
                    "Callable[List,bool,None]"
                ]
            }
        },
        "test_did_not_get_high_bonus_yet": {
            "name": "test_did_not_get_high_bonus_yet",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "team_weekly_points_factory": [
                    "bool",
                    "str"
                ],
                "orm_team_factory": [
                    "bool",
                    "str"
                ],
                "session": [
                    "Callable[[List,bool],None]",
                    "Callable[List,bool,None]"
                ]
            }
        },
        "test_get_team_scores_counts_this_week_returns_score_groups_descending_order_by_score": {
            "name": "test_get_team_scores_counts_this_week_returns_score_groups_descending_order_by_score",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "team_weekly_points_factory": [
                    "bool",
                    "str",
                    "List[int]"
                ],
                "orm_team_factory": [
                    "bool",
                    "Dict[str, Any]"
                ],
                "session": [
                    "Dict[str,str]",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "test_calculate_team_total_score": {
            "name": "test_calculate_team_total_score",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "team_weekly_points_factory": [
                    "bool",
                    "str"
                ],
                "orm_team_factory": [
                    "bool",
                    "str"
                ],
                "session": [
                    "bool"
                ]
            }
        },
        "test_add_team_anime_scores_to_weekly_points": {
            "name": "test_add_team_anime_scores_to_weekly_points",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "team_weekly_points_factory": [
                    "int",
                    "str",
                    "Dict"
                ],
                "team_weekly_anime_factory": [
                    "bool",
                    "str",
                    "float"
                ],
                "anime_weekly_stat_factory": [],
                "session": [
                    "Dict[str,Any]"
                ]
            }
        },
        "test_aced_anime_earns_extra": {
            "name": "test_aced_anime_earns_extra",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "config_mock": [],
                "team_weekly_points_factory": [
                    "str",
                    "bytes",
                    "int",
                    "Callable",
                    "bool"
                ],
                "team_weekly_anime_factory": [
                    "str",
                    "List",
                    "List[str]",
                    "Dict"
                ],
                "anime_weekly_stat_factory": [
                    "str",
                    "Tuple[int, int]",
                    "float"
                ],
                "config_functor": [
                    "int"
                ],
                "session": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "test_aced_anime_over_cutoff_does_not_earn_extra": {
            "name": "test_aced_anime_over_cutoff_does_not_earn_extra",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "config_mock": [],
                "team_weekly_points_factory": [
                    "bool",
                    "str",
                    "int"
                ],
                "team_weekly_anime_factory": [
                    "List[str]",
                    "str",
                    "List",
                    "Optional[list]",
                    "None"
                ],
                "anime_weekly_stat_factory": [
                    "str",
                    "float"
                ],
                "config_functor": [],
                "session": [
                    "Callable[[list],None]",
                    "str",
                    "Callable[list,None]",
                    "Dict[str,Any]"
                ]
            }
        },
        "test_wrongly_aced_anime_loses_points": {
            "name": "test_wrongly_aced_anime_loses_points",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "config_mock": [],
                "team_weekly_points_factory": [
                    "str",
                    "bytes",
                    "int",
                    "Callable",
                    "bool"
                ],
                "team_weekly_anime_factory": [
                    "str",
                    "List",
                    "List[str]",
                    "Dict"
                ],
                "anime_weekly_stat_factory": [
                    "str",
                    "Tuple[int, int]",
                    "float"
                ],
                "config_functor": [
                    "int"
                ],
                "session": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "test_calculate_team_scores_assigns_highest_team_correctly_and_adds_bonus": {
            "name": "test_calculate_team_scores_assigns_highest_team_correctly_and_adds_bonus",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "session_scope_mock": [],
                "config_mock": [],
                "orm_season_factory": [],
                "orm_team_factory": [
                    "int"
                ],
                "team_weekly_anime_factory": [],
                "anime_weekly_stat_factory": [],
                "config_functor": [],
                "session_scope": [],
                "session": [
                    "mock.MagicMock"
                ]
            }
        }
    },
    "fantasy-anime-league-master/test/unit/controllers/test_collect_series/conftest.py": {
        "series_dict_fixture": {
            "name": "series_dict_fixture",
            "location": 5,
            "return": [
                "dict[int, typing.Text]"
            ],
            "arguments": {}
        },
        "series": {
            "name": "series",
            "location": 48,
            "return": [
                "list[tuple[typing.Union[int,typing.Text]]]"
            ],
            "arguments": {}
        },
        "series_titles": {
            "name": "series_titles",
            "location": 91,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        }
    },
    "fantasy-anime-league-master/test/unit/controllers/test_collect_series/test_collect_series.py": {
        "test_get_series": {
            "name": "test_get_series",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "series_dict_fixture": [
                    "str",
                    "Optional[Hashable]",
                    "Hashable",
                    "None"
                ],
                "season": [
                    "set",
                    "dict"
                ],
                "year": [
                    "set",
                    "dict"
                ]
            }
        },
        "test_output_series": {
            "name": "test_output_series",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "series": [
                    "str"
                ],
                "shared_datadir": [
                    "Iterable[int]"
                ]
            }
        },
        "test_output_series_titles": {
            "name": "test_output_series_titles",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "series_titles": [],
                "shared_datadir": [
                    "float",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "fantasy-anime-league-master/test/unit/controllers/test_load_teams/test_load_teams.py": {
        "test_slice_up_team_input": {
            "name": "test_slice_up_team_input",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "config_mock": [],
                "team_input": [
                    "str",
                    "bytes",
                    "int",
                    "Callable",
                    "bool"
                ],
                "teamname": [
                    "str",
                    "bytes",
                    "int",
                    "Callable",
                    "bool"
                ],
                "active": [
                    "str",
                    "bytes",
                    "int",
                    "Callable",
                    "bool"
                ],
                "bench": [
                    "str",
                    "bytes",
                    "int",
                    "Callable",
                    "bool"
                ]
            }
        },
        "test_slice_up_team_input_raises_if_length_is_not_expected": {
            "name": "test_slice_up_team_input_raises_if_length_is_not_expected",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "config_mock": [],
                "team_input": [
                    "List[str]",
                    "str",
                    "Callable"
                ]
            }
        },
        "test_add_anime_to_team": {
            "name": "test_add_anime_to_team",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "str"
                ],
                "orm_team_factory": [
                    "sqlalchemy.orm.session.Session"
                ],
                "orm_anime_factory": [
                    "bool",
                    "str",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "test_load_teams": {
            "name": "test_load_teams",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "session_scope_mock": [],
                "config_mock": [
                    "mock.Mock",
                    "mock.MagicMock"
                ],
                "config_functor": [],
                "shared_datadir": [
                    "Optional[str]",
                    "str"
                ],
                "session_scope": [],
                "session": [],
                "orm_anime_factory": [
                    "str"
                ],
                "orm_season_factory": []
            }
        },
        "test_slice_up_team_input.mock_config": {
            "name": "mock_config",
            "location": 41,
            "return": [
                "int"
            ],
            "arguments": {
                "section": [],
                "key": []
            }
        },
        "test_slice_up_team_input_raises_if_length_is_not_expected.mock_config": {
            "name": "mock_config",
            "location": 93,
            "return": [
                "int",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "section": [
                    "str",
                    "List[str]"
                ],
                "key": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_load_teams.mock_config_getitem": {
            "name": "mock_config_getitem",
            "location": 152,
            "return": [
                "Dict[Text,]",
                "str",
                "Iterable[int]",
                "int",
                "bool"
            ],
            "arguments": {
                "key": [
                    "str",
                    "KT"
                ]
            }
        }
    },
    "fantasy-anime-league-master/test/unit/controllers/test_ptw_counter/conftest.py": {
        "ptw_fixture": {
            "name": "ptw_fixture",
            "location": 7,
            "return": [
                "List[PTWEntry]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "fantasy-anime-league-master/test/unit/controllers/test_ptw_counter/test_ptw_counter.py": {
        "test_localize_number": {
            "name": "test_localize_number",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_ptw_info": {
            "name": "test_get_ptw_info",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "time_mock": [
                    "mock.MagicMock",
                    "unittesmock.MagicMock"
                ],
                "ptw_fixture": [
                    "bool"
                ],
                "anime_list": []
            }
        },
        "test_output_ptw_info": {
            "name": "test_output_ptw_info",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "season_of_year": [
                    "str",
                    "sqlalchemy.orm.session.sessionmaker"
                ],
                "year": [
                    "str",
                    "sqlalchemy.orm.session.sessionmaker"
                ],
                "ptw": [],
                "shared_datadir": []
            }
        },
        "test_add_ptw_to_database": {
            "name": "test_add_ptw_to_database",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update_ptw_in_database": {
            "name": "test_update_ptw_in_database",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fantasy-anime-league-master/test/unit/factories/__init__.py": {},
    "fantasy-anime-league-master/test/unit/factories/controllers/anime_stats.py": {},
    "fantasy-anime-league-master/test/unit/factories/controllers/__init__.py": {},
    "fantasy-anime-league-master/test/unit/factories/models/anime.py": {
        "AnimeFactory.entity": {
            "name": "entity",
            "location": 12,
            "return": [
                "OrmAnimeFactory"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnimeFactory.names": {
            "name": "names",
            "location": 26,
            "return": [
                "set[typing.Text]"
            ],
            "arguments": {
                "n": []
            }
        }
    },
    "fantasy-anime-league-master/test/unit/factories/models/season.py": {
        "SeasonFactory.entity": {
            "name": "entity",
            "location": 12,
            "return": [
                "OrmSeasonFactory",
                "str",
                "Type[T]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fantasy-anime-league-master/test/unit/factories/models/__init__.py": {},
    "fantasy-anime-league-master/test/unit/factories/orm/anime.py": {
        "OrmAnimeFactory.name": {
            "name": "name",
            "location": 21,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "n": []
            }
        },
        "OrmAnimeFactory.season": {
            "name": "season",
            "location": 28,
            "return": [
                "Season"
            ],
            "arguments": {
                "self": [],
                "n": []
            }
        }
    },
    "fantasy-anime-league-master/test/unit/factories/orm/anime_weekly_stat.py": {
        "AnimeWeeklyStatFactory.anime_id": {
            "name": "anime_id",
            "location": 14,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fantasy-anime-league-master/test/unit/factories/orm/season.py": {
        "OrmSeasonFactory.anime": {
            "name": "anime",
            "location": 17,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "create": [
                    "int",
                    "Tuple[Union[int,str]]",
                    "Tuple[int,str]",
                    "Iterator",
                    "Iterator[int]",
                    "Iterable[int]"
                ],
                "extracted": [
                    "Tuple[Union[int,str]]",
                    "int",
                    "Tuple[int,str]",
                    "Iterator[int]",
                    "Iterable[int]"
                ]
            }
        },
        "OrmSeasonFactory.teams": {
            "name": "teams",
            "location": 28,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "create": [
                    "int",
                    "Tuple[Union[int,str]]",
                    "Tuple[int,str]",
                    "Iterator",
                    "Iterator[int]",
                    "Iterable[int]"
                ],
                "extracted": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "fantasy-anime-league-master/test/unit/factories/orm/session.py": {},
    "fantasy-anime-league-master/test/unit/factories/orm/team.py": {
        "OrmTeamFactory.season": {
            "name": "season",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "List",
                "str",
                "Season"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "fantasy-anime-league-master/test/unit/factories/orm/team_weekly_anime.py": {
        "TeamWeeklyAnimeFactory.team_id": {
            "name": "team_id",
            "location": 15,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamWeeklyAnimeFactory.anime_id": {
            "name": "anime_id",
            "location": 19,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fantasy-anime-league-master/test/unit/factories/orm/team_weekly_points.py": {
        "TeamWeeklyPointsFactory.team_id": {
            "name": "team_id",
            "location": 14,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fantasy-anime-league-master/test/unit/factories/orm/__init__.py": {},
    "fantasy-anime-league-master/test/unit/models/test_anime_model.py": {
        "test_create_and_retrieve_anime_by_name_and_alias": {
            "name": "test_create_and_retrieve_anime_by_name_and_alias",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "List[dict[str,Any]]",
                    "str",
                    "sqlalchemy.orm.Session",
                    "List[Dict[str,Any]]",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "test_retrieve_anime_does_not_exist": {
            "name": "test_retrieve_anime_does_not_exist",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "Dict[str,Any]",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session",
                    "tnadmin.models.GvOrganisation",
                    "models.UserAuth"
                ]
            }
        },
        "test_create_anime_twice_throws_exception": {
            "name": "test_create_anime_twice_throws_exception",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "Dict[str,Any]",
                    "sqlalchemy.orm.Session"
                ]
            }
        }
    },
    "fantasy-anime-league-master/test/unit/models/test_team_model.py": {
        "test_create_and_retrieve_team_by_name": {
            "name": "test_create_and_retrieve_team_by_name",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "str",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "test_retrieve_team_does_not_exist": {
            "name": "test_retrieve_team_does_not_exist",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "Dict[str,Any]",
                    "None",
                    "sqlalchemy.orm.Session",
                    "models.user.PostingCard",
                    "Optional[sqlalchemy.engine.Engine]",
                    "models.Course"
                ]
            }
        },
        "test_create_team_twice_throws_exception": {
            "name": "test_create_team_twice_throws_exception",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "Dict[str,Any]",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.scoping.scoped_session",
                    "tnadmin.models.GvOrganisation",
                    "accounts.models.KippoOrganization"
                ]
            }
        },
        "test_add_same_anime_to_team_raises_exception": {
            "name": "test_add_same_anime_to_team_raises_exception",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "config_mock": [],
                "season_factory": [
                    "str"
                ],
                "session": [
                    "Dict"
                ],
                "config_functor": [
                    "int",
                    "IO[str]",
                    "IO"
                ]
            }
        },
        "test_bench_swap": {
            "name": "test_bench_swap",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "season_config_mock": [],
                "session": [
                    "str"
                ],
                "config_functor": []
            }
        }
    },
    "fantasy-anime-league-master/test/unit/orm/test_anime_orm.py": {
        "test_add_anime_to_database": {
            "name": "test_add_anime_to_database",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fantasy-anime-league-master/test/unit/orm/test_season_orm.py": {
        "test_get_season_from_database_adds_season": {
            "name": "test_get_season_from_database_adds_season",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fantasy-anime-league-master/test/unit/views/test_teams_views/test_teams_views.py": {
        "test_headcount": {
            "name": "test_headcount",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "session_scope_mock": [],
                "session": [
                    "bool",
                    "List[List[int]]",
                    "List[list[int]]"
                ],
                "session_scope": [],
                "orm_team_factory": [
                    "str",
                    "abilian.web.views.registry.Registry"
                ],
                "shared_datadir": [
                    "str"
                ]
            }
        },
        "test_team_overview": {
            "name": "test_team_overview",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "session_scope_mock": [],
                "config_mock": [],
                "session": [
                    "bool",
                    "mock.MagicMock"
                ],
                "session_scope": [],
                "shared_datadir": [],
                "orm_team_factory": [
                    "abilian.web.views.registry.Registry"
                ],
                "team_weekly_anime_factory": [
                    "float"
                ],
                "orm_anime_factory": [
                    "str"
                ]
            }
        },
        "test_team_stats": {
            "name": "test_team_stats",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "session_scope_mock": [],
                "config_mock": [],
                "session": [
                    "bool",
                    "mock.MagicMock"
                ],
                "session_scope": [],
                "shared_datadir": [],
                "orm_team_factory": [
                    "abilian.web.views.registry.Registry"
                ],
                "team_weekly_anime_factory": [
                    "float"
                ],
                "orm_anime_factory": [
                    "str"
                ]
            }
        },
        "test_team_dist": {
            "name": "test_team_dist",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "session_scope_mock": [],
                "config_mock": [],
                "session": [
                    "bool",
                    "mock.MagicMock"
                ],
                "session_scope": [],
                "shared_datadir": [],
                "orm_team_factory": [
                    "abilian.web.views.registry.Registry"
                ],
                "team_weekly_anime_factory": [
                    "float"
                ],
                "orm_anime_factory": [
                    "str"
                ]
            }
        },
        "test_add_week_to_filename": {
            "name": "test_add_week_to_filename",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "week": [
                    "str"
                ],
                "orig_filename": [
                    "str"
                ],
                "exp_filename": [
                    "str"
                ]
            }
        },
        "test_write_teams_to_file": {
            "name": "test_write_teams_to_file",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "shared_datadir": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_get_dist": {
            "name": "test_get_dist",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_team_overview.mock_config_getweek": {
            "name": "mock_config_getweek",
            "location": 44,
            "return": [
                "int"
            ],
            "arguments": {
                "section": [],
                "key": []
            }
        },
        "test_team_stats.mock_config_getweek": {
            "name": "mock_config_getweek",
            "location": 89,
            "return": [
                "int"
            ],
            "arguments": {
                "section": [],
                "key": []
            }
        },
        "test_team_dist.mock_config_getweek": {
            "name": "mock_config_getweek",
            "location": 132,
            "return": [
                "int",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "section": [
                    "str",
                    "List[str]"
                ],
                "key": [
                    "str",
                    "List[str]"
                ]
            }
        }
    }
}
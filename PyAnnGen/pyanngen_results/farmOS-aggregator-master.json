{
    "farmOS-aggregator-master/backend/app/alembic/env.py": {
        "get_url": {
            "name": "get_url",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "farmOS-aggregator-master/backend/app/alembic/versions/21f1d47b6386_add_farm_table_and_farmtoken_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "farmOS-aggregator-master/backend/app/alembic/versions/90a5fd6c8be7_create_apikey_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "farmOS-aggregator-master/backend/app/alembic/versions/cd672c4e6bda_add_scope_string_to_farm_model.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "farmOS-aggregator-master/backend/app/alembic/versions/d2422b5a6859_add_indexes_to_farm_token.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "farmOS-aggregator-master/backend/app/alembic/versions/d4867f3a4c0a_first_revision.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "farmOS-aggregator-master/backend/app/app/backend_pre_start.py": {
        "init": {
            "name": "init",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "farmOS-aggregator-master/backend/app/app/initial_data.py": {
        "init": {
            "name": "init",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "farmOS-aggregator-master/backend/app/app/main.py": {},
    "farmOS-aggregator-master/backend/app/app/tests_pre_start.py": {
        "init": {
            "name": "init",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "farmOS-aggregator-master/backend/app/app/utils.py": {
        "get_settings": {
            "name": "get_settings",
            "location": 22,
            "return": [
                "Settings",
                "Dict[str,Any]",
                "app.App",
                "str",
                "List[str]",
                "_vendor.traitlets.config.Config",
                "Optional[str]",
                "app.config.MQConfig"
            ],
            "arguments": {}
        },
        "send_email": {
            "name": "send_email",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "email_to": [
                    "str",
                    "bool"
                ],
                "subject_template": [
                    "Text",
                    "str",
                    "int"
                ],
                "html_template": [
                    "Text",
                    "str",
                    "Union[str,starlette.datastructures.Secret]",
                    "bool",
                    "BinaryIO"
                ],
                "environment": [
                    "Dict",
                    "str",
                    "Union[int,str,bool]",
                    "Type[object]",
                    "List[str]"
                ]
            }
        },
        "send_reset_password_email": {
            "name": "send_reset_password_email",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "email_to": [
                    "str",
                    "bytes"
                ],
                "email": [
                    "str",
                    "int",
                    "Union[str,bytes]",
                    "bytes"
                ],
                "token": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "send_new_account_email": {
            "name": "send_new_account_email",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "email_to": [
                    "str"
                ],
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "send_admin_alert_email": {
            "name": "send_admin_alert_email",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "email_to": [
                    "str"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "generate_password_reset_token": {
            "name": "generate_password_reset_token",
            "location": 121,
            "return": [
                "float",
                "logging.LogRecord",
                "bool",
                "Callable[[None], bool]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "email": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "verify_password_reset_token": {
            "name": "verify_password_reset_token",
            "location": 134,
            "return": [
                "None",
                "bool",
                "str",
                "Optional[str]",
                "float"
            ],
            "arguments": {
                "token": [
                    "str",
                    "Union[str,int]",
                    "int"
                ]
            }
        },
        "send_farm_registration_email": {
            "name": "send_farm_registration_email",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "email_to": [
                    "str"
                ],
                "link": [
                    "str"
                ]
            }
        },
        "send_farm_authorization_email": {
            "name": "send_farm_authorization_email",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "email_to": [
                    "str"
                ],
                "link": [
                    "str"
                ],
                "farm": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "List[str]",
                    "datetime.datetime",
                    "None"
                ]
            }
        },
        "generate_farm_authorization_link": {
            "name": "generate_farm_authorization_link",
            "location": 180,
            "return": [
                "str"
            ],
            "arguments": {
                "farm_id": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "generate_farm_registration_link": {
            "name": "generate_farm_registration_link",
            "location": 189,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "farmOS-aggregator-master/backend/app/app/__init__.py": {},
    "farmOS-aggregator-master/backend/app/app/api/__init__.py": {},
    "farmOS-aggregator-master/backend/app/app/api/api_v1/api.py": {},
    "farmOS-aggregator-master/backend/app/app/api/api_v1/__init__.py": {},
    "farmOS-aggregator-master/backend/app/app/api/api_v1/endpoints/api_key.py": {
        "get_api_keys": {
            "name": "get_api_keys",
            "location": 18,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, str]]",
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "db": [
                    "Depends",
                    "str",
                    "sqlalchemy.engine.Engine",
                    "Optional[Mapping[str,Any]]"
                ]
            }
        },
        "create_api_key": {
            "name": "create_api_key",
            "location": 26,
            "return": [
                "Dict[str,str]",
                "str",
                "Callable[,str]",
                "Set[str]",
                "bool"
            ],
            "arguments": {}
        },
        "update_api_key": {
            "name": "update_api_key",
            "location": 40,
            "return": [
                "str",
                "int",
                "bytes",
                "Sequence[str]"
            ],
            "arguments": {}
        },
        "delete_api_key": {
            "name": "delete_api_key",
            "location": 63,
            "return": [
                "str",
                "int",
                "Sequence[str]",
                "bool"
            ],
            "arguments": {}
        }
    },
    "farmOS-aggregator-master/backend/app/app/api/api_v1/endpoints/login.py": {
        "login_access_token": {
            "name": "login_access_token",
            "location": 30,
            "return": [
                "Dict[Text,Text]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "db": [
                    "Depends",
                    "bytes",
                    "Dict",
                    "salon.models.Stylist",
                    "List[Dict[str,Any]]",
                    "cmk.utils.type_defs.ServiceDetails"
                ],
                "settings": [
                    "Depends",
                    "str",
                    "sqlalchemy.engine.Engine",
                    "bool",
                    "bytes"
                ],
                "form_data": [
                    "Depends",
                    "rotkehlchen.db.dbhandler.DBHandler",
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "test_token": {
            "name": "test_token",
            "location": 57,
            "return": [
                "Callable",
                "Depends"
            ],
            "arguments": {
                "current_user": [
                    "Depends",
                    "app.db_models.user.User",
                    "ultron8.api.db_models.user.User",
                    "core.models.Recipe",
                    "User",
                    "str",
                    "arxiv.submission.User"
                ]
            }
        },
        "recover_password": {
            "name": "recover_password",
            "location": 65,
            "return": [
                "Dict[Text,Text]",
                "str",
                "audiopyle.lib.models.file_meta.CompressedAudioFileMeta",
                "Type"
            ],
            "arguments": {
                "email": [
                    "str",
                    "int",
                    "Dict"
                ],
                "db": [
                    "Depends",
                    "str",
                    "int",
                    "django.db.models.Model",
                    "raiden.utils.List[raiden.utils.Tuple[str,raiden.utils.Any]]",
                    "bool",
                    "limbic.emotion.models.LexiconLimbicModel"
                ]
            }
        },
        "reset_password": {
            "name": "reset_password",
            "location": 84,
            "return": [
                "Dict[Text,Text]",
                "str",
                "List[zerver.models.Stream]",
                "Dict",
                "int"
            ],
            "arguments": {
                "token": [
                    "Body",
                    "str",
                    "bool"
                ],
                "new_password": [
                    "str",
                    "Body"
                ],
                "db": [
                    "Depends",
                    "str",
                    "Dict",
                    "Optional[float]"
                ]
            }
        }
    },
    "farmOS-aggregator-master/backend/app/app/api/api_v1/endpoints/users.py": {
        "read_users": {
            "name": "read_users",
            "location": 19,
            "return": [
                "str",
                "lms.lmsdb.models.User",
                "Tuple[Union[Literal,Literal]]",
                "lms.lmsdb.models.Solution",
                "Set",
                "discord.User",
                "Dict[str,int]",
                "zam_repondeur.models.Lecture",
                "asgard.models.user.User"
            ],
            "arguments": {
                "db": [
                    "Depends",
                    "str",
                    "zerver.models.UserProfile",
                    "Iterable[zerver.models.Stream]"
                ],
                "skip": [
                    "int",
                    "str",
                    "zerver.models.UserProfile",
                    "Iterable[zerver.models.Stream]"
                ],
                "limit": [
                    "int",
                    "str",
                    "zerver.models.UserProfile",
                    "Iterable[zerver.models.Stream]"
                ],
                "current_user": [
                    "Depends",
                    "mediaarchiver.models.TypeVarAccount",
                    "app.db_models.user.User",
                    "Callable",
                    "List[str]",
                    "List[Dict[str,Any]]",
                    "id3c.db.session.DatabaseSession",
                    "sqlalchemy.orm.unitofwork.UOWTransaction",
                    "bool"
                ]
            }
        },
        "create_user": {
            "name": "create_user",
            "location": 33,
            "return": [
                "str",
                "zam_repondeur.models.Lecture",
                "core.models.UserPreferences",
                "Set",
                "int",
                "user_models.User",
                "bool",
                "django.db.models.QuerySet"
            ],
            "arguments": {}
        },
        "update_user_me": {
            "name": "update_user_me",
            "location": 58,
            "return": [
                "int",
                "zam_repondeur.models.Lecture",
                "Dict[Any,dict[str,Any]]",
                "Dict[str,str]",
                "Set",
                "Dict",
                "bool",
                "Dict[str,list[str]]",
                "django.db.models.QuerySet",
                "Dict[str,Union[bytes,str]]",
                "user_models.User",
                "Dict[U,dict[str,Any]]",
                "core.models.UserPreferences",
                "bob_emploi.frontend.api.user_pb2.EmailSent"
            ],
            "arguments": {}
        },
        "read_user_me": {
            "name": "read_user_me",
            "location": 82,
            "return": [
                "Depends",
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "db": [
                    "Depends",
                    "app.db_models.user.User",
                    "bool",
                    "Optional[zerver.models.UserProfile]",
                    "str",
                    "zerver.models.Client"
                ],
                "current_user": [
                    "Depends",
                    "app.db_models.user.User",
                    "bool",
                    "Optional[zerver.models.UserProfile]",
                    "str",
                    "zerver.models.Client"
                ]
            }
        },
        "create_user_open": {
            "name": "create_user_open",
            "location": 93,
            "return": [
                "zam_repondeur.models.Lecture",
                "set",
                "bool",
                "user_models.User",
                "django.db.models.QuerySet",
                "core.models.UserPreferences",
                "bob_emploi.frontend.api.user_pb2.EmailSent",
                "int"
            ],
            "arguments": {}
        },
        "read_user_by_id": {
            "name": "read_user_by_id",
            "location": 121,
            "return": [
                "Dict[str,object]",
                "zerver.models.Realm",
                "str",
                "abilian.core.models.subjects.User",
                "models.User",
                "zerver.models.UserProfile",
                "core.models.UserPreferences"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "current_user": [
                    "Depends",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str,str]]",
                    "int",
                    "readicomponents.User"
                ],
                "db": [
                    "Depends",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "update_user": {
            "name": "update_user",
            "location": 140,
            "return": [
                "str",
                "Dict[str,object]",
                "zam_repondeur.models.Lecture",
                "Dict[str,Union[str,None]]",
                "int",
                "Set",
                "bool",
                "django.db.models.QuerySet",
                "user_models.User",
                "core.models.UserPreferences",
                "bob_emploi.frontend.api.user_pb2.EmailSent"
            ],
            "arguments": {}
        }
    },
    "farmOS-aggregator-master/backend/app/app/api/api_v1/endpoints/utils.py": {
        "ping_farms": {
            "name": "ping_farms",
            "location": 36,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "background_tasks": [
                    "fastapi.BackgroundTasks",
                    "sqlalchemy.orm.Session",
                    "metrics_backend.utils.Address"
                ],
                "db": [
                    "fastapi.BackgroundTasks",
                    "sqlalchemy.orm.Session",
                    "metrics_backend.utils.Address"
                ],
                "settings": [
                    "fastapi.BackgroundTasks",
                    "sqlalchemy.orm.Session",
                    "metrics_backend.utils.Address"
                ]
            }
        },
        "farm_registration_link": {
            "name": "farm_registration_link",
            "location": 52,
            "return": [
                "Iterable[str]",
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "send_registration_email": {
            "name": "send_registration_email",
            "location": 89,
            "return": [
                "str",
                "int",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.ServiceName",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "email_to": [
                    "pydantic.networks.EmailStr",
                    "str"
                ],
                "farm": [
                    "app.schemas.farm.Farm",
                    "str",
                    "Union[str, List[str]]",
                    "Set[str]",
                    "Union[int, str]"
                ]
            }
        },
        "farm_auth_link": {
            "name": "farm_auth_link",
            "location": 76,
            "return": [
                "str",
                "raiden.utils.Dict"
            ],
            "arguments": {
                "farm": [
                    "app.schemas.farm.Farm",
                    "dict",
                    "utils.JobsType"
                ]
            }
        },
        "authorize_farm": {
            "name": "authorize_farm",
            "location": 175,
            "return": [
                "bool",
                "dict",
                "Iterable[str]",
                "List[List[str]]",
                "str",
                "datetime.datetime"
            ],
            "arguments": {
                "farm": [
                    "app.schemas.farm.Farm",
                    "Callable",
                    "str"
                ]
            }
        },
        "validate_farm_url": {
            "name": "validate_farm_url",
            "location": 227,
            "return": [
                "Optional[Dict[str, Any]]",
                "Optional[Dict[str, str]]",
                "bytes",
                "int",
                "dict"
            ],
            "arguments": {}
        }
    },
    "farmOS-aggregator-master/backend/app/app/api/api_v1/endpoints/__init__.py": {},
    "farmOS-aggregator-master/backend/app/app/api/api_v1/endpoints/farms/areas.py": {
        "get_all_farm_areas": {
            "name": "get_all_farm_areas",
            "location": 34,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Callable",
                "Callable[[str], T]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "request": [
                    "starlette.requests.Request",
                    "morepath.Request"
                ],
                "farm_list": [
                    "List[app.schemas.farm.Farm]",
                    "str",
                    "List[Tuple[str, int]]",
                    "int"
                ],
                "db": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "create_farm_area": {
            "name": "create_farm_area",
            "location": 63,
            "return": [
                "dict",
                "Callable",
                "OrderedDict[str, Any]"
            ],
            "arguments": {
                "area": [
                    "str",
                    "int",
                    "apistar.http.Session",
                    "app.user.models.User",
                    "dict"
                ],
                "farm_list": [
                    "List[app.schemas.farm.Farm]",
                    "bool"
                ],
                "db": [
                    "Optional[str]",
                    "app.user.models.User",
                    "utils.clienClient",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "update_farm_area": {
            "name": "update_farm_area",
            "location": 89,
            "return": [
                "dict",
                "str",
                "Callable",
                "OrderedDict[str, Any]",
                "Optional[float]"
            ],
            "arguments": {
                "area": [
                    "str",
                    "app.user.models.User",
                    "int"
                ],
                "farm_list": [
                    "List[app.schemas.farm.Farm]",
                    "Match[str]",
                    "bool",
                    "List[int]"
                ],
                "db": [
                    "arxiv.users.domain.Session",
                    "app.user.models.User",
                    "Optional[str]",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "delete_farm_area": {
            "name": "delete_farm_area",
            "location": 115,
            "return": [
                "str",
                "Dict[str, Any]",
                "Callable",
                "Optional[str]",
                "dict",
                "sqlalchemy.engine.Engine",
                "Callable[[str], T]"
            ],
            "arguments": {
                "id": [
                    "List[int]",
                    "Sequence[str]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "str"
                ],
                "farm_list": [
                    "List[app.schemas.farm.Farm]",
                    "str",
                    "dict",
                    "tuple",
                    "int"
                ],
                "db": [
                    "Optional[str]",
                    "dict",
                    "arxiv.users.domain.Session",
                    "str",
                    "sqlalchemy.orm.Session",
                    "Optional[django.db.models.Model]",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "farmOS-aggregator-master/backend/app/app/api/api_v1/endpoints/farms/assets.py": {
        "get_all_farm_assets": {
            "name": "get_all_farm_assets",
            "location": 33,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Callable",
                "Callable[[str], T]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "request": [
                    "starlette.requests.Request",
                    "morepath.Request"
                ],
                "farm_list": [
                    "List[app.schemas.farm.Farm]",
                    "str",
                    "List[Tuple[str, int]]",
                    "int"
                ],
                "db": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "create_farm_assets": {
            "name": "create_farm_assets",
            "location": 62,
            "return": [
                "dict",
                "Callable",
                "OrderedDict[str, Any]"
            ],
            "arguments": {
                "asset": [
                    "str",
                    "int",
                    "apistar.http.Session",
                    "app.user.models.User",
                    "dict"
                ],
                "farm_list": [
                    "List[app.schemas.farm.Farm]",
                    "bool"
                ],
                "db": [
                    "Optional[str]",
                    "app.user.models.User",
                    "utils.clienClient",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "update_farm_assets": {
            "name": "update_farm_assets",
            "location": 87,
            "return": [
                "dict",
                "str",
                "Callable",
                "OrderedDict[str, Any]",
                "Optional[float]"
            ],
            "arguments": {
                "asset": [
                    "str",
                    "app.user.models.User",
                    "int"
                ],
                "farm_list": [
                    "List[app.schemas.farm.Farm]",
                    "Match[str]",
                    "bool",
                    "List[int]"
                ],
                "db": [
                    "arxiv.users.domain.Session",
                    "app.user.models.User",
                    "Optional[str]",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "delete_farm_assets": {
            "name": "delete_farm_assets",
            "location": 112,
            "return": [
                "str",
                "Dict[str, Any]",
                "Callable",
                "Optional[str]",
                "dict",
                "sqlalchemy.engine.Engine",
                "Callable[[str], T]"
            ],
            "arguments": {
                "id": [
                    "List[int]",
                    "Sequence[str]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "str"
                ],
                "farm_list": [
                    "List[app.schemas.farm.Farm]",
                    "str",
                    "dict",
                    "tuple",
                    "int"
                ],
                "db": [
                    "Optional[str]",
                    "dict",
                    "arxiv.users.domain.Session",
                    "str",
                    "sqlalchemy.orm.Session",
                    "Optional[django.db.models.Model]",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "farmOS-aggregator-master/backend/app/app/api/api_v1/endpoints/farms/farms.py": {
        "read_farms": {
            "name": "read_farms",
            "location": 24,
            "return": [
                "Depends",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "farms": [
                    "Depends",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "read_farm_by_id": {
            "name": "read_farm_by_id",
            "location": 38,
            "return": [
                "Depends",
                "int",
                "Iterable[Any]",
                "Tuple[int,int,int,int]"
            ],
            "arguments": {
                "farm": [
                    "Depends",
                    "django.db.backends.postgresql_psycopg2.schema.DatabaseSchemaEditor",
                    "app.schemas.farm.Farm",
                    "utils.Controller",
                    "bool"
                ]
            }
        }
    },
    "farmOS-aggregator-master/backend/app/app/api/api_v1/endpoints/farms/info.py": {
        "get_all_farm_info": {
            "name": "get_all_farm_info",
            "location": 22,
            "return": [
                "Dict[,dict]",
                "Dict",
                "Dict[str,Any]",
                "Callable",
                "str",
                "Callable[[str],T]",
                "Optional[str]"
            ],
            "arguments": {
                "db": [
                    "Depends",
                    "app.user.models.User",
                    "sqlalchemy.orm.Session",
                    "bob_emploi.frontend.api.user_pb2.User"
                ],
                "farm_list": [
                    "Depends",
                    "bool",
                    "List[app.schemas.farm.Farm]",
                    "Optional[int]",
                    "Dict"
                ],
                "use_cached": [
                    "bool",
                    "List[app.schemas.farm.Farm]",
                    "Optional[int]",
                    "Dict"
                ]
            }
        }
    },
    "farmOS-aggregator-master/backend/app/app/api/api_v1/endpoints/farms/logs.py": {
        "get_all_farm_logs": {
            "name": "get_all_farm_logs",
            "location": 34,
            "return": [
                "Dict[str, Any]",
                "str",
                "Optional[str]",
                "Callable",
                "Callable[[str], T]",
                "sqlalchemy.engine.Engine",
                "dict"
            ],
            "arguments": {
                "request": [
                    "starlette.requests.Request",
                    "morepath.Request",
                    "Union[core.utils.ObjectID, str]"
                ],
                "farm_list": [
                    "str",
                    "List[int]"
                ],
                "db": [
                    "str",
                    "bool"
                ]
            }
        },
        "create_farm_logs": {
            "name": "create_farm_logs",
            "location": 63,
            "return": [
                "dict",
                "str",
                "Callable"
            ],
            "arguments": {
                "log": [
                    "dict",
                    "Exception",
                    "bool",
                    "eth.db.backends.base.BaseDB",
                    "Dict[str, str]"
                ],
                "farm_list": [
                    "bool",
                    "sqlalchemy.orm.unitofwork.UOWTransaction"
                ],
                "db": [
                    "sqlalchemy.orm.Session",
                    "Optional[str]",
                    "arxiv.users.domain.Session"
                ]
            }
        },
        "update_farm_logs": {
            "name": "update_farm_logs",
            "location": 89,
            "return": [
                "dict",
                "str",
                "Callable"
            ],
            "arguments": {
                "log": [
                    "dict",
                    "Exception",
                    "bool",
                    "eth.db.backends.base.BaseDB",
                    "Dict[str, str]"
                ],
                "farm_list": [
                    "bool"
                ],
                "db": [
                    "sqlalchemy.orm.Session",
                    "Optional[str]",
                    "app.user.models.User"
                ]
            }
        },
        "delete_farm_logs": {
            "name": "delete_farm_logs",
            "location": 114,
            "return": [
                "dict",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "id": [
                    "bool",
                    "sqlalchemy.orm.session.Session",
                    "raiden.utils.List[raiden.utils.Tuple[str, raiden.utils.Any]]",
                    "Sequence[str]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]"
                ],
                "farm_list": [
                    "List[app.schemas.farm.Farm]",
                    "str",
                    "dict",
                    "tuple",
                    "list"
                ],
                "db": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "arxiv.users.domain.Session",
                    "Optional[Dict]"
                ]
            }
        }
    },
    "farmOS-aggregator-master/backend/app/app/api/api_v1/endpoints/farms/terms.py": {
        "get_all_farm_terms": {
            "name": "get_all_farm_terms",
            "location": 33,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Callable",
                "Callable[[str], T]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "request": [
                    "starlette.requests.Request",
                    "morepath.Request"
                ],
                "farm_list": [
                    "List[app.schemas.farm.Farm]",
                    "str",
                    "List[Tuple[str, int]]",
                    "int"
                ],
                "db": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "create_farm_term": {
            "name": "create_farm_term",
            "location": 62,
            "return": [
                "dict",
                "Callable",
                "OrderedDict[str, Any]"
            ],
            "arguments": {
                "term": [
                    "str",
                    "int",
                    "apistar.http.Session",
                    "app.user.models.User",
                    "dict"
                ],
                "farm_list": [
                    "List[app.schemas.farm.Farm]",
                    "bool"
                ],
                "db": [
                    "Optional[str]",
                    "app.user.models.User",
                    "utils.clienClient",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "update_farm_terms": {
            "name": "update_farm_terms",
            "location": 87,
            "return": [
                "dict",
                "str",
                "Callable",
                "OrderedDict[str, Any]",
                "Optional[float]"
            ],
            "arguments": {
                "term": [
                    "str",
                    "app.user.models.User",
                    "int"
                ],
                "farm_list": [
                    "List[app.schemas.farm.Farm]",
                    "Match[str]",
                    "bool",
                    "List[int]"
                ],
                "db": [
                    "arxiv.users.domain.Session",
                    "app.user.models.User",
                    "Optional[str]",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "delete_farm_term": {
            "name": "delete_farm_term",
            "location": 112,
            "return": [
                "str",
                "Dict[str, Any]",
                "Callable",
                "Optional[str]",
                "dict",
                "sqlalchemy.engine.Engine",
                "Callable[[str], T]"
            ],
            "arguments": {
                "tid": [
                    "List[app.schemas.farm.Farm]",
                    "str",
                    "bool"
                ],
                "farm_list": [
                    "List[app.schemas.farm.Farm]",
                    "str",
                    "bool"
                ],
                "db": [
                    "sqlalchemy.orm.Session",
                    "Optional[str]",
                    "app.user.models.User",
                    "arxiv.users.domain.Session"
                ]
            }
        }
    },
    "farmOS-aggregator-master/backend/app/app/api/api_v1/endpoints/farms/__init__.py": {},
    "farmOS-aggregator-master/backend/app/app/api/utils/db.py": {
        "get_db": {
            "name": "get_db",
            "location": 9,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {}
        }
    },
    "farmOS-aggregator-master/backend/app/app/api/utils/farms.py": {
        "get_farm_by_url": {
            "name": "get_farm_by_url",
            "location": 41,
            "return": [
                "int",
                "str",
                "None",
                "dss.config.Replica",
                "Dict",
                "Set",
                "Dict[str,int]",
                "Type"
            ],
            "arguments": {
                "db": [
                    "Depends",
                    "str",
                    "Dict",
                    "int",
                    "purplship.core.utils.xml.Element",
                    "Optional[str]"
                ],
                "farm_url": [
                    "Query",
                    "str",
                    "Optional[str]"
                ],
                "farm_access": [
                    "Depends",
                    "app.schemas.token.FarmAccess",
                    "Optional[str]",
                    "str",
                    "int"
                ]
            }
        },
        "get_active_farm_by_url": {
            "name": "get_active_farm_by_url",
            "location": 59,
            "return": [
                "int",
                "None",
                "str",
                "dss.config.Replica",
                "List[str]",
                "Set",
                "Type",
                "Dict"
            ],
            "arguments": {
                "db": [
                    "Depends",
                    "sqlalchemy.orm.Session",
                    "Optional[str]",
                    "str",
                    "int"
                ],
                "farm_url": [
                    "Query",
                    "str",
                    "Optional[str]"
                ],
                "farm_access": [
                    "Depends",
                    "app.schemas.token.FarmAccess",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "get_farms_by_id_list": {
            "name": "get_farms_by_id_list",
            "location": 77,
            "return": [
                "str",
                "int",
                "None",
                "List[int]",
                "Tuple[Union[int,int,int]]"
            ],
            "arguments": {
                "db": [
                    "Depends",
                    "Optional[int]",
                    "Optional[float]",
                    "str",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.ChannelID",
                    "bytes"
                ],
                "farm_id": [
                    "Query",
                    "app.schemas.token.FarmAccess",
                    "Optional[int]",
                    "int",
                    "Optional[str]",
                    "Optional[Tuple[int,int]]"
                ],
                "farm_access": [
                    "Depends",
                    "app.schemas.token.FarmAccess",
                    "Optional[str]",
                    "Optional[Any]",
                    "Optional[float]",
                    "raiden.utils.PaymentID",
                    "raiden.utils.Optional[raiden.utils.OneToNAddress]"
                ]
            }
        },
        "get_active_farms_by_id_list": {
            "name": "get_active_farms_by_id_list",
            "location": 106,
            "return": [
                "str",
                "int",
                "Dict[str,str]",
                "Dict[str,Callable]"
            ],
            "arguments": {
                "db": [
                    "Depends",
                    "Optional[bool]",
                    "sqlalchemy.orm.Session",
                    "str",
                    "Optional[str]"
                ],
                "farm_id": [
                    "Query",
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "app.schemas.token.FarmAccess",
                    "Optional[Tuple[int,int]]"
                ],
                "farm_access": [
                    "Depends",
                    "app.schemas.token.FarmAccess",
                    "Optional[Any]",
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "get_farm_by_id": {
            "name": "get_farm_by_id",
            "location": 135,
            "return": [
                "int",
                "str",
                "Dict",
                "bool",
                "Counter",
                "bytes",
                "List"
            ],
            "arguments": {
                "farm_id": [
                    "int",
                    "str",
                    "sqlalchemy.orm.Session",
                    "app.db_models.user.User",
                    "raiden.utils.Address"
                ],
                "db": [
                    "Depends",
                    "int",
                    "Optional[int]",
                    "Union[str,Iterable[str]]"
                ],
                "farm_access": [
                    "Depends",
                    "app.schemas.token.FarmAccess",
                    "int",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.PaymentAmount",
                    "bytes"
                ]
            }
        },
        "get_farms_url_or_list": {
            "name": "get_farms_url_or_list",
            "location": 151,
            "return": [
                "List[_T0]"
            ],
            "arguments": {
                "farm_by_url": [
                    "Depends",
                    "Optional[bool]",
                    "Optional[float]",
                    "float",
                    "Optional[List[str]]",
                    "Optional[str]"
                ],
                "farms_by_list": [
                    "Depends",
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[Union[int,str]]",
                    "raiden.utils.Optional[raiden.utils.Address]",
                    "Optional[List[str]]"
                ]
            }
        },
        "get_active_farms_url_or_list": {
            "name": "get_active_farms_url_or_list",
            "location": 167,
            "return": [
                "List[Depends]",
                "str",
                "bytes",
                "bool"
            ],
            "arguments": {
                "farm_by_url": [
                    "Depends",
                    "Optional[bool]",
                    "Optional[float]",
                    "int",
                    "Optional[Dict[str,Any]]"
                ],
                "farms_by_list": [
                    "Depends",
                    "Optional[str]",
                    "Optional[bool]",
                    "raiden.utils.Optional[raiden.utils.Address]",
                    "Optional[Union[int,str]]",
                    "Optional[Dict[str,Any]]"
                ]
            }
        },
        "_save_token": {
            "name": "_save_token",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "token": [
                    "str",
                    "abilian.services.security.models.Permission",
                    "abilian.services.security.models.Role",
                    "Dict[int,Any]"
                ],
                "db": [
                    "Optional[str]",
                    "None",
                    "List[int]",
                    "str",
                    "Union[Exception,str]",
                    "raiden.utils.TokenAddress",
                    "Exception"
                ],
                "farm": [
                    "bool",
                    "str",
                    "None",
                    "Dict"
                ]
            }
        },
        "handle_ping_farms": {
            "name": "handle_ping_farms",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "str",
                    "raiden.utils.TokenNetworkID",
                    "raiden.app.App",
                    "bob_emploi.frontend.api.project_pb2.Advice"
                ],
                "settings": [
                    "bool",
                    "id3c.db.session.DatabaseSession",
                    "int"
                ]
            }
        },
        "get_farm_client": {
            "name": "get_farm_client",
            "location": 226,
            "return": [
                "str",
                "farmOS"
            ],
            "arguments": {
                "db": [],
                "farm": [
                    "str",
                    "int",
                    "Dict[str,Any]"
                ]
            }
        },
        "get_oauth_token": {
            "name": "get_oauth_token",
            "location": 310,
            "return": [
                "FarmTokenBase",
                "int",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "farm_url": [
                    "str",
                    "Type[Any]"
                ],
                "auth_params": [
                    "str",
                    "Dict[str,Any]",
                    "int"
                ]
            }
        },
        "build_farm_url": {
            "name": "build_farm_url",
            "location": 344,
            "return": [
                "str"
            ],
            "arguments": {
                "farm_url": [
                    "str",
                    "urllib.parse.ParseResult"
                ]
            }
        },
        "admin_alert_email": {
            "name": "admin_alert_email",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "sqlalchemy.orm.Session",
                    "fal.orm.Team"
                ],
                "message": [
                    "str",
                    "apistar.http.Session"
                ]
            }
        },
        "ClientError.__init__": {
            "name": "__init__",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "farmOS-aggregator-master/backend/app/app/api/utils/security.py": {
        "get_current_user": {
            "name": "get_current_user",
            "location": 59,
            "return": [
                "Dict[str,str]",
                "tracim.models.auth.User",
                "Counter",
                "zam_repondeur.models.Lecture",
                "Dict[str,object]",
                "str",
                "Iterable[str]",
                "zerver.models.UserProfile",
                "metaswitch_tinder.database.models.User",
                "Set"
            ],
            "arguments": {
                "security_scopes": [
                    "Dict",
                    "fastapi.security.SecurityScopes",
                    "models.User",
                    "passpordomain.User",
                    "cmk.utils.type_defs.Ruleset",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ServiceName",
                    "app.models.user.User"
                ],
                "db": [
                    "Depends",
                    "tracim.models.User",
                    "asgard.models.user.User",
                    "asgard.models.accounAccount",
                    "user.User",
                    "str"
                ],
                "token": [
                    "Security",
                    "str",
                    "sqlalchemy.orm.Session",
                    "Union[sqlalchemy.orm.session.Session,abilian.core.models.blob.Blob]"
                ]
            }
        },
        "get_current_active_user": {
            "name": "get_current_active_user",
            "location": 94,
            "return": [
                "Security",
                "str",
                "Optional[str]",
                "zerver.models.Realm"
            ],
            "arguments": {
                "current_user": [
                    "Security",
                    "app.models.User",
                    "app.models.user.User",
                    "str",
                    "arxiv.users.domain.User",
                    "app.contexts.AuthContext",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "get_current_active_superuser": {
            "name": "get_current_active_superuser",
            "location": 100,
            "return": [
                "Security",
                "str",
                "bool"
            ],
            "arguments": {
                "current_user": [
                    "Security",
                    "app.models.user.User",
                    "app.models.User",
                    "app.contexts.AuthContext",
                    "arxiv.users.domain.User",
                    "str"
                ]
            }
        },
        "get_current_user_farm_access": {
            "name": "get_current_user_farm_access",
            "location": 108,
            "return": [
                "Optional[app.schemas.token.FarmAccess]"
            ],
            "arguments": {
                "security_scopes": [
                    "Dict",
                    "float",
                    "Set[str]",
                    "fastapi.security.SecurityScopes",
                    "models.User",
                    "app.models.user.User",
                    "passpordomain.User",
                    "user_models.User"
                ],
                "db": [
                    "Depends",
                    "asgard.models.user.User",
                    "grouper.models.permission.Permission",
                    "grouper.models.service_accounServiceAccount",
                    "str",
                    "asgard.models.accounAccount",
                    "user.User"
                ],
                "token": [
                    "Security",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "get_api_key_farm_access": {
            "name": "get_api_key_farm_access",
            "location": 151,
            "return": [
                "Optional[app.schemas.token.FarmAccess]"
            ],
            "arguments": {
                "security_scopes": [
                    "str",
                    "bool",
                    "fastapi.security.SecurityScopes",
                    "Dict",
                    "int",
                    "Iterable[models.Course]",
                    "sqlalchemy.orm.state.InstanceState"
                ],
                "db": [
                    "Depends",
                    "bool",
                    "int",
                    "Callable"
                ],
                "api_key": [
                    "Security",
                    "Optional[bytes]",
                    "Optional[str]",
                    "Optional[float]",
                    "str",
                    "bool",
                    "List[Tuple[str,bytes]]",
                    "bytes"
                ]
            }
        },
        "get_api_token_farm_access": {
            "name": "get_api_token_farm_access",
            "location": 191,
            "return": [
                "Optional[app.schemas.token.FarmAccess]"
            ],
            "arguments": {
                "security_scopes": [
                    "str",
                    "fastapi.security.SecurityScopes",
                    "bool",
                    "float",
                    "None",
                    "Optional[str]"
                ],
                "settings": [
                    "Depends",
                    "str",
                    "int",
                    "List[int]",
                    "salon.models.Stylist"
                ],
                "api_token": [
                    "Security",
                    "str",
                    "Optional[str]",
                    "int",
                    "alerta.database.base.Query"
                ]
            }
        },
        "get_farm_access": {
            "name": "get_farm_access",
            "location": 219,
            "return": [
                "Union[(_T0, _T1, _T2)]"
            ],
            "arguments": {
                "user_access": [
                    "Depends",
                    "Dict",
                    "str",
                    "Dict[str,Any]",
                    "Optional[List[str]]"
                ],
                "api_token_access": [
                    "Depends",
                    "Dict",
                    "str",
                    "NamedTuple",
                    "bytes"
                ],
                "api_key_access": [
                    "Depends",
                    "Dict",
                    "str",
                    "bytes"
                ]
            }
        },
        "get_farm_access_allow_public": {
            "name": "get_farm_access_allow_public",
            "location": 248,
            "return": [
                "Union[(app.schemas.token.FarmAccess, _T1, _T2, _T3)]"
            ],
            "arguments": {
                "settings": [
                    "Depends",
                    "str",
                    "Dict"
                ],
                "user_access": [
                    "Depends",
                    "Dict",
                    "str",
                    "Optional[str]",
                    "zerver.models.UserProfile"
                ],
                "api_token_access": [
                    "Depends",
                    "Dict",
                    "Optional[Dict]",
                    "NamedTuple",
                    "str",
                    "bytes"
                ],
                "api_key_access": [
                    "Depends",
                    "Dict",
                    "str",
                    "cirq.google.api.v2.device_pb2.DeviceSpecification",
                    "List",
                    "Dict[str,Any]",
                    "Dict[Any,List[Any]]"
                ]
            }
        },
        "_validate_token": {
            "name": "_validate_token",
            "location": 284,
            "return": [
                "app.schemas.token.TokenData"
            ],
            "arguments": {
                "token": [
                    "str",
                    "int",
                    "raiden.utils.List[uuid.UUID]"
                ]
            }
        }
    },
    "farmOS-aggregator-master/backend/app/app/api/utils/__init__.py": {},
    "farmOS-aggregator-master/backend/app/app/core/config.py": {
        "Settings.assemble_cors_origins": {
            "name": "assemble_cors_origins",
            "location": 23,
            "return": [
                "List[str]",
                "Dict",
                "Set[str]",
                "Type",
                "str",
                "Optional[dict]",
                "bool",
                "int",
                "Dict[str,dict[str,int]]",
                "bytes",
                "List[int]",
                "List",
                "Dict[int,int]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Callable",
                    "Type",
                    "Iterable[T]",
                    "Type[DataclassT]",
                    "T",
                    "bool"
                ],
                "v": [
                    "Dict",
                    "bool",
                    "Type",
                    "Type[object]",
                    "str",
                    "Dict[str,dict[str,int]]",
                    "Dict[str,Dict[str,int]]",
                    "Union[str,type]",
                    "bytes",
                    "Union[str,bytes]"
                ]
            }
        },
        "Settings.assemble_db_connection": {
            "name": "assemble_db_connection",
            "location": 39,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "List[str]",
                    "str",
                    "Union[Type[Exception],Tuple[Any,...]]",
                    "Type",
                    "Tuple[Union[Any,...]]"
                ],
                "v": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Callable",
                    "None",
                    "Dict"
                ],
                "values": [
                    "Dict[str,Any]",
                    "Dict",
                    "Dict[str,Union[str,bool]]",
                    "bool",
                    "str"
                ]
            }
        },
        "Settings.get_project_name": {
            "name": "get_project_name",
            "location": 59,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "None",
                "Dict[str,Any]",
                "Dict",
                "Callable",
                "int",
                "Sequence[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "Dict",
                    "None",
                    "Callable",
                    "int",
                    "Sequence[str]",
                    "Iterable"
                ],
                "v": [
                    "str",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "Dict",
                    "None",
                    "Callable",
                    "int",
                    "Sequence[str]",
                    "Iterable"
                ],
                "values": [
                    "str",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "Dict",
                    "Iterable",
                    "Callable",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "Settings.get_emails_enabled": {
            "name": "get_emails_enabled",
            "location": 69,
            "return": [
                "bool",
                "Union[int,float]",
                "str",
                "Optional[Mapping[str,Any]]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "float",
                    "Type",
                    "Sequence[str]",
                    "int",
                    "Type[Exception]",
                    "T"
                ],
                "v": [
                    "bool",
                    "float",
                    "Type",
                    "Sequence[str]",
                    "int",
                    "Type[Exception]",
                    "T"
                ],
                "values": [
                    "Dict[str,Any]",
                    "Dict",
                    "List[Tuple[str,str,str]]",
                    "str",
                    "List"
                ]
            }
        }
    },
    "farmOS-aggregator-master/backend/app/app/core/jwt.py": {
        "create_access_token": {
            "name": "create_access_token",
            "location": 11,
            "return": [
                "str",
                "bool",
                "dict",
                "bytes"
            ],
            "arguments": {}
        },
        "create_api_key": {
            "name": "create_api_key",
            "location": 22,
            "return": [
                "int",
                "float",
                "datetime.date",
                "str"
            ],
            "arguments": {
                "farm_id": [
                    "str"
                ],
                "scopes": [
                    "str"
                ],
                "all_farms": [
                    "str",
                    "bool"
                ]
            }
        },
        "create_farm_api_token": {
            "name": "create_farm_api_token",
            "location": 37,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "farm_id": [
                    "str",
                    "int"
                ],
                "scopes": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "farmOS-aggregator-master/backend/app/app/core/security.py": {
        "verify_password": {
            "name": "verify_password",
            "location": 6,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "plain_password": [
                    "str",
                    "Callable"
                ],
                "hashed_password": [
                    "str",
                    "Callable"
                ]
            }
        },
        "get_password_hash": {
            "name": "get_password_hash",
            "location": 10,
            "return": [
                "str",
                "Dict[str, bool]",
                "Dict[str, Any]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "password": [
                    "str"
                ]
            }
        }
    },
    "farmOS-aggregator-master/backend/app/app/core/__init__.py": {},
    "farmOS-aggregator-master/backend/app/app/crud/api_key.py": {
        "get_by_id": {
            "name": "get_by_id",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "db": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "Union[int, str]"
                ],
                "key_id": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "Union[int, str]"
                ]
            }
        },
        "get_by_key": {
            "name": "get_by_key",
            "location": 17,
            "return": [
                "str",
                "Callable[[T], Any]"
            ],
            "arguments": {
                "db": [
                    "bytes",
                    "sqlalchemy.orm.Session",
                    "str",
                    "Optional[Callable]",
                    "Optional[str]",
                    "dict"
                ],
                "key": [
                    "bytes",
                    "sqlalchemy.orm.Session",
                    "str",
                    "Optional[Callable]",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "get_multi": {
            "name": "get_multi",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session",
                    "bytes",
                    "str"
                ]
            }
        },
        "create": {
            "name": "create",
            "location": 25,
            "return": [
                "Optional[str]",
                "bool",
                "daylighdb.models.Photo",
                "daylighdb.models.User",
                "Callable[[list], None]"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session",
                    "Optional[str]"
                ],
                "api_key_in": [
                    "int",
                    "str",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "update": {
            "name": "update",
            "location": 41,
            "return": [
                "str",
                "models.Subtask",
                "Sequence[str]",
                "Dict[str, str]",
                "Set[str]"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.Session",
                    "List[str]",
                    "int",
                    "str",
                    "List[dict]",
                    "kedro.io.core.AbstractDataSet"
                ]
            }
        },
        "delete": {
            "name": "delete",
            "location": 53,
            "return": [],
            "arguments": {
                "db": [
                    "str",
                    "int",
                    "Union[str, int]"
                ]
            }
        }
    },
    "farmOS-aggregator-master/backend/app/app/crud/farm.py": {
        "get_by_id": {
            "name": "get_by_id",
            "location": 20,
            "return": [
                "tuple",
                "str",
                "Callable[[Dict], None]",
                "accounts.models.User",
                "models.Station",
                "int"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.Session",
                    "int",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "get_by_multi_id": {
            "name": "get_by_multi_id",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "db": [
                    "List[int]",
                    "sqlalchemy.orm.Session",
                    "str",
                    "int",
                    "dict",
                    "tracklater.models.Entry"
                ]
            }
        },
        "get_by_url": {
            "name": "get_by_url",
            "location": 34,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.Session",
                    "str",
                    "sqlalchemy.orm.session.Session",
                    "models.Queue",
                    "Optional[str]",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "get_multi": {
            "name": "get_multi",
            "location": 41,
            "return": [
                "bool",
                "str",
                "datetime.datetime",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.Session",
                    "int",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.scoping.scoped_session"
                ]
            }
        },
        "create": {
            "name": "create",
            "location": 48,
            "return": [
                "app.models.farm.Farm"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.Session",
                    "int"
                ]
            }
        },
        "update": {
            "name": "update",
            "location": 85,
            "return": [
                "app.models.farm.Farm"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session",
                    "models.Submission",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "update_scope": {
            "name": "update_scope",
            "location": 113,
            "return": [
                "app.models.farm.Farm"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "update_info": {
            "name": "update_info",
            "location": 125,
            "return": [
                "app.models.farm.Farm"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "delete": {
            "name": "delete",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.Session",
                    "int",
                    "str",
                    "Tuple[Any, str]",
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "update_last_accessed": {
            "name": "update_last_accessed",
            "location": 142,
            "return": [
                "str",
                "int",
                "Dict[str, int]",
                "float",
                "datetime.date"
            ],
            "arguments": {
                "db": [
                    "int",
                    "Tuple[Any, str]",
                    "Dict[str, Any]",
                    "annofabapi.models.Task"
                ]
            }
        },
        "update_is_authorized": {
            "name": "update_is_authorized",
            "location": 151,
            "return": [
                "bool",
                "str",
                "Tuple[int, int, int]"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.Session",
                    "app.models.User",
                    "int",
                    "Type[T]",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "is_authenticated": {
            "name": "is_authenticated",
            "location": 161,
            "return": [
                "bool"
            ],
            "arguments": {
                "farm": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "farmOS-aggregator-master/backend/app/app/crud/farm_token.py": {
        "get_farm_token": {
            "name": "get_farm_token",
            "location": 10,
            "return": [
                "str",
                "Callable[[Dict], None]",
                "abilian.core.models.subjects.User"
            ],
            "arguments": {
                "db": [
                    "int",
                    "sqlalchemy.orm.Session"
                ],
                "farm_id": [
                    "int",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "create_farm_token": {
            "name": "create_farm_token",
            "location": 14,
            "return": [
                "app.models.farm_token.FarmToken"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session"
                ],
                "token": [
                    "Dict[str, Any]",
                    "sqlalchemy.orm.Session",
                    "str",
                    "Callable",
                    "list"
                ]
            }
        },
        "update_farm_token": {
            "name": "update_farm_token",
            "location": 22,
            "return": [
                "str",
                "Dict[str, Any]",
                "Union[int, float]",
                "List[str]"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.Session",
                    "nox.sessions.Session",
                    "str",
                    "deeplearning.ml4pl.models.log_database.Database"
                ],
                "token": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "zerver.models.UserProfile"
                ],
                "token_in": [
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        }
    },
    "farmOS-aggregator-master/backend/app/app/crud/user.py": {
        "get": {
            "name": "get",
            "location": 11,
            "return": [
                "str",
                "bool",
                "Callable[[Dict], None]",
                "tuple"
            ],
            "arguments": {
                "db": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "get_by_email": {
            "name": "get_by_email",
            "location": 15,
            "return": [
                "str",
                "Callable[[Dict], None]",
                "Callable[[], str]"
            ],
            "arguments": {
                "db": [
                    "str",
                    "sqlalchemy.orm.Session",
                    "Optional[str]",
                    "requests.Session"
                ]
            }
        },
        "authenticate": {
            "name": "authenticate",
            "location": 19,
            "return": [
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "db": [
                    "str",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session",
                    "bool"
                ]
            }
        },
        "is_active": {
            "name": "is_active",
            "location": 28,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[Any]",
                "reader_server.types.User"
            ],
            "arguments": {
                "user": [
                    "app.models.user.User",
                    "app.models.user.UserInDB",
                    "str",
                    "users.models.JustfixUser",
                    "User",
                    "models.User",
                    "Optional[str]"
                ]
            }
        },
        "is_superuser": {
            "name": "is_superuser",
            "location": 32,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[Any]",
                "reader_server.types.User"
            ],
            "arguments": {
                "user": [
                    "app.models.user.User",
                    "app.models.user.UserInDB",
                    "str",
                    "users.models.JustfixUser",
                    "User",
                    "models.User",
                    "Optional[str]"
                ]
            }
        },
        "get_multi": {
            "name": "get_multi",
            "location": 36,
            "return": [
                "str",
                "Callable[[Dict], None]",
                "sqlalchemy.orm.session.Session",
                "Callable[[], str]"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session",
                    "models.Book",
                    "app.db_models.survey.Survey",
                    "fal.orm.Anime",
                    "fal.orm.Team",
                    "int"
                ]
            }
        },
        "create": {
            "name": "create",
            "location": 40,
            "return": [
                "app.models.user.User"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "update": {
            "name": "update",
            "location": 53,
            "return": [
                "app.models.user.User"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.Session",
                    "Tuple[int]",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "farmOS-aggregator-master/backend/app/app/crud/__init__.py": {},
    "farmOS-aggregator-master/backend/app/app/db/base.py": {},
    "farmOS-aggregator-master/backend/app/app/db/base_class.py": {
        "CustomBase.__tablename__": {
            "name": "__tablename__",
            "location": 7,
            "return": [
                "str",
                "Tuple[str]",
                "Sequence[str]",
                "Union[str, None]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        }
    },
    "farmOS-aggregator-master/backend/app/app/db/init_db.py": {
        "init_db": {
            "name": "init_db",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "db.Db"
                ]
            }
        }
    },
    "farmOS-aggregator-master/backend/app/app/db/session.py": {},
    "farmOS-aggregator-master/backend/app/app/db/__init__.py": {},
    "farmOS-aggregator-master/backend/app/app/models/api_key.py": {},
    "farmOS-aggregator-master/backend/app/app/models/farm.py": {},
    "farmOS-aggregator-master/backend/app/app/models/farm_token.py": {},
    "farmOS-aggregator-master/backend/app/app/models/user.py": {},
    "farmOS-aggregator-master/backend/app/app/models/__init__.py": {},
    "farmOS-aggregator-master/backend/app/app/schemas/api_key.py": {},
    "farmOS-aggregator-master/backend/app/app/schemas/api_model.py": {},
    "farmOS-aggregator-master/backend/app/app/schemas/farm.py": {},
    "farmOS-aggregator-master/backend/app/app/schemas/farm_info.py": {},
    "farmOS-aggregator-master/backend/app/app/schemas/farm_token.py": {},
    "farmOS-aggregator-master/backend/app/app/schemas/msg.py": {},
    "farmOS-aggregator-master/backend/app/app/schemas/token.py": {
        "FarmAccess.can_access_farm": {
            "name": "can_access_farm",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "farm_id": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        }
    },
    "farmOS-aggregator-master/backend/app/app/schemas/user.py": {},
    "farmOS-aggregator-master/backend/app/app/schemas/__init__.py": {},
    "farmOS-aggregator-master/backend/app/app/tests/conftest.py": {
        "db": {
            "name": "db",
            "location": 13,
            "return": [
                "Generator"
            ],
            "arguments": {}
        },
        "client": {
            "name": "client",
            "location": 18,
            "return": [
                "Generator",
                "Generator[TestClient]"
            ],
            "arguments": {}
        },
        "superuser_token_headers": {
            "name": "superuser_token_headers",
            "location": 24,
            "return": [
                "str",
                "app.schemas.farm.Farm"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient"
                ]
            }
        },
        "all_scopes_token_headers": {
            "name": "all_scopes_token_headers",
            "location": 29,
            "return": [
                "str",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {}
        },
        "test_farm": {
            "name": "test_farm",
            "location": 34,
            "return": [
                "typing.Generator[typing.Union[int,float]]"
            ],
            "arguments": {}
        },
        "test_log": {
            "name": "test_log",
            "location": 44,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,bool]]"
            ],
            "arguments": {}
        },
        "test_asset": {
            "name": "test_asset",
            "location": 55,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "test_term": {
            "name": "test_term",
            "location": 66,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,int]]"
            ],
            "arguments": {}
        },
        "test_area": {
            "name": "test_area",
            "location": 77,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,int]]"
            ],
            "arguments": {}
        }
    },
    "farmOS-aggregator-master/backend/app/app/tests/__init__.py": {},
    "farmOS-aggregator-master/backend/app/app/tests/api/__init__.py": {},
    "farmOS-aggregator-master/backend/app/app/tests/api/api_v1/test_api_key.py": {
        "test_create_update_delete_api_key": {
            "name": "test_create_update_delete_api_key",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient",
                    "aiohttp.test_utils.TestClient",
                    "dict"
                ],
                "superuser_token_headers": [
                    "Dict",
                    "fastapi.testclienTestClient",
                    "aiohttp.test_utils.TestClient"
                ]
            }
        },
        "test_get_api_keys": {
            "name": "test_get_api_keys",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "Dict[str,str]",
                    "fastapi.testclienTestClient"
                ],
                "superuser_token_headers": [
                    "Dict[str,str]",
                    "fastapi.testclienTestClient"
                ]
            }
        },
        "test_read_farms_all_farms_api_key": {
            "name": "test_read_farms_all_farms_api_key",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "List[str]",
                    "Dict[str,str]",
                    "fastapi.testclienTestClient"
                ],
                "db": [],
                "test_farm": [
                    "str",
                    "Callable"
                ]
            }
        },
        "test_read_farms_one_farm_id_api_key": {
            "name": "test_read_farms_one_farm_id_api_key",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "List[str]",
                    "fastapi.testclienTestClient",
                    "Dict[str,str]",
                    "bool"
                ],
                "db": [],
                "test_farm": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_read_farms_wrong_farm_id_api_key": {
            "name": "test_read_farms_wrong_farm_id_api_key",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "aiohttp.test_utils.TestClient",
                    "fastapi.testclienTestClient"
                ],
                "test_farm": [
                    "bool",
                    "str",
                    "app.utils.models.ModelManager",
                    "int"
                ]
            }
        },
        "test_read_farms_no_farms_api_key": {
            "name": "test_read_farms_no_farms_api_key",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient"
                ],
                "test_farm": [
                    "app.utils.models.ModelManager"
                ]
            }
        },
        "test_read_farms_disabled_api_key": {
            "name": "test_read_farms_disabled_api_key",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient"
                ],
                "test_farm": [
                    "app.utils.models.ModelManager"
                ]
            }
        },
        "test_read_farms_no_scope_api_key": {
            "name": "test_read_farms_no_scope_api_key",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient"
                ],
                "test_farm": [
                    "app.utils.models.ModelManager"
                ]
            }
        },
        "test_read_farms_random_api_key": {
            "name": "test_read_farms_random_api_key",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "aiohttp.test_utils.TestClient"
                ],
                "test_farm": [
                    "app.utils.models.ModelManager"
                ]
            }
        }
    },
    "farmOS-aggregator-master/backend/app/app/tests/api/api_v1/test_farm.py": {
        "farm_create_headers": {
            "name": "farm_create_headers",
            "location": 14,
            "return": [
                "str",
                "app.schemas.farm.Farm"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient"
                ]
            }
        },
        "farm_read_headers": {
            "name": "farm_read_headers",
            "location": 19,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[str, List[str]]",
                "int",
                "app.schemas.farm.Farm"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient"
                ]
            }
        },
        "farm_update_headers": {
            "name": "farm_update_headers",
            "location": 24,
            "return": [
                "str",
                "app.schemas.farm.Farm"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient"
                ]
            }
        },
        "farm_delete_headers": {
            "name": "farm_delete_headers",
            "location": 29,
            "return": [
                "str",
                "app.schemas.farm.Farm"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient"
                ]
            }
        },
        "test_create_delete_farm": {
            "name": "test_create_delete_farm",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient"
                ],
                "db": [
                    "int",
                    "Callable",
                    "sqlalchemy.orm.Session",
                    "bool"
                ],
                "farm_create_headers": [
                    "fastapi.testclienTestClient"
                ],
                "farm_delete_headers": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_create_farm_update_token": {
            "name": "test_create_farm_update_token",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient",
                    "dict"
                ],
                "db": [
                    "sqlalchemy.orm.Session",
                    "Callable",
                    "bool",
                    "int"
                ],
                "farm_create_headers": [
                    "fastapi.testclienTestClient"
                ],
                "farm_update_headers": [
                    "str",
                    "bool",
                    "Exception"
                ],
                "farm_delete_headers": [
                    "Dict",
                    "Callable",
                    "str",
                    "bool"
                ]
            }
        },
        "test_create_farm_delete_token": {
            "name": "test_create_farm_delete_token",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient",
                    "dict"
                ],
                "db": [
                    "sqlalchemy.orm.Session",
                    "Callable",
                    "bool",
                    "int"
                ],
                "farm_create_headers": [
                    "fastapi.testclienTestClient"
                ],
                "farm_update_headers": [
                    "str",
                    "Dict[str,Any]",
                    "bool",
                    "Exception"
                ],
                "farm_delete_headers": [
                    "Dict",
                    "Callable",
                    "str",
                    "bool"
                ]
            }
        },
        "test_get_all_farms": {
            "name": "test_get_all_farms",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient",
                    "aiohttp.test_utils.TestClient"
                ],
                "db": [
                    "int",
                    "sqlalchemy.orm.Session"
                ],
                "test_farm": [
                    "Dict",
                    "str",
                    "utils.clienClient",
                    "sqlalchemy.orm.Session",
                    "core_lib.core.models.Event"
                ],
                "farm_read_headers": [
                    "fastapi.testclienTestClient",
                    "aiohttp.test_utils.TestClient"
                ]
            }
        },
        "test_get_farm_by_id": {
            "name": "test_get_farm_by_id",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "Dict[str,str]",
                    "fastapi.testclienTestClient"
                ],
                "db": [
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session"
                ],
                "test_farm": [
                    "Dict",
                    "str",
                    "sqlalchemy.orm.Session",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "farm_read_headers": [
                    "Dict[str,str]",
                    "fastapi.testclienTestClient"
                ]
            }
        },
        "test_farm_create_oauth_scope": {
            "name": "test_farm_create_oauth_scope",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_farm_read_oauth_scope": {
            "name": "test_farm_read_oauth_scope",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient",
                    "aiohttp.test_utils.TestClient"
                ]
            }
        },
        "test_farm_read_by_id_oauth_scope": {
            "name": "test_farm_read_by_id_oauth_scope",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient",
                    "aiohttp.test_utils.TestClient"
                ]
            }
        },
        "test_farm_update_oauth_scope": {
            "name": "test_farm_update_oauth_scope",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "abilian.app.Application"
                ]
            }
        },
        "test_farm_delete_oauth_scope": {
            "name": "test_farm_delete_oauth_scope",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient",
                    "aiohttp.test_utils.TestClient"
                ]
            }
        },
        "test_farm_create_oauth_scope.settings_open_registration": {
            "name": "settings_open_registration",
            "location": 248,
            "return": [
                "Settings",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "test_farm_create_oauth_scope.settings_invite_registration": {
            "name": "settings_invite_registration",
            "location": 251,
            "return": [
                "Settings",
                "str",
                "Optional[int]",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "test_farm_create_oauth_scope.settings_closed_registration": {
            "name": "settings_closed_registration",
            "location": 254,
            "return": [
                "Settings",
                "str",
                "Optional[int]",
                "bool",
                "int"
            ],
            "arguments": {}
        }
    },
    "farmOS-aggregator-master/backend/app/app/tests/api/api_v1/test_farm_areas.py": {
        "farm_areas_headers": {
            "name": "farm_areas_headers",
            "location": 9,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[str, List[str]]",
                "int",
                "app.schemas.farm.Farm"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient"
                ]
            }
        },
        "areas_vid": {
            "name": "areas_vid",
            "location": 14,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient"
                ],
                "test_farm": [
                    "bool",
                    "str",
                    "fastapi.testclienTestClient",
                    "Mapping",
                    "Mapping[str,str]",
                    "utils.clienClient"
                ],
                "all_scopes_token_headers": [
                    "fastapi.testclienTestClient"
                ]
            }
        },
        "test_create_area": {
            "name": "test_create_area",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "Dict[str,str]",
                    "fastapi.testclienTestClient",
                    "str"
                ],
                "test_farm": [
                    "str",
                    "Dict[str,str]",
                    "fastapi.testclienTestClient"
                ],
                "test_area": [
                    "fastapi.testclienTestClient",
                    "Dict[str, str]"
                ],
                "areas_vid": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "farm_areas_headers": [
                    "Dict[str,str]",
                    "str",
                    "fastapi.testclienTestClient"
                ]
            }
        },
        "test_get_areas": {
            "name": "test_get_areas",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "Dict[str,str]",
                    "fastapi.testclienTestClient"
                ],
                "test_farm": [
                    "fastapi.testclienTestClient"
                ],
                "farm_areas_headers": [
                    "Dict[str,str]",
                    "fastapi.testclienTestClient"
                ]
            }
        },
        "test_update_area": {
            "name": "test_update_area",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "Dict[str,str]",
                    "fastapi.testclienTestClient",
                    "str"
                ],
                "test_farm": [
                    "str",
                    "fastapi.testclienTestClient"
                ],
                "test_area": [
                    "fastapi.testclienTestClient",
                    "aiohttp.test_utils.TestClient",
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "Dict[str, str]"
                ],
                "areas_vid": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None"
                ],
                "farm_areas_headers": [
                    "str",
                    "Dict[str,str]",
                    "fastapi.testclienTestClient"
                ]
            }
        },
        "test_delete_area": {
            "name": "test_delete_area",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "aiohttp.test_utils.TestClient"
                ],
                "test_farm": [
                    "str",
                    "aiohttp.test_utils.TestClient"
                ],
                "test_area": [
                    "str",
                    "aiohttp.test_utils.TestClient"
                ],
                "farm_areas_headers": [
                    "str",
                    "aiohttp.test_utils.TestClient"
                ]
            }
        },
        "test_farm_areas_oauth_scope": {
            "name": "test_farm_areas_oauth_scope",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient",
                    "aiohttp.test_utils.TestClient"
                ]
            }
        }
    },
    "farmOS-aggregator-master/backend/app/app/tests/api/api_v1/test_farm_assets.py": {
        "farm_assets_headers": {
            "name": "farm_assets_headers",
            "location": 9,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[str, List[str]]",
                "int",
                "app.schemas.farm.Farm"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient"
                ]
            }
        },
        "test_create_asset": {
            "name": "test_create_asset",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "Dict[str,str]",
                    "fastapi.testclienTestClient",
                    "tests.clienMDMClient"
                ],
                "test_farm": [
                    "Dict[str,str]",
                    "fastapi.testclienTestClient"
                ],
                "test_asset": [
                    "fastapi.testclienTestClient"
                ],
                "farm_assets_headers": [
                    "Dict[str,str]",
                    "fastapi.testclienTestClient",
                    "tests.clienMDMClient"
                ]
            }
        },
        "test_get_assets": {
            "name": "test_get_assets",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "Dict[str,str]",
                    "fastapi.testclienTestClient"
                ],
                "test_farm": [
                    "fastapi.testclienTestClient"
                ],
                "farm_assets_headers": [
                    "Dict[str,str]",
                    "fastapi.testclienTestClient"
                ]
            }
        },
        "test_update_asset": {
            "name": "test_update_asset",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "Dict[str,str]",
                    "fastapi.testclienTestClient"
                ],
                "test_farm": [
                    "Dict[str,str]",
                    "fastapi.testclienTestClient"
                ],
                "test_asset": [
                    "fastapi.testclienTestClient",
                    "Dict[str, str]",
                    "aiohttp.test_utils.TestClient"
                ],
                "farm_assets_headers": [
                    "Dict[str,str]",
                    "fastapi.testclienTestClient"
                ]
            }
        },
        "test_delete_asset": {
            "name": "test_delete_asset",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "aiohttp.test_utils.TestClient"
                ],
                "test_farm": [
                    "str",
                    "aiohttp.test_utils.TestClient"
                ],
                "test_asset": [
                    "str",
                    "aiohttp.test_utils.TestClient"
                ],
                "farm_assets_headers": [
                    "str",
                    "aiohttp.test_utils.TestClient"
                ]
            }
        },
        "test_farm_assets_oauth_scope": {
            "name": "test_farm_assets_oauth_scope",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient",
                    "aiohttp.test_utils.TestClient"
                ]
            }
        }
    },
    "farmOS-aggregator-master/backend/app/app/tests/api/api_v1/test_farm_authorize.py": {
        "farm_authorize_headers": {
            "name": "farm_authorize_headers",
            "location": 13,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[str, List[str]]",
                "int",
                "app.schemas.farm.Farm"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient"
                ]
            }
        },
        "test_authorize_farm": {
            "name": "test_authorize_farm",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient"
                ],
                "test_farm": [
                    "fastapi.testclienTestClient"
                ],
                "farm_authorize_headers": [
                    "fastapi.testclienTestClient"
                ]
            }
        },
        "test_farm_authorize_oauth_scope": {
            "name": "test_farm_authorize_oauth_scope",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient"
                ],
                "test_farm": [
                    "fastapi.testclienTestClient"
                ]
            }
        },
        "test_get_farm_auth_link": {
            "name": "test_get_farm_auth_link",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient",
                    "aiohttp.test_utils.TestClient"
                ],
                "test_farm": [
                    "fastapi.testclienTestClient",
                    "aiohttp.test_utils.TestClient"
                ],
                "superuser_token_headers": [
                    "Dict[str,str]",
                    "fastapi.testclienTestClient"
                ]
            }
        }
    },
    "farmOS-aggregator-master/backend/app/app/tests/api/api_v1/test_farm_logs.py": {
        "farm_logs_headers": {
            "name": "farm_logs_headers",
            "location": 9,
            "return": [
                "str",
                "app.schemas.farm.Farm"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient"
                ]
            }
        },
        "test_get_logs": {
            "name": "test_get_logs",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "Dict[str,str]",
                    "fastapi.testclienTestClient"
                ],
                "test_farm": [
                    "Dict[str,str]",
                    "fastapi.testclienTestClient",
                    "aiohttp.test_utils.TestClient"
                ],
                "farm_logs_headers": [
                    "Dict[str,str]",
                    "fastapi.testclienTestClient"
                ]
            }
        },
        "test_create_log": {
            "name": "test_create_log",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient",
                    "Dict[str, str]",
                    "str"
                ],
                "test_farm": [
                    "str",
                    "fastapi.testclienTestClient"
                ],
                "test_log": [
                    "str",
                    "fastapi.testclienTestClient"
                ],
                "farm_logs_headers": [
                    "Dict[str,str]",
                    "str",
                    "fastapi.testclienTestClient"
                ]
            }
        },
        "test_update_log": {
            "name": "test_update_log",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "Dict[str,str]",
                    "fastapi.testclienTestClient"
                ],
                "test_farm": [
                    "str",
                    "Dict[str,str]",
                    "fastapi.testclienTestClient"
                ],
                "test_log": [
                    "str",
                    "aiohttp.test_utils.TestClient"
                ],
                "farm_logs_headers": [
                    "Dict[str,str]",
                    "fastapi.testclienTestClient"
                ]
            }
        },
        "test_delete_log": {
            "name": "test_delete_log",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "aiohttp.test_utils.TestClient",
                    "str",
                    "core.models.Recipe"
                ],
                "test_farm": [
                    "str",
                    "aiohttp.test_utils.TestClient",
                    "core.models.Recipe"
                ],
                "test_log": [
                    "str",
                    "aiohttp.test_utils.TestClient",
                    "core.models.Recipe"
                ],
                "farm_logs_headers": [
                    "str",
                    "aiohttp.test_utils.TestClient",
                    "core.models.Recipe"
                ]
            }
        },
        "test_farm_logs_oauth_scope": {
            "name": "test_farm_logs_oauth_scope",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient",
                    "aiohttp.test_utils.TestClient"
                ]
            }
        }
    },
    "farmOS-aggregator-master/backend/app/app/tests/api/api_v1/test_farm_terms.py": {
        "farm_terms_headers": {
            "name": "farm_terms_headers",
            "location": 9,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[str, List[str]]",
                "int",
                "app.schemas.farm.Farm"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient"
                ]
            }
        },
        "test_create_term": {
            "name": "test_create_term",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "Dict[str,str]",
                    "fastapi.testclienTestClient",
                    "tests.clienMDMClient"
                ],
                "test_farm": [
                    "Dict[str,str]",
                    "fastapi.testclienTestClient"
                ],
                "test_term": [
                    "fastapi.testclienTestClient"
                ],
                "farm_terms_headers": [
                    "Dict[str,str]",
                    "fastapi.testclienTestClient",
                    "tests.clienMDMClient"
                ]
            }
        },
        "test_get_terms": {
            "name": "test_get_terms",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "Dict[str,str]",
                    "fastapi.testclienTestClient"
                ],
                "test_farm": [
                    "fastapi.testclienTestClient"
                ],
                "farm_terms_headers": [
                    "Dict[str,str]",
                    "fastapi.testclienTestClient"
                ]
            }
        },
        "test_update_term": {
            "name": "test_update_term",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "Dict[str,str]",
                    "fastapi.testclienTestClient"
                ],
                "test_farm": [
                    "Dict[str,str]",
                    "fastapi.testclienTestClient"
                ],
                "test_term": [
                    "fastapi.testclienTestClient",
                    "Dict[str, str]",
                    "aiohttp.test_utils.TestClient"
                ],
                "farm_terms_headers": [
                    "Dict[str,str]",
                    "fastapi.testclienTestClient"
                ]
            }
        },
        "test_delete_term": {
            "name": "test_delete_term",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "aiohttp.test_utils.TestClient"
                ],
                "test_farm": [
                    "str",
                    "aiohttp.test_utils.TestClient"
                ],
                "test_term": [
                    "str",
                    "aiohttp.test_utils.TestClient"
                ],
                "farm_terms_headers": [
                    "str",
                    "aiohttp.test_utils.TestClient"
                ]
            }
        },
        "test_farm_terms_oauth_scope": {
            "name": "test_farm_terms_oauth_scope",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient",
                    "aiohttp.test_utils.TestClient"
                ]
            }
        }
    },
    "farmOS-aggregator-master/backend/app/app/tests/api/api_v1/test_login.py": {
        "test_get_access_token": {
            "name": "test_get_access_token",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient",
                    "Dict[str, str]",
                    "aiohttp.test_utils.TestClient"
                ]
            }
        },
        "test_use_access_token": {
            "name": "test_use_access_token",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient"
                ],
                "superuser_token_headers": [
                    "fastapi.testclienTestClient"
                ]
            }
        }
    },
    "farmOS-aggregator-master/backend/app/app/tests/api/api_v1/test_users.py": {
        "test_get_users_superuser_me": {
            "name": "test_get_users_superuser_me",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "Dict[str,str]",
                    "fastapi.testclienTestClient",
                    "aiohttp.test_utils.TestClient"
                ],
                "superuser_token_headers": [
                    "Dict[str,str]",
                    "fastapi.testclienTestClient",
                    "aiohttp.test_utils.TestClient"
                ]
            }
        },
        "test_create_user_new_email": {
            "name": "test_create_user_new_email",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient"
                ],
                "db": [
                    "None",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "Optional[sqlalchemy.engine.Engine]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ],
                "superuser_token_headers": [
                    "fastapi.testclienTestClient"
                ]
            }
        },
        "test_get_existing_user": {
            "name": "test_get_existing_user",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient",
                    "aiohttp.test_utils.TestClient"
                ],
                "db": [
                    "List[authorityspoke.io.schemas.RawHolding]",
                    "str",
                    "sqlalchemy.orm.Session"
                ],
                "superuser_token_headers": [
                    "fastapi.testclienTestClient",
                    "aiohttp.test_utils.TestClient"
                ]
            }
        },
        "test_create_user_existing_username": {
            "name": "test_create_user_existing_username",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient"
                ],
                "db": [
                    "abilian.core.sqlalchemy.SQLAlchemy",
                    "sqlalchemy.orm.session.Session"
                ],
                "superuser_token_headers": [
                    "fastapi.testclienTestClient"
                ]
            }
        },
        "test_create_user_by_normal_user": {
            "name": "test_create_user_by_normal_user",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient"
                ],
                "db": [
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "test_retrieve_users": {
            "name": "test_retrieve_users",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient"
                ],
                "db": [
                    "abilian.core.sqlalchemy.SQLAlchemy",
                    "sqlalchemy.orm.session.Session"
                ],
                "superuser_token_headers": [
                    "fastapi.testclienTestClient"
                ]
            }
        }
    },
    "farmOS-aggregator-master/backend/app/app/tests/api/api_v1/__init__.py": {},
    "farmOS-aggregator-master/backend/app/app/tests/crud/test_api_token.py": {
        "test_create_api_token": {
            "name": "test_create_api_token",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "farmOS-aggregator-master/backend/app/app/tests/crud/test_farm.py": {
        "test_create_delete_default_farm_with_token": {
            "name": "test_create_delete_default_farm_with_token",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "int",
                    "str",
                    "sqlalchemy.orm.Session",
                    "labm8.py.sqlutil.Session"
                ]
            }
        },
        "test_create_farm_update_token": {
            "name": "test_create_farm_update_token",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.Session",
                    "labm8.py.sqlutil.Session"
                ]
            }
        },
        "test_create_farm_cant_delete_token": {
            "name": "test_create_farm_cant_delete_token",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "Dict[Hashable,Iterable[Hashable]]",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "test_create_delete_active_farm": {
            "name": "test_create_delete_active_farm",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "int",
                    "str",
                    "sqlalchemy.orm.Session",
                    "labm8.py.sqlutil.Session"
                ]
            }
        },
        "test_create_delete_inactive_farm": {
            "name": "test_create_delete_inactive_farm",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "int",
                    "str",
                    "sqlalchemy.orm.Session",
                    "labm8.py.sqlutil.Session"
                ]
            }
        }
    },
    "farmOS-aggregator-master/backend/app/app/tests/crud/test_farm_token.py": {
        "test_create_farm_token": {
            "name": "test_create_farm_token",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "int",
                    "Dict[str,Any]",
                    "raiden.utils.BlockIdentifier",
                    "bool"
                ],
                "test_farm": [
                    "raiden.utils.ChannelID",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "test_update_farm_token": {
            "name": "test_update_farm_token",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "float",
                    "str",
                    "sqlalchemy.orm.Session"
                ],
                "test_farm": [
                    "str",
                    "sqlalchemy.orm.Session",
                    "raiden.utils.Dict"
                ]
            }
        }
    },
    "farmOS-aggregator-master/backend/app/app/tests/crud/test_user.py": {
        "test_create_user": {
            "name": "test_create_user",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "Set[str]",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "test_authenticate_user": {
            "name": "test_authenticate_user",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "test_not_authenticate_user": {
            "name": "test_not_authenticate_user",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "bool",
                    "raiden.utils.TokenAmount"
                ]
            }
        },
        "test_check_if_user_is_active": {
            "name": "test_check_if_user_is_active",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "test_check_if_user_is_active_inactive": {
            "name": "test_check_if_user_is_active_inactive",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "test_check_if_user_is_superuser": {
            "name": "test_check_if_user_is_superuser",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "test_check_if_user_is_superuser_normal_user": {
            "name": "test_check_if_user_is_superuser_normal_user",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "test_get_user": {
            "name": "test_get_user",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.Session"
                ]
            }
        }
    },
    "farmOS-aggregator-master/backend/app/app/tests/crud/__init__.py": {},
    "farmOS-aggregator-master/backend/app/app/tests/utils/farm.py": {
        "get_test_farm_instance": {
            "name": "get_test_farm_instance",
            "location": 8,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "List[str]",
                "List[tuple[Union[str,str,str,Any]]]",
                "Dict[str,Any]",
                "Collection"
            ],
            "arguments": {
                "db": [
                    "str",
                    "int",
                    "sqlalchemy.orm.session.Session",
                    "Dict[str,Any]",
                    "cmsysboutils.Session",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "delete_test_farm_instance": {
            "name": "delete_test_farm_instance",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "str",
                    "None",
                    "Optional[int]"
                ],
                "farm_id": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "str",
                    "None",
                    "Optional[int]"
                ]
            }
        }
    },
    "farmOS-aggregator-master/backend/app/app/tests/utils/user.py": {
        "user_authentication_headers": {
            "name": "user_authentication_headers",
            "location": 10,
            "return": [
                "Dict[Text,Text]",
                "tests.mock_vws.utils.Endpoint",
                "Dict"
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "email": [
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ],
                "password": [
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "create_random_user": {
            "name": "create_random_user",
            "location": 20,
            "return": [
                "app.models.user.User",
                "str",
                "core.models.UserPreferences",
                "List[Union[Any,Any]]",
                "List[tuple[Union[int,str,str]]]"
            ],
            "arguments": {
                "db": [
                    "abilian.core.sqlalchemy.SQLAlchemy",
                    "sqlalchemy.engine.base.Engine"
                ]
            }
        }
    },
    "farmOS-aggregator-master/backend/app/app/tests/utils/utils.py": {
        "random_lower_string": {
            "name": "random_lower_string",
            "location": 17,
            "return": [
                "str",
                "Tuple[Tuple[int,...]]",
                "Dict"
            ],
            "arguments": {}
        },
        "get_superuser_token_headers": {
            "name": "get_superuser_token_headers",
            "location": 21,
            "return": [
                "Dict[Text,Text]",
                "str",
                "List[dict]",
                "Dict[str,Any]",
                "Dict[str,Union[str,int]]"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient",
                    "List[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "get_all_scopes_token_headers": {
            "name": "get_all_scopes_token_headers",
            "location": 36,
            "return": [
                "int",
                "str",
                "List[str]",
                "dict",
                "Dict[str, object]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient"
                ]
            }
        },
        "get_scope_token_headers": {
            "name": "get_scope_token_headers",
            "location": 40,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "client": [
                    "bool",
                    "str",
                    "fastapi.testclienTestClient",
                    "aiohttp.test_utils.TestClient"
                ],
                "scopes": [
                    "bool",
                    "str",
                    "fastapi.testclienTestClient",
                    "aiohttp.test_utils.TestClient"
                ]
            }
        },
        "_create_headers_with_scopes": {
            "name": "_create_headers_with_scopes",
            "location": 44,
            "return": [
                "Dict[Text,Text]",
                "Dict[str,Any]",
                "Dict[str,Union[str,int]]",
                "List[dict]",
                "str",
                "Dict[str,Type]",
                "Dict"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient",
                    "List[str]"
                ],
                "scopes": [
                    "Dict[str,Any]",
                    "core_lib.core.models.Event",
                    "aiohttp.test_utils.TestClient"
                ]
            }
        },
        "get_api_key_headers": {
            "name": "get_api_key_headers",
            "location": 59,
            "return": [
                "Dict[Text,Text]",
                "str",
                "Dict[str,Any]",
                "Dict[str,Union[str,int]]",
                "List[dict]",
                "Dict"
            ],
            "arguments": {
                "client": [
                    "str",
                    "fastapi.testclienTestClient",
                    "Dict",
                    "MutableMapping",
                    "Optional[MutableMapping[Any,Any]]",
                    "None"
                ],
                "api_key_params": [
                    "str",
                    "fastapi.testclienTestClient",
                    "Optional[MutableMapping[Any, Any]]",
                    "dict"
                ]
            }
        }
    },
    "farmOS-aggregator-master/backend/app/app/tests/utils/__init__.py": {}
}
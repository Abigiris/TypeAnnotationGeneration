{
    "fastcnn-master/main.py": {
        "cli": {
            "name": "cli",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "debug": [
                    "int",
                    "Dict",
                    "Set",
                    "str",
                    "IO",
                    "IO[str]",
                    "bool"
                ]
            }
        },
        "supervised": {
            "name": "supervised",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "input": [
                    "str",
                    "bool",
                    "numpy.ndarray",
                    "Dict",
                    "Tuple[Union[B,tests.utils.Kwargs]]",
                    "Tuple[paradigm.models.Base,tests.utils.Kwargs]",
                    "float",
                    "Optional[float]",
                    "None"
                ],
                "validate": [
                    "List[str]",
                    "click.Path",
                    "None",
                    "int",
                    "Optional[List[str]]",
                    "List[C]",
                    "Optional[int]",
                    "numpy.ndarray",
                    "List[cirq.Circuit]"
                ],
                "output": [
                    "int",
                    "Dict[str,Any]",
                    "None",
                    "float",
                    "Optional[Dict[str,Any]]",
                    "Optional[int]",
                    "Optional[float]",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.FeeAmount",
                    "raiden.utils.InitiatorAddress",
                    "raiden.utils.PaymentHashInvoice",
                    "raiden.utils.PaymentAmount"
                ],
                "verbose": [
                    "bool",
                    "float",
                    "Iterable[Union[int,str]]",
                    "Sequence[int]",
                    "Iterable[str]"
                ],
                "stat": [
                    "bool",
                    "str",
                    "int"
                ],
                "epochs": [
                    "int",
                    "float",
                    "None",
                    "Optional[int]",
                    "gluonts.datasecommon.Dataset",
                    "Optional[gluonts.datasecommon.Dataset]"
                ],
                "batch_size": [
                    "int",
                    "float",
                    "None",
                    "Optional[int]",
                    "gluonts.datasecommon.Dataset",
                    "Optional[gluonts.datasecommon.Dataset]"
                ],
                "dim": [
                    "int",
                    "Optional[str]",
                    "str",
                    "Optional[float]",
                    "None",
                    "bool",
                    "float"
                ],
                "maxlen": [
                    "int",
                    "List",
                    "List[float]",
                    "List[Set[int]]"
                ],
                "kernel_size": [
                    "int",
                    "Optional[str]",
                    "str",
                    "Optional[float]",
                    "None",
                    "bool",
                    "float"
                ],
                "opt": [
                    "int",
                    "float",
                    "str",
                    "List[set[int]]",
                    "List[Set[int]]",
                    "bool"
                ],
                "lr": [
                    "numpy.ndarray",
                    "float",
                    "Optional[float]",
                    "None",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Optional[List[int]]",
                    "List[int]",
                    "Optional[int]",
                    "int"
                ],
                "clip_norm": [
                    "int",
                    "float",
                    "str",
                    "List[set[int]]",
                    "List[Set[int]]",
                    "bool"
                ],
                "stop_window": [
                    "int",
                    "bool",
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "label_smoothing": [
                    "int",
                    "float",
                    "None",
                    "Optional[int]",
                    "gluonts.datasecommon.Dataset",
                    "Optional[gluonts.datasecommon.Dataset]"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "model_file": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "test_data": [
                    "str",
                    "List[str]"
                ],
                "k": [
                    "int"
                ],
                "t": [
                    "str",
                    "Dict[str,Any]",
                    "int"
                ],
                "batch_size": [
                    "int",
                    "Optional[int]",
                    "None",
                    "numpy.ndarray",
                    "float",
                    "List[str]",
                    "Dict[str,Any]",
                    "Optional[float]",
                    "Optional[bool]",
                    "Optional[List[str]]",
                    "Optional[Dict[str,Any]]"
                ],
                "stat": [
                    "bool",
                    "str",
                    "Union[str,Iterable[str]]",
                    "Iterable[str]",
                    "Dict[str,Tuple[str,int,int]]",
                    "Dict[int,str]"
                ]
            }
        },
        "predict": {
            "name": "predict",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "model_file": [
                    "str",
                    "int",
                    "bool"
                ],
                "test_data": [
                    "str",
                    "click.Path",
                    "int",
                    "bytes"
                ],
                "k": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Set[str]",
                    "Optional[bool]"
                ],
                "t": [
                    "int",
                    "List[str]",
                    "Callable",
                    "bool",
                    "List[annofabapi.models.Inspection]",
                    "str",
                    "None",
                    "Optional[int]"
                ],
                "batch_size": [
                    "int",
                    "str",
                    "float",
                    "None",
                    "Optional[float]",
                    "numpy.ndarray"
                ],
                "stat": [
                    "bool",
                    "str",
                    "None",
                    "int",
                    "Optional[int]"
                ],
                "show_data": [
                    "bool",
                    "str"
                ]
            }
        },
        "predict_prob": {
            "name": "predict_prob",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "model_file": [
                    "str",
                    "int",
                    "bool"
                ],
                "test_data": [
                    "str",
                    "click.Path",
                    "int",
                    "bytes"
                ],
                "k": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Set[str]",
                    "Optional[bool]"
                ],
                "t": [
                    "int",
                    "str",
                    "bytes",
                    "Tuple[Union[int,int]]",
                    "utils.types.Vec3D",
                    "Tuple[int,int]"
                ],
                "batch_size": [
                    "int",
                    "str",
                    "float",
                    "None",
                    "Optional[float]",
                    "numpy.ndarray"
                ],
                "stat": [
                    "bool",
                    "str",
                    "None",
                    "int",
                    "Optional[int]"
                ],
                "show_data": [
                    "bool",
                    "str"
                ]
            }
        },
        "print_sentence_vectors": {
            "name": "print_sentence_vectors",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "model_file": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Mapping[str,Any]]",
                    "Mapping"
                ],
                "data_file": [
                    "int",
                    "List[int]",
                    "Dict[str,int]",
                    "bool"
                ],
                "batch_size": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "fastcnn-master/core/batch.py": {
        "BatchSequence.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "List[int]",
                    "int",
                    "List[float]",
                    "List[list[int]]",
                    "raiden.utils.AdditionalHash",
                    "pandas.core.indexes.api.Index",
                    "List[List[int]]",
                    "torch.utils.data.Dataset"
                ],
                "batch_size": [
                    "int",
                    "Tuple[Union[int,int,int]]",
                    "None",
                    "starfish.core.types.Number",
                    "bool",
                    "Tuple[int,int,int]",
                    "Optional[int]"
                ],
                "maxlen": [
                    "List[cirq.Circuit]",
                    "float",
                    "Optional[dict]",
                    "Dict",
                    "int",
                    "None",
                    "bytes",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "label_smoothing": [
                    "List[cirq.Circuit]",
                    "None",
                    "float",
                    "Optional[dict]",
                    "int",
                    "Dict",
                    "bytes",
                    "Optional[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "BatchSequence.__len__": {
            "name": "__len__",
            "location": 20,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatchSequence.__getitem__": {
            "name": "__getitem__",
            "location": 23,
            "return": [
                "Tuple[(numpy.ndarray, Any)]"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "bool",
                    "int"
                ]
            }
        }
    },
    "fastcnn-master/core/model.py": {
        "load_model": {
            "name": "load_model",
            "location": 6,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "model_file": [
                    "str",
                    "TextIO",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "make_model": {
            "name": "make_model",
            "location": 10,
            "return": [
                "List[src.autoks.core.gp_model.GPModel]",
                "allennlp.models.model.Model",
                "List[app.models.Question]",
                "app.models.Question"
            ],
            "arguments": {
                "dataset": [
                    "int",
                    "core.entity.Dataset",
                    "asyncio.Task[Any]"
                ],
                "dim": [
                    "int",
                    "Iterable",
                    "str",
                    "Callable",
                    "bool",
                    "tensorflow.keras.optimizers.Optimizer"
                ],
                "maxlen": [
                    "int",
                    "bool",
                    "tensorflow.keras.optimizers.Optimizer",
                    "Iterable",
                    "str",
                    "Callable"
                ],
                "kernel_size": [
                    "int",
                    "bool",
                    "tensorflow.keras.optimizers.Optimizer",
                    "Iterable",
                    "str",
                    "Callable"
                ],
                "opt": [
                    "int",
                    "Iterable",
                    "str",
                    "Callable",
                    "bool",
                    "tensorflow.keras.optimizers.Optimizer"
                ],
                "verbose": [
                    "bool",
                    "int",
                    "tensorflow.keras.optimizers.Optimizer",
                    "Iterable",
                    "str",
                    "Callable"
                ]
            }
        },
        "make_model.make_conv_layers": {
            "name": "make_conv_layers",
            "location": 22,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "supersemodels.core.Database"
                ]
            }
        },
        "make_model.make_model_binary": {
            "name": "make_model_binary",
            "location": 38,
            "return": [
                "List[src.autoks.core.gp_model.GPModel]",
                "allennlp.models.model.Model",
                "List[app.models.Question]",
                "app.models.Question"
            ],
            "arguments": {}
        },
        "make_model.make_model_classify_single": {
            "name": "make_model_classify_single",
            "location": 44,
            "return": [
                "List[src.autoks.core.gp_model.GPModel]",
                "allennlp.models.model.Model",
                "List[app.models.Question]",
                "app.models.Question"
            ],
            "arguments": {}
        },
        "make_model.make_model_classify_multiple": {
            "name": "make_model_classify_multiple",
            "location": 50,
            "return": [
                "List[src.autoks.core.gp_model.GPModel]",
                "allennlp.models.model.Model",
                "List[app.models.Question]",
                "app.models.Question"
            ],
            "arguments": {}
        }
    },
    "fastcnn-master/core/optimizer.py": {
        "make_optimizer": {
            "name": "make_optimizer",
            "location": 6,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ],
                "lr": [
                    "str",
                    "int"
                ],
                "clipnorm": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "fastcnn-master/core/read.py": {
        "make_vocabulary": {
            "name": "make_vocabulary",
            "location": 6,
            "return": [
                "Index",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "samples": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "read": {
            "name": "read",
            "location": 14,
            "return": [
                "Dataset",
                "Dict",
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "label_suffix": [
                    "Text",
                    "str",
                    "bool"
                ],
                "remove_no_labels": [
                    "bool",
                    "Tuple[int,int]",
                    "Callable",
                    "List[Dict[str,Any]]",
                    "int"
                ]
            }
        }
    },
    "fastcnn-master/core/text.py": {
        "vectorize": {
            "name": "vectorize",
            "location": 11,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {
                "sentence": [
                    "str",
                    "Tuple[Union[int,int]]",
                    "List[str]",
                    "List",
                    "int",
                    "Tuple[int,int]",
                    "Optional[float]",
                    "float"
                ],
                "chars": [
                    "str",
                    "Tuple[Union[int,int]]",
                    "List[str]",
                    "List",
                    "int",
                    "Tuple[int,int]",
                    "Optional[float]",
                    "float"
                ],
                "maxlen": [
                    "int",
                    "str",
                    "List"
                ],
                "use_bos": [
                    "bool",
                    "Optional[List[str]]",
                    "int",
                    "str"
                ],
                "use_eos": [
                    "bool",
                    "Optional[List[str]]",
                    "int",
                    "str"
                ]
            }
        }
    },
    "fastcnn-master/core/utils.py": {
        "stat": {
            "name": "stat",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "dataset": [
                    "Dict",
                    "float",
                    "List[deque]",
                    "List[Deque]",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "float4": {
            "name": "float4",
            "location": 27,
            "return": [
                "float"
            ],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        },
        "div": {
            "name": "div",
            "location": 31,
            "return": [
                "Tuple[str,List[str]]",
                "float",
                "bool",
                "int"
            ],
            "arguments": {
                "a": [
                    "float",
                    "int",
                    "str"
                ],
                "b": [
                    "float",
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "default": [
                    "int",
                    "float",
                    "str",
                    "T",
                    "List",
                    "1"
                ]
            }
        },
        "f1": {
            "name": "f1",
            "location": 37,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "prec": [
                    "float",
                    "int",
                    "str"
                ],
                "recall": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "labels_performance": {
            "name": "labels_performance",
            "location": 41,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "confusion_matrix": [
                    "Collection[int]",
                    "str",
                    "List[List[int]]",
                    "int",
                    "Sequence[int]"
                ]
            }
        }
    },
    "fastcnn-master/core/entity/dataset.py": {
        "Dataset.__repr__": {
            "name": "__repr__",
            "location": 14,
            "return": [
                "Text",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fastcnn-master/core/entity/index.py": {
        "Index.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "List",
                    "Dict",
                    "Union[int,str]",
                    "str"
                ]
            }
        },
        "Index.index": {
            "name": "index",
            "location": 12,
            "return": [
                "None",
                "Optional[str]",
                "Optional[bool]",
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "bool",
                    "int"
                ]
            }
        }
    },
    "fastcnn-master/core/entity/metadata.py": {
        "Metadata.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "str",
                    "int",
                    "List[dict]",
                    "Dict",
                    "bool"
                ],
                "labels": [
                    "str",
                    "bool",
                    "List[dict]",
                    "Dict",
                    "List[str]",
                    "int"
                ],
                "chars": [
                    "str",
                    "bool",
                    "List[dict]",
                    "Dict",
                    "List[str]",
                    "int"
                ],
                "params": [
                    "str",
                    "bool",
                    "List[dict]",
                    "Dict",
                    "List[str]",
                    "int"
                ]
            }
        },
        "Metadata.dump": {
            "name": "dump",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "Metadata.load": {
            "name": "load",
            "location": 31,
            "return": [
                "Metadata"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool"
                ],
                "file_path": [
                    "str"
                ]
            }
        }
    },
    "fastcnn-master/core/entity/sample.py": {},
    "fastcnn-master/core/entity/task.py": {},
    "fastcnn-master/core/entity/__init__.py": {}
}
{
    "fasteve-master/examples/events.py": {
        "fake_password_hasher": {
            "name": "fake_password_hasher",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "raw_password": [
                    "str",
                    "bool"
                ]
            }
        },
        "user_in_db_rep": {
            "name": "user_in_db_rep",
            "location": 58,
            "return": [
                "bool",
                "Optional[bool]",
                "starlette.types.ASGIApp",
                "Tuple[int, int, bool]",
                "dict"
            ],
            "arguments": {
                "user_in": [
                    "str",
                    "Optional[Dict[str,Any]]"
                ]
            }
        }
    },
    "fasteve-master/examples/main.py": {
        "custom_endpoint": {
            "name": "custom_endpoint",
            "location": 57,
            "return": [
                "Dict[Text,Text]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "fasteve-master/examples/simple.py": {},
    "fasteve-master/examples/sql.py": {},
    "fasteve-master/fasteve/applications.py": {
        "Fasteve.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "List",
                    "str",
                    "List[str]",
                    "bool"
                ],
                "data": [
                    "dict"
                ],
                "cors_origins": [
                    "List",
                    "int",
                    "Optional[Dict]"
                ]
            }
        },
        "Fasteve.add_event_handler": {
            "name": "add_event_handler",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_type": [
                    "str",
                    "Optional[str]",
                    "raiden.utils.Dict"
                ],
                "func": [
                    "str",
                    "int",
                    "List[Tuple[str, int]]"
                ]
            }
        },
        "Fasteve.register_resource": {
            "name": "register_resource",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "int",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "Callable[[str], None]"
                ]
            }
        },
        "Fasteve.create_mongo_index": {
            "name": "create_mongo_index",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "Dict[str, Any]",
                    "grpy.core.models.Grouping",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Fasteve.repeat_every": {
            "name": "repeat_every",
            "location": 210,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fasteve._embed_data_relation": {
            "name": "_embed_data_relation",
            "location": 234,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Dict[str, Any]",
                    "dict",
                    "Type['Declared']"
                ],
                "response": [
                    "bool",
                    "List[str]",
                    "Tuple[bytes]",
                    "itsim.types.Protocol"
                ]
            }
        },
        "Fasteve._prepare_response_model": {
            "name": "_prepare_response_model",
            "location": 279,
            "return": [
                "dict",
                "Optional[str]",
                "List[str]",
                "int",
                "bool",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "response_model": [
                    "dict",
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Fasteve._register_home_endpoint": {
            "name": "_register_home_endpoint",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fasteve._register_resource_middleware": {
            "name": "_register_resource_middleware",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fasteve._register_CORS_middleware": {
            "name": "_register_CORS_middleware",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fasteve._validate_config": {
            "name": "_validate_config",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "types.ModuleType",
                    "bool",
                    "config.RunningConfig",
                    "model.Integration",
                    "model.Config",
                    "dict",
                    "Optional[List[str]]"
                ]
            }
        },
        "Fasteve._validate_resources": {
            "name": "_validate_resources",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Fasteve.repeat_every.merged_decorator": {
            "name": "merged_decorator",
            "location": 229,
            "return": [
                "str",
                "List[str]",
                "logging.LogRecord"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[[T], bool]",
                    "float"
                ]
            }
        }
    },
    "fasteve-master/fasteve/events.py": {
        "Events.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Events.add": {
            "name": "add",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timing": [
                    "str",
                    "Union[str,int]",
                    "int"
                ],
                "action": [
                    "str",
                    "Union[str,int]",
                    "int"
                ],
                "levels": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        }
    },
    "fasteve-master/fasteve/model.py": {
        "SQLModel.get_primary_key": {
            "name": "get_primary_key",
            "location": 11,
            "return": [
                "List[str]",
                "Tuple[str, Any]",
                "MutableMapping[str, int]",
                "Union[List, Dict]",
                "Dict[str, str]",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "cls": [
                    "Dict",
                    "Dict[str,str]"
                ]
            }
        },
        "MongoModel.get_primary_key": {
            "name": "get_primary_key",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [
                    "Type[MongoModel]"
                ]
            }
        }
    },
    "fasteve-master/fasteve/render.py": {},
    "fasteve-master/fasteve/resource.py": {
        "Resource.__post_init__": {
            "name": "__post_init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubResource.__post_init__": {
            "name": "__post_init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fasteve-master/fasteve/utils.py": {
        "document_etag": {
            "name": "document_etag",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "Dict",
                    "Dict[str,str]",
                    "bool",
                    "Dict[str,Any]",
                    "Dict[str,list[Any]]",
                    "Dict[str,List[Any]]"
                ],
                "ignore_fields": [
                    "List[str]",
                    "None",
                    "bool",
                    "Type",
                    "Iterable[str]"
                ]
            }
        },
        "Unique": {
            "name": "Unique",
            "location": 15,
            "return": [
                "type"
            ],
            "arguments": {
                "old_type": [
                    "str",
                    "Set",
                    "List",
                    "Set[str]",
                    "frozenset[int]",
                    "frozenset"
                ]
            }
        },
        "DataRelation": {
            "name": "DataRelation",
            "location": 20,
            "return": [
                "str",
                "int",
                "bytes",
                "None",
                "Set",
                "frozenset",
                "ImportError",
                "bool",
                "Dict[str,str]"
            ],
            "arguments": {
                "resource": [
                    "float",
                    "int",
                    "str"
                ],
                "optional": [
                    "bool",
                    "bytes",
                    "int",
                    "Optional[Exception]",
                    "Callable[...,Awaitable]"
                ]
            }
        }
    },
    "fasteve-master/fasteve/__init__.py": {},
    "fasteve-master/fasteve/core/config.py": {},
    "fasteve-master/fasteve/core/utils.py": {
        "log": {
            "name": "log",
            "location": 12,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": [
                    "Callable"
                ]
            }
        },
        "is_new_type": {
            "name": "is_new_type",
            "location": 53,
            "return": [
                "bool",
                "str",
                "Exception",
                "Callable[...,T]"
            ],
            "arguments": {
                "type_": [
                    "str",
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "repeat_every": {
            "name": "repeat_every",
            "location": 68,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {}
        },
        "log.wrapper": {
            "name": "wrapper",
            "location": 18,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {}
        },
        "MongoObjectId.__get_validators__": {
            "name": "__get_validators__",
            "location": 32,
            "return": [
                "Generator[(Callable[([Any], Any)], Any, None)]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[int]",
                    "str",
                    "List[str]",
                    "Type[DataclassT]",
                    "Type"
                ]
            }
        },
        "MongoObjectId.validate": {
            "name": "validate",
            "location": 36,
            "return": [
                "bool",
                "ObjectId"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Callable",
                    "Type",
                    "Iterable[T]",
                    "Type[DataclassT]",
                    "T",
                    "bool"
                ],
                "v": [
                    "int",
                    "Tuple[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "MongoObjectId.is_valid": {
            "name": "is_valid",
            "location": 42,
            "return": [
                "bool",
                "float",
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List",
                    "List[list]",
                    "int",
                    "bool"
                ],
                "v": [
                    "str"
                ]
            }
        },
        "MongoObjectId.__modify_schema__": {
            "name": "__modify_schema__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Callable",
                    "Type",
                    "Dict",
                    "Mapping",
                    "Type[DataclassT]",
                    "Callable[[None],Expr]",
                    "Mapping[str,Any]",
                    "Iterable[T]"
                ],
                "field_schema": [
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        },
        "repeat_every.decorator": {
            "name": "decorator",
            "location": 100,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        }
    },
    "fasteve-master/fasteve/core/__init__.py": {},
    "fasteve-master/fasteve/endpoints/collections.py": {
        "collections_endpoint_factory": {
            "name": "collections_endpoint_factory",
            "location": 29,
            "return": [
                "Callable"
            ],
            "arguments": {
                "resource": [
                    "str",
                    "Callable",
                    "List[str]",
                    "resource.Resource"
                ],
                "method": [
                    "str",
                    "int",
                    "Type",
                    "float",
                    "BinaryIO",
                    "bool"
                ]
            }
        }
    },
    "fasteve-master/fasteve/endpoints/documents.py": {
        "item_endpoint_factory": {
            "name": "item_endpoint_factory",
            "location": 36,
            "return": [
                "Callable"
            ],
            "arguments": {
                "resource": [
                    "str",
                    "bool",
                    "resource.Resource",
                    "Callable",
                    "Callable[...,Awaitable]"
                ],
                "method": [
                    "str",
                    "int",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "fasteve-master/fasteve/endpoints/endpoints.py": {
        "subresource_endpoint_factory": {
            "name": "subresource_endpoint_factory",
            "location": 34,
            "return": [
                "Callable"
            ],
            "arguments": {
                "resource": [
                    "str",
                    "Callable",
                    "List[str]",
                    "resource.Resource"
                ],
                "method": [
                    "str",
                    "int",
                    "Type",
                    "float",
                    "BinaryIO",
                    "bool"
                ],
                "subresource": [
                    "str",
                    "Callable",
                    "List[str]",
                    "resource.Resource"
                ]
            }
        }
    },
    "fasteve-master/fasteve/endpoints/__init__.py": {},
    "fasteve-master/fasteve/io/base.py": {
        "ConnectionException.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "driver_exception": [
                    "bool",
                    "bytes",
                    "None"
                ]
            }
        },
        "ConnectionException.__str__": {
            "name": "__str__",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataLayer.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "DataLayer.init_app": {
            "name": "init_app",
            "location": 60,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataLayer.connect": {
            "name": "connect",
            "location": 69,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataLayer.close": {
            "name": "close",
            "location": 72,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataLayer.find_one_raw": {
            "name": "find_one_raw",
            "location": 144,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "List[str]",
                    "bool",
                    "List[object]",
                    "Sized",
                    "str",
                    "Optional[List]",
                    "List",
                    "None"
                ]
            }
        },
        "DataLayer.find_list_of_ids": {
            "name": "find_list_of_ids",
            "location": 154,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "List",
                    "int",
                    "str",
                    "fasteve.resource.Resource",
                    "List[tuple[Union[int,str]]]",
                    "List[Tuple[int,str]]"
                ],
                "ids": [
                    "List",
                    "int",
                    "str",
                    "fasteve.resource.Resource",
                    "List[tuple[Union[int,str]]]",
                    "List[Tuple[int,str]]"
                ]
            }
        },
        "DataLayer.create": {
            "name": "create",
            "location": 169,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "bool",
                    "Iterator[str]",
                    "float",
                    "Iterator"
                ],
                "payload": [
                    "str",
                    "bool",
                    "Iterator[str]",
                    "float",
                    "Iterator"
                ]
            }
        },
        "DataLayer.update": {
            "name": "update",
            "location": 191,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "Dict",
                    "str",
                    "bool",
                    "Callable[,None]",
                    "fasteve.resource.Resource"
                ],
                "id_": [
                    "Dict",
                    "str",
                    "bool",
                    "Callable[,None]",
                    "fasteve.resource.Resource"
                ],
                "updates": [
                    "Dict",
                    "str",
                    "bool",
                    "Callable[,None]",
                    "fasteve.resource.Resource"
                ],
                "original": [
                    "Dict",
                    "str",
                    "bool",
                    "Callable[,None]",
                    "fasteve.resource.Resource"
                ]
            }
        },
        "DataLayer.replace": {
            "name": "replace",
            "location": 208,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "int",
                    "str",
                    "List",
                    "Optional[float]",
                    "bytes",
                    "float",
                    "None",
                    "fasteve.resource.Resource"
                ],
                "id_": [
                    "int",
                    "str",
                    "List",
                    "Optional[float]",
                    "bytes",
                    "float",
                    "None",
                    "fasteve.resource.Resource"
                ],
                "document": [
                    "int",
                    "str",
                    "List",
                    "Optional[float]",
                    "bytes",
                    "float",
                    "None",
                    "fasteve.resource.Resource"
                ],
                "original": [
                    "int",
                    "str",
                    "List",
                    "Optional[float]",
                    "bytes",
                    "float",
                    "None",
                    "fasteve.resource.Resource"
                ]
            }
        },
        "DataLayer.combine_queries": {
            "name": "combine_queries",
            "location": 238,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "query_a": [
                    "Dict",
                    "bool",
                    "str",
                    "List",
                    "Sequence[T]",
                    "int"
                ],
                "query_b": [
                    "Dict",
                    "bool",
                    "str",
                    "List",
                    "Sequence[T]",
                    "int"
                ]
            }
        },
        "DataLayer.get_value_from_query": {
            "name": "get_value_from_query",
            "location": 244,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Dict",
                    "bool",
                    "Optional[Any]",
                    "Any",
                    "None",
                    "Iterable[Sequence[Hashable]]",
                    "Optional[Hashable]",
                    "Hashable",
                    "List[Tuple[str,Any]]",
                    "List[tuple[Union[str,Any]]]"
                ],
                "field_name": [
                    "str",
                    "Dict",
                    "bool",
                    "Optional[Any]",
                    "Any",
                    "None",
                    "Iterable[Sequence[Hashable]]",
                    "Optional[Hashable]",
                    "Hashable",
                    "List[Tuple[str,Any]]",
                    "List[tuple[Union[str,Any]]]"
                ]
            }
        },
        "DataLayer.query_contains_field": {
            "name": "query_contains_field",
            "location": 252,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Dict",
                    "bool",
                    "List[Tuple[str,Any]]",
                    "List[tuple[Union[str,Any]]]"
                ],
                "field_name": [
                    "str",
                    "Dict",
                    "bool",
                    "List[Tuple[str,Any]]",
                    "List[tuple[Union[str,Any]]]"
                ]
            }
        },
        "DataLayer.is_empty": {
            "name": "is_empty",
            "location": 258,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "int",
                    "fasteve.resource.Resource"
                ]
            }
        }
    },
    "fasteve-master/fasteve/io/__init__.py": {},
    "fasteve-master/fasteve/io/mongo/mongo.py": {
        "MongoClient.get_database": {
            "name": "get_database",
            "location": 19,
            "return": [
                "str",
                "Optional[Callable[[Dict], Any]]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "MongoClient.connect": {
            "name": "connect",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Callable"
                ],
                "MONGODB_URI": [
                    "int",
                    "bytes",
                    "str",
                    "List[int]"
                ],
                "CONNECTION_TIMEOUT": [
                    "int",
                    "bytes",
                    "str",
                    "List[int]"
                ]
            }
        },
        "MongoClient.close": {
            "name": "close",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "MongoDataLayer.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "MongoDataLayer.connect": {
            "name": "connect",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoDataLayer.close": {
            "name": "close",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fasteve-master/fasteve/io/mongo/utils.py": {
        "render_pymongo_error": {
            "name": "render_pymongo_error",
            "location": 1,
            "return": [
                "Dict[(str, Union[(list, str)])]"
            ],
            "arguments": {
                "details": [
                    "List",
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "float",
                    "Mapping[str,Any]"
                ]
            }
        }
    },
    "fasteve-master/fasteve/io/mongo/__init__.py": {},
    "fasteve-master/fasteve/io/sql/sql.py": {
        "SQLDataLayer.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "SQLDataLayer.get_model": {
            "name": "get_model",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "list",
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "SQLDataLayer.connect": {
            "name": "connect",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLDataLayer.close": {
            "name": "close",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fasteve-master/fasteve/io/sql/__init__.py": {},
    "fasteve-master/fasteve/methods/common.py": {},
    "fasteve-master/fasteve/methods/delete.py": {},
    "fasteve-master/fasteve/methods/get.py": {},
    "fasteve-master/fasteve/methods/patch.py": {},
    "fasteve-master/fasteve/methods/post.py": {},
    "fasteve-master/fasteve/methods/put.py": {},
    "fasteve-master/fasteve/methods/__init__.py": {},
    "fasteve-master/fasteve/middleware/cors.py": {},
    "fasteve-master/fasteve/middleware/resource.py": {
        "ResourceMiddleware.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "aiohttp.web.Request"
                ],
                "resources": [
                    "str"
                ]
            }
        }
    },
    "fasteve-master/fasteve/middleware/__init__.py": {},
    "fasteve-master/tests/__init__.py": {},
    "fasteve-master/tests/mongodb/conftest.py": {
        "drop_database": {
            "name": "drop_database",
            "location": 11,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "fasteve-master/tests/mongodb/test_mongo_application.py": {
        "test_client": {
            "name": "test_client",
            "location": 28,
            "return": [
                "typing.Generator[TestClient]"
            ],
            "arguments": {}
        },
        "test_get_path": {
            "name": "test_get_path",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "str",
                    "aiohttp.test_utils.TestClient"
                ],
                "path": [
                    "str",
                    "aiohttp.test_utils.TestClient"
                ],
                "expected_status": [
                    "int",
                    "Callable",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "expected_response": [
                    "str",
                    "List[str]",
                    "Dict",
                    "int"
                ]
            }
        },
        "test_insert": {
            "name": "test_insert",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "path": [
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ],
                "data": [
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ],
                "expected_status": [
                    "int",
                    "Callable",
                    "Dict[str,Any]",
                    "Tuple"
                ],
                "expected_response": [
                    "Dict[str,Any]",
                    "Dict",
                    "str",
                    "bytes",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_bulk_insert": {
            "name": "test_bulk_insert",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "path": [
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ],
                "data": [
                    "str",
                    "bool"
                ],
                "expected_status": [
                    "int",
                    "Callable",
                    "Dict[str,Any]",
                    "Tuple"
                ],
                "expected_response": [
                    "bool",
                    "str",
                    "List[str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "test_get_item": {
            "name": "test_get_item",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "path": [
                    "str",
                    "Optional[Dict[str,Any]]"
                ],
                "data": [
                    "str"
                ],
                "expected_status": [
                    "int",
                    "str"
                ]
            }
        },
        "test_delete_path": {
            "name": "test_delete_path",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "str",
                    "aiohttp.test_utils.TestClient"
                ],
                "path": [
                    "str",
                    "aiohttp.test_utils.TestClient"
                ],
                "data": [
                    "str"
                ],
                "expected_status": [
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "test_delete_item": {
            "name": "test_delete_item",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "path": [
                    "str",
                    "Optional[Dict[str,Any]]"
                ],
                "data": [
                    "str"
                ],
                "expected_status": [
                    "int",
                    "Callable",
                    "Optional[Any]",
                    "str",
                    "Any",
                    "None"
                ]
            }
        },
        "test_put_replace_item": {
            "name": "test_put_replace_item",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "str",
                    "aiohttp.test_utils.TestClient"
                ],
                "path": [
                    "str",
                    "aiohttp.test_utils.TestClient"
                ],
                "data": [
                    "str",
                    "List[str]",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ],
                "expected_status": [
                    "int",
                    "Callable",
                    "str",
                    "Dict[str,int]"
                ]
            }
        },
        "test_put_insert_item": {
            "name": "test_put_insert_item",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "str"
                ],
                "path": [
                    "str"
                ],
                "data": [
                    "str",
                    "List[str]",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ],
                "expected_status": [
                    "int",
                    "Callable",
                    "str",
                    "Dict[str,int]"
                ]
            }
        },
        "test_patch_item": {
            "name": "test_patch_item",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "str",
                    "aiohttp.test_utils.TestClient"
                ],
                "path": [
                    "str",
                    "aiohttp.test_utils.TestClient"
                ],
                "data": [
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ],
                "expected_status": [
                    "int",
                    "Optional[Any]",
                    "Any",
                    "None"
                ]
            }
        }
    },
    "fasteve-master/tests/mongodb/__init__.py": {},
    "fasteve-master/tests/mongodb/events/test_database_events.py": {
        "test_database_events": {
            "name": "test_database_events",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fasteve-master/tests/mongodb/events/test_request_events.py": {
        "test_startup": {
            "name": "test_startup",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_shutdown": {
            "name": "test_shutdown",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_request_events": {
            "name": "test_request_events",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fasteve-master/tests/mongodb/events/__init__.py": {},
    "fasteve-master/tests/sql/test_sql_application.py": {
        "test_client": {
            "name": "test_client",
            "location": 25,
            "return": [
                "typing.Generator[TestClient]"
            ],
            "arguments": {}
        },
        "test_get_path": {
            "name": "test_get_path",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "str",
                    "aiohttp.test_utils.TestClient"
                ],
                "path": [
                    "str",
                    "aiohttp.test_utils.TestClient"
                ],
                "expected_status": [
                    "int",
                    "Callable",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "expected_response": [
                    "str",
                    "List[str]",
                    "Dict",
                    "int"
                ]
            }
        },
        "test_insert": {
            "name": "test_insert",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "path": [
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ],
                "data": [
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ],
                "expected_status": [
                    "int",
                    "Callable",
                    "Dict[str,Any]",
                    "Tuple"
                ],
                "expected_response": [
                    "Dict[str,Any]",
                    "Dict",
                    "str",
                    "bytes",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_bulk_insert": {
            "name": "test_bulk_insert",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "path": [
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ],
                "data": [
                    "str",
                    "bool"
                ],
                "expected_status": [
                    "int",
                    "Callable",
                    "Dict[str,Any]",
                    "Tuple"
                ],
                "expected_response": [
                    "bool",
                    "str",
                    "List[str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "test_get_item": {
            "name": "test_get_item",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]"
                ],
                "path": [
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Optional[str]"
                ],
                "data": [
                    "str"
                ],
                "expected_status": [
                    "int",
                    "str"
                ]
            }
        },
        "test_delete_path": {
            "name": "test_delete_path",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "str",
                    "aiohttp.test_utils.TestClient"
                ],
                "path": [
                    "str",
                    "aiohttp.test_utils.TestClient"
                ],
                "data": [
                    "str"
                ],
                "expected_status": [
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "test_delete_item": {
            "name": "test_delete_item",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "str",
                    "Dict[str, Any]"
                ],
                "path": [
                    "str",
                    "Dict[str,Any]"
                ],
                "data": [
                    "str"
                ],
                "expected_status": [
                    "int",
                    "Callable",
                    "Optional[Any]",
                    "str",
                    "Any",
                    "None"
                ]
            }
        },
        "test_put_replace_item": {
            "name": "test_put_replace_item",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "aiohttp.test_utils.TestClient"
                ],
                "path": [
                    "str",
                    "Optional[Dict[str,Any]]",
                    "aiohttp.test_utils.TestClient"
                ],
                "data": [
                    "str",
                    "bool"
                ],
                "expected_status": [
                    "int",
                    "Callable",
                    "str",
                    "Dict[str,int]"
                ]
            }
        },
        "test_put_insert_item": {
            "name": "test_put_insert_item",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "str",
                    "Union[str, List[str]]",
                    "Dict[str, Any]"
                ],
                "path": [
                    "str",
                    "List[str]",
                    "Union[str,List[str]]",
                    "Dict[str,Any]"
                ],
                "data": [
                    "str",
                    "bool"
                ],
                "expected_status": [
                    "int",
                    "Callable",
                    "str",
                    "Dict[str,int]"
                ]
            }
        },
        "test_patch_item": {
            "name": "test_patch_item",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "path": [
                    "str",
                    "Optional[Dict[str,Any]]"
                ],
                "data": [
                    "str",
                    "Dict"
                ],
                "expected_status": [
                    "int",
                    "Optional[Any]",
                    "Any",
                    "None"
                ]
            }
        }
    },
    "fasteve-master/tests/sql/__init__.py": {}
}
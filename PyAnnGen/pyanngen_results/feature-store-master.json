{
    "feature-store-master/setup.py": {},
    "feature-store-master/featurestore/clients/aws_glue.py": {
        "register_table": {
            "name": "register_table",
            "location": 20,
            "return": [
                "Optional[Dict[str, Any]]",
                "str",
                "bytes"
            ],
            "arguments": {
                "db": [
                    "str",
                    "Callable[[str,str],None]",
                    "Callable[str,str,None]"
                ],
                "table": [
                    "str",
                    "Callable[[str,str],None]",
                    "Callable[str,str,None]"
                ],
                "s3_file_path": [
                    "str"
                ]
            }
        },
        "create_table": {
            "name": "create_table",
            "location": 40,
            "return": [
                "int",
                "bool",
                "List[str]",
                "Optional[str]",
                "Dict[str, str]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "db": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "table": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "s3_data_path": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "schema": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "add_partitions": {
            "name": "add_partitions",
            "location": 63,
            "return": [
                "list"
            ],
            "arguments": {
                "db": [
                    "str",
                    "bool"
                ],
                "table": [
                    "str",
                    "bool"
                ],
                "s3_data_paths": [
                    "str",
                    "Union[Literal, str]"
                ],
                "schema": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "create_table_params": {
            "name": "create_table_params",
            "location": 87,
            "return": [
                "Dict[(str, Union[(Dict[(str, Union[(str, Dict[(str, Union[(str, Dict[(str, Union[(str, Dict[(str, str)])])], List[Dict[(str, Any)]], _T2)])], List[Dict[(str, str)]], _T1)])], _T0)])]"
            ],
            "arguments": {
                "db": [
                    "str",
                    "Dict[str,Any]"
                ],
                "table": [
                    "str",
                    "Dict[str,Any]"
                ],
                "s3_data_path": [
                    "str",
                    "Dict[str,Any]"
                ],
                "schema": [
                    "str",
                    "int",
                    "None",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "add_partitions_params": {
            "name": "add_partitions_params",
            "location": 109,
            "return": [
                "Dict[(str, Union[(list, _T0, _T1)])]"
            ],
            "arguments": {
                "db": [
                    "str",
                    "int",
                    "bool"
                ],
                "table": [
                    "str",
                    "int",
                    "bool"
                ],
                "s3_data_paths": [
                    "int",
                    "str",
                    "bytes",
                    "Set[Tuple[str,str]]",
                    "Set[tuple[Union[str,str]]]",
                    "Optional[Callable]",
                    "Callable",
                    "None"
                ],
                "schema": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ]
            }
        },
        "extract_y_m_d": {
            "name": "extract_y_m_d",
            "location": 119,
            "return": [
                "Tuple[(Any, Any, List[str])]"
            ],
            "arguments": {
                "s3_data_path": [
                    "str"
                ]
            }
        },
        "_partitions": {
            "name": "_partitions",
            "location": 132,
            "return": [
                "Dict[(str, Union[(Dict[(str, Any)], List[str])])]"
            ],
            "arguments": {
                "cols": [
                    "Sequence[Dict[str,str]]",
                    "str",
                    "Sequence[dict[str,str]]",
                    "int",
                    "List[str]",
                    "Optional[int]",
                    "None"
                ],
                "s3location": [
                    "str",
                    "int",
                    "Sequence[dict[str,str]]",
                    "Set[str]",
                    "Sequence[Dict[str,str]]",
                    "T"
                ]
            }
        },
        "_storage_descriptor": {
            "name": "_storage_descriptor",
            "location": 142,
            "return": [
                "Dict[(str, Union[(str, Dict[(str, Union[(str, Dict[(str, str)])])], _T0, _T1)])]"
            ],
            "arguments": {
                "cols": [
                    "str",
                    "int",
                    "Sequence[dict[str,str]]",
                    "Set[str]",
                    "Sequence[Dict[str,str]]",
                    "T"
                ],
                "s3location": [
                    "str",
                    "int",
                    "Sequence[dict[str,str]]",
                    "Set[str]",
                    "Sequence[Dict[str,str]]",
                    "T"
                ]
            }
        },
        "_extract_cols": {
            "name": "_extract_cols",
            "location": 159,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "schema": [
                    "Dict",
                    "BaseException",
                    "str"
                ]
            }
        }
    },
    "feature-store-master/featurestore/clients/aws_lambda.py": {
        "invoke": {
            "name": "invoke",
            "location": 11,
            "return": [
                "bytes",
                "str",
                "Dict",
                "Dict[str,str]"
            ],
            "arguments": {
                "endpoint": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "payload": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        }
    },
    "feature-store-master/featurestore/clients/aws_s3.py": {
        "handle": {
            "name": "handle",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "bucket": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "ls_files": {
            "name": "ls_files",
            "location": 15,
            "return": [
                "list"
            ],
            "arguments": {
                "bucket": [
                    "str",
                    "bool"
                ],
                "prefix": [
                    "Optional[str]",
                    "str",
                    "None",
                    "List[str]"
                ]
            }
        },
        "parse_url": {
            "name": "parse_url",
            "location": 29,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "s3url": [
                    "str",
                    "bytes"
                ]
            }
        },
        "get_stream": {
            "name": "get_stream",
            "location": 40,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "bucket": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "save_as": {
            "name": "save_as",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "bucket": [
                    "str"
                ],
                "key": [
                    "str"
                ],
                "fname": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "feature-store-master/featurestore/clients/fg.py": {
        "create_fg": {
            "name": "create_fg",
            "location": 75,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "client": [],
                "app": [],
                "entity": [],
                "version": [],
                "time_col": [],
                "time_col_unit": [],
                "pandas_df": [],
                "spark_df": []
            }
        },
        "add_fg_partition": {
            "name": "add_fg_partition",
            "location": 134,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "client": [],
                "app": [],
                "entity": [],
                "version": [],
                "partition_suffixes": []
            }
        },
        "upload_fg": {
            "name": "upload_fg",
            "location": 150,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "client": [],
                "app": [],
                "entity": [],
                "version": [],
                "pandas_df": []
            }
        },
        "dump_fg": {
            "name": "dump_fg",
            "location": 195,
            "return": [
                "Tuple[(Any, Any, str, Any)]"
            ],
            "arguments": {
                "sql_query": []
            }
        },
        "read_fg": {
            "name": "read_fg",
            "location": 212,
            "return": [
                "Optional[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "query_id": []
            }
        },
        "get_versions": {
            "name": "get_versions",
            "location": 234,
            "return": [
                "list"
            ],
            "arguments": {
                "client": [],
                "app": [],
                "entity": []
            }
        },
        "_extract_versions": {
            "name": "_extract_versions",
            "location": 252,
            "return": [
                "list"
            ],
            "arguments": {
                "keys": [],
                "prefix": [],
                "suffix": []
            }
        },
        "_pause": {
            "name": "_pause",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "sec": []
            }
        },
        "_query_completed": {
            "name": "_query_completed",
            "location": 262,
            "return": [
                "bool"
            ],
            "arguments": {
                "status": []
            }
        },
        "_query_success": {
            "name": "_query_success",
            "location": 266,
            "return": [
                "bool"
            ],
            "arguments": {
                "status": []
            }
        },
        "_poll_query_status": {
            "name": "_poll_query_status",
            "location": 270,
            "return": [
                "Any"
            ],
            "arguments": {
                "query_id": []
            }
        },
        "_query_status": {
            "name": "_query_status",
            "location": 284,
            "return": [
                "Any"
            ],
            "arguments": {
                "query_id": []
            }
        },
        "_s3_query_result_path": {
            "name": "_s3_query_result_path",
            "location": 292,
            "return": [
                "str"
            ],
            "arguments": {
                "bucket": [],
                "root": []
            }
        },
        "_download_from_s3": {
            "name": "_download_from_s3",
            "location": 296,
            "return": [
                "str"
            ],
            "arguments": {
                "s3_url": []
            }
        },
        "_athena_query_params": {
            "name": "_athena_query_params",
            "location": 304,
            "return": [
                "Dict[(str, Union[(Dict[(str, Union[(_T0, _T2)])], _T1)])]"
            ],
            "arguments": {
                "db_name": [
                    "_T0@@"
                ],
                "sql_query": [
                    "_T1@@"
                ],
                "s3_output_folder": [
                    "_T2@@"
                ]
            }
        },
        "_get_pandas_schema": {
            "name": "_get_pandas_schema",
            "location": 312,
            "return": [
                "Any"
            ],
            "arguments": {
                "pandas_df": []
            }
        },
        "_s3_schema_rel_path": {
            "name": "_s3_schema_rel_path",
            "location": 317,
            "return": [
                "str"
            ],
            "arguments": {
                "client": [],
                "app": [],
                "entity": [],
                "version": []
            }
        },
        "_s3_schema_path": {
            "name": "_s3_schema_path",
            "location": 321,
            "return": [
                "str"
            ],
            "arguments": {
                "root": [],
                "client": [],
                "app": [],
                "entity": [],
                "version": []
            }
        },
        "_s3_data_file": {
            "name": "_s3_data_file",
            "location": 325,
            "return": [
                "str"
            ],
            "arguments": {
                "root": [],
                "client": [],
                "app": [],
                "entity": [],
                "version": [],
                "time_suffix": [],
                "fname": []
            }
        },
        "_s3_data_partition": {
            "name": "_s3_data_partition",
            "location": 339,
            "return": [
                "str"
            ],
            "arguments": {
                "root": [],
                "client": [],
                "app": [],
                "entity": [],
                "version": [],
                "time_suffix": []
            }
        },
        "_s3_data_folder": {
            "name": "_s3_data_folder",
            "location": 345,
            "return": [
                "str"
            ],
            "arguments": {
                "root": [],
                "client": [],
                "app": [],
                "entity": [],
                "version": []
            }
        },
        "_upload_df": {
            "name": "_upload_df",
            "location": 349,
            "return": [
                "List[Tuple[(str, str)]]"
            ],
            "arguments": {
                "pandas_df": [],
                "client": [],
                "app": [],
                "entity": [],
                "version": [],
                "time_suffix": []
            }
        },
        "_uuid": {
            "name": "_uuid",
            "location": 388,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "_upload_schema": {
            "name": "_upload_schema",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [],
                "s3obj": []
            }
        },
        "_s3_abs_path": {
            "name": "_s3_abs_path",
            "location": 399,
            "return": [
                "str"
            ],
            "arguments": {
                "root": [],
                "rel_path": []
            }
        },
        "_assert_folder_absent_s3": {
            "name": "_assert_folder_absent_s3",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {
                "bucket": [],
                "prefix": []
            }
        },
        "_assert_absent_s3": {
            "name": "_assert_absent_s3",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "s3obj": []
            }
        },
        "_download_schema": {
            "name": "_download_schema",
            "location": 419,
            "return": [
                "Any"
            ],
            "arguments": {
                "client": [],
                "app": [],
                "entity": [],
                "version": []
            }
        },
        "_get_epoch_secs": {
            "name": "_get_epoch_secs",
            "location": 426,
            "return": [
                "int"
            ],
            "arguments": {
                "pandas_df": [],
                "index": [],
                "time_col": [],
                "time_col_unit": []
            }
        },
        "_get_record_s3_folder": {
            "name": "_get_record_s3_folder",
            "location": 433,
            "return": [
                "Any"
            ],
            "arguments": {
                "pandas_df": [],
                "index": [],
                "time_col": [],
                "time_col_unit": []
            }
        },
        "_groupby_time": {
            "name": "_groupby_time",
            "location": 440,
            "return": [
                "Any"
            ],
            "arguments": {
                "pandas_df": [],
                "time_col": [],
                "time_col_unit": []
            }
        },
        "_save_parquet_local": {
            "name": "_save_parquet_local",
            "location": 447,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "spark_df": [],
                "fpath": []
            }
        },
        "_glue_table_props": {
            "name": "_glue_table_props",
            "location": 452,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "client": [],
                "app": [],
                "entity": [],
                "version": []
            }
        },
        "_glue_s3_partition": {
            "name": "_glue_s3_partition",
            "location": 461,
            "return": [
                "str"
            ],
            "arguments": {
                "bucket": [],
                "s3_folder": []
            }
        },
        "_glue_create_table_params": {
            "name": "_glue_create_table_params",
            "location": 465,
            "return": [
                "Any"
            ],
            "arguments": {
                "client": [],
                "app": [],
                "entity": [],
                "version": [],
                "schema": []
            }
        },
        "_glue_add_partition_params": {
            "name": "_glue_add_partition_params",
            "location": 477,
            "return": [
                "Any"
            ],
            "arguments": {
                "client": [],
                "app": [],
                "entity": [],
                "version": [],
                "time_suffixes": [],
                "schema": []
            }
        },
        "_glue_partition_paths": {
            "name": "_glue_partition_paths",
            "location": 495,
            "return": [
                "str"
            ],
            "arguments": {
                "client": [],
                "app": [],
                "entity": [],
                "version": [],
                "time_suffix": []
            }
        },
        "_invoke_lambda": {
            "name": "_invoke_lambda",
            "location": 505,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "action": [],
                "params": [],
                "schema": [],
                "rel_paths": []
            }
        },
        "_http_ok": {
            "name": "_http_ok",
            "location": 524,
            "return": [
                "Any"
            ],
            "arguments": {
                "response": []
            }
        },
        "_lambda_status_ok": {
            "name": "_lambda_status_ok",
            "location": 528,
            "return": [
                "Any"
            ],
            "arguments": {
                "payload": []
            }
        },
        "_lambda_exec_response": {
            "name": "_lambda_exec_response",
            "location": 532,
            "return": [
                "Any"
            ],
            "arguments": {
                "response": []
            }
        },
        "_groupby_time.s3_folder": {
            "name": "s3_folder",
            "location": 441,
            "return": [],
            "arguments": {
                "i": []
            }
        }
    },
    "feature-store-master/featurestore/clients/ist_utils.py": {
        "to_datetime": {
            "name": "to_datetime",
            "location": 11,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "epoch_secs": [
                    "int",
                    "str",
                    "float",
                    "Dict"
                ]
            }
        },
        "to_partition": {
            "name": "to_partition",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "epoch_secs": [
                    "float",
                    "int",
                    "str",
                    "None",
                    "datetime.datetime",
                    "datetime.timedelta",
                    "Optional[datetime.tzinfo]"
                ]
            }
        },
        "current_epoch_millis": {
            "name": "current_epoch_millis",
            "location": 20,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "feature-store-master/featurestore/clients/schema_utils.py": {
        "validate": {
            "name": "validate",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {
                "schema": [
                    "Dict[Any,list]",
                    "Dict[str,Any]",
                    "str",
                    "Optional[Callable]",
                    "bytes",
                    "Optional[str]"
                ],
                "time_col": [
                    "str",
                    "bool",
                    "Dict",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "None"
                ],
                "time_col_unit": [
                    "str"
                ]
            }
        },
        "match": {
            "name": "match",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "expected_schema": [
                    "Union[Dict, List]",
                    "dict",
                    "List[Dict[str, Any]]"
                ],
                "actual_schema": [
                    "Set[VT]",
                    "Type",
                    "Mapping[str, Any]",
                    "list"
                ]
            }
        }
    },
    "feature-store-master/featurestore/clients/spark_utils.py": {
        "sparkSession": {
            "name": "sparkSession",
            "location": 19,
            "return": [
                "Dict[str, Dict[str, Any]]",
                "Mapping[str, Any]",
                "Dict[str, Any]",
                "Exception",
                "Dict[str, Union[str, Set]]"
            ],
            "arguments": {}
        },
        "get_schema": {
            "name": "get_schema",
            "location": 28,
            "return": [
                "dict"
            ],
            "arguments": {
                "spark_df": [
                    "str",
                    "Mapping",
                    "int"
                ]
            }
        },
        "parquet2spark": {
            "name": "parquet2spark",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "csv2spark": {
            "name": "csv2spark",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "fname": [
                    "List[str]",
                    "Set[str]",
                    "bool",
                    "Dict[str,str]"
                ]
            }
        },
        "pandas2spark": {
            "name": "pandas2spark",
            "location": 73,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pandas_df": [
                    "bytes"
                ]
            }
        },
        "read": {
            "name": "read",
            "location": 81,
            "return": [
                "List[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "int",
                    "Optional[BaseException]"
                ]
            }
        },
        "_get_file": {
            "name": "_get_file",
            "location": 92,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "fname": [
                    "str"
                ]
            }
        }
    },
    "feature-store-master/featurestore/clients/str_utils.py": {
        "sanitise": {
            "name": "sanitise",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "stream2str": {
            "name": "stream2str",
            "location": 22,
            "return": [
                "float",
                "Tuple[int, int]",
                "str",
                "int"
            ],
            "arguments": {
                "stream": [
                    "str",
                    "IO",
                    "None",
                    "Optional[str]",
                    "IO[str]"
                ]
            }
        },
        "strip": {
            "name": "strip",
            "location": 26,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "prefix": [
                    "str"
                ],
                "suffix": [
                    "bool",
                    "str"
                ]
            }
        },
        "_strip_prefix": {
            "name": "_strip_prefix",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "_strip_suffix": {
            "name": "_strip_suffix",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "suffix": [
                    "str"
                ]
            }
        }
    },
    "feature-store-master/featurestore/clients/__init__.py": {},
    "feature-store-master/featurestore/lambda/lambda.py": {
        "handler": {
            "name": "handler",
            "location": 43,
            "return": [
                "List[str]",
                "Dict",
                "Dict[str,str]",
                "Optional[str]",
                "int",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "event": [
                    "Dict[str,Any]",
                    "Dict",
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        },
        "_glue": {
            "name": "_glue",
            "location": 68,
            "return": [
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "_athena": {
            "name": "_athena",
            "location": 72,
            "return": [
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "_extract_glue_params": {
            "name": "_extract_glue_params",
            "location": 76,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "args": []
            }
        },
        "_create_fg": {
            "name": "_create_fg",
            "location": 85,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "args": []
            }
        },
        "_upload_fg": {
            "name": "_upload_fg",
            "location": 96,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "args": []
            }
        },
        "_add_partition": {
            "name": "_add_partition",
            "location": 109,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "args": []
            }
        },
        "_dump_fg": {
            "name": "_dump_fg",
            "location": 119,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "args": []
            }
        },
        "_dump_fg_status": {
            "name": "_dump_fg_status",
            "location": 129,
            "return": [
                "Dict[(str, Union[(Exception, str, Dict[(str, Any)])])]"
            ],
            "arguments": {
                "args": []
            }
        },
        "_error_response": {
            "name": "_error_response",
            "location": 139,
            "return": [
                "Dict[(str, Union[(str, _T1)])]"
            ],
            "arguments": {
                "message": [
                    "Dict",
                    "Dict[str,str]",
                    "Dict[str,Any]"
                ],
                "ex": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "bytes",
                    "Mapping[str,str]",
                    "Mapping"
                ]
            }
        },
        "_s3_copy": {
            "name": "_s3_copy",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "stage_path": [
                    "str"
                ],
                "prod_path": [
                    "str",
                    "int"
                ]
            }
        },
        "_http_ok": {
            "name": "_http_ok",
            "location": 158,
            "return": [
                "bool",
                "Dict[str,Any]",
                "OrderedDict",
                "str"
            ],
            "arguments": {
                "response": []
            }
        },
        "_action_status": {
            "name": "_action_status",
            "location": 162,
            "return": [
                "Dict[(str, Union[(str, _T0)])]"
            ],
            "arguments": {
                "response": [
                    "str"
                ]
            }
        },
        "_query_results": {
            "name": "_query_results",
            "location": 167,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "query_id": [
                    "int",
                    "str"
                ]
            }
        },
        "_query_success": {
            "name": "_query_success",
            "location": 181,
            "return": [
                "bool"
            ],
            "arguments": {
                "status": [
                    "str",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        },
        "_query_status": {
            "name": "_query_status",
            "location": 185,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "query_id": [
                    "int",
                    "str",
                    "Union[KspNativeControl,int]"
                ]
            }
        },
        "_query_metadata": {
            "name": "_query_metadata",
            "location": 200,
            "return": [
                "Dict[(str, Optional[Union[(list, str)]])]"
            ],
            "arguments": {
                "query_id": [
                    "str",
                    "int",
                    "Optional[float]",
                    "float",
                    "bool",
                    "None"
                ]
            }
        },
        "_col_def": {
            "name": "_col_def",
            "location": 213,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "col": [
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "_get_result_schema": {
            "name": "_get_result_schema",
            "location": 221,
            "return": [
                "list"
            ],
            "arguments": {
                "cols": [
                    "Sequence[Dict[str,str]]",
                    "str",
                    "Sequence[dict[str,str]]",
                    "int",
                    "bool",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "None"
                ]
            }
        }
    },
    "feature-store-master/samples/athena_query.py": {
        "_pause": {
            "name": "_pause",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "sec": [
                    "str",
                    "int"
                ]
            }
        },
        "_athena": {
            "name": "_athena",
            "location": 20,
            "return": [
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "_run_query": {
            "name": "_run_query",
            "location": 24,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "database": [
                    "List[str]",
                    "str",
                    "List[bytes]",
                    "List[int]",
                    "Iterable[Union[Any,int]]"
                ],
                "query": [
                    "List[str]",
                    "str",
                    "List[bytes]",
                    "List[int]",
                    "Iterable[Union[Any,int]]"
                ],
                "s3_output_path": [
                    "List[str]",
                    "str",
                    "List[bytes]",
                    "List[int]",
                    "Iterable[Union[Any,int]]"
                ]
            }
        },
        "_query_results": {
            "name": "_query_results",
            "location": 40,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "query_id": [
                    "str",
                    "int"
                ]
            }
        },
        "_query_success": {
            "name": "_query_success",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "status": [
                    "str",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        },
        "_query_status": {
            "name": "_query_status",
            "location": 58,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "qid": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "_query_metadata": {
            "name": "_query_metadata",
            "location": 73,
            "return": [
                "Dict[(str, Union[(list, str)])]"
            ],
            "arguments": {
                "qid": [
                    "str",
                    "int",
                    "Iterable[int]"
                ]
            }
        },
        "_col_def": {
            "name": "_col_def",
            "location": 86,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "col": [
                    "Dict[str,str]",
                    "str",
                    "Sequence[str]",
                    "Awaitable",
                    "Optional[str]"
                ]
            }
        },
        "_get_result_schema": {
            "name": "_get_result_schema",
            "location": 94,
            "return": [
                "list"
            ],
            "arguments": {
                "cols": [
                    "Sequence[Dict[str,str]]",
                    "str",
                    "Sequence[dict[str,str]]",
                    "int",
                    "bool",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "None"
                ]
            }
        },
        "_http_ok": {
            "name": "_http_ok",
            "location": 98,
            "return": [
                "bool",
                "Dict[str,Any]",
                "OrderedDict",
                "str"
            ],
            "arguments": {
                "response": []
            }
        },
        "_bad_response": {
            "name": "_bad_response",
            "location": 102,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "response": [
                    "List"
                ]
            }
        }
    },
    "feature-store-master/samples/fg_sample.py": {},
    "feature-store-master/samples/glue_table_sample.py": {},
    "feature-store-master/samples/lambda_invoke.py": {
        "invoke_lambda": {
            "name": "invoke_lambda",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [
                    "bool",
                    "str",
                    "Mapping"
                ]
            }
        }
    },
    "feature-store-master/tests/test_aws_glue.py": {
        "test_extract_y_m_d": {
            "name": "test_extract_y_m_d",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "feature-store-master/tests/test_aws_s3.py": {
        "test_parse_url": {
            "name": "test_parse_url",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "feature-store-master/tests/test_ist_utils.py": {
        "test_to_partition": {
            "name": "test_to_partition",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "feature-store-master/tests/test_schema_utils.py": {
        "test_validate": {
            "name": "test_validate",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_validate_fail": {
            "name": "_validate_fail",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "int",
                    "float"
                ],
                "time_col": [
                    "int",
                    "float"
                ],
                "time_unit": [
                    "int",
                    "float"
                ],
                "message": [
                    "float",
                    "Tuple",
                    "List[str]",
                    "Callable",
                    "int",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        },
        "test_validate_no_time_col": {
            "name": "test_validate_no_time_col",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_empty_time_col": {
            "name": "test_validate_empty_time_col",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_bad_time_unit": {
            "name": "test_validate_bad_time_unit",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_absent_time_col": {
            "name": "test_validate_absent_time_col",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_non_numeric_time_col": {
            "name": "test_validate_non_numeric_time_col",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_ymd_in_schema": {
            "name": "test_validate_ymd_in_schema",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_match": {
            "name": "test_match",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_match_fail": {
            "name": "_match_fail",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "expected": [
                    "List[float]",
                    "Dict",
                    "bool",
                    "List[int]",
                    "Union[Set[int],List[int],Dict[int,Any]]",
                    "Set[int]",
                    "Dict[int,Any]"
                ],
                "actual": [
                    "List[float]",
                    "Dict",
                    "bool",
                    "List[int]",
                    "Union[Set[int],List[int],Dict[int,Any]]",
                    "Set[int]",
                    "Dict[int,Any]"
                ],
                "message": [
                    "Dict[str,Any]",
                    "Callable",
                    "List"
                ]
            }
        },
        "test_match_extra_cols": {
            "name": "test_match_extra_cols",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_match_fewer_cols": {
            "name": "test_match_fewer_cols",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_match_renamed_cols": {
            "name": "test_match_renamed_cols",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_match_type_mismatch": {
            "name": "test_match_type_mismatch",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_match_missing_time_col": {
            "name": "test_match_missing_time_col",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "feature-store-master/tests/test_str_utils.py": {
        "test_sanitise": {
            "name": "test_sanitise",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_strip": {
            "name": "test_strip",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
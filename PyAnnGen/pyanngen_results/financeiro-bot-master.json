{
    "financeiro-bot-master/gunicorn_config.py": {},
    "financeiro-bot-master/manage.py": {},
    "financeiro-bot-master/base_site/settings.py": {},
    "financeiro-bot-master/base_site/urls.py": {},
    "financeiro-bot-master/base_site/wsgi.py": {},
    "financeiro-bot-master/base_site/__init__.py": {},
    "financeiro-bot-master/base_site/alelo/admin.py": {},
    "financeiro-bot-master/base_site/alelo/apps.py": {},
    "financeiro-bot-master/base_site/alelo/models.py": {},
    "financeiro-bot-master/base_site/alelo/tasks.py": {
        "execute_alelo_api": {
            "name": "execute_alelo_api",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_items": {
            "name": "check_items",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "financeiro-bot-master/base_site/alelo/__init__.py": {},
    "financeiro-bot-master/base_site/alelo/management/__init__.py": {},
    "financeiro-bot-master/base_site/alelo/management/commands/i_alelo.py": {
        "Command.handle": {
            "name": "handle",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "financeiro-bot-master/base_site/alelo/management/commands/__init__.py": {},
    "financeiro-bot-master/base_site/alelo/migrations/0001_initial.py": {},
    "financeiro-bot-master/base_site/alelo/migrations/0002_alelocard.py": {},
    "financeiro-bot-master/base_site/alelo/migrations/__init__.py": {},
    "financeiro-bot-master/base_site/brokes_note/admin.py": {},
    "financeiro-bot-master/base_site/brokes_note/apps.py": {},
    "financeiro-bot-master/base_site/brokes_note/models.py": {
        "Broker.__str__": {
            "name": "__str__",
            "location": 7,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Company.__str__": {
            "name": "__str__",
            "location": 15,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "BrokersNote.__str__": {
            "name": "__str__",
            "location": 30,
            "return": [
                "str",
                "Optional[str]",
                "Tuple[str, str]",
                "int",
                "Sequence[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "BrokersNoteItem.__str__": {
            "name": "__str__",
            "location": 46,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "financeiro-bot-master/base_site/brokes_note/tests.py": {},
    "financeiro-bot-master/base_site/brokes_note/views.py": {},
    "financeiro-bot-master/base_site/brokes_note/__init__.py": {},
    "financeiro-bot-master/base_site/brokes_note/migrations/0001_initial.py": {},
    "financeiro-bot-master/base_site/brokes_note/migrations/0002_auto_20200611_2032.py": {},
    "financeiro-bot-master/base_site/brokes_note/migrations/__init__.py": {},
    "financeiro-bot-master/base_site/mainapp/admin.py": {},
    "financeiro-bot-master/base_site/mainapp/apps.py": {},
    "financeiro-bot-master/base_site/mainapp/command_keyboard.py": {
        "CommandKeyBoard.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cal": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "CommandKeyBoard.get_entry_date": {
            "name": "get_entry_date",
            "location": 12,
            "return": [
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandKeyBoard.get_payment_date": {
            "name": "get_payment_date",
            "location": 15,
            "return": [
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandKeyBoard.get_category": {
            "name": "get_category",
            "location": 19,
            "return": [
                "InlineKeyboardMarkup",
                "str",
                "bytes",
                "Dict[Optional[str], Set[abilian.services.security.models.Role]]",
                "abilian.core.models.subjects.Principal",
                "bool"
            ],
            "arguments": {}
        },
        "CommandKeyBoard.get_name": {
            "name": "get_name",
            "location": 38,
            "return": [
                "InlineKeyboardMarkup",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "CommandKeyBoard.get_need_type": {
            "name": "get_need_type",
            "location": 54,
            "return": [
                "InlineKeyboardMarkup",
                "type",
                "bool",
                "Tuple[int, int, bool]",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "CommandKeyBoard.get_payment_installments": {
            "name": "get_payment_installments",
            "location": 70,
            "return": [
                "InlineKeyboardMarkup",
                "str",
                "bytes",
                "Dict[Optional[str], Set[abilian.services.security.models.Role]]",
                "abilian.core.models.subjects.Principal",
                "bool"
            ],
            "arguments": {}
        }
    },
    "financeiro-bot-master/base_site/mainapp/forms.py": {},
    "financeiro-bot-master/base_site/mainapp/goals.py": {
        "get_goals": {
            "name": "get_goals",
            "location": 62,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "get_ini_and_end_date": {
            "name": "get_ini_and_end_date",
            "location": 91,
            "return": [
                "tuple"
            ],
            "arguments": {
                "g": [
                    "base_site.mainapp.models.Goal"
                ]
            }
        },
        "CalculateGoals.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_id": []
            }
        },
        "CalculateGoals.execute_goals": {
            "name": "execute_goals",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "financeiro-bot-master/base_site/mainapp/google_service.py": {
        "Google.get_service": {
            "name": "get_service",
            "location": 8,
            "return": [
                "str",
                "int",
                "Hashable",
                "Tuple[str, str]"
            ],
            "arguments": {}
        },
        "Google.append_values": {
            "name": "append_values",
            "location": 21,
            "return": [
                "bytes",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "financeiro-bot-master/base_site/mainapp/manageconnections.py": {
        "make_sure_mysql_usable": {
            "name": "make_sure_mysql_usable",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "financeiro-bot-master/base_site/mainapp/models.py": {
        "TypeEntry.__str__": {
            "name": "__str__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FamilyMember.__str__": {
            "name": "__str__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Category.__str__": {
            "name": "__str__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FullCommand.__str__": {
            "name": "__str__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Goal.__str__": {
            "name": "__str__",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "financeiro-bot-master/base_site/mainapp/schedule.py": {
        "execute_command": {
            "name": "execute_command",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "str_dict": [
                    "str"
                ]
            }
        }
    },
    "financeiro-bot-master/base_site/mainapp/serializers.py": {},
    "financeiro-bot-master/base_site/mainapp/views.py": {
        "index": {
            "name": "index",
            "location": 5,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "financeiro-bot-master/base_site/mainapp/__init__.py": {},
    "financeiro-bot-master/base_site/mainapp/business/command_flow.py": {
        "CommandFlow.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "txt_command": []
            }
        },
        "CommandFlow.next": {
            "name": "next",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "CommandFlow._set_next": {
            "name": "_set_next",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "CommandFlow._get_next": {
            "name": "_get_next",
            "location": 65,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandFlow._build_data": {
            "name": "_build_data",
            "location": 114,
            "return": [
                "Dict[(str, Union[(bool, _T0, _T1)])]"
            ],
            "arguments": {
                "keyboard": [
                    "_T0"
                ],
                "message": [
                    "_T1"
                ]
            }
        },
        "CommandFlow.save": {
            "name": "save",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "financeiro-bot-master/base_site/mainapp/business/new_command.py": {
        "NewCommand.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "txt_command": [
                    "str",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "financeiro-bot-master/base_site/mainapp/business/register.py": {
        "Register.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "full_command": [
                    "base_site.mainapp.models.FullCommand"
                ]
            }
        },
        "Register.need_payment_installments": {
            "name": "need_payment_installments",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Register.need_entry_date": {
            "name": "need_entry_date",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Register.need_payment_date": {
            "name": "need_payment_date",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Register.need_debit": {
            "name": "need_debit",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Register.need_credit": {
            "name": "need_credit",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Register.need_category": {
            "name": "need_category",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Register.need_name": {
            "name": "need_name",
            "location": 49,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Register.need_description": {
            "name": "need_description",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Register.need_type": {
            "name": "need_type",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Register._calc_payments": {
            "name": "_calc_payments",
            "location": 58,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Register._calc_payment_date": {
            "name": "_calc_payment_date",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "count": []
            }
        },
        "Register.save": {
            "name": "save",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Register._send_google": {
            "name": "_send_google",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "date": [],
                "val_credit": [],
                "val_debt": [],
                "description": []
            }
        },
        "Register._save_on_database": {
            "name": "_save_on_database",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "date": [],
                "val_credit": [],
                "val_debt": [],
                "description": []
            }
        },
        "Register._get_date": {
            "name": "_get_date",
            "location": 139,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "dt": []
            }
        },
        "Register._get_type_entry": {
            "name": "_get_type_entry",
            "location": 143,
            "return": [],
            "arguments": {
                "type_name": []
            }
        },
        "Register._get_family_membor": {
            "name": "_get_family_membor",
            "location": 147,
            "return": [],
            "arguments": {
                "family_name": []
            }
        },
        "Register._get_category": {
            "name": "_get_category",
            "location": 151,
            "return": [],
            "arguments": {
                "category": []
            }
        },
        "Register._get_entry_date_value": {
            "name": "_get_entry_date_value",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Register._get_payment_date_value": {
            "name": "_get_payment_date_value",
            "location": 161,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "financeiro-bot-master/base_site/mainapp/business/valid_commands.py": {
        "get_valid_commands": {
            "name": "get_valid_commands",
            "location": 6,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        }
    },
    "financeiro-bot-master/base_site/mainapp/business/__init__.py": {},
    "financeiro-bot-master/base_site/mainapp/management/__init__.py": {},
    "financeiro-bot-master/base_site/mainapp/management/commands/seeddb.py": {
        "Command.handle": {
            "name": "handle",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "financeiro-bot-master/base_site/mainapp/management/commands/startelegrambot2.py": {
        "Lover.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "financeiro-bot-master/base_site/mainapp/management/commands/start_telegram_bot.py": {
        "facts_to_str": {
            "name": "facts_to_str",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "user_data": [
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "Type[T]"
                ]
            }
        },
        "start": {
            "name": "start",
            "location": 42,
            "return": [
                "int"
            ],
            "arguments": {
                "update": [
                    "list[M]",
                    "List[src.autoks.core.gp_model.GPModel]",
                    "bytes",
                    "collections.abc.AsyncGenerator",
                    "AsyncGenerator",
                    "telegram.Bot"
                ],
                "context": [
                    "str",
                    "list[dict[, ]]",
                    "List[dict]",
                    "int",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[str, dict[str, str]]",
                    "telegram.Bot",
                    "Dict[str, Dict[str, str]]",
                    "dict[str, str]",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "regular_choice": {
            "name": "regular_choice",
            "location": 60,
            "return": [
                "int"
            ],
            "arguments": {
                "update": [
                    "dict[, ]",
                    "bytes",
                    "telegram.Update",
                    "telegram.exCallbackContext",
                    "telegram.update.Update",
                    "dict"
                ],
                "context": [
                    "int",
                    "str",
                    "dict[, ]",
                    "telegram.Update",
                    "dict[str, typing.Union[str,None]]",
                    "django.http.HttpRequest",
                    "dict",
                    "Dict[str, Optional[str]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "custom_choice": {
            "name": "custom_choice",
            "location": 72,
            "return": [
                "int"
            ],
            "arguments": {
                "update": [
                    "bool",
                    "str",
                    "telegram.Update",
                    "tuple[typing.Union[typing.Any,typing.Any,typing.Any,typing.Any,typing.Any]]",
                    "list[tuple[typing.Union[typing.Any,dict[, ]]]]",
                    "Tuple[Any, Any, Any, Any, Any]",
                    "List[Tuple[Any, Dict]]",
                    "django.db.models.Model"
                ],
                "context": [
                    "bool",
                    "telegram.exCallbackContext",
                    "telegram.Update",
                    "telegram.boBot",
                    "telegram.Bot"
                ]
            }
        },
        "received_information": {
            "name": "received_information",
            "location": 78,
            "return": [
                "int"
            ],
            "arguments": {
                "update": [
                    "telegram.update.Update",
                    "telegram.exCallbackContext",
                    "telegram.Update",
                    "telegram.Bot",
                    "telegram.exUpdater"
                ],
                "context": [
                    "bool",
                    "telegram.Update",
                    "telegram.Bot",
                    "telegram.exCallbackContext"
                ]
            }
        },
        "show_data": {
            "name": "show_data",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "update": [
                    "str",
                    "bytes",
                    "int",
                    "django.contrib.auth.models.User"
                ],
                "context": [
                    "str",
                    "bytes",
                    "int",
                    "django.contrib.auth.models.User"
                ]
            }
        },
        "done": {
            "name": "done",
            "location": 99,
            "return": [
                "float",
                "str",
                "django.template.Context",
                "int"
            ],
            "arguments": {
                "update": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[bytes]",
                    "bytes",
                    "dict",
                    "str",
                    "None",
                    "django.contrib.auth.models.User",
                    "dict[, ]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "context": [
                    "telegram.Update",
                    "telegram.Bot",
                    "telegram.exCallbackContext"
                ]
            }
        },
        "error": {
            "name": "error",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "update": [
                    "int",
                    "float",
                    "list[int]",
                    "static_frame.core.display_config.DisplayConfig",
                    "List[int]"
                ],
                "context": [
                    "int",
                    "float",
                    "list[int]",
                    "static_frame.core.display_config.DisplayConfig",
                    "List[int]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Command.handle": {
            "name": "handle",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "financeiro-bot-master/base_site/mainapp/management/commands/__init__.py": {},
    "financeiro-bot-master/base_site/mainapp/migrations/0001_initial.py": {},
    "financeiro-bot-master/base_site/mainapp/migrations/0002_category_enable.py": {},
    "financeiro-bot-master/base_site/mainapp/migrations/0003_goal.py": {},
    "financeiro-bot-master/base_site/mainapp/migrations/__init__.py": {},
    "financeiro-bot-master/base_site/mainapp/telegram_bot/calendar.py": {
        "Calendar.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Calendar.get_calendar": {
            "name": "get_calendar",
            "location": 15,
            "return": [
                "InlineKeyboardMarkup",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Calendar._get_header": {
            "name": "_get_header",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Calendar._get_days_from_month_year": {
            "name": "_get_days_from_month_year",
            "location": 45,
            "return": [
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Calendar.get_calendar_before": {
            "name": "get_calendar_before",
            "location": 49,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Calendar.get_calendar_after": {
            "name": "get_calendar_after",
            "location": 53,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Calendar.get_day_text": {
            "name": "get_day_text",
            "location": 58,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "day": [
                    "_T0"
                ]
            }
        },
        "Calendar.get_day_value": {
            "name": "get_day_value",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "day": [
                    "int",
                    "None",
                    "datetime.date",
                    "Optional[datetime.datetime]",
                    "datetime"
                ]
            }
        },
        "Calendar.convert_calendar_day_value_to_datetime": {
            "name": "convert_calendar_day_value_to_datetime",
            "location": 68,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "value": [
                    "bool",
                    "float",
                    "datetime.timedelta",
                    "int"
                ]
            }
        }
    },
    "financeiro-bot-master/base_site/mainapp/telegram_bot/__init__.py": {},
    "financeiro-bot-master/base_site/mainapp/telegram_bot/handlers/custom_command_handler.py": {
        "CustomCommandHandle.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "commands_callback": [
                    "Callable[([], List[str])]"
                ],
                "callback": [
                    "Callable"
                ],
                "pass_update_queue": [
                    "bool",
                    "float",
                    "int",
                    "Mapping[str, Any]"
                ],
                "pass_job_queue": [
                    "bool",
                    "float",
                    "int",
                    "Mapping[str, Any]"
                ],
                "pass_user_data": [
                    "bool",
                    "float",
                    "int",
                    "Mapping[str, Any]"
                ],
                "pass_chat_data": [
                    "bool",
                    "float",
                    "int",
                    "Mapping[str, Any]"
                ]
            }
        },
        "CustomCommandHandle.check_update": {
            "name": "check_update",
            "location": 28,
            "return": [
                "None",
                "Optional[bool]",
                "dict[, ]",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "update": [
                    "dict[str, str]",
                    "str",
                    "Dict[str, str]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "CustomCommandHandle.list_commands": {
            "name": "list_commands",
            "location": 55,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "financeiro-bot-master/base_site/mainapp/telegram_bot/handlers/__init__.py": {},
    "financeiro-bot-master/base_site/nubank/admin.py": {
        "make_processed": {
            "name": "make_processed",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "modeladmin": [],
                "request": [],
                "queryset": [
                    "dict[str, typing.Any]",
                    "django.db.models.query.QuerySet",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "financeiro-bot-master/base_site/nubank/apps.py": {},
    "financeiro-bot-master/base_site/nubank/models.py": {
        "NubankBankStatement.is_credit": {
            "name": "is_credit",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NubankBankStatement.is_debit": {
            "name": "is_debit",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "financeiro-bot-master/base_site/nubank/nubank_bot.py": {
        "NubankBot.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NubankBot.set_nubank_command": {
            "name": "set_nubank_command",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "base_site.nubank.models.NubankCards"
                ]
            }
        },
        "NubankBot.get_qr_code": {
            "name": "get_qr_code",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NubankBot._login": {
            "name": "_login",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pwd": [
                    "str"
                ]
            }
        },
        "NubankBot.execute": {
            "name": "execute",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pwd": [
                    "str"
                ],
                "card": [
                    "base_site.nubank.models.NubankCards"
                ]
            }
        },
        "NubankBot._execute_bank_statements": {
            "name": "_execute_bank_statements",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "card": [
                    "base_site.nubank.models.NubankCards"
                ]
            }
        }
    },
    "financeiro-bot-master/base_site/nubank/tasks.py": {
        "process_nubank_statements": {
            "name": "process_nubank_statements",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "split_statements_and_create_records": {
            "name": "split_statements_and_create_records",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "base_site.nubank.models.NubankStatement"
                ]
            }
        },
        "_update_statement": {
            "name": "_update_statement",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "base_site.nubank.models.NubankStatement"
                ]
            }
        },
        "get_setup": {
            "name": "get_setup",
            "location": 47,
            "return": [
                "Optional[base_site.nubank.models.NubankItemSetup]"
            ],
            "arguments": {
                "description": [
                    "str"
                ],
                "name": [
                    "Optional[base_site.mainapp.models.FamilyMember]"
                ],
                "value": [
                    "Optional[int]"
                ]
            }
        },
        "get_values_and_dates": {
            "name": "get_values_and_dates",
            "location": 75,
            "return": [
                "list"
            ],
            "arguments": {
                "s": [
                    "base_site.nubank.models.NubankStatement"
                ]
            }
        },
        "create_records": {
            "name": "create_records",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "debit": [
                    "decimal.Decimal"
                ],
                "description": [
                    "str"
                ],
                "item_date_create": [
                    "str",
                    "None",
                    "datetime.date",
                    "Optional[str]"
                ],
                "item_date_executed": [
                    "str",
                    "None",
                    "datetime.date",
                    "Optional[str]"
                ],
                "setup": [
                    "base_site.nubank.models.NubankItemSetup"
                ]
            }
        },
        "calculate_record_date": {
            "name": "calculate_record_date",
            "location": 107,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "item_date": [
                    "datetime.datetime",
                    "datetime.date"
                ]
            }
        },
        "process_nubank_bank_statements": {
            "name": "process_nubank_bank_statements",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "financeiro-bot-master/base_site/nubank/__init__.py": {},
    "financeiro-bot-master/base_site/nubank/management/__init__.py": {},
    "financeiro-bot-master/base_site/nubank/management/commands/i_nubank.py": {
        "Command.handle": {
            "name": "handle",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "financeiro-bot-master/base_site/nubank/management/commands/__init__.py": {},
    "financeiro-bot-master/base_site/nubank/migrations/0001_initial.py": {},
    "financeiro-bot-master/base_site/nubank/migrations/0002_auto_20191127_2230.py": {},
    "financeiro-bot-master/base_site/nubank/migrations/0003_nubankitemsetup.py": {},
    "financeiro-bot-master/base_site/nubank/migrations/0004_auto_20191130_1430.py": {},
    "financeiro-bot-master/base_site/nubank/migrations/0005_nubankbankstatement.py": {},
    "financeiro-bot-master/base_site/nubank/migrations/0006_auto_20191207_1517.py": {},
    "financeiro-bot-master/base_site/nubank/migrations/__init__.py": {},
    "financeiro-bot-master/base_site/setup/log.py": {
        "JsonFormatter.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "format": [
                    "str"
                ]
            }
        },
        "JsonFormatter.process_log_record": {
            "name": "process_log_record",
            "location": 17,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "log_record": [
                    "dict"
                ]
            }
        }
    },
    "financeiro-bot-master/base_site/setup/__init__.py": {},
    "financeiro-bot-master/tests/helper.py": {
        "create_scenario_with_two_commands_complete_and_empty": {
            "name": "create_scenario_with_two_commands_complete_and_empty",
            "location": 9,
            "return": [
                "Tuple[(base_site.mainapp.models.Category, base_site.mainapp.models.FamilyMember, base_site.mainapp.models.TypeEntry, base_site.mainapp.models.FullCommand, base_site.mainapp.models.FullCommand)]"
            ],
            "arguments": {}
        }
    },
    "financeiro-bot-master/tests/__init__.py": {},
    "financeiro-bot-master/tests/alelo/test_tasks.py": {
        "AleloTasksTestCase.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AleloTasksTestCase.test_check_items_should_create_just_items_with_config_with_debit": {
            "name": "test_check_items_should_create_just_items_with_config_with_debit",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AleloTasksTestCase.test_check_items_should_create_just_items_with_config_with_credit": {
            "name": "test_check_items_should_create_just_items_with_config_with_credit",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "financeiro-bot-master/tests/alelo/__init__.py": {},
    "financeiro-bot-master/tests/main_app/test_command_flow.py": {
        "ModelExampleTestCase.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelExampleTestCase.test_command_no_credit": {
            "name": "test_command_no_credit",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelExampleTestCase.test_command_credit": {
            "name": "test_command_credit",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "financeiro-bot-master/tests/main_app/__init__.py": {},
    "financeiro-bot-master/tests/main_app/business/test_command_keyboard.py": {
        "CommandKeyBoardTestCase.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandKeyBoardTestCase.test_should_get_category_return_categories_on_alphabetical_order": {
            "name": "test_should_get_category_return_categories_on_alphabetical_order",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandKeyBoardTestCase.test_should_not_return_enable_false_categories": {
            "name": "test_should_not_return_enable_false_categories",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "financeiro-bot-master/tests/main_app/business/test_goals.py": {
        "GoalTestCase.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoalTestCase.test_should_return_goal": {
            "name": "test_should_return_goal",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "financeiro-bot-master/tests/main_app/business/test_register.py": {
        "RegisterClassTestCase.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegisterClassTestCase.test_should_return_true_for_all_options": {
            "name": "test_should_return_true_for_all_options",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegisterClassTestCase.test_should_return_false_for_all_options": {
            "name": "test_should_return_false_for_all_options",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "financeiro-bot-master/tests/main_app/business/test_valid_commands.py": {
        "ModelExampleTestCase.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelExampleTestCase.test_get_valid_commands": {
            "name": "test_get_valid_commands",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "financeiro-bot-master/tests/main_app/business/__init__.py": {},
    "financeiro-bot-master/tests/nubank/test_tasks.py": {
        "NubankTaskTestCase.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NubankTaskTestCase._crete_setup": {
            "name": "_crete_setup",
            "location": 31,
            "return": [
                "base_site.nubank.models.NubankItemSetup"
            ],
            "arguments": {
                "self": [],
                "desc": [
                    "str"
                ],
                "check_value": [
                    "None"
                ],
                "check_value_operator": [
                    "None"
                ]
            }
        },
        "NubankTaskTestCase.test_should_create_one_record_whit_same_month": {
            "name": "test_should_create_one_record_whit_same_month",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NubankTaskTestCase.test_should_create_one_record_whit_next_month": {
            "name": "test_should_create_one_record_whit_next_month",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NubankTaskTestCase.test_should_create_two_records_whit_first_in_same_month": {
            "name": "test_should_create_two_records_whit_first_in_same_month",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NubankTaskTestCase.test_should_create_two_records_whit_first_in_next_month": {
            "name": "test_should_create_two_records_whit_first_in_next_month",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NubankTaskTestCase.test_should_create_credit_record_from_bank": {
            "name": "test_should_create_credit_record_from_bank",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NubankTaskTestCase.test_should_create_debit_record_from_bank": {
            "name": "test_should_create_debit_record_from_bank",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NubankTaskTestCase.test_should_not_create_record_from_bank": {
            "name": "test_should_not_create_record_from_bank",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NubankTaskTestCase.test_should_return_setup_when_value_is_given": {
            "name": "test_should_return_setup_when_value_is_given",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NubankTaskTestCase.test_should_return_setup_when_setup_dont_have_check_name": {
            "name": "test_should_return_setup_when_setup_dont_have_check_name",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NubankTaskTestCase.test_should_return_setup_when_name_is_given": {
            "name": "test_should_return_setup_when_name_is_given",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NubankTaskTestCase.test_should_not_create_credit_record_from_bank": {
            "name": "test_should_not_create_credit_record_from_bank",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "financeiro-bot-master/tests/nubank/__init__.py": {}
}
{
    "find-out-master/setup.py": {},
    "find-out-master/src/__init__.py": {},
    "find-out-master/src/data/__init__.py": {},
    "find-out-master/src/data/collect/__init__.py": {},
    "find-out-master/src/data/collect/metoo/get_network_metoo.py": {
        "main": {
            "name": "main",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "path_to_creds": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "None"
                ],
                "path_to_ids": [
                    "str"
                ],
                "path_to_output": [
                    "str"
                ]
            }
        },
        "read_json": {
            "name": "read_json",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "create_twitter_api_connection": {
            "name": "create_twitter_api_connection",
            "location": 46,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "creds": [
                    "bytes",
                    "Dict",
                    "Dict[str,str]"
                ]
            }
        },
        "gather_tweets": {
            "name": "gather_tweets",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "str",
                    "List[str]",
                    "bool",
                    "List",
                    "Optional[tuple]",
                    "Tuple",
                    "None"
                ],
                "path_to_ids": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "path_to_output": [
                    "List[str]",
                    "str",
                    "Dict[str,str]",
                    "Optional[str]",
                    "None"
                ],
                "starting_id_idx": [
                    "str",
                    "int"
                ]
            }
        },
        "write_to_disk": {
            "name": "write_to_disk",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "tweets": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "save_headers": [
                    "str"
                ],
                "path_to_output": [
                    "str"
                ]
            }
        },
        "test_read_json_returns_dict": {
            "name": "test_read_json_returns_dict",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "find-out-master/src/data/collect/metoo/__init__.py": {},
    "find-out-master/src/data/preprocess/exploratory_data_analysis_helpers.py": {
        "density_of_curse_words_in_sentence": {
            "name": "density_of_curse_words_in_sentence",
            "location": 9,
            "return": [
                "Dict[(str, Union[(float, int)])]"
            ],
            "arguments": {
                "tweet": [
                    "str",
                    "bool"
                ]
            }
        },
        "density_of_curse_words_in_total_corpus": {
            "name": "density_of_curse_words_in_total_corpus",
            "location": 73,
            "return": [
                "str",
                "numpy.ndarray",
                "dict",
                "Sequence[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "dataframe": [
                    "List[list[Any]]",
                    "numpy.ndarray",
                    "numpy.array",
                    "pandas.DataFrame",
                    "numpy.matrix",
                    "List[List[Any]]"
                ],
                "dataset_title": [
                    "int"
                ]
            }
        },
        "generate_ngrams": {
            "name": "generate_ngrams",
            "location": 90,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "tweet": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "ngram_number": [
                    "bool",
                    "int"
                ]
            }
        },
        "tweet_legnth": {
            "name": "tweet_legnth",
            "location": 113,
            "return": [
                "str",
                "bool",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "int",
                    "pandas.DataFrame",
                    "numpy.ndarray"
                ]
            }
        },
        "contains_bigram": {
            "name": "contains_bigram",
            "location": 118,
            "return": [
                "Optional[_T0]"
            ],
            "arguments": {
                "ngram": [
                    "List[str]",
                    "str"
                ],
                "adjectives": [
                    "str",
                    "int",
                    "Callable"
                ],
                "nouns": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "count_pejorative_bigrams": {
            "name": "count_pejorative_bigrams",
            "location": 133,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "bigrams": [
                    "int",
                    "List[str]",
                    "List[float]",
                    "pandas.DataFrame",
                    "List[int]"
                ]
            }
        },
        "find_most_common_nouns": {
            "name": "find_most_common_nouns",
            "location": 154,
            "return": [
                "List[Tuple[(str, int)]]"
            ],
            "arguments": {
                "docs": [
                    "str",
                    "Union[int,str]",
                    "int"
                ]
            }
        },
        "part_of_speech_frequency": {
            "name": "part_of_speech_frequency",
            "location": 171,
            "return": [
                "List[Tuple[(Any, int)]]"
            ],
            "arguments": {
                "docs": [
                    "List[list[int]]",
                    "List[str]",
                    "List[List[int]]",
                    "int"
                ]
            }
        },
        "spacy_generate_bigrams": {
            "name": "spacy_generate_bigrams",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "docs": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "load_deptree_into_graph": {
            "name": "load_deptree_into_graph",
            "location": 187,
            "return": [
                "str",
                "bool",
                "pandas._FilePathOrBuffer"
            ],
            "arguments": {
                "tweet": [
                    "str",
                    "List",
                    "bool",
                    "IO[str]"
                ]
            }
        },
        "syntactic_dependency_frequency": {
            "name": "syntactic_dependency_frequency",
            "location": 195,
            "return": [
                "List[Tuple[(Any, int)]]"
            ],
            "arguments": {
                "docs": [
                    "List",
                    "Dict[str,int]",
                    "Union[int,slice]",
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "compare": {
            "name": "compare",
            "location": 201,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "function": [
                    "Type",
                    "T",
                    "networkx.MultiDiGraph"
                ],
                "misogynistic_docs": [
                    "Mapping",
                    "Mapping[str,Any]",
                    "T"
                ],
                "non_misogynistic_docs": [
                    "Type",
                    "str",
                    "networkx.MultiDiGraph"
                ]
            }
        },
        "verb_noun_syntactic_relation": {
            "name": "verb_noun_syntactic_relation",
            "location": 213,
            "return": [
                "Set[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "docs": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "noun": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "verb_noun_word_vectors": {
            "name": "verb_noun_word_vectors",
            "location": 222,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "docs": [
                    "List[int]",
                    "list",
                    "List[float]"
                ],
                "noun": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "find-out-master/src/data/preprocess/__init__.py": {},
    "find-out-master/src/data/preprocess/aws_annotated/preprocess_baselines_awsannotated.py": {
        "split_data": {
            "name": "split_data",
            "location": 8,
            "return": [
                "bool",
                "Optional[numpy.ndarray]",
                "Dict[str, Any]",
                "str",
                "int"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "find-out-master/src/data/preprocess/aws_annotated/__init__.py": {},
    "find-out-master/src/data/preprocess/dataturks/generate_nn_dataturks.py": {
        "create_dictionary": {
            "name": "create_dictionary",
            "location": 4,
            "return": [
                "Tokenizer",
                "bool",
                "float"
            ],
            "arguments": {
                "data": [
                    "str",
                    "int",
                    "bool"
                ],
                "n_words": [
                    "int",
                    "float"
                ]
            }
        },
        "split": {
            "name": "split",
            "location": 20,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "data": [
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "find-out-master/src/data/preprocess/dataturks/preprocess_baseline_dataturks.py": {
        "random_labelling": {
            "name": "random_labelling",
            "location": 6,
            "return": [
                "float"
            ],
            "arguments": {
                "y_test": [
                    "int",
                    "List[str]",
                    "Tuple[int, int]",
                    "List[Tuple[int, str, str]]",
                    "List[int]",
                    "list",
                    "List[Dict[str, Any]]",
                    "float"
                ]
            }
        }
    },
    "find-out-master/src/data/preprocess/dataturks/preprocess_translearn_hatespeech.py": {
        "download_glove": {
            "name": "download_glove",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "create_dictionary": {
            "name": "create_dictionary",
            "location": 24,
            "return": [
                "Tokenizer",
                "bool",
                "float"
            ],
            "arguments": {
                "data": [
                    "str",
                    "int",
                    "List[numpy.ndarray]",
                    "bool",
                    "utils.types.Vec3D"
                ],
                "n_words": [
                    "int",
                    "float"
                ]
            }
        },
        "split": {
            "name": "split",
            "location": 39,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "int",
                    "numpy.ndarray",
                    "pandas.DataFrame"
                ]
            }
        },
        "get_embeddings": {
            "name": "get_embeddings",
            "location": 60,
            "return": [
                "Dict[(str, np.ndarray)]"
            ],
            "arguments": {}
        },
        "get_embedding_matrix": {
            "name": "get_embedding_matrix",
            "location": 76,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "embeddings_index": [
                    "int",
                    "Dict"
                ],
                "word_index": [
                    "int",
                    "pandas.DataFrame",
                    "str"
                ],
                "max_nb_words": [
                    "int"
                ]
            }
        },
        "init_embeddings": {
            "name": "init_embeddings",
            "location": 93,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "w_index": [
                    "int",
                    "List[int]",
                    "float",
                    "str",
                    "None",
                    "Optional[int]",
                    "bool"
                ],
                "max_nb_words": [
                    "int",
                    "List[int]",
                    "float",
                    "str",
                    "None",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "get_word_index": {
            "name": "get_word_index",
            "location": 109,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "tokenizer": [
                    "int",
                    "pandas.DataFrame"
                ]
            }
        },
        "create_nn_sets": {
            "name": "create_nn_sets",
            "location": 116,
            "return": [
                "list"
            ],
            "arguments": {
                "path_to_data": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "vocab_size": [
                    "int",
                    "bytes",
                    "numpy.array"
                ]
            }
        },
        "prepare_data": {
            "name": "prepare_data",
            "location": 132,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Dict",
                    "int",
                    "Dict[str,Any]",
                    "Dict[str,str]"
                ],
                "corpus_vocabulary": [
                    "str",
                    "Type",
                    "Dict",
                    "Iterable[str]",
                    "Any",
                    "Optional[Any]",
                    "None"
                ]
            }
        }
    },
    "find-out-master/src/data/preprocess/dataturks/__init__.py": {},
    "find-out-master/src/data/preprocess/hatespeech/preprocess_rdforest_hatespeech.py": {
        "generate_tfidf_vectors": {
            "name": "generate_tfidf_vectors",
            "location": 4,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "corpus": [
                    "int",
                    "Dict[str,str]",
                    "str"
                ]
            }
        }
    },
    "find-out-master/src/data/preprocess/hatespeech/preprocess_rulesbased_hatespeech.py": {
        "generate_count_vectors": {
            "name": "generate_count_vectors",
            "location": 5,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "corpus": [
                    "int",
                    "Dict[str,str]",
                    "str"
                ]
            }
        },
        "count_corpus_word_frequency": {
            "name": "count_corpus_word_frequency",
            "location": 22,
            "return": [
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "corpus": [
                    "bytes",
                    "str",
                    "IO",
                    "IO[bytes]",
                    "slice"
                ]
            }
        }
    },
    "find-out-master/src/data/preprocess/metoo/preprocess_network_metoo.py": {
        "create_df": {
            "name": "create_df",
            "location": 6,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[List[Any]]",
                "Optional[Iterable[int]]",
                "Optional[int]"
            ],
            "arguments": {
                "dataframe": [
                    "int",
                    "dict",
                    "Tuple[Tuple[int, int]]",
                    "set",
                    "bool"
                ]
            }
        }
    },
    "find-out-master/src/evaluation/__init__.py": {},
    "find-out-master/src/evaluation/dataturks/evaluation_nn_dataturks.py": {
        "evaluate": {
            "name": "evaluate",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "scores": [
                    "int",
                    "Callable",
                    "str"
                ],
                "targets": [
                    "int",
                    "bool",
                    "T"
                ]
            }
        }
    },
    "find-out-master/src/evaluation/dataturks/__init__.py": {},
    "find-out-master/src/evaluation/hatespeech/evaluation_rulesbased_hatespeech.py": {
        "make_learning_function_matrix": {
            "name": "make_learning_function_matrix",
            "location": 7,
            "return": [
                "str",
                "int",
                "Iterable[str]",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "data": [
                    "Dict[str, torch.Tensor]"
                ],
                "labeling_functions": [
                    "Iterable[bytes]",
                    "bytes"
                ]
            }
        },
        "make_large_learning_function_matrix": {
            "name": "make_large_learning_function_matrix",
            "location": 28,
            "return": [
                "Tuple[(Any, list)]"
            ],
            "arguments": {
                "data": [
                    "Dict[str, torch.Tensor]",
                    "dict"
                ],
                "labeling_function": [
                    "Dict[str,Any]",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "get_names": {
            "name": "get_names",
            "location": 57,
            "return": [
                "list"
            ],
            "arguments": {
                "generator": [
                    "str",
                    "int",
                    "Type[Any]",
                    "IO",
                    "complex",
                    "Dict[str, Any]"
                ]
            }
        },
        "analysis_of_weak_labeling": {
            "name": "analysis_of_weak_labeling",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "Union[str, int]"
                ],
                "true_labels": [
                    "str",
                    "int",
                    "List[str]",
                    "bytes",
                    "Optional[int]",
                    "None"
                ],
                "labeling_functions": [
                    "str",
                    "bool",
                    "Type",
                    "Callable",
                    "float"
                ],
                "labeling_function_names": [
                    "List",
                    "str",
                    "Union[str,List]",
                    "int"
                ],
                "generator_labeling_functions": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[bool]",
                    "Union[str,Callable]",
                    "Optional[Callable]",
                    "int",
                    "MutableMapping"
                ]
            }
        }
    },
    "find-out-master/src/evaluation/hatespeech/evaluation_translearn_hatespeech.py": {
        "get_predictions": {
            "name": "get_predictions",
            "location": 7,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "model": [
                    "zam_repondeur.models.Lecture",
                    "Dict[str, Dict[str, Any]]",
                    "bool",
                    "Callable"
                ],
                "test": [
                    "Dict[str,dict[str,Any]]",
                    "zam_repondeur.models.Lecture",
                    "bool",
                    "Callable",
                    "Dict[str,Dict[str,Any]]"
                ]
            }
        },
        "get_f1score": {
            "name": "get_f1score",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "int",
                    "str",
                    "bool"
                ],
                "test": [
                    "int",
                    "str",
                    "bool"
                ],
                "y_test": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "evaluate_best_model": {
            "name": "evaluate_best_model",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "path_to_fine_tuned_model": [
                    "str",
                    "bool",
                    "Set[str]",
                    "Union[str,Pattern]",
                    "Pattern"
                ],
                "x_test": [
                    "bool",
                    "Dict[int,set[int]]",
                    "int",
                    "Dict[int,Set[int]]"
                ],
                "y_test": [
                    "bool",
                    "Dict[int,set[int]]",
                    "int",
                    "Dict[int,Set[int]]"
                ],
                "word_embedding_matrix": [
                    "bytes",
                    "bool",
                    "str",
                    "List[str]",
                    "int",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]"
                ],
                "vocab_size": [
                    "bytes",
                    "bool",
                    "str",
                    "List[str]",
                    "int",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]"
                ]
            }
        },
        "draw_wordcloud": {
            "name": "draw_wordcloud",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "str",
                    "Union[Dict, List]",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        }
    },
    "find-out-master/src/evaluation/hatespeech/__init__.py": {},
    "find-out-master/src/features/__init__.py": {},
    "find-out-master/src/features/hatespeech/featureeng_rulesbased_hatespeech.py": {
        "contains_slut_or_synonyms": {
            "name": "contains_slut_or_synonyms",
            "location": 8,
            "return": [
                "int"
            ],
            "arguments": {
                "tweet": [
                    "str",
                    "int",
                    "Tuple[str,str]",
                    "List",
                    "Tuple[Union[str,str]]"
                ]
            }
        },
        "contains_cunt_or_synonyms": {
            "name": "contains_cunt_or_synonyms",
            "location": 21,
            "return": [
                "int"
            ],
            "arguments": {
                "tweet": [
                    "str",
                    "int",
                    "Tuple[str,str]",
                    "List",
                    "Tuple[Union[str,str]]"
                ]
            }
        },
        "contains_dyke_or_synonyms": {
            "name": "contains_dyke_or_synonyms",
            "location": 33,
            "return": [
                "int"
            ],
            "arguments": {
                "tweet": [
                    "str",
                    "int",
                    "Tuple[str,str]",
                    "List",
                    "Tuple[Union[str,str]]"
                ]
            }
        },
        "contains_camel_toe": {
            "name": "contains_camel_toe",
            "location": 45,
            "return": [
                "int"
            ],
            "arguments": {
                "tweet": [
                    "str",
                    "int",
                    "Tuple[str,str]",
                    "List",
                    "Tuple[Union[str,str]]"
                ]
            }
        },
        "contains_feminazi": {
            "name": "contains_feminazi",
            "location": 57,
            "return": [
                "int"
            ],
            "arguments": {
                "tweet": [
                    "str",
                    "int",
                    "Tuple[str,str]",
                    "List",
                    "Tuple[Union[str,str]]"
                ]
            }
        },
        "contains_not_sexist": {
            "name": "contains_not_sexist",
            "location": 69,
            "return": [
                "int"
            ],
            "arguments": {
                "tweet": [
                    "str",
                    "int",
                    "Tuple[str,str]",
                    "List",
                    "Tuple[Union[str,str]]"
                ]
            }
        },
        "contains_not_sexist_hashtag": {
            "name": "contains_not_sexist_hashtag",
            "location": 81,
            "return": [
                "int"
            ],
            "arguments": {
                "tweet": [
                    "str",
                    "int",
                    "Tuple[str,str]",
                    "List",
                    "Tuple[Union[str,str]]"
                ]
            }
        },
        "contains_sexualized_rapeglih_vocab": {
            "name": "contains_sexualized_rapeglih_vocab",
            "location": 93,
            "return": [
                "int"
            ],
            "arguments": {
                "tweet": [
                    "str",
                    "int",
                    "Tuple[str,str]",
                    "List",
                    "Tuple[Union[str,str]]"
                ]
            }
        },
        "contains_dick_or_synonym": {
            "name": "contains_dick_or_synonym",
            "location": 107,
            "return": [
                "int"
            ],
            "arguments": {
                "tweet": [
                    "str",
                    "int",
                    "Tuple[str,str]",
                    "List",
                    "Tuple[Union[str,str]]"
                ]
            }
        },
        "contains_bitch_cunt": {
            "name": "contains_bitch_cunt",
            "location": 120,
            "return": [
                "Generator[(Tuple[(int, str)], Any, None)]"
            ],
            "arguments": {
                "tweet": [
                    "str",
                    "int",
                    "Tuple[str,str]",
                    "List",
                    "Tuple[Union[str,str]]"
                ]
            }
        },
        "contains_fuck_whore_same_sentence": {
            "name": "contains_fuck_whore_same_sentence",
            "location": 143,
            "return": [
                "Generator[(Tuple[(int, str)], Any, None)]"
            ],
            "arguments": {
                "tweet": [
                    "str",
                    "int",
                    "Tuple[str,str]",
                    "List",
                    "Tuple[Union[str,str]]"
                ]
            }
        },
        "contains_women_stereotypes": {
            "name": "contains_women_stereotypes",
            "location": 164,
            "return": [
                "Generator[(Tuple[(int, str)], Any, None)]"
            ],
            "arguments": {
                "tweet": [
                    "str",
                    "int",
                    "Tuple[str,str]",
                    "List",
                    "Tuple[Union[str,str]]"
                ]
            }
        }
    },
    "find-out-master/src/features/hatespeech/featureseng_helperfunc_hatespeech.py": {
        "combine_feature_space": {
            "name": "combine_feature_space",
            "location": 7,
            "return": [
                "Iterable[str]",
                "dict",
                "Sequence[str]"
            ],
            "arguments": {
                "wordvecs": [
                    "numpy.ndarray",
                    "int"
                ],
                "feature_to_add": [
                    "Tuple[numpy.ndarray, numpy.ndarray]",
                    "float",
                    "numpy.ndarray"
                ]
            }
        }
    },
    "find-out-master/src/features/hatespeech/featureseng_rdforest_hatespeech.py": {
        "get_length_of_tweet": {
            "name": "get_length_of_tweet",
            "location": 7,
            "return": [
                "int"
            ],
            "arguments": {
                "tweet": [
                    "List[str]",
                    "str",
                    "Callable",
                    "int"
                ]
            }
        },
        "contains_misogynstic_vocab": {
            "name": "contains_misogynstic_vocab",
            "location": 15,
            "return": [
                "int"
            ],
            "arguments": {
                "tweet": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "contains_not_sexist_but": {
            "name": "contains_not_sexist_but",
            "location": 27,
            "return": [
                "int"
            ],
            "arguments": {
                "tweet": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "find-out-master/src/features/hatespeech/__init__.py": {},
    "find-out-master/src/models/__init__.py": {},
    "find-out-master/src/models/dataturks/predict_nn_dataturks.py": {
        "predict": {
            "name": "predict",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "sentence": [
                    "str",
                    "bool",
                    "Dict[int,bool]",
                    "pandas.DataFrame"
                ],
                "path_to_model": [
                    "str",
                    "bool",
                    "Callable[[str],None]",
                    "Callable[str,None]",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ],
                "path_to_data": [
                    "str",
                    "bool"
                ],
                "text_column_name": [
                    "int",
                    "str"
                ],
                "vocab_size": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "find-out-master/src/models/dataturks/train_nn_dataturks.py": {
        "build": {
            "name": "build",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "path_to_data": [
                    "str",
                    "bool"
                ],
                "text_column_name": [
                    "str",
                    "int"
                ],
                "label_column_name": [
                    "str",
                    "List[str]",
                    "Tuple[str]"
                ],
                "hyperparameters": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "find-out-master/src/models/dataturks/__init__.py": {},
    "find-out-master/src/models/gold/fully_connected_one_hot_gold.py": {},
    "find-out-master/src/models/gold/fully_connected_pretrained_word_embeddings_glove_twitter200.py": {},
    "find-out-master/src/models/gold/fully_connected_pretrained_word_embeddings_glove_wiki100.py": {},
    "find-out-master/src/models/gold/fully_connected_trained_word_embeddings.py": {},
    "find-out-master/src/models/hatespeech/model_rdforest_hatespeech.py": {},
    "find-out-master/src/models/hatespeech/model_translearn_hatespeech.py": {
        "create_model": {
            "name": "create_model",
            "location": 6,
            "return": [
                "src.autoks.callbacks.CallbackList",
                "str"
            ],
            "arguments": {
                "word_embedding_matrix": [
                    "Optional[int]",
                    "int",
                    "Dict[str,Any]",
                    "bool",
                    "None",
                    "Dict[int,Set[int]]",
                    "Dict[int,set[int]]"
                ],
                "vocab_size": [
                    "Tuple[int]",
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "freeze_layers": {
            "name": "freeze_layers",
            "location": 31,
            "return": [
                "int",
                "str",
                "Iterable[T]",
                "src.autoks.callbacks.CallbackList",
                "Optional[str]"
            ],
            "arguments": {
                "model": [
                    "int",
                    "Iterable[T]",
                    "bool"
                ],
                "n_layer": [
                    "int",
                    "Iterable[T]",
                    "bool"
                ]
            }
        },
        "get_callbacks": {
            "name": "get_callbacks",
            "location": 37,
            "return": [
                "list"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Dict[str,str]"
                ]
            }
        },
        "train_model": {
            "name": "train_model",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "path_to_model": [
                    "bool",
                    "Dict[int,str]",
                    "Dict[str,tuple[Union[str,int,int]]]",
                    "str",
                    "int",
                    "Dict[str,Tuple[str,int,int]]",
                    "Dict[str,tuple[Union[str,str,Any]]]",
                    "Dict[str,Tuple[str,str,Any]]"
                ],
                "datasets": [
                    "str",
                    "Tuple[int]",
                    "int"
                ],
                "vocab_size": [
                    "Union[float,int]",
                    "int",
                    "float",
                    "str",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        },
        "fine_tune_model": {
            "name": "fine_tune_model",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "path_to_model": [
                    "str",
                    "bool",
                    "List[str]",
                    "Mapping"
                ],
                "path_to_fine_tuned_model": [
                    "Tuple[int,int]",
                    "str",
                    "Tuple[Union[int,int]]",
                    "int",
                    "Dict[str,str]",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]"
                ],
                "datasets": [
                    "str",
                    "bool",
                    "Dict[str,str]"
                ],
                "vocab_size": [
                    "int",
                    "str",
                    "Pattern",
                    "bool"
                ]
            }
        }
    },
    "find-out-master/src/models/stanford_hatespeech/fully_connected_one_hot_stanford.py": {},
    "find-out-master/src/utils/database_connection_handler.py": {
        "create_connection": {
            "name": "create_connection",
            "location": 5,
            "return": [
                "Optional[sqlite3.dbapi2.Connection]"
            ],
            "arguments": {
                "db_file": [
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "create_table": {
            "name": "create_table",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [
                    "str",
                    "float",
                    "Optional[object]",
                    "int",
                    "Dict[str, Optional[str]]",
                    "List[List[int]]"
                ],
                "create_table_sql": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "find-out-master/src/utils/misc.py": {
        "create_spacy_docs": {
            "name": "create_spacy_docs",
            "location": 12,
            "return": [
                "bool",
                "Dict[str, Tuple[Any, Any]]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "Optional[Union[str,Any]]"
                ],
                "label": [
                    "str",
                    "bytes",
                    "Optional[Union[str, Any]]"
                ]
            }
        },
        "save_embeddings": {
            "name": "save_embeddings",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "bool",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "word_index": [
                    "Dict[str,Any]",
                    "bool",
                    "str",
                    "List[Dict[str,Any]]",
                    "Union[int,float,complex]",
                    "pandas.DataFrame"
                ]
            }
        },
        "is_correctly_labelled": {
            "name": "is_correctly_labelled",
            "location": 51,
            "return": [
                "float"
            ],
            "arguments": {
                "scores": [
                    "int",
                    "str",
                    "Sequence[str]",
                    "Sequence",
                    "bool"
                ],
                "target_labels": [
                    "dict",
                    "List[Dict[str, Any]]",
                    "str",
                    "Union[List[str], List[Any]]"
                ]
            }
        },
        "test_is_cyber_bullying": {
            "name": "test_is_cyber_bullying",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_not_cyber_bullying": {
            "name": "test_is_not_cyber_bullying",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_boundary_test": {
            "name": "test_boundary_test",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "convert_json_to_csv": {
            "name": "convert_json_to_csv",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "read_filename": [
                    "str",
                    "pandas.DataFrame"
                ],
                "write_filename": [
                    "int",
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "find-out-master/src/utils/preprocess_text_helpers.py": {
        "contractions_unpacker": {
            "name": "contractions_unpacker",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "tweet": [
                    "str",
                    "float",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ]
            }
        },
        "tokenizer": {
            "name": "tokenizer",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "tweet": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "punctuation_cleaner": {
            "name": "punctuation_cleaner",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "tweet": [
                    "List",
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "lowercase": {
            "name": "lowercase",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "tweet": [
                    "str",
                    "Set[str]",
                    "int",
                    "List[Tuple[str,str]]"
                ]
            }
        },
        "normalizer": {
            "name": "normalizer",
            "location": 82,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tweets": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "escape_unicode": {
            "name": "escape_unicode",
            "location": 108,
            "return": [
                "list"
            ],
            "arguments": {
                "tweet": [
                    "str",
                    "bytes"
                ]
            }
        },
        "replace_spaces": {
            "name": "replace_spaces",
            "location": 114,
            "return": [
                "list"
            ],
            "arguments": {
                "tweet": [
                    "str",
                    "Callable"
                ]
            }
        },
        "remove_stopwords": {
            "name": "remove_stopwords",
            "location": 124,
            "return": [
                "str"
            ],
            "arguments": {
                "tweet": [
                    "str"
                ]
            }
        },
        "lemmatization": {
            "name": "lemmatization",
            "location": 129,
            "return": [
                "str"
            ],
            "arguments": {
                "tweet": [],
                "nlp": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "spell_correcter": {
            "name": "spell_correcter",
            "location": 138,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tokenized_tweets": [
                    "str",
                    "Tuple[int, int]",
                    "bytearray"
                ]
            }
        },
        "contractions_unpacker.replace": {
            "name": "replace",
            "location": 28,
            "return": [
                "List[Dict]",
                "str",
                "List[str]",
                "List[int]",
                "List[List[Any]]"
            ],
            "arguments": {
                "match": [
                    "str"
                ]
            }
        }
    },
    "find-out-master/src/utils/preprocess_text_pipelines.py": {
        "clean": {
            "name": "clean",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "dataframe": [
                    "str",
                    "bytes",
                    "Iterable",
                    "Dict",
                    "Optional[Tuple[str,...]]",
                    "Mapping[str,str]"
                ]
            }
        },
        "normalize": {
            "name": "normalize",
            "location": 47,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "dataframe": [
                    "str",
                    "Dict[str,Set[str]]",
                    "Dict[str,Any]",
                    "Iterable"
                ]
            }
        },
        "tokenize": {
            "name": "tokenize",
            "location": 69,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "dataframe": [
                    "str",
                    "bytes",
                    "Iterable",
                    "Dict",
                    "Optional[Tuple[str,...]]",
                    "Mapping[str,str]"
                ]
            }
        },
        "TextPipeline.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextPipeline.register_processor": {
            "name": "register_processor",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "int",
                    "Callable[,T]",
                    "List[str]",
                    "Dict",
                    "Callable"
                ]
            }
        },
        "TextPipeline.process_text": {
            "name": "process_text",
            "location": 19,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        }
    },
    "find-out-master/src/utils/stopwords_and_contractions.py": {
        "stopwords": {
            "name": "stopwords",
            "location": 1,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "contractions": {
            "name": "contractions",
            "location": 214,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {}
        }
    },
    "find-out-master/src/utils/__init__.py": {},
    "find-out-master/src/visualization/visualize_exploratory_data_analysis.py": {
        "plot_word_vectors": {
            "name": "plot_word_vectors",
            "location": 5,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "word_vectors": [
                    "int",
                    "str"
                ],
                "words": [
                    "Collection[int]",
                    "int",
                    "Collection",
                    "float",
                    "List[List[int]]",
                    "List[list[int]]"
                ],
                "ax": [
                    "int",
                    "List[float]",
                    "float"
                ]
            }
        }
    },
    "find-out-master/src/visualization/__init__.py": {},
    "find-out-master/src/visualization/dataturks/plot_nn_dataturks.py": {
        "plot": {
            "name": "plot",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "Type[T]",
                    "Type",
                    "str",
                    "List[Tuple[int,int,float]]",
                    "List[tuple[Union[int,int,float]]]"
                ]
            }
        },
        "plot_loss": {
            "name": "plot_loss",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "epochs": [
                    "str",
                    "bytearray",
                    "int",
                    "float"
                ],
                "loss": [
                    "int",
                    "Callable",
                    "str"
                ],
                "val_loss": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "plot_accuracy": {
            "name": "plot_accuracy",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "epochs": [
                    "str",
                    "bytearray",
                    "int",
                    "float"
                ],
                "acc": [
                    "int",
                    "Callable",
                    "str"
                ],
                "val_acc": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "find-out-master/tests/conftest.py": {
        "create_dataset_vocabulary": {
            "name": "create_dataset_vocabulary",
            "location": 8,
            "return": [
                "bytes",
                "str"
            ],
            "arguments": {}
        }
    },
    "find-out-master/tests/test_exploratory_data_analysis_helpers.py": {
        "test_find_most_common_nouns": {
            "name": "test_find_most_common_nouns",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_density_of_curse_words_in_sentence": {
            "name": "test_density_of_curse_words_in_sentence",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_density_of_curse_words_with_puncuation": {
            "name": "test_density_of_curse_words_with_puncuation",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_density_of_curse_words_with_plurals": {
            "name": "test_density_of_curse_words_with_plurals",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "find-out-master/tests/__init__.py": {},
    "find-out-master/tests/dataturks/test_nn_dataturks.py": {
        "test_create_dictionary_vocab_size_is_correct": {
            "name": "test_create_dictionary_vocab_size_is_correct",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "create_dataset_vocabulary": [
                    "int"
                ]
            }
        },
        "test_create_dictionary_doesnt_remove_stopwords": {
            "name": "test_create_dictionary_doesnt_remove_stopwords",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "create_dataset_vocabulary": [
                    "int",
                    "programl.models.batch_data.BatchData"
                ]
            }
        },
        "test_create_dictionary_removes_punctuation": {
            "name": "test_create_dictionary_removes_punctuation",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "create_dataset_vocabulary": [
                    "int",
                    "programl.models.batch_data.BatchData"
                ]
            }
        },
        "test_create_dictionary_removes_urls": {
            "name": "test_create_dictionary_removes_urls",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "create_dataset_vocabulary": [
                    "int",
                    "Iterable[int]"
                ]
            }
        },
        "test_create_dictionary_removes_unicode": {
            "name": "test_create_dictionary_removes_unicode",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "create_dataset_vocabulary": [
                    "int",
                    "Iterable[int]"
                ]
            }
        },
        "proportion": {
            "name": "proportion",
            "location": 34,
            "return": [
                "Dict",
                "int"
            ],
            "arguments": {
                "dataframe": [
                    "str",
                    "List[List[int]]",
                    "List[int]",
                    "int",
                    "Dict[int, bool]"
                ],
                "label": [
                    "str",
                    "List[int]",
                    "List[List[int]]",
                    "int",
                    "List[list[int]]",
                    "Dict[int,bool]"
                ]
            }
        },
        "test_split_data_is_representative_of_underlying_distribution": {
            "name": "test_split_data_is_representative_of_underlying_distribution",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_basic_negative": {
            "name": "test_basic_negative",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_basic_positive": {
            "name": "test_basic_positive",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "find-out-master/tests/metoo/test_get_network_metoo.py": {
        "test_throws_exception_if_file_not_found": {
            "name": "test_throws_exception_if_file_not_found",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_raises_exception_if_incorrect_credentials": {
            "name": "test_raises_exception_if_incorrect_credentials",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "find-out-master/tests/test_data/__init__.py": {},
    "find-out-master/tests/utils/domain_objects_test.py": {
        "create_tweets_df": {
            "name": "create_tweets_df",
            "location": 4,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "create_tokenized_tweets_df": {
            "name": "create_tokenized_tweets_df",
            "location": 19,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "create_tweets_with_labels_df": {
            "name": "create_tweets_with_labels_df",
            "location": 37,
            "return": [
                "Any"
            ],
            "arguments": {}
        }
    },
    "find-out-master/tests/utils/test_misc.py": {
        "test_create_spacy_docs_misogynistic": {
            "name": "test_create_spacy_docs_misogynistic",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "find-out-master/tests/utils/test_preprocess_text_helpers.py": {
        "test_contraction_unpacking_all": {
            "name": "test_contraction_unpacking_all",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_contraction_unpack_in_sentence": {
            "name": "test_contraction_unpack_in_sentence",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_contraction_unpack_case_agnostic": {
            "name": "test_contraction_unpack_case_agnostic",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_social_tokenizer": {
            "name": "test_social_tokenizer",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_punctuation_cleaner_removes_colon": {
            "name": "test_punctuation_cleaner_removes_colon",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_punctuation_cleaner_removes_fullstops": {
            "name": "test_punctuation_cleaner_removes_fullstops",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_punctuation_cleaner_removes_exclamation_marks": {
            "name": "test_punctuation_cleaner_removes_exclamation_marks",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_lowercase": {
            "name": "test_lowercase",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_normalize": {
            "name": "test_normalize",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_escape_a_acute": {
            "name": "test_escape_a_acute",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_escape_a_umlaut": {
            "name": "test_escape_a_umlaut",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_escape_inverted_question_mark": {
            "name": "test_escape_inverted_question_mark",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_escape_sentence": {
            "name": "test_escape_sentence",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_replace_whitespace": {
            "name": "test_replace_whitespace",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_replace_beginning": {
            "name": "test_replace_beginning",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_replace_middle": {
            "name": "test_replace_middle",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_replace_middle_twice": {
            "name": "test_replace_middle_twice",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_replace_end": {
            "name": "test_replace_end",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_replace_space": {
            "name": "test_replace_space",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_replace_two_times": {
            "name": "test_replace_two_times",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_replace_different_unicode": {
            "name": "test_replace_different_unicode",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_stopwords": {
            "name": "test_remove_stopwords",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_basic_stopwords": {
            "name": "test_remove_basic_stopwords",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_stopwords_capitals": {
            "name": "test_remove_stopwords_capitals",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "find-out-master/tests/utils/test_preprocess_text_pipelines.py": {
        "test_normalize": {
            "name": "test_normalize",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clean": {
            "name": "test_clean",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tokenize": {
            "name": "test_tokenize",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "find-out-master/tests/utils/__init__.py": {}
}
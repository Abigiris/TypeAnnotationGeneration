{
    "findings-master/script.py": {
        "init_logger": {
            "name": "init_logger",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "log": [
                    "int",
                    "str",
                    "logging.Logger",
                    "Exception",
                    "Optional[Exception]",
                    "None"
                ]
            }
        },
        "run_bash": {
            "name": "run_bash",
            "location": 100,
            "return": [
                "int",
                "List[int]",
                "Union[bytes, bytearray]",
                "bytes"
            ],
            "arguments": {
                "bash": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None",
                    "IO[str]",
                    "IO"
                ]
            }
        },
        "filter_whitelist": {
            "name": "filter_whitelist",
            "location": 106,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "ids": [
                    "str",
                    "Optional[List[str]]",
                    "Optional[str]"
                ],
                "whitelist": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "filter_blacklist": {
            "name": "filter_blacklist",
            "location": 113,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "ids": [
                    "str",
                    "Optional[List[str]]",
                    "Optional[str]"
                ],
                "blacklist": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "query_failure_ids": {
            "name": "query_failure_ids",
            "location": 120,
            "return": [
                "List[int]"
            ],
            "arguments": {}
        },
        "query_failure_data": {
            "name": "query_failure_data",
            "location": 135,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "id_": [
                    "str",
                    "Union[str,BinaryIO]",
                    "Dict",
                    "BinaryIO"
                ],
                "path": [
                    "str",
                    "Union[str,BinaryIO]",
                    "BinaryIO"
                ]
            }
        },
        "query_failures": {
            "name": "query_failures",
            "location": 145,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "query_successes_failures": {
            "name": "query_successes_failures",
            "location": 153,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {}
        },
        "build_bash_command": {
            "name": "build_bash_command",
            "location": 160,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "bash": [
                    "str",
                    "int"
                ],
                "sql": [
                    "str",
                    "int"
                ],
                "path": [
                    "Text",
                    "str",
                    "int"
                ]
            }
        },
        "read_data": {
            "name": "read_data",
            "location": 172,
            "return": [
                "Dict[str, List[int]]",
                "dict",
                "str",
                "Optional[float]",
                "bytes"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "get_result": {
            "name": "get_result",
            "location": 180,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "index": [
                    "int",
                    "str",
                    "bytes"
                ],
                "id_": [
                    "str",
                    "int"
                ],
                "count": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "get_results": {
            "name": "get_results",
            "location": 195,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {}
        },
        "print_stats": {
            "name": "print_stats",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "delete_files_in_directory": {
            "name": "delete_files_in_directory",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "directory": [
                    "str"
                ]
            }
        },
        "make_diff_dir": {
            "name": "make_diff_dir",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "diff_directory": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "make_diff_dirs": {
            "name": "make_diff_dirs",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "diff_directory": [
                    "str"
                ],
                "diff_subdirectories": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "write_diff": {
            "name": "write_diff",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "diff_directory": [
                    "str",
                    "Dict"
                ],
                "diff_subdirectory": [
                    "str",
                    "Dict"
                ],
                "id_": [
                    "str"
                ],
                "diff": [
                    "str",
                    "bytes"
                ]
            }
        },
        "format_value": {
            "name": "format_value",
            "location": 261,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "int",
                    "Optional[int]",
                    "str",
                    "None",
                    "Union[int,float]",
                    "float"
                ]
            }
        },
        "format_observation_value": {
            "name": "format_observation_value",
            "location": 265,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "observation_value": [
                    "Dict",
                    "str",
                    "Union[str,int,float]",
                    "float"
                ]
            }
        },
        "eval_value": {
            "name": "eval_value",
            "location": 275,
            "return": [
                "Dict",
                "bool",
                "str",
                "List[str]",
                "Type",
                "Dict[str,Any]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Iterable"
                ]
            }
        },
        "parse_values": {
            "name": "parse_values",
            "location": 286,
            "return": [
                "dict"
            ],
            "arguments": {
                "store": [
                    "Dict[str,Any]",
                    "Dict",
                    "Dict[str,list[Callable]]",
                    "List[str]",
                    "Dict[str,List[Callable]]",
                    "str"
                ]
            }
        },
        "get_result_fields": {
            "name": "get_result_fields",
            "location": 290,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "result": [
                    "bytes",
                    "str",
                    "Dict[str,Dict[str,str]]",
                    "Dict"
                ],
                "diff_type": [
                    "Text",
                    "str",
                    "Type[Any]"
                ]
            }
        },
        "alternate_subtractions_and_additions": {
            "name": "alternate_subtractions_and_additions",
            "location": 316,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "diff_lines": [
                    "Dict",
                    "Dict[str,Any]",
                    "float",
                    "T"
                ]
            }
        },
        "additions_and_subtractions_only": {
            "name": "additions_and_subtractions_only",
            "location": 324,
            "return": [
                "list"
            ],
            "arguments": {
                "diff_lines": [
                    "str",
                    "Dict",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "remove_insignificant": {
            "name": "remove_insignificant",
            "location": 328,
            "return": [
                "Tuple[(dict, dict)]"
            ],
            "arguments": {
                "control": [
                    "Dict"
                ],
                "observation": [
                    "Dict"
                ]
            }
        },
        "format_diff": {
            "name": "format_diff",
            "location": 339,
            "return": [
                "str"
            ],
            "arguments": {
                "diff_lines": [
                    "str"
                ],
                "diff_type": [
                    "Text",
                    "str",
                    "Type",
                    "int"
                ]
            }
        },
        "nodes_are_equal": {
            "name": "nodes_are_equal",
            "location": 347,
            "return": [
                "bool"
            ],
            "arguments": {
                "store1": [
                    "str",
                    "Set[str]",
                    "Dict[str, Any]"
                ],
                "store2": [
                    "str",
                    "Set[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "is_about_equal": {
            "name": "is_about_equal",
            "location": 351,
            "return": [
                "bool"
            ],
            "arguments": {
                "control": [
                    "str",
                    "int"
                ],
                "observation": [
                    "str",
                    "int"
                ]
            }
        },
        "is_significant": {
            "name": "is_significant",
            "location": 355,
            "return": [
                "bool"
            ],
            "arguments": {
                "control": [
                    "str"
                ],
                "observation": [
                    "str"
                ]
            }
        },
        "print_is_significant": {
            "name": "print_is_significant",
            "location": 360,
            "return": [
                "bool"
            ],
            "arguments": {
                "result": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "diff_result": {
            "name": "diff_result",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "result": [
                    "str",
                    "Dict",
                    "Dict[str,str]"
                ],
                "diff_type": [
                    "Text",
                    "str",
                    "Dict"
                ]
            }
        }
    },
    "findings-master/server.py": {
        "json_stream": {
            "name": "json_stream",
            "location": 36,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "skipkeys": [
                    "bool",
                    "Optional[Union[AbstractSetIntStr,MappingIntStrAny]]",
                    "Optional[float]",
                    "Optional[Any]",
                    "Optional[str]"
                ],
                "ensure_ascii": [
                    "bool",
                    "Optional[Union[AbstractSetIntStr,MappingIntStrAny]]",
                    "Optional[float]",
                    "Optional[Any]",
                    "Optional[str]"
                ],
                "check_circular": [
                    "bool",
                    "Optional[Union[AbstractSetIntStr,MappingIntStrAny]]",
                    "Optional[float]",
                    "Optional[Any]",
                    "Optional[str]"
                ],
                "allow_nan": [
                    "bool",
                    "Optional[Union[AbstractSetIntStr,MappingIntStrAny]]",
                    "Optional[float]",
                    "Optional[Any]",
                    "Optional[str]"
                ],
                "cls": [
                    "Optional[Union[AbstractSetIntStr,MappingIntStrAny]]",
                    "None",
                    "Optional[Any]",
                    "Any",
                    "bool",
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[float]",
                    "float"
                ],
                "indent": [
                    "Optional[Union[AbstractSetIntStr,MappingIntStrAny]]",
                    "None",
                    "bool",
                    "Optional[float]",
                    "float",
                    "Optional[Any]",
                    "Any",
                    "Optional[str]",
                    "str"
                ],
                "separators": [
                    "Optional[Union[AbstractSetIntStr,MappingIntStrAny]]",
                    "None",
                    "bool",
                    "Optional[float]",
                    "float",
                    "Optional[Any]",
                    "Any",
                    "Optional[str]",
                    "str"
                ],
                "encoding": [
                    "Text",
                    "Optional[Union[AbstractSetIntStr,MappingIntStrAny]]",
                    "Optional[float]",
                    "bool",
                    "Optional[Any]",
                    "Optional[str]"
                ],
                "default": [
                    "Optional[Union[AbstractSetIntStr,MappingIntStrAny]]",
                    "None",
                    "bool",
                    "Optional[float]",
                    "float",
                    "Optional[Any]",
                    "Any",
                    "Optional[str]",
                    "str"
                ],
                "sort_keys": [
                    "bool",
                    "Optional[Union[AbstractSetIntStr,MappingIntStrAny]]",
                    "Optional[float]",
                    "Optional[Any]",
                    "Optional[str]"
                ]
            }
        },
        "buffered": {
            "name": "buffered",
            "location": 57,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "iterable": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "buflen": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "DateAndDateTimeSupportingJSONEncoder.default": {
            "name": "default",
            "location": 25,
            "return": [
                "Optional[Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "datetime.datetime",
                    "Optional[datetime.tzinfo]",
                    "int",
                    "Optional[datetime.date]",
                    "float"
                ]
            }
        },
        "JSONTranslator.process_request": {
            "name": "process_request",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "resp": [
                    "Dict",
                    "str",
                    "falcon.Request"
                ]
            }
        },
        "JSONTranslator.process_response": {
            "name": "process_response",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "str",
                    "bytes"
                ],
                "resp": [
                    "str",
                    "bytes"
                ],
                "resource": [
                    "str",
                    "bool"
                ]
            }
        },
        "PostgresConnectionPool.process_request": {
            "name": "process_request",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "str"
                ],
                "resp": [
                    "Dict",
                    "str",
                    "falcon.Request"
                ]
            }
        },
        "PostgresConnectionPool.process_response": {
            "name": "process_response",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "str",
                    "Set[str]",
                    "bytes"
                ],
                "resp": [
                    "str",
                    "bool"
                ],
                "resource": [
                    "str",
                    "bool"
                ]
            }
        },
        "MatchResource.on_post": {
            "name": "on_post",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [],
                "resp": [
                    "str",
                    "bool",
                    "falcon.Request"
                ]
            }
        },
        "MismatchDataResource.on_post": {
            "name": "on_post",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "Mapping",
                    "int",
                    "falcon.Request",
                    "Mapping[str,List[Any]]"
                ],
                "resp": [
                    "str",
                    "bool",
                    "falcon.Request"
                ]
            }
        },
        "StreamedDict.__init__": {
            "name": "__init__",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "IO[bytes]",
                    "IO"
                ],
                "f": [
                    "Callable",
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "StreamedDict.iteritems": {
            "name": "iteritems",
            "location": 155,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamedDict.__len__": {
            "name": "__len__",
            "location": 159,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamedList.__init__": {
            "name": "__init__",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "IO[bytes]",
                    "IO"
                ],
                "f": [
                    "Callable",
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "StreamedList.__iter__": {
            "name": "__iter__",
            "location": 168,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamedList.__len__": {
            "name": "__len__",
            "location": 172,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataDownloadResource.on_get": {
            "name": "on_get",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "Dict",
                    "str",
                    "bytes"
                ],
                "resp": [
                    "str"
                ]
            }
        },
        "DataDownloadResource.on_get.date_match_record": {
            "name": "date_match_record",
            "location": 186,
            "return": [
                "Tuple[dict[Text,]]",
                "datetime.datetime",
                "str",
                "Callable"
            ],
            "arguments": {
                "record": [
                    "datetime.datetime",
                    "str",
                    "Callable"
                ]
            }
        }
    }
}
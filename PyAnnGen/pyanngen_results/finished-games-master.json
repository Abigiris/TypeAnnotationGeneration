{
    "finished-games-master/finishedgames/manage.py": {},
    "finished-games-master/finishedgames/catalogsources/apps.py": {},
    "finished-games-master/finishedgames/catalogsources/helpers.py": {
        "clean_string_field": {
            "name": "clean_string_field",
            "location": 5,
            "return": [
                "None",
                "Optional[str]",
                "Optional[Dict]",
                "str",
                "Optional[Any]",
                "Optional[List[Any]]",
                "Optional[List[str]]",
                "Optional[Union[str, Any]]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "field": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Set[str]",
                    "None",
                    "set[str]"
                ]
            }
        }
    },
    "finished-games-master/finishedgames/catalogsources/managers.py": {
        "ImportManager.import_fetched_game": {
            "name": "import_fetched_game",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "platforms": [
                    "str",
                    "int",
                    "list[I]",
                    "List[\"libkol.types.ItemQuantity\"]",
                    "bool"
                ],
                "fetched_game_id": [
                    "int",
                    "str",
                    "list[str]",
                    "None",
                    "List[str]",
                    "Optional[annofabapi.models.InspectionStatus]",
                    "annofabapi.models.TaskPhase",
                    "Optional[str]"
                ],
                "name": [
                    "Optional[str]",
                    "str",
                    "None",
                    "bool"
                ],
                "publish_date_string": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "dlc_or_expansion": [
                    "None",
                    "Optional[bool]",
                    "str",
                    "bool",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "cover": [
                    "Optional[str]",
                    "str"
                ],
                "game_id": [
                    "int",
                    "None",
                    "set[int]",
                    "Optional[int]",
                    "Set[int]",
                    "zerver.models.Realm",
                    "bool"
                ],
                "parent_game_id": [
                    "Optional[int]",
                    "None",
                    "str",
                    "int"
                ],
                "source_display_name": [
                    "None",
                    "str",
                    "Optional[str]",
                    "bool",
                    "dict[, ]",
                    "dict",
                    "Optional[zerver.models.Realm]"
                ],
                "source_url": [
                    "None",
                    "str",
                    "Optional[str]",
                    "bool",
                    "dict[, ]",
                    "dict",
                    "Optional[zerver.models.Realm]"
                ],
                "update_fields_filter": [
                    "None",
                    "Optional[str]",
                    "bool",
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "ImportManager.import_fetched_platform": {
            "name": "import_fetched_platform",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Optional[str]",
                    "None"
                ],
                "shortname": [
                    "str",
                    "int"
                ],
                "publish_date_string": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "fetched_platform_id": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]",
                    "Optional[int]",
                    "None"
                ],
                "platform_id": [
                    "int",
                    "None",
                    "order.transfer.models.OrderNumberSequenceID",
                    "str",
                    "Set[int]",
                    "set[int]"
                ],
                "update_fields_filter": [
                    "str",
                    "None",
                    "int",
                    "list",
                    "bytes",
                    "list[]",
                    "Optional[str]",
                    "set[int]",
                    "transfer.models.SiteID",
                    "Optional[Set[int]]"
                ]
            }
        },
        "ImportManager.import_fetched_games_fixing_duplicates_appending_publish_date": {
            "name": "import_fetched_games_fixing_duplicates_appending_publish_date",
            "location": 139,
            "return": [
                "list[str]",
                "List[str]",
                "str",
                "Dict[str, List[str]]",
                "Callable[[None], None]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "core_lib.core.models.Venue"
                ],
                "fetched_game_ids": [
                    "list[int]",
                    "str",
                    "List[int]",
                    "list[str]",
                    "List[str]",
                    "MutableSequence[str]",
                    "Type[object]",
                    "bool"
                ]
            }
        },
        "ImportManager.import_fetched_games_fixing_duplicates_appending_platform": {
            "name": "import_fetched_games_fixing_duplicates_appending_platform",
            "location": 180,
            "return": [
                "list[str]",
                "str",
                "List[str]",
                "Optional[str]",
                "List[app.models.Subject]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "core_lib.core.models.Venue"
                ],
                "fetched_game_ids": [
                    "list[int]",
                    "List[int]",
                    "str",
                    "bool",
                    "list[str]",
                    "List[str]"
                ]
            }
        },
        "ImportManager.import_fetched_games_linking_if_name_and_year_matches": {
            "name": "import_fetched_games_linking_if_name_and_year_matches",
            "location": 225,
            "return": [
                "list[]",
                "List[str]",
                "str",
                "Optional[Set[str]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ],
                "fetched_game_ids": [
                    "list[int]",
                    "str",
                    "List[int]",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "ImportManager.sync_fetched_games": {
            "name": "sync_fetched_games",
            "location": 272,
            "return": [
                "tuple[int]",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict[str, dict[str, typing.Any]]",
                    "Dict[str, Dict[str, Any]]",
                    "None",
                    "list[str]",
                    "Optional[str]",
                    "zerver.models.UserProfile",
                    "models.User",
                    "List[str]"
                ],
                "fetched_game_ids": [
                    "list[int]",
                    "List[int]",
                    "str",
                    "bool",
                    "list[str]",
                    "List[str]"
                ],
                "force_sync": [
                    "bool",
                    "int",
                    "str",
                    "zerver.models.Stream"
                ]
            }
        },
        "ImportManager._attempt_import": {
            "name": "_attempt_import",
            "location": 315,
            "return": [
                "tuple[typing.Union[bool,typing.Text]]",
                "List[Dict[str, Any]]",
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "List[int]",
                    "list[int]",
                    "List[str]",
                    "list[str]"
                ],
                "fetched_game": [
                    "str",
                    "int",
                    "List[int]",
                    "list[int]",
                    "List[str]",
                    "list[str]"
                ],
                "available_platform_ids": [
                    "str",
                    "int",
                    "List[int]",
                    "list[int]",
                    "List[str]",
                    "list[str]"
                ],
                "fetched_game_id": [
                    "str",
                    "int",
                    "List[int]",
                    "list[int]",
                    "List[str]",
                    "list[str]"
                ],
                "source_display_name": [
                    "str",
                    "int",
                    "List[int]",
                    "list[int]",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "finished-games-master/finishedgames/catalogsources/models.py": {
        "FetchedGame.platforms_list": {
            "name": "platforms_list",
            "location": 28,
            "return": [
                "str",
                "list",
                "List[Dict[str, Any]]",
                "frozenset",
                "Sequence[Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FetchedGame.is_sync": {
            "name": "is_sync",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FetchedGame.can_sync": {
            "name": "can_sync",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FetchedGame.mark_as_synchronized": {
            "name": "mark_as_synchronized",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FetchedGame.name_for_cover": {
            "name": "name_for_cover",
            "location": 47,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FetchedGame.save": {
            "name": "save",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FetchedGame._get_changes_hash": {
            "name": "_get_changes_hash",
            "location": 62,
            "return": [
                "str",
                "dict",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "FetchedGame._get_fields_for_hash": {
            "name": "_get_fields_for_hash",
            "location": 67,
            "return": [
                "str",
                "bool",
                "Optional[Dict[str, Any]]",
                "Optional[users.models.JustfixUser]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FetchedGame.__str__": {
            "name": "__str__",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FetchedPlatform.save": {
            "name": "save",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FetchedPlatform._get_changes_hash": {
            "name": "_get_changes_hash",
            "location": 118,
            "return": [
                "str",
                "dict",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "FetchedPlatform._get_fields_for_hash": {
            "name": "_get_fields_for_hash",
            "location": 123,
            "return": [
                "str",
                "dict",
                "Set[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FetchedPlatform.__str__": {
            "name": "__str__",
            "location": 133,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "finished-games-master/finishedgames/catalogsources/__init__.py": {},
    "finished-games-master/finishedgames/catalogsources/adapters/base_adapter.py": {
        "BaseAdapter.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stdout": [
                    "int",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "str",
                    "Union[str, int]",
                    "bool"
                ],
                "stdout_color_style": [
                    "int",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "str",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "BaseAdapter.__enter__": {
            "name": "__enter__",
            "location": 23,
            "return": [
                "BaseAdapter"
            ],
            "arguments": {
                "self": [
                    "_TBaseAdapter"
                ]
            }
        },
        "BaseAdapter.__exit__": {
            "name": "__exit__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAdapter.reset": {
            "name": "reset",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAdapter.set_offset": {
            "name": "set_offset",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int"
                ]
            }
        },
        "BaseAdapter.batch_size": {
            "name": "batch_size",
            "location": 39,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAdapter.source_id": {
            "name": "source_id",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "BaseAdapter.fetch_platforms_block": {
            "name": "fetch_platforms_block",
            "location": 48,
            "return": [
                "List[catalogsources.models.FetchedPlatform]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAdapter.fetch_games_block": {
            "name": "fetch_games_block",
            "location": 52,
            "return": [
                "List[Tuple[(catalogsources.models.FetchedGame, List[catalogsources.models.FetchedPlatform])]]"
            ],
            "arguments": {
                "self": [],
                "platform_id": [
                    "int"
                ]
            }
        },
        "BaseAdapter.has_more_items": {
            "name": "has_more_items",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAdapter.has_errored": {
            "name": "has_errored",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "finished-games-master/finishedgames/catalogsources/adapters/giant_bomb_adapter.py": {
        "rate_limit": {
            "name": "rate_limit",
            "location": 19,
            "return": [
                "Callable"
            ],
            "arguments": {
                "decorated_function": [
                    "Callable"
                ]
            }
        },
        "rate_limit.wrapper": {
            "name": "wrapper",
            "location": 20,
            "return": [
                "tuple",
                "Sequence['cirq.Qid']",
                "str"
            ],
            "arguments": {}
        },
        "GiantBombAdapter.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stdout": [
                    "str",
                    "dict",
                    "int",
                    "dict[, ]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "stdout_color_style": [
                    "typing.Callable[, ]",
                    "str",
                    "Callable",
                    "bool",
                    "list[zerver.models.Message]",
                    "int",
                    "List[zerver.models.Message]"
                ]
            }
        },
        "GiantBombAdapter.__enter__": {
            "name": "__enter__",
            "location": 77,
            "return": [
                "GiantBombAdapter"
            ],
            "arguments": {
                "self": [
                    "_TGiantBombAdapter"
                ]
            }
        },
        "GiantBombAdapter.reset": {
            "name": "reset",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GiantBombAdapter.__exit__": {
            "name": "__exit__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GiantBombAdapter.source_id": {
            "name": "source_id",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "GiantBombAdapter.set_offset": {
            "name": "set_offset",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int"
                ]
            }
        },
        "GiantBombAdapter.batch_size": {
            "name": "batch_size",
            "location": 100,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GiantBombAdapter.fetch_platforms_block": {
            "name": "fetch_platforms_block",
            "location": 104,
            "return": [
                "Sequence",
                "Mapping",
                "list[]",
                "int",
                "dict[str, str]",
                "typing.DefaultDict",
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GiantBombAdapter.fetch_games_block": {
            "name": "fetch_games_block",
            "location": 151,
            "return": [
                "list[]",
                "x509_pki.models.Certificate",
                "dict[, ]",
                "int",
                "list[tuple[typing.Union[typing.Any,typing.Any,typing.Any]]]",
                "IO",
                "dict[str, int]",
                "Iterable[T]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "platform_id": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "GiantBombAdapter.has_more_items": {
            "name": "has_more_items",
            "location": 201,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GiantBombAdapter.has_errored": {
            "name": "has_errored",
            "location": 217,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GiantBombAdapter._results_to_platform_entities": {
            "name": "_results_to_platform_entities",
            "location": 221,
            "return": [
                "List[catalogsources.models.FetchedPlatform]"
            ],
            "arguments": {
                "results": [
                    "dict"
                ]
            }
        },
        "GiantBombAdapter._results_to_game_entities": {
            "name": "_results_to_game_entities",
            "location": 242,
            "return": [
                "List[Tuple[(catalogsources.models.FetchedGame, List[catalogsources.models.FetchedPlatform])]]"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "dict"
                ]
            }
        },
        "GiantBombAdapter._fetch_cover": {
            "name": "_fetch_cover",
            "location": 287,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "GiantBombAdapter._is_placeholder_cover": {
            "name": "_is_placeholder_cover",
            "location": 324,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "requests.models.Response"
                ]
            }
        },
        "GiantBombAdapter._resize_cover": {
            "name": "_resize_cover",
            "location": 330,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "requests.models.Response"
                ],
                "filename": [
                    "str"
                ],
                "original_path": [
                    "str"
                ],
                "destination_path": [
                    "str"
                ]
            }
        },
        "GiantBombAdapter._get_platform_cached": {
            "name": "_get_platform_cached",
            "location": 366,
            "return": [
                "Optional[catalogsources.models.FetchedPlatform]"
            ],
            "arguments": {
                "self": [],
                "source_platform_id": [
                    "int"
                ]
            }
        }
    },
    "finished-games-master/finishedgames/catalogsources/adapters/helpers.py": {
        "check_rate_limit": {
            "name": "check_rate_limit",
            "location": 6,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "max_tokens": [
                    "int",
                    "Dict[str, int]",
                    "Dict[int, str]",
                    "str",
                    "float"
                ],
                "time_window": [
                    "int",
                    "float"
                ],
                "token_bucket": [
                    "Sequence[int]",
                    "int",
                    "Optional[int]"
                ],
                "last_check_timestamp": [
                    "int",
                    "Optional[int]",
                    "bool",
                    "float",
                    "Optional[float]"
                ],
                "time": [
                    "str",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "Optional[Callable]",
                    "Optional[Union['AbstractSetIntStr', 'MappingIntStrAny']]"
                ]
            }
        },
        "platforms_json_fetch_to_file": {
            "name": "platforms_json_fetch_to_file",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "json_data": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "Optional[str]",
                    "List[str]"
                ],
                "source_id": [
                    "str",
                    "int"
                ],
                "offset": [
                    "str",
                    "int"
                ]
            }
        },
        "games_json_fetch_to_file": {
            "name": "games_json_fetch_to_file",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "json_data": [
                    "dict",
                    "str"
                ],
                "source_id": [
                    "int",
                    "str"
                ],
                "platform_id": [
                    "int",
                    "str"
                ],
                "offset": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "finished-games-master/finishedgames/catalogsources/adapters/__init__.py": {},
    "finished-games-master/finishedgames/catalogsources/admin/actions.py": {
        "hide_fetched_items": {
            "name": "hide_fetched_items",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "modeladmin": [
                    "django.contrib.admin.ModelAdmin",
                    "django.db.models.query.QuerySet",
                    "django.http.HttpRequest"
                ],
                "request": [
                    "django.contrib.admin.ModelAdmin",
                    "django.db.models.query.QuerySet",
                    "django.http.HttpRequest"
                ],
                "queryset": [
                    "dict[str, typing.Any]",
                    "django.db.models.query.QuerySet",
                    "dict[, ]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "import_fetched_items": {
            "name": "import_fetched_items",
            "location": 22,
            "return": [
                "HttpResponseRedirect",
                "Dict[str, Any]",
                "str",
                "Optional[str]",
                "bool",
                "dict",
                "models.Dashboard"
            ],
            "arguments": {
                "modeladmin": [
                    "django.contrib.admin.ModelAdmin",
                    "django.db.models.query.QuerySet",
                    "django.http.HttpRequest"
                ],
                "request": [
                    "django.http.HttpRequest"
                ],
                "queryset": [
                    "django.contrib.admin.ModelAdmin",
                    "django.db.models.query.QuerySet",
                    "django.http.HttpRequest"
                ]
            }
        },
        "import_fetched_games_fixing_duplicates_appending_platform": {
            "name": "import_fetched_games_fixing_duplicates_appending_platform",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "modeladmin": [
                    "dict[, ]",
                    "dict",
                    "django.http.HttpRequest"
                ],
                "request": [
                    "django.http.HttpRequest"
                ],
                "queryset": [
                    "django.db.models.query.QuerySet",
                    "django.http.HttpRequest"
                ]
            }
        },
        "import_fetched_games_fixing_duplicates_appending_publish_date": {
            "name": "import_fetched_games_fixing_duplicates_appending_publish_date",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "modeladmin": [
                    "dict[, ]",
                    "dict",
                    "django.http.HttpRequest"
                ],
                "request": [
                    "django.http.HttpRequest"
                ],
                "queryset": [
                    "django.db.models.query.QuerySet",
                    "django.contrib.admin.ModelAdmin",
                    "django.http.HttpRequest"
                ]
            }
        },
        "import_fetched_games_link_automatically_if_name_and_year_matches": {
            "name": "import_fetched_games_link_automatically_if_name_and_year_matches",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "modeladmin": [
                    "dict[, ]",
                    "dict",
                    "django.http.HttpRequest"
                ],
                "request": [
                    "typing.Iterator",
                    "django.http.HttpRequest",
                    "Iterator"
                ],
                "queryset": [
                    "str",
                    "dict[, ]",
                    "django.db.models.query.QuerySet",
                    "dict",
                    "django.http.requesHttpRequest",
                    "django.http.HttpRequest",
                    "django.db.models.Model"
                ]
            }
        },
        "sync_fetched_games_base_fields": {
            "name": "sync_fetched_games_base_fields",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "modeladmin": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "dict"
                ],
                "request": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "typing.Iterator",
                    "dict",
                    "Iterator"
                ],
                "queryset": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "django.db.models.query.QuerySet"
                ]
            }
        },
        "selected_fetched_game_ids": {
            "name": "selected_fetched_game_ids",
            "location": 124,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ],
                "modeladmin": [
                    "bool",
                    "dict[str, typing.Any]",
                    "django.contrib.admin.ModelAdmin",
                    "bytes",
                    "Dict[str, Any]",
                    "superseconnectors.sqla.models.TableColumn",
                    "django.http.HttpRequest",
                    "zam_repondeur.models.Amendement"
                ]
            }
        }
    },
    "finished-games-master/finishedgames/catalogsources/admin/decorators.py": {
        "hyperlink_source_url": {
            "name": "hyperlink_source_url",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "model_instance": [
                    "int",
                    "str",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "models.characters.states.StatusEffect"
                ]
            }
        },
        "hyperlink_fg_game": {
            "name": "hyperlink_fg_game",
            "location": 17,
            "return": [
                "typing.Text",
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "fetched_game": [
                    "str"
                ]
            }
        },
        "hyperlink_fg_platform": {
            "name": "hyperlink_fg_platform",
            "location": 28,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "fetched_platform": [
                    "typing.Type",
                    "jobs.models.Job",
                    "int",
                    "typing.Hashable",
                    "str",
                    "type",
                    "Hashable"
                ]
            }
        }
    },
    "finished-games-master/finishedgames/catalogsources/admin/filters.py": {
        "CustomPlatformsFilter.lookups": {
            "name": "lookups",
            "location": 18,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "scrapy.http.Request"
                ],
                "model_admin": [
                    "django.contrib.admin.ModelAdmin",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "CustomPlatformsFilter.queryset": {
            "name": "queryset",
            "location": 30,
            "return": [
                "int",
                "dict[, ]",
                "models.Question",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ],
                "queryset": [
                    "int",
                    "django.db.models.query.QuerySet",
                    "tildes.models.commenComment",
                    "models.Queue"
                ]
            }
        },
        "HiddenByDefaultFilter.lookups": {
            "name": "lookups",
            "location": 41,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.contrib.admin.ModelAdmin",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ],
                "model_admin": [
                    "django.contrib.admin.ModelAdmin",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "HiddenByDefaultFilter.choices": {
            "name": "choices",
            "location": 49,
            "return": [
                "generator"
            ],
            "arguments": {
                "self": [],
                "changelist": [
                    "str",
                    "Callable",
                    "dict",
                    "Optional[int]"
                ]
            }
        },
        "HiddenByDefaultFilter.queryset": {
            "name": "queryset",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ],
                "queryset": [
                    "django.db.models.query.QuerySet",
                    "django.core.files.File",
                    "zerver.models.UserProfile",
                    "bool",
                    "str",
                    "django.http.HttpRequest"
                ]
            }
        },
        "SyncedFetchedGames.lookups": {
            "name": "lookups",
            "location": 70,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.contrib.admin.ModelAdmin",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ],
                "model_admin": [
                    "django.contrib.admin.ModelAdmin",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "SyncedFetchedGames.choices": {
            "name": "choices",
            "location": 77,
            "return": [
                "generator"
            ],
            "arguments": {
                "self": [],
                "changelist": [
                    "str",
                    "Callable",
                    "dict",
                    "Optional[int]"
                ]
            }
        },
        "SyncedFetchedGames.queryset": {
            "name": "queryset",
            "location": 85,
            "return": [
                "bool",
                "str",
                "int",
                "Tuple[float, float]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ],
                "queryset": [
                    "django.db.models.query.QuerySet",
                    "django.db.models.QuerySet",
                    "asgard.models.user.User",
                    "grouper.models.service_accounServiceAccount"
                ]
            }
        },
        "NotImportedFetchedGames.lookups": {
            "name": "lookups",
            "location": 96,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.contrib.admin.ModelAdmin",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ],
                "model_admin": [
                    "django.contrib.admin.ModelAdmin",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "NotImportedFetchedGames.choices": {
            "name": "choices",
            "location": 103,
            "return": [
                "generator"
            ],
            "arguments": {
                "self": [],
                "changelist": [
                    "str",
                    "Callable",
                    "dict",
                    "Optional[int]"
                ]
            }
        },
        "NotImportedFetchedGames.queryset": {
            "name": "queryset",
            "location": 111,
            "return": [
                "bool",
                "int",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ],
                "queryset": [
                    "django.db.models.query.QuerySet",
                    "django.http.HttpRequest",
                    "str",
                    "grouper.models.user.User",
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "NotImportedFetchedPlatforms.lookups": {
            "name": "lookups",
            "location": 122,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.contrib.admin.ModelAdmin",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ],
                "model_admin": [
                    "django.contrib.admin.ModelAdmin",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "NotImportedFetchedPlatforms.choices": {
            "name": "choices",
            "location": 129,
            "return": [
                "generator"
            ],
            "arguments": {
                "self": [],
                "changelist": [
                    "str",
                    "Callable",
                    "dict",
                    "Optional[int]"
                ]
            }
        },
        "NotImportedFetchedPlatforms.queryset": {
            "name": "queryset",
            "location": 137,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ],
                "queryset": [
                    "django.db.models.query.QuerySet",
                    "str",
                    "zerver.models.UserProfile",
                    "grouper.models.user.User",
                    "grouper.models.base.session.Session",
                    "bool"
                ]
            }
        }
    },
    "finished-games-master/finishedgames/catalogsources/admin/forms.py": {},
    "finished-games-master/finishedgames/catalogsources/admin/form_fields.py": {
        "SimpleArrayField.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_field": [
                    "List[Union[str, \"SqlFile\"]]",
                    "list[typing.Union[str,S]]"
                ]
            }
        },
        "SimpleArrayField.clean": {
            "name": "clean",
            "location": 39,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "T",
                    "typing.Sequence[]",
                    "typing.Hashable",
                    "int",
                    "Sequence",
                    "Hashable"
                ]
            }
        },
        "SimpleArrayField.prepare_value": {
            "name": "prepare_value",
            "location": 43,
            "return": [
                "str",
                "int",
                "float",
                "dict[, ]",
                "list[tuple[typing.Union[str,int]]]",
                "dict[str, typing.Any]",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "List[Tuple[str, int]]",
                    "list[tuple[typing.Union[str,int]]]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "SimpleArrayField.to_python": {
            "name": "to_python",
            "location": 48,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Union[list, str]",
                    "str",
                    "list[]",
                    "List[Tuple[str, int]]",
                    "list[tuple[typing.Union[str,int]]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "SimpleArrayField.validate": {
            "name": "validate",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "float",
                    "Union[int, float]"
                ]
            }
        },
        "SimpleArrayField.run_validators": {
            "name": "run_validators",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "bool",
                    "Optional[Dict]"
                ]
            }
        },
        "SimpleArrayField.has_changed": {
            "name": "has_changed",
            "location": 109,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "initial": [
                    "Dict[cmk.utils.type_defs.HostName, cmk.utils.type_defs.TagList]",
                    "dict[cmk.utils.type_defs.HostName, L]"
                ],
                "data": [
                    "Dict[str, Any]",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "finished-games-master/finishedgames/catalogsources/admin/models.py": {
        "FetchedGameAdmin.get_form": {
            "name": "get_form",
            "location": 91,
            "return": [
                "int",
                "Dict[str, tonga.models.structs.positioning.BasePositioning]",
                "bool",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "django.http.HttpRequest",
                    "aiohttp.web.Request"
                ],
                "obj": [
                    "None",
                    "str",
                    "django.http.HttpRequest",
                    "aiohttp.web.Request"
                ]
            }
        },
        "FetchedGameAdmin.formfield_for_manytomany": {
            "name": "formfield_for_manytomany",
            "location": 97,
            "return": [
                "float",
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "db_field": [
                    "typing.Callable[, ]",
                    "django.db.models.fields.Field",
                    "typing.Mapping",
                    "Callable",
                    "Mapping[str, List[Any]]"
                ],
                "request": [
                    "typing.Type",
                    "django.http.HttpRequest",
                    "dict[, ]",
                    "Type[Any]",
                    "dict"
                ]
            }
        },
        "FetchedGameAdmin.formfield_for_foreignkey": {
            "name": "formfield_for_foreignkey",
            "location": 107,
            "return": [
                "float",
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "db_field": [
                    "typing.Callable[, ]",
                    "django.db.models.fields.Field",
                    "Callable",
                    "django.http.HttpResponse",
                    "app.models.user.User"
                ],
                "request": [
                    "typing.Type",
                    "django.http.HttpRequest",
                    "dict[, ]",
                    "Type[Any]",
                    "dict"
                ]
            }
        },
        "FetchedGameAdmin.get_urls": {
            "name": "get_urls",
            "location": 119,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FetchedPlatformAdmin.get_urls": {
            "name": "get_urls",
            "location": 148,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "finished-games-master/finishedgames/catalogsources/admin/views.py": {
        "BaseFetchedModelAdmin.redirect_to_import_errors": {
            "name": "redirect_to_import_errors",
            "location": 25,
            "return": [
                "HttpResponseRedirect",
                "django.http.HttpResponse",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "str",
                    "Optional[str]"
                ],
                "request": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "None",
                    "dict",
                    "dict[, ]"
                ],
                "capitalized_model_name": [
                    "str"
                ],
                "model_value": [
                    "str"
                ],
                "redirect_location": [
                    "str"
                ]
            }
        },
        "FetchedGameAdminViewsMixin.import_setup_view": {
            "name": "import_setup_view",
            "location": 53,
            "return": [
                "HttpResponseRedirect",
                "Dict[str, Any]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "django.http.HttpRequest"
                ]
            }
        },
        "FetchedGameAdminViewsMixin.import_view": {
            "name": "import_view",
            "location": 223,
            "return": [
                "HttpResponseRedirect",
                "apistar.http.QueryParam",
                "Optional[Dict]",
                "apistar.http.Header",
                "dict",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "aiohttp.web.Request"
                ]
            }
        },
        "FetchedGameAdminViewsMixin.import_batch_view": {
            "name": "import_batch_view",
            "location": 260,
            "return": [
                "HttpResponseRedirect",
                "apistar.http.QueryParam",
                "Optional[Dict]",
                "apistar.http.Header",
                "dict",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "aiohttp.web.Request"
                ]
            }
        },
        "FetchedPlatformAdminViewsMixin.import_setup_view": {
            "name": "import_setup_view",
            "location": 344,
            "return": [
                "TemplateResponse",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "django.http.HttpRequest"
                ]
            }
        },
        "FetchedPlatformAdminViewsMixin.import_view": {
            "name": "import_view",
            "location": 437,
            "return": [
                "HttpResponseRedirect",
                "str",
                "models.Dashboard",
                "Dict[str, Any]",
                "Optional[bool]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "django.http.HttpRequest"
                ]
            }
        },
        "FetchedPlatformAdminViewsMixin.import_batch_view": {
            "name": "import_batch_view",
            "location": 468,
            "return": [
                "HttpResponseRedirect",
                "str",
                "models.Dashboard",
                "Dict[str, Any]",
                "Optional[bool]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "aiohttp.web.Request",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        }
    },
    "finished-games-master/finishedgames/catalogsources/admin/__init__.py": {},
    "finished-games-master/finishedgames/catalogsources/management/helpers.py": {
        "wait_if_needed": {
            "name": "wait_if_needed",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "time_elapsed": [
                    "int",
                    "float"
                ]
            }
        },
        "source_class_from_id": {
            "name": "source_class_from_id",
            "location": 14,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "source_id": [
                    "str"
                ]
            }
        },
        "TimeProfiler.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "use_performance_counter": [
                    "bool",
                    "float"
                ]
            }
        },
        "TimeProfiler.__enter__": {
            "name": "__enter__",
            "location": 26,
            "return": [
                "TimeProfiler",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeProfiler.__exit__": {
            "name": "__exit__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "finished-games-master/finishedgames/catalogsources/management/commands/fetch_games.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command._fetch_source": {
            "name": "_fetch_source",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_id": [
                    "str"
                ],
                "platforms": [
                    "List[int]"
                ],
                "initial_offset": [
                    "int"
                ]
            }
        },
        "Command._upsert_results": {
            "name": "_upsert_results",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "List[Tuple[(catalogsources.models.FetchedGame, List[catalogsources.models.FetchedPlatform])]]"
                ]
            }
        },
        "Command._source_has_plaforms": {
            "name": "_source_has_plaforms",
            "location": 137,
            "return": [
                "bool"
            ],
            "arguments": {
                "source_id": [
                    "str"
                ]
            }
        },
        "Command._display_legend": {
            "name": "_display_legend",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "finished-games-master/finishedgames/catalogsources/management/commands/fetch_platforms.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command._fetch_source": {
            "name": "_fetch_source",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_id": [
                    "str"
                ]
            }
        },
        "Command._upsert_results": {
            "name": "_upsert_results",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "List[catalogsources.models.FetchedPlatform]"
                ]
            }
        },
        "Command._display_legend": {
            "name": "_display_legend",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "finished-games-master/finishedgames/catalogsources/management/commands/import_fetched_games_without_fg_game.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.import_games": {
            "name": "import_games",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_items": [
                    "int"
                ],
                "exclude_unreleased": [
                    "bool"
                ]
            }
        }
    },
    "finished-games-master/finishedgames/catalogsources/management/commands/reset_fetched_game_covers.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "bool",
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.reset_cover": {
            "name": "reset_cover",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetched_games": [
                    "List[catalogsources.models.FetchedGame]"
                ],
                "block_size_for_feedback": [
                    "int"
                ]
            }
        }
    },
    "finished-games-master/finishedgames/catalogsources/management/commands/sanitize_game_names.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "bool",
                    "django.core.managemenbase.CommandParser",
                    "utils.parser.BinaryParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.sanitize": {
            "name": "sanitize",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "games": [
                    "List[Union[(catalogsources.models.FetchedGame, core.models.Game)]]"
                ],
                "model_name": [
                    "str"
                ],
                "block_size_for_feedback": [
                    "int"
                ]
            }
        }
    },
    "finished-games-master/finishedgames/catalogsources/management/commands/save_and_resync_fetched_games.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "bool",
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.sanitize": {
            "name": "sanitize",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetched_games": [
                    "List[catalogsources.models.FetchedGame]"
                ],
                "block_size_for_feedback": [
                    "int"
                ]
            }
        }
    },
    "finished-games-master/finishedgames/catalogsources/management/commands/sync_games.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "finished-games-master/finishedgames/catalogsources/migrations/0001_initial.py": {},
    "finished-games-master/finishedgames/catalogsources/migrations/0002_auto_20190228_1916.py": {},
    "finished-games-master/finishedgames/catalogsources/migrations/0003_auto_20190303_2035.py": {},
    "finished-games-master/finishedgames/catalogsources/migrations/0004_auto_20190309_1320.py": {},
    "finished-games-master/finishedgames/catalogsources/migrations/0005_fetchedgame_last_sync_date.py": {},
    "finished-games-master/finishedgames/catalogsources/migrations/0006_fetchedgame_cover.py": {},
    "finished-games-master/finishedgames/catalogsources/migrations/__init__.py": {},
    "finished-games-master/finishedgames/catalogsources/test/test_adapters_helpers.py": {
        "AdapterHelpersTests.test_bucket_decrements_if_tokens_available": {
            "name": "test_bucket_decrements_if_tokens_available",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdapterHelpersTests.test_bucket_doesnt_decrements_if_no_tokens_available": {
            "name": "test_bucket_doesnt_decrements_if_no_tokens_available",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdapterHelpersTests.test_when_new_token_generated_allows_to_pass_and_decrements_correctly": {
            "name": "test_when_new_token_generated_allows_to_pass_and_decrements_correctly",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "finished-games-master/finishedgames/catalogsources/test/test_helpers.py": {
        "HelpersTests.test_field_cleaning_helper_with_typical_string_field": {
            "name": "test_field_cleaning_helper_with_typical_string_field",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HelpersTests.test_field_cleaning_helper_with_null_field": {
            "name": "test_field_cleaning_helper_with_null_field",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "finished-games-master/finishedgames/catalogsources/test/test_managers.py": {
        "ManagersTests.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagersTests.test_cover_is_set_if_fetched_and_not_existing": {
            "name": "test_cover_is_set_if_fetched_and_not_existing",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "copyfile_mock": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "ManagersTests.test_cover_is_not_modified_if_exists": {
            "name": "test_cover_is_not_modified_if_exists",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "copyfile_mock": [
                    "unittesmock.MagicMock"
                ]
            }
        }
    },
    "finished-games-master/finishedgames/catalogsources/test/test_models.py": {
        "ModelsTests.test_can_be_synced": {
            "name": "test_can_be_synced",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelsTests.test_becomes_unsync_when_modified": {
            "name": "test_becomes_unsync_when_modified",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelsTests.test_keeps_synced_if_not_modified": {
            "name": "test_keeps_synced_if_not_modified",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "finished-games-master/finishedgames/catalogsources/test/__init__.py": {},
    "finished-games-master/finishedgames/core/apps.py": {},
    "finished-games-master/finishedgames/core/forms.py": {
        "PlatformForm.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlatformForm.validate_unique": {
            "name": "validate_unique",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameForm.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameForm.validate_unique": {
            "name": "validate_unique",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameForm.clean": {
            "name": "clean",
            "location": 66,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, float]",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "finished-games-master/finishedgames/core/helpers.py": {
        "generic_id": {
            "name": "generic_id",
            "location": 1,
            "return": [
                "str"
            ],
            "arguments": {
                "game_id": [
                    "str",
                    "int"
                ],
                "platform_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "finished-games-master/finishedgames/core/managers.py": {
        "CatalogManager.mark_as_no_longer_owned": {
            "name": "mark_as_no_longer_owned",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "game_id": [
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "platform_id": [
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "CatalogManager.unmark_as_no_longer_owned": {
            "name": "unmark_as_no_longer_owned",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "game_id": [
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "platform_id": [
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "CatalogManager.mark_as_finished": {
            "name": "mark_as_finished",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "game_id": [
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "platform_id": [
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "year_finished": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "CatalogManager.unmark_as_finished": {
            "name": "unmark_as_finished",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "game_id": [
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "platform_id": [
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "CatalogManager.mark_as_currently_playing": {
            "name": "mark_as_currently_playing",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "game_id": [
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "platform_id": [
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "CatalogManager.unmark_as_currently_playing": {
            "name": "unmark_as_currently_playing",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "game_id": [
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "platform_id": [
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "CatalogManager.mark_as_wishlisted": {
            "name": "mark_as_wishlisted",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[float]",
                    "float"
                ],
                "game_id": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[float]",
                    "float"
                ],
                "platform_id": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "CatalogManager.unmark_as_wishlisted": {
            "name": "unmark_as_wishlisted",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "game_id": [
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "platform_id": [
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "CatalogManager.add_to_catalog": {
            "name": "add_to_catalog",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "int",
                    "str",
                    "list[int]",
                    "List[int]",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "game_id": [
                    "int",
                    "str",
                    "list[int]",
                    "List[int]",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "platform_id": [
                    "int",
                    "str",
                    "list[int]",
                    "List[int]",
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "CatalogManager.remove_from_catalog": {
            "name": "remove_from_catalog",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "game_id": [
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "platform_id": [
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "CatalogManager.mark_as_abandoned": {
            "name": "mark_as_abandoned",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "game_id": [
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "platform_id": [
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "CatalogManager.unmark_as_abandoned": {
            "name": "unmark_as_abandoned",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "game_id": [
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "platform_id": [
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        }
    },
    "finished-games-master/finishedgames/core/models.py": {
        "Platform.__str__": {
            "name": "__str__",
            "location": 29,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.platforms_list": {
            "name": "platforms_list",
            "location": 55,
            "return": [
                "str",
                "list",
                "List[Dict[str, Any]]",
                "frozenset",
                "Sequence[Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.urls_dict": {
            "name": "urls_dict",
            "location": 59,
            "return": [
                "dict[, ]",
                "Dict[str, Any]",
                "dict",
                "int",
                "Dict[int, List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.upsert_url": {
            "name": "upsert_url",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "display_name": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ],
                "url": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "Game.save": {
            "name": "save",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.clean_name_for_search": {
            "name": "clean_name_for_search",
            "location": 82,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Exception"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "Game.__str__": {
            "name": "__str__",
            "location": 92,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUserGame.generic_id": {
            "name": "generic_id",
            "location": 107,
            "return": [
                "bool",
                "str",
                "models.seat_group.SeatGroup",
                "ticketing.models.ticket_bundle.TicketBundle",
                "Callable",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserGame.finished": {
            "name": "finished",
            "location": 125,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserGame.__str__": {
            "name": "__str__",
            "location": 128,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserGame.clean": {
            "name": "clean",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WishlistedUserGame.__str__": {
            "name": "__str__",
            "location": 144,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WishlistedUserGame.clean": {
            "name": "clean",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "finished-games-master/finishedgames/core/__init__.py": {},
    "finished-games-master/finishedgames/core/management/commands/export_catalog.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "bool",
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command._export_games": {
            "name": "_export_games",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command._export_platforms": {
            "name": "_export_platforms",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "finished-games-master/finishedgames/core/management/commands/export_user_catalog.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser",
                    "bokeh.models.Plot"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command._export_user_data": {
            "name": "_export_user_data",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "dict[, ]",
                    "dict",
                    "set[]",
                    "None",
                    "jumeaux.models.Report",
                    "set",
                    "Optional[Dict]",
                    "users.models.JustfixUser",
                    "services.shop.order.models.order_evenOrderEvent"
                ]
            }
        },
        "Command._export_user_games": {
            "name": "_export_user_games",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "None",
                    "zerver.models.Stream",
                    "django.contrib.auth.models.User",
                    "zerver.models.UserProfile",
                    "Optional[zerver.models.UserProfile]"
                ]
            }
        },
        "Command._export_user_wishlisted_games": {
            "name": "_export_user_wishlisted_games",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Command._export_filtered_games": {
            "name": "_export_filtered_games",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "list[core.models.UserKey]",
                    "List[core.models.UserKey]",
                    "list[str]",
                    "List[str]",
                    "list[U]",
                    "models.User",
                    "List[grpy.core.models.UserKey]"
                ]
            }
        },
        "Command._export_platforms": {
            "name": "_export_platforms",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command._add_user_game": {
            "name": "_add_user_game",
            "location": 151,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "game": [
                    "core.models.Game"
                ],
                "games_list": [
                    "Dict[(str, dict)]"
                ],
                "counter": [
                    "int"
                ],
                "parent_game_ids": [
                    "Set[int]"
                ]
            }
        },
        "Command._write_to_file": {
            "name": "_write_to_file",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "data": [
                    "Union[(dict, list, set)]"
                ]
            }
        }
    },
    "finished-games-master/finishedgames/core/management/commands/list_games_without_urls.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "bool",
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "finished-games-master/finishedgames/core/management/commands/recreate_game_names_for_search.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "bool",
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "finished-games-master/finishedgames/core/migrations/0001_initial.py": {},
    "finished-games-master/finishedgames/core/migrations/0002_usergame_no_longer_owned.py": {},
    "finished-games-master/finishedgames/core/migrations/0003_game_urls.py": {},
    "finished-games-master/finishedgames/core/migrations/0004_usergame_abandoned.py": {},
    "finished-games-master/finishedgames/core/migrations/0005_game_name_for_search.py": {},
    "finished-games-master/finishedgames/core/migrations/0006_game_cover.py": {},
    "finished-games-master/finishedgames/core/migrations/0007_auto_20201201_1950.py": {},
    "finished-games-master/finishedgames/core/migrations/__init__.py": {},
    "finished-games-master/finishedgames/core/test/tests_helpers.py": {
        "create_platform": {
            "name": "create_platform",
            "location": 11,
            "return": [
                "core.models.Platform"
            ],
            "arguments": {
                "name": [
                    "Optional[str]"
                ],
                "shortname": [
                    "Optional[str]"
                ]
            }
        },
        "create_game": {
            "name": "create_game",
            "location": 22,
            "return": [
                "core.models.Game"
            ],
            "arguments": {
                "name": [
                    "Optional[str]"
                ],
                "platforms": [
                    "list"
                ],
                "dlc_or_expansion": [
                    "bool"
                ],
                "parent_game": [
                    "Optional[Union[(int, core.models.Game)]]"
                ]
            }
        },
        "create_user": {
            "name": "create_user",
            "location": 40,
            "return": [
                "dict[str, str]",
                "zam_repondeur.models.Lecture",
                "str",
                "core.models.UserPreferences",
                "dict[str, dict[str, typing.Any]]",
                "None",
                "set",
                "int",
                "bool",
                "django.db.models.QuerySet"
            ],
            "arguments": {
                "username": [
                    "Optional[str]"
                ],
                "username_slug": [
                    "Optional[str]"
                ]
            }
        }
    },
    "finished-games-master/finishedgames/core/test/test_game.py": {
        "GameTests.test_can_add_new_url_to_empty_urls_list": {
            "name": "test_can_add_new_url_to_empty_urls_list",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameTests.test_can_add_new_url_to_existing_urls_list": {
            "name": "test_can_add_new_url_to_existing_urls_list",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameTests.test_updates_existing_url_with_new_data": {
            "name": "test_updates_existing_url_with_new_data",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameTests.test_stores_searchable_name_on_creation": {
            "name": "test_stores_searchable_name_on_creation",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameTests.test_updates_searchable_name_on_modification": {
            "name": "test_updates_searchable_name_on_modification",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "finished-games-master/finishedgames/core/test/test_game_form.py": {
        "GameFormTests.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameFormTests.test_game_needs_at_least_one_platform": {
            "name": "test_game_needs_at_least_one_platform",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameFormTests.test_game_name_is_unique": {
            "name": "test_game_name_is_unique",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameFormTests.test_game_name_uniqueness_is_case_insensitive": {
            "name": "test_game_name_uniqueness_is_case_insensitive",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameFormTests.test_game_dlc_needs_parent_game": {
            "name": "test_game_dlc_needs_parent_game",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameFormTests.test_game_dlc_parent_cannot_be_also_a_dlc": {
            "name": "test_game_dlc_parent_cannot_be_also_a_dlc",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameFormTests.test_game_dlc_platform_must_be_subset_of_parent_game": {
            "name": "test_game_dlc_platform_must_be_subset_of_parent_game",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "finished-games-master/finishedgames/core/test/test_managers.py": {
        "UserGameTests.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserGameTests.test_mark_user_game_as_no_longer_owner_sets_and_unsets_proper_fields": {
            "name": "test_mark_user_game_as_no_longer_owner_sets_and_unsets_proper_fields",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserGameTests.test_unmark_user_game_as_no_longer_owner_unsets_proper_field": {
            "name": "test_unmark_user_game_as_no_longer_owner_unsets_proper_field",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserGameTests.test_mark_user_game_as_finished_sets_and_unsets_proper_fields": {
            "name": "test_mark_user_game_as_finished_sets_and_unsets_proper_fields",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserGameTests.test_unmark_user_game_as_finished_unsets_proper_field": {
            "name": "test_unmark_user_game_as_finished_unsets_proper_field",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserGameTests.test_mark_user_game_as_currently_playing_sets_and_unsets_proper_fields": {
            "name": "test_mark_user_game_as_currently_playing_sets_and_unsets_proper_fields",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserGameTests.test_unmark_user_game_as_currently_playing_unsets_proper_field": {
            "name": "test_unmark_user_game_as_currently_playing_unsets_proper_field",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserGameTests.test_mark_user_game_as_wishlisted": {
            "name": "test_mark_user_game_as_wishlisted",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserGameTests.test_remove_user_game_from_wishlisted": {
            "name": "test_remove_user_game_from_wishlisted",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserGameTests.test_add_game_to_user_catalog": {
            "name": "test_add_game_to_user_catalog",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserGameTests.test_cant_add_twice_same_game_to_user_catalog": {
            "name": "test_cant_add_twice_same_game_to_user_catalog",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserGameTests.different_users_can_add_same_game_to_their_catalog": {
            "name": "different_users_can_add_same_game_to_their_catalog",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserGameTests.test_adding_game_to_catalog_removes_from_wishlisted_if_present": {
            "name": "test_adding_game_to_catalog_removes_from_wishlisted_if_present",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserGameTests.test_remove_game_from_user_catalog": {
            "name": "test_remove_game_from_user_catalog",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserGameTests.test_mark_as_abandoned_sets_and_unsets_proper_fields": {
            "name": "test_mark_as_abandoned_sets_and_unsets_proper_fields",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserGameTests.test_unmark_as_abandoned_sets_proper_field": {
            "name": "test_unmark_as_abandoned_sets_proper_field",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "finished-games-master/finishedgames/core/test/test_platform_form.py": {
        "PlatformFormTests.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlatformFormTests.test_platform_names_are_unique": {
            "name": "test_platform_names_are_unique",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlatformFormTests.test_platform_name_uniqueness_is_case_insensitive": {
            "name": "test_platform_name_uniqueness_is_case_insensitive",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "finished-games-master/finishedgames/core/test/test_user_game.py": {
        "UserGameTests.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserGameTests.test_same_user_cannot_own_same_title_multiple_times": {
            "name": "test_same_user_cannot_own_same_title_multiple_times",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserGameTests.test_different_users_can_own_same_title": {
            "name": "test_different_users_can_own_same_title",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserGameTests.test_can_own_same_title_on_different_platforms": {
            "name": "test_can_own_same_title_on_different_platforms",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserGameTests.test_cannot_own_game_on_unavailable_platform": {
            "name": "test_cannot_own_game_on_unavailable_platform",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserGameTests.test_object_equality": {
            "name": "test_object_equality",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "finished-games-master/finishedgames/core/test/test_wishlisted_user_game.py": {
        "WishlistedUserGameTests.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WishlistedUserGameTests.test_same_user_cannot_wishlist_same_title_multiple_times": {
            "name": "test_same_user_cannot_wishlist_same_title_multiple_times",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WishlistedUserGameTests.test_different_users_can_wishlist_same_title": {
            "name": "test_different_users_can_wishlist_same_title",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WishlistedUserGameTests.test_can_wishlist_same_title_on_different_platforms": {
            "name": "test_can_wishlist_same_title_on_different_platforms",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WishlistedUserGameTests.test_cannot_wishlist_game_on_unavailable_platform": {
            "name": "test_cannot_wishlist_game_on_unavailable_platform",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "finished-games-master/finishedgames/core/test/__init__.py": {},
    "finished-games-master/finishedgames/finishedgames/constants.py": {},
    "finished-games-master/finishedgames/finishedgames/urls.py": {},
    "finished-games-master/finishedgames/finishedgames/wsgi.py": {},
    "finished-games-master/finishedgames/finishedgames/__init__.py": {},
    "finished-games-master/finishedgames/finishedgames/settings/base.py": {},
    "finished-games-master/finishedgames/finishedgames/settings/dev.py": {},
    "finished-games-master/finishedgames/finishedgames/settings/test.py": {},
    "finished-games-master/finishedgames/test/test_linters.py": {
        "test_mypy_compliance": {
            "name": "test_mypy_compliance",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "finished-games-master/finishedgames/web/admin.py": {
        "CustomUserAdmin.get_form": {
            "name": "get_form",
            "location": 26,
            "return": [
                "str",
                "bool",
                "dict[str, typing.Any]",
                "float",
                "typing.Type",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ],
                "obj": [
                    "django.http.HttpRequest",
                    "int",
                    "None"
                ]
            }
        },
        "UserGameAdmin.get_ordering": {
            "name": "get_ordering",
            "location": 61,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, str]",
                    "django.http.HttpRequest",
                    "dict[, ]",
                    "django.http.requesHttpRequest",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "UserGameAdmin.get_form": {
            "name": "get_form",
            "location": 64,
            "return": [
                "str",
                "bool",
                "int",
                "list[tuple[typing.Union[str,typing.Any]]]",
                "float",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ],
                "obj": [
                    "None",
                    "django.http.HttpRequest",
                    "dict[, ]",
                    "dict",
                    "googleapiclienhttp.HttpRequest"
                ]
            }
        },
        "PlatformAdmin.get_ordering": {
            "name": "get_ordering",
            "location": 75,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, str]",
                    "django.http.HttpRequest",
                    "dict[, ]",
                    "django.http.requesHttpRequest",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "PlatformAdmin.platform_url": {
            "name": "platform_url",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "FGModelAdmin"
                ]
            }
        },
        "GameAdmin.game_url": {
            "name": "game_url",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "FGModelAdmin"
                ]
            }
        },
        "GameAdmin.urls_list": {
            "name": "urls_list",
            "location": 113,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "FGModelAdmin"
                ]
            }
        },
        "GameAdmin.get_ordering": {
            "name": "get_ordering",
            "location": 125,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, str]",
                    "django.http.HttpRequest",
                    "dict[, ]",
                    "django.http.requesHttpRequest",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "WishlistedUserGameAdmin.get_ordering": {
            "name": "get_ordering",
            "location": 135,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, str]",
                    "django.http.HttpRequest",
                    "dict[, ]",
                    "django.http.requesHttpRequest",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "WishlistedUserGameAdmin.get_form": {
            "name": "get_form",
            "location": 138,
            "return": [
                "str",
                "bool",
                "int",
                "list[tuple[typing.Union[str,typing.Any]]]",
                "float",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ],
                "obj": [
                    "None",
                    "django.http.HttpRequest",
                    "dict[, ]",
                    "dict",
                    "googleapiclienhttp.HttpRequest"
                ]
            }
        }
    },
    "finished-games-master/finishedgames/web/apps.py": {},
    "finished-games-master/finishedgames/web/constants.py": {},
    "finished-games-master/finishedgames/web/decorators.py": {
        "viewed_user": {
            "name": "viewed_user",
            "location": 10,
            "return": [
                "int",
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "wrapped_function": [
                    "Callable",
                    "typing.Callable[, ]",
                    "bool",
                    "ClassVar",
                    "typing.ClassVar",
                    "Exception",
                    "list",
                    "list[]",
                    "List[str]",
                    "list[str]",
                    "type",
                    "typing.Type"
                ]
            }
        },
        "authenticated_user_games": {
            "name": "authenticated_user_games",
            "location": 21,
            "return": [
                "dict"
            ],
            "arguments": {
                "wrapped_function": [
                    "typing.Callable[, ]",
                    "bool",
                    "Callable",
                    "None",
                    "Optional[Callable]",
                    "list[str]",
                    "List[str]",
                    "Callable[..., T]"
                ]
            }
        },
        "viewed_user.wrapper": {
            "name": "wrapper",
            "location": 11,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "authenticated_user_games.wrapper": {
            "name": "wrapper",
            "location": 22,
            "return": [
                "Sequence['cirq.Qid']",
                "bool",
                "float",
                "int",
                "models.scenes.scenes_base.Resolution"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile"
                ]
            }
        }
    },
    "finished-games-master/finishedgames/web/forms.py": {},
    "finished-games-master/finishedgames/web/urls.py": {},
    "finished-games-master/finishedgames/web/__init__.py": {},
    "finished-games-master/finishedgames/web/migrations/__init__.py": {},
    "finished-games-master/finishedgames/web/templatetags/web_extras.py": {
        "generic_id": {
            "name": "generic_id",
            "location": 16,
            "return": [
                "bool",
                "str",
                "models.seat_group.SeatGroup",
                "ticketing.models.ticket_bundle.TicketBundle",
                "Callable",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "game_id": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "platform_id": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "render_actions": {
            "name": "render_actions",
            "location": 21,
            "return": [
                "dict[typing.Text, typing.Union[str,None,int]]",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "user": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "game_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "platform_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "authenticated_user_catalog": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "field_filters_headers": {
            "name": "field_filters_headers",
            "location": 35,
            "return": [
                "dict[typing.Text, typing.Union[dict[str, typing.Any],list[],int,list[str],None]]",
                "dict",
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "Dict[int, Dict[str, Any]]",
                "Dict[str, Dict]"
            ],
            "arguments": {
                "request": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "int",
                    "list[]",
                    "list",
                    "list[str]",
                    "None",
                    "Union[server.models.User, int]",
                    "Optional[List[str]]",
                    "List[str]",
                    "Iterable[Iterable[str]]"
                ],
                "sort_by": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "int",
                    "list[]",
                    "list",
                    "list[str]",
                    "None",
                    "Union[server.models.User, int]",
                    "Optional[List[str]]",
                    "List[str]",
                    "Iterable[Iterable[str]]"
                ],
                "exclude": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "int",
                    "list[]",
                    "list",
                    "list[str]",
                    "None",
                    "Union[server.models.User, int]",
                    "Optional[List[str]]",
                    "List[str]",
                    "Iterable[Iterable[str]]"
                ],
                "enabled_fields": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "int",
                    "list[]",
                    "list",
                    "list[str]",
                    "None",
                    "Union[server.models.User, int]",
                    "Optional[List[str]]",
                    "List[str]",
                    "Iterable[Iterable[str]]"
                ]
            }
        },
        "status_filters_headers": {
            "name": "status_filters_headers",
            "location": 47,
            "return": [
                "dict[typing.Text, typing.Union[dict[str, typing.Any],dict[int, list[typing.Any]],str]]",
                "Dict[int, Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "request": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[int, List[Any]]",
                    "dict[int, list[typing.Any]]"
                ],
                "sort_by": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[int, List[Any]]",
                    "dict[int, list[typing.Any]]"
                ],
                "exclude": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[int, List[Any]]",
                    "dict[int, list[typing.Any]]"
                ],
                "enabled_statuses": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[int, List[Any]]",
                    "dict[int, list[typing.Any]]"
                ]
            }
        },
        "status_filters_row": {
            "name": "status_filters_row",
            "location": 58,
            "return": [
                "zerver.models.UserProfile",
                "dict[typing.Text, typing.Union[bool,None]]"
            ],
            "arguments": {
                "user_game": [
                    "bool",
                    "None",
                    "Optional[zerver.models.UserProfile]",
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "slowbro.core.user_message.UserMessage",
                    "zerver.models.UserProfile",
                    "daylighdb.models.User"
                ],
                "enabled_statuses": [
                    "bool",
                    "None",
                    "Optional[zerver.models.UserProfile]",
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "slowbro.core.user_message.UserMessage",
                    "zerver.models.UserProfile",
                    "daylighdb.models.User"
                ]
            }
        },
        "send_action_data": {
            "name": "send_action_data",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "action_id": [
                    "int",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "item_generic_id": [
                    "int",
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "query_update": {
            "name": "query_update",
            "location": 73,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "aiohttp.web.Request",
                    "scrapy.http.Request"
                ]
            }
        },
        "_build_action_data": {
            "name": "_build_action_data",
            "location": 85,
            "return": [
                "str",
                "int",
                "Optional[cmk.utils.type_defs.HostAddress]",
                "salon.models.Stylist",
                "x509_pki.models.Certificate",
                "bool"
            ],
            "arguments": {
                "action_id": [
                    "str",
                    "int",
                    "Tuple[str]",
                    "tuple[str]"
                ]
            }
        }
    },
    "finished-games-master/finishedgames/web/templatetags/__init__.py": {},
    "finished-games-master/finishedgames/web/views/base.py": {
        "index": {
            "name": "index",
            "location": 7,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "help": {
            "name": "help",
            "location": 30,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "typing.Callable[, ]",
                    "django.http.HttpRequest",
                    "Callable"
                ]
            }
        }
    },
    "finished-games-master/finishedgames/web/views/game.py": {
        "games": {
            "name": "games",
            "location": 64,
            "return": [
                "dict",
                "IO[bytes]",
                "rotkehlchen.db.dbhandler.DBHandler"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "aiohttp.web.Request"
                ]
            }
        },
        "GameDetailsView.get": {
            "name": "get",
            "location": 21,
            "return": [
                "str",
                "dict",
                "Optional[Dict]",
                "tartare.core.models.Job",
                "List[List[int]]",
                "bool",
                "Optional[Exception]",
                "starfish.core.imagestack.parser.TileData"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ],
                "game_id": [
                    "str",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "GamesByPlatformView.get": {
            "name": "get",
            "location": 45,
            "return": [
                "str",
                "dict",
                "Optional[Dict]",
                "tartare.core.models.Job",
                "List[List[int]]",
                "bool",
                "Optional[Exception]",
                "starfish.core.imagestack.parser.TileData"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "preacher.core.requesRequest",
                    "dict"
                ],
                "platform_id": [
                    "int",
                    "str",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "GameSearch.get": {
            "name": "get",
            "location": 77,
            "return": [
                "HttpResponseRedirect",
                "Dict[str, Any]",
                "django.http.HttpResponse",
                "Optional[bytes]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "django.http.HttpRequest"
                ]
            }
        },
        "GamesStartingWithCharacterView.get": {
            "name": "get",
            "location": 86,
            "return": [
                "HttpResponseRedirect",
                "Dict[str, Any]",
                "django.http.HttpResponse",
                "Optional[bytes]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, typing.Any]",
                    "aiohttp.web.Request",
                    "django.http.HttpRequest",
                    "Dict[str, Any]"
                ],
                "character": [
                    "str"
                ]
            }
        }
    },
    "finished-games-master/finishedgames/web/views/platform.py": {
        "platform_details": {
            "name": "platform_details",
            "location": 7,
            "return": [
                "int",
                "str",
                "rotkehlchen.db.dbhandler.DBHandler"
            ],
            "arguments": {
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest"
                ],
                "platform_id": [
                    "int"
                ]
            }
        },
        "platforms": {
            "name": "platforms",
            "location": 15,
            "return": [
                "int",
                "str",
                "rotkehlchen.db.dbhandler.DBHandler"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "finished-games-master/finishedgames/web/views/search.py": {
        "GameAutocompleteView.get_queryset": {
            "name": "get_queryset",
            "location": 11,
            "return": [
                "None",
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlatformAutocompleteView.get_result_label": {
            "name": "get_result_label",
            "location": 22,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "list",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "core.models.Platform"
                ]
            }
        },
        "PlatformAutocompleteView.get_selected_result_label": {
            "name": "get_selected_result_label",
            "location": 25,
            "return": [
                "Dict[str, Any]",
                "dict",
                "list",
                "Type",
                "int"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "core.models.Platform"
                ]
            }
        },
        "PlatformAutocompleteView.get_queryset": {
            "name": "get_queryset",
            "location": 28,
            "return": [
                "Optional[int]",
                "None",
                "str",
                "Optional[str]",
                "dict[, ]",
                "bool",
                "list[typing.Union[typing.Any,typing.Any,typing.Any,typing.Any]]",
                "dict",
                "typing.Type"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "finished-games-master/finishedgames/web/views/user.py": {
        "progress_bar_class": {
            "name": "progress_bar_class",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "progress": [
                    "int"
                ]
            }
        },
        "filter_games": {
            "name": "filter_games",
            "location": 33,
            "return": [
                "Tuple[(Any, str, List[str])]"
            ],
            "arguments": {
                "user_games": [
                    "int",
                    "dict[int, int]",
                    "Dict[int, int]",
                    "zerver.models.UserProfile"
                ],
                "request": [
                    "str",
                    "django.http.HttpRequest",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "dict[, ]",
                    "Optional[dict]",
                    "None"
                ]
            }
        },
        "filter_and_exclude_games": {
            "name": "filter_and_exclude_games",
            "location": 45,
            "return": [
                "Tuple[(Any, Any, str, str)]"
            ],
            "arguments": {
                "user_games": [
                    "int",
                    "django.db.models.query.QuerySet",
                    "grouper.models.user.User",
                    "core.models.User",
                    "django.http.HttpRequest",
                    "ajapaik.ajapaik_face_recognition.models.FaceRecognitionRectangle",
                    "grouper.models.base.session.Session"
                ],
                "request": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "dict[str, typing.Any]",
                    "django.db.models.query.QuerySet",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "_filter_and_exclude_games": {
            "name": "_filter_and_exclude_games",
            "location": 62,
            "return": [
                "Tuple[(Any, Any, str, str)]"
            ],
            "arguments": {
                "user_games": [
                    "django.db.models.query.QuerySet",
                    "metrics_backend.utils.Address",
                    "django.http.HttpRequest",
                    "core.models.User"
                ],
                "request": [
                    "django.http.HttpRequest",
                    "viewer.models.Archive.QuerySet"
                ]
            }
        },
        "calculate_progress_counters": {
            "name": "calculate_progress_counters",
            "location": 85,
            "return": [
                "Tuple[(int, int, int, int, int, int, int)]"
            ],
            "arguments": {
                "unfiltered_user_games": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "users": {
            "name": "users",
            "location": 109,
            "return": [
                "bool",
                "int",
                "Optional[Dict]",
                "core.models.Recipe"
            ],
            "arguments": {
                "request": [
                    "dict[str, typing.Any]",
                    "aiohttp.web.Request",
                    "Dict[str, Any]",
                    "django.http.HttpRequest"
                ]
            }
        },
        "catalog": {
            "name": "catalog",
            "location": 124,
            "return": [
                "bytes",
                "dict",
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "aiohttp.web.Request"
                ],
                "username": [
                    "str"
                ]
            }
        },
        "platforms": {
            "name": "platforms",
            "location": 170,
            "return": [
                "bytes",
                "dict",
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ],
                "username": [
                    "str"
                ]
            }
        },
        "Options.post": {
            "name": "post",
            "location": 189,
            "return": [
                "HttpResponse",
                "dict",
                "List[str]",
                "int",
                "Optional[Dict[str, Any]]",
                "bool",
                "str",
                "Dict[str, str]",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "aiohttp.web.Request"
                ],
                "username": [
                    "str"
                ]
            }
        },
        "NoLongerOwnedGamesView.post": {
            "name": "post",
            "location": 208,
            "return": [
                "HttpResponse",
                "trezor.utils.Writer",
                "models.Dashboard",
                "bool",
                "Optional[Dict]",
                "dict",
                "Dict[int, dict]",
                "str",
                "List[Dict[str, Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "aiohttp.web.Request",
                    "django.http.HttpRequest"
                ],
                "username": [
                    "str"
                ]
            }
        },
        "GamesView.get": {
            "name": "get",
            "location": 227,
            "return": [
                "int",
                "Dict[str, str]",
                "bytes",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "grouper.models.user.User",
                    "grouper.models.base.session.Session"
                ],
                "username": [
                    "str"
                ]
            }
        },
        "GamesView.post": {
            "name": "post",
            "location": 278,
            "return": [
                "HttpResponse",
                "trezor.utils.Writer",
                "models.Dashboard",
                "bool",
                "Optional[Dict]",
                "dict",
                "Dict[int, dict]",
                "str",
                "List[Dict[str, Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "django.http.HttpRequest",
                    "aiohttp.web.Request"
                ],
                "username": [
                    "str"
                ]
            }
        },
        "GamesByPlatformView.get": {
            "name": "get",
            "location": 298,
            "return": [
                "int",
                "Dict[str, str]",
                "bytes",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile",
                    "zerver.models.Stream",
                    "grouper.models.service_accounServiceAccount"
                ],
                "username": [
                    "str"
                ],
                "platform_id": [
                    "int",
                    "str",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "GamesPendingView.get": {
            "name": "get",
            "location": 355,
            "return": [
                "Dict[str, Any]",
                "int",
                "core.types.FBAccessToken",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "apistar.http.Request",
                    "django.http.HttpRequest"
                ],
                "username": [
                    "str"
                ]
            }
        },
        "GamesFinishedView.get": {
            "name": "get",
            "location": 413,
            "return": [
                "Dict[str, Any]",
                "int",
                "core.types.FBAccessToken",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "apistar.http.Request",
                    "django.http.HttpRequest"
                ],
                "username": [
                    "str"
                ]
            }
        },
        "GamesFinishedView.post": {
            "name": "post",
            "location": 463,
            "return": [
                "HttpResponse",
                "trezor.utils.Writer",
                "models.Dashboard",
                "bool",
                "Optional[Dict]",
                "dict",
                "Dict[int, dict]",
                "str",
                "List[Dict[str, Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "aiohttp.web.Request",
                    "django.http.HttpRequest"
                ],
                "username": [
                    "str"
                ]
            }
        },
        "GamesAbandonedView.get": {
            "name": "get",
            "location": 485,
            "return": [
                "Dict[str, Any]",
                "int",
                "core.types.FBAccessToken",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, typing.Any]",
                    "aiohttp.web.Request",
                    "Dict[str, Any]",
                    "models.Workspace"
                ],
                "username": [
                    "str"
                ]
            }
        },
        "GamesAbandonedView.post": {
            "name": "post",
            "location": 534,
            "return": [
                "HttpResponse",
                "trezor.utils.Writer",
                "models.Dashboard",
                "bool",
                "Optional[Dict]",
                "dict",
                "Dict[int, dict]",
                "str",
                "List[Dict[str, Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "aiohttp.web.Request",
                    "django.http.HttpRequest"
                ],
                "username": [
                    "str"
                ]
            }
        },
        "GamesCurrentlyPlayingView.get": {
            "name": "get",
            "location": 553,
            "return": [
                "int",
                "Dict[str, Any]",
                "bytes",
                "core.types.FBAccessToken",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "apistar.http.Request",
                    "aiohttp.web.Request",
                    "django.http.HttpRequest"
                ],
                "username": [
                    "str"
                ]
            }
        },
        "GamesCurrentlyPlayingView.post": {
            "name": "post",
            "location": 603,
            "return": [
                "HttpResponse",
                "trezor.utils.Writer",
                "models.Dashboard",
                "bool",
                "Optional[Dict]",
                "dict",
                "Dict[int, dict]",
                "str",
                "List[Dict[str, Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "aiohttp.web.Request"
                ],
                "username": [
                    "str"
                ]
            }
        },
        "GamesWishlistedView.get": {
            "name": "get",
            "location": 622,
            "return": [
                "Dict[str, Any]",
                "int",
                "core.types.FBAccessToken",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, typing.Any]",
                    "aiohttp.web.Request",
                    "Dict[str, Any]",
                    "models.Workspace"
                ],
                "username": [
                    "str"
                ]
            }
        },
        "GamesWishlistedView.post": {
            "name": "post",
            "location": 671,
            "return": [
                "HttpResponse",
                "trezor.utils.Writer",
                "models.Dashboard",
                "bool",
                "Optional[Dict]",
                "dict",
                "Dict[int, dict]",
                "str",
                "List[Dict[str, Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "aiohttp.web.Request",
                    "django.http.HttpRequest"
                ],
                "username": [
                    "str"
                ]
            }
        },
        "PlatformFilterSearch.get": {
            "name": "get",
            "location": 689,
            "return": [
                "HttpResponseRedirect",
                "django.http.HttpResponse",
                "bool",
                "Dict[str, Any]",
                "Dict[str, Dict[str, str]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "http.MITMRequest",
                    "aiohttp.web.Request",
                    "django.http.HttpRequest",
                    "models.Workspace"
                ],
                "username": [
                    "str"
                ]
            }
        }
    },
    "finished-games-master/finishedgames/web/views/__init__.py": {}
}
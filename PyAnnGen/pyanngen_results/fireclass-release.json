{
    "fireclass-release/sample.py": {},
    "fireclass-release/setup.py": {
        "_get_long_description": {
            "name": "_get_long_description",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_project_info": {
            "name": "get_project_info",
            "location": 14,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {}
        }
    },
    "fireclass-release/tasks.py": {
        "test": {
            "name": "test",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        }
    },
    "fireclass-release/fireclass/document.py": {
        "initialize_with_firestore_client": {
            "name": "initialize_with_firestore_client",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "Callable"
                ]
            }
        },
        "_discard_firestore_client": {
            "name": "_discard_firestore_client",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_get_firestore_client": {
            "name": "_get_firestore_client",
            "location": 31,
            "return": [
                "float",
                "None"
            ],
            "arguments": {}
        },
        "_validate_and_convert_value_to_firestore": {
            "name": "_validate_and_convert_value_to_firestore",
            "location": 165,
            "return": [
                "str",
                "Type",
                "Type[T]",
                "Dict[str,Any]",
                "List[str]",
                "Dict",
                "Tuple",
                "Dict[Tuple[str,str],Tuple[float,float]]",
                "int"
            ],
            "arguments": {
                "document_cls": [
                    "str",
                    "Dict[str, int]",
                    "Optional[Callable[[None], None]]",
                    "int"
                ],
                "field_path": [
                    "str",
                    "Dict[str,int]",
                    "int",
                    "Optional[Callable[[None],None]]",
                    "Callable[None,None]",
                    "None"
                ],
                "value": [
                    "Set[str]",
                    "Tuple[object]",
                    "Type",
                    "str",
                    "Type[Any]"
                ]
            }
        },
        "_DocumentQuery.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "document_cls": [
                    "List",
                    "int",
                    "Iterable"
                ],
                "firestore_query": [
                    "int",
                    "Dict[int,dict]",
                    "Optional[int]",
                    "Type",
                    "None",
                    "Tuple"
                ]
            }
        },
        "_DocumentQuery.limit": {
            "name": "limit",
            "location": 63,
            "return": [
                "_DocumentQuery"
            ],
            "arguments": {
                "self": [
                    "_T_DocumentQuery@@_DocumentQuery@@"
                ],
                "count": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "_DocumentQuery.stream": {
            "name": "stream",
            "location": 67,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "transaction": [
                    "int",
                    "None",
                    "IO[bytes]",
                    "IO"
                ]
            }
        },
        "_DocumentQuery.where": {
            "name": "where",
            "location": 71,
            "return": [
                "_DocumentQuery"
            ],
            "arguments": {
                "self": [
                    "_T_DocumentQuery@@_DocumentQuery@@"
                ],
                "field_path": [
                    "str",
                    "bool",
                    "Callable[[T],bool]",
                    "Callable[T,bool]",
                    "Optional[int]",
                    "None"
                ],
                "op_string": [
                    "str",
                    "Set[str]",
                    "Pattern",
                    "int"
                ],
                "value": [
                    "str",
                    "bytes",
                    "int",
                    "List[str]"
                ]
            }
        },
        "Document.__post_init__": {
            "name": "__post_init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Document.id": {
            "name": "id",
            "location": 84,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Document.create": {
            "name": "create",
            "location": 87,
            "return": [
                "bool",
                "Union[int, float, complex]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "document_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "Document.update": {
            "name": "update",
            "location": 96,
            "return": [
                "Dict",
                "Mapping[Any,Any]",
                "int",
                "bool",
                "str",
                "List[Dict[str,Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Document.delete": {
            "name": "delete",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Document._find_field": {
            "name": "_find_field",
            "location": 111,
            "return": [
                "dataclasses.Field"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None"
                ],
                "field_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Document._from_firestore_document": {
            "name": "_from_firestore_document",
            "location": 123,
            "return": [
                "Document"
            ],
            "arguments": {
                "cls": [
                    "Type[_TDocument]"
                ],
                "firestore_document": [
                    "Dict[str,Any]",
                    "str",
                    "List[Dict[str,Any]]",
                    "Callable",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "Document._collection": {
            "name": "_collection",
            "location": 138,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str,object]",
                    "eth.abc.ReceiptAPI",
                    "None",
                    "Union[None,str]"
                ]
            }
        },
        "Document.get_document": {
            "name": "get_document",
            "location": 142,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "document_id": [
                    "str"
                ]
            }
        },
        "Document.delete_document": {
            "name": "delete_document",
            "location": 149,
            "return": [
                "str",
                "bool",
                "Callable",
                "Dict[str, List[str]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "bool"
                ],
                "document_id": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "Document.stream": {
            "name": "stream",
            "location": 153,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "AsyncGenerator",
                    "collections.abc.AsyncGenerator",
                    "BinaryIO",
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "Document.where": {
            "name": "where",
            "location": 158,
            "return": [
                "_DocumentQuery"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "field_path": [
                    "str",
                    "int"
                ],
                "op_string": [
                    "str"
                ],
                "value": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "fireclass-release/fireclass/values_conversion.py": {
        "convert_value_from_firestore": {
            "name": "convert_value_from_firestore",
            "location": 8,
            "return": [
                "str",
                "Callable",
                "float",
                "bool"
            ],
            "arguments": {
                "field_value": [
                    "str",
                    "dataclasses.Field"
                ],
                "field_description": [
                    "str",
                    "dataclasses.Field"
                ]
            }
        },
        "_bool": {
            "name": "_bool",
            "location": 15,
            "return": [
                "List[int]",
                "bool",
                "Type",
                "str",
                "List[dict]",
                "None"
            ],
            "arguments": {
                "field_value": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "field_description": [
                    "dataclasses.Field",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "_str_to_enum": {
            "name": "_str_to_enum",
            "location": 23,
            "return": [
                "str",
                "int",
                "Optional[dict]",
                "bool",
                "None",
                "Dict"
            ],
            "arguments": {
                "field_value": [
                    "str",
                    "int",
                    "Dict",
                    "None",
                    "Optional[str]",
                    "bool"
                ],
                "field_description": [
                    "str",
                    "dataclasses.Field",
                    "bytes",
                    "None",
                    "Optional[str]",
                    "List[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "_int_to_enum": {
            "name": "_int_to_enum",
            "location": 39,
            "return": [
                "str",
                "int",
                "float",
                "None",
                "Optional[int]",
                "Dict",
                "bool"
            ],
            "arguments": {
                "field_value": [
                    "int",
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None"
                ],
                "field_description": [
                    "str",
                    "Callable",
                    "dataclasses.Field",
                    "int",
                    "float",
                    "Union[int,float]",
                    "Union[float,int,str]"
                ]
            }
        },
        "convert_value_to_firestore": {
            "name": "convert_value_to_firestore",
            "location": 67,
            "return": [
                "bool",
                "str",
                "int",
                "Set[str]",
                "Optional[float]",
                "Sequence[str]",
                "Tuple[int,int]"
            ],
            "arguments": {
                "field_value": [
                    "str",
                    "bool",
                    "Set[str]",
                    "Sequence[str]"
                ]
            }
        },
        "_dict_to": {
            "name": "_dict_to",
            "location": 74,
            "return": [
                "Dict",
                "str",
                "int"
            ],
            "arguments": {
                "field_value": [
                    "Dict",
                    "int",
                    "str",
                    "enum.Enum",
                    "Optional[int]",
                    "Mapping"
                ]
            }
        },
        "_list_to": {
            "name": "_list_to",
            "location": 82,
            "return": [
                "List",
                "str",
                "int",
                "Dict",
                "Dict[str,Any]",
                "Callable[,Any]"
            ],
            "arguments": {
                "field_value": [
                    "List",
                    "str",
                    "Union[float,int]",
                    "float",
                    "Callable[[Any],T]"
                ]
            }
        },
        "_enum_to": {
            "name": "_enum_to",
            "location": 87,
            "return": [
                "str",
                "Callable[[KT], VT]",
                "dict",
                "int"
            ],
            "arguments": {
                "field_value": [
                    "str",
                    "enum.Enum",
                    "int",
                    "Mapping",
                    "None",
                    "Optional[int]",
                    "bytes",
                    "T",
                    "Union[bytes,str]"
                ]
            }
        }
    },
    "fireclass-release/fireclass/__init__.py": {},
    "fireclass-release/fireclass/__version__.py": {},
    "fireclass-release/tests/test_document.py": {
        "setup_firestore_db": {
            "name": "setup_firestore_db",
            "location": 40,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "TestDocument.test_not_initialized": {
            "name": "test_not_initialized",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDocument.test_document_create_get_and_delete": {
            "name": "test_document_create_get_and_delete",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_firestore_db": []
            }
        },
        "TestDocument.test_document_create_with_id": {
            "name": "test_document_create_with_id",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_firestore_db": []
            }
        },
        "TestDocument.test_document_create_but_already_created": {
            "name": "test_document_create_but_already_created",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_firestore_db": []
            }
        },
        "TestDocument.test_document_update": {
            "name": "test_document_update",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_firestore_db": []
            }
        },
        "TestDocument.test_document_update_but_not_created_yet": {
            "name": "test_document_update_but_not_created_yet",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_firestore_db": []
            }
        },
        "TestDocument.test_document_delete_but_not_created_yet": {
            "name": "test_document_delete_but_not_created_yet",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_firestore_db": []
            }
        },
        "TestDocument.test_get": {
            "name": "test_get",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_firestore_db": []
            }
        },
        "TestDocument.test_where_with_enum_field": {
            "name": "test_where_with_enum_field",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_firestore_db": []
            }
        },
        "TestDocument.test_where_with_str_field": {
            "name": "test_where_with_str_field",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_firestore_db": []
            }
        },
        "TestDocument.test_where_with_limit": {
            "name": "test_where_with_limit",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_firestore_db": []
            }
        },
        "TestDocument.test_where_with_wrong_field_name": {
            "name": "test_where_with_wrong_field_name",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_firestore_db": [
                    "bool"
                ]
            }
        },
        "TestDocument.test_where_with_wrong_field_value_type": {
            "name": "test_where_with_wrong_field_value_type",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_firestore_db": []
            }
        },
        "TestDocument.test_multiple_where_chained": {
            "name": "test_multiple_where_chained",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_firestore_db": []
            }
        },
        "TestDocumentWithOptionalTypes.test_document_create_get_and_delete": {
            "name": "test_document_create_get_and_delete",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_firestore_db": []
            }
        },
        "TestDocumentWithOptionalTypes.test_document_create_get_and_delete_with_none_values": {
            "name": "test_document_create_get_and_delete_with_none_values",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_firestore_db": []
            }
        },
        "TestDocumentWithOptionalTypes.test_where_with_none_value": {
            "name": "test_where_with_none_value",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_firestore_db": []
            }
        }
    },
    "fireclass-release/tests/__init__.py": {}
}
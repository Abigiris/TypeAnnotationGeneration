{
    "flake8-aaa-master/setup.py": {
        "readme": {
            "name": "readme",
            "location": 8,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        }
    },
    "flake8-aaa-master/docs/conf.py": {},
    "flake8-aaa-master/examples/conftest.py": {
        "hello_world_path": {
            "name": "hello_world_path",
            "location": 7,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {}
        }
    },
    "flake8-aaa-master/examples/bad/test.py": {
        "test": {
            "name": "test",
            "location": 4,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "flake8-aaa-master/examples/bad/tests.py": {
        "test": {
            "name": "test",
            "location": 4,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "flake8-aaa-master/examples/bad/test_aaa01.py": {
        "test": {
            "name": "test",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "db": [
                    "bool"
                ]
            }
        }
    },
    "flake8-aaa-master/examples/bad/test_aaa03.py": {
        "test": {
            "name": "test",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_b": {
            "name": "test_b",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "hello_world_path": [
                    "str"
                ]
            }
        }
    },
    "flake8-aaa-master/examples/bad/test_aaa03_04.py": {
        "test": {
            "name": "test",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_b": {
            "name": "test_b",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "hello_world_path": [
                    "str"
                ]
            }
        }
    },
    "flake8-aaa-master/examples/bad/test_aaa04.py": {
        "test": {
            "name": "test",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_b": {
            "name": "test_b",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "hello_world_path": [
                    "str"
                ]
            }
        }
    },
    "flake8-aaa-master/examples/bad/test_aaa05.py": {
        "test_arrange": {
            "name": "test_arrange",
            "location": 4,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_act": {
            "name": "test_act",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_assert": {
            "name": "test_assert",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_all": {
            "name": "test_all",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fixture_a": [
                    "bool",
                    "list",
                    "list[]"
                ],
                "fixture_b": [
                    "bool",
                    "list",
                    "list[]"
                ]
            }
        }
    },
    "flake8-aaa-master/examples/bad/test_aaa06.py": {
        "test": {
            "name": "test",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_act": {
            "name": "test_act",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_comment_after_act": {
            "name": "test_comment_after_act",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_raises": {
            "name": "test_raises",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "flake8-aaa-master/examples/bad/test_example.py": {
        "test": {
            "name": "test",
            "location": 1,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "flake8-aaa-master/examples/bad/test_noqa_flake8.py": {
        "test": {
            "name": "test",
            "location": 5,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test2": {
            "name": "test2",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "flake8-aaa-master/examples/good/test_account_edit_view.py": {
        "TestAccountEditView.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountEditView.test_url_resolves": {
            "name": "test_url_resolves",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountEditView.test_not_logged_in": {
            "name": "test_not_logged_in",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountEditView.test_loads_template": {
            "name": "test_loads_template",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flake8-aaa-master/examples/good/test_arrange_act_spacing.py": {
        "test": {
            "name": "test",
            "location": 4,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_x": {
            "name": "test_x",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_not_loaded": {
            "name": "test_not_loaded",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "person": [
                    "str"
                ]
            }
        }
    },
    "flake8-aaa-master/examples/good/test_comments.py": {
        "test": {
            "name": "test",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ignore_typing": {
            "name": "test_ignore_typing",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_Act": {
            "name": "test_Act",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mark_first_line": {
            "name": "test_mark_first_line",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mark_last_line": {
            "name": "test_mark_last_line",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_in_arrange": {
            "name": "test_in_arrange",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_end_arrange": {
            "name": "test_end_arrange",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_in_assert": {
            "name": "test_in_assert",
            "location": 104,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_startassert": {
            "name": "test_startassert",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_strings": {
            "name": "test_strings",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_string_act": {
            "name": "test_string_act",
            "location": 135,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_empty": {
            "name": "test_empty",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "flake8-aaa-master/examples/good/test_django_fakery_factories.py": {
        "TestItemFactory.test_default": {
            "name": "test_default",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserFactory.test_default": {
            "name": "test_default",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flake8-aaa-master/examples/good/test_example.py": {
        "test": {
            "name": "test",
            "location": 1,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "flake8-aaa-master/examples/good/test_type_hints.py": {
        "add_one": {
            "name": "add_one",
            "location": 1,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "list[float]",
                    "str",
                    "bool",
                    "List[float]"
                ]
            }
        },
        "test_add_one": {
            "name": "test_add_one",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "flake8-aaa-master/examples/good/test_user_options.py": {
        "test_ini_file_reader": {
            "name": "test_ini_file_reader",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "filename": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "contents": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "expected_options": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "flake8-aaa-master/examples/good/test_with_statement.py": {
        "test_simple": {
            "name": "test_simple",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "hello_world_path": [
                    "str"
                ]
            }
        },
        "test_whole": {
            "name": "test_whole",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "hello_world_path": [
                    "str"
                ]
            }
        },
        "test_extra_arrange": {
            "name": "test_extra_arrange",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "hello_world_path": [
                    "str"
                ]
            }
        },
        "test_assert_in_block": {
            "name": "test_assert_in_block",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "hello_world_path": [
                    "str"
                ]
            }
        },
        "test_pytest_assert_raises_in_block": {
            "name": "test_pytest_assert_raises_in_block",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "hello_world_path": [
                    "str"
                ]
            }
        },
        "test_pytest_assert_raises_on_with": {
            "name": "test_pytest_assert_raises_on_with",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "hello_world_path": [
                    "str"
                ]
            }
        },
        "test_with_in_assert": {
            "name": "test_with_in_assert",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "hello_world_path": [
                    "str"
                ]
            }
        },
        "test_with_raises_in_assert": {
            "name": "test_with_raises_in_assert",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "flake8-aaa-master/examples/good/test_with_statement_unittest.py": {
        "Test.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.test_assert_raises_in_block": {
            "name": "test_assert_raises_in_block",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.test_assert_raises_on_with": {
            "name": "test_assert_raises_on_with",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flake8-aaa-master/examples/good/black/test_account_edit_view.py": {
        "TestAccountEditView.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountEditView.test_url_resolves": {
            "name": "test_url_resolves",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountEditView.test_not_logged_in": {
            "name": "test_not_logged_in",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountEditView.test_loads_template": {
            "name": "test_loads_template",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flake8-aaa-master/examples/good/black/test_arrange_act_spacing.py": {
        "test": {
            "name": "test",
            "location": 4,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_x": {
            "name": "test_x",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_not_loaded": {
            "name": "test_not_loaded",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "person": [
                    "str"
                ]
            }
        }
    },
    "flake8-aaa-master/examples/good/black/test_comments.py": {
        "test": {
            "name": "test",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ignore_typing": {
            "name": "test_ignore_typing",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_Act": {
            "name": "test_Act",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mark_first_line": {
            "name": "test_mark_first_line",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mark_last_line": {
            "name": "test_mark_last_line",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_in_arrange": {
            "name": "test_in_arrange",
            "location": 86,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_end_arrange": {
            "name": "test_end_arrange",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_in_assert": {
            "name": "test_in_assert",
            "location": 106,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_startassert": {
            "name": "test_startassert",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_strings": {
            "name": "test_strings",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_string_act": {
            "name": "test_string_act",
            "location": 137,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_empty": {
            "name": "test_empty",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "flake8-aaa-master/examples/good/black/test_django_fakery_factories.py": {
        "TestItemFactory.test_default": {
            "name": "test_default",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserFactory.test_default": {
            "name": "test_default",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flake8-aaa-master/examples/good/black/test_example.py": {
        "test": {
            "name": "test",
            "location": 1,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "flake8-aaa-master/examples/good/black/test_type_hints.py": {
        "add_one": {
            "name": "add_one",
            "location": 1,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "list[float]",
                    "str",
                    "bool",
                    "List[float]"
                ]
            }
        },
        "test_add_one": {
            "name": "test_add_one",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "flake8-aaa-master/examples/good/black/test_user_options.py": {
        "test_ini_file_reader": {
            "name": "test_ini_file_reader",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "filename": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "contents": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "expected_options": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "flake8-aaa-master/examples/good/black/test_with_statement.py": {
        "test_simple": {
            "name": "test_simple",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "hello_world_path": [
                    "str"
                ]
            }
        },
        "test_whole": {
            "name": "test_whole",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "hello_world_path": [
                    "str"
                ]
            }
        },
        "test_extra_arrange": {
            "name": "test_extra_arrange",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "hello_world_path": [
                    "str"
                ]
            }
        },
        "test_assert_in_block": {
            "name": "test_assert_in_block",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "hello_world_path": [
                    "str"
                ]
            }
        },
        "test_pytest_assert_raises_in_block": {
            "name": "test_pytest_assert_raises_in_block",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "hello_world_path": [
                    "str"
                ]
            }
        },
        "test_pytest_assert_raises_on_with": {
            "name": "test_pytest_assert_raises_on_with",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "hello_world_path": [
                    "str"
                ]
            }
        },
        "test_with_in_assert": {
            "name": "test_with_in_assert",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "hello_world_path": [
                    "str"
                ]
            }
        },
        "test_with_raises_in_assert": {
            "name": "test_with_raises_in_assert",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "flake8-aaa-master/examples/good/black/test_with_statement_unittest.py": {
        "Test.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.test_assert_raises_in_block": {
            "name": "test_assert_raises_in_block",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.test_assert_raises_on_with": {
            "name": "test_assert_raises_on_with",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flake8-aaa-master/examples/good/black/noqa/test_01.py": {
        "test_specific": {
            "name": "test_specific",
            "location": 1,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_multi_line_args_specific": {
            "name": "test_multi_line_args_specific",
            "location": 5,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "math_fixture": [
                    "bool"
                ]
            }
        }
    },
    "flake8-aaa-master/examples/good/black/noqa/test_02.py": {
        "test": {
            "name": "test",
            "location": 1,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "flake8-aaa-master/examples/good/black/noqa/test_03.py": {
        "test": {
            "name": "test",
            "location": 1,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "flake8-aaa-master/examples/good/black/noqa/test_04.py": {
        "test": {
            "name": "test",
            "location": 1,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "flake8-aaa-master/examples/good/black/noqa/test_cmd.py": {
        "test": {
            "name": "test",
            "location": 1,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_multi_line_args": {
            "name": "test_multi_line_args",
            "location": 5,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "math_fixture": [
                    "bool"
                ]
            }
        }
    },
    "flake8-aaa-master/examples/good/noqa/test_01.py": {
        "test_specific": {
            "name": "test_specific",
            "location": 1,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_multi_line_args_specific": {
            "name": "test_multi_line_args_specific",
            "location": 5,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "math_fixture": [
                    "bool"
                ]
            }
        }
    },
    "flake8-aaa-master/examples/good/noqa/test_02.py": {
        "test": {
            "name": "test",
            "location": 1,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "flake8-aaa-master/examples/good/noqa/test_03.py": {
        "test": {
            "name": "test",
            "location": 1,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "flake8-aaa-master/examples/good/noqa/test_04.py": {
        "test": {
            "name": "test",
            "location": 1,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "flake8-aaa-master/examples/good/noqa/test_cmd.py": {
        "test": {
            "name": "test",
            "location": 1,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_multi_line_args": {
            "name": "test_multi_line_args",
            "location": 5,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "math_fixture": [
                    "bool"
                ]
            }
        }
    },
    "flake8-aaa-master/examples/good_py38/test_assignment_operator.py": {
        "test": {
            "name": "test",
            "location": 1,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "flake8-aaa-master/src/flake8_aaa/act_node.py": {
        "ActNode.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "type",
                    "int",
                    "typing.Type"
                ],
                "block_type": [
                    "None",
                    "Optional[mypy.types.Type]",
                    "int",
                    "typing.Type",
                    "mypy.types.Type",
                    "Type"
                ]
            }
        },
        "ActNode.build_body": {
            "name": "build_body",
            "location": 35,
            "return": [
                "list[]",
                "str",
                "float",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "list[]",
                    "list",
                    "typing.MutableMapping",
                    "MutableMapping",
                    "bool"
                ],
                "body": [
                    "str",
                    "list[]",
                    "int",
                    "list",
                    "MutableMapping",
                    "bool"
                ]
            }
        },
        "ActNode.build": {
            "name": "build",
            "location": 46,
            "return": [
                "list[]",
                "int",
                "Optional[Dict[str, str]]",
                "Optional[Any]",
                "bool",
                "Type[Any]"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[str, mypy.types.Instance]",
                    "int",
                    "mypy.types.Type",
                    "mypy.types.CallableType",
                    "Callable[[str], mypy.types.Instance]"
                ],
                "node": []
            }
        }
    },
    "flake8-aaa-master/src/flake8_aaa/block.py": {
        "Block.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "list[T]",
                    "List[mypy.types.Type]",
                    "list[str]",
                    "int",
                    "float",
                    "List[str]"
                ],
                "lt": [
                    "None",
                    "mypy.types.Type",
                    "typing.Type",
                    "Optional[mypy.types.Type]",
                    "Type"
                ]
            }
        },
        "Block.build_act": {
            "name": "build_act",
            "location": 33,
            "return": [
                "bool",
                "int",
                "Optional[Any]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Callable[[str], mypy.types.Instance]",
                    "typing.Callable[str, I]"
                ],
                "node": [
                    "int",
                    "Callable[[str], mypy.types.Instance]",
                    "typing.Callable[str, I]"
                ]
            }
        },
        "Block.build_arrange": {
            "name": "build_arrange",
            "location": 40,
            "return": [
                "bool",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ],
                "nodes": [
                    "int",
                    "str",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ],
                "act_block_first_line": [
                    "int",
                    "str",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ]
            }
        },
        "Block.get_span": {
            "name": "get_span",
            "location": 51,
            "return": [
                "tuple[int]",
                "bool",
                "str",
                "Dict[str, object]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "first_line_no": [
                    "int"
                ]
            }
        }
    },
    "flake8-aaa-master/src/flake8_aaa/checker.py": {
        "Checker.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "bool",
                    "str",
                    "int"
                ],
                "lines": [
                    "str",
                    "float",
                    "bytes",
                    "List[str]",
                    "list[str]"
                ],
                "filename": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Checker.load": {
            "name": "load",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Checker.all_funcs": {
            "name": "all_funcs",
            "location": 33,
            "return": [
                "typing.Generator[function.Function, None, None]",
                "typing.Generator[Function]"
            ],
            "arguments": {
                "self": [],
                "skip_noqa": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Checker.run": {
            "name": "run",
            "location": 50,
            "return": [
                "typing.Generator[typing.Tuple[builtins.int, builtins.int, builtins.str, builtins.type], None, None]",
                "typing.Generator[tuple[Checker]]",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flake8-aaa-master/src/flake8_aaa/command_line.py": {
        "do_command_line": {
            "name": "do_command_line",
            "location": 8,
            "return": [
                "int",
                "List[str]",
                "Union[str, List[Any]]",
                "List[Dict]",
                "List[List[Any]]",
                "List[int]",
                "str"
            ],
            "arguments": {
                "infile": [
                    "Optional[str]",
                    "bytes",
                    "List[int]"
                ]
            }
        }
    },
    "flake8-aaa-master/src/flake8_aaa/exceptions.py": {
        "ValidationError.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "line_number": [
                    "int",
                    "str",
                    "bool",
                    "typing.Mapping",
                    "Optional[Mapping]",
                    "None",
                    "Type['AbstractIntegrationConversation']",
                    "typing.Type"
                ],
                "offset": [
                    "int",
                    "str",
                    "bool",
                    "typing.Mapping",
                    "Optional[Mapping]",
                    "None",
                    "Type['AbstractIntegrationConversation']",
                    "typing.Type"
                ],
                "text": [
                    "int",
                    "str",
                    "bool",
                    "typing.Mapping",
                    "Optional[Mapping]",
                    "None",
                    "Type['AbstractIntegrationConversation']",
                    "typing.Type"
                ]
            }
        },
        "ValidationError.to_flake8": {
            "name": "to_flake8",
            "location": 49,
            "return": [
                "Flake8Error",
                "Dict[str, Any]",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "checker_cls": [
                    "int",
                    "str",
                    "Union[tuple, list]",
                    "tuple[]",
                    "list[]"
                ]
            }
        },
        "ValidationError.to_aaa": {
            "name": "to_aaa",
            "location": 62,
            "return": [
                "AAAError",
                "Dict[str, Any]",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flake8-aaa-master/src/flake8_aaa/function.py": {
        "Function.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "bytes",
                    "bool",
                    "list[float]",
                    "List[float]"
                ],
                "file_lines": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "file_tokens": [
                    "str",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "Function.__str__": {
            "name": "__str__",
            "location": 60,
            "return": [
                "str",
                "typing.Text",
                "Set[str]",
                "list[str]",
                "dict",
                "None"
            ],
            "arguments": {
                "self": [],
                "errors": [
                    "bool",
                    "Callable",
                    "Type[T]",
                    "Optional[Set[str]]",
                    "Optional[str]",
                    "Sequence[str]"
                ]
            }
        },
        "Function.check_all": {
            "name": "check_all",
            "location": 77,
            "return": [
                "int",
                "None",
                "Union[tuple, list]",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.mark_bl": {
            "name": "mark_bl",
            "location": 104,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.mark_comments": {
            "name": "mark_comments",
            "location": 124,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.mark_def": {
            "name": "mark_def",
            "location": 143,
            "return": [
                "deoplete.util.UserContext",
                "bool",
                "Optional[Union[str, Any]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.mark_act": {
            "name": "mark_act",
            "location": 170,
            "return": [
                "int",
                "deoplete.util.UserContext",
                "bool",
                "Optional[Union[str, Any]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.mark_arrange": {
            "name": "mark_arrange",
            "location": 196,
            "return": [
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.mark_assert": {
            "name": "mark_assert",
            "location": 230,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.load_act_node": {
            "name": "load_act_node",
            "location": 258,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flake8-aaa-master/src/flake8_aaa/helpers.py": {
        "is_test_file": {
            "name": "is_test_file",
            "location": 13,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "Callable[[str], None]",
                "Optional[bool]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "first_non_blank_char": {
            "name": "first_non_blank_char",
            "location": 21,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "line": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "find_test_functions": {
            "name": "find_test_functions",
            "location": 48,
            "return": [
                "Optional[Type[BaseException]]",
                "Optional[BaseException]",
                "List[str]"
            ],
            "arguments": {
                "tree": [],
                "skip_noqa": [
                    "bool",
                    "List[str]",
                    "list",
                    "denite.util.UserContext",
                    "Dict[str, int]",
                    "str"
                ]
            }
        },
        "node_is_result_assignment": {
            "name": "node_is_result_assignment",
            "location": 62,
            "return": [
                "bool",
                "Dict[str, Dict]",
                "int",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "node": [
                    "int",
                    "bool"
                ]
            }
        },
        "node_is_pytest_raises": {
            "name": "node_is_pytest_raises",
            "location": 80,
            "return": [
                "bool",
                "str",
                "float"
            ],
            "arguments": {
                "node": [
                    "bytes",
                    "int"
                ]
            }
        },
        "node_is_unittest_raises": {
            "name": "node_is_unittest_raises",
            "location": 92,
            "return": [
                "bool",
                "str",
                "float"
            ],
            "arguments": {
                "node": [
                    "bytes",
                    "int"
                ]
            }
        },
        "node_is_noop": {
            "name": "node_is_noop",
            "location": 100,
            "return": [
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {
                "node": []
            }
        },
        "function_is_noop": {
            "name": "function_is_noop",
            "location": 107,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "function_node": [
                    "str",
                    "bytes",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "format_errors": {
            "name": "format_errors",
            "location": 114,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "num_errors": [
                    "int"
                ]
            }
        },
        "get_first_token": {
            "name": "get_first_token",
            "location": 123,
            "return": [
                "str",
                "Tuple[int, int]"
            ],
            "arguments": {
                "node": []
            }
        },
        "get_last_token": {
            "name": "get_last_token",
            "location": 134,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "node": [
                    "Dict[str, Set[str]]",
                    "dict[str, set[str]]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "filter_arrange_nodes": {
            "name": "filter_arrange_nodes",
            "location": 141,
            "return": [
                "list[]",
                "List[str]",
                "Optional[dict]",
                "int"
            ],
            "arguments": {
                "nodes": [
                    "int",
                    "T",
                    "Optional[Any]"
                ],
                "act_block_first_line_number": [
                    "int",
                    "T",
                    "typing.Any",
                    "Optional[Any]",
                    "None"
                ]
            }
        },
        "line_is_comment": {
            "name": "line_is_comment",
            "location": 156,
            "return": [
                "bool"
            ],
            "arguments": {
                "line": [
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "TestFuncLister.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "skip_noqa": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "TestFuncLister.visit_FunctionDef": {
            "name": "visit_FunctionDef",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "TestFuncLister.get_found_funcs": {
            "name": "get_found_funcs",
            "location": 44,
            "return": [
                "bool",
                "str",
                "dict",
                "Tuple[int, int]",
                "List[str]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flake8-aaa-master/src/flake8_aaa/line_markers.py": {
        "LineMarkers.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "int",
                    "Tuple[int, int]",
                    "list",
                    "bytes",
                    "List[int]"
                ],
                "fn_offset": [
                    "int",
                    "str"
                ]
            }
        },
        "LineMarkers.set": {
            "name": "set",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "type",
                    "typing.Type",
                    "Optional[Any]",
                    "typing.Any",
                    "Optional[Type]",
                    "None"
                ],
                "value": [
                    "str",
                    "types.LineType",
                    "list[str]",
                    "bool",
                    "None",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "LineMarkers.update": {
            "name": "update",
            "location": 60,
            "return": [
                "int",
                "float",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "str",
                    "bool",
                    "T"
                ],
                "b": [
                    "int",
                    "str",
                    "bool",
                    "T"
                ],
                "line_type": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "LineMarkers.previous": {
            "name": "previous",
            "location": 88,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "num": [
                    "int"
                ]
            }
        },
        "LineMarkers.next": {
            "name": "next",
            "location": 99,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "num": [
                    "int"
                ]
            }
        },
        "LineMarkers.check_arrange_act_spacing": {
            "name": "check_arrange_act_spacing",
            "location": 110,
            "return": [
                "typing.Generator[exceptions.AAAError, None, None]",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineMarkers.check_act_assert_spacing": {
            "name": "check_act_assert_spacing",
            "location": 121,
            "return": [
                "typing.Generator[exceptions.AAAError, None, None]",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineMarkers.check_block_spacing": {
            "name": "check_block_spacing",
            "location": 132,
            "return": [
                "mypy.types.Type",
                "None",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "first_block_type": [
                    "bool",
                    "str"
                ],
                "second_block_type": [
                    "bool",
                    "str"
                ],
                "error_message": [
                    "str",
                    "Type[BaseException]",
                    "types.TracebackType",
                    "BaseException",
                    "Type",
                    "List[str]"
                ]
            }
        },
        "LineMarkers.check_blank_lines": {
            "name": "check_blank_lines",
            "location": 173,
            "return": [
                "typing.Generator[exceptions.AAAError, None, None]",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineMarkers.check_comment_in_act": {
            "name": "check_comment_in_act",
            "location": 185,
            "return": [
                "typing.Generator[exceptions.AAAError, None, None]",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineMarkers.build_error": {
            "name": "build_error",
            "location": 194,
            "return": [
                "AAAError",
                "dict",
                "Dict[str, str]",
                "Mapping[str, Union[int, slice]]",
                "OrderedDict"
            ],
            "arguments": {
                "self": [],
                "line_index": [
                    "str",
                    "TextIO",
                    "typing.TextIO",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "text": [
                    "str",
                    "TextIO",
                    "typing.TextIO",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "flake8-aaa-master/src/flake8_aaa/multi_node_block.py": {
        "MultiNodeBlock.line_type": {
            "name": "line_type",
            "location": 12,
            "return": [
                "types.LineType",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiNodeBlock.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiNodeBlock.add_node": {
            "name": "add_node",
            "location": 19,
            "return": [
                "builtins.bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool"
                ]
            }
        }
    },
    "flake8-aaa-master/src/flake8_aaa/types.py": {
        "LineType.__str__": {
            "name": "__str__",
            "location": 31,
            "return": [
                "typing.Text",
                "int",
                "tuple",
                "Dict[Tuple[str, str], Tuple[float, float]]",
                "Dict[str, Any]",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flake8-aaa-master/src/flake8_aaa/__about__.py": {},
    "flake8-aaa-master/src/flake8_aaa/__init__.py": {},
    "flake8-aaa-master/src/flake8_aaa/__main__.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                "str",
                "bool",
                "int",
                "List[int]",
                "List[str]",
                "Dict[str, int]",
                "Dict[str, str]",
                "List[Tuple[str, str]]",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "flake8-aaa-master/stubs/asttokens/util.py": {},
    "flake8-aaa-master/stubs/asttokens/__init__.py": {
        "ASTTokens.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "source_text": [
                    "str",
                    "bool",
                    "Optional[int]",
                    "None"
                ],
                "parse": [
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "tree": [
                    "str",
                    "None",
                    "bool",
                    "Optional[int]"
                ],
                "filename": [
                    "typing.Text",
                    "str",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "ASTTokens.get_tokens": {
            "name": "get_tokens",
            "location": 18,
            "return": [
                "typing.Generator[util.Token, None, None]",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "include_extra": [
                    "bool",
                    "List[Dict[str, Any]]"
                ]
            }
        }
    },
    "flake8-aaa-master/tests/conftest.py": {
        "fake_options": {
            "name": "fake_options",
            "location": 20,
            "return": [
                "FakeOptions",
                "bool",
                "float",
                "Optional[Any]",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "file_tokens": {
            "name": "file_tokens",
            "location": 31,
            "return": [
                "list[]",
                "str",
                "int",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "code_str": [
                    "str"
                ],
                "tmpdir": [
                    "str",
                    "bool",
                    "Optional[int]",
                    "int"
                ],
                "fake_options": [
                    "str"
                ]
            }
        },
        "first_token": {
            "name": "first_token",
            "location": 48,
            "return": [
                "tokenize.TokenInfo",
                "int",
                "Union[str, IO]",
                "str",
                "IO",
                "IO[str]"
            ],
            "arguments": {
                "file_tokens": [
                    "list[tokenize.TokenInfo]",
                    "List[tokenize.TokenInfo]",
                    "tuple[typing.Union[int,int]]",
                    "Tuple[int, int]",
                    "list[str]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "tree": {
            "name": "tree",
            "location": 57,
            "return": [
                "str",
                "Callable",
                "MutableMapping[str, Any]",
                "bool",
                "float"
            ],
            "arguments": {
                "code_str": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "asttok": {
            "name": "asttok",
            "location": 62,
            "return": [
                "ASTTokens",
                "str",
                "int"
            ],
            "arguments": {
                "code_str": [
                    "str",
                    "Optional[bytes]",
                    "bytes",
                    "Optional[str]",
                    "None"
                ],
                "tree": [
                    "str",
                    "Optional[bytes]",
                    "bytes",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "first_node_with_tokens": {
            "name": "first_node_with_tokens",
            "location": 67,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "code_str": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "dict[str, typing.Any]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "tree": [
                    "Set[str]",
                    "set[str]",
                    "float",
                    "list",
                    "list[]",
                    "str",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ],
                "asttok": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "dict[str, typing.Any]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "tokens": {
            "name": "tokens",
            "location": 79,
            "return": [
                "list[]",
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {
                "asttok": [
                    "str"
                ],
                "first_node_with_tokens": [
                    "str"
                ]
            }
        },
        "lines": {
            "name": "lines",
            "location": 87,
            "return": [
                "list[str]",
                "str",
                "Callable",
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "code_str": [
                    "str"
                ]
            }
        }
    },
    "flake8-aaa-master/tests/__init__.py": {},
    "flake8-aaa-master/tests/act_node/test_build.py": {
        "test_pytest_raises_block": {
            "name": "test_pytest_raises_block",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "first_node_with_tokens": [
                    "bool"
                ]
            }
        },
        "test_unittest_raises_block": {
            "name": "test_unittest_raises_block",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "first_node_with_tokens": [
                    "bool"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "expected_type": [
                    "str",
                    "bool",
                    "None",
                    "Union[int, str]",
                    "Optional[str]"
                ],
                "first_node_with_tokens": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_multi_line": {
            "name": "test_multi_line",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "expected_type": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "first_node_with_tokens": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_nested": {
            "name": "test_nested",
            "location": 85,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "first_node_with_tokens": []
            }
        },
        "test_not_actions": {
            "name": "test_not_actions",
            "location": 105,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "first_node_with_tokens": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "flake8-aaa-master/tests/act_node/test_init.py": {
        "test": {
            "name": "test",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "flake8-aaa-master/tests/act_node/__init__.py": {},
    "flake8-aaa-master/tests/block/test_build_act.py": {
        "test": {
            "name": "test",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "first_node_with_tokens": []
            }
        }
    },
    "flake8-aaa-master/tests/block/test_build_arrange.py": {
        "test_none": {
            "name": "test_none",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "first_node_with_tokens": [
                    "list[str]",
                    "List[str]",
                    "reader_server.types.Feed"
                ]
            }
        },
        "test_simple": {
            "name": "test_simple",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "first_node_with_tokens": [
                    "list[str]",
                    "List[str]",
                    "reader_server.types.Feed",
                    "reader_server.types.Subscription"
                ]
            }
        },
        "test_context": {
            "name": "test_context",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "first_node_with_tokens": [
                    "list[str]",
                    "List[str]",
                    "reader_server.types.Feed",
                    "reader_server.types.Subscription"
                ]
            }
        }
    },
    "flake8-aaa-master/tests/block/test_get_span.py": {
        "test_none": {
            "name": "test_none",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test": {
            "name": "test",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "first_node_with_tokens": [
                    "str"
                ]
            }
        },
        "test_context_arrange": {
            "name": "test_context_arrange",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "first_node_with_tokens": [
                    "set",
                    "str",
                    "set[]",
                    "bytes"
                ]
            }
        }
    },
    "flake8-aaa-master/tests/block/test_init.py": {
        "test_empty": {
            "name": "test_empty",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_some": {
            "name": "test_some",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "first_node_with_tokens": [
                    "str",
                    "reader_server.types.Subscription"
                ]
            }
        }
    },
    "flake8-aaa-master/tests/checker/conftest.py": {
        "checker": {
            "name": "checker",
            "location": 9,
            "return": [
                "Checker",
                "str",
                "Tuple[float]",
                "int",
                "Tuple[str]"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "flake8-aaa-master/tests/checker/test_all_funcs.py": {
        "test": {
            "name": "test",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "checker": [
                    "str"
                ]
            }
        },
        "test_not_loaded": {
            "name": "test_not_loaded",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "checker": [
                    "Callable"
                ]
            }
        }
    },
    "flake8-aaa-master/tests/checker/test_init.py": {
        "ast_example": {
            "name": "ast_example",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test": {
            "name": "test",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "ast_example": []
            }
        }
    },
    "flake8-aaa-master/tests/checker/test_load.py": {
        "test": {
            "name": "test",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "checker": [
                    "Callable"
                ]
            }
        }
    },
    "flake8-aaa-master/tests/checker/__init__.py": {},
    "flake8-aaa-master/tests/command_line/test_do_command_line.py": {
        "example_file": {
            "name": "example_file",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_example_file_is_test": {
            "name": "test_example_file_is_test",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "example_file": [
                    "str",
                    "helpers.filer.Filer"
                ]
            }
        },
        "test_example_file_has_functions": {
            "name": "test_example_file_has_functions",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "example_file": [
                    "helpers.filer.Filer",
                    "Type['GenericList']",
                    "Type['Declared']"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "example_file": [],
                "capsys": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "flake8-aaa-master/tests/command_line/__init__.py": {},
    "flake8-aaa-master/tests/exceptions/test_validation_error.py": {
        "test": {
            "name": "test",
            "location": 5,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "flake8-aaa-master/tests/exceptions/__init__.py": {},
    "flake8-aaa-master/tests/fixtures/test_first_token.py": {
        "test_first_token": {
            "name": "test_first_token",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "first_token": []
            }
        }
    },
    "flake8-aaa-master/tests/fixtures/test_lines.py": {
        "test_lines": {
            "name": "test_lines",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "lines": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Iterator[str]",
                    "typing.Iterator",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        }
    },
    "flake8-aaa-master/tests/fixtures/__init__.py": {},
    "flake8-aaa-master/tests/function/conftest.py": {
        "function": {
            "name": "function",
            "location": 10,
            "return": [
                "Set[int]",
                "Function"
            ],
            "arguments": {
                "first_node_with_tokens": [
                    "frozenset[str]",
                    "frozenset"
                ],
                "lines": [
                    "frozenset[str]",
                    "frozenset"
                ],
                "tokens": [
                    "frozenset[str]",
                    "frozenset"
                ]
            }
        },
        "function_bl": {
            "name": "function_bl",
            "location": 22,
            "return": [],
            "arguments": {
                "function": [
                    "type",
                    "int",
                    "IO[bytes]",
                    "Type"
                ]
            }
        },
        "function_bl_cmt": {
            "name": "function_bl_cmt",
            "location": 28,
            "return": [],
            "arguments": {
                "function_bl": [
                    "type",
                    "int",
                    "IO[bytes]",
                    "Type"
                ]
            }
        },
        "function_bl_cmt_def": {
            "name": "function_bl_cmt_def",
            "location": 34,
            "return": [],
            "arguments": {
                "function_bl_cmt": [
                    "type",
                    "int",
                    "IO[bytes]",
                    "Type"
                ]
            }
        },
        "function_bl_cmt_def_act": {
            "name": "function_bl_cmt_def_act",
            "location": 40,
            "return": [],
            "arguments": {
                "function_bl_cmt_def": [
                    "type",
                    "int",
                    "IO[bytes]",
                    "Type"
                ]
            }
        },
        "function_bl_cmt_def_act_arr": {
            "name": "function_bl_cmt_def_act_arr",
            "location": 46,
            "return": [],
            "arguments": {
                "function_bl_cmt_def_act": [
                    "type",
                    "int",
                    "IO[bytes]",
                    "Type"
                ]
            }
        }
    },
    "flake8-aaa-master/tests/function/test_check_all.py": {
        "test_noop": {
            "name": "test_noop",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "function": [
                    "type",
                    "Callable"
                ]
            }
        },
        "test_context_manager": {
            "name": "test_context_manager",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "function": [
                    "Exception",
                    "type"
                ]
            }
        },
        "test_missing_space_before_act": {
            "name": "test_missing_space_before_act",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "function": [
                    "type",
                    "Callable"
                ]
            }
        },
        "test_missing_space_before_assert": {
            "name": "test_missing_space_before_assert",
            "location": 101,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "function": [
                    "type",
                    "Callable"
                ]
            }
        },
        "test_multi": {
            "name": "test_multi",
            "location": 122,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "function": [
                    "type",
                    "Callable"
                ]
            }
        }
    },
    "flake8-aaa-master/tests/function/test_init.py": {
        "test": {
            "name": "test",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "first_node_with_tokens": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "typing.Type",
                    "Type[MutableMapping]",
                    "routemaster_sdk.types.LabelRef"
                ],
                "lines": [
                    "str",
                    "int"
                ],
                "tokens": [
                    "str",
                    "float",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "test_with_decorators": {
            "name": "test_with_decorators",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "first_node_with_tokens": [
                    "str",
                    "dict",
                    "int",
                    "dict[, ]",
                    "Match[str]",
                    "typing.Match",
                    "Sequence",
                    "typing.Sequence[]"
                ],
                "lines": [
                    "str",
                    "int"
                ],
                "tokens": [
                    "str",
                    "dict",
                    "int",
                    "dict[, ]",
                    "Match[str]",
                    "typing.Match",
                    "Sequence",
                    "typing.Sequence[]"
                ]
            }
        }
    },
    "flake8-aaa-master/tests/function/test_load_act_node.py": {
        "test_assignment": {
            "name": "test_assignment",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "function": [
                    "mypy.types.Type",
                    "type",
                    "Callable"
                ]
            }
        },
        "test_act_marker": {
            "name": "test_act_marker",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "function": [
                    "mypy.types.Type",
                    "type",
                    "Callable"
                ]
            }
        },
        "test_act_marker_case": {
            "name": "test_act_marker_case",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "function": [
                    "mypy.types.Type",
                    "type",
                    "Callable"
                ]
            }
        },
        "test_act_marker_multi_line": {
            "name": "test_act_marker_multi_line",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "function": [
                    "Exception",
                    "type",
                    "bool"
                ]
            }
        },
        "test_raises_in_assert": {
            "name": "test_raises_in_assert",
            "location": 103,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "function": [
                    "Exception",
                    "type"
                ]
            }
        },
        "test_in_cm": {
            "name": "test_in_cm",
            "location": 125,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "function": [
                    "Callable"
                ]
            }
        },
        "test_raises_in_cm": {
            "name": "test_raises_in_cm",
            "location": 145,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "function": [
                    "Exception",
                    "type"
                ]
            }
        },
        "test_marked_in_cm": {
            "name": "test_marked_in_cm",
            "location": 166,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "function": [
                    "Exception",
                    "type"
                ]
            }
        },
        "test_no_block": {
            "name": "test_no_block",
            "location": 186,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "function": [
                    "tests.hints.Function",
                    "bool",
                    "str"
                ]
            }
        },
        "test_multiple_acts": {
            "name": "test_multiple_acts",
            "location": 225,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "function": [
                    "tests.hints.Function",
                    "str",
                    "bool",
                    "List[List[str]]",
                    "Dict[str, Set[str]]"
                ]
            }
        }
    },
    "flake8-aaa-master/tests/function/test_mark_act.py": {
        "test_simple": {
            "name": "test_simple",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "function_bl_cmt_def": [
                    "bool",
                    "type"
                ]
            }
        },
        "test_raises_block": {
            "name": "test_raises_block",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "function_bl_cmt_def": [
                    "type"
                ]
            }
        },
        "test_raises_block_with_comment": {
            "name": "test_raises_block_with_comment",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "function_bl_cmt_def": [
                    "type"
                ]
            }
        }
    },
    "flake8-aaa-master/tests/function/test_mark_arrange.py": {
        "test_simple": {
            "name": "test_simple",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "function_bl_cmt_def_act": [
                    "type",
                    "MutableMapping[str, str]",
                    "bool"
                ]
            }
        },
        "test_extra": {
            "name": "test_extra",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "function_bl_cmt_def_act": [
                    "type",
                    "MutableMapping[str, str]",
                    "bool"
                ]
            }
        },
        "test_bl_in_str": {
            "name": "test_bl_in_str",
            "location": 82,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "function_bl_cmt_def_act": [
                    "type",
                    "dict",
                    "Type",
                    "MutableMapping[str, str]"
                ]
            }
        },
        "test_no_arrange": {
            "name": "test_no_arrange",
            "location": 107,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "function_bl_cmt_def_act": [
                    "type",
                    "dict",
                    "Type"
                ]
            }
        }
    },
    "flake8-aaa-master/tests/function/test_mark_assert.py": {
        "test_simple": {
            "name": "test_simple",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "function_bl_cmt_def_act_arr": [
                    "bool",
                    "type",
                    "MutableMapping[str, str]"
                ]
            }
        },
        "test_comment_after_act": {
            "name": "test_comment_after_act",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "function_bl_cmt_def_act_arr": [
                    "bool",
                    "type",
                    "MutableMapping[str, str]"
                ]
            }
        },
        "test_comment_start_assert": {
            "name": "test_comment_start_assert",
            "location": 82,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "function_bl_cmt_def_act_arr": [
                    "bool",
                    "type",
                    "MutableMapping[str, str]"
                ]
            }
        }
    },
    "flake8-aaa-master/tests/function/test_mark_bl.py": {
        "test": {
            "name": "test",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "function": [
                    "mypy.types.Instance",
                    "wemake_python_styleguide.types.AnyIf",
                    "bool"
                ]
            }
        },
        "test_double_space": {
            "name": "test_double_space",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "function": [
                    "mypy.types.Instance"
                ]
            }
        }
    },
    "flake8-aaa-master/tests/function/test_mark_comments.py": {
        "test": {
            "name": "test",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "function_bl": [
                    "Type[Any]"
                ]
            }
        },
        "test_comments_in_strings": {
            "name": "test_comments_in_strings",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "function_bl": [
                    "str"
                ]
            }
        }
    },
    "flake8-aaa-master/tests/function/test_mark_def.py": {
        "test": {
            "name": "test",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "function_bl_cmt": [
                    "bool",
                    "Type[Any]"
                ]
            }
        },
        "test_decorated": {
            "name": "test_decorated",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "function_bl_cmt": [
                    "bool",
                    "type",
                    "Type[Any]"
                ]
            }
        },
        "test_decorated_comment": {
            "name": "test_decorated_comment",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "function_bl_cmt": [
                    "bool",
                    "type",
                    "Type[Any]"
                ]
            }
        },
        "test_decorated_blank": {
            "name": "test_decorated_blank",
            "location": 118,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "function_bl_cmt": [
                    "bool",
                    "type",
                    "Type[Any]"
                ]
            }
        },
        "test_multi": {
            "name": "test_multi",
            "location": 151,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "function_bl_cmt": [
                    "bool",
                    "type",
                    "Type[Any]"
                ]
            }
        }
    },
    "flake8-aaa-master/tests/function/test_str.py": {
        "test_unprocessed": {
            "name": "test_unprocessed",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "function": [
                    "str",
                    "Callable",
                    "Exception",
                    "typing.Callable[, ]",
                    "Union[str, int]",
                    "int"
                ]
            }
        },
        "test_marked": {
            "name": "test_marked",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "function_bl_cmt_def": [
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "T",
                    "Callable"
                ]
            }
        },
        "test_processed": {
            "name": "test_processed",
            "location": 83,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "function": [
                    "type",
                    "Callable",
                    "bool"
                ]
            }
        },
        "test_multi_spaces": {
            "name": "test_multi_spaces",
            "location": 113,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "function": [
                    "type",
                    "Callable",
                    "bool"
                ]
            }
        },
        "test_multi_errors": {
            "name": "test_multi_errors",
            "location": 140,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "function": [
                    "type",
                    "Callable"
                ]
            }
        }
    },
    "flake8-aaa-master/tests/function/__init__.py": {},
    "flake8-aaa-master/tests/function/fixtures/test_first_node_with_tokens.py": {
        "test": {
            "name": "test",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "first_node_with_tokens": [
                    "str"
                ]
            }
        }
    },
    "flake8-aaa-master/tests/function/fixtures/test_function.py": {
        "test_function_start": {
            "name": "test_function_start",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "function": [
                    "bool"
                ]
            }
        },
        "test_function_end": {
            "name": "test_function_end",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "function": [
                    "bool"
                ]
            }
        }
    },
    "flake8-aaa-master/tests/function/fixtures/__init__.py": {},
    "flake8-aaa-master/tests/helpers/test_filter_arrange_nodes.py": {
        "test": {
            "name": "test",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "first_node_with_tokens": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_with_statement": {
            "name": "test_with_statement",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "first_node_with_tokens": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "flake8-aaa-master/tests/helpers/test_find_test_functions.py": {
        "make_tree_with_tokens": {
            "name": "make_tree_with_tokens",
            "location": 8,
            "return": [
                "Optional[\"TreeNode\"]",
                "Optional[Dict[str, Any]]",
                "Callable",
                "str"
            ],
            "arguments": {
                "code_str": [
                    "str",
                    "int"
                ]
            }
        },
        "test_empty": {
            "name": "test_empty",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_some": {
            "name": "test_some",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_skip_noqa": {
            "name": "test_skip_noqa",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "flake8-aaa-master/tests/helpers/test_first_non_blank_char.py": {
        "test": {
            "name": "test",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "line": [
                    "str"
                ],
                "char_index": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "flake8-aaa-master/tests/helpers/test_format_errors.py": {
        "test": {
            "name": "test",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "num_errors": [
                    "str",
                    "Union[str, int]",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "output": [
                    "str",
                    "Callable[..., Awaitable]",
                    "typing.Callable[..., collections.abc.Awaitable[]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "flake8-aaa-master/tests/helpers/test_function_is_noop.py": {
        "test": {
            "name": "test",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "code_str": [
                    "str"
                ]
            }
        },
        "test_not_noop": {
            "name": "test_not_noop",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "code_str": [
                    "str"
                ]
            }
        }
    },
    "flake8-aaa-master/tests/helpers/test_get_first_token.py": {
        "test": {
            "name": "test",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "first_node_with_tokens": [
                    "str",
                    "Optional[Dict[Hashable, Any]]",
                    "dict[typing.Hashable, typing.Any]",
                    "None"
                ]
            }
        },
        "test_strings": {
            "name": "test_strings",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "first_node_with_tokens": [
                    "str"
                ],
                "expected": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        }
    },
    "flake8-aaa-master/tests/helpers/test_get_last_token.py": {
        "test": {
            "name": "test",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "first_node_with_tokens": [
                    "str",
                    "Optional[Dict[Hashable, Any]]",
                    "dict[typing.Hashable, typing.Any]",
                    "None"
                ]
            }
        }
    },
    "flake8-aaa-master/tests/helpers/test_is_test_file.py": {
        "test": {
            "name": "test",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "typing.Callable[, ]",
                    "bool",
                    "Optional[Callable]",
                    "None",
                    "Optional[str]",
                    "int"
                ],
                "expected_result": [
                    "typing.Mapping",
                    "Mapping[str, Any]",
                    "int",
                    "dict[, ]",
                    "dict",
                    "list[str]",
                    "List[str]",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        }
    },
    "flake8-aaa-master/tests/helpers/test_line_is_comment.py": {
        "test": {
            "name": "test",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "line": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "Set[str]",
                    "None",
                    "set[str]"
                ],
                "expected_result": [
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "Dict[str, str]",
                    "None",
                    "Dict[str, Union[int, str]]",
                    "dict[str, str]",
                    "dict",
                    "dict[str, typing.Union[int,str]]",
                    "Dict[str, Any]",
                    "dict[, ]"
                ]
            }
        }
    },
    "flake8-aaa-master/tests/helpers/test_node_is_pytest_raises.py": {
        "test": {
            "name": "test",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "first_node_with_tokens": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "int"
                ]
            }
        },
        "test_no": {
            "name": "test_no",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "code_str": [
                    "str"
                ]
            }
        }
    },
    "flake8-aaa-master/tests/helpers/test_node_is_result_assignment.py": {
        "test_no": {
            "name": "test_no",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "first_node_with_tokens": [
                    "bytes",
                    "str",
                    "dict",
                    "bool",
                    "dict[, ]"
                ],
                "expected_result": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]",
                    "Dict[str, int]",
                    "dict[str, int]",
                    "Dict[int, List[Any]]",
                    "dict[int, list[typing.Any]]"
                ]
            }
        }
    },
    "flake8-aaa-master/tests/helpers/test_node_is_unittest_raises.py": {
        "test": {
            "name": "test",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "first_node_with_tokens": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "int"
                ]
            }
        },
        "test_no": {
            "name": "test_no",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "code_str": [
                    "str"
                ]
            }
        }
    },
    "flake8-aaa-master/tests/helpers/__init__.py": {},
    "flake8-aaa-master/tests/line_markers/test_check_act_assert_spacing.py": {
        "test_comment_before_assert": {
            "name": "test_comment_before_assert",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_none": {
            "name": "test_none",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_no_gap": {
            "name": "test_no_gap",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_too_big_gap": {
            "name": "test_too_big_gap",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "flake8-aaa-master/tests/line_markers/test_check_arrange_act_spacing.py": {
        "test_comment_before_act": {
            "name": "test_comment_before_act",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_no_arrange": {
            "name": "test_no_arrange",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_no_gap": {
            "name": "test_no_gap",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_too_big_gap": {
            "name": "test_too_big_gap",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "flake8-aaa-master/tests/line_markers/test_check_blank_lines.py": {
        "test_ok": {
            "name": "test_ok",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_arrange": {
            "name": "test_arrange",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_func_def": {
            "name": "test_func_def",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "flake8-aaa-master/tests/line_markers/test_comment_in_act.py": {
        "test_ok": {
            "name": "test_ok",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_comment_end_of_test": {
            "name": "test_comment_end_of_test",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_comment_before": {
            "name": "test_comment_before",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_comment_inside": {
            "name": "test_comment_inside",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_comment_after": {
            "name": "test_comment_after",
            "location": 90,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "flake8-aaa-master/tests/line_markers/test_init.py": {
        "test": {
            "name": "test",
            "location": 5,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "flake8-aaa-master/tests/line_markers/test_set.py": {
        "test_mark_qqq": {
            "name": "test_mark_qqq",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "new_type": [
                    "str",
                    "bool",
                    "type",
                    "typing.Type",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_mark_skip": {
            "name": "test_mark_skip",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "existing_type": [
                    "str",
                    "type",
                    "typing.Type",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "new_type": [
                    "typing.Type",
                    "mypy.types.CallableType",
                    "typing.Callable[, ]",
                    "Type",
                    "Callable"
                ]
            }
        },
        "test_reassign": {
            "name": "test_reassign",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "mark_bl_cmt_on_bl_cmt": {
            "name": "mark_bl_cmt_on_bl_cmt",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "existing_type": [
                    "str",
                    "mypy.types.Instance",
                    "typing.Type",
                    "typing.Callable[str, mypy.types.Instance]",
                    "Union[str, 'Type']",
                    "Type",
                    "Callable[[str], mypy.types.Instance]"
                ],
                "new_type": [
                    "set[str]",
                    "Set[str]",
                    "set[]",
                    "set",
                    "list[]",
                    "list",
                    "typing.Type",
                    "Type[Any]",
                    "list[typing.Union[str,int]]",
                    "List[Union[str, int]]",
                    "types.SchemaT"
                ]
            }
        },
        "test_blocks_not_overwritten": {
            "name": "test_blocks_not_overwritten",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "existing_type": [
                    "str"
                ],
                "new_type": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_out_of_range": {
            "name": "test_out_of_range",
            "location": 127,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_unprocessed": {
            "name": "test_unprocessed",
            "location": 134,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_not_line_type": {
            "name": "test_not_line_type",
            "location": 146,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "flake8-aaa-master/tests/line_markers/test_update.py": {
        "test": {
            "name": "test",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_collision": {
            "name": "test_collision",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "flake8-aaa-master/tests/line_markers/__init__.py": {},
    "flake8-aaa-master/tests/types/test_line_type.py": {
        "test_str": {
            "name": "test_str",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "stringy": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "flake8-aaa-master/tests/types/__init__.py": {}
}
{
    "flake8-alfred-master/setup.py": {},
    "flake8-alfred-master/flake8_alfred/symbols.py": {
        "visit_arguments_defaults": {
            "name": "visit_arguments_defaults",
            "location": 85,
            "return": [
                "Iterable[Tuple[(str, Union[(_ast.expr, _ast.stmt)])]]"
            ],
            "arguments": {
                "vtor": [
                    "SymbolsVisitor"
                ],
                "node": [
                    "_ast.arguments"
                ]
            }
        },
        "visit_arguments_names": {
            "name": "visit_arguments_names",
            "location": 93,
            "return": [
                "Iterable[Tuple[(str, Union[(_ast.expr, _ast.stmt)])]]"
            ],
            "arguments": {
                "vtor": [
                    "SymbolsVisitor"
                ],
                "node": [
                    "_ast.arguments"
                ]
            }
        },
        "visit_optional": {
            "name": "visit_optional",
            "location": 101,
            "return": [
                "Iterable[B]"
            ],
            "arguments": {
                "vtor": [
                    "flake8_alfred.visitor.Visitor[(Iterable[B], Iterable[B], Any)]"
                ],
                "node": [
                    "Optional[A]"
                ]
            }
        },
        "visit_iterable": {
            "name": "visit_iterable",
            "location": 110,
            "return": [
                "Iterable[B]"
            ],
            "arguments": {
                "vtor": [
                    "flake8_alfred.visitor.Visitor[(Iterable[B], Iterable[B], Any)]"
                ],
                "node": [
                    "Iterable"
                ]
            }
        },
        "visit_arg": {
            "name": "visit_arg",
            "location": 123,
            "return": [
                "Iterable[Tuple[(str, Union[(_ast.expr, _ast.stmt)])]]"
            ],
            "arguments": {
                "vtor": [
                    "SymbolsVisitor"
                ],
                "node": [
                    "_ast.arg"
                ]
            }
        },
        "visit_arguments": {
            "name": "visit_arguments",
            "location": 130,
            "return": [
                "Iterable[Tuple[(str, Union[(_ast.expr, _ast.stmt)])]]"
            ],
            "arguments": {
                "vtor": [
                    "SymbolsVisitor"
                ],
                "node": [
                    "_ast.arguments"
                ]
            }
        },
        "visit_comprehension": {
            "name": "visit_comprehension",
            "location": 137,
            "return": [
                "Iterable[Tuple[(str, Union[(_ast.expr, _ast.stmt)])]]"
            ],
            "arguments": {
                "vtor": [
                    "SymbolsVisitor"
                ],
                "node": [
                    "_ast.comprehension"
                ]
            }
        },
        "visit_except_handler": {
            "name": "visit_except_handler",
            "location": 147,
            "return": [
                "Iterable[Tuple[(str, Union[(_ast.expr, _ast.stmt)])]]"
            ],
            "arguments": {
                "vtor": [
                    "SymbolsVisitor"
                ],
                "node": [
                    "_ast.ExceptHandler"
                ]
            }
        },
        "visit_class_def": {
            "name": "visit_class_def",
            "location": 161,
            "return": [
                "Iterable[Tuple[(str, Union[(_ast.expr, _ast.stmt)])]]"
            ],
            "arguments": {
                "vtor": [
                    "SymbolsVisitor"
                ],
                "node": [
                    "_ast.ClassDef"
                ]
            }
        },
        "visit_function": {
            "name": "visit_function",
            "location": 175,
            "return": [
                "Iterable[Tuple[(str, Union[(_ast.expr, _ast.stmt)])]]"
            ],
            "arguments": {
                "vtor": [
                    "SymbolsVisitor"
                ],
                "node": [
                    "Union[(_ast.AsyncFunctionDef, _ast.FunctionDef)]"
                ]
            }
        },
        "visit_import": {
            "name": "visit_import",
            "location": 190,
            "return": [
                "Iterable[Tuple[(str, Union[(_ast.expr, _ast.stmt)])]]"
            ],
            "arguments": {
                "vtor": [
                    "SymbolsVisitor"
                ],
                "node": [
                    "_ast.Import"
                ]
            }
        },
        "visit_import_from": {
            "name": "visit_import_from",
            "location": 198,
            "return": [
                "Iterable[Tuple[(str, Union[(_ast.expr, _ast.stmt)])]]"
            ],
            "arguments": {
                "vtor": [
                    "SymbolsVisitor"
                ],
                "node": [
                    "_ast.ImportFrom"
                ]
            }
        },
        "visit_attribute": {
            "name": "visit_attribute",
            "location": 211,
            "return": [
                "Iterable[Tuple[(str, Union[(_ast.expr, _ast.stmt)])]]"
            ],
            "arguments": {
                "vtor": [
                    "SymbolsVisitor"
                ],
                "node": [
                    "_ast.Attribute"
                ]
            }
        },
        "visit_dict_comp": {
            "name": "visit_dict_comp",
            "location": 218,
            "return": [
                "Iterable[Tuple[(str, Union[(_ast.expr, _ast.stmt)])]]"
            ],
            "arguments": {
                "vtor": [
                    "SymbolsVisitor"
                ],
                "node": [
                    "_ast.DictComp"
                ]
            }
        },
        "visit_lambda": {
            "name": "visit_lambda",
            "location": 227,
            "return": [
                "Iterable[Tuple[(str, Union[(_ast.expr, _ast.stmt)])]]"
            ],
            "arguments": {
                "vtor": [
                    "SymbolsVisitor"
                ],
                "node": [
                    "_ast.Lambda"
                ]
            }
        },
        "visit_name": {
            "name": "visit_name",
            "location": 235,
            "return": [
                "Iterable[Tuple[(str, Union[(_ast.expr, _ast.stmt)])]]"
            ],
            "arguments": {
                "vtor": [
                    "SymbolsVisitor"
                ],
                "node": [
                    "_ast.Name"
                ]
            }
        },
        "visit_unary_comp": {
            "name": "visit_unary_comp",
            "location": 249,
            "return": [
                "Iterable[Tuple[(str, Union[(_ast.expr, _ast.stmt)])]]"
            ],
            "arguments": {
                "vtor": [
                    "SymbolsVisitor"
                ],
                "node": [
                    "Union[(_ast.GeneratorExp, _ast.ListComp, _ast.SetComp)]"
                ]
            }
        },
        "SymbolsVisitor.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SymbolsVisitor.scope": {
            "name": "scope",
            "location": 64,
            "return": [
                "typing.Iterator[typing.Mapping[builtins.str, typing.Optional[builtins.str]]]",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SymbolsVisitor.generic_visit": {
            "name": "generic_visit",
            "location": 74,
            "return": [
                "Iterable[Tuple[(str, Union[(_ast.expr, _ast.stmt)])]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "_ast.AST"
                ]
            }
        }
    },
    "flake8-alfred-master/flake8_alfred/visitor.py": {
        "RegisterMeta.__prepare__": {
            "name": "__prepare__",
            "location": 22,
            "return": [
                "dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "tuple",
                    "tuple[]"
                ],
                "name": [
                    "str"
                ],
                "bases": [
                    "Tuple[type]"
                ]
            }
        },
        "RegisterMeta.shared_dict": {
            "name": "shared_dict",
            "location": 27,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "int",
                    "dict"
                ]
            }
        },
        "Dispatcher.dispatch": {
            "name": "dispatch",
            "location": 43,
            "return": [
                "B"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "A"
                ]
            }
        },
        "Dispatcher.on": {
            "name": "on",
            "location": 48,
            "return": [
                "Callable[([C], C)]"
            ],
            "arguments": {
                "cls": [
                    "Type[Dispatcher]"
                ],
                "key": [
                    "Hashable"
                ]
            }
        },
        "Visitor.generic_visit": {
            "name": "generic_visit",
            "location": 58,
            "return": [
                "B"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "A"
                ]
            }
        },
        "Visitor.visit": {
            "name": "visit",
            "location": 64,
            "return": [
                "B"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "A"
                ]
            }
        },
        "Dispatcher.on._wrapper": {
            "name": "_wrapper",
            "location": 50,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "value": [
                    "float",
                    "dict",
                    "Match",
                    "str"
                ]
            }
        }
    },
    "flake8-alfred-master/flake8_alfred/__init__.py": {
        "submodules": {
            "name": "submodules",
            "location": 62,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "symbol": [
                    "str"
                ]
            }
        },
        "WarnSymbols.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "_ast.AST"
                ]
            }
        },
        "WarnSymbols.add_options": {
            "name": "add_options",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "parser": []
            }
        },
        "WarnSymbols.parse_options": {
            "name": "parse_options",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Exception",
                    "Match[str]",
                    "BaseException",
                    "typing.Match",
                    "bool",
                    "Type[T]",
                    "typing.Type"
                ],
                "options": [
                    "type",
                    "typing.Type",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]",
                    "None"
                ]
            }
        },
        "WarnSymbols.run": {
            "name": "run",
            "location": 47,
            "return": [
                "Iterator[Tuple[(int, int, str, type)]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flake8-alfred-master/tests/test_visitor.py": {
        "test_visitor": {
            "name": "test_visitor",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
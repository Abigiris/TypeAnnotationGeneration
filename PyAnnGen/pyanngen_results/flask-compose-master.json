{
    "flask-compose-master/setup.py": {},
    "flask-compose-master/examples/basic_usage.py": {
        "create_user": {
            "name": "create_user",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "handler": [
                    "str",
                    "Exception",
                    "dict",
                    "Union[str, int]"
                ]
            }
        },
        "MyHandler.create": {
            "name": "create",
            "location": 23,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "A.create": {
            "name": "create",
            "location": 31,
            "return": [
                "Union[int, float, complex]",
                "list",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "B.create": {
            "name": "create",
            "location": 39,
            "return": [
                "Union[int, float, complex]",
                "list",
                "set"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flask-compose-master/examples/app/run.py": {},
    "flask-compose-master/examples/app/app/common.py": {},
    "flask-compose-master/examples/app/app/components.py": {
        "ActiveUserComponent.make_query": {
            "name": "make_query",
            "location": 17,
            "return": [
                "Dict[str, Any]",
                "Dict[str, float]",
                "Dict[str, Dict[str, Any]]",
                "Dict[str, models.DeviceRow]"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "List[dict]",
                    "Dict[str,dict[str,Any]]",
                    "bool",
                    "Dict[str,Dict[str,Any]]",
                    "List[dict[str,Any]]",
                    "Dict[str,Any]",
                    "django.db.models.Model",
                    "List[Dict[str,Any]]"
                ]
            }
        },
        "TypeComponent.query": {
            "name": "query",
            "location": 29,
            "return": [
                "bool",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeComponent.make_query": {
            "name": "make_query",
            "location": 32,
            "return": [
                "str",
                "bool",
                "db.models.Taxon"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Dict",
                    "None",
                    "Optional[str]",
                    "Callable[str,Any]",
                    "Optional[Callable[[str],Any]]",
                    "zerver.models.Stream"
                ]
            }
        },
        "UserComponent.schema_dump_options": {
            "name": "schema_dump_options",
            "location": 45,
            "return": [
                "Optional[int]",
                "T",
                "Optional[str]",
                "Optional[List[Callable]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserComponent.schema_load_options": {
            "name": "schema_load_options",
            "location": 49,
            "return": [
                "str",
                "list",
                "Callable",
                "Tuple[int, int]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateComponent.schema_load_options": {
            "name": "schema_load_options",
            "location": 56,
            "return": [
                "str",
                "list",
                "Callable",
                "Tuple[int, int]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserChildMixin.query": {
            "name": "query",
            "location": 64,
            "return": [
                "bool",
                "dict",
                "Dict[str, Tuple[Any, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONAPIComponent.make_query": {
            "name": "make_query",
            "location": 93,
            "return": [
                "str",
                "int",
                "bool",
                "db.models.Taxon",
                "List",
                "Counter",
                "List[str]",
                "frozenset"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "bool"
                ]
            }
        },
        "JSONAPIComponent.deserialize": {
            "name": "deserialize",
            "location": 99,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "str",
                    "int",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "request": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "JSONAPIComponent.serialize": {
            "name": "serialize",
            "location": 154,
            "return": [
                "Dict[(str, Dict[(str, Any)])]"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "int",
                    "str",
                    "Optional[List[str]]",
                    "float",
                    "List[str]",
                    "None"
                ],
                "model": [
                    "int",
                    "str",
                    "Optional[List[str]]",
                    "float",
                    "List[str]",
                    "None"
                ]
            }
        },
        "JSONAPIComponent.deserialize.structure_errors": {
            "name": "structure_errors",
            "location": 101,
            "return": [
                "Dict[Text,list]",
                "str",
                "Dict"
            ],
            "arguments": {
                "errors": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Dict[str, List[str]]",
                    "bool",
                    "Mapping[str, str]"
                ]
            }
        },
        "JSONAPIComponent.deserialize.structure_error": {
            "name": "structure_error",
            "location": 109,
            "return": [
                "Dict[Text,dict[Text,str]]",
                "str",
                "int"
            ],
            "arguments": {
                "field_name": [
                    "str",
                    "Sequence[str]",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "message": [
                    "str",
                    "List[str]",
                    "Sequence[str]"
                ],
                "index": [
                    "None",
                    "str",
                    "Optional[List[str]]",
                    "List[Tuple[int,int]]",
                    "List[Tuple[str,Any]]",
                    "Optional[Iterable[int]]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "JSONAPIComponent.serialize.structure_contents": {
            "name": "structure_contents",
            "location": 156,
            "return": [
                "Dict[str, List[Any]]",
                "Optional[Dict[str, Any]]",
                "int",
                "dict",
                "Dict[str, Any]",
                "games.models.Game",
                "Dict[str, str]",
                "List[mtg_ssm.scryfall.models.ScryCard]"
            ],
            "arguments": {
                "item": [
                    "dict",
                    "str",
                    "Dict[int, Dict[str, Any]]",
                    "Iterable[T]",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "flask-compose-master/examples/app/app/controllers.py": {
        "browse_type": {
            "name": "browse_type",
            "location": 60,
            "return": [
                "Tuple[(Any, int)]"
            ],
            "arguments": {
                "handler": [
                    "Callable(id)[[object], int]"
                ]
            }
        },
        "get_type": {
            "name": "get_type",
            "location": 80,
            "return": [
                "Tuple[(Any, int)]"
            ],
            "arguments": {
                "handler": [
                    "Type[tikki.db.tables.Base]",
                    "Dict[str, Any]",
                    "Type[T]",
                    "str"
                ]
            }
        },
        "create_type": {
            "name": "create_type",
            "location": 103,
            "return": [
                "Tuple[(Any, int)]"
            ],
            "arguments": {
                "handler": [
                    "Exception",
                    "Dict[str, Any]"
                ]
            }
        },
        "update_type": {
            "name": "update_type",
            "location": 132,
            "return": [
                "Tuple[(Any, int)]"
            ],
            "arguments": {
                "handler": [
                    "int",
                    "Type[tikki.db.tables.Base]",
                    "Dict[str, Any]",
                    "Optional[Union[int, str]]",
                    "str"
                ]
            }
        },
        "delete_type": {
            "name": "delete_type",
            "location": 171,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {
                "handler": [
                    "int",
                    "Type[tikki.db.tables.Base]",
                    "Dict[str, Any]",
                    "str",
                    "dict"
                ]
            }
        },
        "PlatformHandler.model": {
            "name": "model",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PlatformHandler.schema": {
            "name": "schema",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PlatformHandler.schema_dump_options": {
            "name": "schema_dump_options",
            "location": 34,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlatformHandler.schema_load_options": {
            "name": "schema_load_options",
            "location": 38,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlatformHandler.fetch_all": {
            "name": "fetch_all",
            "location": 42,
            "return": [
                "dict",
                "Dict[str, float]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "List[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "PlatformHandler.fetch_one": {
            "name": "fetch_one",
            "location": 46,
            "return": [
                "bool",
                "Dict[str, Set[str]]",
                "Type",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Optional[int]",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "PlatformHandler.make_query": {
            "name": "make_query",
            "location": 50,
            "return": [
                "str",
                "bool",
                "db.models.Taxon"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "List[str]",
                    "Set[str]"
                ]
            }
        },
        "PlatformHandler.deserialize": {
            "name": "deserialize",
            "location": 53,
            "return": [
                "List[str]",
                "int",
                "Optional[str]",
                "rotkehlchen.db.dbhandler.DBHandler"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "int",
                    "List[bytes]",
                    "dict"
                ],
                "request": [
                    "int",
                    "List[bytes]",
                    "dict"
                ]
            }
        },
        "PlatformHandler.serialize": {
            "name": "serialize",
            "location": 56,
            "return": [
                "str",
                "Tuple[float, float]",
                "int"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "str"
                ],
                "model": [
                    "str"
                ]
            }
        }
    },
    "flask-compose-master/examples/app/app/middleware.py": {
        "render_response": {
            "name": "render_response",
            "location": 4,
            "return": [
                "Callable"
            ],
            "arguments": {
                "fn": [
                    "Generator[str,None,None]",
                    "bool",
                    "Generator[Union[str,None,None]]",
                    "str",
                    "Any"
                ]
            }
        },
        "render_response.decorator": {
            "name": "decorator",
            "location": 6,
            "return": [
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "flask-compose-master/examples/app/app/models.py": {},
    "flask-compose-master/examples/app/app/routes.py": {},
    "flask-compose-master/examples/app/app/schemas.py": {},
    "flask-compose-master/examples/app/app/__init__.py": {},
    "flask-compose-master/flask_compose/__init__.py": {
        "dispatch_request": {
            "name": "dispatch_request",
            "location": 53,
            "return": [
                "int",
                "float",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "Callable",
                    "int",
                    "None",
                    "Optional[bool]",
                    "bool"
                ],
                "handler": [
                    "Callable"
                ],
                "components": [
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "Component.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "bool",
                    "List[str]",
                    "Tuple[Type]",
                    "Tuple[type]",
                    "int"
                ]
            }
        },
        "Component.__getattr__": {
            "name": "__getattr__",
            "location": 34,
            "return": [
                "Optional[BaseException]",
                "type",
                "Optional[T]",
                "Callable",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Tuple",
                    "Callable",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Component.__repr__": {
            "name": "__repr__",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Handler.__repr__": {
            "name": "__repr__",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RouteLike.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Text",
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "Dict"
                ],
                "middleware": [
                    "int",
                    "None",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ],
                "components": [
                    "int",
                    "None",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ],
                "ignored_middleware": [
                    "int",
                    "None",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ],
                "ignored_components": [
                    "int",
                    "None",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Route.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "Optional[Callable]",
                    "Callable",
                    "None"
                ],
                "controller": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "handler": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "method": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Route.make_url_rule": {
            "name": "make_url_rule",
            "location": 89,
            "return": [
                "Rule"
            ],
            "arguments": {
                "self": [],
                "includes": [
                    "Tuple[Union[int,int]]",
                    "bool",
                    "Iterator[str]",
                    "int",
                    "Tuple[int,int]",
                    "T"
                ]
            }
        },
        "Include.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int",
                    "bool"
                ],
                "routes": [
                    "bool",
                    "List[str]",
                    "str",
                    "Dict"
                ]
            }
        },
        "Include.__iter__": {
            "name": "__iter__",
            "location": 159,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Include.iter_route_set": {
            "name": "iter_route_set",
            "location": 162,
            "return": [
                "Generator[(Tuple[(_T0, Any)], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int"
                ]
            }
        },
        "Router.__init__": {
            "name": "__init__",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "Router.__iter__": {
            "name": "__iter__",
            "location": 177,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Router.__getitem__": {
            "name": "__getitem__",
            "location": 180,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "Tuple",
                    "Dict[str,str]",
                    "None",
                    "int",
                    "Callable[[KT],VT]",
                    "Callable[T,T]",
                    "Type[RuntimeError]",
                    "Type"
                ]
            }
        },
        "Router.__contains__": {
            "name": "__contains__",
            "location": 183,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "Router.__len__": {
            "name": "__len__",
            "location": 186,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Router.add_routes": {
            "name": "add_routes",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "Router.add_route": {
            "name": "add_route",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "includes": [
                    "str"
                ],
                "route": [
                    "str"
                ]
            }
        },
        "Router.add_rule": {
            "name": "add_rule",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "str",
                    "bool",
                    "Exception",
                    "int"
                ]
            }
        },
        "Router.items": {
            "name": "items",
            "location": 208,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flask-compose-master/tests/include_tests.py": {
        "IncludeTestCase.test_iter_include": {
            "name": "test_iter_include",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flask-compose-master/tests/router_tests.py": {
        "controller": {
            "name": "controller",
            "location": 10,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {
                "handler": [
                    "bool",
                    "List[str]",
                    "int",
                    "None",
                    "Optional[T]"
                ]
            }
        },
        "RouterTestCase.test_router_add_routes": {
            "name": "test_router_add_routes",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RouterTestCase.test_router_dict": {
            "name": "test_router_dict",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flask-compose-master/tests/route_tests.py": {
        "controller": {
            "name": "controller",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "a_middleware": {
            "name": "a_middleware",
            "location": 14,
            "return": [
                "Dict[str,int]",
                "int",
                "bool",
                "float",
                "str"
            ],
            "arguments": {
                "fn": [
                    "Dict[str,int]",
                    "bool"
                ]
            }
        },
        "b_middleware": {
            "name": "b_middleware",
            "location": 15,
            "return": [
                "str",
                "Iterable[Any]",
                "float",
                "int"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "Iterable[Any]"
                ]
            }
        },
        "c_middleware": {
            "name": "c_middleware",
            "location": 16,
            "return": [
                "str",
                "T",
                "float",
                "int"
            ],
            "arguments": {
                "fn": [
                    "str"
                ]
            }
        },
        "RouteTestCase.test_make_url_rule": {
            "name": "test_make_url_rule",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RouteTestCase.test_unnamed_make_url_rule": {
            "name": "test_unnamed_make_url_rule",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flask-compose-master/tests/type_tests.py": {
        "Handler.test": {
            "name": "test",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Handler.leak": {
            "name": "leak",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "A.leak": {
            "name": "leak",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "A.check_val": {
            "name": "check_val",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "B.leak": {
            "name": "leak",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeTestCase.test_component": {
            "name": "test_component",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeTestCase.test_component_leaking": {
            "name": "test_component_leaking",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeTestCase.test_dispatch_request": {
            "name": "test_dispatch_request",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeTestCase.test_dispatch_request.controller": {
            "name": "controller",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "handler": [
                    "int",
                    "bool",
                    "Mapping[Any, Any]"
                ]
            }
        }
    },
    "flask-compose-master/tests/__init__.py": {}
}
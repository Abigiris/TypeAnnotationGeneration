{
    "flask-logging-decorator-master/setup.py": {},
    "flask-logging-decorator-master/example/main.py": {
        "index": {
            "name": "index",
            "location": 17,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "foo": {
            "name": "foo",
            "location": 23,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "flask-logging-decorator-master/flask_logging_decorator/__init__.py": {
        "__get_trace_uuid": {
            "name": "__get_trace_uuid",
            "location": 16,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "trace": {
            "name": "trace",
            "location": 25,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "level": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "trace.outer": {
            "name": "outer",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "f": [
                    "Callable",
                    "Tuple[str, str, int]",
                    "dict",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "trace.outer.wrapper": {
            "name": "wrapper",
            "location": 28,
            "return": [
                "str",
                "int",
                "bytes",
                "Dict[str, Any]",
                "Iterable[str]"
            ],
            "arguments": {}
        }
    },
    "flask-logging-decorator-master/flask_logging_decorator/tests/test_trace.py": {
        "fake_handler": {
            "name": "fake_handler",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "values": {
            "name": "values",
            "location": 18,
            "return": [
                "Dict[Text,Text]",
                "Optional[List[str]]",
                "Dict",
                "Optional[bool]",
                "int",
                "List[AnyStr]"
            ],
            "arguments": {}
        },
        "get_expected": {
            "name": "get_expected",
            "location": 23,
            "return": [
                "List[Text]",
                "List[str]",
                "str"
            ],
            "arguments": {}
        },
        "post_expected": {
            "name": "post_expected",
            "location": 29,
            "return": [
                "List[Text]",
                "str",
                "Dict[str,Any]",
                "Optional[Set[str]]"
            ],
            "arguments": {}
        },
        "put_expected": {
            "name": "put_expected",
            "location": 35,
            "return": [
                "List[Text]",
                "Optional[Set[str]]",
                "str"
            ],
            "arguments": {}
        },
        "get_expected_critical": {
            "name": "get_expected_critical",
            "location": 41,
            "return": [
                "List[Text]",
                "str",
                "float",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "post_expected_critical": {
            "name": "post_expected_critical",
            "location": 47,
            "return": [
                "List[Text]",
                "Sequence[str]",
                "int",
                "Dict"
            ],
            "arguments": {}
        },
        "put_expected_critical": {
            "name": "put_expected_critical",
            "location": 53,
            "return": [
                "List[Text]",
                "bytearray",
                "str",
                "Dict[str,int]"
            ],
            "arguments": {}
        },
        "test_trace": {
            "name": "test_trace",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "bool",
                    "str",
                    "IO[bytes]"
                ],
                "caplog": [
                    "Sequence[str]",
                    "dict",
                    "Exception",
                    "List[str]",
                    "MutableMapping[str, Any]",
                    "str"
                ],
                "method": [
                    "str",
                    "Dict[str,str]",
                    "Dict",
                    "bytes"
                ],
                "get_expected": [
                    "List[str]",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "post_expected": [
                    "List[str]",
                    "List[tuple[Union[int,int]]]",
                    "List",
                    "bool",
                    "Callable",
                    "List[Tuple[int,int]]",
                    "Optional[List]"
                ],
                "put_expected": [
                    "str",
                    "Tuple",
                    "float",
                    "bool"
                ],
                "is_json": [
                    "bool",
                    "Callable",
                    "str"
                ],
                "values": [
                    "Dict",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "app_log_level": [
                    "int",
                    "str",
                    "Callable[...,None]",
                    "Collection",
                    "Collection[str]",
                    "bool"
                ],
                "trace_log_level": [
                    "str",
                    "List[str]",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "flask-logging-decorator-master/flask_logging_decorator/tests/__init__.py": {}
}
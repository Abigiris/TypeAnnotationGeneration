{
    "flask-mongodb-celery-messaging-api-master/app/config.py": {},
    "flask-mongodb-celery-messaging-api-master/app/main.py": {},
    "flask-mongodb-celery-messaging-api-master/app/__init__.py": {
        "create_app": {
            "name": "create_app",
            "location": 26,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "create_app.call": {
            "name": "call",
            "location": 63,
            "return": [
                "Sequence[int]",
                "float",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flask-mongodb-celery-messaging-api-master/app/api/auth.py": {
        "AuthResource.post": {
            "name": "post",
            "location": 27,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flask-mongodb-celery-messaging-api-master/app/api/health.py": {
        "HealthResource.get": {
            "name": "get",
            "location": 23,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "HealthResource.post": {
            "name": "post",
            "location": 35,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flask-mongodb-celery-messaging-api-master/app/api/messages.py": {
        "MessagesResource.get": {
            "name": "get",
            "location": 30,
            "return": [
                "dict[, list[]]",
                "int",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessagesResource.post": {
            "name": "post",
            "location": 48,
            "return": [
                "dict[, ]",
                "dict",
                "Dict[str, Any]",
                "str",
                "int",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flask-mongodb-celery-messaging-api-master/app/api/notifications.py": {
        "NotificationsResource.get": {
            "name": "get",
            "location": 28,
            "return": [
                "dict[, typing.Union[str,None]]",
                "str",
                "int",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flask-mongodb-celery-messaging-api-master/app/api/users.py": {
        "UsersResource.get": {
            "name": "get",
            "location": 30,
            "return": [
                "dict[, list[]]",
                "Dict[str, Any]",
                "Exception",
                "Dict[str, str]",
                "int",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersResource.post": {
            "name": "post",
            "location": 48,
            "return": [
                "dict[, ]",
                "dict",
                "Dict[str, Any]",
                "str",
                "int",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flask-mongodb-celery-messaging-api-master/app/api/__init__.py": {},
    "flask-mongodb-celery-messaging-api-master/app/controllers/health.py": {
        "HealthController.check": {
            "name": "check",
            "location": 33,
            "return": [
                "dict"
            ],
            "arguments": {
                "cls": [
                    "type",
                    "Set[str]",
                    "str"
                ]
            }
        },
        "HealthController.__check_db_health": {
            "name": "__check_db_health",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "Type[T]",
                    "bool",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "list[dict[, ]]",
                    "List[Dict]",
                    "dict[str, bool]",
                    "Type[tuple]",
                    "Dict[str, bool]"
                ]
            }
        },
        "HealthController.__check_cache_health": {
            "name": "__check_cache_health",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "flask-mongodb-celery-messaging-api-master/app/controllers/messages.py": {
        "MessagesController.search": {
            "name": "search",
            "location": 44,
            "return": [
                "List[app.models.message.Message]"
            ],
            "arguments": {
                "cls": [
                    "typing.Type[MessagesController]"
                ],
                "query": [
                    "dict"
                ],
                "session": [
                    "dict"
                ]
            }
        },
        "MessagesController.send": {
            "name": "send",
            "location": 61,
            "return": [
                "app.models.message.Message"
            ],
            "arguments": {
                "cls": [
                    "typing.Type[MessagesController]"
                ],
                "query": [
                    "dict"
                ],
                "session": [
                    "dict"
                ]
            }
        },
        "MessagesController.__send_image": {
            "name": "__send_image",
            "location": 83,
            "return": [
                "Message",
                "List[django.db.models.query.QuerySet]",
                "int",
                "Sequence[str]",
                "Callable",
                "Iterable[str]"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "None",
                    "Union[None, dict]",
                    "Optional[str]"
                ],
                "content": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "Dict[str, str]",
                    "None",
                    "dict[str, str]"
                ]
            }
        },
        "MessagesController.__send_text": {
            "name": "__send_text",
            "location": 95,
            "return": [
                "Message",
                "Sequence[str]",
                "Iterable[str]",
                "int",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "content": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "MessagesController.__send_video": {
            "name": "__send_video",
            "location": 105,
            "return": [
                "Message",
                "Iterable[str]",
                "int",
                "Callable",
                "str",
                "List[django.db.models.query.QuerySet]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "dict[, ]",
                    "Mapping[str, str]",
                    "typing.Mapping",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "content": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "flask-mongodb-celery-messaging-api-master/app/controllers/notifications.py": {
        "NotificationsController.search": {
            "name": "search",
            "location": 38,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "cls": [
                    "float",
                    "sqlalchemy.orm.Session",
                    "str",
                    "int",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]"
                ],
                "query": [
                    "dict"
                ],
                "session": [
                    "dict"
                ]
            }
        },
        "NotificationsController.send": {
            "name": "send",
            "location": 50,
            "return": [
                "app.models.notification.Notification"
            ],
            "arguments": {
                "cls": [
                    "dict[str, str]",
                    "bool",
                    "sqlalchemy.orm.Session",
                    "typing.Callable[, ]",
                    "Dict[str, str]",
                    "int",
                    "mwapi.Session",
                    "Callable"
                ],
                "query": [
                    "dict"
                ],
                "session": [
                    "dict"
                ]
            }
        },
        "NotificationsController.send_me": {
            "name": "send_me",
            "location": 69,
            "return": [
                "app.models.notification.Notification"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "dict",
                    "typing.AnyStr",
                    "sqlalchemy.orm.session.Session",
                    "AnyStr"
                ],
                "query": [
                    "dict"
                ],
                "session": [
                    "dict"
                ]
            }
        },
        "NotificationsController.search_mine": {
            "name": "search_mine",
            "location": 77,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "dict",
                    "sqlalchemy.orm.session.Session"
                ],
                "query": [
                    "dict"
                ],
                "session": [
                    "dict"
                ]
            }
        }
    },
    "flask-mongodb-celery-messaging-api-master/app/controllers/users.py": {
        "UsersController.login": {
            "name": "login",
            "location": 44,
            "return": [
                "tuple"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "query": [
                    "dict"
                ]
            }
        },
        "UsersController.create": {
            "name": "create",
            "location": 61,
            "return": [
                "app.models.user.User"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Union[models.address.ZipCode, int, str]",
                    "int",
                    "recidiviz.persistence.database.session.Session",
                    "str"
                ],
                "query": [
                    "dict"
                ],
                "session": [
                    "dict"
                ]
            }
        },
        "UsersController.get_by_username": {
            "name": "get_by_username",
            "location": 79,
            "return": [
                "app.models.user.User"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "Type[T]",
                    "typing.Type",
                    "List[str]",
                    "list[str]"
                ],
                "username": [
                    "str"
                ]
            }
        },
        "UsersController.get_by_id": {
            "name": "get_by_id",
            "location": 99,
            "return": [
                "app.models.user.User"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "bool",
                    "List[str]",
                    "List[manager.models.language.Language]"
                ],
                "user_id": [
                    "str"
                ]
            }
        },
        "UsersController.search": {
            "name": "search",
            "location": 119,
            "return": [
                "List[app.models.user.User]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "query": [
                    "dict"
                ],
                "session": [
                    "dict"
                ]
            }
        }
    },
    "flask-mongodb-celery-messaging-api-master/app/controllers/__init__.py": {
        "Cache.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Cache.__str__": {
            "name": "__str__",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cache.get_value": {
            "name": "get_value",
            "location": 40,
            "return": [
                "Tuple[int, int]",
                "int",
                "List[int]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cache.set_value": {
            "name": "set_value",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "object"
                ],
                "expires_in": [
                    "int"
                ]
            }
        },
        "Cache.is_cached": {
            "name": "is_cached",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.__str__": {
            "name": "__str__",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.get_values": {
            "name": "get_values",
            "location": 73,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int"
                ],
                "end": [
                    "int"
                ]
            }
        },
        "Queue.add": {
            "name": "add",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "dict"
                ]
            }
        }
    },
    "flask-mongodb-celery-messaging-api-master/app/exceptions/auth.py": {},
    "flask-mongodb-celery-messaging-api-master/app/exceptions/form.py": {},
    "flask-mongodb-celery-messaging-api-master/app/exceptions/health.py": {},
    "flask-mongodb-celery-messaging-api-master/app/exceptions/not_found.py": {},
    "flask-mongodb-celery-messaging-api-master/app/exceptions/__init__.py": {
        "IguazuException.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IguazuException.code": {
            "name": "code",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IguazuException.subcode": {
            "name": "subcode",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IguazuException.to_str": {
            "name": "to_str",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IguazuException.to_json": {
            "name": "to_json",
            "location": 53,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flask-mongodb-celery-messaging-api-master/app/models/message.py": {
        "Message.__str__": {
            "name": "__str__",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.get_id": {
            "name": "get_id",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.to_json": {
            "name": "to_json",
            "location": 82,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flask-mongodb-celery-messaging-api-master/app/models/notification.py": {
        "Notification.__str__": {
            "name": "__str__",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notification.to_json": {
            "name": "to_json",
            "location": 39,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flask-mongodb-celery-messaging-api-master/app/models/user.py": {
        "User.__str__": {
            "name": "__str__",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get_id": {
            "name": "get_id",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.to_json": {
            "name": "to_json",
            "location": 56,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flask-mongodb-celery-messaging-api-master/app/models/__init__.py": {},
    "flask-mongodb-celery-messaging-api-master/app/security/encryption.py": {
        "Hash.obfuscate": {
            "name": "obfuscate",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "typing.Iterable[typing.Any]",
                    "bool",
                    "Iterable[Any]",
                    "int"
                ],
                "x": [
                    "str"
                ]
            }
        },
        "Hash.match": {
            "name": "match",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "hashed_password": [
                    "str"
                ],
                "plain_text": [
                    "str"
                ]
            }
        }
    },
    "flask-mongodb-celery-messaging-api-master/app/security/login.py": {
        "Session.get_token": {
            "name": "get_token",
            "location": 31,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "None",
                    "Optional[str]",
                    "grouper.models.group.Group"
                ],
                "user": [
                    "app.models.user.User"
                ]
            }
        }
    },
    "flask-mongodb-celery-messaging-api-master/app/security/__init__.py": {},
    "flask-mongodb-celery-messaging-api-master/app/validations/messages.py": {
        "SearchMessagesQueryValidation.validate": {
            "name": "validate",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Type[SearchMessagesQueryValidation]"
                ],
                "query": [
                    "dict"
                ]
            }
        },
        "SendMessageQueryValidation.validate": {
            "name": "validate",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Type[SendMessageQueryValidation]"
                ],
                "query": [
                    "dict"
                ]
            }
        },
        "SendImageMessageQueryValidation.validate": {
            "name": "validate",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Type[SendImageMessageQueryValidation]"
                ],
                "query": [
                    "dict"
                ]
            }
        },
        "SendTextMessageQueryValidation.validate": {
            "name": "validate",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Type[SendTextMessageQueryValidation]"
                ],
                "query": [
                    "dict"
                ]
            }
        },
        "SendVideoMessageQueryValidation.validate": {
            "name": "validate",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Type[SendVideoMessageQueryValidation]"
                ],
                "query": [
                    "dict"
                ]
            }
        }
    },
    "flask-mongodb-celery-messaging-api-master/app/validations/notifications.py": {
        "SearchNotificationsQueryValidation.validate": {
            "name": "validate",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "query": [
                    "dict"
                ]
            }
        },
        "SendNotificationQueryValidation.validate": {
            "name": "validate",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Exception",
                    "dict",
                    "dict[, ]",
                    "bool",
                    "Type",
                    "typing.Type"
                ],
                "query": [
                    "dict"
                ]
            }
        }
    },
    "flask-mongodb-celery-messaging-api-master/app/validations/pagination.py": {
        "PaginationQueryValidation.validate": {
            "name": "validate",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Optional[Type]",
                    "typing.Type",
                    "None"
                ],
                "query": [
                    "dict"
                ]
            }
        }
    },
    "flask-mongodb-celery-messaging-api-master/app/validations/users.py": {
        "SearchUsersQueryValidation.validate": {
            "name": "validate",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "SupportsFloat",
                    "Literal[False]",
                    "int"
                ],
                "query": [
                    "dict"
                ]
            }
        },
        "CreateUserQueryValidation.validate": {
            "name": "validate",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "str",
                    "Type",
                    "bool",
                    "dict[, ]",
                    "dict",
                    "type"
                ],
                "query": [
                    "dict"
                ]
            }
        },
        "LoginQueryValidation.validate": {
            "name": "validate",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "str",
                    "Type",
                    "bool",
                    "dict[, ]",
                    "dict",
                    "type"
                ],
                "query": [
                    "dict"
                ]
            }
        }
    },
    "flask-mongodb-celery-messaging-api-master/app/validations/__init__.py": {
        "QueryValidation.validate": {
            "name": "validate",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "SupportsFloat",
                    "Literal[False]",
                    "int"
                ],
                "query": [
                    "dict"
                ]
            }
        }
    },
    "flask-mongodb-celery-messaging-api-master/app/worker/main.py": {},
    "flask-mongodb-celery-messaging-api-master/app/worker/messages.py": {
        "AsyncSendMessageTask.run": {
            "name": "run",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "dict"
                ],
                "session": [
                    "dict"
                ]
            }
        }
    },
    "flask-mongodb-celery-messaging-api-master/app/worker/tasks.py": {},
    "flask-mongodb-celery-messaging-api-master/app/worker/users.py": {
        "AsyncCreateUserTask.run": {
            "name": "run",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "dict"
                ],
                "session": [
                    "dict"
                ]
            }
        }
    },
    "flask-mongodb-celery-messaging-api-master/app/worker/__init__.py": {},
    "flask-mongodb-celery-messaging-api-master/tests/__init__.py": {},
    "flask-mongodb-celery-messaging-api-master/tests/api/test_auth.py": {
        "TestAuthApi.test_post_ok": {
            "name": "test_post_ok",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": [
                    "tests.async_mock.MagicMock",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "TestAuthApi.test_post_error": {
            "name": "test_post_error",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": [
                    "Callable"
                ]
            }
        }
    },
    "flask-mongodb-celery-messaging-api-master/tests/api/test_health.py": {
        "TestHealthApi.test_post_ok": {
            "name": "test_post_ok",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": [
                    "app.services.ChatService",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "mock.MagicMock"
                ]
            }
        },
        "TestHealthApi.test_post_error": {
            "name": "test_post_error",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": [
                    "Callable"
                ]
            }
        }
    },
    "flask-mongodb-celery-messaging-api-master/tests/api/test_messages.py": {
        "TestMessagesApi.test_get_ok": {
            "name": "test_get_ok",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestMessagesApi.test_get_error": {
            "name": "test_get_error",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": [
                    "mtg_ssm.scryfall.models.ScryObject",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestMessagesApi.test_post_async": {
            "name": "test_post_async",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "croud.api.Client"
                ]
            }
        }
    },
    "flask-mongodb-celery-messaging-api-master/tests/api/test_notifications.py": {
        "TestNotificationsApi.test_get_ok": {
            "name": "test_get_ok",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "unittesmock.MagicMock",
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "TestNotificationsApi.test_get_error": {
            "name": "test_get_error",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": [
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "flask-mongodb-celery-messaging-api-master/tests/api/test_users.py": {
        "TestUsersApi.test_get_ok": {
            "name": "test_get_ok",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "unittesmock.MagicMock",
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "TestUsersApi.test_get_error": {
            "name": "test_get_error",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": [
                    "mtg_ssm.scryfall.models.ScryObject",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestUsersApi.test_post_async": {
            "name": "test_post_async",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "croud.api.Client"
                ]
            }
        }
    },
    "flask-mongodb-celery-messaging-api-master/tests/api/__init__.py": {
        "TestPublicApi.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "redis": [
                    "List[str]",
                    "Iterable[Tuple[int, int]]"
                ],
                "mongo": [
                    "List[str]",
                    "Iterable[Tuple[int, int]]"
                ]
            }
        },
        "TestPrivateApi.setUp": {
            "name": "setUp",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
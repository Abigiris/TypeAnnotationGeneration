{
    "flask-skeleton-master/manage.py": {
        "create_db": {
            "name": "create_db",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "num_users": [
                    "int",
                    "models.characters.character_base.Character",
                    "zerver.models.UserProfile",
                    "Dict[str, Any]",
                    "Union[int, float]"
                ]
            }
        }
    },
    "flask-skeleton-master/app/config.py": {},
    "flask-skeleton-master/app/extensions.py": {},
    "flask-skeleton-master/app/models.py": {},
    "flask-skeleton-master/app/utils.py": {
        "is_safe_url": {
            "name": "is_safe_url",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "target_url": [
                    "str"
                ]
            }
        },
        "populate_users": {
            "name": "populate_users",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "num_users": [
                    "int",
                    "str"
                ]
            }
        },
        "ModelForm.get_session": {
            "name": "get_session",
            "location": 32,
            "return": [
                "str",
                "List[str]",
                "daylighdb.models.User",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "self": [
                    "Type[ModelForm]"
                ]
            }
        }
    },
    "flask-skeleton-master/app/__init__.py": {
        "create_app": {
            "name": "create_app",
            "location": 22,
            "return": [
                "flask.Flask",
                "Flask"
            ],
            "arguments": {
                "mode": [
                    "bool",
                    "None",
                    "List[Dict[str, Any]]",
                    "List[Dict[str, str]]",
                    "list[dict[str, typing.Any]]",
                    "list[dict[str, str]]"
                ]
            }
        },
        "register_debugtools": {
            "name": "register_debugtools",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "flask_app": [
                    "typing.Callable[, ]",
                    "Callable",
                    "str",
                    "None",
                    "int",
                    "Optional[\"Game\"]",
                    "bool"
                ]
            }
        },
        "register_extensions": {
            "name": "register_extensions",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "flask_app": [
                    "bool",
                    "flask.Flask"
                ]
            }
        },
        "register_blueprints": {
            "name": "register_blueprints",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "flask_app": [
                    "bool",
                    "str"
                ]
            }
        },
        "register_errorhandlers": {
            "name": "register_errorhandlers",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "flask_app": [
                    "str",
                    "flask.Flask"
                ]
            }
        },
        "create_app.index": {
            "name": "index",
            "location": 64,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {}
        },
        "register_debugtools.after_request": {
            "name": "after_request",
            "location": 82,
            "return": [
                "dict",
                "Dict[str, Union[int, str]]",
                "flask.Response",
                "Optional[Dict[str, Any]]",
                "Optional[Dict[str, str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "response": [
                    "flask.Response",
                    "Dict[str, Any]"
                ]
            }
        },
        "register_extensions.create_db_objects": {
            "name": "create_db_objects",
            "location": 107,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "register_errorhandlers.render_error": {
            "name": "render_error",
            "location": 133,
            "return": [
                "tuple[]",
                "str",
                "tuple[int]",
                "int",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "e": [
                    "Type",
                    "\"DGEList\"",
                    "Callable[..., T]"
                ]
            }
        }
    },
    "flask-skeleton-master/app/auth/oauth.py": {
        "OAuthSignIn.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "provider_name": [
                    "str",
                    "int",
                    "Callable[..., T]",
                    "typing.Callable[..., T]"
                ]
            }
        },
        "OAuthSignIn.authorize": {
            "name": "authorize",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OAuthSignIn.callback": {
            "name": "callback",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OAuthSignIn.get_callback_url": {
            "name": "get_callback_url",
            "location": 24,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OAuthSignIn.get_provider": {
            "name": "get_provider",
            "location": 29,
            "return": [
                "str",
                "int",
                "bool",
                "typing.Any",
                "List[str]"
            ],
            "arguments": {
                "self": [
                    "Type[OAuthSignIn]"
                ],
                "provider_name": [
                    "str"
                ]
            }
        },
        "GoogleSignIn.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleSignIn.authorize": {
            "name": "authorize",
            "location": 58,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleSignIn.callback": {
            "name": "callback",
            "location": 65,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flask-skeleton-master/app/auth/views.py": {
        "load_user": {
            "name": "load_user",
            "location": 13,
            "return": [
                "django.contrib.auth.models.AbstractBaseUser",
                "int",
                "sqlalchemy.orm.session.Session",
                "users.models.JustfixUser",
                "Optional[services.user.transfer.models.User]",
                "List[dict]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "Dict[int, str]",
                    "Dict[str, Dict[int, int]]",
                    "bytes",
                    "str"
                ]
            }
        },
        "oauth_authorize": {
            "name": "oauth_authorize",
            "location": 18,
            "return": [
                "str",
                "Dict[str, str]",
                "bool",
                "int"
            ],
            "arguments": {
                "provider": [
                    "typing.TextIO",
                    "django.db.migrations.state.StateApps",
                    "list[list[int]]",
                    "TextIO",
                    "gardnr.models.Grow",
                    "List[List[int]]"
                ]
            }
        },
        "oauth_callback": {
            "name": "oauth_callback",
            "location": 27,
            "return": [
                "bool",
                "asgard.models.job.ScheduledJob",
                "Dict[str, str]",
                "Optional[core.models.User]"
            ],
            "arguments": {
                "provider": [
                    "typing.TextIO",
                    "django.db.migrations.state.StateApps",
                    "list[list[int]]",
                    "TextIO",
                    "gardnr.models.Grow",
                    "List[List[int]]"
                ]
            }
        },
        "login": {
            "name": "login",
            "location": 57,
            "return": [
                "str",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {}
        },
        "logout": {
            "name": "logout",
            "location": 64,
            "return": [
                "str",
                "int",
                "Dict[str, str]",
                "jumeaux.models.Res2ResAddOnPayload"
            ],
            "arguments": {}
        }
    },
    "flask-skeleton-master/app/auth/__init__.py": {},
    "flask-skeleton-master/app/print_services/forms.py": {},
    "flask-skeleton-master/app/print_services/views.py": {
        "serve_request_form": {
            "name": "serve_request_form",
            "location": 24,
            "return": [
                "Dict[str, Union[int, str]]",
                "dict",
                "str",
                "Optional[Dict[str, Any]]",
                "lunch_buddies.models.polls.Poll"
            ],
            "arguments": {}
        }
    },
    "flask-skeleton-master/app/print_services/__init__.py": {},
    "flask-skeleton-master/docs/conf.py": {},
    "flask-skeleton-master/migrations/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online.process_revision_directives": {
            "name": "process_revision_directives",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "context": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "revision": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "directives": [
                    "Callable[[Mapping], T]",
                    "list",
                    "List[List[str]]",
                    "int",
                    "str",
                    "tuple"
                ]
            }
        }
    },
    "flask-skeleton-master/migrations/versions/b61f462e23e7_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "flask-skeleton-master/tests/test_app_init.py": {
        "test_create_app": {
            "name": "test_create_app",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
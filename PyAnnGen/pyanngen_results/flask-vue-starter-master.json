{
    "flask-vue-starter-master/backend/app/app.py": {},
    "flask-vue-starter-master/backend/app/config.py": {},
    "flask-vue-starter-master/backend/app/extensions.py": {
        "init_app_extensions": {
            "name": "init_app_extensions",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask",
                    "flask.ctx.AppContext"
                ]
            }
        }
    },
    "flask-vue-starter-master/backend/app/__init__.py": {},
    "flask-vue-starter-master/backend/app/core/cli.py": {
        "register_cli_handlers": {
            "name": "register_cli_handlers",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "register_cli_handlers.db_create_all": {
            "name": "db_create_all",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "flask-vue-starter-master/backend/app/core/create_app.py": {
        "register_api": {
            "name": "register_api",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "register_api_error_handlers": {
            "name": "register_api_error_handlers",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "bool",
                    "flask.Flask",
                    "int"
                ]
            }
        },
        "create_app": {
            "name": "create_app",
            "location": 51,
            "return": [
                "flask.Flask",
                "Flask"
            ],
            "arguments": {
                "config_name": [
                    "str"
                ]
            }
        },
        "register_api.hello": {
            "name": "hello",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "register_api_error_handlers.handle_error": {
            "name": "handle_error",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "error": [
                    "bool",
                    "Exception",
                    "str",
                    "Tuple[str]",
                    "psycopg2.extensions.connection"
                ],
                "req": [
                    "Callable",
                    "bool",
                    "Sequence[str]"
                ],
                "schema": [
                    "Callable",
                    "bool",
                    "Sequence[str]"
                ],
                "error_status_code": [
                    "Callable",
                    "bool",
                    "Sequence[str]"
                ],
                "error_headers": [
                    "Callable",
                    "bool",
                    "Sequence[str]"
                ]
            }
        },
        "register_api_error_handlers.validateion_error": {
            "name": "validateion_error",
            "location": 43,
            "return": [
                "Tuple[int]",
                "Dict[str,Any]",
                "Callable[...,None]",
                "Callable[[Exception],bool]",
                "flask.Markup"
            ],
            "arguments": {
                "error": [
                    "str",
                    "List[Dict[str, Any]]",
                    "Optional[str]",
                    "Exception"
                ]
            }
        }
    },
    "flask-vue-starter-master/backend/app/forum/api.py": {},
    "flask-vue-starter-master/backend/app/forum/models.py": {
        "Post.__repr__": {
            "name": "__repr__",
            "location": 25,
            "return": [
                "Text",
                "Dict[str,Any]",
                "str",
                "Dict",
                "Dict[str,bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comment.__repr__": {
            "name": "__repr__",
            "location": 42,
            "return": [
                "Text",
                "int",
                "str",
                "Dict[str,Any]",
                "Optional[bytes]",
                "transfer.models.ListID"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flask-vue-starter-master/backend/app/forum/serializers.py": {},
    "flask-vue-starter-master/backend/app/user/api.py": {
        "users_get": {
            "name": "users_get",
            "location": 16,
            "return": [
                "models.User",
                "zerver.models.UserProfile",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "user_get": {
            "name": "user_get",
            "location": 22,
            "return": [
                "Iterator[Tuple[hermes.types.UserType,hermes.types.EmailAddressType]]",
                "Dict[str,Any]",
                "deeplearning.ml4pl.models.logger.Logger",
                "Dict[str,str]",
                "Callable",
                "Dict",
                "None"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int",
                    "transfer.models.Order.ID",
                    "transfer.models.Channel.ID"
                ]
            }
        },
        "user_create": {
            "name": "user_create",
            "location": 32,
            "return": [
                "User",
                "Iterator[Tuple[hermes.types.UserType,hermes.types.EmailAddressType]]",
                "Callable",
                "deeplearning.ml4pl.models.logger.Logger"
            ],
            "arguments": {
                "user_data": [
                    "str",
                    "app.utils.types.JSON",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "user_update": {
            "name": "user_update",
            "location": 42,
            "return": [
                "Iterator[Tuple[hermes.types.UserType,hermes.types.EmailAddressType]]",
                "str",
                "deeplearning.ml4pl.models.logger.Logger",
                "Dict",
                "Callable",
                "Dict[str,str]",
                "List[str]"
            ],
            "arguments": {
                "user_data": [
                    "Dict",
                    "Dict[str,Any]",
                    "app.utils.types.JSON",
                    "int"
                ],
                "id": [
                    "str",
                    "int",
                    "Dict[str,U]",
                    "Dict[str,services.user.transfer.models.User]",
                    "transfer.models.Order.ID"
                ]
            }
        },
        "user_delete": {
            "name": "user_delete",
            "location": 58,
            "return": [
                "Callable",
                "deeplearning.ml4pl.models.logger.Logger",
                "Dict[str,Any]",
                "Dict[int,Any]",
                "Dict[str,str]",
                "None",
                "Dict"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int",
                    "Dict",
                    "transfer.models.MatchCommentID",
                    "transfer.models.MatchID"
                ]
            }
        }
    },
    "flask-vue-starter-master/backend/app/user/models.py": {
        "User.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "username": [
                    "int",
                    "None",
                    "str",
                    "List[int]",
                    "float"
                ],
                "email": [
                    "int",
                    "None",
                    "str",
                    "List[int]",
                    "float"
                ]
            }
        },
        "User.__repr__": {
            "name": "__repr__",
            "location": 22,
            "return": [
                "Text",
                "Optional[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flask-vue-starter-master/backend/app/user/serializers.py": {
        "validate_unique_field": {
            "name": "validate_unique_field",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "id": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[uuid.UUID]",
                    "Optional[int]",
                    "Optional[bool]",
                    "T"
                ]
            }
        },
        "UserSchema.validate_unique_fields": {
            "name": "validate_unique_fields",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict",
                    "Dict[str,Any]",
                    "str",
                    "Optional[Dict[str,Any]]"
                ],
                "partial": [
                    "bool",
                    "str",
                    "List[str]",
                    "bytes",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "many": [
                    "bool",
                    "str",
                    "List[str]",
                    "bytes",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        }
    },
    "flask-vue-starter-master/backend/app/utils/serializers.py": {
        "WrapDataSchema.wrap_with_envelope": {
            "name": "wrap_with_envelope",
            "location": 12,
            "return": [
                "Dict",
                "Dict[Text,Union[int,bytes,dict]]",
                "bool",
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "Dict",
                    "bool"
                ],
                "many": [
                    "int",
                    "bytes",
                    "Dict",
                    "bool"
                ]
            }
        },
        "WrapDataSchema.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wrap_data": [
                    "bool",
                    "Dict",
                    "Tuple[int,str,bytearray]",
                    "str",
                    "Dict[str,str]"
                ]
            }
        },
        "UUIDFormat.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "str",
                    "None",
                    "bool",
                    "float",
                    "Callable",
                    "int"
                ]
            }
        },
        "UUIDFormat._format_error": {
            "name": "_format_error",
            "location": 50,
            "return": [
                "str",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "str",
                    "List",
                    "Union[List,qutebrowser.utils.usertypes.Unset]",
                    "Union[qutebrowser.utils.usertypes.Unset,List]"
                ],
                "message": [
                    "int",
                    "str",
                    "List",
                    "Union[List,qutebrowser.utils.usertypes.Unset]",
                    "Union[qutebrowser.utils.usertypes.Unset,List]"
                ]
            }
        },
        "UUIDFormat.__call__": {
            "name": "__call__",
            "location": 53,
            "return": [
                "bool",
                "float",
                "Dict[str,Any]",
                "str",
                "List",
                "Dict",
                "Iterable[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "float",
                    "Union[str,int]",
                    "Union[int,float]",
                    "T"
                ]
            }
        }
    },
    "flask-vue-starter-master/backend/app/utils/types.py": {},
    "flask-vue-starter-master/backend/migrations/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online.process_revision_directives": {
            "name": "process_revision_directives",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "revision": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "directives": [
                    "Callable[[Mapping], T]",
                    "list",
                    "List[List[str]]",
                    "int",
                    "str",
                    "tuple"
                ]
            }
        }
    },
    "flask-vue-starter-master/backend/migrations/versions/2a53d9419b3e_initial_migration.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "flask-vue-starter-master/backend/tests/conftest.py": {
        "database": {
            "name": "database",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "app": {
            "name": "app",
            "location": 55,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "database": []
            }
        },
        "client": {
            "name": "client",
            "location": 64,
            "return": [],
            "arguments": {
                "app": [
                    "str",
                    "app.utils.models.ModelManager"
                ]
            }
        },
        "_db": {
            "name": "_db",
            "location": 72,
            "return": [
                "Callable"
            ],
            "arguments": {
                "app": [
                    "Exception",
                    "Callable",
                    "routemaster.app.App"
                ]
            }
        },
        "user_factory": {
            "name": "user_factory",
            "location": 85,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "app": [
                    "bool"
                ],
                "db_session": [
                    "bool"
                ]
            }
        },
        "user": {
            "name": "user",
            "location": 98,
            "return": [
                "abilian.core.models.subjects.User",
                "models.User",
                "Callable",
                "int"
            ],
            "arguments": {
                "user_factory": [
                    "str",
                    "List",
                    "tracim.models.User",
                    "User",
                    "app.models.user.User.InDB"
                ]
            }
        },
        "user_factory.factory": {
            "name": "factory",
            "location": 88,
            "return": [
                "User",
                "bool",
                "Set",
                "django.db.migrations.state.StateApps",
                "Mapping",
                "str"
            ],
            "arguments": {
                "username": [
                    "Tuple[int, int]",
                    "int",
                    "List[graphx.core.entities.Edge]"
                ],
                "email": [
                    "Tuple[int, int]",
                    "int",
                    "List[graphx.core.entities.Edge]"
                ]
            }
        }
    },
    "flask-vue-starter-master/backend/tests/test_users.py": {
        "test_api": {
            "name": "test_api",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_users": {
            "name": "test_users",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "user_factory": []
            }
        },
        "test_user_create": {
            "name": "test_user_create",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "Dict",
                    "Dict[str,str]",
                    "None",
                    "utils.pluginmgr.Command",
                    "Optional[Dict]"
                ]
            }
        },
        "test_user_update": {
            "name": "test_user_update",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "user_factory": [
                    "int"
                ]
            }
        },
        "test_user_delete": {
            "name": "test_user_delete",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "user_factory": []
            }
        }
    },
    "flask-vue-starter-master/backend/tests/__init__.py": {},
    "flask-vue-starter-master/backend/tests/utils/equals.py": {
        "EqualsInteger.__eq__": {
            "name": "__eq__",
            "location": 21,
            "return": [
                "bool",
                "str",
                "Type"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str,Date]",
                    "str",
                    "Type",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        },
        "EqualsString.__eq__": {
            "name": "__eq__",
            "location": 28,
            "return": [
                "bool",
                "str",
                "Callable[...,T]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Hashable"
                ]
            }
        },
        "EqualsUUIDString.__eq__": {
            "name": "__eq__",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Mapping",
                    "Exception",
                    "Mapping[str,Any]",
                    "AbstractSet",
                    "AbstractSet[T]"
                ]
            }
        },
        "EqualsRegexp.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "regexp": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "EqualsRegexp.__eq__": {
            "name": "__eq__",
            "location": 51,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Exception",
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "EqualsDatetimeString.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "date_format": [
                    "str",
                    "int",
                    "List[Tuple[str,Any]]",
                    "List[tuple[Union[str,Any]]]",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "EqualsDatetimeString.__eq__": {
            "name": "__eq__",
            "location": 64,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "int",
                    "None",
                    "datetime.datetime",
                    "Optional[datetime.tzinfo]"
                ]
            }
        },
        "EqualsAnything.__eq__": {
            "name": "__eq__",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "SupportsFloat",
                    "int",
                    "Union[int,float]",
                    "float",
                    "AbstractSet[T]",
                    "AbstractSet"
                ]
            }
        },
        "EqualsPartialDict.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_dict": [
                    "Dict",
                    "str",
                    "bool"
                ],
                "chain": [
                    "Text",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "EqualsPartialDict.__eq__": {
            "name": "__eq__",
            "location": 107,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int,float]",
                    "AbstractSet",
                    "int",
                    "Dict",
                    "float"
                ]
            }
        }
    }
}
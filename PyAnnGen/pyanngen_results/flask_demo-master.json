{
    "flask_demo-master/gunicorn.py": {},
    "flask_demo-master/settings.py": {},
    "flask_demo-master/app/exceptions.py": {},
    "flask_demo-master/app/models.py": {
        "Base.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.validate_all": {
            "name": "validate_all",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.get_validate_errors": {
            "name": "get_validate_errors",
            "location": 39,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.save": {
            "name": "save",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.get": {
            "name": "get",
            "location": 58,
            "return": [
                "Base"
            ],
            "arguments": {
                "cls": [
                    "Type[_TBase]"
                ],
                "_id": [
                    "int",
                    "Optional[int]",
                    "str",
                    "Iterable[int]",
                    "None"
                ]
            }
        },
        "Base.get_dict": {
            "name": "get_dict",
            "location": 71,
            "return": [
                "bool",
                "str",
                "int",
                "tuple",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str"
                ],
                "_id": [
                    "int",
                    "str"
                ]
            }
        },
        "Base.delete": {
            "name": "delete",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "Optional[int]",
                    "List[int]",
                    "None"
                ],
                "_id": [
                    "int",
                    "str",
                    "Optional[int]",
                    "List[int]",
                    "None"
                ]
            }
        },
        "Base.list": {
            "name": "list",
            "location": 81,
            "return": [
                "builtins.list[Base]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Dict",
                    "Type[Any]",
                    "Type"
                ],
                "page": [
                    "int",
                    "Dict",
                    "Optional[str]"
                ],
                "count": [
                    "int",
                    "Dict",
                    "Optional[str]"
                ]
            }
        },
        "Base.list_dict": {
            "name": "list_dict",
            "location": 92,
            "return": [
                "builtins.list"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Dict",
                    "Dict[str,str]",
                    "Optional[str]",
                    "str",
                    "List[Dict[str,Any]]",
                    "None",
                    "Type[T]",
                    "List[dict[str,Any]]",
                    "Type"
                ],
                "page": [
                    "int",
                    "Dict",
                    "Dict[str,str]",
                    "Optional[str]",
                    "List[Dict[str,Any]]",
                    "Type[T]"
                ],
                "count": [
                    "int",
                    "Dict",
                    "Dict[str,str]",
                    "Optional[str]",
                    "List[Dict[str,Any]]",
                    "Type[T]"
                ]
            }
        },
        "Cat.get_validate_errors": {
            "name": "get_validate_errors",
            "location": 112,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flask_demo-master/app/utils.py": {
        "get_sign": {
            "name": "get_sign",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "List[str]",
                    "str",
                    "List",
                    "Sequence[str]"
                ]
            }
        },
        "get_json": {
            "name": "get_json",
            "location": 15,
            "return": [
                "int",
                "dict",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "req": [
                    "Dict",
                    "str",
                    "Type",
                    "Callable[[str],T]",
                    "Callable[str,T]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "parse_integer": {
            "name": "parse_integer",
            "location": 25,
            "return": [
                "Union[(int, _T0)]"
            ],
            "arguments": {
                "num": [
                    "int",
                    "str",
                    "bytes",
                    "Union[int,str]",
                    "None",
                    "Optional[int]"
                ]
            }
        },
        "parse_id": {
            "name": "parse_id",
            "location": 35,
            "return": [
                "Union[(int, _T0)]"
            ],
            "arguments": {
                "_id": [
                    "str"
                ]
            }
        },
        "parse_paginate": {
            "name": "parse_paginate",
            "location": 47,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "req": [
                    "Dict[str,str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "JSONResponse.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "dict",
                    "bytearray",
                    "Dict[str, Any]"
                ],
                "status": [
                    "int",
                    "bytes",
                    "str",
                    "Optional[int]",
                    "bool"
                ]
            }
        }
    },
    "flask_demo-master/app/__init__.py": {
        "health": {
            "name": "health",
            "location": 14,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "flask_demo-master/app/api/views.py": {
        "CatView.get": {
            "name": "get",
            "location": 8,
            "return": [
                "utils.JSONResponse"
            ],
            "arguments": {
                "self": []
            }
        },
        "CatView.put": {
            "name": "put",
            "location": 33,
            "return": [
                "utils.JSONResponse"
            ],
            "arguments": {
                "self": []
            }
        },
        "CatView.delete": {
            "name": "delete",
            "location": 74,
            "return": [
                "Response",
                "str",
                "bool",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "self": []
            }
        },
        "CatsView.get": {
            "name": "get",
            "location": 96,
            "return": [
                "utils.JSONResponse"
            ],
            "arguments": {
                "self": []
            }
        },
        "CatsView.post": {
            "name": "post",
            "location": 135,
            "return": [
                "JSONResponse",
                "List[Dict[str,Any]]",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flask_demo-master/app/api/__init__.py": {},
    "flask_demo-master/app/extensions/base.py": {
        "Extension.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "flask.Flask",
                    "None"
                ]
            }
        },
        "Extension.init_app": {
            "name": "init_app",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "flask.Flask"
                ]
            }
        }
    },
    "flask_demo-master/app/extensions/database.py": {
        "DBExtension.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db_url": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "config": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "DBExtension.execute": {
            "name": "execute",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sql": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "DBExtension.fetch": {
            "name": "fetch",
            "location": 22,
            "return": [
                "int",
                "List[int]",
                "Iterable[str]",
                "str",
                "Iterable[T]",
                "Pattern",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "sql": [
                    "str",
                    "int",
                    "Dict[str,Any]"
                ]
            }
        },
        "DBExtension.insert": {
            "name": "insert",
            "location": 28,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "str",
                    "Union[Callable[[Dict],Hashable],str]",
                    "Optional[str]",
                    "Dict[str,str]",
                    "List[str]"
                ],
                "data": [
                    "str",
                    "bytes",
                    "Dict[str,Any]",
                    "Dict",
                    "Type"
                ]
            }
        },
        "DBExtension.update": {
            "name": "update",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "Optional[Union[Any,str]]"
                ],
                "data": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "Optional[Union[Any,str]]"
                ]
            }
        },
        "DBExtension.count": {
            "name": "count",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "str",
                    "List[str]",
                    "Mapping",
                    "Union[str,List[str]]",
                    "Callable",
                    "Dict[str,Any]",
                    "bytes"
                ]
            }
        },
        "DBExtension.transaction": {
            "name": "transaction",
            "location": 62,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable",
                    "Type",
                    "Type[T]",
                    "T",
                    "Callable[,Any]"
                ]
            }
        },
        "DBExtension.transaction.wrapper": {
            "name": "wrapper",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "flask_demo-master/app/extensions/__init__.py": {},
    "flask_demo-master/tests/conftest.py": {
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "app": {
            "name": "app",
            "location": 12,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "client": {
            "name": "client",
            "location": 19,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "app": [
                    "str",
                    "app.utils.models.ModelManager"
                ]
            }
        },
        "db": {
            "name": "db",
            "location": 24,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "app": [
                    "routemaster.app.App"
                ]
            }
        }
    },
    "flask_demo-master/tests/test_api.py": {
        "test_apiman": {
            "name": "test_apiman",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cat": {
            "name": "test_cat",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "db": []
            }
        }
    },
    "flask_demo-master/tests/test_health.py": {
        "test_health": {
            "name": "test_health",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        }
    },
    "flask_demo-master/tests/__init__.py": {}
}
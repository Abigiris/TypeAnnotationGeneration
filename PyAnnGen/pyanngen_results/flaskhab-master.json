{
    "flaskhab-master/config.py": {
        "Config.init_app": {
            "name": "init_app",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "bool"
                ]
            }
        }
    },
    "flaskhab-master/fabfile.py": {
        "backup": {
            "name": "backup",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "commit": {
            "name": "commit",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "push": {
            "name": "push",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "prepare_deploy": {
            "name": "prepare_deploy",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "deploy": {
            "name": "deploy",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "flaskhab-master/manage.py": {
        "make_shell_context": {
            "name": "make_shell_context",
            "location": 19,
            "return": [
                "Callable",
                "str",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Dict[str, List[Any]]"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "host": [
                    "typing.Text",
                    "int",
                    "str"
                ],
                "port": [
                    "int",
                    "Optional[int]"
                ],
                "use_reloader": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "flaskhab-master/app/auth.py": {
        "check_auth": {
            "name": "check_auth",
            "location": 6,
            "return": [
                "bool",
                "dict",
                "int"
            ],
            "arguments": {
                "username": [
                    "str"
                ],
                "password": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "authenticate": {
            "name": "authenticate",
            "location": 14,
            "return": [
                "Response",
                "Optional[str]",
                "List[str]",
                "flask.Response",
                "float",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "requires_auth": {
            "name": "requires_auth",
            "location": 22,
            "return": [
                "Callable"
            ],
            "arguments": {
                "f": [
                    "typing.Callable[, ]",
                    "str",
                    "Callable",
                    "list[dict[, ]]",
                    "List[Dict]",
                    "T"
                ]
            }
        },
        "requires_auth.decorated": {
            "name": "decorated",
            "location": 24,
            "return": [
                "int",
                "str"
            ],
            "arguments": {}
        }
    },
    "flaskhab-master/app/__init__.py": {
        "create_app": {
            "name": "create_app",
            "location": 28,
            "return": [
                "flask.Flask",
                "Flask"
            ],
            "arguments": {
                "config_name": [
                    "str"
                ]
            }
        },
        "refresh_subsriptions": {
            "name": "refresh_subsriptions",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        }
    },
    "flaskhab-master/app/admin/modelviews.py": {
        "AuthorizedModelView.is_accessible": {
            "name": "is_accessible",
            "location": 10,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ControlModelView._list_icon": {
            "name": "_list_icon",
            "location": 34,
            "return": [
                "typing.Text",
                "str",
                "Markup",
                "bool",
                "Mapping[str, Any]",
                "Optional[Callable[[str], bool]]"
            ],
            "arguments": {
                "view": [
                    "ControlModelView"
                ],
                "context": [
                    "bool",
                    "str",
                    "Set[Union[Any, Any]]",
                    "set[typing.Union[typing.Any,typing.Any]]",
                    "Optional[str]",
                    "None"
                ],
                "model": [
                    "Optional[str]",
                    "str",
                    "list"
                ],
                "name": [
                    "bool",
                    "str",
                    "Set[Union[Any, Any]]",
                    "set[typing.Union[typing.Any,typing.Any]]",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "flaskhab-master/app/admin/views.py": {
        "AuthorizedAdminIndexView.index": {
            "name": "index",
            "location": 9,
            "return": [
                "str",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flaskhab-master/app/admin/__init__.py": {},
    "flaskhab-master/app/auth/forms.py": {},
    "flaskhab-master/app/auth/views.py": {
        "login": {
            "name": "login",
            "location": 9,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[str, str]",
                "flask.Response",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "logout": {
            "name": "logout",
            "location": 22,
            "return": [
                "str",
                "int",
                "Dict[str, str]",
                "jumeaux.models.Res2ResAddOnPayload"
            ],
            "arguments": {}
        }
    },
    "flaskhab-master/app/auth/__init__.py": {},
    "flaskhab-master/app/core/filters.py": {
        "inject_variables": {
            "name": "inject_variables",
            "location": 7,
            "return": [
                "Dict[str, str]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "_jinja2_filter_datetime": {
            "name": "_jinja2_filter_datetime",
            "location": 12,
            "return": [
                "dict",
                "typing.Text"
            ],
            "arguments": {
                "date": [
                    "str",
                    "Optional[str]"
                ],
                "fmt": [
                    "str",
                    "int",
                    "None",
                    "list",
                    "list[]"
                ]
            }
        },
        "override_url_for": {
            "name": "override_url_for",
            "location": 21,
            "return": [
                "str",
                "bool",
                "Dict[str, str]",
                "Dict[str, Dict[str, str]]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "dated_url_for": {
            "name": "dated_url_for",
            "location": 27,
            "return": [
                "str",
                "bool",
                "Optional[List[str]]",
                "Optional[str]"
            ],
            "arguments": {
                "endpoint": [
                    "str"
                ]
            }
        }
    },
    "flaskhab-master/app/core/mqtt.py": {
        "join_topic": {
            "name": "join_topic",
            "location": 1,
            "return": [
                "str"
            ],
            "arguments": {
                "part1": [
                    "str"
                ],
                "part2": [
                    "str"
                ]
            }
        }
    },
    "flaskhab-master/app/core/__init__.py": {},
    "flaskhab-master/app/main/views.py": {
        "index": {
            "name": "index",
            "location": 12,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {}
        },
        "handle_messages": {
            "name": "handle_messages",
            "location": 18,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "userdata": [
                    "str"
                ],
                "message": [
                    "str",
                    "dict[, ]",
                    "dict",
                    "lunch_buddies.models.teams.Team"
                ]
            }
        },
        "handle_control_clicked": {
            "name": "handle_control_clicked",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "json_str": [
                    "str"
                ]
            }
        }
    },
    "flaskhab-master/app/main/__init__.py": {},
    "flaskhab-master/app/models/basecontrol.py": {
        "BaseControl.__str__": {
            "name": "__str__",
            "location": 18,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseControl.get_subscribed_topics": {
            "name": "get_subscribed_topics",
            "location": 21,
            "return": [
                "list[]",
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseControl.get_icon_url": {
            "name": "get_icon_url",
            "location": 24,
            "return": [
                "None",
                "bool",
                "Optional[str]",
                "Type[T]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseControl.render_js": {
            "name": "render_js",
            "location": 29,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseControl.render_html": {
            "name": "render_html",
            "location": 32,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flaskhab-master/app/models/camera.py": {
        "Camera.render_html": {
            "name": "render_html",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Camera.render_js": {
            "name": "render_js",
            "location": 27,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Camera.handle_event": {
            "name": "handle_event",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "bool",
                    "Tuple[str]",
                    "tuple[str]",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]",
                    "List[dict]",
                    "list[dict[, ]]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[List[Any]]",
                    "list[list[typing.Any]]"
                ]
            }
        },
        "Camera.handle_mqtt_message": {
            "name": "handle_mqtt_message",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "bool",
                    "int",
                    "dict[, ]",
                    "Optional[Dict]",
                    "None",
                    "List[int]",
                    "list[int]"
                ],
                "userdata": [
                    "str",
                    "bool",
                    "int",
                    "dict[, ]",
                    "Optional[Dict]",
                    "None",
                    "List[int]",
                    "list[int]"
                ],
                "message": [
                    "str",
                    "bytes",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "Camera.get_subscribed_topics": {
            "name": "get_subscribed_topics",
            "location": 62,
            "return": [
                "list[typing.Union[typing.Pattern,str,int]]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flaskhab-master/app/models/mqttmessage.py": {
        "create_mqttmessage": {
            "name": "create_mqttmessage",
            "location": 23,
            "return": [
                "MQTTMessage",
                "bool",
                "float"
            ],
            "arguments": {
                "client": [
                    "dict",
                    "str",
                    "dict[, ]"
                ],
                "userdata": [
                    "bool",
                    "str",
                    "set[]",
                    "int",
                    "set"
                ],
                "message": [
                    "bool",
                    "dict",
                    "dict[, ]"
                ],
                "direction": [
                    "List[List[int]]",
                    "bool",
                    "list[list[int]]",
                    "str"
                ],
                "timestamp": [
                    "List[List[int]]",
                    "bool",
                    "str"
                ]
            }
        },
        "MQTTMessage.remove_old": {
            "name": "remove_old",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cls": [
                    "OrderedDict",
                    "typing.OrderedDict",
                    "Union[int, float]",
                    "int",
                    "float"
                ],
                "buf": [
                    "int",
                    "OrderedDict",
                    "Union[int, float]"
                ]
            }
        }
    },
    "flaskhab-master/app/models/numeric.py": {
        "Numeric.value": {
            "name": "value",
            "location": 24,
            "return": [
                "",
                "float"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "Iterable[T]",
                    "str",
                    "List[Dict[str, str]]",
                    "bool",
                    "int"
                ]
            }
        },
        "Numeric.get_value_str": {
            "name": "get_value_str",
            "location": 28,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Numeric.__str__": {
            "name": "__str__",
            "location": 31,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Numeric.render_html": {
            "name": "render_html",
            "location": 34,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Numeric.render_js": {
            "name": "render_js",
            "location": 51,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Numeric.handle_event": {
            "name": "handle_event",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "bool",
                    "Tuple[str]",
                    "tuple[str]",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]",
                    "List[dict]",
                    "list[dict[, ]]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[List[Any]]",
                    "list[list[typing.Any]]"
                ]
            }
        },
        "Numeric.handle_mqtt_message": {
            "name": "handle_mqtt_message",
            "location": 63,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "bool",
                    "int",
                    "dict[, ]",
                    "Optional[Dict]",
                    "None",
                    "List[int]",
                    "list[int]"
                ],
                "userdata": [
                    "str",
                    "bool",
                    "int",
                    "dict[, ]",
                    "Optional[Dict]",
                    "None",
                    "List[int]",
                    "list[int]"
                ],
                "message": [
                    "bool",
                    "str"
                ]
            }
        },
        "Numeric.get_subscribed_topics": {
            "name": "get_subscribed_topics",
            "location": 84,
            "return": [
                "list[]",
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flaskhab-master/app/models/panel.py": {
        "Panel.__str__": {
            "name": "__str__",
            "location": 8,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flaskhab-master/app/models/rcswitch.py": {
        "RCSwitch.render_html": {
            "name": "render_html",
            "location": 34,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RCSwitch.render_js": {
            "name": "render_js",
            "location": 49,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RCSwitch.handle_event": {
            "name": "handle_event",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "dict",
                    "Sequence",
                    "Dict[str, str]",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "RCSwitch.handle_mqtt_message": {
            "name": "handle_mqtt_message",
            "location": 84,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "bool",
                    "int",
                    "dict[, ]",
                    "Optional[Dict]",
                    "None",
                    "List[int]",
                    "list[int]"
                ],
                "userdata": [
                    "str",
                    "bool",
                    "int",
                    "dict[, ]",
                    "Optional[Dict]",
                    "None",
                    "List[int]",
                    "list[int]"
                ],
                "message": [
                    "str",
                    "bytes",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "RCSwitch.get_subscribed_topics": {
            "name": "get_subscribed_topics",
            "location": 103,
            "return": [
                "list[typing.Union[typing.Pattern,str,int]]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flaskhab-master/app/models/switch.py": {
        "Switch.render_html": {
            "name": "render_html",
            "location": 15,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Switch.handle_event": {
            "name": "handle_event",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "tuple[str]",
                    "list[str]",
                    "Tuple[str]",
                    "list[dict[, ]]",
                    "bool",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "dict",
                    "List[dict]",
                    "Dict[str, Any]",
                    "List[List[Any]]"
                ]
            }
        },
        "Switch.get_subscribed_topics": {
            "name": "get_subscribed_topics",
            "location": 33,
            "return": [
                "list[]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flaskhab-master/app/models/user.py": {
        "load_user": {
            "name": "load_user",
            "location": 23,
            "return": [
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int"
                ]
            }
        },
        "User.password": {
            "name": "password",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "bool"
                ]
            }
        },
        "User.verify_password": {
            "name": "verify_password",
            "location": 18,
            "return": [
                "str",
                "Dict[str, type]",
                "Mapping[str, Any]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str"
                ]
            }
        }
    },
    "flaskhab-master/app/models/__init__.py": {
        "handle_post_save": {
            "name": "handle_post_save",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sender": [
                    "int",
                    "typing.Callable[..., None]",
                    "bool",
                    "Literal",
                    "Callable[..., None]",
                    "Callable[[int, int], None]"
                ],
                "document": [
                    "int",
                    "typing.Callable[..., None]",
                    "bool",
                    "Literal",
                    "Callable[..., None]",
                    "Callable[[int, int], None]"
                ],
                "created": [
                    "int",
                    "typing.Callable[..., None]",
                    "bool",
                    "Literal",
                    "Callable[..., None]",
                    "Callable[[int, int], None]"
                ]
            }
        },
        "refresh_subscriptions": {
            "name": "refresh_subscriptions",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "flaskhab-master/tests/test_user_model.py": {
        "UserModelTestCase.test_password_setter": {
            "name": "test_password_setter",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserModelTestCase.test_no_password_getter": {
            "name": "test_no_password_getter",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserModelTestCase.test_password_verification": {
            "name": "test_password_verification",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserModelTestCase.test_password_salts_are_random": {
            "name": "test_password_salts_are_random",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
{
    "flutter-master/setup.py": {},
    "flutter-master/test_flutter.py": {
        "test_successful": {
            "name": "test_successful",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_enum_option": {
            "name": "test_enum_option",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_variable_length_tuple": {
            "name": "test_variable_length_tuple",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_wrong_type": {
            "name": "test_wrong_type",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_wrong_arity": {
            "name": "test_wrong_arity",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_no_union_variant": {
            "name": "test_no_union_variant",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bad_recursive_type": {
            "name": "test_bad_recursive_type",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bad_enum": {
            "name": "test_bad_enum",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_too_many_fields": {
            "name": "test_too_many_fields",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_non_dict_into_known_type": {
            "name": "test_non_dict_into_known_type",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_any_types": {
            "name": "test_any_types",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unknown_origin_type": {
            "name": "test_unknown_origin_type",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_type_description": {
            "name": "test_type_description",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "flutter-master/flutter/__init__.py": {
        "_add_indefinite_article": {
            "name": "_add_indefinite_article",
            "location": 98,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "_get_typename": {
            "name": "_get_typename",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "ty": [
                    "type"
                ]
            }
        },
        "_pluralize": {
            "name": "_pluralize",
            "location": 109,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "_generate_hint": {
            "name": "_generate_hint",
            "location": 116,
            "return": [
                "str"
            ],
            "arguments": {
                "ty": [
                    "type"
                ],
                "get_description": [
                    "Callable[([type], str)]"
                ]
            }
        },
        "english_description_of_type": {
            "name": "english_description_of_type",
            "location": 130,
            "return": [
                "Tuple[(str, Dict[(type, str)])]"
            ],
            "arguments": {
                "ty": [
                    "type"
                ]
            }
        },
        "checked": {
            "name": "checked",
            "location": 204,
            "return": [
                "Type[_A]"
            ],
            "arguments": {
                "klass": [
                    "Type[_A]"
                ]
            }
        },
        "check_type": {
            "name": "check_type",
            "location": 239,
            "return": [
                "_C"
            ],
            "arguments": {
                "ty": [
                    "Type[_C]"
                ],
                "data": [
                    "object"
                ]
            }
        },
        "Constructable.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TypeThunk.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "klass": [
                    "builtins.type"
                ]
            }
        },
        "_TypeThunk.__getitem__": {
            "name": "__getitem__",
            "location": 60,
            "return": [
                "_Field"
            ],
            "arguments": {
                "self": [],
                "field_name": [
                    "str"
                ]
            }
        },
        "_TypeThunk.__iter__": {
            "name": "__iter__",
            "location": 63,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TypeThunk.fields": {
            "name": "fields",
            "location": 67,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "english_description_of_type.inner": {
            "name": "inner",
            "location": 133,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "ty": [
                    "Optional[str]",
                    "str",
                    "type",
                    "bool"
                ],
                "plural": [
                    "Union[int, float]",
                    "List[str]"
                ],
                "level": [
                    "bool",
                    "str"
                ]
            }
        },
        "LoadError.__init__": {
            "name": "__init__",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "ty": [
                    "type"
                ],
                "bad_data": [
                    "object"
                ]
            }
        },
        "LoadWrongType.__init__": {
            "name": "__init__",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ty": [
                    "type"
                ],
                "bad_data": [
                    "object"
                ]
            }
        },
        "LoadUnknownField.__init__": {
            "name": "__init__",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ty": [
                    "type"
                ],
                "bad_data": [
                    "object"
                ],
                "bad_field": [
                    "str"
                ]
            }
        },
        "_TypeThunk.fields.make_factory": {
            "name": "make_factory",
            "location": 68,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        }
    },
    "flutter-master/stubs/pytest.py": {
        "raises": {
            "name": "raises",
            "location": 3,
            "return": [],
            "arguments": {
                "exception": []
            }
        }
    }
}
{
    "fmi.py-master/setup.py": {},
    "fmi.py-master/doc/conf.py": {},
    "fmi.py-master/doc/getting_started_example.py": {},
    "fmi.py-master/fmi/constant.py": {},
    "fmi.py-master/fmi/fmi.py": {},
    "fmi.py-master/fmi/model.py": {
        "Coordinates.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lat": [
                    "int",
                    "float",
                    "bool"
                ],
                "lon": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Observation.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "coordinates": [
                    "bool",
                    "str",
                    "List[tuple[Union[int,int]]]",
                    "int",
                    "List[Tuple[int,int]]"
                ],
                "timestamp": [
                    "bool",
                    "str",
                    "List[tuple[Union[int,int]]]",
                    "int",
                    "List[Tuple[int,int]]"
                ],
                "temperature": [
                    "bool",
                    "None",
                    "int",
                    "str",
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]"
                ],
                "humidity": [
                    "bool",
                    "None",
                    "int",
                    "str",
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]"
                ],
                "clouds": [
                    "bool",
                    "None",
                    "int",
                    "str",
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]"
                ],
                "dewpoint": [
                    "bool",
                    "None",
                    "int",
                    "str",
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]"
                ],
                "pressure": [
                    "bool",
                    "None",
                    "int",
                    "str",
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]"
                ],
                "precipitation_1h": [
                    "bool",
                    "None",
                    "int",
                    "str",
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]"
                ],
                "snow": [
                    "bool",
                    "None",
                    "int",
                    "str",
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]"
                ],
                "visibility": [
                    "bool",
                    "None",
                    "int",
                    "str",
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]"
                ],
                "wind_direction": [
                    "bool",
                    "None",
                    "int",
                    "str",
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]"
                ],
                "wind_gust": [
                    "bool",
                    "None",
                    "int",
                    "str",
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]"
                ],
                "wind_speed": [
                    "bool",
                    "None",
                    "int",
                    "str",
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]"
                ],
                "wawa": [
                    "bool",
                    "None",
                    "int",
                    "str",
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]"
                ]
            }
        },
        "Observation.weather_text": {
            "name": "weather_text",
            "location": 101,
            "return": [
                "None",
                "int",
                "str",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Observation.__str__": {
            "name": "__str__",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Forecast.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dewpoint": [
                    "float",
                    "str"
                ],
                "height": [
                    "int",
                    "float",
                    "bool"
                ],
                "high_cloud_cover": [
                    "int",
                    "float",
                    "bool"
                ],
                "humidity": [
                    "int",
                    "float",
                    "bool"
                ],
                "landseamask": [
                    "int",
                    "float",
                    "bool"
                ],
                "low_cloud_cover": [
                    "int",
                    "float",
                    "bool"
                ],
                "max_wind": [
                    "int",
                    "float",
                    "Optional[int]",
                    "None"
                ],
                "med_cloud_cover": [
                    "int",
                    "float",
                    "bool"
                ],
                "precipitation_1h": [
                    "int",
                    "float",
                    "bool"
                ],
                "precipitation_amount": [
                    "int",
                    "float",
                    "bool"
                ],
                "pressure": [
                    "int",
                    "float",
                    "bool"
                ],
                "radiation_diffuse_acc": [
                    "int",
                    "float",
                    "bool"
                ],
                "radiation_global_acc": [
                    "int",
                    "float",
                    "bool"
                ],
                "radiation_lwa_acc": [
                    "int",
                    "float",
                    "bool"
                ],
                "radiation_netsurface_lwa_acc": [
                    "int",
                    "float",
                    "bool"
                ],
                "radiation_netsurface_swa_acc": [
                    "int",
                    "float",
                    "bool"
                ],
                "temperature": [
                    "int",
                    "float",
                    "bool"
                ],
                "total_cloud_cover": [
                    "int",
                    "float",
                    "bool"
                ],
                "wind_direction": [
                    "int",
                    "float",
                    "bool"
                ],
                "wind_gust": [
                    "int",
                    "float",
                    "bool"
                ],
                "wind_speed": [
                    "int",
                    "float",
                    "bool"
                ],
                "wind_ums": [
                    "int",
                    "float",
                    "bool"
                ],
                "wind_vms": [
                    "int",
                    "float",
                    "bool"
                ],
                "coordinates": [
                    "int",
                    "float",
                    "bool"
                ],
                "timestamp": [
                    "int",
                    "float",
                    "bool"
                ],
                "weather_symbol_code": [
                    "int"
                ]
            }
        },
        "Forecast.weather_text": {
            "name": "weather_text",
            "location": 221,
            "return": [
                "None",
                "str",
                "Dict[str,str]",
                "Dict[str,Dict[str,Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Forecast.__str__": {
            "name": "__str__",
            "location": 228,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fmi.py-master/fmi/wfs_parse.py": {
        "_read_raw_gml": {
            "name": "_read_raw_gml",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "gml": [
                    "str",
                    "Dict",
                    "List[str]",
                    "Union[str,List[str]]"
                ]
            }
        },
        "_extract_features": {
            "name": "_extract_features",
            "location": 24,
            "return": [
                "list"
            ],
            "arguments": {
                "gml": [
                    "str",
                    "int"
                ]
            }
        },
        "parse_latest_observations": {
            "name": "parse_latest_observations",
            "location": 36,
            "return": [
                "list"
            ],
            "arguments": {
                "gml": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "parse_forecast": {
            "name": "parse_forecast",
            "location": 47,
            "return": [
                "List[fmi.model.Forecast]"
            ],
            "arguments": {
                "gml": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_parse_watlev_property": {
            "name": "_parse_watlev_property",
            "location": 90,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "feature": [
                    "Dict[str, str]",
                    "int",
                    "float"
                ]
            }
        },
        "parse_sea_levels": {
            "name": "parse_sea_levels",
            "location": 97,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "gml": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_parse_exception": {
            "name": "_parse_exception",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "gml": [
                    "Dict"
                ]
            }
        },
        "_extract_node_id": {
            "name": "_extract_node_id",
            "location": 126,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "element": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]"
                ]
            }
        },
        "_dict_to_observation": {
            "name": "_dict_to_observation",
            "location": 132,
            "return": [
                "fmi.model.Observation"
            ],
            "arguments": {
                "obj": [
                    "Mapping[str, Sequence[str]]"
                ]
            }
        },
        "_merge": {
            "name": "_merge",
            "location": 153,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "acc": [
                    "Dict[str, str]",
                    "str",
                    "int"
                ],
                "cur": [
                    "str"
                ]
            }
        },
        "_gml_find": {
            "name": "_gml_find",
            "location": 167,
            "return": [
                "str"
            ],
            "arguments": {
                "gml": [
                    "str",
                    "int",
                    "List[str]",
                    "Optional[Union[int,str]]",
                    "None"
                ],
                "search_term": [
                    "str",
                    "Optional[Union[int,str]]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "_parse_feature": {
            "name": "_parse_feature",
            "location": 172,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "gml": [
                    "float",
                    "str",
                    "Iterable[str]"
                ]
            }
        }
    },
    "fmi.py-master/fmi/__init__.py": {},
    "fmi.py-master/fmi/__version__.py": {},
    "fmi.py-master/test/conftest.py": {
        "parse_first_node": {
            "name": "parse_first_node",
            "location": 14,
            "return": [
                "int",
                "Union[str, int]"
            ],
            "arguments": {
                "gml": [
                    "Callable[[lxml.etree._Element],T]",
                    "Iterable[str]",
                    "Callable[lxml.etree._Element,T]"
                ]
            }
        },
        "observation_gml": {
            "name": "observation_gml",
            "location": 21,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "observation_node": {
            "name": "observation_node",
            "location": 30,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "observation_gml": [
                    "str",
                    "int",
                    "float",
                    "Sequence"
                ]
            }
        },
        "forecast_gml": {
            "name": "forecast_gml",
            "location": 35,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "forecast_node": {
            "name": "forecast_node",
            "location": 43,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "forecast_gml": [
                    "str",
                    "int",
                    "float",
                    "Sequence"
                ]
            }
        },
        "api_exception": {
            "name": "api_exception",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "sea_level_gml": {
            "name": "sea_level_gml",
            "location": 54,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {}
        }
    },
    "fmi.py-master/test/test_api.py": {},
    "fmi.py-master/test/test_functional.py": {},
    "fmi.py-master/test/test_model.py": {
        "test_return_none_if_zero_wawa": {
            "name": "test_return_none_if_zero_wawa",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_return_sumua_if_weather_code_30": {
            "name": "test_return_sumua_if_weather_code_30",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fmi.py-master/test/test_wfs_parser.py": {
        "test_wfs_observation_parsing": {
            "name": "test_wfs_observation_parsing",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "observation_gml": []
            }
        },
        "test_wfs_parse_coords": {
            "name": "test_wfs_parse_coords",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "observation_node": []
            }
        },
        "test_wfs_parse_property": {
            "name": "test_wfs_parse_property",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "observation_node": []
            }
        },
        "test_compare_element_id": {
            "name": "test_compare_element_id",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "observation_node": []
            }
        },
        "test_time_parsed_exact": {
            "name": "test_time_parsed_exact",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "observation_node": []
            }
        },
        "test_parse_forecast_not_empty": {
            "name": "test_parse_forecast_not_empty",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "forecast_gml": []
            }
        },
        "test_parse_forecast_has_temperature": {
            "name": "test_parse_forecast_has_temperature",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "forecast_gml": []
            }
        },
        "test_parse_forecast_has_text_representation": {
            "name": "test_parse_forecast_has_text_representation",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "forecast_gml": []
            }
        },
        "test_parse_exception": {
            "name": "test_parse_exception",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "api_exception": []
            }
        },
        "test_parse_sea_level_valid_timestamp": {
            "name": "test_parse_sea_level_valid_timestamp",
            "location": 77,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "sea_level_gml": []
            }
        },
        "test_parse_sea_level_value": {
            "name": "test_parse_sea_level_value",
            "location": 82,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "sea_level_gml": []
            }
        },
        "test_sea_level_trailing_null_is_removed": {
            "name": "test_sea_level_trailing_null_is_removed",
            "location": 89,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "sea_level_gml": []
            }
        },
        "test_parse_null_watlev_property": {
            "name": "test_parse_null_watlev_property",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_watlev_property": {
            "name": "test_parse_watlev_property",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fmi.py-master/test/__init__.py": {}
}
{
    "fonduer-master/setup.py": {},
    "fonduer-master/docs/conf.py": {},
    "fonduer-master/src/fonduer/meta.py": {
        "init_logging": {
            "name": "init_logging",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "log_dir": [
                    "str",
                    "Optional[str]"
                ],
                "format": [
                    "Text",
                    "str",
                    "int"
                ],
                "level": [
                    "str",
                    "int"
                ]
            }
        },
        "new_sessionmaker": {
            "name": "new_sessionmaker",
            "location": 60,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "_update_meta": {
            "name": "_update_meta",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "conn_string": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "None"
                ]
            }
        },
        "Meta.init": {
            "name": "init",
            "location": 126,
            "return": [
                "str",
                "bool",
                "int",
                "None",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "None",
                    "bool",
                    "Optional[str]",
                    "datetime.date"
                ],
                "conn_string": [
                    "None",
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ]
            }
        },
        "Meta._init_db": {
            "name": "_init_db",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict",
                    "List[Dict]",
                    "Callable",
                    "List[dict]",
                    "List[str]"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/_version.py": {},
    "fonduer-master/src/fonduer/__init__.py": {},
    "fonduer-master/src/fonduer/candidates/candidates.py": {
        "CandidateExtractor.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "sqlalchemy.orm.Session",
                    "int",
                    "List[fonduer.candidates.models.Candidate]",
                    "tensorflow.Session"
                ],
                "candidate_classes": [
                    "Optional[sqlalchemy.Table]",
                    "Tuple[int, Any]",
                    "Optional[bytes]",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "throttlers": [
                    "Optional[bool]",
                    "Optional[Dict[str, int]]",
                    "Optional[bytes]",
                    "Tuple[int, Any]",
                    "Optional[sqlalchemy.Table]"
                ],
                "self_relations": [
                    "sqlalchemy.orm.Session",
                    "int",
                    "List[fonduer.candidates.models.Candidate]",
                    "tensorflow.Session"
                ],
                "nested_relations": [
                    "sqlalchemy.orm.Session",
                    "int",
                    "List[fonduer.candidates.models.Candidate]",
                    "tensorflow.Session"
                ],
                "symmetric_relations": [
                    "sqlalchemy.orm.Session",
                    "int",
                    "List[fonduer.candidates.models.Candidate]",
                    "tensorflow.Session"
                ],
                "parallelism": [
                    "sqlalchemy.orm.Session",
                    "int",
                    "List[fonduer.candidates.models.Candidate]",
                    "tensorflow.Session"
                ]
            }
        },
        "CandidateExtractor.apply": {
            "name": "apply",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "docs": [
                    "bool",
                    "Dict[str, str]",
                    "str",
                    "float",
                    "Optional[int]"
                ],
                "split": [
                    "bool",
                    "Dict[str, str]",
                    "str",
                    "float",
                    "Optional[int]"
                ],
                "clear": [
                    "bool",
                    "Dict[str, str]",
                    "str",
                    "float",
                    "Optional[int]"
                ],
                "parallelism": [
                    "bool",
                    "Dict[str, str]",
                    "str",
                    "float",
                    "Optional[int]"
                ],
                "progress_bar": [
                    "bool",
                    "Dict[str, str]",
                    "str",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "CandidateExtractor.clear": {
            "name": "clear",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "split": [
                    "int",
                    "str",
                    "zerver.models.Realm",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "CandidateExtractor.clear_all": {
            "name": "clear_all",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "split": [
                    "str",
                    "Optional[int]",
                    "zerver.models.Realm"
                ]
            }
        },
        "CandidateExtractor.get_candidates": {
            "name": "get_candidates",
            "location": 154,
            "return": [
                "str",
                "Type[tuple]",
                "Union[dict, List[Any]]",
                "Tuple[str]",
                "Callable[[str], str]"
            ],
            "arguments": {
                "self": [],
                "docs": [
                    "sqlalchemy.orm.Session",
                    "django.db.models.QuerySet",
                    "Tuple[Sequence]"
                ],
                "split": [
                    "int",
                    "Optional[str]",
                    "grouper.models.group.Group",
                    "List[int]",
                    "Union[server.models.Bike, int]",
                    "bool"
                ],
                "sort": [
                    "bool",
                    "str"
                ]
            }
        },
        "CandidateExtractorUDF.__init__": {
            "name": "__init__",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "candidate_classes": [
                    "Dict[str, Dict[str, str]]",
                    "bool",
                    "tracim.models.data.Workspace",
                    "Union[str, List[str]]",
                    "str"
                ],
                "throttlers": [
                    "List[Dict[str, Any]]",
                    "List[T]",
                    "bytes"
                ],
                "self_relations": [
                    "str",
                    "Callable",
                    "Dict[str, Any]"
                ],
                "nested_relations": [
                    "str",
                    "Callable",
                    "Dict[str, Any]"
                ],
                "symmetric_relations": [
                    "str",
                    "Callable",
                    "Dict[str, Any]"
                ]
            }
        },
        "CandidateExtractorUDF.apply": {
            "name": "apply",
            "location": 248,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "str",
                    "int",
                    "raiden.utils.Address",
                    "Optional[Dict]",
                    "float"
                ],
                "split": [
                    "bool",
                    "int",
                    "str",
                    "Exception",
                    "Dict[str, int]"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/candidates/matchers.py": {
        "_Matcher.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Matcher.init": {
            "name": "init",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Matcher._check_opts": {
            "name": "_check_opts",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Matcher._f": {
            "name": "_f",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "int",
                    "fonduer.candidates.models.temporary_contexTemporaryContext",
                    "List[str]",
                    "str"
                ]
            }
        },
        "_Matcher.f": {
            "name": "f",
            "location": 43,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "str",
                    "int",
                    "fonduer.candidates.models.temporary_contexTemporaryContext"
                ]
            }
        },
        "_Matcher.apply": {
            "name": "apply",
            "location": 58,
            "return": [
                "Iterator[fonduer.candidates.models.temporary_context.TemporaryContext]",
                "Generator[Text]"
            ],
            "arguments": {
                "self": [],
                "mentions": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "DictionaryMatch.init": {
            "name": "init",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictionaryMatch._stem": {
            "name": "_stem",
            "location": 107,
            "return": [
                "str",
                "int",
                "Iterable[str]",
                "Callable",
                "models.Question"
            ],
            "arguments": {
                "self": [],
                "w": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "DictionaryMatch._f": {
            "name": "_f",
            "location": 114,
            "return": [
                "bool",
                "str",
                "Optional[int]",
                "Sequence[Union[str,Any]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "LambdaFunctionMatcher.init": {
            "name": "init",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LambdaFunctionMatcher._f": {
            "name": "_f",
            "location": 149,
            "return": [
                "str",
                "zerver.models.Realm",
                "int"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "float",
                    "str",
                    "int",
                    "Tuple",
                    "bool"
                ]
            }
        },
        "Union.f": {
            "name": "f",
            "location": 166,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "int",
                    "fonduer.candidates.models.temporary_contexTemporaryContext",
                    "float",
                    "Tuple[int]"
                ]
            }
        },
        "Intersect.f": {
            "name": "f",
            "location": 182,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "int",
                    "fonduer.candidates.models.temporary_contexTemporaryContext",
                    "float",
                    "Tuple[int]"
                ]
            }
        },
        "Inverse.__init__": {
            "name": "__init__",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Inverse.f": {
            "name": "f",
            "location": 205,
            "return": [
                "bool",
                "str",
                "int",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "int",
                    "fonduer.candidates.models.temporary_contexTemporaryContext",
                    "float",
                    "Tuple[int]"
                ]
            }
        },
        "Concat.init": {
            "name": "init",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Concat.f": {
            "name": "f",
            "location": 249,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "List[int]",
                    "bool",
                    "int"
                ]
            }
        },
        "_RegexMatch.init": {
            "name": "init",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_RegexMatch._f": {
            "name": "_f",
            "location": 319,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "int",
                    "fonduer.candidates.models.temporary_contexTemporaryContext",
                    "List[str]",
                    "str"
                ]
            }
        },
        "RegexMatchSpan._f": {
            "name": "_f",
            "location": 343,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "RegexMatchEach._f": {
            "name": "_f",
            "location": 380,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "float",
                    "List[str]",
                    "None"
                ]
            }
        },
        "PersonMatcher.__init__": {
            "name": "__init__",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocationMatcher.__init__": {
            "name": "__init__",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrganizationMatcher.__init__": {
            "name": "__init__",
            "location": 431,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateMatcher.__init__": {
            "name": "__init__",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NumberMatcher.__init__": {
            "name": "__init__",
            "location": 461,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MiscMatcher.__init__": {
            "name": "__init__",
            "location": 476,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LambdaFunctionFigureMatcher.init": {
            "name": "init",
            "location": 491,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LambdaFunctionFigureMatcher._f": {
            "name": "_f",
            "location": 500,
            "return": [
                "str",
                "zerver.models.Realm",
                "int"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "float",
                    "str",
                    "int",
                    "Tuple",
                    "bool"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/candidates/mentions.py": {
        "MentionSpace.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MentionSpace.apply": {
            "name": "apply",
            "location": 39,
            "return": [
                "typing.Iterator[fonduer.candidates.models.temporary_context.TemporaryContext]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "Ngrams.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_min": [
                    "int",
                    "float",
                    "str",
                    "bool",
                    "Iterable[List[str]]",
                    "Tuple[int]"
                ],
                "n_max": [
                    "int",
                    "float",
                    "str",
                    "bool",
                    "Iterable[List[str]]",
                    "Tuple[int]"
                ],
                "split_tokens": [
                    "Collection[str]",
                    "int",
                    "bool",
                    "IO",
                    "bytes",
                    "str",
                    "hackathon.utils.utils.ResultsMessage",
                    "IO[Any]"
                ]
            }
        },
        "Ngrams.apply": {
            "name": "apply",
            "location": 74,
            "return": [
                "typing.Iterator[fonduer.candidates.models.span_mention.TemporarySpanMention]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "MentionNgrams.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_min": [
                    "Optional[int]",
                    "int",
                    "Optional[str]",
                    "Iterable[List[Any]]",
                    "Optional[Any]",
                    "bool",
                    "Optional[List[str]]"
                ],
                "n_max": [
                    "Optional[int]",
                    "int",
                    "Optional[str]",
                    "Iterable[List[Any]]",
                    "Optional[Any]",
                    "bool",
                    "Optional[List[str]]"
                ],
                "split_tokens": [
                    "Optional[int]",
                    "int",
                    "Optional[str]",
                    "Iterable[List[Any]]",
                    "Optional[Any]",
                    "bool",
                    "Optional[List[str]]"
                ]
            }
        },
        "MentionNgrams.apply": {
            "name": "apply",
            "location": 148,
            "return": [
                "typing.Iterator[fonduer.candidates.models.span_mention.TemporarySpanMention]"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "MentionFigures.__init__": {
            "name": "__init__",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "types": [
                    "Optional[str]",
                    "Optional[Type]",
                    "str",
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "transfer.models.SnippetType",
                    "Union[str, List[str]]",
                    "BinaryIO"
                ]
            }
        },
        "MentionFigures.apply": {
            "name": "apply",
            "location": 180,
            "return": [
                "typing.Iterator[fonduer.candidates.models.figure_mention.TemporaryFigureMention]"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "MentionSentences.__init__": {
            "name": "__init__",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MentionSentences.apply": {
            "name": "apply",
            "location": 206,
            "return": [
                "typing.Iterator[fonduer.candidates.models.span_mention.TemporarySpanMention]"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "MentionParagraphs.__init__": {
            "name": "__init__",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MentionParagraphs.apply": {
            "name": "apply",
            "location": 231,
            "return": [
                "typing.Iterator[fonduer.candidates.models.paragraph_mention.TemporaryParagraphMention]"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "MentionCaptions.__init__": {
            "name": "__init__",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MentionCaptions.apply": {
            "name": "apply",
            "location": 254,
            "return": [
                "typing.Iterator[fonduer.candidates.models.caption_mention.TemporaryCaptionMention]"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "MentionCells.__init__": {
            "name": "__init__",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MentionCells.apply": {
            "name": "apply",
            "location": 277,
            "return": [
                "typing.Iterator[fonduer.candidates.models.cell_mention.TemporaryCellMention]"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "MentionTables.__init__": {
            "name": "__init__",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MentionTables.apply": {
            "name": "apply",
            "location": 300,
            "return": [
                "typing.Iterator[fonduer.candidates.models.table_mention.TemporaryTableMention]"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "MentionSections.__init__": {
            "name": "__init__",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MentionSections.apply": {
            "name": "apply",
            "location": 323,
            "return": [
                "typing.Iterator[fonduer.candidates.models.section_mention.TemporarySectionMention]"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "MentionDocuments.__init__": {
            "name": "__init__",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MentionDocuments.apply": {
            "name": "apply",
            "location": 346,
            "return": [
                "typing.Iterator[fonduer.candidates.models.document_mention.TemporaryDocumentMention]"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "MentionExtractor.__init__": {
            "name": "__init__",
            "location": 397,
            "return": [],
            "arguments": {
                "self": [],
                "session": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "str",
                    "raiden.utils.BlockIdentifier"
                ],
                "mention_classes": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "raiden.utils.BlockIdentifier",
                    "str",
                    "bool"
                ],
                "mention_spaces": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "Optional[Callable[[Type, Dict], Any]]",
                    "raiden.utils.BlockIdentifier",
                    "str"
                ],
                "matchers": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "Optional[Callable[[Type, Dict], Any]]",
                    "raiden.utils.BlockIdentifier",
                    "str"
                ],
                "parallelism": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "str",
                    "raiden.utils.BlockIdentifier"
                ]
            }
        },
        "MentionExtractor.apply": {
            "name": "apply",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "docs": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ],
                "clear": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ],
                "parallelism": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ],
                "progress_bar": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "MentionExtractor.clear": {
            "name": "clear",
            "location": 453,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MentionExtractor.clear_all": {
            "name": "clear_all",
            "location": 480,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MentionExtractor.get_mentions": {
            "name": "get_mentions",
            "location": 489,
            "return": [
                "str",
                "bool",
                "dict",
                "set",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "docs": [
                    "app.models.User",
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "taxonomy.db.models.Taxon"
                ],
                "sort": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "MentionExtractorUDF.__init__": {
            "name": "__init__",
            "location": 530,
            "return": [],
            "arguments": {
                "self": [],
                "mention_classes": [
                    "List[str]",
                    "bool",
                    "Callable",
                    "str"
                ],
                "mention_spaces": [
                    "int",
                    "str"
                ],
                "matchers": [
                    "List[str]",
                    "int",
                    "Iterable[Tuple[Any, Any]]",
                    "bool"
                ]
            }
        },
        "MentionExtractorUDF.apply": {
            "name": "apply",
            "location": 555,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, Any]]",
                    "int"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/candidates/__init__.py": {},
    "fonduer-master/src/fonduer/candidates/models/candidate.py": {
        "candidate_subclass": {
            "name": "candidate_subclass",
            "location": 71,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "class_name": [
                    "str",
                    "Dict[str,str]",
                    "Optional[str]",
                    "None"
                ],
                "args": [],
                "table_name": [
                    "Optional[str]",
                    "str",
                    "None",
                    "List[str]"
                ],
                "cardinality": [
                    "Optional[int]",
                    "None",
                    "str",
                    "Optional[str]",
                    "int",
                    "Dict",
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "values": [
                    "None",
                    "Optional[List[Any]]",
                    "str",
                    "List[Any]",
                    "List[str]",
                    "Optional[List[str]]",
                    "Dict",
                    "Set[str]",
                    "bool",
                    "Optional[str]"
                ],
                "nullables": [
                    "str",
                    "int"
                ]
            }
        },
        "Candidate.get_mentions": {
            "name": "get_mentions",
            "location": 44,
            "return": [
                "Tuple",
                "str",
                "List[Tuple[str,str]]",
                "List[str]",
                "List[Tuple[str,Any]]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Candidate.__len__": {
            "name": "__len__",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Candidate.__getitem__": {
            "name": "__getitem__",
            "location": 52,
            "return": [
                "str",
                "dict",
                "Optional[str]",
                "Callable[[Dict], Any]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Hashable"
                ]
            }
        },
        "Candidate.__repr__": {
            "name": "__repr__",
            "location": 56,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Candidate.__gt__": {
            "name": "__gt__",
            "location": 65,
            "return": [
                "bool",
                "Optional[str]",
                "models.JournalEntryOrigin",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other_cand": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/candidates/models/caption_mention.py": {
        "TemporaryCaptionMention.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "caption": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "TemporaryCaptionMention.__len__": {
            "name": "__len__",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryCaptionMention.__eq__": {
            "name": "__eq__",
            "location": 25,
            "return": [
                "bool",
                "str",
                "List[int]",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any"
                ]
            }
        },
        "TemporaryCaptionMention.__ne__": {
            "name": "__ne__",
            "location": 31,
            "return": [
                "bool",
                "str",
                "List[int]",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any"
                ]
            }
        },
        "TemporaryCaptionMention.__gt__": {
            "name": "__gt__",
            "location": 37,
            "return": [
                "bool",
                "str",
                "List[int]",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any"
                ]
            }
        },
        "TemporaryCaptionMention.__contains__": {
            "name": "__contains__",
            "location": 44,
            "return": [
                "str",
                "List[int]",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any"
                ]
            }
        },
        "TemporaryCaptionMention.__hash__": {
            "name": "__hash__",
            "location": 50,
            "return": [
                "int",
                "Tuple[int,int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryCaptionMention.get_stable_id": {
            "name": "get_stable_id",
            "location": 54,
            "return": [
                "Optional[int]",
                "Optional[bool]",
                "Optional[str]",
                "str",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.Item",
                "cmk.utils.type_defs.CheckPluginNameStr"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryCaptionMention._get_table": {
            "name": "_get_table",
            "location": 58,
            "return": [
                "str",
                "list",
                "int",
                "sqlalchemy.orm.Session"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryCaptionMention._get_polymorphic_identity": {
            "name": "_get_polymorphic_identity",
            "location": 61,
            "return": [
                "Text",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryCaptionMention._get_insert_args": {
            "name": "_get_insert_args",
            "location": 64,
            "return": [
                "Dict[Text,]",
                "bool",
                "cmk.utils.type_defs.UserId",
                "zerver.models.Realm",
                "Optional[int]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryCaptionMention.__repr__": {
            "name": "__repr__",
            "location": 67,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryCaptionMention._get_instance": {
            "name": "_get_instance",
            "location": 76,
            "return": [
                "TemporaryCaptionMention",
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaptionMention.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tc": [
                    "dict",
                    "int",
                    "List[deeplearning.ml4pl.models.log_database.Batch]"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/candidates/models/cell_mention.py": {
        "TemporaryCellMention.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cell": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "TemporaryCellMention.__len__": {
            "name": "__len__",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryCellMention.__eq__": {
            "name": "__eq__",
            "location": 25,
            "return": [
                "bool",
                "str",
                "List[int]",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any"
                ]
            }
        },
        "TemporaryCellMention.__ne__": {
            "name": "__ne__",
            "location": 31,
            "return": [
                "bool",
                "str",
                "List[int]",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any"
                ]
            }
        },
        "TemporaryCellMention.__gt__": {
            "name": "__gt__",
            "location": 37,
            "return": [
                "bool",
                "str",
                "List[int]",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any"
                ]
            }
        },
        "TemporaryCellMention.__contains__": {
            "name": "__contains__",
            "location": 44,
            "return": [
                "str",
                "List[int]",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any",
                    "base.cell.Cell"
                ]
            }
        },
        "TemporaryCellMention.__hash__": {
            "name": "__hash__",
            "location": 50,
            "return": [
                "int",
                "Tuple[int,int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryCellMention.get_stable_id": {
            "name": "get_stable_id",
            "location": 54,
            "return": [
                "Optional[int]",
                "Optional[bool]",
                "Optional[str]",
                "str",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.Item",
                "cmk.utils.type_defs.CheckPluginNameStr"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryCellMention._get_table": {
            "name": "_get_table",
            "location": 58,
            "return": [
                "str",
                "list",
                "int",
                "sqlalchemy.orm.Session"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryCellMention._get_polymorphic_identity": {
            "name": "_get_polymorphic_identity",
            "location": 61,
            "return": [
                "Text",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryCellMention._get_insert_args": {
            "name": "_get_insert_args",
            "location": 64,
            "return": [
                "Dict[Text,]",
                "bool",
                "cmk.utils.type_defs.UserId",
                "zerver.models.Realm",
                "Optional[int]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryCellMention.__repr__": {
            "name": "__repr__",
            "location": 67,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryCellMention._get_instance": {
            "name": "_get_instance",
            "location": 78,
            "return": [
                "TemporaryCellMention",
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CellMention.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tc": [
                    "dict",
                    "int",
                    "List[deeplearning.ml4pl.models.log_database.Batch]"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/candidates/models/document_mention.py": {
        "TemporaryDocumentMention.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "TemporaryDocumentMention.__len__": {
            "name": "__len__",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryDocumentMention.__eq__": {
            "name": "__eq__",
            "location": 25,
            "return": [
                "bool",
                "str",
                "List[int]",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any"
                ]
            }
        },
        "TemporaryDocumentMention.__ne__": {
            "name": "__ne__",
            "location": 31,
            "return": [
                "bool",
                "str",
                "List[int]",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any"
                ]
            }
        },
        "TemporaryDocumentMention.__gt__": {
            "name": "__gt__",
            "location": 37,
            "return": [
                "bool",
                "str",
                "List[int]",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any"
                ]
            }
        },
        "TemporaryDocumentMention.__contains__": {
            "name": "__contains__",
            "location": 44,
            "return": [
                "str",
                "List[int]",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any"
                ]
            }
        },
        "TemporaryDocumentMention.__hash__": {
            "name": "__hash__",
            "location": 50,
            "return": [
                "int",
                "Tuple[int,int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryDocumentMention.get_stable_id": {
            "name": "get_stable_id",
            "location": 54,
            "return": [
                "Optional[int]",
                "Optional[bool]",
                "Optional[str]",
                "str",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.Item",
                "cmk.utils.type_defs.CheckPluginNameStr"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryDocumentMention._get_table": {
            "name": "_get_table",
            "location": 60,
            "return": [
                "str",
                "list",
                "int",
                "sqlalchemy.orm.Session"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryDocumentMention._get_polymorphic_identity": {
            "name": "_get_polymorphic_identity",
            "location": 63,
            "return": [
                "Text",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryDocumentMention._get_insert_args": {
            "name": "_get_insert_args",
            "location": 66,
            "return": [
                "Dict[Text,]",
                "bool",
                "cmk.utils.type_defs.UserId",
                "zerver.models.Realm",
                "Optional[int]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryDocumentMention.__repr__": {
            "name": "__repr__",
            "location": 69,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryDocumentMention._get_instance": {
            "name": "_get_instance",
            "location": 73,
            "return": [
                "TemporaryDocumentMention",
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocumentMention.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tc": [
                    "dict",
                    "int",
                    "List[deeplearning.ml4pl.models.log_database.Batch]"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/candidates/models/figure_mention.py": {
        "TemporaryFigureMention.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "figure": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "TemporaryFigureMention.__len__": {
            "name": "__len__",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryFigureMention.__eq__": {
            "name": "__eq__",
            "location": 25,
            "return": [
                "bool",
                "str",
                "List[int]",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any"
                ]
            }
        },
        "TemporaryFigureMention.__ne__": {
            "name": "__ne__",
            "location": 31,
            "return": [
                "bool",
                "str",
                "List[int]",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any"
                ]
            }
        },
        "TemporaryFigureMention.__gt__": {
            "name": "__gt__",
            "location": 37,
            "return": [
                "bool",
                "str",
                "List[int]",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any"
                ]
            }
        },
        "TemporaryFigureMention.__contains__": {
            "name": "__contains__",
            "location": 44,
            "return": [
                "str",
                "List[int]",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any"
                ]
            }
        },
        "TemporaryFigureMention.__hash__": {
            "name": "__hash__",
            "location": 50,
            "return": [
                "int",
                "Tuple[int,int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryFigureMention.get_stable_id": {
            "name": "get_stable_id",
            "location": 54,
            "return": [
                "Optional[int]",
                "Optional[bool]",
                "Optional[str]",
                "str",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.Item",
                "cmk.utils.type_defs.CheckPluginNameStr"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryFigureMention._get_table": {
            "name": "_get_table",
            "location": 58,
            "return": [
                "str",
                "list",
                "int",
                "sqlalchemy.orm.Session"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryFigureMention._get_polymorphic_identity": {
            "name": "_get_polymorphic_identity",
            "location": 61,
            "return": [
                "Text",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryFigureMention._get_insert_args": {
            "name": "_get_insert_args",
            "location": 64,
            "return": [
                "Dict[Text,]",
                "bool",
                "cmk.utils.type_defs.UserId",
                "zerver.models.Realm",
                "Optional[int]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryFigureMention.__repr__": {
            "name": "__repr__",
            "location": 67,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryFigureMention._get_instance": {
            "name": "_get_instance",
            "location": 78,
            "return": [
                "TemporaryFigureMention",
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FigureMention.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tc": [
                    "dict",
                    "int",
                    "List[deeplearning.ml4pl.models.log_database.Batch]"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/candidates/models/implicit_span_mention.py": {
        "TemporaryImplicitSpanMention.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sentence": [
                    "str",
                    "bool",
                    "TextIO",
                    "None",
                    "float",
                    "Optional[int]",
                    "raiden.utils.TokenNetworkAddress",
                    "Tuple[Union[int,int]]",
                    "Optional[Tuple[int,int]]"
                ],
                "char_start": [
                    "str",
                    "bool",
                    "TextIO",
                    "None",
                    "float",
                    "Optional[int]",
                    "raiden.utils.TokenNetworkAddress",
                    "Tuple[Union[int,int]]",
                    "Optional[Tuple[int,int]]"
                ],
                "char_end": [
                    "str",
                    "bool",
                    "TextIO",
                    "None",
                    "float",
                    "Optional[int]",
                    "raiden.utils.TokenNetworkAddress",
                    "Tuple[Union[int,int]]",
                    "Optional[Tuple[int,int]]"
                ],
                "expander_key": [
                    "Dict",
                    "bool",
                    "str",
                    "List[cmk.utils.type_defs.HostKey]",
                    "cmk.utils.type_defs.HostKey",
                    "None",
                    "Optional[List[cmk.utils.type_defs.HostKey]]",
                    "Optional[int]",
                    "Tuple[Union[str,str,str]]",
                    "Tuple[str,str,str]"
                ],
                "position": [
                    "bool",
                    "str",
                    "None",
                    "Optional[bool]",
                    "List[Any]",
                    "Optional[str]",
                    "Optional[List[Any]]"
                ],
                "text": [
                    "bool",
                    "str",
                    "None",
                    "Optional[bool]",
                    "List[Any]",
                    "Optional[str]",
                    "Optional[List[Any]]"
                ],
                "words": [
                    "bool",
                    "str",
                    "None",
                    "Optional[bool]",
                    "List[Any]",
                    "Optional[str]",
                    "Optional[List[Any]]"
                ],
                "lemmas": [
                    "bool",
                    "str",
                    "None",
                    "Optional[bool]",
                    "List[Any]",
                    "Optional[str]",
                    "Optional[List[Any]]"
                ],
                "pos_tags": [
                    "bool",
                    "str",
                    "opentrons.types.Location",
                    "opentrons.protocols.types.APIVersion",
                    "int"
                ],
                "ner_tags": [
                    "bool",
                    "str",
                    "opentrons.types.Location",
                    "opentrons.protocols.types.APIVersion",
                    "int"
                ],
                "dep_parents": [
                    "bool",
                    "str",
                    "None",
                    "Optional[bool]",
                    "List[Any]",
                    "Optional[str]",
                    "Optional[List[Any]]"
                ],
                "dep_labels": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Tuple[int]",
                    "int"
                ],
                "page": [
                    "bool",
                    "str",
                    "None",
                    "Optional[bool]",
                    "List[Any]",
                    "Optional[str]",
                    "Optional[List[Any]]"
                ],
                "top": [
                    "bool",
                    "str",
                    "None",
                    "Optional[bool]",
                    "List[Any]",
                    "Optional[str]",
                    "Optional[List[Any]]"
                ],
                "left": [
                    "bool",
                    "str",
                    "None",
                    "Optional[bool]",
                    "List[Any]",
                    "Optional[str]",
                    "Optional[List[Any]]"
                ],
                "bottom": [
                    "bool",
                    "str",
                    "None",
                    "Optional[bool]",
                    "List[Any]",
                    "Optional[str]",
                    "Optional[List[Any]]"
                ],
                "right": [
                    "bool",
                    "str",
                    "None",
                    "Optional[bool]",
                    "List[Any]",
                    "Optional[str]",
                    "Optional[List[Any]]"
                ],
                "meta": [
                    "str",
                    "None",
                    "bool",
                    "TextIO",
                    "float",
                    "Optional[int]",
                    "raiden.utils.TokenNetworkAddress",
                    "Tuple[Union[int,int]]",
                    "Optional[Tuple[int,int]]"
                ]
            }
        },
        "TemporaryImplicitSpanMention.__len__": {
            "name": "__len__",
            "location": 57,
            "return": [
                "bool",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryImplicitSpanMention.__eq__": {
            "name": "__eq__",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any"
                ]
            }
        },
        "TemporaryImplicitSpanMention.__ne__": {
            "name": "__ne__",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any"
                ]
            }
        },
        "TemporaryImplicitSpanMention.__hash__": {
            "name": "__hash__",
            "location": 85,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryImplicitSpanMention.get_stable_id": {
            "name": "get_stable_id",
            "location": 95,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryImplicitSpanMention._get_table": {
            "name": "_get_table",
            "location": 113,
            "return": [
                "str",
                "list",
                "int",
                "sqlalchemy.orm.Session"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryImplicitSpanMention._get_polymorphic_identity": {
            "name": "_get_polymorphic_identity",
            "location": 116,
            "return": [
                "Text",
                "str",
                "bool",
                "pyspark.sql.SparkSession"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryImplicitSpanMention._get_insert_args": {
            "name": "_get_insert_args",
            "location": 119,
            "return": [
                "Dict[Text,]",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryImplicitSpanMention.get_attrib_tokens": {
            "name": "get_attrib_tokens",
            "location": 141,
            "return": [
                "trezor.utils.Writer",
                "List[int]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "Text",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "TemporaryImplicitSpanMention.get_attrib_span": {
            "name": "get_attrib_span",
            "location": 154,
            "return": [
                "str",
                "Tuple[Tuple[int,...]]"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "List",
                    "Dict"
                ],
                "sep": [
                    "Text",
                    "wemake_python_styleguide.types.AnyImport",
                    "List",
                    "bytes",
                    "str"
                ]
            }
        },
        "TemporaryImplicitSpanMention.__getitem__": {
            "name": "__getitem__",
            "location": 171,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bool",
                    "Callable",
                    "bytes",
                    "slice"
                ]
            }
        },
        "TemporaryImplicitSpanMention.__repr__": {
            "name": "__repr__",
            "location": 210,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryImplicitSpanMention._get_instance": {
            "name": "_get_instance",
            "location": 222,
            "return": [
                "TemporaryImplicitSpanMention",
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImplicitSpanMention.__init__": {
            "name": "__init__",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tc": [
                    "List[str]",
                    "float",
                    "raiden.utils.Locksroot",
                    "raiden.utils.Address"
                ]
            }
        },
        "ImplicitSpanMention._get_instance": {
            "name": "_get_instance",
            "location": 342,
            "return": [
                "ImplicitSpanMention",
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImplicitSpanMention.__eq__": {
            "name": "__eq__",
            "location": 347,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any"
                ]
            }
        },
        "ImplicitSpanMention.__ne__": {
            "name": "__ne__",
            "location": 353,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any"
                ]
            }
        },
        "ImplicitSpanMention.__hash__": {
            "name": "__hash__",
            "location": 359,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fonduer-master/src/fonduer/candidates/models/mention.py": {
        "mention_subclass": {
            "name": "mention_subclass",
            "location": 66,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "class_name": [
                    "str",
                    "bytes"
                ],
                "cardinality": [
                    "None",
                    "int",
                    "Optional[int]",
                    "str",
                    "Callable",
                    "List",
                    "Optional[str]"
                ],
                "values": [
                    "Optional[List[Any]]",
                    "None",
                    "Optional[List[str]]",
                    "List[Any]",
                    "str",
                    "Optional[bytes]",
                    "Set[str]",
                    "List[str]",
                    "Dict",
                    "Tuple[str]",
                    "bytes",
                    "Optional[str]"
                ],
                "table_name": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Tuple[Optional[str],Optional[str]]",
                    "Tuple[Union[str,None,str,None]]"
                ]
            }
        },
        "Mention.get_contexts": {
            "name": "get_contexts",
            "location": 39,
            "return": [
                "Tuple",
                "str",
                "List[Tuple[str,str]]",
                "List[str]",
                "List[Tuple[str,Any]]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mention.__len__": {
            "name": "__len__",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mention.__getitem__": {
            "name": "__getitem__",
            "location": 47,
            "return": [
                "str",
                "dict",
                "Optional[str]",
                "Callable[[Dict], Any]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Mention.__repr__": {
            "name": "__repr__",
            "location": 51,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mention.__gt__": {
            "name": "__gt__",
            "location": 60,
            "return": [
                "bool",
                "mypy.nodes.Context",
                "Optional[str]",
                "models.JournalEntryOrigin",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/candidates/models/paragraph_mention.py": {
        "TemporaryParagraphMention.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "paragraph": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "TemporaryParagraphMention.__len__": {
            "name": "__len__",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryParagraphMention.__eq__": {
            "name": "__eq__",
            "location": 25,
            "return": [
                "bool",
                "str",
                "List[int]",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any"
                ]
            }
        },
        "TemporaryParagraphMention.__ne__": {
            "name": "__ne__",
            "location": 31,
            "return": [
                "bool",
                "str",
                "List[int]",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any"
                ]
            }
        },
        "TemporaryParagraphMention.__gt__": {
            "name": "__gt__",
            "location": 37,
            "return": [
                "bool",
                "str",
                "List[int]",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any"
                ]
            }
        },
        "TemporaryParagraphMention.__contains__": {
            "name": "__contains__",
            "location": 44,
            "return": [
                "str",
                "List[int]",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any"
                ]
            }
        },
        "TemporaryParagraphMention.__hash__": {
            "name": "__hash__",
            "location": 50,
            "return": [
                "int",
                "Tuple[int,int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryParagraphMention.get_stable_id": {
            "name": "get_stable_id",
            "location": 54,
            "return": [
                "Optional[int]",
                "Optional[bool]",
                "Optional[str]",
                "str",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.Item",
                "cmk.utils.type_defs.CheckPluginNameStr"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryParagraphMention._get_table": {
            "name": "_get_table",
            "location": 60,
            "return": [
                "str",
                "list",
                "int",
                "sqlalchemy.orm.Session"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryParagraphMention._get_polymorphic_identity": {
            "name": "_get_polymorphic_identity",
            "location": 63,
            "return": [
                "Text",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryParagraphMention._get_insert_args": {
            "name": "_get_insert_args",
            "location": 66,
            "return": [
                "Dict[Text,]",
                "bool",
                "cmk.utils.type_defs.UserId",
                "zerver.models.Realm",
                "Optional[int]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryParagraphMention.__repr__": {
            "name": "__repr__",
            "location": 69,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryParagraphMention._get_instance": {
            "name": "_get_instance",
            "location": 79,
            "return": [
                "TemporaryParagraphMention",
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParagraphMention.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tc": [
                    "dict",
                    "int",
                    "List[deeplearning.ml4pl.models.log_database.Batch]"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/candidates/models/section_mention.py": {
        "TemporarySectionMention.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "section": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "TemporarySectionMention.__len__": {
            "name": "__len__",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporarySectionMention.__eq__": {
            "name": "__eq__",
            "location": 25,
            "return": [
                "bool",
                "str",
                "List[int]",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any"
                ]
            }
        },
        "TemporarySectionMention.__ne__": {
            "name": "__ne__",
            "location": 31,
            "return": [
                "bool",
                "str",
                "List[int]",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any"
                ]
            }
        },
        "TemporarySectionMention.__gt__": {
            "name": "__gt__",
            "location": 37,
            "return": [
                "bool",
                "str",
                "List[int]",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any"
                ]
            }
        },
        "TemporarySectionMention.__contains__": {
            "name": "__contains__",
            "location": 44,
            "return": [
                "str",
                "List[int]",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any"
                ]
            }
        },
        "TemporarySectionMention.__hash__": {
            "name": "__hash__",
            "location": 50,
            "return": [
                "int",
                "Tuple[int,int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporarySectionMention.get_stable_id": {
            "name": "get_stable_id",
            "location": 54,
            "return": [
                "Optional[int]",
                "Optional[bool]",
                "Optional[str]",
                "str",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.Item",
                "cmk.utils.type_defs.CheckPluginNameStr"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporarySectionMention._get_table": {
            "name": "_get_table",
            "location": 58,
            "return": [
                "str",
                "list",
                "int",
                "sqlalchemy.orm.Session"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporarySectionMention._get_polymorphic_identity": {
            "name": "_get_polymorphic_identity",
            "location": 61,
            "return": [
                "Text",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporarySectionMention._get_insert_args": {
            "name": "_get_insert_args",
            "location": 64,
            "return": [
                "Dict[Text,]",
                "bool",
                "cmk.utils.type_defs.UserId",
                "zerver.models.Realm",
                "Optional[int]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporarySectionMention.__repr__": {
            "name": "__repr__",
            "location": 67,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporarySectionMention._get_instance": {
            "name": "_get_instance",
            "location": 77,
            "return": [
                "TemporarySectionMention",
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SectionMention.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tc": [
                    "dict",
                    "int",
                    "List[deeplearning.ml4pl.models.log_database.Batch]"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/candidates/models/span_mention.py": {
        "TemporarySpanMention.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sentence": [
                    "str",
                    "bool",
                    "int"
                ],
                "char_start": [
                    "int",
                    "str",
                    "Container",
                    "bool",
                    "Container[str]"
                ],
                "char_end": [
                    "str",
                    "bool",
                    "int"
                ],
                "meta": [
                    "str",
                    "None",
                    "bool",
                    "int"
                ]
            }
        },
        "TemporarySpanMention.__len__": {
            "name": "__len__",
            "location": 32,
            "return": [
                "bool",
                "str",
                "int",
                "float",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporarySpanMention.__eq__": {
            "name": "__eq__",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[cirq.Qid]",
                    "raiden.utils.Any",
                    "T"
                ]
            }
        },
        "TemporarySpanMention.__ne__": {
            "name": "__ne__",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[cirq.Qid]",
                    "raiden.utils.Any",
                    "T"
                ]
            }
        },
        "TemporarySpanMention.__hash__": {
            "name": "__hash__",
            "location": 56,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporarySpanMention.get_stable_id": {
            "name": "get_stable_id",
            "location": 60,
            "return": [
                "Optional[int]",
                "Optional[bool]",
                "Optional[str]",
                "str",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.Item",
                "cmk.utils.type_defs.CheckPluginNameStr"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporarySpanMention._get_table": {
            "name": "_get_table",
            "location": 69,
            "return": [
                "str",
                "list",
                "int",
                "sqlalchemy.orm.Session"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporarySpanMention._get_polymorphic_identity": {
            "name": "_get_polymorphic_identity",
            "location": 72,
            "return": [
                "Text",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporarySpanMention._get_insert_args": {
            "name": "_get_insert_args",
            "location": 75,
            "return": [
                "Dict[Text,]",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporarySpanMention.get_word_start_index": {
            "name": "get_word_start_index",
            "location": 83,
            "return": [
                "bool",
                "str",
                "Optional[float]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporarySpanMention.get_word_end_index": {
            "name": "get_word_end_index",
            "location": 90,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporarySpanMention.get_num_words": {
            "name": "get_num_words",
            "location": 97,
            "return": [
                "Optional[str]",
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporarySpanMention._char_to_word_index": {
            "name": "_char_to_word_index",
            "location": 104,
            "return": [
                "int",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "ci": [
                    "str",
                    "int",
                    "List[int]",
                    "bool",
                    "travelfootprininsta.types.BasicLocation"
                ]
            }
        },
        "TemporarySpanMention._word_to_char_index": {
            "name": "_word_to_char_index",
            "location": 118,
            "return": [
                "str",
                "int",
                "types.FrameType",
                "bool"
            ],
            "arguments": {
                "self": [],
                "wi": [
                    "str",
                    "bool"
                ]
            }
        },
        "TemporarySpanMention.get_attrib_tokens": {
            "name": "get_attrib_tokens",
            "location": 126,
            "return": [
                "str",
                "Tuple[bool, bool, bool]",
                "float",
                "Callable",
                "bool"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "Text",
                    "int",
                    "docker.models.containers.Container",
                    "Optional[Union[int,str]]",
                    "raiden.utils.Address",
                    "Callable[[str],str]"
                ]
            }
        },
        "TemporarySpanMention.get_attrib_span": {
            "name": "get_attrib_span",
            "location": 141,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "List",
                    "Dict"
                ],
                "sep": [
                    "Text",
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        },
        "TemporarySpanMention.get_span": {
            "name": "get_span",
            "location": 162,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporarySpanMention.get_bbox": {
            "name": "get_bbox",
            "location": 169,
            "return": [
                "Bbox",
                "None",
                "int",
                "zerver.models.Realm",
                "bytes",
                "str",
                "Callable",
                "raiden.utils.List[raiden.utils.Tuple[str,raiden.utils.Any]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporarySpanMention.__contains__": {
            "name": "__contains__",
            "location": 182,
            "return": [
                "bool",
                "str",
                "List[int]",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "other_span": [
                    "float",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "TemporarySpanMention.__getitem__": {
            "name": "__getitem__",
            "location": 192,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bool",
                    "Callable",
                    "bytes",
                    "slice"
                ]
            }
        },
        "TemporarySpanMention.__repr__": {
            "name": "__repr__",
            "location": 214,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporarySpanMention._get_instance": {
            "name": "_get_instance",
            "location": 226,
            "return": [
                "TemporarySpanMention",
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpanMention.__init__": {
            "name": "__init__",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tc": [
                    "List[str]",
                    "raiden.utils.Locksroot",
                    "raiden.utils.Address"
                ]
            }
        },
        "SpanMention._get_instance": {
            "name": "_get_instance",
            "location": 276,
            "return": [
                "SpanMention",
                "Dict[Optional[str],Set[abilian.services.security.models.Role]]",
                "abilian.core.models.subjects.Principal",
                "List[List[int]]",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpanMention.__eq__": {
            "name": "__eq__",
            "location": 281,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[T]",
                    "Collection",
                    "Union[int,float]",
                    "int",
                    "raiden.utils.Any",
                    "float"
                ]
            }
        },
        "SpanMention.__ne__": {
            "name": "__ne__",
            "location": 287,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[T]",
                    "Collection",
                    "Union[int,float]",
                    "int",
                    "raiden.utils.Any",
                    "float"
                ]
            }
        },
        "SpanMention.__hash__": {
            "name": "__hash__",
            "location": 293,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fonduer-master/src/fonduer/candidates/models/table_mention.py": {
        "TemporaryTableMention.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Optional[List[Any]]",
                    "List[Any]"
                ]
            }
        },
        "TemporaryTableMention.__len__": {
            "name": "__len__",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryTableMention.__eq__": {
            "name": "__eq__",
            "location": 25,
            "return": [
                "bool",
                "str",
                "Optional[Union[Any,Any]]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any",
                    "int",
                    "Union[int,float]",
                    "float"
                ]
            }
        },
        "TemporaryTableMention.__ne__": {
            "name": "__ne__",
            "location": 31,
            "return": [
                "bool",
                "str",
                "Optional[Union[Any,Any]]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any",
                    "int",
                    "Union[int,float]",
                    "float"
                ]
            }
        },
        "TemporaryTableMention.__gt__": {
            "name": "__gt__",
            "location": 37,
            "return": [
                "bool",
                "str",
                "List[int]",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any",
                    "Union[int, float]"
                ]
            }
        },
        "TemporaryTableMention.__contains__": {
            "name": "__contains__",
            "location": 44,
            "return": [
                "str",
                "List[int]",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any",
                    "int",
                    "Union[int,float]",
                    "float"
                ]
            }
        },
        "TemporaryTableMention.__hash__": {
            "name": "__hash__",
            "location": 50,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryTableMention.get_stable_id": {
            "name": "get_stable_id",
            "location": 54,
            "return": [
                "zerver.models.Realm",
                "bytes",
                "bool",
                "str",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.Item",
                "cmk.utils.type_defs.CheckPluginNameStr"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryTableMention._get_table": {
            "name": "_get_table",
            "location": 58,
            "return": [
                "Optional[str]",
                "zilencer.models.RemoteZulipServer",
                "list",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryTableMention._get_polymorphic_identity": {
            "name": "_get_polymorphic_identity",
            "location": 61,
            "return": [
                "Text",
                "Optional[str]",
                "bool",
                "List",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryTableMention._get_insert_args": {
            "name": "_get_insert_args",
            "location": 64,
            "return": [
                "Dict[Text,]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryTableMention.__repr__": {
            "name": "__repr__",
            "location": 67,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryTableMention._get_instance": {
            "name": "_get_instance",
            "location": 77,
            "return": [
                "TemporaryTableMention",
                "str",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableMention.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tc": [
                    "dict",
                    "int",
                    "List[deeplearning.ml4pl.models.log_database.Batch]"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/candidates/models/temporary_context.py": {
        "TemporaryContext.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryContext.__repr__": {
            "name": "__repr__",
            "location": 29,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryContext.__eq__": {
            "name": "__eq__",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Type",
                    "bool",
                    "str",
                    "Union[str,Date]"
                ]
            }
        },
        "TemporaryContext.__ne__": {
            "name": "__ne__",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Type",
                    "bool",
                    "str",
                    "Union[str,Date]"
                ]
            }
        },
        "TemporaryContext.__gt__": {
            "name": "__gt__",
            "location": 45,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Type",
                    "bool",
                    "str",
                    "Union[str,Date]"
                ]
            }
        },
        "TemporaryContext.__contains__": {
            "name": "__contains__",
            "location": 51,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Type",
                    "bool",
                    "str",
                    "Union[str,Date]"
                ]
            }
        },
        "TemporaryContext.__hash__": {
            "name": "__hash__",
            "location": 57,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryContext._get_polymorphic_identity": {
            "name": "_get_polymorphic_identity",
            "location": 61,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryContext._get_table": {
            "name": "_get_table",
            "location": 64,
            "return": [
                "Type[fonduer.parser.models.context.Context]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryContext._get_insert_args": {
            "name": "_get_insert_args",
            "location": 67,
            "return": [
                "Dict[str,Any]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryContext.get_stable_id": {
            "name": "get_stable_id",
            "location": 70,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fonduer-master/src/fonduer/candidates/models/__init__.py": {},
    "fonduer-master/src/fonduer/features/feature_extractors.py": {
        "FeatureExtractor.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "features": [
                    "List[Text]",
                    "int",
                    "Dict[str,Any]",
                    "Union[str,int]",
                    "bool"
                ],
                "customize_feature_funcs": [
                    "List",
                    "x509_pki.models.Certificate",
                    "Callable[...,bool]",
                    "Set[str]",
                    "int",
                    "float"
                ]
            }
        },
        "FeatureExtractor.extract": {
            "name": "extract",
            "location": 53,
            "return": [
                "Iterator[Tuple[int,str,int]]",
                "Generator[tuple]"
            ],
            "arguments": {
                "self": [],
                "candidates": [
                    "bool",
                    "Type",
                    "Callable",
                    "str",
                    "Iterator",
                    "Iterator[Any]",
                    "List[D]",
                    "object",
                    "List[magic.models.Deck]"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/features/featurizer.py": {
        "Featurizer.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "sqlalchemy.orm.Session",
                    "int",
                    "List[fonduer.candidates.models.Candidate]",
                    "tensorflow.Session"
                ],
                "candidate_classes": [
                    "List[fonduer.candidates.models.Candidate]",
                    "sqlalchemy.orm.Session",
                    "int",
                    "tensorflow.Session"
                ],
                "feature_extractors": [
                    "sqlalchemy.orm.Session",
                    "int",
                    "List[fonduer.candidates.models.Candidate]",
                    "tensorflow.Session"
                ],
                "parallelism": [
                    "sqlalchemy.orm.Session",
                    "int",
                    "List[fonduer.candidates.models.Candidate]",
                    "tensorflow.Session"
                ]
            }
        },
        "Featurizer.update": {
            "name": "update",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "docs": [
                    "str",
                    "Optional[str]"
                ],
                "split": [
                    "str",
                    "Optional[str]"
                ],
                "parallelism": [
                    "str",
                    "Optional[str]"
                ],
                "progress_bar": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Featurizer.apply": {
            "name": "apply",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "docs": [
                    "bool",
                    "Dict[str, str]",
                    "str",
                    "float",
                    "Optional[int]"
                ],
                "split": [
                    "str",
                    "int",
                    "bytes"
                ],
                "train": [
                    "bool",
                    "Optional[int]",
                    "str"
                ],
                "clear": [
                    "bool",
                    "Optional[int]",
                    "str"
                ],
                "parallelism": [
                    "bool",
                    "Optional[int]",
                    "str"
                ],
                "progress_bar": [
                    "bool",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "Featurizer.upsert_keys": {
            "name": "upsert_keys",
            "location": 148,
            "return": [
                "str",
                "Union[tuple, list]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "dict",
                    "Union[str, int]",
                    "Tuple[object]",
                    "bool"
                ],
                "candidate_classes": [
                    "Optional[Union[Any, Any]]",
                    "Optional[float]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "Featurizer.drop_keys": {
            "name": "drop_keys",
            "location": 194,
            "return": [
                "str",
                "Union[tuple, list]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "dict",
                    "Union[str, int]",
                    "Tuple[object]",
                    "bool"
                ],
                "candidate_classes": [
                    "Optional[Union[Any, Any]]",
                    "Optional[float]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "Featurizer.get_keys": {
            "name": "get_keys",
            "location": 241,
            "return": [
                "bool",
                "Optional[str]",
                "int",
                "Callable[[], str]",
                "tracim.models.data.ContentRevisionRO",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Featurizer._add": {
            "name": "_add",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "nox.sessions.Session",
                    "sqlalchemy.orm.session.Session",
                    "_pytesmain.Session",
                    "sqlalchemy.orm.Session"
                ],
                "records_list": [
                    "Iterable[\"BB\"]",
                    "Callable",
                    "str"
                ]
            }
        },
        "Featurizer.clear": {
            "name": "clear",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "train": [
                    "bool",
                    "int",
                    "float",
                    "Mapping[str, float]"
                ],
                "split": [
                    "int",
                    "str",
                    "Tuple[float]",
                    "annofabapi.models.Inspection"
                ]
            }
        },
        "Featurizer.clear_all": {
            "name": "clear_all",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Featurizer._after_apply": {
            "name": "_after_apply",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "train": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Featurizer.get_feature_matrices": {
            "name": "get_feature_matrices",
            "location": 297,
            "return": [
                "str",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "cand_lists": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "FeaturizerUDF.__init__": {
            "name": "__init__",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "candidate_classes": [
                    "List[str]"
                ],
                "feature_extractors": [
                    "str",
                    "Callable",
                    "Dict[str, Any]"
                ]
            }
        },
        "FeaturizerUDF.apply": {
            "name": "apply",
            "location": 329,
            "return": [
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "leagues.models.League",
                    "int",
                    "Optional[Exception]",
                    "Union[str, int]"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/features/__init__.py": {},
    "fonduer-master/src/fonduer/features/feature_libs/structural_features.py": {
        "extract_structural_features": {
            "name": "extract_structural_features",
            "location": 26,
            "return": [
                "typing.Iterator[typing.Tuple[builtins.int, builtins.str, builtins.int]]"
            ],
            "arguments": {
                "candidates": [
                    "bool",
                    "Type",
                    "Callable",
                    "str",
                    "Iterator",
                    "Iterator[Any]",
                    "List[D]",
                    "object",
                    "List[magic.models.Deck]"
                ]
            }
        },
        "_strlib_unary_features": {
            "name": "_strlib_unary_features",
            "location": 77,
            "return": [
                "None",
                "Union[tuple,list]",
                "Generator[tuple[Union[Text,int]]]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "span": [
                    "Dict[str,list[str]]",
                    "cmk.utils.type_defs.HostName",
                    "str",
                    "Type",
                    "Dict[str,List[str]]"
                ]
            }
        },
        "_strlib_multinary_features": {
            "name": "_strlib_multinary_features",
            "location": 109,
            "return": [
                "Iterator[Tuple[str,int]]",
                "Generator[tuple[Union[Text,int]]]"
            ],
            "arguments": {
                "spans": [
                    "int",
                    "Generator",
                    "str",
                    "Dict",
                    "float",
                    "None",
                    "Optional[bool]",
                    "Optional[int]"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/features/feature_libs/tabular_features.py": {
        "extract_tabular_features": {
            "name": "extract_tabular_features",
            "location": 24,
            "return": [
                "typing.Iterator[typing.Tuple[builtins.int, builtins.str, builtins.int]]"
            ],
            "arguments": {
                "candidates": [
                    "bool",
                    "Type",
                    "Iterator[Any]",
                    "Callable",
                    "str",
                    "object",
                    "List[magic.models.Deck]"
                ]
            }
        },
        "_tablelib_unary_features": {
            "name": "_tablelib_unary_features",
            "location": 74,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "span": [
                    "str"
                ]
            }
        },
        "_tablelib_multinary_features": {
            "name": "_tablelib_multinary_features",
            "location": 133,
            "return": [
                "typing.Iterator[typing.Tuple[builtins.str, builtins.int]]"
            ],
            "arguments": {
                "spans": [
                    "float",
                    "str"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/features/feature_libs/textual_features.py": {
        "extract_textual_features": {
            "name": "extract_textual_features",
            "location": 34,
            "return": [
                "typing.Iterator[typing.Tuple[builtins.int, builtins.str, builtins.int]]"
            ],
            "arguments": {
                "candidates": [
                    "bool",
                    "Dict[str,Any]",
                    "None",
                    "Optional[models.RefreshToken]",
                    "Optional[Dict[str,Any]]",
                    "Task"
                ]
            }
        },
        "_compile_entity_feature_generator": {
            "name": "_compile_entity_feature_generator",
            "location": 109,
            "return": [
                "str",
                "MutableMapping[str, Any]",
                "Mapping[str, str]"
            ],
            "arguments": {}
        },
        "_get_ddlib_feats": {
            "name": "_get_ddlib_feats",
            "location": 136,
            "return": [
                "Iterator[str]",
                "Generator"
            ],
            "arguments": {
                "span": [
                    "Dict",
                    "fonduer.candidates.models.SpanMention",
                    "Tuple[Union[str,...]]",
                    "None",
                    "owlmixin.owlTDict[jumeaux.models.DiffKeys]",
                    "jumeaux.models.DiffKeys",
                    "Optional[Tuple[str,...]]"
                ],
                "context": [
                    "List[int]",
                    "Dict[str,Any]"
                ],
                "idxs": [
                    "List[int]",
                    "Dict[str,Any]"
                ]
            }
        },
        "_get_seq_features": {
            "name": "_get_seq_features",
            "location": 153,
            "return": [
                "Iterator[str]",
                "Generator[Text]"
            ],
            "arguments": {
                "context": [
                    "List[int]",
                    "str",
                    "Dict[str,Any]"
                ],
                "idxs": [
                    "List[int]",
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "_get_window_features": {
            "name": "_get_window_features",
            "location": 160,
            "return": [
                "typing.Iterator[builtins.str]"
            ],
            "arguments": {
                "context": [
                    "List[int]",
                    "str",
                    "Dict[str,Any]",
                    "float",
                    "bool"
                ],
                "idxs": [
                    "List[int]",
                    "str",
                    "Dict[str,Any]",
                    "float",
                    "bool"
                ],
                "window": [
                    "int",
                    "Optional[int]",
                    "float",
                    "Optional[float]"
                ],
                "combinations": [
                    "bool",
                    "Optional[str]"
                ],
                "isolated": [
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "_get_word_feats": {
            "name": "_get_word_feats",
            "location": 241,
            "return": [
                "Iterator[str]",
                "Generator"
            ],
            "arguments": {
                "span": [
                    "fonduer.candidates.models.SpanMention",
                    "owlmixin.owlTDict[jumeaux.models.DiffKeys]",
                    "jumeaux.models.DiffKeys",
                    "dict"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/features/feature_libs/tree_structs.py": {
        "corenlp_to_xmltree": {
            "name": "corenlp_to_xmltree",
            "location": 45,
            "return": [
                "int",
                "XMLTree"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Dict",
                    "Optional[Dict]",
                    "None"
                ],
                "prune_root": [
                    "bool",
                    "Dict[str,bool]",
                    "Tuple",
                    "str"
                ]
            }
        },
        "scrub": {
            "name": "scrub",
            "location": 89,
            "return": [
                "str",
                "Tuple[int]",
                "List[Tuple[str,Any]]",
                "Optional[dict]",
                "Sequence[str]",
                "List[str]",
                "Counter",
                "List[Dict[str,Any]]"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "corenlp_to_xmltree_sub": {
            "name": "corenlp_to_xmltree_sub",
            "location": 98,
            "return": [
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "s": [
                    "Dict[str,Any]",
                    "str",
                    "lxml.etree.ElementBase"
                ],
                "dep_parents": [
                    "Optional[\"PNSqlCursor\"]",
                    "Optional[\"PNBuffer\"]"
                ],
                "rid": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "singular": {
            "name": "singular",
            "location": 136,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Set[int]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "XMLTree.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xml_root": [
                    "int",
                    "str",
                    "List[str]",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ],
                "words": [
                    "str",
                    "None",
                    "bool",
                    "List[str]",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "XMLTree._to_json": {
            "name": "_to_json",
            "location": 28,
            "return": [
                "Dict[Text,list]",
                "float",
                "List[colonel.sentence.Sentence]",
                "Dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "str",
                    "ImportError",
                    "Match[str]",
                    "int"
                ]
            }
        },
        "XMLTree.to_json": {
            "name": "to_json",
            "location": 35,
            "return": [
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "XMLTree.to_str": {
            "name": "to_str",
            "location": 39,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fonduer-master/src/fonduer/features/feature_libs/visual_features.py": {
        "extract_visual_features": {
            "name": "extract_visual_features",
            "location": 23,
            "return": [
                "typing.Iterator[typing.Tuple[builtins.int, builtins.str, builtins.int]]"
            ],
            "arguments": {
                "candidates": [
                    "bool",
                    "Type",
                    "Callable",
                    "str",
                    "Iterator",
                    "Iterator[Any]",
                    "List[D]",
                    "object",
                    "List[magic.models.Deck]"
                ]
            }
        },
        "_vizlib_unary_features": {
            "name": "_vizlib_unary_features",
            "location": 76,
            "return": [
                "None",
                "Union[tuple,list]",
                "Generator[tuple[Union[Text,int]]]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "span": [
                    "int"
                ]
            }
        },
        "_vizlib_multinary_features": {
            "name": "_vizlib_multinary_features",
            "location": 88,
            "return": [
                "Iterator[Tuple[str,int]]",
                "Generator[tuple[Union[Text,int]]]"
            ],
            "arguments": {
                "spans": [
                    "int",
                    "Callable",
                    "str",
                    "models.Question"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/features/feature_libs/__init__.py": {},
    "fonduer-master/src/fonduer/features/models/feature.py": {},
    "fonduer-master/src/fonduer/features/models/__init__.py": {},
    "fonduer-master/src/fonduer/learning/dataset.py": {
        "FonduerDataset.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "bool",
                    "None",
                    "django.db.models.QuerySet",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "candidates": [
                    "str",
                    "Union[Dict[str, Any], List[Any]]",
                    "List[str]",
                    "django.db.models.QuerySet",
                    "bool",
                    "bytes",
                    "object"
                ],
                "features": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Optional[bool]"
                ],
                "word2id": [
                    "str"
                ],
                "labels": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Optional[bool]"
                ],
                "index": [
                    "None",
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "FonduerDataset.__len__": {
            "name": "__len__",
            "location": 62,
            "return": [
                "int",
                "float",
                "numpy.matrix",
                "List[dict]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FonduerDataset.__getitem__": {
            "name": "__getitem__",
            "location": 72,
            "return": [
                "Tuple[dict]",
                "bool",
                "Dict",
                "List[Dict[str,Any]]",
                "OrderedDict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "Optional[bytes]",
                    "Optional[torch.nn.Module]",
                    "Optional[str]",
                    "Type"
                ]
            }
        },
        "FonduerDataset._map_to_id": {
            "name": "_map_to_id",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FonduerDataset._map_features": {
            "name": "_map_features",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FonduerDataset._map_labels": {
            "name": "_map_labels",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fonduer-master/src/fonduer/learning/task.py": {
        "loss": {
            "name": "loss",
            "location": 24,
            "return": [
                "str",
                "Tuple[int, int]",
                "int",
                "Tuple[int, int, str]"
            ],
            "arguments": {
                "module_name": [
                    "Optional[Dict[str, str]]",
                    "List[str]",
                    "str"
                ],
                "intermediate_output_dict": [
                    "List[str]",
                    "str",
                    "Optional[Dict[str,str]]"
                ],
                "Y": [
                    "bool",
                    "str",
                    "List[str]",
                    "Callable[..., None]",
                    "bytes",
                    "Optional[str]"
                ],
                "active": [
                    "bool",
                    "str"
                ]
            }
        },
        "output": {
            "name": "output",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "module_name": [
                    "bool",
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "intermediate_output_dict": [
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "create_task": {
            "name": "create_task",
            "location": 59,
            "return": [
                "list"
            ],
            "arguments": {
                "task_names": [
                    "int",
                    "str",
                    "List[str]",
                    "staticmethod",
                    "None",
                    "Union[Literal,Literal]",
                    "Optional[int]"
                ],
                "n_arities": [
                    "str",
                    "List[str]",
                    "int",
                    "bool"
                ],
                "n_features": [
                    "bool",
                    "List[dict[str,str]]",
                    "Tuple[Sequence]",
                    "List[Dict[str,str]]",
                    "List[tuple[Union[str,str]]]",
                    "List[Tuple[str,str]]",
                    "str",
                    "int"
                ],
                "n_classes": [
                    "Dict[str,str]",
                    "bool",
                    "List[str]",
                    "Dict[str,dict[str,Any]]",
                    "int",
                    "Dict[str,Dict[str,Any]]"
                ],
                "emb_layer": [
                    "bool",
                    "List",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "model": [
                    "Text",
                    "str",
                    "int"
                ],
                "mode": [
                    "Text",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/learning/utils.py": {
        "save_marginals": {
            "name": "save_marginals",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session",
                    "bool",
                    "grouper.models.base.session.Session"
                ],
                "X": [
                    "List[fonduer.candidates.models.Candidate]",
                    "str",
                    "bytes",
                    "int",
                    "Sequence[Any]",
                    "Iterable[T]",
                    "viewer.models.Archive"
                ],
                "marginals": [
                    "sqlalchemy.orm.Session",
                    "core.models.Subtask.SubtaskState",
                    "str",
                    "magic.models.Deck",
                    "Sequence[int]"
                ],
                "training": [
                    "bool",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.exdeclarative.DeclarativeMeta",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "confusion_matrix": {
            "name": "confusion_matrix",
            "location": 77,
            "return": [
                "Tuple[set]",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "pred": [
                    "Set[int]",
                    "List[int]",
                    "str",
                    "List"
                ],
                "gold": [
                    "Set[int]",
                    "List[int]",
                    "str",
                    "List"
                ]
            }
        },
        "mention_to_tokens": {
            "name": "mention_to_tokens",
            "location": 96,
            "return": [
                "List",
                "int",
                "str",
                "List[T]",
                "List[float]",
                "numpy.ndarray"
            ],
            "arguments": {
                "mention": [
                    "str",
                    "List[Tuple[str,str]]",
                    "List[tuple[Union[str,str]]]"
                ],
                "token_type": [
                    "Text",
                    "str",
                    "List[Tuple[str,str]]"
                ],
                "lowercase": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "mark": {
            "name": "mark",
            "location": 110,
            "return": [
                "List[tuple[Union[int,list[str],str,float]]]",
                "bool",
                "int"
            ],
            "arguments": {
                "l": [
                    "int",
                    "List[str]",
                    "str",
                    "float",
                    "bool",
                    "Union[float,int]"
                ],
                "h": [
                    "int",
                    "List[str]",
                    "float",
                    "str",
                    "bool",
                    "Union[float,int]"
                ],
                "idx": [
                    "int",
                    "List[str]",
                    "str",
                    "float",
                    "bool",
                    "Union[float,int]"
                ]
            }
        },
        "mark_sentence": {
            "name": "mark_sentence",
            "location": 121,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Iterable[str]",
                    "Optional[Union[Any,Any]]"
                ],
                "args": []
            }
        },
        "collect_word_counter": {
            "name": "collect_word_counter",
            "location": 141,
            "return": [
                "Dict",
                "int",
                "Counter",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "candidates": [
                    "List",
                    "str",
                    "int",
                    "Set",
                    "T",
                    "Union[Sequence[int],Sequence[dict]]",
                    "slice"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/learning/__init__.py": {},
    "fonduer-master/src/fonduer/learning/models/marginal.py": {
        "Marginal.__repr__": {
            "name": "__repr__",
            "location": 27,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fonduer-master/src/fonduer/learning/models/prediction.py": {},
    "fonduer-master/src/fonduer/learning/models/__init__.py": {},
    "fonduer-master/src/fonduer/learning/modules/concat_linear.py": {
        "ConcatLinear.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "concat_output_keys": [
                    "bytes",
                    "List[str]"
                ],
                "input_dim": [
                    "int"
                ],
                "outpt_dim": [
                    "int"
                ]
            }
        },
        "ConcatLinear.forward": {
            "name": "forward",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "intermediate_output_dict": [
                    "List[Tuple[str,int]]",
                    "List",
                    "List[tuple[Union[str,int]]]",
                    "List[str]",
                    "Dict"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/learning/modules/soft_cross_entropy_loss.py": {
        "SoftCrossEntropyLoss.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "weight": [
                    "Optional[str]",
                    "int",
                    "Optional[float]",
                    "Optional[Callable]",
                    "Optional[Hashable]"
                ],
                "reduction": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "SoftCrossEntropyLoss.forward": {
            "name": "forward",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "int"
                ],
                "target": [
                    "float",
                    "str",
                    "torch.Tensor",
                    "int"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/learning/modules/__init__.py": {},
    "fonduer-master/src/fonduer/packaging/fonduer_model.py": {
        "_load_pyfunc": {
            "name": "_load_pyfunc",
            "location": 133,
            "return": [
                "model.Model",
                "GPy.models.GPRegression",
                "base.Model",
                "model.SockeyeModel",
                "invgp.model.GP",
                "allennlp.models.model.Model",
                "tensorflow.keras.models.Model"
            ],
            "arguments": {
                "model_path": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "log_model": {
            "name": "log_model",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "fonduer_model": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[List[str]]",
                    "Sequence[str]",
                    "List[str]",
                    "Optional[Dict]",
                    "Dict",
                    "Optional[List[Any]]"
                ],
                "artifact_path": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[List[str]]",
                    "Sequence[str]",
                    "List[str]",
                    "Optional[Dict]",
                    "Dict",
                    "Optional[List[Any]]"
                ],
                "preprocessor": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[List[str]]",
                    "Sequence[str]",
                    "List[str]",
                    "Optional[Dict]",
                    "Dict",
                    "Optional[List[Any]]"
                ],
                "parser": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[List[str]]",
                    "Sequence[str]",
                    "List[str]",
                    "Optional[Dict]",
                    "Dict",
                    "Optional[List[Any]]"
                ],
                "mention_extractor": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[List[str]]",
                    "Sequence[str]",
                    "List[str]",
                    "Optional[Dict]",
                    "Dict",
                    "Optional[List[Any]]"
                ],
                "candidate_extractor": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[List[str]]",
                    "Sequence[str]",
                    "List[str]",
                    "Optional[Dict]",
                    "Dict",
                    "Optional[List[Any]]"
                ],
                "conda_env": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]",
                    "Sequence[str]",
                    "List[str]",
                    "Optional[Dict]",
                    "Dict",
                    "Optional[List[Any]]"
                ],
                "code_paths": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]",
                    "Sequence[str]",
                    "List[str]",
                    "Optional[Dict]",
                    "Dict",
                    "Optional[List[Any]]"
                ],
                "model_type": [
                    "Text",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Optional[Dict]",
                    "str",
                    "Optional[List[Any]]",
                    "Sequence[str]"
                ],
                "labeler": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]",
                    "Sequence[str]",
                    "List[str]",
                    "Optional[Dict]",
                    "Dict",
                    "Optional[List[Any]]"
                ],
                "lfs": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]",
                    "Sequence[str]",
                    "List[str]",
                    "Optional[Dict]",
                    "Dict",
                    "Optional[List[Any]]"
                ],
                "label_models": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]",
                    "Sequence[str]",
                    "List[str]",
                    "Optional[Dict]",
                    "Dict",
                    "Optional[List[Any]]"
                ],
                "featurizer": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]",
                    "Sequence[str]",
                    "List[str]",
                    "Optional[Dict]",
                    "Dict",
                    "Optional[List[Any]]"
                ],
                "emmental_model": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]",
                    "Sequence[str]",
                    "List[str]",
                    "Optional[Dict]",
                    "Dict",
                    "Optional[List[Any]]"
                ],
                "word2id": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]",
                    "Sequence[str]",
                    "List[str]",
                    "Optional[Dict]",
                    "Dict",
                    "Optional[List[Any]]"
                ]
            }
        },
        "save_model": {
            "name": "save_model",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "fonduer_model": [],
                "path": [
                    "str",
                    "List[str]",
                    "tartare.core.models.PlatformOptions"
                ],
                "preprocessor": [],
                "parser": [],
                "mention_extractor": [
                    "bool",
                    "str",
                    "int"
                ],
                "candidate_extractor": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "Tuple[Union[str,int]]",
                    "Dict[str,dict]",
                    "gobbli.model.contexContainerTaskContext",
                    "Tuple[str,int]",
                    "Dict[str,Dict]",
                    "int"
                ],
                "mlflow_model": [
                    "Model",
                    "Optional[str]",
                    "str",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "bool"
                ],
                "conda_env": [
                    "Optional[str]",
                    "None",
                    "Optional[List[Any]]",
                    "str",
                    "Optional[List[str]]",
                    "List[Any]",
                    "Optional[Dict[str,Any]]",
                    "List[str]",
                    "Optional[Union[str,Any]]",
                    "Dict[str,Any]",
                    "Optional[Any]",
                    "Any"
                ],
                "code_paths": [
                    "Optional[List[str]]",
                    "List[str]",
                    "str",
                    "None",
                    "bool"
                ],
                "model_type": [
                    "Text",
                    "Optional[str]",
                    "str",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "bool"
                ],
                "labeler": [
                    "Dict[str, str]",
                    "dict",
                    "List[Dict[str, Any]]",
                    "bool",
                    "Tuple[bool]",
                    "utils.MinMaxStats",
                    "str"
                ],
                "lfs": [
                    "List[Any]",
                    "str",
                    "Optional[List[Any]]",
                    "Dict[str,Any]",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Optional[str]"
                ],
                "label_models": [
                    "Dict",
                    "Dict[str,Any]",
                    "Tuple[bool]",
                    "Dict[str,str]",
                    "bool",
                    "int"
                ],
                "featurizer": [
                    "Dict[str, str]",
                    "dict",
                    "List[Dict[str, Any]]",
                    "bool",
                    "Tuple[bool]",
                    "utils.MinMaxStats",
                    "str"
                ],
                "emmental_model": [
                    "Optional[List[Any]]",
                    "None",
                    "bool",
                    "str",
                    "List[Any]",
                    "Optional[Dict[str,Any]]",
                    "Optional[str]",
                    "Dict[str,Any]"
                ],
                "word2id": [
                    "None",
                    "Optional[Dict]",
                    "bool",
                    "Dict",
                    "List[str]",
                    "Dict[str,str]",
                    "int",
                    "str",
                    "numpy.ndarray",
                    "Optional[str]"
                ]
            }
        },
        "_get_default_conda_env": {
            "name": "_get_default_conda_env",
            "location": 348,
            "return": [
                "str",
                "List[str]",
                "Dict[str, Callable]",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "_save_emmental_model": {
            "name": "_save_emmental_model",
            "location": 369,
            "return": [
                "int",
                "str",
                "deque"
            ],
            "arguments": {
                "emmental_model": [
                    "str",
                    "bool"
                ]
            }
        },
        "_load_emmental_model": {
            "name": "_load_emmental_model",
            "location": 376,
            "return": [
                "dict",
                "bytes",
                "Callable[[str], T]",
                "Dict[str, Any]",
                "Callable",
                "str"
            ],
            "arguments": {
                "b": [
                    "bytes",
                    "str",
                    "List[str]"
                ]
            }
        },
        "_save_mention_classes": {
            "name": "_save_mention_classes",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "mention_classes": [
                    "str",
                    "Dict[str,str]",
                    "zerver.models.UserProfile"
                ],
                "path": [
                    "str",
                    "Dict[str,str]",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "_load_mention_classes": {
            "name": "_load_mention_classes",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "_save_candidate_classes": {
            "name": "_save_candidate_classes",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {
                "candidate_classes": [
                    "str",
                    "List[fonduer.candidates.models.Candidate]",
                    "Dict[str,Any]",
                    "Optional[str]"
                ],
                "path": [
                    "str",
                    "List[fonduer.candidates.models.Candidate]",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "_load_candidate_classes": {
            "name": "_load_candidate_classes",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "FonduerModel._classify": {
            "name": "_classify",
            "location": 54,
            "return": [
                "pandas.DataFrame",
                "None"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "FonduerModel.predict": {
            "name": "predict",
            "location": 58,
            "return": [
                "DataFrame",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "model_input": [
                    "Union['Contributor', 'Coverage']",
                    "pandas.DataFrame",
                    "rflx.model.Model",
                    "Optional[float]",
                    "allennlp.models.model.Model",
                    "speedwagon.models.TabsModel"
                ]
            }
        },
        "FonduerModel._process": {
            "name": "_process",
            "location": 81,
            "return": [
                "int",
                "Tuple[Union[Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal]]",
                "Callable",
                "Type",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "html_path": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ],
                "pdf_path": [
                    "Optional[str]",
                    "None",
                    "str"
                ]
            }
        },
        "FonduerModel.convert_features_to_matrix": {
            "name": "convert_features_to_matrix",
            "location": 108,
            "return": [
                "T",
                "Optional[Dict[str, Any]]",
                "Literal",
                "List[Dict[str, Any]]",
                "List[str]",
                "dict",
                "Dict[int, str]",
                "str"
            ],
            "arguments": {
                "features": [
                    "List[Dict[str,Any]]",
                    "List[str]",
                    "List[dict[str,Any]]",
                    "str",
                    "Dict[str,str]"
                ],
                "keys": [
                    "List[Dict[str,Any]]",
                    "List[str]",
                    "List[dict[str,Any]]",
                    "str",
                    "Dict[str,str]"
                ]
            }
        },
        "FonduerModel.convert_labels_to_matrix": {
            "name": "convert_labels_to_matrix",
            "location": 119,
            "return": [
                "Dict[str, int]",
                "int",
                "salon.models.Stylist",
                "flask_appbuilder.security.sqla.models.User",
                "bool"
            ],
            "arguments": {
                "labels": [
                    "List[dict[str,Any]]",
                    "List[str]",
                    "List[Dict[str,Any]]",
                    "Dict",
                    "str",
                    "Dict[str,str]",
                    "T",
                    "tests.utils.Strategy[paradigm.hints.Domain]",
                    "zerver.models.Message"
                ],
                "keys": [
                    "List[dict[str,Any]]",
                    "List[str]",
                    "List[Dict[str,Any]]",
                    "Dict",
                    "str",
                    "Dict[str,str]",
                    "T",
                    "tests.utils.Strategy[paradigm.hints.Domain]",
                    "zerver.models.Message"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/packaging/__init__.py": {},
    "fonduer-master/src/fonduer/parser/parser.py": {
        "Parser.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "bool",
                    "List[str]",
                    "str",
                    "List[tuple[Union[str,str]]]",
                    "List[Tuple[str,str]]",
                    "None",
                    "int",
                    "sqlalchemy.orm.Session",
                    "Optional[str]"
                ],
                "parallelism": [
                    "int",
                    "bool",
                    "List[str]",
                    "List[Tuple[str,str]]",
                    "str",
                    "sqlalchemy.orm.Session",
                    "Optional[str]"
                ],
                "structural": [
                    "bool",
                    "List[str]",
                    "List[Tuple[str,str]]",
                    "int",
                    "str",
                    "sqlalchemy.orm.Session",
                    "Optional[str]"
                ],
                "blacklist": [
                    "List[Text]",
                    "bool",
                    "List[str]",
                    "List[Tuple[str,str]]",
                    "int",
                    "str",
                    "sqlalchemy.orm.Session",
                    "Optional[str]"
                ],
                "flatten": [
                    "List[Text]",
                    "bool",
                    "List[str]",
                    "List[Tuple[str,str]]",
                    "int",
                    "str",
                    "sqlalchemy.orm.Session",
                    "Optional[str]"
                ],
                "language": [
                    "Text",
                    "bool",
                    "List[str]",
                    "List[Tuple[str,str]]",
                    "int",
                    "str",
                    "sqlalchemy.orm.Session",
                    "Optional[str]"
                ],
                "lingual": [
                    "bool",
                    "List[str]",
                    "List[Tuple[str,str]]",
                    "int",
                    "str",
                    "sqlalchemy.orm.Session",
                    "Optional[str]"
                ],
                "lingual_parser": [
                    "bool",
                    "None",
                    "List[str]",
                    "str",
                    "List[tuple[Union[str,str]]]",
                    "List[Tuple[str,str]]",
                    "int",
                    "sqlalchemy.orm.Session",
                    "Optional[str]"
                ],
                "strip": [
                    "bool",
                    "List[str]",
                    "List[Tuple[str,str]]",
                    "int",
                    "str",
                    "sqlalchemy.orm.Session",
                    "Optional[str]"
                ],
                "replacements": [
                    "List[tuple[Text]]",
                    "bool",
                    "List[str]",
                    "List[Tuple[str,str]]",
                    "int",
                    "str",
                    "sqlalchemy.orm.Session",
                    "Optional[str]"
                ],
                "tabular": [
                    "bool",
                    "List[str]",
                    "List[Tuple[str,str]]",
                    "int",
                    "str",
                    "sqlalchemy.orm.Session",
                    "Optional[str]"
                ],
                "visual_parser": [
                    "bool",
                    "None",
                    "List[str]",
                    "str",
                    "List[tuple[Union[str,str]]]",
                    "List[Tuple[str,str]]",
                    "int",
                    "sqlalchemy.orm.Session",
                    "Optional[str]"
                ]
            }
        },
        "Parser.apply": {
            "name": "apply",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "doc_loader": [
                    "int",
                    "Callable",
                    "str",
                    "models.Question"
                ],
                "clear": [
                    "bool",
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ],
                "parallelism": [
                    "int",
                    "None",
                    "Callable",
                    "str",
                    "models.Question"
                ],
                "progress_bar": [
                    "bool",
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "Parser._add": {
            "name": "_add",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session",
                    "dict",
                    "str"
                ],
                "doc": [
                    "Mapping",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "Parser.clear": {
            "name": "clear",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.get_last_documents": {
            "name": "get_last_documents",
            "location": 142,
            "return": [
                "str",
                "cmk.utils.type_defs.CheckPluginName.Str",
                "List[str]",
                "Dict[str, Dict[str, Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.get_documents": {
            "name": "get_documents",
            "location": 154,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserUDF.__init__": {
            "name": "__init__",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "structural": [
                    "bool",
                    "Callable"
                ],
                "blacklist": [
                    "str",
                    "bool"
                ],
                "flatten": [
                    "str",
                    "bool"
                ],
                "lingual": [
                    "Callable[[dict],dict]",
                    "Callable[dict,dict]"
                ],
                "lingual_parser": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "strip": [
                    "bool",
                    "Callable"
                ],
                "replacements": [
                    "List[tuple[Union[str,str]]]",
                    "List[bool]",
                    "List[Tuple[str,str]]",
                    "Dict",
                    "bool",
                    "Union[int,Sequence[int]]",
                    "Iterable[Union[Any,int]]"
                ],
                "tabular": [
                    "bool",
                    "Callable"
                ],
                "visual_parser": [],
                "language": [
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "ParserUDF.apply": {
            "name": "apply",
            "location": 229,
            "return": [
                "Optional[str]",
                "int",
                "List",
                "Dict",
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "int",
                    "Dict",
                    "bool"
                ]
            }
        },
        "ParserUDF._parse_table": {
            "name": "_parse_table",
            "location": 266,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Callable[...,str]",
                    "lxml.html.HtmlElement",
                    "Dict[str,Any]",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "Callable"
                ],
                "state": [
                    "Dict[str, Any]",
                    "type",
                    "recidiviz.persistence.database.session.Session"
                ]
            }
        },
        "ParserUDF._parse_figure": {
            "name": "_parse_figure",
            "location": 394,
            "return": [
                "bool",
                "int",
                "raiden.utils.Tuple[raiden.utils.Tuple[raiden.utils.TokenAddress, raiden.utils.ProportionalFeeAmount], ...]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Dict[str,Any]",
                    "lxml.html.HtmlElement",
                    "Callable[...,str]",
                    "Optional[Dict[str,Any]]",
                    "Callable"
                ],
                "state": [
                    "Dict[str, Any]",
                    "lxml.html.HtmlElement",
                    "Callable[..., str]",
                    "apistar.backends.sqlalchemy_backend.Session"
                ]
            }
        },
        "ParserUDF._parse_sentence": {
            "name": "_parse_sentence",
            "location": 472,
            "return": [
                "typing.Iterator[fonduer.parser.models.Sentence]"
            ],
            "arguments": {
                "self": [],
                "paragraph": [
                    "str",
                    "sqlalchemy.engine.Engine"
                ],
                "node": [
                    "lxml.html.HtmlElement",
                    "type",
                    "Callable"
                ],
                "state": [
                    "dict",
                    "int"
                ]
            }
        },
        "ParserUDF._parse_paragraph": {
            "name": "_parse_paragraph",
            "location": 583,
            "return": [
                "typing.Iterator[fonduer.parser.models.Sentence]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "lxml.html.HtmlElement",
                    "Callable[..., str]",
                    "Dict[str, Any]",
                    "Callable",
                    "Optional[Dict[str, Any]]"
                ],
                "state": [
                    "str",
                    "lxml.html.HtmlElement",
                    "Dict[str,Any]",
                    "Set[str]",
                    "Optional[str]",
                    "int",
                    "Callable"
                ]
            }
        },
        "ParserUDF._parse_section": {
            "name": "_parse_section",
            "location": 666,
            "return": [
                "bool",
                "Callable",
                "str",
                "salon.models.ServiceCategory",
                "models.Name"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "lxml.html.HtmlElement",
                    "Dict[str,Any]",
                    "Type",
                    "Optional[Dict[str,Any]]",
                    "None"
                ],
                "state": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, str]",
                    "List[T]",
                    "lxml.html.HtmlElement",
                    "Callable"
                ]
            }
        },
        "ParserUDF._parse_caption": {
            "name": "_parse_caption",
            "location": 703,
            "return": [
                "bool",
                "Callable",
                "str",
                "salon.models.ServiceCategory",
                "models.Name"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Callable[...,str]",
                    "lxml.html.HtmlElement",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "None"
                ],
                "state": [
                    "Dict[str, Any]",
                    "lxml.html.HtmlElement",
                    "\"Item\""
                ]
            }
        },
        "ParserUDF._parse_node": {
            "name": "_parse_node",
            "location": 752,
            "return": [
                "Iterator[fonduer.parser.models.Sentence]",
                "Generator"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Dict[str,Any]",
                    "Dict",
                    "Type",
                    "cmsysboutils.Session",
                    "Union[Dict,List,str]"
                ],
                "state": [
                    "Callable[...,str]",
                    "Dict[str,Any]",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "None",
                    "lxml.html.HtmlElement"
                ]
            }
        },
        "ParserUDF.parse": {
            "name": "parse",
            "location": 775,
            "return": [
                "Iterator[fonduer.parser.models.Sentence]",
                "Generator"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "str"
                ],
                "text": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/parser/__init__.py": {},
    "fonduer-master/src/fonduer/parser/lingual_parser/lingual_parser.py": {
        "LingualParser.split_sentences": {
            "name": "split_sentences",
            "location": 10,
            "return": [
                "Iterable[dict]",
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "LingualParser.enrich_sentences_with_NLP": {
            "name": "enrich_sentences_with_NLP",
            "location": 20,
            "return": [
                "Iterator[fonduer.parser.models.Sentence]",
                "None"
            ],
            "arguments": {
                "self": [],
                "sentences": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "LingualParser.has_NLP_support": {
            "name": "has_NLP_support",
            "location": 32,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LingualParser.has_tokenizer_support": {
            "name": "has_tokenizer_support",
            "location": 40,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fonduer-master/src/fonduer/parser/lingual_parser/simple_parser.py": {
        "SimpleParser.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delim": [
                    "Text",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "SimpleParser.split_sentences": {
            "name": "split_sentences",
            "location": 19,
            "return": [
                "Iterator[Dict[str,Any]]",
                "Generator[dict[Union[Text,Text,Text,Text,Text,Text,Text,Text,Text],Union[str,list[Text],list[Text],list[Text],list[int],list[Text],list[int],list[int]]]]"
            ],
            "arguments": {
                "self": [],
                "str": [
                    "str"
                ]
            }
        },
        "SimpleParser.has_NLP_support": {
            "name": "has_NLP_support",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleParser.has_tokenizer_support": {
            "name": "has_tokenizer_support",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fonduer-master/src/fonduer/parser/lingual_parser/spacy_parser.py": {
        "set_custom_boundary": {
            "name": "set_custom_boundary",
            "location": 252,
            "return": [
                "List[dict[str,Any]]",
                "bool",
                "float"
            ],
            "arguments": {
                "doc": [
                    "List[dict[str,Any]]",
                    "int",
                    "Dict[int,dict]",
                    "List[Dict[str,Any]]"
                ]
            }
        },
        "SpacyParser.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lang": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "SpacyParser.has_tokenizer_support": {
            "name": "has_tokenizer_support",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpacyParser.has_NLP_support": {
            "name": "has_NLP_support",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpacyParser.model_installed": {
            "name": "model_installed",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "SpacyParser._load_lang_model": {
            "name": "_load_lang_model",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpacyParser.enrich_sentences_with_NLP": {
            "name": "enrich_sentences_with_NLP",
            "location": 102,
            "return": [
                "None",
                "Union[tuple,list]",
                "Generator",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "sentences": [
                    "List[app.models.Question]",
                    "models.Groups",
                    "app.models.dto.CoordinateDTO"
                ]
            }
        },
        "SpacyParser._split_sentences_by_char_limit": {
            "name": "_split_sentences_by_char_limit",
            "location": 177,
            "return": [
                "List[list]",
                "str",
                "int",
                "float",
                "Optional[int]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "all_sentences": [
                    "str"
                ],
                "batch_char_limit": [
                    "int",
                    "str",
                    "Tuple[str,str,int]",
                    "List[Tuple[str,Any]]"
                ]
            }
        },
        "SpacyParser.split_sentences": {
            "name": "split_sentences",
            "location": 191,
            "return": [
                "Iterator[Dict[str,Any]]",
                "Generator"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "TokenPreservingTokenizer.__init__": {
            "name": "__init__",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "TokenPreservingTokenizer.__call__": {
            "name": "__call__",
            "location": 288,
            "return": [
                "Doc",
                "str",
                "Tuple[float,float]"
            ],
            "arguments": {
                "self": [],
                "tokenized_sentences": [
                    "Dict"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/parser/lingual_parser/__init__.py": {},
    "fonduer-master/src/fonduer/parser/models/caption.py": {
        "Caption.__repr__": {
            "name": "__repr__",
            "location": 59,
            "return": [
                "Text",
                "str",
                "Tuple[Tuple[int,...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Caption.__gt__": {
            "name": "__gt__",
            "location": 82,
            "return": [
                "bool",
                "mypy.nodes.Context",
                "Optional[str]",
                "models.JournalEntryOrigin",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/parser/models/context.py": {},
    "fonduer-master/src/fonduer/parser/models/document.py": {
        "Document.__repr__": {
            "name": "__repr__",
            "location": 35,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Document.__gt__": {
            "name": "__gt__",
            "location": 39,
            "return": [
                "bool",
                "mypy.nodes.Context",
                "Optional[str]",
                "models.JournalEntryOrigin",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/parser/models/figure.py": {
        "Figure.__repr__": {
            "name": "__repr__",
            "location": 61,
            "return": [
                "Text",
                "str",
                "Tuple[Tuple[int,...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Figure.__gt__": {
            "name": "__gt__",
            "location": 83,
            "return": [
                "bool",
                "mypy.nodes.Context",
                "Optional[str]",
                "models.JournalEntryOrigin",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/parser/models/paragraph.py": {
        "Paragraph.__repr__": {
            "name": "__repr__",
            "location": 70,
            "return": [
                "Text",
                "str",
                "Tuple[Tuple[int,...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Paragraph.__gt__": {
            "name": "__gt__",
            "location": 99,
            "return": [
                "bool",
                "mypy.nodes.Context",
                "Optional[str]",
                "models.JournalEntryOrigin",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/parser/models/section.py": {
        "Section.__repr__": {
            "name": "__repr__",
            "location": 41,
            "return": [
                "Text",
                "str",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Section.__gt__": {
            "name": "__gt__",
            "location": 45,
            "return": [
                "bool",
                "mypy.nodes.Context",
                "Optional[str]",
                "models.JournalEntryOrigin",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/parser/models/sentence.py": {
        "SentenceMixin.is_lingual": {
            "name": "is_lingual",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SentenceMixin.is_visual": {
            "name": "is_visual",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SentenceMixin.is_tabular": {
            "name": "is_tabular",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SentenceMixin.is_structural": {
            "name": "is_structural",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LingualMixin.lemmas": {
            "name": "lemmas",
            "location": 57,
            "return": [
                "str",
                "Column"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "LingualMixin.pos_tags": {
            "name": "pos_tags",
            "location": 62,
            "return": [
                "str",
                "Column"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "List[str]",
                    "List[magic.models.Deck]",
                    "list"
                ]
            }
        },
        "LingualMixin.ner_tags": {
            "name": "ner_tags",
            "location": 67,
            "return": [
                "str",
                "Column"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "List[str]",
                    "List[magic.models.Deck]",
                    "list"
                ]
            }
        },
        "LingualMixin.dep_parents": {
            "name": "dep_parents",
            "location": 72,
            "return": [
                "Sequence[Any]",
                "Column"
            ],
            "arguments": {
                "cls": [
                    "Iterable",
                    "dict",
                    "Type",
                    "List[dict]",
                    "str"
                ]
            }
        },
        "LingualMixin.dep_labels": {
            "name": "dep_labels",
            "location": 77,
            "return": [
                "Column",
                "str",
                "Optional[str]",
                "zam_repondeur.models.Texte"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Type[T]",
                    "List[str]"
                ]
            }
        },
        "LingualMixin.is_lingual": {
            "name": "is_lingual",
            "location": 81,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TabularMixin.table_id": {
            "name": "table_id",
            "location": 90,
            "return": [
                "Column",
                "str",
                "bool",
                "zerver.models.UserProfile",
                "zerver.models.Realm",
                "medtagger.database.models.Slice",
                "audiopyle.lib.models.plugin.VampyPlugin"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Optional[Callable[[dict], None]]",
                    "Optional[dict]"
                ]
            }
        },
        "TabularMixin.table": {
            "name": "table",
            "location": 95,
            "return": [
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "TabularMixin.cell_id": {
            "name": "cell_id",
            "location": 104,
            "return": [
                "Column",
                "List[str]",
                "str",
                "Dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "sqlalchemy.engine.reflection.Inspector",
                    "List[dict]"
                ]
            }
        },
        "TabularMixin.cell": {
            "name": "cell",
            "location": 109,
            "return": [
                "trezor.utils.Writer",
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "str",
                    "Dict[str, object]"
                ]
            }
        },
        "TabularMixin.row_start": {
            "name": "row_start",
            "location": 118,
            "return": [
                "Column",
                "int",
                "List[str]",
                "Tuple[int,int]",
                "List[Tuple[int,int]]",
                "List[List[int]]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Callable[[Any], T]",
                    "Callable"
                ]
            }
        },
        "TabularMixin.row_end": {
            "name": "row_end",
            "location": 123,
            "return": [
                "Column",
                "List[str]",
                "int",
                "Optional[List[str]]",
                "str",
                "Tuple[int,int]",
                "List[Tuple[int,int]]",
                "List[int]"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "bool",
                    "dict",
                    "Iterable"
                ]
            }
        },
        "TabularMixin.col_start": {
            "name": "col_start",
            "location": 128,
            "return": [
                "Column",
                "int",
                "List[int]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Iterable"
                ]
            }
        },
        "TabularMixin.col_end": {
            "name": "col_end",
            "location": 133,
            "return": [
                "Column",
                "Tuple[int,int]",
                "List[Tuple[int,int]]",
                "Optional[List[str]]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Type",
                    "dict"
                ]
            }
        },
        "TabularMixin.is_tabular": {
            "name": "is_tabular",
            "location": 137,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[Iterable]",
                "Optional[Callable]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TabularMixin.is_cellular": {
            "name": "is_cellular",
            "location": 141,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VisualMixin.page": {
            "name": "page",
            "location": 150,
            "return": [
                "Tuple",
                "Column"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "VisualMixin.top": {
            "name": "top",
            "location": 158,
            "return": [
                "Tuple",
                "Column"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "VisualMixin.left": {
            "name": "left",
            "location": 163,
            "return": [
                "Tuple",
                "Column"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "VisualMixin.bottom": {
            "name": "bottom",
            "location": 168,
            "return": [
                "Tuple",
                "Column"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "VisualMixin.right": {
            "name": "right",
            "location": 173,
            "return": [
                "Tuple",
                "Column"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "VisualMixin.is_visual": {
            "name": "is_visual",
            "location": 177,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VisualMixin.get_bbox": {
            "name": "get_bbox",
            "location": 181,
            "return": [
                "str",
                "Bbox",
                "bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StructuralMixin.xpath": {
            "name": "xpath",
            "location": 201,
            "return": [
                "Column",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "StructuralMixin.html_tag": {
            "name": "html_tag",
            "location": 206,
            "return": [
                "Column",
                "str",
                "Sequence[str]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "List[str]",
                    "List[magic.models.Deck]",
                    "list"
                ]
            }
        },
        "StructuralMixin.html_attrs": {
            "name": "html_attrs",
            "location": 212,
            "return": [
                "str",
                "Column"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "StructuralMixin.is_structural": {
            "name": "is_structural",
            "location": 216,
            "return": [
                "str",
                "dict",
                "int",
                "bool",
                "Optional[T]",
                "Optional[int]",
                "Tuple[List[Any], int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sentence.__repr__": {
            "name": "__repr__",
            "location": 290,
            "return": [
                "Text",
                "str",
                "Tuple[Tuple[int,...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sentence._asdict": {
            "name": "_asdict",
            "location": 325,
            "return": [
                "Dict[Text,]",
                "str",
                "Dict",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sentence.__gt__": {
            "name": "__gt__",
            "location": 355,
            "return": [
                "bool",
                "mypy.nodes.Context",
                "Optional[str]",
                "models.JournalEntryOrigin",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/parser/models/table.py": {
        "Table.__repr__": {
            "name": "__repr__",
            "location": 49,
            "return": [
                "Text",
                "Set[str]",
                "List[str]",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Table.__gt__": {
            "name": "__gt__",
            "location": 59,
            "return": [
                "bool",
                "mypy.nodes.Context",
                "Optional[str]",
                "models.JournalEntryOrigin",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        },
        "Cell.__repr__": {
            "name": "__repr__",
            "location": 117,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cell.__gt__": {
            "name": "__gt__",
            "location": 127,
            "return": [
                "bool",
                "mypy.nodes.Context",
                "Optional[str]",
                "models.JournalEntryOrigin",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/parser/models/utils.py": {
        "construct_stable_id": {
            "name": "construct_stable_id",
            "location": 7,
            "return": [
                "Text",
                "str",
                "gardnr.models.Driver",
                "Optional[gdpr.models.LegalReason]"
            ],
            "arguments": {
                "parent_context": [
                    "str",
                    "int",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ],
                "polymorphic_type": [
                    "str",
                    "int"
                ],
                "relative_char_offset_start": [
                    "str",
                    "int"
                ],
                "relative_char_offset_end": [
                    "str",
                    "int"
                ]
            }
        },
        "split_stable_id": {
            "name": "split_stable_id",
            "location": 45,
            "return": [
                "Tuple[list[int]]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "stable_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/parser/models/webpage.py": {
        "Webpage.__repr__": {
            "name": "__repr__",
            "location": 37,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fonduer-master/src/fonduer/parser/models/__init__.py": {},
    "fonduer-master/src/fonduer/parser/preprocessors/csv_doc_preprocessor.py": {
        "CSVDocPreprocessor.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int",
                    "tartare.core.models.PlatformOptions"
                ],
                "encoding": [
                    "Text",
                    "str",
                    "int",
                    "tartare.core.models.PlatformOptions"
                ],
                "max_docs": [
                    "str",
                    "int",
                    "tartare.core.models.PlatformOptions"
                ],
                "header": [
                    "bool",
                    "str",
                    "Optional[Dict]",
                    "int"
                ],
                "delim": [
                    "Text",
                    "bool",
                    "Optional[List[Any]]",
                    "str"
                ],
                "parser_rule": [
                    "bool",
                    "None",
                    "Optional[str]",
                    "Callable[[dict],dict]",
                    "str",
                    "Callable[dict,dict]"
                ]
            }
        },
        "CSVDocPreprocessor._parse_file": {
            "name": "_parse_file",
            "location": 53,
            "return": [
                "Iterator[fonduer.parser.models.Document]",
                "Generator[Document]"
            ],
            "arguments": {
                "self": [],
                "fp": [
                    "str"
                ],
                "file_name": [
                    "str"
                ]
            }
        },
        "CSVDocPreprocessor.__len__": {
            "name": "__len__",
            "location": 95,
            "return": [
                "int",
                "str",
                "zam_repondeur.models.Amendement",
                "List[int]",
                "Optional[str]",
                "List[str]",
                "Tuple[int,int]",
                "List[Tuple[int,int]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSVDocPreprocessor._can_read": {
            "name": "_can_read",
            "location": 107,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "fpath": [
                    "str",
                    "Set[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/parser/preprocessors/doc_preprocessor.py": {
        "DocPreprocessor.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "encoding": [
                    "Text",
                    "bool",
                    "List[str]",
                    "str",
                    "Dict"
                ],
                "max_docs": [
                    "int",
                    "list",
                    "bytes"
                ]
            }
        },
        "DocPreprocessor._generate": {
            "name": "_generate",
            "location": 34,
            "return": [
                "Generator",
                "Union[tuple,list]",
                "None",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocPreprocessor.__len__": {
            "name": "__len__",
            "location": 44,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocPreprocessor.__iter__": {
            "name": "__iter__",
            "location": 51,
            "return": [
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocPreprocessor._get_docs_for_path": {
            "name": "_get_docs_for_path",
            "location": 55,
            "return": [
                "Iterator[fonduer.parser.models.document.Document]",
                "Generator"
            ],
            "arguments": {
                "self": [],
                "fp": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "DocPreprocessor._get_stable_id": {
            "name": "_get_stable_id",
            "location": 61,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": [],
                "doc_id": [
                    "str",
                    "int"
                ]
            }
        },
        "DocPreprocessor._parse_file": {
            "name": "_parse_file",
            "location": 64,
            "return": [
                "Iterator[fonduer.parser.models.document.Document]",
                "None"
            ],
            "arguments": {
                "self": [],
                "fp": [
                    "str",
                    "List[str]",
                    "Sequence[str]",
                    "Iterable[List[Any]]"
                ],
                "file_name": [
                    "str",
                    "List[str]",
                    "Sequence[str]",
                    "Iterable[List[Any]]"
                ]
            }
        },
        "DocPreprocessor._can_read": {
            "name": "_can_read",
            "location": 67,
            "return": [
                "bool",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "fpath": [
                    "str",
                    "int",
                    "Callable",
                    "models.Question"
                ]
            }
        },
        "DocPreprocessor._get_files": {
            "name": "_get_files",
            "location": 70,
            "return": [
                "List",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/parser/preprocessors/hocr_doc_preprocessor.py": {
        "HOCRDocPreprocessor.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "encoding": [
                    "str",
                    "Text"
                ],
                "max_docs": [
                    "str"
                ],
                "space": [
                    "bool",
                    "List[str]",
                    "str",
                    "Dict"
                ]
            }
        },
        "HOCRDocPreprocessor._parse_file": {
            "name": "_parse_file",
            "location": 46,
            "return": [
                "typing.Iterator[fonduer.parser.models.Document]"
            ],
            "arguments": {
                "self": [],
                "fp": [
                    "str"
                ],
                "file_name": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "Tuple[str, str]"
                ]
            }
        },
        "HOCRDocPreprocessor.__len__": {
            "name": "__len__",
            "location": 159,
            "return": [
                "int",
                "str",
                "zam_repondeur.models.Amendement",
                "List[int]",
                "Optional[str]",
                "List[str]",
                "Tuple[int,int]",
                "List[Tuple[int,int]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "HOCRDocPreprocessor._can_read": {
            "name": "_can_read",
            "location": 164,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "fpath": [
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "HOCRDocPreprocessor._parse_file.get_prop": {
            "name": "get_prop",
            "location": 48,
            "return": [
                "None",
                "Optional[int]",
                "Optional[bool]",
                "Optional[Literal[only_clustered,include_clustered]]",
                "Dict",
                "Optional[Any]"
            ],
            "arguments": {
                "node": [
                    "str",
                    "Optional[str]",
                    "Tuple[str, int]",
                    "Dict[str, Any]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "HOCRDocPreprocessor._parse_file.get_bbox": {
            "name": "get_bbox",
            "location": 60,
            "return": [
                "None",
                "Tuple",
                "Optional[int]",
                "Optional[str]",
                "Optional[Literal[only_clustered,include_clustered]]",
                "bool",
                "Optional[Dict]",
                "str"
            ],
            "arguments": {
                "node": [
                    "List[str]"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/parser/preprocessors/html_doc_preprocessor.py": {
        "HTMLDocPreprocessor._parse_file": {
            "name": "_parse_file",
            "location": 15,
            "return": [
                "Iterator[fonduer.parser.models.Document]",
                "Generator[Document]"
            ],
            "arguments": {
                "self": [],
                "fp": [
                    "str"
                ],
                "file_name": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ]
            }
        },
        "HTMLDocPreprocessor.__len__": {
            "name": "__len__",
            "location": 33,
            "return": [
                "int",
                "str",
                "zam_repondeur.models.Amendement",
                "List[int]",
                "Optional[str]",
                "List[str]",
                "Tuple[int,int]",
                "List[Tuple[int,int]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLDocPreprocessor._can_read": {
            "name": "_can_read",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "fpath": [
                    "str",
                    "Set[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/parser/preprocessors/text_doc_preprocessor.py": {
        "TextDocPreprocessor._parse_file": {
            "name": "_parse_file",
            "location": 14,
            "return": [
                "Iterator[fonduer.parser.models.Document]",
                "Generator[Document]"
            ],
            "arguments": {
                "self": [],
                "fp": [
                    "str"
                ],
                "file_name": [
                    "str"
                ]
            }
        },
        "TextDocPreprocessor.__len__": {
            "name": "__len__",
            "location": 23,
            "return": [
                "int",
                "str",
                "zam_repondeur.models.Amendement",
                "List[int]",
                "Optional[str]",
                "List[str]",
                "Tuple[int,int]",
                "List[Tuple[int,int]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fonduer-master/src/fonduer/parser/preprocessors/tsv_doc_preprocessor.py": {
        "TSVDocPreprocessor.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int"
                ],
                "encoding": [
                    "Text",
                    "str",
                    "int"
                ],
                "max_docs": [
                    "str",
                    "int"
                ],
                "header": [
                    "bool",
                    "str",
                    "IO[str]",
                    "Dict[cmk.utils.type_defs.HostName,str]"
                ]
            }
        },
        "TSVDocPreprocessor._parse_file": {
            "name": "_parse_file",
            "location": 37,
            "return": [
                "Iterator[fonduer.parser.models.Document]",
                "Generator[Document]"
            ],
            "arguments": {
                "self": [],
                "fp": [
                    "str"
                ],
                "file_name": [
                    "str"
                ]
            }
        },
        "TSVDocPreprocessor.__len__": {
            "name": "__len__",
            "location": 52,
            "return": [
                "int",
                "str",
                "zam_repondeur.models.Amendement",
                "List[int]",
                "Optional[str]",
                "List[str]",
                "Tuple[int,int]",
                "List[Tuple[int,int]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TSVDocPreprocessor._can_read": {
            "name": "_can_read",
            "location": 64,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "fpath": [
                    "str",
                    "Set[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/parser/preprocessors/__init__.py": {},
    "fonduer-master/src/fonduer/parser/visual_parser/hocr_visual_parser.py": {
        "HocrVisualParser.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "replacements": [
                    "list[tuple[typing.Text]]"
                ]
            }
        },
        "HocrVisualParser.parse": {
            "name": "parse",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "document_name": [],
                "sentences": []
            }
        },
        "HocrVisualParser.is_parsable": {
            "name": "is_parsable",
            "location": 148,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "document_name": []
            }
        },
        "HocrVisualParser.parse.attrib_parse": {
            "name": "attrib_parse",
            "location": 47,
            "return": [
                "dict[, list[int]]"
            ],
            "arguments": {
                "html_attrs": []
            }
        }
    },
    "fonduer-master/src/fonduer/parser/visual_parser/pdf_visual_parser.py": {
        "PdfVisualParser.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pdf_path": [
                    "str",
                    "Optional[Sequence[str]]",
                    "Sequence[str]",
                    "None"
                ],
                "verbose": [
                    "bool",
                    "Dict"
                ]
            }
        },
        "PdfVisualParser.parse": {
            "name": "parse",
            "location": 85,
            "return": [
                "None",
                "Union[tuple,list]",
                "Generator",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "document_name": [
                    "str"
                ],
                "sentences": [
                    "int",
                    "str",
                    "Sequence[Any]",
                    "List[numpy.ndarray]",
                    "Tuple",
                    "Union[slice,List[slice],List[int]]",
                    "List[slice]",
                    "List[int]"
                ]
            }
        },
        "PdfVisualParser._extract_pdf_words": {
            "name": "_extract_pdf_words",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PdfVisualParser._get_linked_pdf_path": {
            "name": "_get_linked_pdf_path",
            "location": 141,
            "return": [
                "str",
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "document_name": [
                    "str"
                ]
            }
        },
        "PdfVisualParser.is_parsable": {
            "name": "is_parsable",
            "location": 155,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "document_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "PdfVisualParser._coordinates_from_HTML": {
            "name": "_coordinates_from_HTML",
            "location": 162,
            "return": [
                "Tuple[Union[list[tuple[tuple[Union[int,str]]]],dict[tuple[Union[int,str]],Bbox]]]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "page": [
                    "int",
                    "str",
                    "bool",
                    "Optional[Dict]"
                ],
                "page_num": [
                    "int",
                    "str",
                    "contests.models.User"
                ]
            }
        },
        "PdfVisualParser._extract_html_words": {
            "name": "_extract_html_words",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PdfVisualParser._link_lists": {
            "name": "_link_lists",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "search_max": [
                    "int",
                    "str",
                    "List[Dict[str,str]]"
                ],
                "edit_cost": [
                    "int",
                    "str",
                    "List[Dict[str,str]]",
                    "Dict"
                ],
                "offset_cost": [
                    "int",
                    "str",
                    "List[Dict[str,str]]",
                    "Dict"
                ]
            }
        },
        "PdfVisualParser._update_coordinates": {
            "name": "_update_coordinates",
            "location": 345,
            "return": [
                "Iterator[fonduer.parser.models.Sentence]",
                "Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "PdfVisualParser._link_lists.link_exact": {
            "name": "link_exact",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "l": [
                    "int",
                    "raiden.utils.Any",
                    "bool"
                ],
                "u": [
                    "int"
                ]
            }
        },
        "PdfVisualParser._link_lists.link_fuzzy": {
            "name": "link_fuzzy",
            "location": 236,
            "return": [
                "None",
                "app.models.Article",
                "Set"
            ],
            "arguments": {
                "i": [
                    "int",
                    "str",
                    "numpy.ndarray",
                    "float"
                ]
            }
        },
        "PdfVisualParser._link_lists.get_anchors": {
            "name": "get_anchors",
            "location": 258,
            "return": [
                "Tuple[int]",
                "str",
                "Set[str]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "l": [
                    "Optional[numpy.ndarray]",
                    "Optional[dict]",
                    "bool",
                    "Optional[float]",
                    "Dict[str, Any]"
                ],
                "u": [
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "PdfVisualParser._link_lists.display_match_counts": {
            "name": "display_match_counts",
            "location": 275,
            "return": [
                "bool",
                "str",
                "OrderedDict",
                "bs4.BeautifulSoup",
                "int"
            ],
            "arguments": {}
        }
    },
    "fonduer-master/src/fonduer/parser/visual_parser/visual_parser.py": {
        "VisualParser.parse": {
            "name": "parse",
            "location": 12,
            "return": [
                "Iterator[fonduer.parser.models.Sentence]",
                "None"
            ],
            "arguments": {
                "self": [],
                "document_name": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "Any",
                    "int",
                    "Iterable[float]",
                    "Callable",
                    "Optional[Callable]"
                ],
                "sentences": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "Any",
                    "int",
                    "Iterable[float]",
                    "Callable",
                    "Optional[Callable]"
                ]
            }
        },
        "VisualParser.is_parsable": {
            "name": "is_parsable",
            "location": 26,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "document_name": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/parser/visual_parser/__init__.py": {},
    "fonduer-master/src/fonduer/supervision/labeler.py": {
        "Labeler.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "int",
                    "List[fonduer.candidates.models.Candidate]",
                    "sqlalchemy.orm.Session",
                    "tensorflow.Session"
                ],
                "candidate_classes": [
                    "int",
                    "List[fonduer.candidates.models.Candidate]",
                    "sqlalchemy.orm.Session",
                    "tensorflow.Session"
                ],
                "parallelism": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "List[fonduer.candidates.models.Candidate]",
                    "tensorflow.Session"
                ]
            }
        },
        "Labeler.update": {
            "name": "update",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "docs": [
                    "str",
                    "None",
                    "bool",
                    "List[int]",
                    "Callable",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "split": [
                    "int",
                    "str",
                    "bool",
                    "List[int]",
                    "Optional[str]",
                    "Optional[int]",
                    "Callable"
                ],
                "lfs": [
                    "List[list[Callable]]",
                    "List[List[Callable]]",
                    "Dict",
                    "bool",
                    "List[int]",
                    "Optional[dict]",
                    "Optional[Iterable[str]]",
                    "int",
                    "Union[int,argonautica.utils.Void]"
                ],
                "parallelism": [
                    "str",
                    "None",
                    "bool",
                    "List[int]",
                    "Callable",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "progress_bar": [
                    "bool",
                    "str",
                    "List[int]",
                    "Optional[str]",
                    "Optional[int]",
                    "Callable"
                ],
                "table": [
                    "int",
                    "str",
                    "float",
                    "Optional[int]",
                    "Callable"
                ]
            }
        },
        "Labeler.apply": {
            "name": "apply",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "docs": [
                    "List[str]",
                    "None",
                    "str",
                    "bool",
                    "int"
                ],
                "split": [
                    "int",
                    "bool",
                    "str"
                ],
                "train": [
                    "bool",
                    "int",
                    "str",
                    "Optional[dict]",
                    "Optional[int]"
                ],
                "lfs": [
                    "bool",
                    "None",
                    "Optional[numpy.ndarray]",
                    "Dict",
                    "Optional[dict]",
                    "List[list[Callable]]",
                    "List[List[Callable]]",
                    "Optional[Iterable[str]]"
                ],
                "clear": [
                    "bool",
                    "int",
                    "str",
                    "Optional[dict]",
                    "Optional[int]"
                ],
                "parallelism": [
                    "int",
                    "None",
                    "str",
                    "Optional[dict]",
                    "Optional[int]",
                    "Dict"
                ],
                "progress_bar": [
                    "bool",
                    "int",
                    "str",
                    "Optional[dict]",
                    "Optional[int]"
                ],
                "table": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "Labeler.get_keys": {
            "name": "get_keys",
            "location": 194,
            "return": [
                "List",
                "bool",
                "Optional[str]",
                "Dict[str,Dict[str,Any]]",
                "Tuple[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Labeler.upsert_keys": {
            "name": "upsert_keys",
            "location": 201,
            "return": [
                "None",
                "str",
                "Union[tuple,list]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "Dict",
                    "Tuple[object]",
                    "Union[str,int]",
                    "str",
                    "int",
                    "bool"
                ],
                "candidate_classes": [
                    "Optional[Dict[str,Any]]",
                    "None",
                    "Callable[,None]",
                    "List[str]",
                    "Dict[str,Any]",
                    "str",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "Labeler.drop_keys": {
            "name": "drop_keys",
            "location": 255,
            "return": [
                "None",
                "str",
                "Union[tuple,list]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "Dict",
                    "Tuple[object]",
                    "Union[str,int]",
                    "str",
                    "int",
                    "bool"
                ],
                "candidate_classes": [
                    "Optional[Dict[str,Any]]",
                    "None",
                    "Callable[,None]",
                    "List[str]",
                    "Dict[str,Any]",
                    "str",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "Labeler._add": {
            "name": "_add",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "nox.sessions.Session",
                    "sqlalchemy.orm.session.Session",
                    "_pytesmain.Session",
                    "sqlalchemy.orm.Session"
                ],
                "records_list": [
                    "bool",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "Labeler.clear": {
            "name": "clear",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "train": [
                    "bool",
                    "str",
                    "Optional[List[Any]]",
                    "List[Any]",
                    "List[str]",
                    "None",
                    "int"
                ],
                "split": [
                    "int",
                    "str"
                ],
                "lfs": [
                    "bool",
                    "None",
                    "str",
                    "Optional[List[Any]]",
                    "List[str]",
                    "List[Any]",
                    "int"
                ],
                "table": [
                    "sqlalchemy.Table",
                    "int",
                    "dict"
                ]
            }
        },
        "Labeler.clear_all": {
            "name": "clear_all",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "sqlalchemy.Table",
                    "str",
                    "bool"
                ]
            }
        },
        "Labeler._after_apply": {
            "name": "_after_apply",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "train": [
                    "bool",
                    "str"
                ],
                "table": [
                    "int",
                    "Optional[List[Any]]",
                    "Union[str, Callable[[], str]]",
                    "core.models.GroupingKey",
                    "core.models.Groups",
                    "str",
                    "Optional[bytes]"
                ]
            }
        },
        "Labeler.get_gold_labels": {
            "name": "get_gold_labels",
            "location": 377,
            "return": [
                "List",
                "Dict[str,Any]",
                "str",
                "int",
                "bool",
                "bytes",
                "zerver.models.Realm",
                "models.Profile"
            ],
            "arguments": {
                "self": [],
                "cand_lists": [
                    "List[Callable]",
                    "str",
                    "bool",
                    "deeplearning.ml4pl.models.batch.Data",
                    "deeplearning.ml4pl.models.batch.Results"
                ],
                "annotator": [
                    "List[Callable]",
                    "None",
                    "str",
                    "bool",
                    "deeplearning.ml4pl.models.batch.Data",
                    "deeplearning.ml4pl.models.batch.Results"
                ]
            }
        },
        "Labeler.get_label_matrices": {
            "name": "get_label_matrices",
            "location": 407,
            "return": [
                "List",
                "str",
                "List[str]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "cand_lists": [
                    "str",
                    "Mapping",
                    "Mapping[str,str]",
                    "T"
                ]
            }
        },
        "LabelerUDF.__init__": {
            "name": "__init__",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "candidate_classes": [
                    "List[str]"
                ]
            }
        },
        "LabelerUDF._f_gen": {
            "name": "_f_gen",
            "location": 436,
            "return": [
                "Iterator[Tuple[int,str,int]]",
                "Generator[tuple[int]]",
                "Generator[tuple]"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "List",
                    "fonduer.candidates.models.Candidate",
                    "int",
                    "Match",
                    "Match[str]"
                ]
            }
        },
        "LabelerUDF.apply": {
            "name": "apply",
            "location": 467,
            "return": [
                "List[list]",
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "str",
                    "Dict",
                    "fonduer.parser.models.Document",
                    "int",
                    "Callable[T,T]",
                    "Callable[[KT],VT]",
                    "bool"
                ],
                "lfs": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Tuple[float,float]]",
                    "Tuple[Union[float,float]]"
                ],
                "table": [
                    "sqlalchemy.Table",
                    "dict",
                    "numpy.array",
                    "int"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/supervision/__init__.py": {},
    "fonduer-master/src/fonduer/supervision/models/label.py": {
        "StableLabel.__repr__": {
            "name": "__repr__",
            "location": 76,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fonduer-master/src/fonduer/supervision/models/__init__.py": {},
    "fonduer-master/src/fonduer/utils/config.py": {
        "_merge": {
            "name": "_merge",
            "location": 45,
            "return": [
                "dict"
            ],
            "arguments": {
                "x": [
                    "str"
                ],
                "y": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "get_config": {
            "name": "get_config",
            "location": 58,
            "return": [
                "dict"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/utils/udf.py": {
        "UDFRunner.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "bool",
                    "None",
                    "sqlalchemy.orm.Session",
                    "Callable[S,bool]",
                    "Optional[Union[IPUtilityFunction,UtilityDistribution]]",
                    "Callable[[recidiviz.persistence.database.session.Session],bool]"
                ],
                "udf_class": [
                    "bool",
                    "str",
                    "Union[int,float]",
                    "float"
                ],
                "parallelism": [
                    "int",
                    "bool",
                    "sqlalchemy.orm.Session",
                    "Optional[Union[IPUtilityFunction,UtilityDistribution]]",
                    "Callable[[recidiviz.persistence.database.session.Session],bool]"
                ]
            }
        },
        "UDFRunner.apply": {
            "name": "apply",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "doc_loader": [
                    "str",
                    "int"
                ],
                "clear": [
                    "bool",
                    "int",
                    "float",
                    "str"
                ],
                "parallelism": [
                    "int",
                    "None",
                    "Callable",
                    "str",
                    "models.Question"
                ],
                "progress_bar": [
                    "bool",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict"
                ]
            }
        },
        "UDFRunner.clear": {
            "name": "clear",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UDFRunner._after_apply": {
            "name": "_after_apply",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UDFRunner._add": {
            "name": "_add",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "List",
                    "None",
                    "Optional[sqlalchemy.orm.session.Session]",
                    "sqlalchemy.orm.unitofwork.UOWTransaction",
                    "Iterable"
                ],
                "instance": [
                    "str",
                    "List",
                    "None",
                    "Optional[sqlalchemy.orm.session.Session]",
                    "sqlalchemy.orm.unitofwork.UOWTransaction",
                    "Iterable"
                ]
            }
        },
        "UDFRunner._apply": {
            "name": "_apply",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "doc_loader": [
                    "int",
                    "list",
                    "Sequence[T]",
                    "Sequence[int]"
                ],
                "parallelism": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "UDF.__init__": {
            "name": "__init__",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session_factory": [
                    "None",
                    "Optional[str]",
                    "bool",
                    "str",
                    "Callable[,bool]",
                    "contests.models.User",
                    "Optional[bool]",
                    "Optional[Callable[,bool]]"
                ],
                "runner": [
                    "None",
                    "Optional[str]",
                    "bool",
                    "str",
                    "Callable[,bool]",
                    "contests.models.User",
                    "Optional[bool]",
                    "Optional[Callable[,bool]]"
                ],
                "in_queue": [
                    "None",
                    "Optional[str]",
                    "bool",
                    "str",
                    "Callable[,bool]",
                    "contests.models.User",
                    "Optional[bool]",
                    "Optional[Callable[,bool]]"
                ],
                "out_queue": [
                    "None",
                    "Optional[str]",
                    "bool",
                    "str",
                    "Callable[,bool]",
                    "contests.models.User",
                    "Optional[bool]",
                    "Optional[Callable[,bool]]"
                ],
                "worker_id": [
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "UDF.run": {
            "name": "run",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UDF.apply": {
            "name": "apply",
            "location": 229,
            "return": [
                "Union[fonduer.parser.models.document.Document,None,List[List[Dict[str,Any]]]]",
                "None"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "UDFRunner._apply.in_thread_func": {
            "name": "in_thread_func",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fonduer-master/src/fonduer/utils/utils.py": {
        "camel_to_under": {
            "name": "camel_to_under",
            "location": 12,
            "return": [
                "str",
                "bytes",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "get_as_dict": {
            "name": "get_as_dict",
            "location": 25,
            "return": [
                "Dict",
                "bool",
                "int"
            ],
            "arguments": {
                "x": [
                    "Dict",
                    "List",
                    "Union[application.domain.models.T,List[application.domain.models.T]]",
                    "List[T]"
                ]
            }
        },
        "tokens_to_ngrams": {
            "name": "tokens_to_ngrams",
            "location": 36,
            "return": [
                "Iterator[str]",
                "Generator"
            ],
            "arguments": {
                "tokens": [
                    "int",
                    "list",
                    "bool"
                ],
                "n_min": [
                    "int",
                    "float",
                    "List",
                    "List[int]"
                ],
                "n_max": [
                    "int",
                    "float",
                    "List",
                    "List[int]"
                ],
                "delim": [
                    "Text",
                    "str",
                    "List[str]",
                    "bytes"
                ],
                "lower": [
                    "bool",
                    "int",
                    "Set[str]",
                    "Iterator[Tuple[str,...]]",
                    "List[Dict[str,Any]]",
                    "List",
                    "Set"
                ]
            }
        },
        "get_set_of_stable_ids": {
            "name": "get_set_of_stable_ids",
            "location": 51,
            "return": [
                "Dict",
                "str",
                "Final",
                "Optional[str]",
                "Dict[str,Tuple[str,Any]]"
            ],
            "arguments": {
                "doc": [
                    "Sequence",
                    "Optional[Sequence]",
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "tracim.models.data.Workspace",
                    "tracim.models.data.Content",
                    "Optional[homeassistancore.Context]"
                ],
                "candidate_class": [
                    "Sequence",
                    "Optional[Sequence]",
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "tracim.models.data.Workspace",
                    "tracim.models.data.Content",
                    "Optional[homeassistancore.Context]"
                ]
            }
        },
        "get_dict_of_stable_id": {
            "name": "get_dict_of_stable_id",
            "location": 72,
            "return": [
                "Dict[Union[int,list[Any],None],dict]",
                "str",
                "bool",
                "Dict",
                "django.db.models.QuerySet"
            ],
            "arguments": {
                "doc": [
                    "int",
                    "Optional[List[Any]]",
                    "List[Any]",
                    "None"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/utils/utils_parser.py": {
        "build_node": {
            "name": "build_node",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "type": [
                    "str",
                    "bool",
                    "Iterable[Any]",
                    "Optional[List[dict]]",
                    "None"
                ],
                "name": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "content": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "column_constructor": {
            "name": "column_constructor",
            "location": 25,
            "return": [
                "List[Tuple[(_T2, _T1, Any)]]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "type": [
                    "Text",
                    "str",
                    "Optional[str]"
                ],
                "delim": [
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/utils/utils_table.py": {
        "_min_range_diff": {
            "name": "_min_range_diff",
            "location": 12,
            "return": [
                "List",
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "coordinates": [
                    "Tuple[tuple[Union[int,int]]]",
                    "List[str]",
                    "Tuple[Tuple[int,int]]",
                    "List",
                    "str",
                    "bool",
                    "Dict",
                    "Optional[str]"
                ],
                "absolute": [
                    "bool",
                    "int",
                    "Tuple[float,float,float,float]",
                    "List[str]"
                ]
            }
        },
        "min_row_diff": {
            "name": "min_row_diff",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "cells": [
                    "str",
                    "int",
                    "Union[int,str]"
                ],
                "absolute": [
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "str",
                    "Tuple",
                    "Dict[str,dict]",
                    "Dict[str,Any]",
                    "Mapping[str,Any]"
                ]
            }
        },
        "min_col_diff": {
            "name": "min_col_diff",
            "location": 49,
            "return": [
                "int",
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {
                "cells": [
                    "str",
                    "paradigm.models.Overloaded",
                    "int"
                ],
                "absolute": [
                    "bool",
                    "Dict[str,Any]",
                    "Dict",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,dict]",
                    "Dict[str,Dict[str,Any]]",
                    "int"
                ]
            }
        },
        "min_axis_diff": {
            "name": "min_axis_diff",
            "location": 60,
            "return": [
                "bool",
                "float",
                "bytearray"
            ],
            "arguments": {
                "a": [
                    "bool",
                    "Union[fonduer.parser.models.table.Cell,fonduer.parser.models.sentence.Sentence]",
                    "str",
                    "float"
                ],
                "b": [
                    "bool",
                    "Union[fonduer.parser.models.table.Cell,fonduer.parser.models.sentence.Sentence]",
                    "str",
                    "float"
                ],
                "axis": [
                    "Optional[str]",
                    "None",
                    "bool",
                    "str",
                    "Union[int,float]",
                    "Mapping[str,float]",
                    "float",
                    "Mapping"
                ],
                "absolute": [
                    "bool",
                    "Union[fonduer.parser.models.table.Cell,fonduer.parser.models.sentence.Sentence]",
                    "str",
                    "float"
                ]
            }
        },
        "is_row_aligned": {
            "name": "is_row_aligned",
            "location": 81,
            "return": [
                "bool",
                "Iterable[str]",
                "Sequence[str]"
            ],
            "arguments": {
                "a": [
                    "List[int]",
                    "Union[fonduer.parser.models.table.Cell,fonduer.parser.models.sentence.Sentence]",
                    "int",
                    "Sequence"
                ],
                "b": [
                    "List[int]",
                    "Union[fonduer.parser.models.table.Cell,fonduer.parser.models.sentence.Sentence]",
                    "int",
                    "Sequence"
                ],
                "spread": [
                    "List[int]",
                    "Union[fonduer.parser.models.table.Cell,fonduer.parser.models.sentence.Sentence]",
                    "int",
                    "Sequence"
                ]
            }
        },
        "is_col_aligned": {
            "name": "is_col_aligned",
            "location": 94,
            "return": [
                "bool",
                "int",
                "Union[int,bool]"
            ],
            "arguments": {
                "a": [
                    "List[int]",
                    "Union[fonduer.parser.models.table.Cell,fonduer.parser.models.sentence.Sentence]",
                    "int",
                    "str"
                ],
                "b": [
                    "List[int]",
                    "Union[fonduer.parser.models.table.Cell,fonduer.parser.models.sentence.Sentence]",
                    "int",
                    "str"
                ],
                "spread": [
                    "List[int]",
                    "Union[fonduer.parser.models.table.Cell,fonduer.parser.models.sentence.Sentence]",
                    "int",
                    "str"
                ]
            }
        },
        "is_axis_aligned": {
            "name": "is_axis_aligned",
            "location": 107,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [
                    "List[int]",
                    "Union[fonduer.parser.models.table.Cell,fonduer.parser.models.sentence.Sentence]",
                    "float",
                    "int",
                    "Union[float,int]",
                    "T"
                ],
                "b": [
                    "List[int]",
                    "Union[fonduer.parser.models.table.Cell,fonduer.parser.models.sentence.Sentence]",
                    "float",
                    "int",
                    "Union[float,int]",
                    "T"
                ],
                "axis": [
                    "Optional[str]",
                    "None",
                    "float",
                    "str",
                    "bool"
                ],
                "spread": [
                    "List[int]",
                    "Union[fonduer.parser.models.table.Cell,fonduer.parser.models.sentence.Sentence]",
                    "Union[float,int]",
                    "int",
                    "T"
                ]
            }
        },
        "num_rows": {
            "name": "num_rows",
            "location": 131,
            "return": [
                "List[int]",
                "float",
                "str",
                "List[dict]",
                "List[List[int]]"
            ],
            "arguments": {
                "a": [
                    "int",
                    "Union[fonduer.parser.models.table.Cell,fonduer.parser.models.sentence.Sentence]"
                ]
            }
        },
        "num_cols": {
            "name": "num_cols",
            "location": 140,
            "return": [
                "float",
                "int",
                "Dict[Tuple[int, int], int]",
                "Tuple[Any, Any, Any]",
                "FrozenSet[Any]"
            ],
            "arguments": {
                "a": [
                    "Dict[str,int]",
                    "Union[fonduer.parser.models.table.Cell,fonduer.parser.models.sentence.Sentence]",
                    "int",
                    "float",
                    "str",
                    "None",
                    "Optional[int]"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/utils/utils_udf.py": {
        "_get_cand_values": {
            "name": "_get_cand_values",
            "location": 36,
            "return": [
                "str",
                "bool",
                "\"PRecord\"",
                "list",
                "BinaryIO"
            ],
            "arguments": {
                "candidate": [
                    "str",
                    "fonduer.candidates.models.Candidate",
                    "bool",
                    "bytes",
                    "Sequence[str]"
                ],
                "key_table": [
                    "str",
                    "bool",
                    "sqlalchemy.Table"
                ]
            }
        },
        "_batch_postgres_query": {
            "name": "_batch_postgres_query",
            "location": 52,
            "return": [
                "None",
                "int",
                "Generator",
                "str",
                "bytes",
                "raiden.utils.Signature"
            ],
            "arguments": {
                "table": [
                    "str",
                    "Union[str,Callable]",
                    "Callable",
                    "Optional[str]",
                    "None"
                ],
                "records": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "get_sparse_matrix_keys": {
            "name": "get_sparse_matrix_keys",
            "location": 101,
            "return": [
                "str",
                "Dict[str, str]",
                "Optional[List[str]]",
                "dict",
                "Optional[Dict]"
            ],
            "arguments": {
                "session": [
                    "str",
                    "Dict",
                    "sqlalchemy.Table",
                    "sqlalchemy.orm.Session",
                    "tensorflow.Session"
                ],
                "key_table": [
                    "str",
                    "Dict",
                    "sqlalchemy.Table",
                    "sqlalchemy.orm.Session",
                    "tensorflow.Session"
                ]
            }
        },
        "batch_upsert_records": {
            "name": "batch_upsert_records",
            "location": 106,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.Session",
                    "zam_repondeur.models.Article",
                    "tensorflow.Session",
                    "abilian.core.sqlalchemy.SQLAlchemy"
                ],
                "table": [
                    "str",
                    "List[int]",
                    "List[dict[str,Any]]",
                    "Dict",
                    "List[Dict[str,Any]]",
                    "sqlalchemy.Table"
                ],
                "records": [
                    "List[dict[str,Any]]",
                    "str",
                    "List[Dict[str,Any]]",
                    "Dict",
                    "bool",
                    "int",
                    "Iterable[str]"
                ]
            }
        },
        "get_sparse_matrix": {
            "name": "get_sparse_matrix",
            "location": 125,
            "return": [
                "List",
                "str",
                "bool",
                "Dict",
                "Set",
                "List[str]"
            ],
            "arguments": {
                "session": [
                    "str",
                    "int",
                    "Dict",
                    "Union[str,int]",
                    "None",
                    "agate.Table",
                    "Optional[str]"
                ],
                "key_table": [
                    "int",
                    "Dict[str,str]",
                    "List[str]",
                    "str",
                    "List",
                    "Dict[str,Any]"
                ],
                "cand_lists": [
                    "List[str]",
                    "bool",
                    "str",
                    "Union[List[str],List[int]]",
                    "List[int]",
                    "Optional[List[str]]",
                    "None",
                    "Dict[str,List[WantedGallery]]",
                    "Dict[str,list[WantedGallery]]"
                ],
                "key": [
                    "None",
                    "str",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "List[str]",
                    "Mapping",
                    "Mapping[str,Any]",
                    "Optional[Dict[str,Any]]"
                ]
            }
        },
        "_convert_mappings_to_matrix": {
            "name": "_convert_mappings_to_matrix",
            "location": 164,
            "return": [
                "int",
                "defx.util.Candidate",
                "str",
                "dict"
            ],
            "arguments": {
                "mappings": [
                    "List[Dict[str, Any]]",
                    "str",
                    "Container[str]",
                    "Union[str]",
                    "bytes",
                    "List[str]"
                ],
                "keys": [
                    "str",
                    "bytes",
                    "Iterable[str]",
                    "Optional[Callable[[str], Any]]",
                    "List[Dict[str, Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "unshift_label_matrix": {
            "name": "unshift_label_matrix",
            "location": 196,
            "return": [
                "int",
                "List[str]",
                "bool",
                "str",
                "List[Mapping[str,Any]]",
                "Set"
            ],
            "arguments": {
                "L_sparse": [
                    "numpy.ndarray",
                    "scipy.sparse.csr_matrix",
                    "int"
                ]
            }
        },
        "shift_label_matrix": {
            "name": "shift_label_matrix",
            "location": 201,
            "return": [
                "str",
                "mode.utils.types.trees.NodeT",
                "Dict[str, int]",
                "numpy.ndarray"
            ],
            "arguments": {
                "L": [
                    "int",
                    "numpy.ndarray",
                    "scipy.sparse.csr_matrix"
                ]
            }
        },
        "get_docs_from_split": {
            "name": "get_docs_from_split",
            "location": 206,
            "return": [
                "Dict",
                "List[sqlalchemy.engine.resulRowProxy]",
                "Dict[int,dict]",
                "int"
            ],
            "arguments": {
                "session": [
                    "str",
                    "recidiviz.persistence.database.session.Session",
                    "requests.Session",
                    "sqlalchemy.exdeclarative.DeclarativeMeta"
                ],
                "candidate_classes": [
                    "str",
                    "Iterable[Type[fonduer.candidates.models.Candidate]]",
                    "bool",
                    "mediaarchiver.models.TypeVarAccount",
                    "sqlalchemy.engine.url.URL",
                    "Optional[str]"
                ],
                "split": [
                    "str",
                    "Callable[,T]",
                    "Union[sqlalchemy.orm.session.Session,abilian.core.models.blob.Blob]",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "get_mapping": {
            "name": "get_mapping",
            "location": 223,
            "return": [
                "Iterator[Dict[str,Any]]",
                "Generator[dict[Union[Text,Text,Text],Union[list[set[list]],list[set[list]]]]]"
            ],
            "arguments": {
                "table": [
                    "str",
                    "Dict[str,str]",
                    "Tuple",
                    "None",
                    "Optional[Dict[str,str]]",
                    "mode.utils.imports.SymbolArg[Type[tables.TableT]]",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "sqlalchemy.Table"
                ],
                "candidates": [
                    "str",
                    "Type[Exception]",
                    "Optional[str]",
                    "bool"
                ],
                "generator": [
                    "Set[str]",
                    "Sequence[dict[str,str]]",
                    "Type",
                    "sqlalchemy.Table",
                    "Sequence[Dict[str,str]]",
                    "Type[T]",
                    "cassandra.cluster.Session"
                ]
            }
        },
        "drop_all_keys": {
            "name": "drop_all_keys",
            "location": 258,
            "return": [
                "None",
                "Iterator[object]",
                "Union[tuple,list]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.Table",
                    "int",
                    "sqlalchemy.orm.session.Session"
                ],
                "key_table": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.Table",
                    "sqlalchemy.orm.session.Session"
                ],
                "candidate_classes": [
                    "Iterable[Type[fonduer.candidates.models.Candidate]]",
                    "Set[str]",
                    "cmk.utils.type_defs.ServiceName",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.Item",
                    "int"
                ]
            }
        },
        "drop_keys": {
            "name": "drop_keys",
            "location": 323,
            "return": [
                "None",
                "str",
                "Union[tuple,list]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "session": [
                    "str",
                    "sqlalchemy.orm.Session",
                    "core.models.UserKey",
                    "sqlalchemy.Table"
                ],
                "key_table": [
                    "Dict",
                    "str",
                    "sqlalchemy.Table",
                    "bool",
                    "sqlalchemy.sql.selectable.CTE"
                ],
                "keys": [
                    "Dict",
                    "sqlalchemy.Table",
                    "str"
                ]
            }
        },
        "upsert_keys": {
            "name": "upsert_keys",
            "location": 382,
            "return": [
                "None",
                "str",
                "Union[tuple,list]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.Table",
                    "T",
                    "Callable"
                ],
                "key_table": [
                    "Dict",
                    "str",
                    "sqlalchemy.Table"
                ],
                "keys": [
                    "Dict",
                    "sqlalchemy.Table",
                    "str"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/utils/utils_visual.py": {
        "bbox_from_span": {
            "name": "bbox_from_span",
            "location": 16,
            "return": [
                "bool",
                "Bbox",
                "str",
                "None"
            ],
            "arguments": {
                "span": [
                    "int"
                ]
            }
        },
        "bbox_from_sentence": {
            "name": "bbox_from_sentence",
            "location": 40,
            "return": [
                "Bbox",
                "float",
                "None",
                "Sequence[float]",
                "Tuple[int,int]",
                "Tuple"
            ],
            "arguments": {
                "sentence": [
                    "Any",
                    "float",
                    "models.scenes.scenes_base.Scene"
                ]
            }
        },
        "bbox_horz_aligned": {
            "name": "bbox_horz_aligned",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "box1": [
                    "int",
                    "float",
                    "bool",
                    "pykechain.models.sidebar.sidebar_button.SideBarButton"
                ],
                "box2": [
                    "int",
                    "float",
                    "bool",
                    "pykechain.models.sidebar.sidebar_button.SideBarButton"
                ]
            }
        },
        "bbox_vert_aligned": {
            "name": "bbox_vert_aligned",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "box1": [
                    "int",
                    "Callable",
                    "str",
                    "models.Question"
                ],
                "box2": [
                    "int",
                    "Callable",
                    "str",
                    "models.Question"
                ]
            }
        },
        "bbox_vert_aligned_left": {
            "name": "bbox_vert_aligned_left",
            "location": 110,
            "return": [
                "bool"
            ],
            "arguments": {
                "box1": [
                    "int",
                    "Callable",
                    "str",
                    "models.Question"
                ],
                "box2": [
                    "int",
                    "Callable",
                    "str",
                    "models.Question"
                ]
            }
        },
        "bbox_vert_aligned_right": {
            "name": "bbox_vert_aligned_right",
            "location": 120,
            "return": [
                "bool"
            ],
            "arguments": {
                "box1": [
                    "int",
                    "Callable",
                    "str",
                    "models.Question"
                ],
                "box2": [
                    "int",
                    "Callable",
                    "str",
                    "models.Question"
                ]
            }
        },
        "bbox_vert_aligned_center": {
            "name": "bbox_vert_aligned_center",
            "location": 130,
            "return": [
                "bool"
            ],
            "arguments": {
                "box1": [
                    "int",
                    "Callable",
                    "str",
                    "models.Question"
                ],
                "box2": [
                    "int",
                    "Callable",
                    "str",
                    "models.Question"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/utils/visualizer.py": {
        "get_box": {
            "name": "get_box",
            "location": 122,
            "return": [
                "str",
                "Bbox"
            ],
            "arguments": {
                "span": [
                    "fonduer.candidates.models.SpanMention",
                    "str",
                    "salon.models.Stylist",
                    "int"
                ]
            }
        },
        "get_pdf_dim": {
            "name": "get_pdf_dim",
            "location": 137,
            "return": [
                "Tuple[int]",
                "int",
                "str",
                "List[str]",
                "float"
            ],
            "arguments": {
                "pdf_file": [
                    "str",
                    "int"
                ],
                "page": [
                    "int",
                    "str"
                ]
            }
        },
        "pdf_to_img": {
            "name": "pdf_to_img",
            "location": 156,
            "return": [
                "Image",
                "bytes",
                "int",
                "IO",
                "List[str]",
                "cmk.utils.type_defs.HostAddress",
                "str"
            ],
            "arguments": {
                "pdf_file": [
                    "str",
                    "bool",
                    "Container[str]",
                    "Container"
                ],
                "page_num": [
                    "int",
                    "str"
                ],
                "pdf_dim": [
                    "Optional[Tuple[int,int]]",
                    "str",
                    "None",
                    "Tuple[Union[int,int]]",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "Visualizer.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pdf_path": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "Visualizer.display_boxes": {
            "name": "display_boxes",
            "location": 34,
            "return": [
                "List",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "pdf_file": [
                    "str",
                    "Union[slice,List[slice],List[int]]",
                    "List[slice]",
                    "List[int]"
                ],
                "boxes": [
                    "str",
                    "bool",
                    "TextIO"
                ],
                "alternate_colors": [
                    "bool",
                    "str",
                    "TextIO",
                    "Optional[bool]",
                    "Tuple"
                ]
            }
        },
        "Visualizer.display_candidates": {
            "name": "display_candidates",
            "location": 73,
            "return": [
                "float",
                "[[]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "candidates": [
                    "List[fonduer.candidates.models.Candidate]",
                    "bytes",
                    "str",
                    "Dict"
                ],
                "pdf_file": [
                    "str",
                    "None",
                    "List[str]",
                    "Optional[str]",
                    "Tuple[str]",
                    "Literal",
                    "Optional[Tuple[str]]",
                    "Dict",
                    "Optional[Dict]"
                ]
            }
        },
        "Visualizer.display_words": {
            "name": "display_words",
            "location": 93,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "sentences": [
                    "List[fonduer.parser.models.Sentence]",
                    "str",
                    "Union[str,Path]",
                    "Optional[str]",
                    "cmk.utils.type_defs.HostName"
                ],
                "target": [
                    "None",
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "Optional[Path]"
                ],
                "pdf_file": [
                    "List[str]",
                    "bool",
                    "None"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/utils/__init__.py": {},
    "fonduer-master/src/fonduer/utils/data_model_utils/structural.py": {
        "get_tag": {
            "name": "get_tag",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "mention": []
            }
        },
        "get_attributes": {
            "name": "get_attributes",
            "location": 30,
            "return": [],
            "arguments": {
                "mention": []
            }
        },
        "_get_etree_for_text": {
            "name": "_get_etree_for_text",
            "location": 48,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "_get_node": {
            "name": "_get_node",
            "location": 52,
            "return": [],
            "arguments": {
                "sentence": []
            }
        },
        "get_parent_tag": {
            "name": "get_parent_tag",
            "location": 58,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "mention": []
            }
        },
        "get_prev_sibling_tags": {
            "name": "get_prev_sibling_tags",
            "location": 73,
            "return": [
                "list[typing.Union[int,str]]"
            ],
            "arguments": {
                "mention": []
            }
        },
        "get_next_sibling_tags": {
            "name": "get_next_sibling_tags",
            "location": 94,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "mention": []
            }
        },
        "get_ancestor_class_names": {
            "name": "get_ancestor_class_names",
            "location": 115,
            "return": [
                "list[typing.Union[int,str]]"
            ],
            "arguments": {
                "mention": []
            }
        },
        "get_ancestor_tag_names": {
            "name": "get_ancestor_tag_names",
            "location": 134,
            "return": [
                "list[typing.Union[int,str]]"
            ],
            "arguments": {
                "mention": []
            }
        },
        "get_ancestor_id_names": {
            "name": "get_ancestor_id_names",
            "location": 153,
            "return": [
                "list[typing.Union[int,str]]"
            ],
            "arguments": {
                "mention": []
            }
        },
        "common_ancestor": {
            "name": "common_ancestor",
            "location": 172,
            "return": [
                "list[]"
            ],
            "arguments": {
                "c": []
            }
        },
        "lowest_common_ancestor_depth": {
            "name": "lowest_common_ancestor_depth",
            "location": 191,
            "return": [
                "int"
            ],
            "arguments": {
                "c": []
            }
        }
    },
    "fonduer-master/src/fonduer/utils/data_model_utils/tabular.py": {
        "same_table": {
            "name": "same_table",
            "location": 31,
            "return": [
                "bool",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "c": [
                    "fonduer.candidates.models.Candidate",
                    "int",
                    "raiden.utils.FeeAmount",
                    "List[int]",
                    "Iterator[Any]",
                    "Union[tuple, list]"
                ]
            }
        },
        "same_row": {
            "name": "same_row",
            "location": 43,
            "return": [
                "bool",
                "Dict"
            ],
            "arguments": {
                "c": [
                    "fonduer.candidates.models.Candidate",
                    "str",
                    "Union[int, str]",
                    "bool",
                    "list"
                ]
            }
        },
        "same_col": {
            "name": "same_col",
            "location": 54,
            "return": [
                "bool",
                "cmk.utils.type_defs.UserId",
                "int",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "c": [
                    "fonduer.candidates.models.Candidate",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "is_tabular_aligned": {
            "name": "is_tabular_aligned",
            "location": 65,
            "return": [
                "bool",
                "asgard.models.user.User",
                "Dict"
            ],
            "arguments": {
                "c": [
                    "fonduer.candidates.models.Candidate",
                    "float",
                    "bytes",
                    "Union[int, slice]",
                    "int"
                ]
            }
        },
        "same_cell": {
            "name": "same_cell",
            "location": 77,
            "return": [
                "bool",
                "str",
                "Optional[Callable[[dict],None]]",
                "int"
            ],
            "arguments": {
                "c": [
                    "fonduer.candidates.models.Candidate",
                    "List[str]"
                ]
            }
        },
        "same_sentence": {
            "name": "same_sentence",
            "location": 95,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "c": [
                    "int",
                    "str",
                    "Counter",
                    "fonduer.candidates.models.Candidate",
                    "Iterable[tuple[Union[int,int]]]",
                    "Iterable[Tuple[int,int]]"
                ]
            }
        },
        "get_max_col_num": {
            "name": "get_max_col_num",
            "location": 103,
            "return": [
                "None",
                "Optional[str]",
                "Optional[Any]",
                "str"
            ],
            "arguments": {
                "mention": [
                    "str",
                    "Union[fonduer.candidates.models.Candidate,fonduer.candidates.models.Mention,fonduer.candidates.models.span_mention.TemporarySpanMention]",
                    "salon.models.Stylist"
                ]
            }
        },
        "get_min_col_num": {
            "name": "get_min_col_num",
            "location": 118,
            "return": [
                "None",
                "str",
                "viewer.models.Archive",
                "int",
                "MutableSequence[utils.CWLObjectType]"
            ],
            "arguments": {
                "mention": [
                    "float",
                    "str",
                    "Union[fonduer.candidates.models.Candidate,fonduer.candidates.models.Mention,fonduer.candidates.models.span_mention.TemporarySpanMention]",
                    "bool",
                    "Dict[str,list[str]]",
                    "salon.models.Stylist",
                    "Dict[str,List[str]]"
                ]
            }
        },
        "get_max_row_num": {
            "name": "get_max_row_num",
            "location": 133,
            "return": [
                "None",
                "Optional[bool]",
                "Optional[str]",
                "str",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "mention": [
                    "str",
                    "Dict",
                    "Union[fonduer.candidates.models.Candidate,fonduer.candidates.models.Mention,fonduer.candidates.models.span_mention.TemporarySpanMention]",
                    "Callable[None,None,bool]",
                    "salon.models.Stylist",
                    "Callable[[None,None],bool]"
                ]
            }
        },
        "get_min_row_num": {
            "name": "get_min_row_num",
            "location": 148,
            "return": [
                "None",
                "int",
                "viewer.models.Archive",
                "Callable",
                "str",
                "Optional[str]",
                "mode.utils.Counter[faustypes.TP]"
            ],
            "arguments": {
                "mention": [
                    "str",
                    "float",
                    "Union[fonduer.candidates.models.Candidate,fonduer.candidates.models.Mention,fonduer.candidates.models.span_mention.TemporarySpanMention]",
                    "salon.models.Stylist"
                ]
            }
        },
        "get_sentence_ngrams": {
            "name": "get_sentence_ngrams",
            "location": 169,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "mention": [
                    "int",
                    "str",
                    "Union[fonduer.candidates.models.Candidate,fonduer.candidates.models.Mention,fonduer.candidates.models.span_mention.TemporarySpanMention]",
                    "bool"
                ],
                "attrib": [
                    "Text",
                    "Union[fonduer.candidates.models.Candidate,fonduer.candidates.models.Mention,fonduer.candidates.models.span_mention.TemporarySpanMention]",
                    "int",
                    "bool",
                    "str"
                ],
                "n_min": [
                    "int",
                    "Union[fonduer.candidates.models.Candidate,fonduer.candidates.models.Mention,fonduer.candidates.models.span_mention.TemporarySpanMention]",
                    "bool",
                    "str"
                ],
                "n_max": [
                    "int",
                    "Union[fonduer.candidates.models.Candidate,fonduer.candidates.models.Mention,fonduer.candidates.models.span_mention.TemporarySpanMention]",
                    "bool",
                    "str"
                ],
                "lower": [
                    "bool",
                    "Union[fonduer.candidates.models.Candidate,fonduer.candidates.models.Mention,fonduer.candidates.models.span_mention.TemporarySpanMention]",
                    "int",
                    "str"
                ]
            }
        },
        "get_neighbor_sentence_ngrams": {
            "name": "get_neighbor_sentence_ngrams",
            "location": 196,
            "return": [
                "bool"
            ],
            "arguments": {
                "mention": [
                    "int",
                    "str",
                    "List[float]",
                    "bool",
                    "Union[fonduer.candidates.models.Candidate,fonduer.candidates.models.Mention,fonduer.candidates.models.span_mention.TemporarySpanMention]",
                    "utils.times.Seconds"
                ],
                "d": [
                    "int",
                    "str",
                    "bool",
                    "Union[fonduer.candidates.models.Candidate,fonduer.candidates.models.Mention,fonduer.candidates.models.span_mention.TemporarySpanMention]",
                    "utils.times.Seconds",
                    "List[float]"
                ],
                "attrib": [
                    "Text",
                    "int",
                    "str",
                    "bool",
                    "Union[fonduer.candidates.models.Candidate,fonduer.candidates.models.Mention,fonduer.candidates.models.span_mention.TemporarySpanMention]",
                    "utils.times.Seconds",
                    "List[float]"
                ],
                "n_min": [
                    "int",
                    "str",
                    "bool",
                    "Union[fonduer.candidates.models.Candidate,fonduer.candidates.models.Mention,fonduer.candidates.models.span_mention.TemporarySpanMention]",
                    "utils.times.Seconds",
                    "List[float]"
                ],
                "n_max": [
                    "int",
                    "str",
                    "bool",
                    "Union[fonduer.candidates.models.Candidate,fonduer.candidates.models.Mention,fonduer.candidates.models.span_mention.TemporarySpanMention]",
                    "utils.times.Seconds",
                    "List[float]"
                ],
                "lower": [
                    "bool",
                    "int",
                    "str",
                    "Union[fonduer.candidates.models.Candidate,fonduer.candidates.models.Mention,fonduer.candidates.models.span_mention.TemporarySpanMention]",
                    "utils.times.Seconds",
                    "List[float]"
                ]
            }
        },
        "get_cell_ngrams": {
            "name": "get_cell_ngrams",
            "location": 219,
            "return": [
                "Iterator[str]",
                "Generator"
            ],
            "arguments": {
                "mention": [
                    "int",
                    "str",
                    "Union[fonduer.candidates.models.Candidate,fonduer.candidates.models.Mention,fonduer.candidates.models.span_mention.TemporarySpanMention]",
                    "bool"
                ],
                "attrib": [
                    "Text",
                    "int",
                    "bool",
                    "str"
                ],
                "n_min": [
                    "int",
                    "bool",
                    "str"
                ],
                "n_max": [
                    "int",
                    "bool",
                    "str"
                ],
                "lower": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "get_neighbor_cell_ngrams": {
            "name": "get_neighbor_cell_ngrams",
            "location": 260,
            "return": [
                "Iterator[Union[str,Tuple[str,str]]]",
                "Generator",
                "Generator[tuple[Text]]"
            ],
            "arguments": {
                "mention": [
                    "int",
                    "Union[fonduer.candidates.models.Candidate,fonduer.candidates.models.Mention,fonduer.candidates.models.span_mention.TemporarySpanMention]",
                    "str",
                    "List[int]"
                ],
                "dist": [
                    "int",
                    "Dict[float,float]"
                ],
                "directions": [
                    "bool",
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "attrib": [
                    "Text",
                    "int",
                    "bool",
                    "str"
                ],
                "n_min": [
                    "int",
                    "bool",
                    "str"
                ],
                "n_max": [
                    "int",
                    "bool",
                    "str"
                ],
                "lower": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "get_row_ngrams": {
            "name": "get_row_ngrams",
            "location": 335,
            "return": [
                "Iterator[str]",
                "Generator"
            ],
            "arguments": {
                "mention": [
                    "str",
                    "int",
                    "Union[fonduer.candidates.models.Candidate,fonduer.candidates.models.Mention,fonduer.candidates.models.span_mention.TemporarySpanMention]",
                    "List[int]",
                    "bool"
                ],
                "attrib": [
                    "Text",
                    "int",
                    "str",
                    "List[int]",
                    "bool"
                ],
                "n_min": [
                    "int",
                    "str",
                    "List[int]",
                    "bool"
                ],
                "n_max": [
                    "int",
                    "str",
                    "List[int]",
                    "bool"
                ],
                "spread": [
                    "List[int]",
                    "int",
                    "str",
                    "bool"
                ],
                "lower": [
                    "bool",
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "get_col_ngrams": {
            "name": "get_col_ngrams",
            "location": 369,
            "return": [
                "Iterator[str]",
                "Generator"
            ],
            "arguments": {
                "mention": [
                    "int",
                    "str",
                    "Union[fonduer.candidates.models.Candidate,fonduer.candidates.models.Mention,fonduer.candidates.models.span_mention.TemporarySpanMention]",
                    "bool"
                ],
                "attrib": [
                    "Text",
                    "int",
                    "str",
                    "List[int]",
                    "bool"
                ],
                "n_min": [
                    "int",
                    "str",
                    "List[int]",
                    "bool"
                ],
                "n_max": [
                    "int",
                    "str",
                    "List[int]",
                    "bool"
                ],
                "spread": [
                    "List[int]",
                    "int",
                    "str",
                    "bool"
                ],
                "lower": [
                    "bool",
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "get_aligned_ngrams": {
            "name": "get_aligned_ngrams",
            "location": 403,
            "return": [
                "Iterator[str]",
                "Generator"
            ],
            "arguments": {
                "mention": [
                    "int",
                    "str",
                    "Union[fonduer.candidates.models.Candidate,fonduer.candidates.models.Mention,fonduer.candidates.models.span_mention.TemporarySpanMention]",
                    "bool"
                ],
                "attrib": [
                    "Text",
                    "int",
                    "List[int]",
                    "bool",
                    "str",
                    "List"
                ],
                "n_min": [
                    "int",
                    "List[int]",
                    "bool",
                    "str",
                    "List"
                ],
                "n_max": [
                    "int",
                    "List[int]",
                    "bool",
                    "str",
                    "List"
                ],
                "spread": [
                    "List[int]",
                    "int",
                    "bool",
                    "str",
                    "List"
                ],
                "lower": [
                    "bool",
                    "int",
                    "List[int]",
                    "str",
                    "List"
                ]
            }
        },
        "get_head_ngrams": {
            "name": "get_head_ngrams",
            "location": 437,
            "return": [
                "None",
                "Iterator[object]",
                "Generator",
                "bool",
                "Union[tuple,list]"
            ],
            "arguments": {
                "mention": [
                    "str",
                    "Union[fonduer.candidates.models.Candidate,fonduer.candidates.models.Mention,fonduer.candidates.models.span_mention.TemporarySpanMention]",
                    "List[int]",
                    "int"
                ],
                "axis": [
                    "Optional[str]",
                    "str",
                    "None",
                    "List[str]",
                    "Set[str]",
                    "Iterator[str]",
                    "Iterator",
                    "Optional[int]",
                    "int"
                ],
                "attrib": [
                    "Text",
                    "int",
                    "bool",
                    "str"
                ],
                "n_min": [
                    "int",
                    "bool",
                    "str"
                ],
                "n_max": [
                    "int",
                    "bool",
                    "str"
                ],
                "lower": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "_get_head_cell": {
            "name": "_get_head_cell",
            "location": 478,
            "return": [
                "None",
                "bool",
                "str",
                "Dict[Optional[str],Set[abilian.services.security.models.Role]]",
                "abilian.core.models.subjects.Principal"
            ],
            "arguments": {
                "root_cell": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "axis": [
                    "str",
                    "Container",
                    "models.Work",
                    "Container[T]"
                ]
            }
        },
        "_get_table_cells": {
            "name": "_get_table_cells",
            "location": 489,
            "return": [
                "List[C]",
                "str",
                "List[int]",
                "List",
                "int"
            ],
            "arguments": {
                "table": [
                    "float",
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "_get_axis_ngrams": {
            "name": "_get_axis_ngrams",
            "location": 509,
            "return": [
                "None",
                "Iterator[object]",
                "Generator",
                "bool",
                "Union[tuple,list]"
            ],
            "arguments": {
                "mention": [
                    "str",
                    "Union[fonduer.candidates.models.Candidate,fonduer.candidates.models.Mention,fonduer.candidates.models.span_mention.TemporarySpanMention]",
                    "List[int]",
                    "int"
                ],
                "axis": [
                    "str",
                    "Union[fonduer.candidates.models.Candidate,fonduer.candidates.models.Mention,fonduer.candidates.models.span_mention.TemporarySpanMention]",
                    "List[int]",
                    "int"
                ],
                "attrib": [
                    "Text",
                    "int",
                    "bool",
                    "str"
                ],
                "n_min": [
                    "int",
                    "bool",
                    "str"
                ],
                "n_max": [
                    "int",
                    "bool",
                    "str"
                ],
                "spread": [
                    "List[int]",
                    "Union[fonduer.candidates.models.Candidate,fonduer.candidates.models.Mention,fonduer.candidates.models.span_mention.TemporarySpanMention]",
                    "str",
                    "int"
                ],
                "lower": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "_get_aligned_cells": {
            "name": "_get_aligned_cells",
            "location": 537,
            "return": [
                "List",
                "str",
                "bool"
            ],
            "arguments": {
                "root_cell": [
                    "Sequence[str]",
                    "str",
                    "IO[Any]",
                    "IO"
                ],
                "axis": [
                    "Sequence[str]",
                    "str",
                    "IO[Any]",
                    "IO"
                ]
            }
        },
        "_get_aligned_sentences": {
            "name": "_get_aligned_sentences",
            "location": 546,
            "return": [
                "List",
                "str",
                "bool"
            ],
            "arguments": {
                "root_sentence": [
                    "Container",
                    "docker.models.containers.Container",
                    "T",
                    "Container[T]"
                ],
                "axis": [
                    "str",
                    "List[str]",
                    "Set"
                ],
                "spread": [
                    "List[int]",
                    "str",
                    "List[str]",
                    "Set"
                ]
            }
        },
        "_other_axis": {
            "name": "_other_axis",
            "location": 560,
            "return": [
                "Text",
                "str",
                "bool",
                "int",
                "Optional[zerver.models.Realm]"
            ],
            "arguments": {
                "axis": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/utils/data_model_utils/textual.py": {
        "same_sentence": {
            "name": "same_sentence",
            "location": 11,
            "return": [
                "bool",
                "str",
                "int",
                "Mapping[Any,Any]",
                "List[Dict[str,Any]]"
            ],
            "arguments": {
                "c": [
                    "fonduer.candidates.models.Candidate"
                ]
            }
        },
        "get_between_ngrams": {
            "name": "get_between_ngrams",
            "location": 23,
            "return": [
                "Iterator[str]",
                "Generator"
            ],
            "arguments": {
                "c": [
                    "int",
                    "float",
                    "BinaryIO"
                ],
                "attrib": [
                    "Text",
                    "int",
                    "str",
                    "bool",
                    "Dict[str,Tuple[str,str,Any]]",
                    "Dict[int,str]"
                ],
                "n_min": [
                    "int",
                    "str",
                    "bool",
                    "Dict[str,Tuple[str,str,Any]]",
                    "Dict[int,str]"
                ],
                "n_max": [
                    "int",
                    "str",
                    "bool",
                    "Dict[str,Tuple[str,str,Any]]",
                    "Dict[int,str]"
                ],
                "lower": [
                    "bool",
                    "int",
                    "str",
                    "Dict[str,Tuple[str,str,Any]]",
                    "Dict[int,str]"
                ]
            }
        },
        "get_left_ngrams": {
            "name": "get_left_ngrams",
            "location": 73,
            "return": [
                "Iterator[str]",
                "Generator"
            ],
            "arguments": {
                "mention": [
                    "str",
                    "int",
                    "Union[fonduer.candidates.models.Candidate,fonduer.candidates.models.Mention,fonduer.candidates.models.span_mention.TemporarySpanMention]",
                    "List[int]",
                    "bool"
                ],
                "window": [
                    "int",
                    "bool",
                    "str"
                ],
                "attrib": [
                    "Text",
                    "int",
                    "bool",
                    "str"
                ],
                "n_min": [
                    "int",
                    "bool",
                    "str"
                ],
                "n_max": [
                    "int",
                    "bool",
                    "str"
                ],
                "lower": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "get_right_ngrams": {
            "name": "get_right_ngrams",
            "location": 105,
            "return": [
                "Iterator[str]",
                "Generator"
            ],
            "arguments": {
                "mention": [
                    "int",
                    "Set[str]",
                    "bool"
                ],
                "window": [
                    "int",
                    "bool",
                    "str",
                    "Dict[str,int]"
                ],
                "attrib": [
                    "Text",
                    "int",
                    "bool",
                    "str",
                    "Dict[str,int]"
                ],
                "n_min": [
                    "int",
                    "bool",
                    "str",
                    "Dict[str,int]"
                ],
                "n_max": [
                    "int",
                    "bool",
                    "str",
                    "Dict[str,int]"
                ],
                "lower": [
                    "bool",
                    "int",
                    "str",
                    "Dict[str,int]"
                ]
            }
        },
        "get_sentence_ngrams": {
            "name": "get_sentence_ngrams",
            "location": 137,
            "return": [
                "Iterator[str]",
                "Generator"
            ],
            "arguments": {
                "mention": [
                    "int",
                    "str",
                    "Union[fonduer.candidates.models.Candidate,fonduer.candidates.models.Mention,fonduer.candidates.models.span_mention.TemporarySpanMention]",
                    "bool"
                ],
                "attrib": [
                    "Text",
                    "int",
                    "str",
                    "bool",
                    "Dict[int,str]"
                ],
                "n_min": [
                    "int",
                    "str",
                    "bool",
                    "Dict[int,str]"
                ],
                "n_max": [
                    "int",
                    "str",
                    "bool",
                    "Dict[int,str]"
                ],
                "lower": [
                    "bool",
                    "int",
                    "str",
                    "Dict[int,str]"
                ]
            }
        },
        "get_neighbor_sentence_ngrams": {
            "name": "get_neighbor_sentence_ngrams",
            "location": 167,
            "return": [
                "Iterator[str]",
                "Generator"
            ],
            "arguments": {
                "mention": [
                    "str",
                    "int",
                    "Union[fonduer.candidates.models.Candidate,fonduer.candidates.models.Mention,fonduer.candidates.models.span_mention.TemporarySpanMention]",
                    "List[int]",
                    "bool"
                ],
                "d": [
                    "int",
                    "str",
                    "bool"
                ],
                "attrib": [
                    "Text",
                    "int",
                    "str",
                    "bool"
                ],
                "n_min": [
                    "int",
                    "str",
                    "bool"
                ],
                "n_max": [
                    "int",
                    "str",
                    "bool"
                ],
                "lower": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/utils/data_model_utils/utils.py": {
        "_to_span": {
            "name": "_to_span",
            "location": 11,
            "return": [
                "TemporarySpanMention",
                "str",
                "List[int]",
                "int",
                "bool",
                "Union[str,bool,None]",
                "float"
            ],
            "arguments": {
                "x": [
                    "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]"
                ],
                "idx": [
                    "int",
                    "str",
                    "float",
                    "T"
                ]
            }
        },
        "_to_spans": {
            "name": "_to_spans",
            "location": 26,
            "return": [
                "List",
                "List[str]",
                "List[TemporarySpanMention]",
                "Optional[Union[str,Any]]",
                "Sequence[object]",
                "Tuple"
            ],
            "arguments": {
                "x": [
                    "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]"
                ]
            }
        },
        "is_superset": {
            "name": "is_superset",
            "location": 40,
            "return": [
                "bool",
                "str",
                "List[int]",
                "Type",
                "int",
                "Set[str]"
            ],
            "arguments": {
                "a": [
                    "str",
                    "Iterable",
                    "int"
                ],
                "b": [
                    "str",
                    "Iterable",
                    "int"
                ]
            }
        },
        "overlap": {
            "name": "overlap",
            "location": 52,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "a": [
                    "str",
                    "Iterable",
                    "Iterable[str]",
                    "Sequence[T]",
                    "bool"
                ],
                "b": [
                    "str",
                    "Iterable",
                    "Iterable[str]",
                    "Sequence[T]",
                    "bool"
                ]
            }
        },
        "get_matches": {
            "name": "get_matches",
            "location": 64,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "lf": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Tuple",
                    "Callable[...,None]",
                    "float",
                    "int"
                ],
                "candidate_set": [
                    "str",
                    "bool",
                    "Optional[Callable[,None]]"
                ],
                "match_values": [
                    "List[int]",
                    "List[str]",
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/utils/data_model_utils/visual.py": {
        "get_page": {
            "name": "get_page",
            "location": 23,
            "return": [
                "int",
                "raiden.utils.List[raiden.utils.Tuple[str, raiden.utils.Any]]",
                "bool",
                "zerver.models.Realm",
                "bytes"
            ],
            "arguments": {
                "mention": [
                    "str",
                    "bool"
                ]
            }
        },
        "is_horz_aligned": {
            "name": "is_horz_aligned",
            "location": 35,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "int",
                "grouper.models.group.Group",
                "Match",
                "Sequence",
                "Dict[str,Union[str,Set]]"
            ],
            "arguments": {
                "c": [
                    "fonduer.candidates.models.Candidate",
                    "list"
                ]
            }
        },
        "is_vert_aligned": {
            "name": "is_vert_aligned",
            "location": 53,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "int",
                "grouper.models.group.Group",
                "Match",
                "Sequence",
                "Dict[str,Union[str,Set]]"
            ],
            "arguments": {
                "c": [
                    "fonduer.candidates.models.Candidate",
                    "list"
                ]
            }
        },
        "is_vert_aligned_left": {
            "name": "is_vert_aligned_left",
            "location": 71,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "int",
                "grouper.models.group.Group",
                "Match",
                "Sequence",
                "Dict[str,Union[str,Set]]"
            ],
            "arguments": {
                "c": [
                    "fonduer.candidates.models.Candidate"
                ]
            }
        },
        "is_vert_aligned_right": {
            "name": "is_vert_aligned_right",
            "location": 93,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "int",
                "grouper.models.group.Group",
                "Match",
                "Sequence",
                "Dict[str,Union[str,Set]]"
            ],
            "arguments": {
                "c": [
                    "fonduer.candidates.models.Candidate"
                ]
            }
        },
        "is_vert_aligned_center": {
            "name": "is_vert_aligned_center",
            "location": 115,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "int",
                "grouper.models.group.Group",
                "Match",
                "Sequence",
                "Dict[str,Union[str,Set]]"
            ],
            "arguments": {
                "c": [
                    "fonduer.candidates.models.Candidate"
                ]
            }
        },
        "same_page": {
            "name": "same_page",
            "location": 137,
            "return": [
                "bool",
                "str",
                "int",
                "Mapping[Any,Any]",
                "List[Dict[str,Any]]"
            ],
            "arguments": {
                "c": [
                    "fonduer.candidates.models.Candidate",
                    "int",
                    "raiden.utils.FeeAmount"
                ]
            }
        },
        "get_horz_ngrams": {
            "name": "get_horz_ngrams",
            "location": 155,
            "return": [
                "Iterator[str]",
                "Generator"
            ],
            "arguments": {
                "mention": [
                    "int",
                    "str",
                    "Union[fonduer.candidates.models.Candidate,fonduer.candidates.models.Mention,fonduer.candidates.models.span_mention.TemporarySpanMention]",
                    "float",
                    "bool"
                ],
                "attrib": [
                    "Text",
                    "int",
                    "bool",
                    "str"
                ],
                "n_min": [
                    "int",
                    "bool",
                    "str"
                ],
                "n_max": [
                    "int",
                    "bool",
                    "str"
                ],
                "lower": [
                    "bool",
                    "int",
                    "str"
                ],
                "from_sentence": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "get_vert_ngrams": {
            "name": "get_vert_ngrams",
            "location": 187,
            "return": [
                "Iterator[str]",
                "Generator"
            ],
            "arguments": {
                "mention": [
                    "int",
                    "str",
                    "Union[fonduer.candidates.models.Candidate,fonduer.candidates.models.Mention,fonduer.candidates.models.span_mention.TemporarySpanMention]",
                    "float",
                    "bool"
                ],
                "attrib": [
                    "Text",
                    "int",
                    "bool",
                    "str"
                ],
                "n_min": [
                    "int",
                    "bool",
                    "str"
                ],
                "n_max": [
                    "int",
                    "bool",
                    "str"
                ],
                "lower": [
                    "bool",
                    "int",
                    "str"
                ],
                "from_sentence": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "_get_direction_ngrams": {
            "name": "_get_direction_ngrams",
            "location": 219,
            "return": [
                "Iterator[str]",
                "Generator"
            ],
            "arguments": {
                "direction": [
                    "str",
                    "int",
                    "float",
                    "Tuple",
                    "Union[fonduer.candidates.models.Candidate,fonduer.candidates.models.Mention,fonduer.candidates.models.span_mention.TemporarySpanMention]",
                    "bool"
                ],
                "c": [
                    "str",
                    "int",
                    "float",
                    "Tuple",
                    "Union[fonduer.candidates.models.Candidate,fonduer.candidates.models.Mention,fonduer.candidates.models.span_mention.TemporarySpanMention]",
                    "bool"
                ],
                "attrib": [
                    "int",
                    "str",
                    "bytes",
                    "Callable",
                    "bool"
                ],
                "n_min": [
                    "int",
                    "str",
                    "bytes",
                    "Callable",
                    "bool"
                ],
                "n_max": [
                    "int",
                    "List[str]"
                ],
                "lower": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "from_sentence": [
                    "bool",
                    "None",
                    "Optional[int]",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]",
                    "int"
                ]
            }
        },
        "get_vert_ngrams_left": {
            "name": "get_vert_ngrams_left",
            "location": 260,
            "return": [
                "None",
                "Iterator[object]",
                "bool",
                "Union[tuple,list]"
            ],
            "arguments": {
                "c": [
                    "bool",
                    "List[str]",
                    "str",
                    "Union[List[str],str]"
                ]
            }
        },
        "get_vert_ngrams_right": {
            "name": "get_vert_ngrams_right",
            "location": 266,
            "return": [
                "None",
                "Iterator[object]",
                "bool",
                "Union[tuple,list]"
            ],
            "arguments": {
                "c": [
                    "bool",
                    "List[str]",
                    "str",
                    "Union[List[str],str]"
                ]
            }
        },
        "get_vert_ngrams_center": {
            "name": "get_vert_ngrams_center",
            "location": 272,
            "return": [
                "None",
                "Iterator[object]",
                "bool",
                "Union[tuple,list]"
            ],
            "arguments": {
                "c": [
                    "bool",
                    "List[str]",
                    "str",
                    "Union[List[str],str]"
                ]
            }
        },
        "get_visual_header_ngrams": {
            "name": "get_visual_header_ngrams",
            "location": 278,
            "return": [
                "None",
                "int",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.Item"
            ],
            "arguments": {
                "c": [
                    "bool",
                    "List[Union[str,int]]",
                    "str"
                ],
                "axis": [
                    "bool",
                    "List[Union[str,int]]",
                    "None",
                    "str"
                ]
            }
        },
        "get_visual_distance": {
            "name": "get_visual_distance",
            "location": 284,
            "return": [
                "None",
                "Iterator[object]",
                "bool",
                "Union[tuple,list]"
            ],
            "arguments": {
                "c": [
                    "bool",
                    "List[str]",
                    "str",
                    "Union[List[str],str]"
                ],
                "axis": [
                    "bool",
                    "None",
                    "List[str]",
                    "str",
                    "Union[List[str],str]"
                ]
            }
        },
        "get_page_vert_percentile": {
            "name": "get_page_vert_percentile",
            "location": 295,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "mention": [
                    "int",
                    "str",
                    "Union[fonduer.candidates.models.Candidate,fonduer.candidates.models.Mention,fonduer.candidates.models.span_mention.TemporarySpanMention]",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "page_width": [
                    "int",
                    "bool",
                    "models.Taxonomy.Id"
                ],
                "page_height": [
                    "int",
                    "str",
                    "Union[str,int]",
                    "Iterable[str]"
                ]
            }
        },
        "get_page_horz_percentile": {
            "name": "get_page_horz_percentile",
            "location": 340,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "mention": [
                    "int",
                    "str",
                    "Union[fonduer.candidates.models.Candidate,fonduer.candidates.models.Mention,fonduer.candidates.models.span_mention.TemporarySpanMention]",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "page_width": [
                    "int",
                    "str",
                    "float"
                ],
                "page_height": [
                    "int",
                    "bool",
                    "models.Taxonomy.Id"
                ]
            }
        },
        "_assign_alignment_features": {
            "name": "_assign_alignment_features",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "sentences_by_key": [
                    "Dict[str,str]",
                    "Dict",
                    "defaultdict",
                    "str"
                ],
                "align_type": [
                    "str",
                    "List[tuple[Union[str,str]]]",
                    "bool",
                    "List[Tuple[str,str]]",
                    "Dict"
                ]
            }
        },
        "_preprocess_visual_features": {
            "name": "_preprocess_visual_features",
            "location": 399,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "doc": [
                    "float",
                    "int",
                    "fonduer.parser.models.Document"
                ]
            }
        },
        "get_visual_aligned_lemmas": {
            "name": "get_visual_aligned_lemmas",
            "location": 441,
            "return": [
                "Iterator[str]",
                "Generator"
            ],
            "arguments": {
                "mention": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_aligned_lemmas": {
            "name": "get_aligned_lemmas",
            "location": 461,
            "return": [
                "Set",
                "str",
                "core_lib.core.models.Venue"
            ],
            "arguments": {
                "mention": [
                    "str",
                    "float",
                    "Union[fonduer.candidates.models.Candidate,fonduer.candidates.models.Mention,fonduer.candidates.models.span_mention.TemporarySpanMention]",
                    "salon.models.Stylist"
                ]
            }
        }
    },
    "fonduer-master/src/fonduer/utils/data_model_utils/__init__.py": {},
    "fonduer-master/src/fonduer/utils/logging/tensorboard_writer.py": {
        "TensorBoardLogger.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log_dir": [
                    "str",
                    "List[int]"
                ]
            }
        },
        "TensorBoardLogger.add_scalar": {
            "name": "add_scalar",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "float",
                    "str",
                    "int"
                ],
                "value": [
                    "float",
                    "str",
                    "int"
                ],
                "step": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "TensorBoardLogger.close": {
            "name": "close",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fonduer-master/src/fonduer/utils/logging/__init__.py": {},
    "fonduer-master/src/fonduer/utils/models/annotation.py": {
        "AnnotationKeyMixin.__tablename__": {
            "name": "__tablename__",
            "location": 22,
            "return": [
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str,Any]",
                    "str",
                    "bool",
                    "Dict",
                    "Track"
                ]
            }
        },
        "AnnotationKeyMixin.name": {
            "name": "name",
            "location": 27,
            "return": [
                "Column",
                "Tuple[str]",
                "bool",
                "str",
                "Tuple[str,List[str]]",
                "Optional[bool]",
                "Optional[Any]"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "str",
                    "Type[Any]",
                    "Callable",
                    "bool",
                    "int"
                ]
            }
        },
        "AnnotationKeyMixin.candidate_classes": {
            "name": "candidate_classes",
            "location": 32,
            "return": [
                "Column",
                "str",
                "Iterable[str]",
                "List",
                "Type"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Callable[...,T]",
                    "Type",
                    "Type[T]"
                ]
            }
        },
        "AnnotationKeyMixin.__table_args__": {
            "name": "__table_args__",
            "location": 37,
            "return": [
                "str",
                "Tuple[UniqueConstraint]"
            ],
            "arguments": {
                "cls": [
                    "Iterable",
                    "Type",
                    "T",
                    "Type[T]"
                ]
            }
        },
        "AnnotationKeyMixin.__repr__": {
            "name": "__repr__",
            "location": 41,
            "return": [
                "Text",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnnotationMixin.__tablename__": {
            "name": "__tablename__",
            "location": 68,
            "return": [
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str,Any]",
                    "str",
                    "bool",
                    "Dict",
                    "Track"
                ]
            }
        },
        "AnnotationMixin.keys": {
            "name": "keys",
            "location": 75,
            "return": [
                "Column",
                "bool",
                "str",
                "Point",
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "AnnotationMixin.candidate_id": {
            "name": "candidate_id",
            "location": 81,
            "return": [
                "Column",
                "str",
                "Union[str,int]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[dict]",
                    "bool",
                    "Dict",
                    "sqlalchemy.engine.reflection.Inspector"
                ]
            }
        },
        "AnnotationMixin.candidate": {
            "name": "candidate",
            "location": 91,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "int",
                "List[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "Dict[str,Iterable[Any]]",
                    "Type",
                    "Optional[int]",
                    "int",
                    "bool",
                    "None"
                ]
            }
        },
        "AnnotationMixin.__repr__": {
            "name": "__repr__",
            "location": 103,
            "return": [
                "Text",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fonduer-master/src/fonduer/utils/models/__init__.py": {},
    "fonduer-master/tests/conftest.py": {
        "database_session": {
            "name": "database_session",
            "location": 25,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "fonduer-master/tests/test_meta.py": {
        "test_meta_connection_strings": {
            "name": "test_meta_connection_strings",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "database_session": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_subclass_before_meta_init": {
            "name": "test_subclass_before_meta_init",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fonduer-master/tests/test_postgres.py": {
        "test_preprocessor_parse_file_called_once": {
            "name": "test_preprocessor_parse_file_called_once",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "database_session": [
                    "str",
                    "bool",
                    "Callable",
                    "float"
                ],
                "mocker": [
                    "str",
                    "bool",
                    "Callable",
                    "float"
                ]
            }
        },
        "test_cand_gen_cascading_delete": {
            "name": "test_cand_gen_cascading_delete",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "database_session": [
                    "bytes",
                    "str",
                    "Hashable",
                    "int"
                ]
            }
        },
        "test_too_many_clients_error_should_not_happen": {
            "name": "test_too_many_clients_error_should_not_happen",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "database_session": [
                    "bytes",
                    "str",
                    "Hashable"
                ]
            }
        },
        "test_parse_error_doc_skipping": {
            "name": "test_parse_error_doc_skipping",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "database_session": [
                    "str",
                    "int",
                    "Hashable"
                ]
            }
        },
        "test_too_many_clients_error_should_not_happen.do_nothing_matcher": {
            "name": "do_nothing_matcher",
            "location": 139,
            "return": [
                "bool"
            ],
            "arguments": {
                "fig": [
                    "bool",
                    "int",
                    "set"
                ]
            }
        }
    },
    "fonduer-master/tests/__init__.py": {},
    "fonduer-master/tests/candidates/test_candidates.py": {
        "parse_doc": {
            "name": "parse_doc",
            "location": 46,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "docs_path": [
                    "int",
                    "str",
                    "raiden.utils.Address"
                ],
                "file_name": [
                    "str",
                    "bool"
                ],
                "pdf_path": [
                    "str",
                    "None",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "test_ngram_split": {
            "name": "test_ngram_split",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_span_char_start_and_char_end": {
            "name": "test_span_char_start_and_char_end",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cand_gen": {
            "name": "test_cand_gen",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ngrams": {
            "name": "test_ngrams",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_row_col_ngram_extraction": {
            "name": "test_row_col_ngram_extraction",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mention_longest_match": {
            "name": "test_mention_longest_match",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_multimodal_cand": {
            "name": "test_multimodal_cand",
            "location": 452,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pickle_subclasses": {
            "name": "test_pickle_subclasses",
            "location": 527,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_candidate_with_nullable_mentions": {
            "name": "test_candidate_with_nullable_mentions",
            "location": 547,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cand_gen.do_nothing_matcher": {
            "name": "do_nothing_matcher",
            "location": 211,
            "return": [
                "bool"
            ],
            "arguments": {
                "fig": [
                    "bool",
                    "List[cmk.utils.type_defs.HostName]",
                    "int",
                    "set"
                ]
            }
        },
        "test_row_col_ngram_extraction.get_row_and_column_ngrams": {
            "name": "get_row_and_column_ngrams",
            "location": 373,
            "return": [
                "bool"
            ],
            "arguments": {
                "mention": [
                    "Iterable[T]",
                    "django.db.models.Model",
                    "bool",
                    "str",
                    "IO"
                ]
            }
        },
        "test_mention_longest_match.is_birthplace_table_row": {
            "name": "is_birthplace_table_row",
            "location": 408,
            "return": [
                "bool"
            ],
            "arguments": {
                "mention": [
                    "str",
                    "int",
                    "raiden.utils.Any"
                ]
            }
        }
    },
    "fonduer-master/tests/candidates/test_matchers.py": {
        "doc_setup": {
            "name": "doc_setup",
            "location": 31,
            "return": [
                "Document",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "test_union": {
            "name": "test_union",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "doc_setup": [
                    "str",
                    "float",
                    "tests.async_mock.Mock"
                ]
            }
        },
        "test_intersect": {
            "name": "test_intersect",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "doc_setup": [
                    "str",
                    "float",
                    "tests.async_mock.Mock"
                ]
            }
        },
        "test_inverse": {
            "name": "test_inverse",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "doc_setup": [
                    "str",
                    "float",
                    "tests.async_mock.Mock"
                ]
            }
        },
        "test_cancat": {
            "name": "test_cancat",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "doc_setup": [
                    "str",
                    "float",
                    "tests.async_mock.Mock"
                ]
            }
        },
        "test_dictionary_match": {
            "name": "test_dictionary_match",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "doc_setup": []
            }
        },
        "test_do_not_use_stemmer_when_UnicodeDecodeError": {
            "name": "test_do_not_use_stemmer_when_UnicodeDecodeError",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_lambda_function_matcher": {
            "name": "test_lambda_function_matcher",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "doc_setup": [
                    "Type"
                ]
            }
        },
        "test_regex_match": {
            "name": "test_regex_match",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "doc_setup": []
            }
        },
        "test_ner_matchers": {
            "name": "test_ner_matchers",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_figure_matcher": {
            "name": "test_figure_matcher",
            "location": 400,
            "return": [
                "None"
            ],
            "arguments": {
                "doc_setup": [
                    "str",
                    "float",
                    "tests.async_mock.Mock"
                ]
            }
        }
    },
    "fonduer-master/tests/candidates/__init__.py": {},
    "fonduer-master/tests/e2e/test_e2e.py": {
        "test_e2e": {
            "name": "test_e2e",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "database_session": [
                    "str",
                    "Set[str]",
                    "int",
                    "List[str]"
                ]
            }
        }
    },
    "fonduer-master/tests/e2e/test_incremental.py": {
        "test_incremental": {
            "name": "test_incremental",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "database_session": [
                    "bool",
                    "List[list[int]]",
                    "int",
                    "List[List[int]]"
                ]
            }
        },
        "test_incremental.LF_storage_row_updated": {
            "name": "LF_storage_row_updated",
            "location": 191,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "c": [
                    "bool",
                    "list",
                    "List[str]",
                    "IO",
                    "dict"
                ]
            }
        }
    },
    "fonduer-master/tests/e2e/__init__.py": {},
    "fonduer-master/tests/features/test_features.py": {
        "test_unary_relation_feature_extraction": {
            "name": "test_unary_relation_feature_extraction",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_binary_relation_feature_extraction": {
            "name": "test_binary_relation_feature_extraction",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_multinary_relation_feature_extraction": {
            "name": "test_multinary_relation_feature_extraction",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_binary_relation_feature_extraction.feat_ext": {
            "name": "feat_ext",
            "location": 160,
            "return": [
                "typing.Generator[tuple[typing.Union[typing.Text,int]]]"
            ],
            "arguments": {
                "candidates": []
            }
        },
        "test_binary_relation_feature_extraction.bad_feat_ext": {
            "name": "bad_feat_ext",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "candidates": []
            }
        },
        "test_multinary_relation_feature_extraction.feat_ext": {
            "name": "feat_ext",
            "location": 301,
            "return": [
                "typing.Generator[tuple[typing.Union[typing.Text,int]]]"
            ],
            "arguments": {
                "candidates": [
                    "Callable",
                    "Iterable",
                    "List[magic.models.Deck]",
                    "Dict[str, Any]",
                    "Type"
                ]
            }
        },
        "test_multinary_relation_feature_extraction.bad_feat_ext": {
            "name": "bad_feat_ext",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "candidates": [
                    "int",
                    "bool",
                    "List[\"Name\"]",
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        }
    },
    "fonduer-master/tests/features/__init__.py": {},
    "fonduer-master/tests/learning/test_utils.py": {
        "test_confusion_matrix": {
            "name": "test_confusion_matrix",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fonduer-master/tests/learning/__init__.py": {},
    "fonduer-master/tests/packaging/test_fonduer_model.py": {
        "setup_common_components": {
            "name": "setup_common_components",
            "location": 47,
            "return": [
                "Dict[Text,Union[HTMLDocPreprocessor,Parser,MentionExtractor,CandidateExtractor]]",
                "str",
                "Tuple",
                "Callable[,None]"
            ],
            "arguments": {}
        },
        "test_convert_features_to_matrix": {
            "name": "test_convert_features_to_matrix",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_convert_features_to_matrix_limited_keys": {
            "name": "test_convert_features_to_matrix_limited_keys",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_convert_labels_to_matrix": {
            "name": "test_convert_labels_to_matrix",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_save_subclasses": {
            "name": "test_save_subclasses",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_subclasses": {
            "name": "test_load_subclasses",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_save_model": {
            "name": "test_save_model",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path"
                ],
                "setup_common_components": [
                    "pathlib.Path"
                ]
            }
        },
        "test_load_model": {
            "name": "test_load_model",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "test_save_label_model": {
            "name": "test_save_label_model",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "pathlib.Path",
                    "List[str]",
                    "Callable[Any,None]",
                    "Optional[Callable[[Any],None]]",
                    "None"
                ],
                "setup_common_components": [
                    "pathlib.Path"
                ]
            }
        },
        "test_load_label_model": {
            "name": "test_load_label_model",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "test_save_with_conda_yaml": {
            "name": "test_save_with_conda_yaml",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path",
                    "str",
                    "zerver.models.Realm"
                ],
                "setup_common_components": [
                    "pathlib.Path"
                ]
            }
        },
        "test_predict": {
            "name": "test_predict",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "setup_common_components": [
                    "str",
                    "float",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.Mock"
                ]
            }
        }
    },
    "fonduer-master/tests/packaging/__init__.py": {},
    "fonduer-master/tests/parser/test_parser.py": {
        "get_parser_udf": {
            "name": "get_parser_udf",
            "location": 23,
            "return": [
                "ParserUDF"
            ],
            "arguments": {
                "structural": [
                    "bool"
                ],
                "blacklist": [
                    "list[typing.Text]"
                ],
                "flatten": [
                    "list[typing.Text]"
                ],
                "language": [
                    "typing.Text"
                ],
                "lingual": [
                    "bool"
                ],
                "lingual_parser": [
                    "None"
                ],
                "strip": [
                    "bool"
                ],
                "replacements": [
                    "list[tuple[typing.Text]]"
                ],
                "tabular": [
                    "bool"
                ],
                "visual": [
                    "bool"
                ],
                "visual_parser": [
                    "None"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 53,
            "return": [],
            "arguments": {
                "session": [],
                "docs_path": [],
                "pdf_path": []
            }
        },
        "test_parse_md_details": {
            "name": "test_parse_md_details",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_wo_tabular": {
            "name": "test_parse_wo_tabular",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_spacy_german": {
            "name": "test_spacy_german",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_spacy_japanese": {
            "name": "test_spacy_japanese",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_spacy_chinese": {
            "name": "test_spacy_chinese",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_warning_on_missing_pdf": {
            "name": "test_warning_on_missing_pdf",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_warning_on_incorrect_filename": {
            "name": "test_warning_on_incorrect_filename",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_md_paragraphs": {
            "name": "test_parse_md_paragraphs",
            "location": 394,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_simple_parser": {
            "name": "test_simple_parser",
            "location": 482,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_custom_parser": {
            "name": "test_custom_parser",
            "location": 526,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_table_span": {
            "name": "test_parse_table_span",
            "location": 537,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_document_diseases": {
            "name": "test_parse_document_diseases",
            "location": 561,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_style": {
            "name": "test_parse_style",
            "location": 637,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_error_doc_skipping": {
            "name": "test_parse_error_doc_skipping",
            "location": 683,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_multi_sections": {
            "name": "test_parse_multi_sections",
            "location": 703,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_text_doc_preprocessor": {
            "name": "test_text_doc_preprocessor",
            "location": 730,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tsv_doc_preprocessor": {
            "name": "test_tsv_doc_preprocessor",
            "location": 747,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_csv_doc_preprocessor": {
            "name": "test_csv_doc_preprocessor",
            "location": 769,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parser_skips_and_flattens": {
            "name": "test_parser_skips_and_flattens",
            "location": 790,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parser_no_image": {
            "name": "test_parser_no_image",
            "location": 842,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_various_dir_path_formats": {
            "name": "test_various_dir_path_formats",
            "location": 876,
            "return": [
                "None"
            ],
            "arguments": {
                "database_session": [],
                "docs_path": [],
                "pdf_path": []
            }
        },
        "test_various_pdf_path_formats": {
            "name": "test_various_pdf_path_formats",
            "location": 897,
            "return": [
                "None"
            ],
            "arguments": {
                "database_session": [],
                "pdf_path": []
            }
        },
        "test_parse_hocr": {
            "name": "test_parse_hocr",
            "location": 906,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_hocr_with_tables": {
            "name": "test_parse_hocr_with_tables",
            "location": 965,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fonduer-master/tests/parser/test_preprocessor.py": {
        "test_hocrpreprocessor": {
            "name": "test_hocrpreprocessor",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_hocrpreprocessor_space_false": {
            "name": "test_hocrpreprocessor_space_false",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fonduer-master/tests/parser/test_simple_parser.py": {
        "test_simple_parser_support": {
            "name": "test_simple_parser_support",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_simple_split_sentences": {
            "name": "test_simple_split_sentences",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fonduer-master/tests/parser/test_spacy_parser.py": {
        "test_spacy_support": {
            "name": "test_spacy_support",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_spacy_split_sentences": {
            "name": "test_spacy_split_sentences",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_split_sentences_by_char_limit": {
            "name": "test_split_sentences_by_char_limit",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fonduer-master/tests/parser/test_visual_linker.py": {
        "test_visual_parser_not_affected_by_order_of_sentences": {
            "name": "test_visual_parser_not_affected_by_order_of_sentences",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_non_existent_pdf_path_should_fail": {
            "name": "test_non_existent_pdf_path_should_fail",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pdf_word_list_is_sorted": {
            "name": "test_pdf_word_list_is_sorted",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fonduer-master/tests/parser/__init__.py": {},
    "fonduer-master/tests/shared/hardware_fonduer_model.py": {
        "HardwareFonduerModel._classify": {
            "name": "_classify",
            "location": 20,
            "return": [
                "DataFrame",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "Optional[Dict]",
                    "int",
                    "Dict",
                    "None"
                ]
            }
        }
    },
    "fonduer-master/tests/shared/hardware_lfs.py": {
        "LF_storage_row": {
            "name": "LF_storage_row",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "c": [
                    "Callable",
                    "T",
                    "raiden.utils.FeeAmount",
                    "Callable[...,T]",
                    "Callable[,Any]"
                ]
            }
        },
        "LF_temperature_row": {
            "name": "LF_temperature_row",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "c": [
                    "Callable",
                    "T",
                    "raiden.utils.FeeAmount",
                    "Callable[...,T]",
                    "Callable[,Any]"
                ]
            }
        },
        "LF_operating_row": {
            "name": "LF_operating_row",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "c": [
                    "Callable",
                    "T",
                    "raiden.utils.FeeAmount",
                    "Callable[...,T]",
                    "Callable[,Any]"
                ]
            }
        },
        "LF_tstg_row": {
            "name": "LF_tstg_row",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "c": [
                    "str",
                    "Dict",
                    "List[str]",
                    "Union[str,IO[str]]",
                    "IO"
                ]
            }
        },
        "LF_to_left": {
            "name": "LF_to_left",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "c": [
                    "int",
                    "bool"
                ]
            }
        },
        "LF_negative_number_left": {
            "name": "LF_negative_number_left",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "c": [
                    "str",
                    "Dict[str,Any]",
                    "T",
                    "rotkehlchen.chain.ethereum.makerdao.vaults.MakerDAOVault"
                ]
            }
        },
        "LF_test_condition_aligned": {
            "name": "LF_test_condition_aligned",
            "location": 54,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "c": [
                    "List[str]",
                    "Callable",
                    "List",
                    "Dict[str,Any]"
                ]
            }
        },
        "LF_collector_aligned": {
            "name": "LF_collector_aligned",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "c": [
                    "str",
                    "Optional[Union[str,Any]]",
                    "Any",
                    "fonduer.candidates.models.Candidate",
                    "None"
                ]
            }
        },
        "LF_current_aligned": {
            "name": "LF_current_aligned",
            "location": 75,
            "return": [
                "bool"
            ],
            "arguments": {
                "c": [
                    "str",
                    "Optional[Union[str,Any]]",
                    "Any",
                    "fonduer.candidates.models.Candidate",
                    "None"
                ]
            }
        },
        "LF_voltage_row_temp": {
            "name": "LF_voltage_row_temp",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {
                "c": [
                    "Optional[Union[str,Any]]",
                    "str",
                    "Any",
                    "None"
                ]
            }
        },
        "LF_voltage_row_part": {
            "name": "LF_voltage_row_part",
            "location": 95,
            "return": [
                "bool"
            ],
            "arguments": {
                "c": [
                    "str",
                    "bool",
                    "List[int]",
                    "Dict",
                    "int"
                ]
            }
        },
        "LF_typ_row": {
            "name": "LF_typ_row",
            "location": 106,
            "return": [
                "bool"
            ],
            "arguments": {
                "c": [
                    "str",
                    "Dict",
                    "List[str]",
                    "Union[str,IO[str]]",
                    "IO"
                ]
            }
        },
        "LF_complement_left_row": {
            "name": "LF_complement_left_row",
            "location": 111,
            "return": [
                "bool"
            ],
            "arguments": {
                "c": [
                    "Optional[Awaitable[None]]",
                    "collections.abc.Awaitable[None]",
                    "Callable",
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "LF_too_many_numbers_row": {
            "name": "LF_too_many_numbers_row",
            "location": 127,
            "return": [
                "bool"
            ],
            "arguments": {
                "c": [
                    "str",
                    "List",
                    "Union[str,IO[str]]",
                    "Dict",
                    "IO",
                    "List[str]"
                ]
            }
        },
        "LF_temp_on_high_page_num": {
            "name": "LF_temp_on_high_page_num",
            "location": 133,
            "return": [
                "bool"
            ],
            "arguments": {
                "c": [
                    "List",
                    "Dict[str,Any]",
                    "List[Tuple[float,str]]",
                    "List[tuple[Union[float,str]]]"
                ]
            }
        },
        "LF_temp_outside_table": {
            "name": "LF_temp_outside_table",
            "location": 138,
            "return": [
                "bool"
            ],
            "arguments": {
                "c": [
                    "List[str]"
                ]
            }
        },
        "LF_not_temp_relevant": {
            "name": "LF_not_temp_relevant",
            "location": 143,
            "return": [
                "bool"
            ],
            "arguments": {
                "c": [
                    "str",
                    "Optional[Union[str,Any]]",
                    "Any",
                    "fonduer.candidates.models.Candidate",
                    "None"
                ]
            }
        },
        "LF_bad_keywords_in_row": {
            "name": "LF_bad_keywords_in_row",
            "location": 158,
            "return": [
                "bool"
            ],
            "arguments": {
                "c": [
                    "Callable",
                    "bool",
                    "Callable[...,None]"
                ]
            }
        },
        "LF_current_in_row": {
            "name": "LF_current_in_row",
            "location": 169,
            "return": [
                "bool"
            ],
            "arguments": {
                "c": [
                    "Callable",
                    "bool",
                    "Callable[...,None]"
                ]
            }
        },
        "LF_non_ce_voltages_in_row": {
            "name": "LF_non_ce_voltages_in_row",
            "location": 195,
            "return": [
                "bool"
            ],
            "arguments": {
                "c": [
                    "int",
                    "str",
                    "bytes",
                    "AsyncGenerator",
                    "collections.abc.AsyncGenerator"
                ]
            }
        }
    },
    "fonduer-master/tests/shared/hardware_matchers.py": {
        "get_digikey_parts_set": {
            "name": "get_digikey_parts_set",
            "location": 32,
            "return": [
                "Set",
                "str",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "common_prefix_length_diff": {
            "name": "common_prefix_length_diff",
            "location": 48,
            "return": [
                "int",
                "str",
                "Union[str,List[str]]",
                "bytes"
            ],
            "arguments": {
                "str1": [
                    "List[str]",
                    "str",
                    "Final"
                ],
                "str2": [
                    "List[str]",
                    "str",
                    "Final"
                ]
            }
        },
        "part_file_name_conditions": {
            "name": "part_file_name_conditions",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "attr": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ce_v_max_conditions": {
            "name": "ce_v_max_conditions",
            "location": 86,
            "return": [
                "str",
                "Optional[int]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "attr": [
                    "str"
                ]
            }
        },
        "ce_v_max_more_conditions1": {
            "name": "ce_v_max_more_conditions1",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "attr": [
                    "Dict",
                    "str",
                    "raiden.utils.ChannelMap"
                ]
            }
        },
        "ce_v_max_more_conditions": {
            "name": "ce_v_max_more_conditions",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "attr": [
                    "str",
                    "Dict",
                    "int",
                    "Callable",
                    "Optional[Callable]",
                    "None",
                    "raiden.utils.ChannelMap"
                ]
            }
        },
        "attr_in_table": {
            "name": "attr_in_table",
            "location": 133,
            "return": [
                "str"
            ],
            "arguments": {
                "attr": [
                    "str",
                    "bool",
                    "Dict",
                    "Optional[str]",
                    "None",
                    "Union[str,List[str]]",
                    "List[str]"
                ]
            }
        }
    },
    "fonduer-master/tests/shared/hardware_spaces.py": {
        "expand_part_range": {
            "name": "expand_part_range",
            "location": 13,
            "return": [],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "atoi": {
            "name": "atoi",
            "location": 149,
            "return": [
                "int",
                "None",
                "Optional[List[Any]]",
                "str",
                "Callable[[Any],bool]",
                "Optional[bool]"
            ],
            "arguments": {
                "num_str": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "char_range": {
            "name": "char_range",
            "location": 158,
            "return": [
                "typing.Generator[str]"
            ],
            "arguments": {
                "a": [
                    "str",
                    "Optional[str]",
                    "List",
                    "int",
                    "float"
                ],
                "b": [
                    "str",
                    "Optional[str]",
                    "List",
                    "int",
                    "float"
                ]
            }
        },
        "MentionNgramsPart.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parts_by_doc": [
                    "bool",
                    "None",
                    "List[Dict]",
                    "float",
                    "str",
                    "List[dict]",
                    "int",
                    "Union[float,int]",
                    "List[list[int]]",
                    "Optional[int]",
                    "List[List[int]]"
                ],
                "n_max": [
                    "int",
                    "Optional[int]",
                    "float",
                    "bool"
                ],
                "expand": [
                    "bool",
                    "int",
                    "float"
                ],
                "split_tokens": [
                    "List[Text]",
                    "int",
                    "Optional[int]",
                    "float",
                    "bool"
                ]
            }
        },
        "MentionNgramsPart.apply": {
            "name": "apply",
            "location": 179,
            "return": [
                "typing.Generator[]",
                "typing.Generator[TemporaryImplicitSpanMention]"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "int",
                    "Callable",
                    "str",
                    "models.Question"
                ]
            }
        },
        "MentionNgramsTemp.__init__": {
            "name": "__init__",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_max": [
                    "int",
                    "List[int]",
                    "Units",
                    "Optional[str]",
                    "float"
                ],
                "split_tokens": [
                    "List[Text]",
                    "int",
                    "List[int]",
                    "Units",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "MentionNgramsTemp.apply": {
            "name": "apply",
            "location": 237,
            "return": [
                "typing.Generator[TemporaryImplicitSpanMention]",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "int",
                    "Callable",
                    "str",
                    "models.Question"
                ]
            }
        },
        "MentionNgramsVolt.__init__": {
            "name": "__init__",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_max": [
                    "int",
                    "List[int]",
                    "Units",
                    "Optional[str]",
                    "float"
                ],
                "split_tokens": [
                    "List[Text]",
                    "int",
                    "List[int]",
                    "Units",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "MentionNgramsVolt.apply": {
            "name": "apply",
            "location": 300,
            "return": [
                "typing.Generator[TemporaryImplicitSpanMention]",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "int",
                    "Callable",
                    "str",
                    "models.Question"
                ]
            }
        }
    },
    "fonduer-master/tests/shared/hardware_subclasses.py": {},
    "fonduer-master/tests/shared/hardware_throttlers.py": {
        "temp_throttler": {
            "name": "temp_throttler",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "c": [
                    "str",
                    "int",
                    "Dict",
                    "raiden.utils.Address"
                ]
            }
        },
        "filter_non_parts": {
            "name": "filter_non_parts",
            "location": 22,
            "return": [
                "Set",
                "List[str]",
                "Dict[str,Any]",
                "Tuple"
            ],
            "arguments": {
                "c": [
                    "str",
                    "int"
                ]
            }
        },
        "LF_part_miss_match": {
            "name": "LF_part_miss_match",
            "location": 32,
            "return": [
                "int",
                "Optional[int]",
                "str",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "c": [
                    "Tuple",
                    "List",
                    "List[dict]",
                    "List[float]",
                    "Dict"
                ]
            }
        },
        "volt_throttler": {
            "name": "volt_throttler",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "c": [
                    "str",
                    "int",
                    "Dict",
                    "raiden.utils.Address"
                ]
            }
        }
    },
    "fonduer-master/tests/shared/hardware_utils.py": {
        "get_gold_dict": {
            "name": "get_gold_dict",
            "location": 28,
            "return": [
                "Set[tuple]",
                "int",
                "Dict[str,models.DeviceRow]",
                "Dict[str,Any]",
                "Dict[str,Dict[str,Any]]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "doc_on": [
                    "bool",
                    "str",
                    "IO",
                    "List[str]"
                ],
                "part_on": [
                    "bool",
                    "str",
                    "IO",
                    "List[str]"
                ],
                "val_on": [
                    "bool",
                    "str",
                    "IO",
                    "List[str]"
                ],
                "attribute": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]",
                    "List[str]",
                    "Optional[List[str]]",
                    "django.db.models.QuerySet"
                ],
                "docs": [
                    "str",
                    "None",
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "gold": {
            "name": "gold",
            "location": 59,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "c": [
                    "str",
                    "List[str]",
                    "List",
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        },
        "entity_level_f1": {
            "name": "entity_level_f1",
            "location": 71,
            "return": [
                "None",
                "List[list]",
                "List[str]",
                "bool",
                "Dict",
                "str",
                "List[Match]",
                "Iterable[str]",
                "Dict[str,Set[str]]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "candidates": [
                    "int",
                    "Dict[str,Any]",
                    "bool",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "Optional[int]"
                ],
                "gold_file": [
                    "str",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Iterable[Any]",
                    "Any",
                    "Optional[Any]",
                    "None"
                ],
                "attribute": [
                    "Callable",
                    "None",
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "Optional[Union[AbstractSetIntStr,MappingIntStrAny]]"
                ],
                "corpus": [
                    "str",
                    "List[object]",
                    "List[dict]",
                    "bool",
                    "List[T]",
                    "int",
                    "List[annofabapi.models.Task]"
                ],
                "parts_by_doc": [
                    "str",
                    "None",
                    "bool",
                    "bytes",
                    "int"
                ]
            }
        },
        "get_implied_parts": {
            "name": "get_implied_parts",
            "location": 134,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "part": [
                    "str"
                ],
                "doc": [
                    "int",
                    "Dict",
                    "Dict[str,Any]",
                    "Optional[zerver.models.Realm]",
                    "Union[int,float,complex]",
                    "List[int]"
                ],
                "parts_by_doc": [
                    "List[int]",
                    "Dict",
                    "Dict[str,Any]",
                    "Optional[zerver.models.Realm]",
                    "Union[int,float,complex]"
                ]
            }
        },
        "entity_to_candidates": {
            "name": "entity_to_candidates",
            "location": 143,
            "return": [
                "List[str]",
                "str",
                "Iterable[Tuple[str,str]]",
                "bool"
            ],
            "arguments": {
                "entity": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "candidate_subset": [
                    "Dict[str,Any]",
                    "List[str]",
                    "Literal",
                    "Optional[Dict[str,Any]]",
                    "str"
                ]
            }
        }
    },
    "fonduer-master/tests/shared/__init__.py": {},
    "fonduer-master/tests/utils/test_config.py": {
        "test_load_config": {
            "name": "test_load_config",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fonduer-master/tests/utils/test_utils_table.py": {
        "test_min_range_diff": {
            "name": "test_min_range_diff",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "None",
                    "logging.Logger",
                    "Optional[logging.Logger]"
                ]
            }
        }
    },
    "fonduer-master/tests/utils/test_utils_udf.py": {
        "test_shift_label_matrix": {
            "name": "test_shift_label_matrix",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "None",
                    "Optional[logging.Logger]",
                    "logging.Logger"
                ]
            }
        }
    },
    "fonduer-master/tests/utils/test_visualizer.py": {
        "test_visualizer": {
            "name": "test_visualizer",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_pdf_dim": {
            "name": "test_get_pdf_dim",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fonduer-master/tests/utils/__init__.py": {},
    "fonduer-master/tests/utils/data_model_utils/test_structural.py": {
        "get_parser_udf": {
            "name": "get_parser_udf",
            "location": 10,
            "return": [
                "parser.Parser",
                "ParserUDF"
            ],
            "arguments": {
                "structural": [
                    "bool"
                ],
                "blacklist": [
                    "list[typing.Text]"
                ],
                "flatten": [
                    "list[typing.Text]"
                ],
                "language": [
                    "typing.Text"
                ],
                "lingual": [
                    "bool"
                ],
                "lingual_parser": [
                    "None"
                ],
                "strip": [
                    "bool"
                ],
                "replacements": [
                    "list[tuple[typing.Text]]"
                ],
                "tabular": [
                    "bool"
                ],
                "visual": [
                    "bool"
                ],
                "visual_parser": [
                    "None"
                ],
                "pdf_path": [
                    "None"
                ]
            }
        },
        "doc_setup": {
            "name": "doc_setup",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "test_ancestors": {
            "name": "test_ancestors",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "doc_setup": [
                    "Tuple[Union[float,float,float,float]]",
                    "List[str]",
                    "Tuple[float,float,float,float]",
                    "int",
                    "str",
                    "Optional[int]",
                    "bytes",
                    "None",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]",
                    "Union[fonduer.candidates.models.Candidate,fonduer.candidates.models.Mention,fonduer.candidates.models.span_mention.TemporarySpanMention]",
                    "boggle.models.board.Board"
                ],
                "mention_ids": [
                    "int",
                    "tuple"
                ],
                "output_common_ancestor": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "output_lcad": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "fonduer-master/tests/utils/data_model_utils/test_tabular.py": {
        "mention_setup": {
            "name": "mention_setup",
            "location": 30,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_same_row": {
            "name": "test_same_row",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "mention_setup": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_same_col": {
            "name": "test_same_col",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "mention_setup": [
                    "str",
                    "Callable",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_is_tabular_aligned": {
            "name": "test_is_tabular_aligned",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "mention_setup": [
                    "str",
                    "Dict[str,float]",
                    "bool"
                ]
            }
        },
        "test_same_cell": {
            "name": "test_same_cell",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "mention_setup": [
                    "str",
                    "float",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.Mock"
                ]
            }
        },
        "test_same_sentence": {
            "name": "test_same_sentence",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "mention_setup": [
                    "str",
                    "float",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.Mock"
                ]
            }
        },
        "test_get_min_max_col_num": {
            "name": "test_get_min_max_col_num",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "mention_setup": [
                    "Dict[str,float]"
                ]
            }
        },
        "test_get_min_max_row_num": {
            "name": "test_get_min_max_row_num",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "mention_setup": [
                    "Dict[str,float]",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_get_sentence_ngrams": {
            "name": "test_get_sentence_ngrams",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "mention_setup": [
                    "bool",
                    "str",
                    "Dict[str,float]"
                ]
            }
        },
        "test_get_neighbor_sentence_ngrams": {
            "name": "test_get_neighbor_sentence_ngrams",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "mention_setup": [
                    "bool",
                    "str",
                    "Dict[str,float]"
                ]
            }
        },
        "test_get_cell_ngrams": {
            "name": "test_get_cell_ngrams",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "mention_setup": [
                    "bool",
                    "str",
                    "Dict[str,float]"
                ]
            }
        },
        "test_get_neighbor_cell_ngrams": {
            "name": "test_get_neighbor_cell_ngrams",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "mention_setup": [
                    "bool",
                    "str",
                    "Dict[str,float]"
                ]
            }
        },
        "test_get_row_ngrams": {
            "name": "test_get_row_ngrams",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "mention_setup": [
                    "int",
                    "str",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_get_col_ngrams": {
            "name": "test_get_col_ngrams",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "mention_setup": [
                    "int",
                    "str",
                    "Dict[str,float]"
                ]
            }
        },
        "test_get_aligned_ngrams": {
            "name": "test_get_aligned_ngrams",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "mention_setup": [
                    "bool",
                    "str",
                    "Dict[str,float]"
                ]
            }
        },
        "test_get_head_ngrams": {
            "name": "test_get_head_ngrams",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "mention_setup": [
                    "bool",
                    "str",
                    "Dict[str,float]"
                ]
            }
        }
    },
    "fonduer-master/tests/utils/data_model_utils/test_visual.py": {
        "doc_setup": {
            "name": "doc_setup",
            "location": 11,
            "return": [
                "Document",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "test_get_vert_ngrams": {
            "name": "test_get_vert_ngrams",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "doc_setup": [
                    "bool",
                    "str",
                    "Dict[str,float]"
                ]
            }
        },
        "test_get_horz_ngrams": {
            "name": "test_get_horz_ngrams",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "doc_setup": [
                    "bool",
                    "str",
                    "Dict[str,float]"
                ]
            }
        },
        "test_get_ngrams_that_match_in_string": {
            "name": "test_get_ngrams_that_match_in_string",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "doc_setup": [
                    "str",
                    "Dict[str,float]",
                    "int"
                ]
            }
        }
    }
}
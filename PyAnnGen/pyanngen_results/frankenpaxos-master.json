{
    "frankenpaxos-master/benchmarks/benchmark.py": {
        "_random_string": {
            "name": "_random_string",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "_now_string": {
            "name": "_now_string",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "_pretty_now_string": {
            "name": "_pretty_now_string",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "_latency": {
            "name": "_latency",
            "location": 335,
            "return": [
                "LatencyOutput"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int",
                    "Sequence[Any]"
                ]
            }
        },
        "_throughput": {
            "name": "_throughput",
            "location": 347,
            "return": [
                "ThroughputOutput"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int",
                    "Sequence[Any]"
                ]
            }
        },
        "_wrangle_recorder_data": {
            "name": "_wrangle_recorder_data",
            "location": 359,
            "return": [
                "str",
                "int",
                "subprocess.Popen",
                "bytes",
                "Generator"
            ],
            "arguments": {
                "bench": [
                    "BenchmarkDirectory"
                ],
                "filenames": [
                    "Iterable[str]"
                ],
                "drop_prefix": [
                    "datetime.timedelta"
                ],
                "save_data": [
                    "bool"
                ]
            }
        },
        "parse_recorder_data": {
            "name": "parse_recorder_data",
            "location": 412,
            "return": [
                "RecorderOutput"
            ],
            "arguments": {
                "bench": [
                    "BenchmarkDirectory"
                ],
                "filenames": [
                    "Iterable[str]"
                ],
                "drop_prefix": [
                    "datetime.timedelta"
                ],
                "save_data": [
                    "bool"
                ]
            }
        },
        "parse_labeled_recorder_data": {
            "name": "parse_labeled_recorder_data",
            "location": 426,
            "return": [
                "Dict[(str, RecorderOutput)]"
            ],
            "arguments": {
                "bench": [
                    "BenchmarkDirectory"
                ],
                "filenames": [
                    "Iterable[str]"
                ],
                "drop_prefix": [
                    "datetime.timedelta"
                ],
                "save_data": [
                    "bool"
                ]
            }
        },
        "_Reaped.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "proc": [
                    "proc.Proc"
                ],
                "returncode_file": [
                    "str"
                ]
            }
        },
        "_Reaped.__enter__": {
            "name": "__enter__",
            "location": 59,
            "return": [
                "proc.Proc"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Reaped.__exit__": {
            "name": "__exit__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Optional[Type[BaseException]]"
                ],
                "exn": [
                    "Optional[BaseException]"
                ],
                "traceback": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "SuiteDirectory.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "SuiteDirectory.__str__": {
            "name": "__str__",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SuiteDirectory.__enter__": {
            "name": "__enter__",
            "location": 89,
            "return": [
                "SuiteDirectory"
            ],
            "arguments": {
                "self": [
                    "_TSuiteDirectory"
                ]
            }
        },
        "SuiteDirectory.__exit__": {
            "name": "__exit__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "SuiteDirectory.abspath": {
            "name": "abspath",
            "location": 96,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "SuiteDirectory.create_file": {
            "name": "create_file",
            "location": 99,
            "return": [
                "IO"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "SuiteDirectory.write_string": {
            "name": "write_string",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "s": [
                    "str"
                ]
            }
        },
        "SuiteDirectory.write_dict": {
            "name": "write_dict",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "d": [
                    "dict"
                ]
            }
        },
        "SuiteDirectory.benchmark_directory": {
            "name": "benchmark_directory",
            "location": 111,
            "return": [
                "BenchmarkDirectory"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "BenchmarkDirectory.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "BenchmarkDirectory.__str__": {
            "name": "__str__",
            "location": 145,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BenchmarkDirectory.__enter__": {
            "name": "__enter__",
            "location": 148,
            "return": [
                "BenchmarkDirectory"
            ],
            "arguments": {
                "self": [
                    "_TBenchmarkDirectory"
                ]
            }
        },
        "BenchmarkDirectory.__exit__": {
            "name": "__exit__",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Optional[Type[BaseException]]"
                ],
                "exn": [
                    "Optional[BaseException]"
                ],
                "trace": [
                    "complex",
                    "bytes",
                    "str",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "BenchmarkDirectory.abspath": {
            "name": "abspath",
            "location": 164,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "BenchmarkDirectory.create_file": {
            "name": "create_file",
            "location": 167,
            "return": [
                "IO"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "BenchmarkDirectory.write_string": {
            "name": "write_string",
            "location": 170,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "s": [
                    "str"
                ]
            }
        },
        "BenchmarkDirectory.write_dict": {
            "name": "write_dict",
            "location": 175,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "d": [
                    "dict"
                ]
            }
        },
        "BenchmarkDirectory.log": {
            "name": "log",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ]
            }
        },
        "BenchmarkDirectory.popen": {
            "name": "popen",
            "location": 183,
            "return": [
                "proc.Proc"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "host.Host"
                ],
                "label": [
                    "str"
                ],
                "cmd": [
                    "Union[(str, Sequence[str])]"
                ]
            }
        },
        "Suite.args": {
            "name": "args",
            "location": 223,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Suite.inputs": {
            "name": "inputs",
            "location": 228,
            "return": [
                "Collection[Input]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Suite.summary": {
            "name": "summary",
            "location": 236,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "Input"
                ],
                "output": [
                    "Output"
                ]
            }
        },
        "Suite.run_benchmark": {
            "name": "run_benchmark",
            "location": 241,
            "return": [
                "Output"
            ],
            "arguments": {
                "self": [],
                "bench": [
                    "BenchmarkDirectory"
                ],
                "args": [
                    "dict"
                ],
                "input": [
                    "Input"
                ]
            }
        },
        "Suite.run_suite": {
            "name": "run_suite",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "suite_dir": [
                    "SuiteDirectory"
                ]
            }
        },
        "Suite.run_suite.round_delta": {
            "name": "round_delta",
            "location": 298,
            "return": [
                "str",
                "datetime.datetime",
                "datetime.date",
                "int",
                "Sequence[str]",
                "Tuple[str, str]"
            ],
            "arguments": {
                "d": [
                    "int"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/cluster.py": {
        "_RemoteHostCache.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connect": [
                    "Callable[([str], host.Host)]"
                ]
            }
        },
        "_RemoteHostCache.connect": {
            "name": "connect",
            "location": 15,
            "return": [
                "host.Host"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str"
                ]
            }
        },
        "Cluster._sanitize_json": {
            "name": "_sanitize_json",
            "location": 46,
            "return": [
                "Dict[(int, Dict[(str, List[str])])]"
            ],
            "arguments": {
                "data": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Cluster.from_json_file": {
            "name": "from_json_file",
            "location": 72,
            "return": [
                "Cluster"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "connect": [
                    "Callable[([str], host.Host)]"
                ]
            }
        },
        "Cluster.from_json_string": {
            "name": "from_json_string",
            "location": 79,
            "return": [
                "Cluster"
            ],
            "arguments": {
                "json_string": [
                    "str"
                ],
                "connect": [
                    "Callable[([str], host.Host)]"
                ]
            }
        },
        "Cluster.from_dict": {
            "name": "from_dict",
            "location": 85,
            "return": [
                "Cluster"
            ],
            "arguments": {
                "cluster": [
                    "Dict[(int, Dict[(str, List[str])])]"
                ],
                "connect": [
                    "Callable[([str], host.Host)]"
                ]
            }
        },
        "Cluster.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cluster": [
                    "Dict[(int, Dict[(str, List[str])])]"
                ],
                "connect": [
                    "Callable[([str], host.Host)]"
                ]
            }
        },
        "Cluster.f": {
            "name": "f",
            "location": 94,
            "return": [
                "Dict[(str, List[host.Host])]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/cluster_test.py": {
        "ClusterTest.test_good_configuration": {
            "name": "test_good_configuration",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClusterTest._test_bad_f": {
            "name": "_test_bad_f",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClusterTest.test_bad_f": {
            "name": "test_bad_f",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClusterTest._test_bad_addresses": {
            "name": "_test_bad_addresses",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClusterTest.test_bad_addresses": {
            "name": "test_bad_addresses",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClusterTest._test_bad_address": {
            "name": "_test_bad_address",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClusterTest.test_bad_address": {
            "name": "test_bad_address",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/host.py": {
        "Host.ip": {
            "name": "ip",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Host.popen": {
            "name": "popen",
            "location": 16,
            "return": [
                "proc.Proc"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "Union[(str, Sequence[str])]"
                ],
                "stdout": [
                    "str"
                ],
                "stderr": [
                    "str"
                ]
            }
        },
        "LocalHost.ip": {
            "name": "ip",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalHost.popen": {
            "name": "popen",
            "location": 32,
            "return": [
                "proc.Proc"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "Union[(str, Sequence[str])]"
                ],
                "stdout": [
                    "str"
                ],
                "stderr": [
                    "str"
                ]
            }
        },
        "RemoteHost.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "paramiko.client.SSHClient"
                ]
            }
        },
        "RemoteHost.ip": {
            "name": "ip",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoteHost.popen": {
            "name": "popen",
            "location": 45,
            "return": [
                "proc.Proc"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "Union[(str, Sequence[str])]"
                ],
                "stdout": [
                    "str"
                ],
                "stderr": [
                    "str"
                ]
            }
        },
        "FakeHost.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str"
                ]
            }
        },
        "FakeHost.__eq__": {
            "name": "__eq__",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "int",
                    "list[]",
                    "bool",
                    "float",
                    "list",
                    "Union[str, int, float]"
                ]
            }
        },
        "FakeHost.ip": {
            "name": "ip",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeHost.popen": {
            "name": "popen",
            "location": 66,
            "return": [
                "proc.Proc"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "Union[(str, Sequence[str])]"
                ],
                "stdout": [
                    "str"
                ],
                "stderr": [
                    "str"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/parser_util.py": {
        "get_benchmark_parser": {
            "name": "get_benchmark_parser",
            "location": 8,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "get_plot_parser": {
            "name": "get_plot_parser",
            "location": 55,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {
                "default_output_filename": [
                    "str"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/pd_util.py": {
        "read_csvs": {
            "name": "read_csvs",
            "location": 6,
            "return": [
                "str",
                "bytearray",
                "numpy.ndarray",
                "float",
                "bool"
            ],
            "arguments": {
                "filenames": [
                    "Iterable[str]"
                ]
            }
        },
        "outliers": {
            "name": "outliers",
            "location": 18,
            "return": [
                "bool",
                "str",
                "numpy.ndarray",
                "Tuple[str]"
            ],
            "arguments": {
                "s": [
                    "int",
                    "Union[int, float]",
                    "numpy.ndarray"
                ],
                "n": [
                    "float"
                ]
            }
        },
        "throughput": {
            "name": "throughput",
            "location": 35,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "s": [
                    "int",
                    "float",
                    "Union[numpy.ndarray, numpy.void]"
                ],
                "window_size_ms": [
                    "float"
                ],
                "trim": [
                    "bool"
                ]
            }
        },
        "weighted_throughput": {
            "name": "weighted_throughput",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "int",
                    "pandas.Series",
                    "float",
                    "bool"
                ],
                "window_size_ms": [
                    "float"
                ]
            }
        },
        "rate": {
            "name": "rate",
            "location": 106,
            "return": [
                "str",
                "bool",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "s": [
                    "float",
                    "int",
                    "pandas.Series",
                    "bool"
                ],
                "window_size_ms": [
                    "float"
                ]
            }
        },
        "rate._dxdt": {
            "name": "_dxdt",
            "location": 131,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "float"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/perf_util.py": {
        "JavaPerfProc.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bench": [
                    "benchmark.BenchmarkDirectory"
                ],
                "host": [
                    "host.Host"
                ],
                "proc": [
                    "proc.Proc"
                ],
                "label": [
                    "str"
                ]
            }
        },
        "JavaPerfProc.cmd": {
            "name": "cmd",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JavaPerfProc.pid": {
            "name": "pid",
            "location": 64,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JavaPerfProc.wait": {
            "name": "wait",
            "location": 67,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JavaPerfProc.kill": {
            "name": "kill",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/plot_latency_and_throughput.py": {
        "plot_latency": {
            "name": "plot_latency",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "ax": [
                    "matplotlib.pyploAxes",
                    "pandas.Series",
                    "bool",
                    "list",
                    "float"
                ],
                "latency_ms": [
                    "bool",
                    "matplotlib.pyploAxes",
                    "list[]",
                    "float",
                    "pandas.Series",
                    "list"
                ]
            }
        },
        "plot_throughput": {
            "name": "plot_throughput",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "ax": [
                    "matplotlib.pyploAxes",
                    "pandas.Series",
                    "float",
                    "str",
                    "List[str]"
                ],
                "start": [
                    "int",
                    "pandas.Series",
                    "matplotlib.pyploAxes"
                ],
                "stop": [
                    "int",
                    "pandas.Series",
                    "None",
                    "Optional[int]",
                    "list[str]",
                    "matplotlib.pyploAxes",
                    "List[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 74,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        }
    },
    "frankenpaxos-master/benchmarks/proc.py": {
        "_random_string": {
            "name": "_random_string",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "_canonicalize_args": {
            "name": "_canonicalize_args",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [
                    "Union[(str, Sequence[str])]"
                ]
            }
        },
        "Proc.cmd": {
            "name": "cmd",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Proc.pid": {
            "name": "pid",
            "location": 52,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Proc.wait": {
            "name": "wait",
            "location": 56,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Proc.kill": {
            "name": "kill",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PopenProc.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "Union[(str, Sequence[str])]"
                ],
                "stdout": [
                    "str"
                ],
                "stderr": [
                    "str"
                ]
            }
        },
        "PopenProc.cmd": {
            "name": "cmd",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PopenProc.pid": {
            "name": "pid",
            "location": 76,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PopenProc.wait": {
            "name": "wait",
            "location": 79,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PopenProc.kill": {
            "name": "kill",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParamikoProc.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "paramiko.client.SSHClient"
                ],
                "args": [
                    "Union[(str, Sequence[str])]"
                ],
                "stdout": [
                    "str"
                ],
                "stderr": [
                    "str"
                ]
            }
        },
        "ParamikoProc._get_pgid": {
            "name": "_get_pgid",
            "location": 124,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParamikoProc._get_pid": {
            "name": "_get_pid",
            "location": 137,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParamikoProc.cmd": {
            "name": "cmd",
            "location": 155,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParamikoProc.pgid": {
            "name": "pgid",
            "location": 158,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParamikoProc.pid": {
            "name": "pid",
            "location": 165,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParamikoProc.wait": {
            "name": "wait",
            "location": 172,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParamikoProc.kill": {
            "name": "kill",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/proc_test.py": {
        "ParamikoProcTest._client": {
            "name": "_client",
            "location": 8,
            "return": [
                "paramiko.client.SSHClient"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParamikoProcTest.test_wait": {
            "name": "test_wait",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParamikoProcTest.test_kill": {
            "name": "test_kill",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParamikoProcTest.test_double_kill": {
            "name": "test_double_kill",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParamikoProcTest.test_pid": {
            "name": "test_pid",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/prometheus.py": {
        "prometheus_config": {
            "name": "prometheus_config",
            "location": 10,
            "return": [
                "Dict[(str, Union[(Dict[(str, str)], List[Dict[(str, Union[(str, List[Dict[(str, List[str])]])])]])])]"
            ],
            "arguments": {
                "scrape_interval_ms": [
                    "int"
                ],
                "jobs": [
                    "Dict[(str, List[str])]"
                ]
            }
        },
        "PrometheusQueryer.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tsdb_path": [
                    "str"
                ],
                "popen": [
                    "dict",
                    "bool"
                ]
            }
        },
        "PrometheusQueryer.__enter__": {
            "name": "__enter__",
            "location": 75,
            "return": [
                "PrometheusQueryer"
            ],
            "arguments": {
                "self": [
                    "_TPrometheusQueryer"
                ]
            }
        },
        "PrometheusQueryer.__exit__": {
            "name": "__exit__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Optional[Type[BaseException]]"
                ],
                "exn": [
                    "Optional[BaseException]"
                ],
                "traceback": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "PrometheusQueryer.query": {
            "name": "query",
            "location": 81,
            "return": [
                "Dict[str, str]",
                "Dict[str, float]",
                "Dict[str, Dict[str, str]]",
                "dict",
                "int",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "q": [
                    "str"
                ]
            }
        },
        "PrometheusQueryer._query_once": {
            "name": "_query_once",
            "location": 96,
            "return": [
                "bytes",
                "int",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "q": [
                    "str"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/proto_util.py": {
        "message_to_pbtext": {
            "name": "message_to_pbtext",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "d": [
                    "Dict[(str, Any)]"
                ],
                "indent": [
                    "int"
                ]
            }
        },
        "_indent": {
            "name": "_indent",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "n": [
                    "int"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/read_write_workload.py": {
        "UniformReadWriteWorkload.to_proto": {
            "name": "to_proto",
            "location": 14,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointSkewedReadWriteWorkload.to_proto": {
            "name": "to_proto",
            "location": 34,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UniformMultiKeyReadWriteWorkload.to_proto": {
            "name": "to_proto",
            "location": 55,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WriteOnlyStringWorkload.to_proto": {
            "name": "to_proto",
            "location": 72,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WriteOnlyUniformSingleKeyWorkload.to_proto": {
            "name": "to_proto",
            "location": 85,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WriteOnlyBernoulliSingleKeyWorkload.to_proto": {
            "name": "to_proto",
            "location": 97,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/util.py": {
        "flatten_tuple_fields": {
            "name": "flatten_tuple_fields",
            "location": 8,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "t": [],
                "prefixes": [
                    "None",
                    "float",
                    "list"
                ]
            }
        },
        "flatten_tuple": {
            "name": "flatten_tuple",
            "location": 30,
            "return": [
                "list"
            ],
            "arguments": {
                "t": [
                    "float",
                    "str"
                ]
            }
        },
        "tuple_to_dict": {
            "name": "tuple_to_dict",
            "location": 46,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "t": [
                    "List[str]",
                    "dict",
                    "str"
                ]
            }
        },
        "_is_namedtuple_instance": {
            "name": "_is_namedtuple_instance",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": []
            }
        },
        "_flatten_tuple_fields": {
            "name": "_flatten_tuple_fields",
            "location": 90,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "t": [
                    "List[str]",
                    "str"
                ],
                "prefixes": [
                    "List[str]"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/workload.py": {
        "StringWorkload.to_proto": {
            "name": "to_proto",
            "location": 11,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UniformSingleKeyWorkload.to_proto": {
            "name": "to_proto",
            "location": 27,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BernoulliSingleKeyWorkload.to_proto": {
            "name": "to_proto",
            "location": 44,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/__init__.py": {},
    "frankenpaxos-master/benchmarks/batchedunreplicated/batchedunreplicated.py": {
        "get_parser": {
            "name": "get_parser",
            "location": 388,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "BatchedUnreplicatedNet.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cluster": [
                    "cluster.Cluster"
                ],
                "input": [
                    "Input"
                ]
            }
        },
        "BatchedUnreplicatedNet.placement": {
            "name": "placement",
            "location": 104,
            "return": [
                "BatchedUnreplicatedNet.Placement"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatchedUnreplicatedNet.config": {
            "name": "config",
            "location": 129,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatchedUnreplicatedSuite.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatchedUnreplicatedSuite._connect": {
            "name": "_connect",
            "location": 153,
            "return": [
                "host.Host"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str"
                ]
            }
        },
        "BatchedUnreplicatedSuite.run_benchmark": {
            "name": "run_benchmark",
            "location": 162,
            "return": [
                "benchmark.RecorderOutput"
            ],
            "arguments": {
                "self": [],
                "bench": [
                    "benchmark.BenchmarkDirectory"
                ],
                "args": [
                    "dict"
                ],
                "input": [
                    "Input"
                ]
            }
        },
        "BatchedUnreplicatedNet.placement.portify_one": {
            "name": "portify_one",
            "location": 107,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "h": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BatchedUnreplicatedNet.placement.portify": {
            "name": "portify",
            "location": 110,
            "return": [
                "list[]",
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "hosts": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BatchedUnreplicatedNet.placement.cycle_take_n": {
            "name": "cycle_take_n",
            "location": 113,
            "return": [
                "list[]",
                "List[int]",
                "float",
                "List[Dict]",
                "Tuple[int]",
                "list",
                "Sequence[str]",
                "List[float]",
                "Tuple[int, int, int]"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "hosts": [
                    "int"
                ]
            }
        },
        "BatchedUnreplicatedSuite.run_benchmark.java": {
            "name": "java",
            "location": 174,
            "return": [
                "list[typing.Text]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "heap_size": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/batchedunreplicated/eurosys_lt.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.EuroSysLtBatchedUnreplicatedSuite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.EuroSysLtBatchedUnreplicatedSuite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "list[Input]",
                "str",
                "Dict[str, Dict[str, Any]]",
                "Optional[bool]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.EuroSysLtBatchedUnreplicatedSuite.summary": {
            "name": "summary",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "output": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/batchedunreplicated/smoke.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.SmokeSuite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.SmokeSuite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "list[]",
                "int",
                "List[Tuple[str, Any]]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.SmokeSuite.summary": {
            "name": "summary",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "bool",
                    "int"
                ],
                "output": [
                    "bool",
                    "int"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/batchedunreplicated/__init__.py": {},
    "frankenpaxos-master/benchmarks/craq/craq.py": {
        "get_parser": {
            "name": "get_parser",
            "location": 338,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "CraqNet.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cluster": [
                    "cluster.Cluster"
                ],
                "input": [
                    "Input"
                ]
            }
        },
        "CraqNet.placement": {
            "name": "placement",
            "location": 94,
            "return": [
                "CraqNet.Placement"
            ],
            "arguments": {
                "self": []
            }
        },
        "CraqNet.config": {
            "name": "config",
            "location": 112,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CraqSuite.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CraqSuite._connect": {
            "name": "_connect",
            "location": 129,
            "return": [
                "host.Host"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str"
                ]
            }
        },
        "CraqSuite.run_benchmark": {
            "name": "run_benchmark",
            "location": 138,
            "return": [
                "CraqOutput"
            ],
            "arguments": {
                "self": [],
                "bench": [
                    "benchmark.BenchmarkDirectory"
                ],
                "args": [
                    "dict"
                ],
                "input": [
                    "Input"
                ]
            }
        },
        "CraqNet.placement.portify": {
            "name": "portify",
            "location": 97,
            "return": [
                "list[]",
                "int",
                "bool",
                "str",
                "pandas.DataFrame"
            ],
            "arguments": {
                "hosts": []
            }
        },
        "CraqNet.placement.cycle_take_n": {
            "name": "cycle_take_n",
            "location": 100,
            "return": [
                "list[]",
                "List[int]",
                "float",
                "List[Dict]",
                "Tuple[int]",
                "list",
                "Sequence[str]",
                "List[float]",
                "Tuple[int, int, int]"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "hosts": [
                    "int"
                ]
            }
        },
        "CraqSuite.run_benchmark.java": {
            "name": "java",
            "location": 142,
            "return": [
                "list[typing.Text]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "heap_size": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/craq/smoke.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.SmokeCraqSuite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.SmokeCraqSuite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "list[Input]",
                "str",
                "Dict[str, Any]",
                "Iterable"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.SmokeCraqSuite.summary": {
            "name": "summary",
            "location": 52,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "list",
                    "List[T]"
                ],
                "output": [
                    "list",
                    "List[T]"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/craq/__init__.py": {},
    "frankenpaxos-master/benchmarks/epaxos/epaxos.py": {
        "get_parser": {
            "name": "get_parser",
            "location": 329,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "EPaxosNet.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cluster_file": [
                    "str"
                ],
                "key_filename": [
                    "Optional[str]"
                ],
                "input": [
                    "Input"
                ]
            }
        },
        "EPaxosNet._connect": {
            "name": "_connect",
            "location": 99,
            "return": [
                "host.Host"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str"
                ]
            }
        },
        "EPaxosNet.placement": {
            "name": "placement",
            "location": 112,
            "return": [
                "EPaxosNet.Placement"
            ],
            "arguments": {
                "self": []
            }
        },
        "EPaxosNet.config": {
            "name": "config",
            "location": 129,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EPaxosSuite.run_benchmark": {
            "name": "run_benchmark",
            "location": 142,
            "return": [
                "benchmark.RecorderOutput"
            ],
            "arguments": {
                "self": [],
                "bench": [
                    "benchmark.BenchmarkDirectory"
                ],
                "args": [
                    "dict"
                ],
                "input": [
                    "Input"
                ]
            }
        },
        "EPaxosSuite._run_benchmark": {
            "name": "_run_benchmark",
            "location": 147,
            "return": [
                "benchmark.RecorderOutput"
            ],
            "arguments": {
                "self": [],
                "bench": [
                    "benchmark.BenchmarkDirectory"
                ],
                "args": [
                    "dict"
                ],
                "input": [
                    "Input"
                ],
                "net": [
                    "EPaxosNet"
                ]
            }
        },
        "EPaxosNet.placement.portify": {
            "name": "portify",
            "location": 115,
            "return": [
                "list[]",
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "hosts": []
            }
        },
        "EPaxosNet.placement.cycle_take_n": {
            "name": "cycle_take_n",
            "location": 118,
            "return": [
                "list[]",
                "List[int]",
                "float",
                "List[Dict]",
                "Tuple[int]",
                "list",
                "Sequence[str]",
                "List[float]",
                "Tuple[int, int, int]"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "hosts": [
                    "int"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/epaxos/nsdi_fig1_lt.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.NsdiFig1LtEPaxosSuite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.NsdiFig1LtEPaxosSuite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "list[Input]",
                "str",
                "bool",
                "List[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.NsdiFig1LtEPaxosSuite.summary": {
            "name": "summary",
            "location": 85,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "output": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/epaxos/nsdi_fig3_wan.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.NsdiFig3WanEPaxosSuite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.NsdiFig3WanEPaxosSuite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "list[]",
                "bool",
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.NsdiFig3WanEPaxosSuite.summary": {
            "name": "summary",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "output": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/epaxos/smoke.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.SmokeEPaxosSuite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.SmokeEPaxosSuite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "list[]",
                "str",
                "Dict[str, Any]",
                "Iterable"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.SmokeEPaxosSuite.summary": {
            "name": "summary",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "output": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/epaxos/__init__.py": {},
    "frankenpaxos-master/benchmarks/eurosys/fig1_multipaxos_lt_plot.py": {
        "add_num_clients": {
            "name": "add_num_clients",
            "location": 16,
            "return": [
                "pandas.DataFrame",
                "bool",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "df": [
                    "list[dict[, ]]",
                    "pandas.DataFrame",
                    "bool",
                    "List[dict]",
                    "int"
                ]
            }
        },
        "plot_latency_throughput": {
            "name": "plot_latency_throughput",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "List[str]",
                    "str",
                    "Sequence",
                    "pandas.DataFrame",
                    "int"
                ],
                "ax": [
                    "str",
                    "matplotlib.pyploAxes",
                    "numpy.array"
                ],
                "marker": [
                    "str"
                ],
                "label": [
                    "str"
                ]
            }
        },
        "make_figure": {
            "name": "make_figure",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "output_filename": [
                    "str"
                ],
                "coupled_df": [
                    "set[str]",
                    "pandas.DataFrame",
                    "str",
                    "None",
                    "int",
                    "Optional[Set[str]]",
                    "Optional[int]",
                    "typing.Iterator",
                    "Iterator[int]"
                ],
                "multipaxos_df": [
                    "set[str]",
                    "pandas.DataFrame",
                    "str",
                    "None",
                    "int",
                    "Optional[Set[str]]",
                    "Optional[int]",
                    "typing.Iterator",
                    "Iterator[int]"
                ],
                "unreplicated_df": [
                    "set[str]",
                    "pandas.DataFrame",
                    "str",
                    "None",
                    "int",
                    "Optional[Set[str]]",
                    "Optional[int]",
                    "typing.Iterator",
                    "Iterator[int]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 82,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        }
    },
    "frankenpaxos-master/benchmarks/eurosys/fig2_mencius_lt_plot.py": {
        "add_num_clients": {
            "name": "add_num_clients",
            "location": 16,
            "return": [
                "pandas.DataFrame",
                "bool",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "df": [
                    "pandas.DataFrame",
                    "bool",
                    "List[dict]",
                    "int"
                ]
            }
        },
        "plot_latency_throughput": {
            "name": "plot_latency_throughput",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "List[str]",
                    "str",
                    "Sequence",
                    "pandas.DataFrame",
                    "int"
                ],
                "ax": [
                    "str",
                    "matplotlib.pyploAxes",
                    "numpy.array"
                ],
                "marker": [
                    "str"
                ],
                "label": [
                    "str"
                ]
            }
        },
        "make_figure": {
            "name": "make_figure",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "output_filename": [
                    "str"
                ],
                "coupled_df": [
                    "pandas.DataFrame",
                    "Optional[Set[str]]",
                    "str",
                    "Optional[int]",
                    "int",
                    "Iterator[int]"
                ],
                "mencius_df": [
                    "pandas.DataFrame",
                    "Optional[Set[str]]",
                    "str",
                    "Optional[int]",
                    "int",
                    "Iterator[int]"
                ],
                "unreplicated_df": [
                    "pandas.DataFrame",
                    "Optional[Set[str]]",
                    "str",
                    "Optional[int]",
                    "int",
                    "Iterator[int]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 81,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        }
    },
    "frankenpaxos-master/benchmarks/eurosys/fig4_multipaxos_ablation_plot.py": {
        "avg_latency": {
            "name": "avg_latency",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "df": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "std_latency": {
            "name": "std_latency",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "df": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "avg_tput": {
            "name": "avg_tput",
            "location": 24,
            "return": [
                "str",
                "\"Pipeline\""
            ],
            "arguments": {
                "df": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "std_tput": {
            "name": "std_tput",
            "location": 28,
            "return": [
                "str",
                "\"Pipeline\""
            ],
            "arguments": {
                "df": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "add_num_clients": {
            "name": "add_num_clients",
            "location": 32,
            "return": [
                "pandas.DataFrame",
                "bool",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "df": [
                    "pandas.DataFrame",
                    "bool",
                    "List[dict]",
                    "int"
                ]
            }
        },
        "barchart": {
            "name": "barchart",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "output_filename": [
                    "str"
                ],
                "labels": [
                    "List[str]"
                ],
                "data": [
                    "List[float]"
                ],
                "yerr": [
                    "List[float]"
                ],
                "color": [
                    "List[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 161,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        }
    },
    "frankenpaxos-master/benchmarks/fasterpaxos/fasterpaxos.py": {
        "get_parser": {
            "name": "get_parser",
            "location": 375,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "FasterPaxosNet.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cluster": [
                    "cluster.Cluster"
                ],
                "input": [
                    "Input"
                ]
            }
        },
        "FasterPaxosNet.placement": {
            "name": "placement",
            "location": 112,
            "return": [
                "FasterPaxosNet.Placement"
            ],
            "arguments": {
                "self": []
            }
        },
        "FasterPaxosNet.config": {
            "name": "config",
            "location": 133,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FasterPaxosSuite.__init__": {
            "name": "__init__",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FasterPaxosSuite._connect": {
            "name": "_connect",
            "location": 154,
            "return": [
                "host.Host"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str"
                ]
            }
        },
        "FasterPaxosSuite.run_benchmark": {
            "name": "run_benchmark",
            "location": 163,
            "return": [
                "FasterPaxosOutput"
            ],
            "arguments": {
                "self": [],
                "bench": [
                    "benchmark.BenchmarkDirectory"
                ],
                "args": [
                    "dict"
                ],
                "input": [
                    "Input"
                ]
            }
        },
        "FasterPaxosNet.placement.portify": {
            "name": "portify",
            "location": 115,
            "return": [
                "list[]",
                "int",
                "bool",
                "str",
                "pandas.DataFrame"
            ],
            "arguments": {
                "hosts": []
            }
        },
        "FasterPaxosNet.placement.cycle_take_n": {
            "name": "cycle_take_n",
            "location": 118,
            "return": [
                "list[]",
                "List[int]",
                "float",
                "List[Dict]",
                "Tuple[int]",
                "list",
                "Sequence[str]",
                "List[float]",
                "Tuple[int, int, int]"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "hosts": [
                    "int"
                ]
            }
        },
        "FasterPaxosSuite.run_benchmark.java": {
            "name": "java",
            "location": 167,
            "return": [
                "list[typing.Text]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "heap_size": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/fasterpaxos/lt.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.SmokeFasterPaxosSuite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.SmokeFasterPaxosSuite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "Input",
                "str",
                "bool",
                "List[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.SmokeFasterPaxosSuite.summary": {
            "name": "summary",
            "location": 85,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "output": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/fasterpaxos/lt_plot.py": {
        "add_num_clients": {
            "name": "add_num_clients",
            "location": 17,
            "return": [
                "pandas.DataFrame",
                "bool",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "df": [
                    "pandas.DataFrame",
                    "bool",
                    "List[dict]",
                    "int"
                ]
            }
        },
        "plot_latency_throughput": {
            "name": "plot_latency_throughput",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "pandas.DataFrame",
                    "bool",
                    "Sequence[str]",
                    "str"
                ],
                "ax": [
                    "str",
                    "matplotlib.pyploAxes",
                    "numpy.array"
                ],
                "label": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 62,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        }
    },
    "frankenpaxos-master/benchmarks/fasterpaxos/smoke.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.SmokeFasterPaxosSuite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.SmokeFasterPaxosSuite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "list[]",
                "str",
                "Dict[str, Any]",
                "Iterable"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.SmokeFasterPaxosSuite.summary": {
            "name": "summary",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "output": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/fasterpaxos/__init__.py": {},
    "frankenpaxos-master/benchmarks/fastmultipaxos/fastmultipaxos.py": {
        "get_parser": {
            "name": "get_parser",
            "location": 421,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "FastMultiPaxosNet.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cluster_file": [
                    "str"
                ],
                "key_filename": [
                    "Optional[str]"
                ],
                "input": [
                    "Input"
                ]
            }
        },
        "FastMultiPaxosNet._connect": {
            "name": "_connect",
            "location": 126,
            "return": [
                "host.Host"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str"
                ]
            }
        },
        "FastMultiPaxosNet.placement": {
            "name": "placement",
            "location": 143,
            "return": [
                "FastMultiPaxosNet.Placement"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastMultiPaxosNet.config": {
            "name": "config",
            "location": 170,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastMultiPaxosSuite.run_benchmark": {
            "name": "run_benchmark",
            "location": 199,
            "return": [
                "benchmark.RecorderOutput"
            ],
            "arguments": {
                "self": [],
                "bench": [
                    "benchmark.BenchmarkDirectory"
                ],
                "args": [
                    "dict"
                ],
                "input": [
                    "Input"
                ]
            }
        },
        "FastMultiPaxosSuite._run_benchmark": {
            "name": "_run_benchmark",
            "location": 204,
            "return": [
                "benchmark.RecorderOutput"
            ],
            "arguments": {
                "self": [],
                "bench": [
                    "benchmark.BenchmarkDirectory"
                ],
                "args": [
                    "dict"
                ],
                "input": [
                    "Input"
                ],
                "net": [
                    "FastMultiPaxosNet"
                ]
            }
        },
        "FastMultiPaxosNet.placement.portify": {
            "name": "portify",
            "location": 146,
            "return": [
                "list[]",
                "int",
                "bool",
                "str",
                "pandas.DataFrame"
            ],
            "arguments": {
                "hosts": []
            }
        },
        "FastMultiPaxosNet.placement.cycle_take_n": {
            "name": "cycle_take_n",
            "location": 149,
            "return": [
                "list[]",
                "List[int]",
                "float",
                "List[Dict]",
                "Tuple[int]",
                "list",
                "Sequence[str]",
                "List[float]",
                "Tuple[int, int, int]"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "hosts": [
                    "int"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/fastmultipaxos/nsdi_fig1_lt.py": {
        "_main": {
            "name": "_main",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "_main.NsdiFig1LtFastMultiPaxosSuite.args": {
            "name": "args",
            "location": 7,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_main.NsdiFig1LtFastMultiPaxosSuite.inputs": {
            "name": "inputs",
            "location": 10,
            "return": [
                "list[Input]",
                "str",
                "bool",
                "List[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_main.NsdiFig1LtFastMultiPaxosSuite.summary": {
            "name": "summary",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "output": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/fastmultipaxos/smoke.py": {
        "_main": {
            "name": "_main",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "_main.SmokeFastMultiPaxosSuite.args": {
            "name": "args",
            "location": 7,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_main.SmokeFastMultiPaxosSuite.inputs": {
            "name": "inputs",
            "location": 10,
            "return": [
                "list[]",
                "str",
                "Dict[str, Any]",
                "Iterable"
            ],
            "arguments": {
                "self": []
            }
        },
        "_main.SmokeFastMultiPaxosSuite.summary": {
            "name": "summary",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "output": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/fastmultipaxos/__init__.py": {},
    "frankenpaxos-master/benchmarks/horizontal/driver_workload.py": {
        "DoNothing.to_proto": {
            "name": "to_proto",
            "location": 9,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RepeatedLeaderReconfiguration.to_proto": {
            "name": "to_proto",
            "location": 22,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeaderReconfiguration.to_proto": {
            "name": "to_proto",
            "location": 44,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeaderFailure.to_proto": {
            "name": "to_proto",
            "location": 73,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/horizontal/horizontal.py": {
        "get_parser": {
            "name": "get_parser",
            "location": 483,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "HorizontalNet.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cluster": [
                    "cluster.Cluster"
                ],
                "input": [
                    "Input"
                ]
            }
        },
        "HorizontalNet.placement": {
            "name": "placement",
            "location": 130,
            "return": [
                "HorizontalNet.Placement"
            ],
            "arguments": {
                "self": []
            }
        },
        "HorizontalNet.config": {
            "name": "config",
            "location": 158,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HorizontalSuite.__init__": {
            "name": "__init__",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HorizontalSuite._connect": {
            "name": "_connect",
            "location": 187,
            "return": [
                "host.Host"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str"
                ]
            }
        },
        "HorizontalSuite.run_benchmark": {
            "name": "run_benchmark",
            "location": 196,
            "return": [
                "benchmark.RecorderOutput"
            ],
            "arguments": {
                "self": [],
                "bench": [
                    "benchmark.BenchmarkDirectory"
                ],
                "args": [
                    "dict"
                ],
                "input": [
                    "Input"
                ]
            }
        },
        "HorizontalNet.placement.portify": {
            "name": "portify",
            "location": 133,
            "return": [
                "list[]",
                "int",
                "bool",
                "str",
                "pandas.DataFrame"
            ],
            "arguments": {
                "hosts": []
            }
        },
        "HorizontalNet.placement.cycle_take_n": {
            "name": "cycle_take_n",
            "location": 136,
            "return": [
                "list[]",
                "List[int]",
                "float",
                "List[Dict]",
                "Tuple[int]",
                "list",
                "Sequence[str]",
                "List[float]",
                "Tuple[int, int, int]"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "hosts": [
                    "int"
                ]
            }
        },
        "HorizontalSuite.run_benchmark.java": {
            "name": "java",
            "location": 200,
            "return": [
                "list[typing.Text]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "heap_size": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/horizontal/lt.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.LtHorizontalSuite.args": {
            "name": "args",
            "location": 7,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.LtHorizontalSuite.inputs": {
            "name": "inputs",
            "location": 10,
            "return": [
                "Input",
                "bool",
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.LtHorizontalSuite.summary": {
            "name": "summary",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "bytes",
                    "bool",
                    "str"
                ],
                "output": [
                    "bytes",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/horizontal/lt_plot.py": {
        "add_num_clients": {
            "name": "add_num_clients",
            "location": 17,
            "return": [
                "pandas.DataFrame",
                "bool",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "df": [
                    "list[dict[, ]]",
                    "pandas.DataFrame",
                    "bool",
                    "List[dict]",
                    "int"
                ]
            }
        },
        "plot_latency_throughput": {
            "name": "plot_latency_throughput",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "bool",
                    "List[List[str]]",
                    "Optional[str]",
                    "int",
                    "str"
                ],
                "ax": [
                    "str",
                    "matplotlib.pyploAxes",
                    "Optional[str]",
                    "Optional[Sequence[Any]]",
                    "Optional[List[str]]",
                    "bytes"
                ],
                "latency_name": [
                    "str"
                ],
                "label": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 61,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        }
    },
    "frankenpaxos-master/benchmarks/horizontal/smoke.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.SmokeHorizontalSuite.args": {
            "name": "args",
            "location": 7,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.SmokeHorizontalSuite.inputs": {
            "name": "inputs",
            "location": 10,
            "return": [
                "list[]",
                "str",
                "bool",
                "List[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.SmokeHorizontalSuite.summary": {
            "name": "summary",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "output": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/horizontal/vldb_leader_failure.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.LeaderFailureSuite.args": {
            "name": "args",
            "location": 7,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.LeaderFailureSuite.inputs": {
            "name": "inputs",
            "location": 10,
            "return": [
                "bool",
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.LeaderFailureSuite.summary": {
            "name": "summary",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "bool"
                ],
                "output": [
                    "bool"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/horizontal/vldb_leader_reconfiguration.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.LeaderReconfigurationSuite.args": {
            "name": "args",
            "location": 7,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.LeaderReconfigurationSuite.inputs": {
            "name": "inputs",
            "location": 10,
            "return": [
                "bool",
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.LeaderReconfigurationSuite.summary": {
            "name": "summary",
            "location": 92,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "bool"
                ],
                "output": [
                    "bool"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/horizontal/__init__.py": {},
    "frankenpaxos-master/benchmarks/matchmakermultipaxos/driver_workload.py": {
        "DoNothing.to_proto": {
            "name": "to_proto",
            "location": 9,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RepeatedLeaderReconfiguration.to_proto": {
            "name": "to_proto",
            "location": 22,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeaderReconfiguration.to_proto": {
            "name": "to_proto",
            "location": 44,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatchmakerReconfiguration.to_proto": {
            "name": "to_proto",
            "location": 78,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeaderFailure.to_proto": {
            "name": "to_proto",
            "location": 108,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Chaos.to_proto": {
            "name": "to_proto",
            "location": 141,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/matchmakermultipaxos/matchmakermultipaxos.py": {
        "get_parser": {
            "name": "get_parser",
            "location": 646,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "MatchmakerMultiPaxosNet.__init__": {
            "name": "__init__",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cluster": [
                    "cluster.Cluster"
                ],
                "input": [
                    "Input"
                ]
            }
        },
        "MatchmakerMultiPaxosNet.placement": {
            "name": "placement",
            "location": 177,
            "return": [
                "MatchmakerMultiPaxosNet.Placement"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatchmakerMultiPaxosNet.config": {
            "name": "config",
            "location": 212,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatchmakerMultiPaxosSuite.__init__": {
            "name": "__init__",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatchmakerMultiPaxosSuite._connect": {
            "name": "_connect",
            "location": 249,
            "return": [
                "host.Host"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str"
                ]
            }
        },
        "MatchmakerMultiPaxosSuite.run_benchmark": {
            "name": "run_benchmark",
            "location": 258,
            "return": [
                "benchmark.RecorderOutput"
            ],
            "arguments": {
                "self": [],
                "bench": [
                    "benchmark.BenchmarkDirectory"
                ],
                "args": [
                    "dict"
                ],
                "input": [
                    "Input"
                ]
            }
        },
        "MatchmakerMultiPaxosNet.placement.portify": {
            "name": "portify",
            "location": 180,
            "return": [
                "list[]",
                "int",
                "bool",
                "str",
                "pandas.DataFrame"
            ],
            "arguments": {
                "hosts": []
            }
        },
        "MatchmakerMultiPaxosNet.placement.cycle_take_n": {
            "name": "cycle_take_n",
            "location": 183,
            "return": [
                "list[]",
                "List[int]",
                "float",
                "List[Dict]",
                "Tuple[int]",
                "list",
                "Sequence[str]",
                "List[float]",
                "Tuple[int, int, int]"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "hosts": [
                    "int"
                ]
            }
        },
        "MatchmakerMultiPaxosSuite.run_benchmark.java": {
            "name": "java",
            "location": 268,
            "return": [
                "list[typing.Text]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "heap_size": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/matchmakermultipaxos/smoke.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.SmokeMatchmakerMultiPaxosSuite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.SmokeMatchmakerMultiPaxosSuite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "list[Input]",
                "str",
                "bool",
                "List[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.SmokeMatchmakerMultiPaxosSuite.summary": {
            "name": "summary",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "output": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/matchmakermultipaxos/vldb_ablation.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.AblationSuite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.AblationSuite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "bool",
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.AblationSuite.summary": {
            "name": "summary",
            "location": 134,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "output": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/matchmakermultipaxos/vldb_chaos.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.ChaosSuite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.ChaosSuite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "bool",
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.ChaosSuite.summary": {
            "name": "summary",
            "location": 119,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "output": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/matchmakermultipaxos/vldb_leader_failure.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.LeaderFailureSuite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.LeaderFailureSuite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "list[]",
                "str",
                "bool",
                "List[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.LeaderFailureSuite.summary": {
            "name": "summary",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "output": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/matchmakermultipaxos/vldb_leader_reconfiguration.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.LeaderReconfigurationSuite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.LeaderReconfigurationSuite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "str",
                "bool",
                "List[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.LeaderReconfigurationSuite.summary": {
            "name": "summary",
            "location": 120,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "output": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/matchmakermultipaxos/vldb_lt.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.LatencyThroughputSuite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.LatencyThroughputSuite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "bool",
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.LatencyThroughputSuite.summary": {
            "name": "summary",
            "location": 120,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "output": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/matchmakermultipaxos/vldb_matchmaker_reconfiguration.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.MatchmakerReconfigurationSuite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.MatchmakerReconfigurationSuite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "list[]",
                "str",
                "bool",
                "List[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.MatchmakerReconfigurationSuite.summary": {
            "name": "summary",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "output": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/matchmakermultipaxos/__init__.py": {},
    "frankenpaxos-master/benchmarks/mencius/eurosys_lt.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.SmokeMenciusSuite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.SmokeMenciusSuite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "list[Input]",
                "bool",
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.SmokeMenciusSuite.summary": {
            "name": "summary",
            "location": 131,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "output": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/mencius/mencius.py": {
        "get_parser": {
            "name": "get_parser",
            "location": 674,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "MenciusNet.__init__": {
            "name": "__init__",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cluster_file": [
                    "str"
                ],
                "key_filename": [
                    "Optional[str]"
                ],
                "input": [
                    "Input"
                ]
            }
        },
        "MenciusNet._connect": {
            "name": "_connect",
            "location": 160,
            "return": [
                "host.Host"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str"
                ]
            }
        },
        "MenciusNet.placement": {
            "name": "placement",
            "location": 179,
            "return": [
                "MenciusNet.Placement"
            ],
            "arguments": {
                "self": []
            }
        },
        "MenciusNet.config": {
            "name": "config",
            "location": 249,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MenciusSuite.run_benchmark": {
            "name": "run_benchmark",
            "location": 294,
            "return": [
                "benchmark.RecorderOutput"
            ],
            "arguments": {
                "self": [],
                "bench": [
                    "benchmark.BenchmarkDirectory"
                ],
                "args": [
                    "dict"
                ],
                "input": [
                    "Input"
                ]
            }
        },
        "MenciusSuite._run_benchmark": {
            "name": "_run_benchmark",
            "location": 299,
            "return": [
                "benchmark.RecorderOutput"
            ],
            "arguments": {
                "self": [],
                "bench": [
                    "benchmark.BenchmarkDirectory"
                ],
                "args": [
                    "dict"
                ],
                "input": [
                    "Input"
                ],
                "net": [
                    "MenciusNet"
                ]
            }
        },
        "MenciusNet.placement.portify": {
            "name": "portify",
            "location": 182,
            "return": [
                "list[]",
                "int",
                "bool",
                "str",
                "pandas.DataFrame"
            ],
            "arguments": {
                "hosts": []
            }
        },
        "MenciusNet.placement.cycle_take_n": {
            "name": "cycle_take_n",
            "location": 185,
            "return": [
                "list[]",
                "List[int]",
                "float",
                "List[Dict]",
                "Tuple[int]",
                "list",
                "Sequence[str]",
                "List[float]",
                "Tuple[int, int, int]"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "hosts": [
                    "int"
                ]
            }
        },
        "MenciusNet.placement.chunks": {
            "name": "chunks",
            "location": 188,
            "return": [
                "list[]",
                "List[str]",
                "deoplete.util.Candidates",
                "List[float]",
                "Optional[dict]",
                "Set[int]",
                "Set[str]",
                "denite.util.Candidates",
                "Iterable"
            ],
            "arguments": {
                "xs": [
                    "int",
                    "str"
                ],
                "n": [
                    "int",
                    "str"
                ]
            }
        },
        "MenciusSuite._run_benchmark.java": {
            "name": "java",
            "location": 310,
            "return": [
                "list[typing.Text]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "heap_size": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/mencius/smoke.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.SmokeMenciusSuite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.SmokeMenciusSuite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "list[]",
                "str",
                "Dict[str, Any]",
                "Iterable"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.SmokeMenciusSuite.summary": {
            "name": "summary",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "output": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/mencius/__init__.py": {},
    "frankenpaxos-master/benchmarks/multipaxos/e1_lt_surprise.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.E1LtSurpriseMultiPaxosSuite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.E1LtSurpriseMultiPaxosSuite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "Input",
                "bool",
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.E1LtSurpriseMultiPaxosSuite.summary": {
            "name": "summary",
            "location": 162,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "output": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/multipaxos/e2_no_scale_replica.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.E2NoScaleMultiPaxosSuite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.E2NoScaleMultiPaxosSuite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "bool",
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.E2NoScaleMultiPaxosSuite.summary": {
            "name": "summary",
            "location": 149,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "output": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/multipaxos/e3_no_scale_fraction.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.E3NoScaleFractionMultiPaxosSuite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.E3NoScaleFractionMultiPaxosSuite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "bool",
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.E3NoScaleFractionMultiPaxosSuite.summary": {
            "name": "summary",
            "location": 161,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "output": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/multipaxos/e4_scale_replica.py": {
        "rf": {
            "name": "rf",
            "location": 4,
            "return": [
                "int"
            ],
            "arguments": {
                "num_writers": [
                    "int"
                ],
                "num_clients": [
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.E4ScaleReplicaMultiPaxosSuite.args": {
            "name": "args",
            "location": 10,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.E4ScaleReplicaMultiPaxosSuite.inputs": {
            "name": "inputs",
            "location": 13,
            "return": [
                "bool",
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.E4ScaleReplicaMultiPaxosSuite.summary": {
            "name": "summary",
            "location": 161,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "output": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/multipaxos/eurosys_ablation.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.EuroSysAblationMultiPaxosSuite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.EuroSysAblationMultiPaxosSuite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "list[]",
                "bool",
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.EuroSysAblationMultiPaxosSuite.summary": {
            "name": "summary",
            "location": 119,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "output": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/multipaxos/eurosys_lt.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.EuroSysLtMultiPaxosSuite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.EuroSysLtMultiPaxosSuite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "list[]",
                "bool",
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.EuroSysLtMultiPaxosSuite.summary": {
            "name": "summary",
            "location": 122,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "output": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/multipaxos/evelyn_tests.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.EvelynTestsMultiPaxosSuite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.EvelynTestsMultiPaxosSuite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "list[]",
                "bool",
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.EvelynTestsMultiPaxosSuite.summary": {
            "name": "summary",
            "location": 178,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "float"
                ],
                "output": [
                    "float"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/multipaxos/multipaxos.py": {
        "get_parser": {
            "name": "get_parser",
            "location": 784,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "MultiPaxosNet.__init__": {
            "name": "__init__",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cluster": [
                    "cluster.Cluster"
                ],
                "input": [
                    "Input"
                ]
            }
        },
        "MultiPaxosNet.placement": {
            "name": "placement",
            "location": 200,
            "return": [
                "MultiPaxosNet.Placement"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiPaxosNet.config": {
            "name": "config",
            "location": 249,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiPaxosSuite.__init__": {
            "name": "__init__",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiPaxosSuite._connect": {
            "name": "_connect",
            "location": 298,
            "return": [
                "host.Host"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str"
                ]
            }
        },
        "MultiPaxosSuite.run_benchmark": {
            "name": "run_benchmark",
            "location": 307,
            "return": [
                "MultiPaxosOutput"
            ],
            "arguments": {
                "self": [],
                "bench": [
                    "benchmark.BenchmarkDirectory"
                ],
                "args": [
                    "dict"
                ],
                "input": [
                    "Input"
                ]
            }
        },
        "MultiPaxosNet.placement.portify": {
            "name": "portify",
            "location": 203,
            "return": [
                "list[]",
                "int",
                "bool",
                "str",
                "pandas.DataFrame"
            ],
            "arguments": {
                "hosts": []
            }
        },
        "MultiPaxosNet.placement.cycle_take_n": {
            "name": "cycle_take_n",
            "location": 206,
            "return": [
                "list[]",
                "List[int]",
                "float",
                "List[Dict]",
                "Tuple[int]",
                "list",
                "Sequence[str]",
                "List[float]",
                "Tuple[int, int, int]"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "hosts": [
                    "int"
                ]
            }
        },
        "MultiPaxosNet.placement.chunks": {
            "name": "chunks",
            "location": 209,
            "return": [
                "list[]",
                "deoplete.util.UserContext",
                "bool",
                "pandas.DataFrame",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "xs": [
                    "int",
                    "List[str]"
                ],
                "n": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "MultiPaxosSuite.run_benchmark.java": {
            "name": "java",
            "location": 311,
            "return": [
                "list[typing.Text]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "heap_size": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/multipaxos/smoke.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.SmokeMultiPaxosSuite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.SmokeMultiPaxosSuite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "list[]",
                "str",
                "Dict[str, Any]",
                "Iterable"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.SmokeMultiPaxosSuite.summary": {
            "name": "summary",
            "location": 106,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "str",
                    "list",
                    "List[T]"
                ],
                "output": [
                    "str",
                    "list",
                    "List[T]"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/multipaxos/__init__.py": {},
    "frankenpaxos-master/benchmarks/nsdi/fig1_lt_plot.py": {
        "add_num_clients": {
            "name": "add_num_clients",
            "location": 17,
            "return": [
                "pandas.DataFrame",
                "bool",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "df": [
                    "list[dict[, ]]",
                    "pandas.DataFrame",
                    "bool",
                    "List[dict]",
                    "int"
                ]
            }
        },
        "plot_latency_throughput": {
            "name": "plot_latency_throughput",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "pandas.DataFrame",
                    "bool",
                    "Sequence[str]",
                    "str"
                ],
                "ax": [
                    "str",
                    "matplotlib.pyploAxes",
                    "numpy.array"
                ],
                "label": [
                    "str"
                ]
            }
        },
        "make_figure": {
            "name": "make_figure",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "output_filename": [
                    "str"
                ],
                "multipaxos_df": [
                    "set[str]",
                    "pandas.DataFrame",
                    "str",
                    "None",
                    "int",
                    "Optional[Set[str]]",
                    "Optional[int]",
                    "typing.Iterator",
                    "Iterator[int]"
                ],
                "epaxos_df": [
                    "pandas.DataFrame",
                    "Optional[Set[str]]",
                    "str",
                    "Optional[int]",
                    "int",
                    "Iterator[int]"
                ],
                "bpaxos_df": [
                    "pandas.DataFrame",
                    "Optional[Set[str]]",
                    "str",
                    "Optional[int]",
                    "int",
                    "Iterator[int]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 73,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        }
    },
    "frankenpaxos-master/benchmarks/nsdi/fig2_ablation_plot.py": {
        "avg_latency": {
            "name": "avg_latency",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "df": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "std_latency": {
            "name": "std_latency",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "df": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "avg_throughput": {
            "name": "avg_throughput",
            "location": 25,
            "return": [
                "str",
                "\"Pipeline\""
            ],
            "arguments": {
                "df": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "std_throughput": {
            "name": "std_throughput",
            "location": 29,
            "return": [
                "str",
                "\"Pipeline\""
            ],
            "arguments": {
                "df": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "add_num_clients": {
            "name": "add_num_clients",
            "location": 33,
            "return": [
                "pandas.DataFrame",
                "bool",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "df": [
                    "list[dict[, ]]",
                    "pandas.DataFrame",
                    "bool",
                    "List[dict]",
                    "int"
                ]
            }
        },
        "plot_latency_throughput": {
            "name": "plot_latency_throughput",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "pandas.DataFrame",
                    "bool",
                    "Sequence[str]",
                    "str"
                ],
                "ax": [
                    "int",
                    "bool"
                ],
                "label": [
                    "str"
                ]
            }
        },
        "latency_figure": {
            "name": "latency_figure",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "output_filename": [
                    "str"
                ],
                "superbpaxos_df": [
                    "set[str]",
                    "pandas.DataFrame",
                    "str",
                    "None",
                    "int",
                    "Optional[Set[str]]",
                    "Optional[int]",
                    "typing.Iterator",
                    "Iterator[int]"
                ],
                "simplebpaxos_df": [
                    "str",
                    "pandas.DataFrame",
                    "Optional[Set[str]]",
                    "Optional[int]",
                    "int",
                    "Iterator[int]"
                ]
            }
        },
        "throughput_figure": {
            "name": "throughput_figure",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "output_filename": [
                    "str"
                ],
                "superbpaxos_df": [
                    "set[str]",
                    "pandas.DataFrame",
                    "str",
                    "None",
                    "int",
                    "Optional[Set[str]]",
                    "Optional[int]",
                    "typing.Iterator",
                    "Iterator[int]"
                ],
                "simplebpaxos_df": [
                    "str",
                    "pandas.DataFrame",
                    "Optional[Set[str]]",
                    "Optional[int]",
                    "int",
                    "Iterator[int]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 133,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        }
    },
    "frankenpaxos-master/benchmarks/nsdi/__init__.py": {},
    "frankenpaxos-master/benchmarks/scalog/scalog.py": {
        "get_parser": {
            "name": "get_parser",
            "location": 663,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "ScalogNet.__init__": {
            "name": "__init__",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cluster": [
                    "cluster.Cluster"
                ],
                "input": [
                    "Input"
                ]
            }
        },
        "ScalogNet.placement": {
            "name": "placement",
            "location": 169,
            "return": [
                "ScalogNet.Placement"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScalogNet.config": {
            "name": "config",
            "location": 217,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScalogSuite.__init__": {
            "name": "__init__",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScalogSuite._connect": {
            "name": "_connect",
            "location": 260,
            "return": [
                "host.Host"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str"
                ]
            }
        },
        "ScalogSuite.run_benchmark": {
            "name": "run_benchmark",
            "location": 269,
            "return": [
                "ScalogOutput"
            ],
            "arguments": {
                "self": [],
                "bench": [
                    "benchmark.BenchmarkDirectory"
                ],
                "args": [
                    "dict"
                ],
                "input": [
                    "Input"
                ]
            }
        },
        "ScalogNet.placement.portify": {
            "name": "portify",
            "location": 172,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "h": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ScalogNet.placement.portify_all": {
            "name": "portify_all",
            "location": 175,
            "return": [
                "list[]",
                "List[int]",
                "int",
                "List[Tuple[int, str, str]]",
                "Tuple[int]",
                "Optional[dict]",
                "list",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "hosts": [
                    "int",
                    "datetime.timedelta",
                    "str",
                    "Set[str]"
                ]
            }
        },
        "ScalogNet.placement.cycle_take_n": {
            "name": "cycle_take_n",
            "location": 178,
            "return": [
                "list[]",
                "List[int]",
                "float",
                "List[Dict]",
                "Tuple[int]",
                "list",
                "Sequence[str]",
                "List[float]",
                "Tuple[int, int, int]"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "hosts": [
                    "int"
                ]
            }
        },
        "ScalogNet.placement.chunks": {
            "name": "chunks",
            "location": 181,
            "return": [
                "list[]",
                "deoplete.util.UserContext",
                "bool",
                "pandas.DataFrame",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "xs": [
                    "int",
                    "List[str]"
                ],
                "n": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "ScalogSuite.run_benchmark.java": {
            "name": "java",
            "location": 273,
            "return": [
                "list[typing.Text]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "heap_size": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/scalog/smoke.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.SmokeScalogSuite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.SmokeScalogSuite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "list[Input]",
                "str",
                "Dict[str, Any]",
                "Iterable"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.SmokeScalogSuite.summary": {
            "name": "summary",
            "location": 98,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "output": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/scalog/__init__.py": {},
    "frankenpaxos-master/benchmarks/simplebpaxos/nsdi_fig1_lt.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.NsdiFig1LtSimpleBPaxosSuite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.NsdiFig1LtSimpleBPaxosSuite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "list[Input]",
                "str",
                "bool",
                "List[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.NsdiFig1LtSimpleBPaxosSuite.summary": {
            "name": "summary",
            "location": 106,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "Union[Iterable[int], int]",
                    "int"
                ],
                "output": [
                    "Union[Iterable[int], int]",
                    "int"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/simplebpaxos/nsdi_fig2_ablation.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.NsdiFig2AblationSimpleBPaxosSuite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.NsdiFig2AblationSimpleBPaxosSuite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "list[]",
                "bool",
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.NsdiFig2AblationSimpleBPaxosSuite.summary": {
            "name": "summary",
            "location": 87,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "output": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/simplebpaxos/simplebpaxos.py": {
        "get_parser": {
            "name": "get_parser",
            "location": 552,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "SimpleBPaxosNet.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cluster_file": [
                    "str"
                ],
                "key_filename": [
                    "Optional[str]"
                ],
                "input": [
                    "Input"
                ]
            }
        },
        "SimpleBPaxosNet._connect": {
            "name": "_connect",
            "location": 139,
            "return": [
                "host.Host"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str"
                ]
            }
        },
        "SimpleBPaxosNet.placement": {
            "name": "placement",
            "location": 156,
            "return": [
                "SimpleBPaxosNet.Placement"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleBPaxosNet.config": {
            "name": "config",
            "location": 186,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleBPaxosSuite.run_benchmark": {
            "name": "run_benchmark",
            "location": 215,
            "return": [
                "benchmark.RecorderOutput"
            ],
            "arguments": {
                "self": [],
                "bench": [
                    "benchmark.BenchmarkDirectory"
                ],
                "args": [
                    "dict"
                ],
                "input": [
                    "Input"
                ]
            }
        },
        "SimpleBPaxosSuite._run_benchmark": {
            "name": "_run_benchmark",
            "location": 220,
            "return": [
                "benchmark.RecorderOutput"
            ],
            "arguments": {
                "self": [],
                "bench": [
                    "benchmark.BenchmarkDirectory"
                ],
                "args": [
                    "dict"
                ],
                "input": [
                    "Input"
                ],
                "net": [
                    "SimpleBPaxosNet"
                ]
            }
        },
        "SimpleBPaxosNet.placement.portify": {
            "name": "portify",
            "location": 159,
            "return": [
                "list[]",
                "int",
                "bool",
                "str",
                "pandas.DataFrame"
            ],
            "arguments": {
                "hosts": []
            }
        },
        "SimpleBPaxosNet.placement.cycle_take_n": {
            "name": "cycle_take_n",
            "location": 162,
            "return": [
                "list[]",
                "List[int]",
                "float",
                "List[Dict]",
                "Tuple[int]",
                "list",
                "Sequence[str]",
                "List[float]",
                "Tuple[int, int, int]"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "hosts": [
                    "int"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/simplebpaxos/smoke.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.SmokeSimpleBPaxosSuite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.SmokeSimpleBPaxosSuite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "list[]",
                "str",
                "Dict[str, Any]",
                "Iterable"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.SmokeSimpleBPaxosSuite.summary": {
            "name": "summary",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "output": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/simplebpaxos/__init__.py": {},
    "frankenpaxos-master/benchmarks/simplegcbpaxos/simplegcbpaxos.py": {
        "get_parser": {
            "name": "get_parser",
            "location": 621,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "SimpleGcBPaxosNet.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cluster_file": [
                    "str"
                ],
                "key_filename": [
                    "Optional[str]"
                ],
                "input": [
                    "Input"
                ]
            }
        },
        "SimpleGcBPaxosNet._connect": {
            "name": "_connect",
            "location": 151,
            "return": [
                "host.Host"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str"
                ]
            }
        },
        "SimpleGcBPaxosNet.placement": {
            "name": "placement",
            "location": 169,
            "return": [
                "SimpleGcBPaxosNet.Placement"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleGcBPaxosNet.config": {
            "name": "config",
            "location": 199,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleGcBPaxosSuite.run_benchmark": {
            "name": "run_benchmark",
            "location": 232,
            "return": [
                "benchmark.RecorderOutput"
            ],
            "arguments": {
                "self": [],
                "bench": [
                    "benchmark.BenchmarkDirectory"
                ],
                "args": [
                    "dict"
                ],
                "input": [
                    "Input"
                ]
            }
        },
        "SimpleGcBPaxosSuite._run_benchmark": {
            "name": "_run_benchmark",
            "location": 237,
            "return": [
                "benchmark.RecorderOutput"
            ],
            "arguments": {
                "self": [],
                "bench": [
                    "benchmark.BenchmarkDirectory"
                ],
                "args": [
                    "dict"
                ],
                "input": [
                    "Input"
                ],
                "net": [
                    "SimpleGcBPaxosNet"
                ]
            }
        },
        "SimpleGcBPaxosNet.placement.portify": {
            "name": "portify",
            "location": 172,
            "return": [
                "list[]",
                "int",
                "bool",
                "str",
                "pandas.DataFrame"
            ],
            "arguments": {
                "hosts": []
            }
        },
        "SimpleGcBPaxosNet.placement.cycle_take_n": {
            "name": "cycle_take_n",
            "location": 175,
            "return": [
                "list[]",
                "List[int]",
                "float",
                "List[Dict]",
                "Tuple[int]",
                "list",
                "Sequence[str]",
                "List[float]",
                "Tuple[int, int, int]"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "hosts": [
                    "int"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/simplegcbpaxos/smoke.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.SmokeSimpleGcBPaxosSuite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.SmokeSimpleGcBPaxosSuite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "list[Input]",
                "str",
                "Dict[str, Any]",
                "Iterable"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.SmokeSimpleGcBPaxosSuite.summary": {
            "name": "summary",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "output": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/simplegcbpaxos/__init__.py": {},
    "frankenpaxos-master/benchmarks/superbpaxos/nsdi_fig2_ablation.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.NsdiFig2AblationSuperBPaxosSuite.args": {
            "name": "args",
            "location": 7,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.NsdiFig2AblationSuperBPaxosSuite.inputs": {
            "name": "inputs",
            "location": 10,
            "return": [
                "list[]",
                "str",
                "Dict[str, Dict[str, Any]]",
                "Optional[Literal]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.NsdiFig2AblationSuperBPaxosSuite.summary": {
            "name": "summary",
            "location": 89,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "output": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/superbpaxos/smoke.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.SmokeSuperBPaxosSuite.args": {
            "name": "args",
            "location": 7,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.SmokeSuperBPaxosSuite.inputs": {
            "name": "inputs",
            "location": 10,
            "return": [
                "list[]",
                "str",
                "Dict[str, Dict[str, Any]]",
                "Optional[Literal]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.SmokeSuperBPaxosSuite.summary": {
            "name": "summary",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "output": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/superbpaxos/superbpaxos.py": {
        "get_parser": {
            "name": "get_parser",
            "location": 278,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "SuperBPaxosSuite.run_benchmark": {
            "name": "run_benchmark",
            "location": 33,
            "return": [
                "benchmark.RecorderOutput"
            ],
            "arguments": {
                "self": [],
                "bench": [
                    "benchmark.BenchmarkDirectory"
                ],
                "args": [
                    "dict"
                ],
                "input": [
                    "simplebpaxos.Input"
                ]
            }
        },
        "SuperBPaxosSuite._run_benchmark": {
            "name": "_run_benchmark",
            "location": 40,
            "return": [
                "benchmark.RecorderOutput"
            ],
            "arguments": {
                "self": [],
                "bench": [
                    "benchmark.BenchmarkDirectory"
                ],
                "args": [
                    "dict"
                ],
                "input": [
                    "simplebpaxos.Input"
                ],
                "net": [
                    "simplebpaxos.SimpleBPaxosNet"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/superbpaxos/__init__.py": {},
    "frankenpaxos-master/benchmarks/supermencius/eurosys_lt.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.EuroSysLtSuperMenciusSuite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.EuroSysLtSuperMenciusSuite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "list[]",
                "str",
                "Dict[str, Dict[str, Any]]",
                "Optional[Literal]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.EuroSysLtSuperMenciusSuite.summary": {
            "name": "summary",
            "location": 126,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "output": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/supermencius/smoke.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.SmokeSuperMenciusSuite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.SmokeSuperMenciusSuite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "list[]",
                "str",
                "Dict[str, Dict[str, Any]]",
                "Optional[Literal]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.SmokeSuperMenciusSuite.summary": {
            "name": "summary",
            "location": 89,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "output": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/supermencius/supermencius.py": {
        "get_parser": {
            "name": "get_parser",
            "location": 272,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "SuperMenciusSuite.run_benchmark": {
            "name": "run_benchmark",
            "location": 32,
            "return": [
                "benchmark.RecorderOutput"
            ],
            "arguments": {
                "self": [],
                "bench": [
                    "benchmark.BenchmarkDirectory"
                ],
                "args": [
                    "dict"
                ],
                "input": [
                    "mencius.Input"
                ]
            }
        },
        "SuperMenciusSuite._run_benchmark": {
            "name": "_run_benchmark",
            "location": 38,
            "return": [
                "benchmark.RecorderOutput"
            ],
            "arguments": {
                "self": [],
                "bench": [
                    "benchmark.BenchmarkDirectory"
                ],
                "args": [
                    "dict"
                ],
                "input": [
                    "mencius.Input"
                ],
                "net": [
                    "mencius.MenciusNet"
                ]
            }
        },
        "SuperMenciusSuite._run_benchmark.java": {
            "name": "java",
            "location": 49,
            "return": [
                "list[typing.Text]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "heap_size": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/supermencius/__init__.py": {},
    "frankenpaxos-master/benchmarks/supermultipaxos/eurosys_lt.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.EuroSysLtSuperMultiPaxosSuite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.EuroSysLtSuperMultiPaxosSuite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "list[]",
                "str",
                "Dict[str, Dict[str, Any]]",
                "Optional[Literal]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.EuroSysLtSuperMultiPaxosSuite.summary": {
            "name": "summary",
            "location": 116,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "output": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/supermultipaxos/smoke.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.SmokeSuperMultiPaxosSuite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.SmokeSuperMultiPaxosSuite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "list[]",
                "str",
                "Dict[str, Dict[str, Any]]",
                "Optional[Literal]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.SmokeSuperMultiPaxosSuite.summary": {
            "name": "summary",
            "location": 86,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "output": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/supermultipaxos/supermultipaxos.py": {
        "get_parser": {
            "name": "get_parser",
            "location": 273,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "SuperMultiPaxosSuite.run_benchmark": {
            "name": "run_benchmark",
            "location": 33,
            "return": [
                "multipaxos.MultiPaxosOutput"
            ],
            "arguments": {
                "self": [],
                "bench": [
                    "benchmark.BenchmarkDirectory"
                ],
                "args": [
                    "dict"
                ],
                "input": [
                    "multipaxos.Input"
                ]
            }
        },
        "SuperMultiPaxosSuite._run_benchmark": {
            "name": "_run_benchmark",
            "location": 40,
            "return": [
                "multipaxos.MultiPaxosOutput"
            ],
            "arguments": {
                "self": [],
                "bench": [
                    "benchmark.BenchmarkDirectory"
                ],
                "args": [
                    "dict"
                ],
                "input": [
                    "multipaxos.Input"
                ],
                "net": [
                    "multipaxos.MultiPaxosNet"
                ]
            }
        },
        "SuperMultiPaxosSuite._run_benchmark.java": {
            "name": "java",
            "location": 50,
            "return": [
                "list[typing.Text]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "heap_size": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/supermultipaxos/__init__.py": {},
    "frankenpaxos-master/benchmarks/unanimousbpaxos/smoke.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.SmokeUnanimousBPaxosSuite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.SmokeUnanimousBPaxosSuite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "list[Input]",
                "bool",
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.SmokeUnanimousBPaxosSuite.summary": {
            "name": "summary",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "output": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/unanimousbpaxos/unanimousbpaxos.py": {
        "get_parser": {
            "name": "get_parser",
            "location": 369,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "UnanimousBPaxosNet.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cluster_file": [
                    "str"
                ],
                "key_filename": [
                    "Optional[str]"
                ],
                "input": [
                    "Input"
                ]
            }
        },
        "UnanimousBPaxosNet._connect": {
            "name": "_connect",
            "location": 98,
            "return": [
                "host.Host"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str"
                ]
            }
        },
        "UnanimousBPaxosNet.placement": {
            "name": "placement",
            "location": 110,
            "return": [
                "UnanimousBPaxosNet.Placement"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnanimousBPaxosNet.config": {
            "name": "config",
            "location": 133,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnanimousBPaxosSuite.run_benchmark": {
            "name": "run_benchmark",
            "location": 154,
            "return": [
                "benchmark.RecorderOutput"
            ],
            "arguments": {
                "self": [],
                "bench": [
                    "benchmark.BenchmarkDirectory"
                ],
                "args": [
                    "dict"
                ],
                "input": [
                    "Input"
                ]
            }
        },
        "UnanimousBPaxosSuite._run_benchmark": {
            "name": "_run_benchmark",
            "location": 159,
            "return": [
                "benchmark.RecorderOutput"
            ],
            "arguments": {
                "self": [],
                "bench": [
                    "benchmark.BenchmarkDirectory"
                ],
                "args": [
                    "dict"
                ],
                "input": [
                    "Input"
                ],
                "net": [
                    "UnanimousBPaxosNet"
                ]
            }
        },
        "UnanimousBPaxosNet.placement.portify": {
            "name": "portify",
            "location": 113,
            "return": [
                "list[]",
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "hosts": []
            }
        },
        "UnanimousBPaxosNet.placement.cycle_take_n": {
            "name": "cycle_take_n",
            "location": 116,
            "return": [
                "list[]",
                "List[int]",
                "float",
                "List[Dict]",
                "Tuple[int]",
                "list",
                "Sequence[str]",
                "List[float]",
                "Tuple[int, int, int]"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "hosts": [
                    "int"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/unanimousbpaxos/__init__.py": {},
    "frankenpaxos-master/benchmarks/unreplicated/eurosys_lt.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.EuroSysLtUnreplicatedSuite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.EuroSysLtUnreplicatedSuite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "list[Input]",
                "str",
                "Dict[str, Dict[str, Any]]",
                "Optional[bool]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.EuroSysLtUnreplicatedSuite.summary": {
            "name": "summary",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "bool"
                ],
                "output": [
                    "bool"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/unreplicated/smoke.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.SmokeUnreplicatedSuite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.SmokeUnreplicatedSuite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "list[]",
                "str",
                "Dict[str, Dict[str, Any]]",
                "Optional[bool]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.SmokeUnreplicatedSuite.summary": {
            "name": "summary",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "bool",
                    "int"
                ],
                "output": [
                    "bool",
                    "int"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/unreplicated/unreplicated.py": {
        "get_parser": {
            "name": "get_parser",
            "location": 276,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "UnreplicatedNet.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cluster": [
                    "cluster.Cluster"
                ],
                "input": [
                    "Input"
                ]
            }
        },
        "UnreplicatedNet.placement": {
            "name": "placement",
            "location": 81,
            "return": [
                "UnreplicatedNet.Placement"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnreplicatedSuite.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnreplicatedSuite._connect": {
            "name": "_connect",
            "location": 108,
            "return": [
                "host.Host"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str"
                ]
            }
        },
        "UnreplicatedSuite.run_benchmark": {
            "name": "run_benchmark",
            "location": 117,
            "return": [
                "benchmark.RecorderOutput"
            ],
            "arguments": {
                "self": [],
                "bench": [
                    "benchmark.BenchmarkDirectory"
                ],
                "args": [
                    "dict"
                ],
                "input": [
                    "Input"
                ]
            }
        },
        "UnreplicatedNet.placement.portify_one": {
            "name": "portify_one",
            "location": 84,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "h": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "UnreplicatedNet.placement.portify": {
            "name": "portify",
            "location": 87,
            "return": [
                "list[]",
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "hosts": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "UnreplicatedNet.placement.cycle_take_n": {
            "name": "cycle_take_n",
            "location": 90,
            "return": [
                "list[]",
                "List[int]",
                "float",
                "List[Dict]",
                "Tuple[int]",
                "list",
                "Sequence[str]",
                "List[float]",
                "Tuple[int, int, int]"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "hosts": [
                    "int"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/unreplicated/__init__.py": {},
    "frankenpaxos-master/benchmarks/vanillamencius/lt.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.LtVanillaMenciusSuite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.LtVanillaMenciusSuite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "Input",
                "str",
                "bool",
                "List[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.LtVanillaMenciusSuite.summary": {
            "name": "summary",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "output": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/vanillamencius/smoke.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.SmokeVanillaMenciusSuite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.SmokeVanillaMenciusSuite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "list[]",
                "str",
                "Dict[str, Any]",
                "Iterable"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.SmokeVanillaMenciusSuite.summary": {
            "name": "summary",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "output": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/vanillamencius/vanillamencius.py": {
        "get_parser": {
            "name": "get_parser",
            "location": 357,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "VanillaMenciusNet.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cluster": [
                    "cluster.Cluster"
                ],
                "input": [
                    "Input"
                ]
            }
        },
        "VanillaMenciusNet.placement": {
            "name": "placement",
            "location": 106,
            "return": [
                "VanillaMenciusNet.Placement"
            ],
            "arguments": {
                "self": []
            }
        },
        "VanillaMenciusNet.config": {
            "name": "config",
            "location": 127,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VanillaMenciusSuite.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VanillaMenciusSuite._connect": {
            "name": "_connect",
            "location": 148,
            "return": [
                "host.Host"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str"
                ]
            }
        },
        "VanillaMenciusSuite.run_benchmark": {
            "name": "run_benchmark",
            "location": 157,
            "return": [
                "VanillaMenciusOutput"
            ],
            "arguments": {
                "self": [],
                "bench": [
                    "benchmark.BenchmarkDirectory"
                ],
                "args": [
                    "dict"
                ],
                "input": [
                    "Input"
                ]
            }
        },
        "VanillaMenciusNet.placement.portify": {
            "name": "portify",
            "location": 109,
            "return": [
                "list[]",
                "int",
                "bool",
                "str",
                "pandas.DataFrame"
            ],
            "arguments": {
                "hosts": []
            }
        },
        "VanillaMenciusNet.placement.cycle_take_n": {
            "name": "cycle_take_n",
            "location": 112,
            "return": [
                "list[]",
                "List[int]",
                "float",
                "List[Dict]",
                "Tuple[int]",
                "list",
                "Sequence[str]",
                "List[float]",
                "Tuple[int, int, int]"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "hosts": [
                    "int"
                ]
            }
        },
        "VanillaMenciusSuite.run_benchmark.java": {
            "name": "java",
            "location": 161,
            "return": [
                "list[typing.Text]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "heap_size": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/vanillamencius/__init__.py": {},
    "frankenpaxos-master/benchmarks/vldb20_matchmaker/__init__.py": {},
    "frankenpaxos-master/benchmarks/vldb20_matchmaker/ablation/plot.py": {
        "read_data": {
            "name": "read_data",
            "location": 19,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "file": [
                    "str"
                ],
                "drop_head": [
                    "float"
                ],
                "drop_tail": [
                    "float"
                ]
            }
        },
        "plot_throughput": {
            "name": "plot_throughput",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "ax": [
                    "str",
                    "dict"
                ],
                "label": [
                    "str"
                ],
                "color": [
                    "str"
                ],
                "s": [
                    "Optional[List[str]]",
                    "bool",
                    "str",
                    "int",
                    "Callable"
                ],
                "sample_every": [
                    "int"
                ]
            }
        },
        "plot_latency": {
            "name": "plot_latency",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "ax": [
                    "Optional[datetime.datetime]",
                    "bool",
                    "Dict[str, str]",
                    "int"
                ],
                "label": [
                    "str"
                ],
                "color": [
                    "str"
                ],
                "s": [
                    "str",
                    "int",
                    "bytes",
                    "pandas.DataFrame"
                ],
                "sample_every": [
                    "int"
                ]
            }
        },
        "plot": {
            "name": "plot",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "baseline": [
                    "pandas.DataFrame",
                    "int",
                    "Tuple[float, float, float, float]"
                ],
                "gc": [
                    "pandas.DataFrame",
                    "int",
                    "Tuple[float, float, float, float]"
                ],
                "phase1": [
                    "pandas.DataFrame",
                    "int",
                    "Tuple[float, float, float, float]"
                ],
                "matchmaking": [
                    "pandas.DataFrame",
                    "int",
                    "Tuple[float, float, float, float]"
                ],
                "output_filename": [
                    "str"
                ],
                "start_time": [
                    "float"
                ],
                "sample_every": [
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 154,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        }
    },
    "frankenpaxos-master/benchmarks/vldb20_matchmaker/ablation/__init__.py": {},
    "frankenpaxos-master/benchmarks/vldb20_matchmaker/chaos/plot.py": {
        "read_data": {
            "name": "read_data",
            "location": 22,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "file": [
                    "str"
                ],
                "drop_head": [
                    "float"
                ],
                "drop_tail": [
                    "float"
                ],
                "nudge": [
                    "datetime.timedelta"
                ]
            }
        },
        "split": {
            "name": "split",
            "location": 44,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "df": [
                    "pandas.DataFrame",
                    "str",
                    "int",
                    "List[Tuple[str, int, int]]",
                    "list"
                ]
            }
        },
        "plot_throughput": {
            "name": "plot_throughput",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "ax": [
                    "str",
                    "matplotlib.pyploAxes",
                    "int",
                    "Sequence[int]",
                    "datetime.date.time",
                    "pandas.Timestamp"
                ],
                "n": [
                    "int"
                ],
                "before": [
                    "int",
                    "float",
                    "bool",
                    "pandas.DataFrame"
                ],
                "after": [
                    "bool",
                    "Union[int, float]",
                    "int",
                    "Optional[int]"
                ],
                "sample_every": [
                    "int"
                ],
                "marker": [
                    "str"
                ]
            }
        },
        "plot_latency": {
            "name": "plot_latency",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "ax": [
                    "int",
                    "str",
                    "matplotlib.pyploAxes",
                    "datetime.datetime",
                    "Optional[str]"
                ],
                "n": [
                    "int"
                ],
                "before": [
                    "int",
                    "str",
                    "Union[str, int]",
                    "Optional[float]"
                ],
                "after": [
                    "int",
                    "dict",
                    "nevergrad.common.Callable[[numpy.ndarray], numpy.ndarray]"
                ],
                "sample_every": [
                    "int"
                ],
                "marker": [
                    "str"
                ]
            }
        },
        "plot": {
            "name": "plot",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "n1": [
                    "str",
                    "pandas.DataFrame",
                    "int",
                    "Optional[int]",
                    "List[str]"
                ],
                "n4": [
                    "str",
                    "pandas.DataFrame",
                    "int",
                    "Optional[int]",
                    "List[str]"
                ],
                "n8": [
                    "str",
                    "pandas.DataFrame",
                    "int",
                    "Optional[int]",
                    "List[str]"
                ],
                "output_filename": [
                    "str"
                ],
                "start_time": [
                    "int",
                    "datetime.datetime.timedelta",
                    "Type[tuple]",
                    "datetime.datetime.time",
                    "datetime.datetime"
                ],
                "sample_every": [
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 196,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        }
    },
    "frankenpaxos-master/benchmarks/vldb20_matchmaker/chaos/__init__.py": {},
    "frankenpaxos-master/benchmarks/vldb20_matchmaker/horizontal_leader_failure/plot.py": {
        "read_data": {
            "name": "read_data",
            "location": 22,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "file": [
                    "str"
                ],
                "drop_head": [
                    "float"
                ],
                "drop_tail": [
                    "float"
                ],
                "nudge": [
                    "datetime.timedelta"
                ]
            }
        },
        "split": {
            "name": "split",
            "location": 44,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "df": [
                    "pandas.DataFrame",
                    "str",
                    "int",
                    "List[Tuple[str, int, int]]",
                    "list"
                ]
            }
        },
        "plot_throughput": {
            "name": "plot_throughput",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "ax": [
                    "str",
                    "int",
                    "typing.Sequence[int]",
                    "matplotlib.pyploAxes",
                    "Sequence[int]",
                    "datetime.date.time",
                    "pandas.Timestamp"
                ],
                "n": [
                    "int"
                ],
                "before": [
                    "int",
                    "float",
                    "bool",
                    "pandas.DataFrame"
                ],
                "after": [
                    "bool",
                    "float",
                    "Union[int, float]",
                    "None",
                    "int",
                    "Optional[int]"
                ],
                "sample_every": [
                    "int"
                ],
                "marker": [
                    "str"
                ]
            }
        },
        "plot_latency": {
            "name": "plot_latency",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "ax": [
                    "int",
                    "str",
                    "None",
                    "matplotlib.pyploAxes",
                    "datetime.datetime",
                    "Optional[str]"
                ],
                "n": [
                    "int"
                ],
                "before": [
                    "int",
                    "str",
                    "Union[str, int]",
                    "float",
                    "Optional[float]",
                    "None"
                ],
                "after": [
                    "int",
                    "dict[, ]",
                    "dict",
                    "nevergrad.common.Callable[[numpy.ndarray], numpy.ndarray]"
                ],
                "sample_every": [
                    "int"
                ],
                "marker": [
                    "str"
                ]
            }
        },
        "plot": {
            "name": "plot",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "n1": [
                    "str",
                    "int",
                    "pandas.DataFrame",
                    "None",
                    "list[str]",
                    "Optional[int]",
                    "List[str]"
                ],
                "n4": [
                    "str",
                    "int",
                    "pandas.DataFrame",
                    "None",
                    "list[str]",
                    "Optional[int]",
                    "List[str]"
                ],
                "n8": [
                    "str",
                    "int",
                    "pandas.DataFrame",
                    "None",
                    "list[str]",
                    "Optional[int]",
                    "List[str]"
                ],
                "output_filename": [
                    "str"
                ],
                "start_time": [
                    "int",
                    "typing.Type",
                    "datetime.datetime.timedelta",
                    "Type[tuple]",
                    "datetime.datetime.time",
                    "datetime.datetime"
                ],
                "sample_every": [
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 191,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        }
    },
    "frankenpaxos-master/benchmarks/vldb20_matchmaker/horizontal_leader_failure/__init__.py": {},
    "frankenpaxos-master/benchmarks/vldb20_matchmaker/horizontal_leader_reconfiguration/plot.py": {
        "read_data": {
            "name": "read_data",
            "location": 22,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "file": [
                    "str"
                ],
                "drop_head": [
                    "float"
                ],
                "drop_tail": [
                    "float"
                ]
            }
        },
        "plot_throughput": {
            "name": "plot_throughput",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "ax": [
                    "int",
                    "str",
                    "matplotlib.pyploAxes"
                ],
                "n": [
                    "int"
                ],
                "s": [
                    "int",
                    "float",
                    "Union[int, float]",
                    "None",
                    "Optional[int]",
                    "numpy.ndarray"
                ],
                "sample_every": [
                    "int"
                ],
                "marker": [
                    "str"
                ]
            }
        },
        "plot_latency": {
            "name": "plot_latency",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "ax": [
                    "int",
                    "str"
                ],
                "n": [
                    "int"
                ],
                "s": [
                    "str",
                    "int",
                    "float"
                ],
                "sample_every": [
                    "int"
                ],
                "marker": [
                    "str"
                ]
            }
        },
        "plot": {
            "name": "plot",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "n1": [
                    "str",
                    "tuple[typing.Union[int,int,int]]",
                    "tuple[typing.Union[str,str,str,str,str,str,str]]",
                    "int",
                    "pandas.DataFrame",
                    "dict",
                    "Tuple[int, int, int]",
                    "Tuple[str, str, str, str, str, str, str]"
                ],
                "n4": [
                    "str",
                    "tuple[typing.Union[int,int,int]]",
                    "tuple[typing.Union[str,str,str,str,str,str,str]]",
                    "int",
                    "pandas.DataFrame",
                    "dict",
                    "Tuple[int, int, int]",
                    "Tuple[str, str, str, str, str, str, str]"
                ],
                "n8": [
                    "str",
                    "tuple[typing.Union[int,int,int]]",
                    "tuple[typing.Union[str,str,str,str,str,str,str]]",
                    "int",
                    "pandas.DataFrame",
                    "dict",
                    "Tuple[int, int, int]",
                    "Tuple[str, str, str, str, str, str, str]"
                ],
                "output_filename": [
                    "str"
                ],
                "f": [
                    "int"
                ],
                "start_time": [
                    "int",
                    "datetime.datetime.datetime",
                    "datetime.datetime.timedelta",
                    "datetime.datetime"
                ],
                "sample_every": [
                    "int"
                ]
            }
        },
        "plot_violin": {
            "name": "plot_violin",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "n1": [
                    "Tuple[(Any, Any)]"
                ],
                "n4": [
                    "Tuple[(Any, Any)]"
                ],
                "n8": [
                    "Tuple[(Any, Any)]"
                ],
                "ylabel": [
                    "str"
                ],
                "output_filename": [
                    "str"
                ]
            }
        },
        "violin": {
            "name": "violin",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "n1": [
                    "int",
                    "str"
                ],
                "n4": [
                    "int",
                    "str"
                ],
                "n8": [
                    "int",
                    "str"
                ],
                "throughput_filename": [
                    "str"
                ],
                "latency_filename": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 260,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "violin.reject_outliers": {
            "name": "reject_outliers",
            "location": 201,
            "return": [
                "dict",
                "Callable",
                "str",
                "bool"
            ],
            "arguments": {
                "data": [
                    "int",
                    "bytes",
                    "bytearray",
                    "pandas.DataFrame",
                    "numpy.ndarray",
                    "str"
                ],
                "p": [
                    "int",
                    "bytes",
                    "bytearray",
                    "pandas.DataFrame",
                    "numpy.ndarray",
                    "str"
                ]
            }
        },
        "violin.throughput": {
            "name": "throughput",
            "location": 204,
            "return": [
                "tuple[]",
                "bytearray",
                "float",
                "str",
                "numpy.ndarray",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "df": [
                    "bool",
                    "datetime.datetime",
                    "List[int]",
                    "int"
                ]
            }
        },
        "violin.latency": {
            "name": "latency",
            "location": 212,
            "return": [
                "tuple[]",
                "str",
                "numpy.ndarray",
                "bytearray",
                "Dict[str, int]"
            ],
            "arguments": {
                "df": [
                    "bool",
                    "datetime.datetime",
                    "List[int]",
                    "int"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/vldb20_matchmaker/horizontal_leader_reconfiguration/__init__.py": {},
    "frankenpaxos-master/benchmarks/vldb20_matchmaker/leader_failure/plot.py": {
        "read_data": {
            "name": "read_data",
            "location": 22,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "file": [
                    "str"
                ],
                "drop_head": [
                    "float"
                ],
                "drop_tail": [
                    "float"
                ],
                "nudge": [
                    "datetime.timedelta"
                ]
            }
        },
        "split": {
            "name": "split",
            "location": 44,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "df": [
                    "pandas.DataFrame",
                    "str",
                    "int",
                    "List[Tuple[str, int, int]]",
                    "list"
                ]
            }
        },
        "plot_throughput": {
            "name": "plot_throughput",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "ax": [
                    "str",
                    "int",
                    "typing.Sequence[int]",
                    "matplotlib.pyploAxes",
                    "Sequence[int]",
                    "datetime.date.time",
                    "pandas.Timestamp"
                ],
                "n": [
                    "int"
                ],
                "before": [
                    "int",
                    "float",
                    "bool",
                    "pandas.DataFrame"
                ],
                "after": [
                    "bool",
                    "float",
                    "Union[int, float]",
                    "None",
                    "int",
                    "Optional[int]"
                ],
                "sample_every": [
                    "int"
                ],
                "marker": [
                    "str"
                ]
            }
        },
        "plot_latency": {
            "name": "plot_latency",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "ax": [
                    "int",
                    "str",
                    "None",
                    "matplotlib.pyploAxes",
                    "datetime.datetime",
                    "Optional[str]"
                ],
                "n": [
                    "int"
                ],
                "before": [
                    "int",
                    "str",
                    "Union[str, int]",
                    "float",
                    "Optional[float]",
                    "None"
                ],
                "after": [
                    "int",
                    "dict[, ]",
                    "dict",
                    "nevergrad.common.Callable[[numpy.ndarray], numpy.ndarray]"
                ],
                "sample_every": [
                    "int"
                ],
                "marker": [
                    "str"
                ]
            }
        },
        "plot": {
            "name": "plot",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "n1": [
                    "str",
                    "int",
                    "pandas.DataFrame",
                    "None",
                    "list[str]",
                    "Optional[int]",
                    "List[str]"
                ],
                "n4": [
                    "str",
                    "int",
                    "pandas.DataFrame",
                    "None",
                    "list[str]",
                    "Optional[int]",
                    "List[str]"
                ],
                "n8": [
                    "str",
                    "int",
                    "pandas.DataFrame",
                    "None",
                    "list[str]",
                    "Optional[int]",
                    "List[str]"
                ],
                "output_filename": [
                    "str"
                ],
                "start_time": [
                    "int",
                    "typing.Type",
                    "datetime.datetime.timedelta",
                    "Type[tuple]",
                    "datetime.datetime.time",
                    "datetime.datetime"
                ],
                "sample_every": [
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 191,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        }
    },
    "frankenpaxos-master/benchmarks/vldb20_matchmaker/leader_failure/__init__.py": {},
    "frankenpaxos-master/benchmarks/vldb20_matchmaker/leader_reconfiguration/plot.py": {
        "read_data": {
            "name": "read_data",
            "location": 22,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "file": [
                    "str"
                ],
                "drop_head": [
                    "float"
                ],
                "drop_tail": [
                    "float"
                ]
            }
        },
        "report_stats": {
            "name": "report_stats",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "int",
                    "pandas.DataFrame",
                    "list[]",
                    "tuple[typing.Union[float,float]]",
                    "list",
                    "Tuple[float, float]"
                ],
                "f": [
                    "int"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "plot_throughput": {
            "name": "plot_throughput",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "ax": [
                    "int",
                    "str",
                    "matplotlib.pyploAxes"
                ],
                "n": [
                    "int"
                ],
                "s": [
                    "int",
                    "float",
                    "Union[int, float]",
                    "None",
                    "Optional[int]",
                    "numpy.ndarray"
                ],
                "sample_every": [
                    "int"
                ],
                "marker": [
                    "str"
                ]
            }
        },
        "plot_latency": {
            "name": "plot_latency",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "ax": [
                    "int",
                    "str"
                ],
                "n": [
                    "int"
                ],
                "s": [
                    "str",
                    "int",
                    "float"
                ],
                "sample_every": [
                    "int"
                ],
                "marker": [
                    "str"
                ]
            }
        },
        "plot": {
            "name": "plot",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "n1": [
                    "str",
                    "tuple[typing.Union[int,int,int]]",
                    "tuple[typing.Union[str,str,str,str,str,str,str]]",
                    "int",
                    "pandas.DataFrame",
                    "dict",
                    "Tuple[int, int, int]",
                    "Tuple[str, str, str, str, str, str, str]"
                ],
                "n4": [
                    "str",
                    "tuple[typing.Union[int,int,int]]",
                    "tuple[typing.Union[str,str,str,str,str,str,str]]",
                    "int",
                    "pandas.DataFrame",
                    "dict",
                    "Tuple[int, int, int]",
                    "Tuple[str, str, str, str, str, str, str]"
                ],
                "n8": [
                    "str",
                    "tuple[typing.Union[int,int,int]]",
                    "tuple[typing.Union[str,str,str,str,str,str,str]]",
                    "int",
                    "pandas.DataFrame",
                    "dict",
                    "Tuple[int, int, int]",
                    "Tuple[str, str, str, str, str, str, str]"
                ],
                "output_filename": [
                    "str"
                ],
                "f": [
                    "int"
                ],
                "start_time": [
                    "int",
                    "datetime.datetime.datetime",
                    "datetime.datetime.timedelta",
                    "datetime.datetime"
                ],
                "sample_every": [
                    "int"
                ]
            }
        },
        "plot_violin": {
            "name": "plot_violin",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "n1": [
                    "Tuple[(Any, Any)]"
                ],
                "n4": [
                    "Tuple[(Any, Any)]"
                ],
                "n8": [
                    "Tuple[(Any, Any)]"
                ],
                "ylabel": [
                    "str"
                ],
                "output_filename": [
                    "str"
                ]
            }
        },
        "violin": {
            "name": "violin",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "n1": [
                    "int",
                    "str"
                ],
                "n4": [
                    "int",
                    "str"
                ],
                "n8": [
                    "int",
                    "str"
                ],
                "throughput_filename": [
                    "str"
                ],
                "latency_filename": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 303,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "report_stats.throughput": {
            "name": "throughput",
            "location": 49,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "df": []
            }
        },
        "report_stats.latency": {
            "name": "latency",
            "location": 55,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "df": []
            }
        },
        "report_stats.report": {
            "name": "report",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int",
                    "float",
                    "Union[int, bool]"
                ],
                "xs": [
                    "numpy.array",
                    "int",
                    "float",
                    "Union[str, list]",
                    "List[T]",
                    "numpy.ndarray"
                ]
            }
        },
        "violin.reject_outliers": {
            "name": "reject_outliers",
            "location": 224,
            "return": [
                "dict",
                "Callable",
                "str",
                "bool"
            ],
            "arguments": {
                "data": [
                    "int",
                    "bytes",
                    "bytearray",
                    "pandas.DataFrame",
                    "numpy.ndarray",
                    "str"
                ],
                "p": [
                    "int",
                    "bytes",
                    "bytearray",
                    "pandas.DataFrame",
                    "numpy.ndarray",
                    "str"
                ]
            }
        },
        "violin.throughput": {
            "name": "throughput",
            "location": 227,
            "return": [
                "tuple[]",
                "bytearray",
                "float",
                "str",
                "numpy.ndarray",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "df": [
                    "bool",
                    "datetime.datetime",
                    "List[int]",
                    "int"
                ]
            }
        },
        "violin.latency": {
            "name": "latency",
            "location": 235,
            "return": [
                "tuple[]",
                "str",
                "numpy.ndarray",
                "bytearray",
                "Dict[str, int]"
            ],
            "arguments": {
                "df": [
                    "bool",
                    "datetime.datetime",
                    "List[int]",
                    "int"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/vldb20_matchmaker/leader_reconfiguration/__init__.py": {},
    "frankenpaxos-master/benchmarks/vldb20_matchmaker/lt/plot.py": {
        "add_num_clients": {
            "name": "add_num_clients",
            "location": 17,
            "return": [
                "pandas.DataFrame",
                "bool",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "df": [
                    "list[dict[, ]]",
                    "pandas.DataFrame",
                    "bool",
                    "List[dict]",
                    "int"
                ]
            }
        },
        "plot_latency_throughput": {
            "name": "plot_latency_throughput",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "int",
                    "Callable",
                    "str"
                ],
                "ax": [
                    "matplotlib.pyploAxes",
                    "str",
                    "Type[numpy.number]",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 72,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "plot_latency_throughput.outlier_throughput": {
            "name": "outlier_throughput",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "g": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "plot_latency_throughput.outlier_throughput_std": {
            "name": "outlier_throughput_std",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "g": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "plot_latency_throughput.outlier_latency": {
            "name": "outlier_latency",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "g": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/vldb20_matchmaker/lt/__init__.py": {},
    "frankenpaxos-master/benchmarks/vldb20_matchmaker/matchmaker_reconfiguration/plot.py": {
        "read_data": {
            "name": "read_data",
            "location": 22,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "file": [
                    "str"
                ],
                "drop_head": [
                    "float"
                ],
                "drop_tail": [
                    "float"
                ]
            }
        },
        "report_stats": {
            "name": "report_stats",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "int",
                    "pandas.DataFrame",
                    "list[]",
                    "tuple[typing.Union[float,float]]",
                    "list",
                    "Tuple[float, float]"
                ],
                "f": [
                    "int"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "plot_throughput": {
            "name": "plot_throughput",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "ax": [
                    "int",
                    "str",
                    "matplotlib.pyploAxes"
                ],
                "n": [
                    "int"
                ],
                "s": [
                    "int",
                    "float",
                    "Union[int, float]",
                    "None",
                    "Optional[int]",
                    "numpy.ndarray"
                ],
                "sample_every": [
                    "int"
                ],
                "marker": [
                    "str"
                ]
            }
        },
        "plot_latency": {
            "name": "plot_latency",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "ax": [
                    "int",
                    "str"
                ],
                "n": [
                    "int"
                ],
                "s": [
                    "str",
                    "int",
                    "float"
                ],
                "sample_every": [
                    "int"
                ],
                "marker": [
                    "str"
                ]
            }
        },
        "plot": {
            "name": "plot",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "n1": [
                    "str",
                    "tuple[typing.Union[int,int,int]]",
                    "tuple[typing.Union[str,str,str,str,str,str,str]]",
                    "int",
                    "pandas.DataFrame",
                    "dict",
                    "Tuple[int, int, int]",
                    "Tuple[str, str, str, str, str, str, str]"
                ],
                "n4": [
                    "str",
                    "tuple[typing.Union[int,int,int]]",
                    "tuple[typing.Union[str,str,str,str,str,str,str]]",
                    "int",
                    "pandas.DataFrame",
                    "dict",
                    "Tuple[int, int, int]",
                    "Tuple[str, str, str, str, str, str, str]"
                ],
                "n8": [
                    "str",
                    "tuple[typing.Union[int,int,int]]",
                    "tuple[typing.Union[str,str,str,str,str,str,str]]",
                    "int",
                    "pandas.DataFrame",
                    "dict",
                    "Tuple[int, int, int]",
                    "Tuple[str, str, str, str, str, str, str]"
                ],
                "output_filename": [
                    "str"
                ],
                "f": [
                    "int"
                ],
                "start_time": [
                    "int",
                    "datetime.datetime.datetime",
                    "datetime.datetime.timedelta",
                    "datetime.datetime"
                ],
                "sample_every": [
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 215,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "report_stats.throughput": {
            "name": "throughput",
            "location": 49,
            "return": [
                "tuple[]",
                "bytearray",
                "float",
                "str",
                "numpy.ndarray",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "df": [
                    "bool",
                    "datetime.datetime",
                    "List[int]",
                    "int"
                ]
            }
        },
        "report_stats.latency": {
            "name": "latency",
            "location": 55,
            "return": [
                "tuple[]",
                "Iterable[str]",
                "dict",
                "int"
            ],
            "arguments": {
                "df": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "report_stats.report": {
            "name": "report",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int",
                    "float",
                    "Union[int, bool]"
                ],
                "xs": [
                    "numpy.array",
                    "int",
                    "float",
                    "Union[str, list]",
                    "List[T]",
                    "numpy.ndarray"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/vldb20_matchmaker/matchmaker_reconfiguration/__init__.py": {},
    "frankenpaxos-master/benchmarks/vldb20_matchmaker/more_clients_leader_reconfiguration/plot.py": {
        "read_data": {
            "name": "read_data",
            "location": 18,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "file": [
                    "str"
                ],
                "drop_head": [
                    "float"
                ],
                "drop_tail": [
                    "float"
                ]
            }
        },
        "plot_throughput": {
            "name": "plot_throughput",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "ax": [
                    "int",
                    "str",
                    "matplotlib.pyploAxes"
                ],
                "s": [
                    "bool",
                    "numpy.ndarray",
                    "str",
                    "None",
                    "Optional[int]"
                ],
                "sample_every": [
                    "int"
                ]
            }
        },
        "plot_latency": {
            "name": "plot_latency",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "ax": [
                    "float",
                    "Union[float, datetime.timedelta]",
                    "list[]",
                    "list",
                    "pandas.DataFrame"
                ],
                "s": [
                    "dict[, ]",
                    "int",
                    "dict",
                    "str",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "bool"
                ],
                "sample_every": [
                    "int"
                ]
            }
        },
        "plot": {
            "name": "plot",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "str",
                    "pandas.DataFrame",
                    "int"
                ],
                "output_filename": [
                    "str"
                ],
                "start_time": [
                    "float",
                    "Type[tuple]",
                    "typing.Type"
                ],
                "sample_every": [
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 128,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        }
    },
    "frankenpaxos-master/benchmarks/vldb20_matchmaker/more_clients_leader_reconfiguration/__init__.py": {},
    "frankenpaxos-master/benchmarks/vldb20_matchmaker/non_thrifty_leader_reconfiguration/plot.py": {
        "read_data": {
            "name": "read_data",
            "location": 22,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "file": [
                    "str"
                ],
                "drop_head": [
                    "float"
                ],
                "drop_tail": [
                    "float"
                ]
            }
        },
        "plot_throughput": {
            "name": "plot_throughput",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "ax": [
                    "int",
                    "str",
                    "matplotlib.pyploAxes"
                ],
                "n": [
                    "int"
                ],
                "s": [
                    "int",
                    "float",
                    "Union[int, float]",
                    "None",
                    "Optional[int]",
                    "numpy.ndarray"
                ],
                "sample_every": [
                    "int"
                ],
                "marker": [
                    "str"
                ]
            }
        },
        "plot_latency": {
            "name": "plot_latency",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "ax": [
                    "int",
                    "str"
                ],
                "n": [
                    "int"
                ],
                "s": [
                    "str",
                    "int",
                    "float"
                ],
                "sample_every": [
                    "int"
                ],
                "marker": [
                    "str"
                ]
            }
        },
        "plot": {
            "name": "plot",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "n1": [
                    "str",
                    "int",
                    "tuple[typing.Union[str,str,str,str,str,str,str]]",
                    "tuple[typing.Union[int,int]]",
                    "pandas.DataFrame",
                    "dict",
                    "Tuple[str, str, str, str, str, str, str]",
                    "Tuple[int, int]"
                ],
                "n4": [
                    "str",
                    "int",
                    "tuple[typing.Union[str,str,str,str,str,str,str]]",
                    "tuple[typing.Union[int,int]]",
                    "pandas.DataFrame",
                    "dict",
                    "Tuple[str, str, str, str, str, str, str]",
                    "Tuple[int, int]"
                ],
                "n8": [
                    "str",
                    "int",
                    "tuple[typing.Union[str,str,str,str,str,str,str]]",
                    "tuple[typing.Union[int,int]]",
                    "pandas.DataFrame",
                    "dict",
                    "Tuple[str, str, str, str, str, str, str]",
                    "Tuple[int, int]"
                ],
                "output_filename": [
                    "str"
                ],
                "start_time": [
                    "int",
                    "typing.Type",
                    "datetime.datetime.timedelta",
                    "Type[tuple]",
                    "datetime.datetime.time",
                    "datetime.datetime"
                ],
                "sample_every": [
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 151,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        }
    },
    "frankenpaxos-master/benchmarks/vldb20_matchmaker/non_thrifty_leader_reconfiguration/__init__.py": {},
    "frankenpaxos-master/benchmarks/vldb20_matchmaker/non_thrifty_lt/plot.py": {
        "add_num_clients": {
            "name": "add_num_clients",
            "location": 17,
            "return": [
                "pandas.DataFrame",
                "bool",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "df": [
                    "pandas.DataFrame",
                    "bool",
                    "List[dict]",
                    "int"
                ]
            }
        },
        "plot_latency_throughput": {
            "name": "plot_latency_throughput",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "pandas.DataFrame",
                    "bool",
                    "Sequence[str]",
                    "str"
                ],
                "ax": [
                    "matplotlib.pyploAxes",
                    "str",
                    "Union[str, float]",
                    "list"
                ],
                "label": [
                    "str"
                ],
                "style": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 81,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "plot_latency_throughput.outlier_throughput": {
            "name": "outlier_throughput",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "g": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "plot_latency_throughput.outlier_throughput_std": {
            "name": "outlier_throughput_std",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "g": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "plot_latency_throughput.outlier_latency": {
            "name": "outlier_latency",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "g": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/vldb20_matchmaker/non_thrifty_lt/__init__.py": {},
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/__init__.py": {},
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/ablation/benchmark.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.Suite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.Suite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "list[]",
                "bool",
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.Suite.summary": {
            "name": "summary",
            "location": 149,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "bool",
                    "Awaitable"
                ],
                "output": [
                    "bool",
                    "Awaitable"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/ablation/hyperparameter_plot.py": {
        "add_num_clients": {
            "name": "add_num_clients",
            "location": 22,
            "return": [
                "pandas.DataFrame",
                "bool",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "df": [
                    "pandas.DataFrame",
                    "bool",
                    "List[dict]",
                    "int"
                ]
            }
        },
        "plot_throughput": {
            "name": "plot_throughput",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "int",
                    "Callable",
                    "str"
                ],
                "ax": [
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 83,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "plot_throughput.outlier_throughput": {
            "name": "outlier_throughput",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "g": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "plot_throughput.outlier_throughput_std": {
            "name": "outlier_throughput_std",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "g": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "main.replace_with_zero": {
            "name": "replace_with_zero",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "df": [
                    "List[List[int]]",
                    "Dict[str, str]",
                    "str"
                ],
                "label": [
                    "bytes",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/ablation/plot.py": {
        "avg_tput": {
            "name": "avg_tput",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "df": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "std_tput": {
            "name": "std_tput",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "df": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "add_num_clients": {
            "name": "add_num_clients",
            "location": 24,
            "return": [
                "pandas.DataFrame",
                "bool",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "df": [
                    "list[dict[, ]]",
                    "pandas.DataFrame",
                    "bool",
                    "List[dict]",
                    "int"
                ]
            }
        },
        "barchart": {
            "name": "barchart",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "output_filename": [
                    "str"
                ],
                "labels": [
                    "List[str]"
                ],
                "data": [
                    "List[float]"
                ],
                "yerr": [
                    "List[float]"
                ],
                "color": [
                    "List[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 91,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        }
    },
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/ablation/__init__.py": {},
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/batched_ablation/benchmark.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.Suite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.Suite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "list[]",
                "bool",
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.Suite.summary": {
            "name": "summary",
            "location": 153,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "output": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/batched_ablation/plot.py": {
        "avg_tput": {
            "name": "avg_tput",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "df": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "std_tput": {
            "name": "std_tput",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "df": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "add_num_clients": {
            "name": "add_num_clients",
            "location": 24,
            "return": [
                "pandas.DataFrame",
                "bool",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "df": [
                    "list[dict[, ]]",
                    "pandas.DataFrame",
                    "bool",
                    "List[dict]",
                    "int"
                ]
            }
        },
        "barchart": {
            "name": "barchart",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "output_filename": [
                    "str"
                ],
                "labels": [
                    "List[str]"
                ],
                "data": [
                    "List[float]"
                ],
                "yerr": [
                    "List[float]"
                ],
                "color": [
                    "List[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 82,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        }
    },
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/batched_ablation/__init__.py": {},
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/batched_compartmentalized_lt/benchmark.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.Suite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.Suite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "list[]",
                "bool",
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.Suite.summary": {
            "name": "summary",
            "location": 199,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "output": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/batched_compartmentalized_lt/hyperparameter_plot.py": {
        "add_num_clients": {
            "name": "add_num_clients",
            "location": 22,
            "return": [
                "pandas.DataFrame",
                "bool",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "df": [
                    "pandas.DataFrame",
                    "bool",
                    "List[dict]",
                    "int"
                ]
            }
        },
        "plot_throughput": {
            "name": "plot_throughput",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "int",
                    "Callable",
                    "str"
                ],
                "ax": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 67,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "plot_throughput.outlier_throughput": {
            "name": "outlier_throughput",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "g": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "plot_throughput.outlier_throughput_std": {
            "name": "outlier_throughput_std",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "g": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/batched_compartmentalized_lt/plot.py": {
        "plot_lt": {
            "name": "plot_lt",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "List[str]",
                    "str",
                    "Sequence",
                    "pandas.DataFrame",
                    "int"
                ],
                "ax": [
                    "matplotlib.pyploAxes",
                    "str",
                    "list",
                    "int",
                    "Union[str, float]"
                ],
                "marker": [
                    "str"
                ],
                "label": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 68,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        }
    },
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/batched_compartmentalized_lt/__init__.py": {},
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/batched_read_scale/benchmark.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.Suite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.Suite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "list[]",
                "bool",
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.Suite.summary": {
            "name": "summary",
            "location": 203,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "bool",
                    "int"
                ],
                "output": [
                    "bool",
                    "int"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/batched_read_scale/hyperparameter_plot.py": {
        "plot": {
            "name": "plot",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "Optional[int]",
                    "float",
                    "Optional[float]",
                    "int",
                    "str"
                ],
                "ax": [
                    "list",
                    "numpy.ndarray",
                    "int",
                    "float",
                    "pandas.Series"
                ],
                "grouping_columns": [
                    "Tuple[(str, ...)]"
                ],
                "x_column": [
                    "str"
                ],
                "y_columns": [
                    "List[str]"
                ],
                "title": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 248,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "plot.outlier_mean": {
            "name": "outlier_mean",
            "location": 28,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "c": [
                    "str",
                    "Tuple[str]",
                    "argparse.Namespace"
                ]
            }
        },
        "plot.outlier_std": {
            "name": "outlier_std",
            "location": 34,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "c": [
                    "str",
                    "Tuple[str]",
                    "argparse.Namespace"
                ]
            }
        },
        "main.replace_with_zero": {
            "name": "replace_with_zero",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "df": [
                    "Callable",
                    "T",
                    "slice"
                ],
                "label": [
                    "bytes",
                    "Dict[str, str]"
                ]
            }
        },
        "plot.outlier_mean.f": {
            "name": "f",
            "location": 29,
            "return": [],
            "arguments": {
                "g": []
            }
        },
        "plot.outlier_std.f": {
            "name": "f",
            "location": 35,
            "return": [
                "pandas.DataFrame",
                "str",
                "float",
                "Optional[List[int]]"
            ],
            "arguments": {
                "g": [
                    "list",
                    "int",
                    "bytes",
                    "str"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/batched_read_scale/plot.py": {
        "outlier_throughput": {
            "name": "outlier_throughput",
            "location": 20,
            "return": [
                "float"
            ],
            "arguments": {
                "df": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "outlier_throughput_std": {
            "name": "outlier_throughput_std",
            "location": 25,
            "return": [
                "float"
            ],
            "arguments": {
                "df": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 94,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "main.replace_with_zero": {
            "name": "replace_with_zero",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "df": [
                    "Callable",
                    "T",
                    "slice"
                ],
                "label": [
                    "bytes",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/batched_read_scale/__init__.py": {},
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/batched_unreplicated_lt/benchmark.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.Suite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.Suite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "list[]",
                "str",
                "Dict[str, Dict[str, Any]]",
                "Optional[bool]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.Suite.summary": {
            "name": "summary",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "output": []
            }
        }
    },
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/batched_unreplicated_lt/hyperparameter_plot.py": {
        "add_num_clients": {
            "name": "add_num_clients",
            "location": 22,
            "return": [
                "pandas.DataFrame",
                "bool",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "df": [
                    "list[dict[, ]]",
                    "pandas.DataFrame",
                    "bool",
                    "List[dict]",
                    "int"
                ]
            }
        },
        "plot_throughput": {
            "name": "plot_throughput",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "int",
                    "Callable",
                    "str"
                ],
                "ax": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 67,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "plot_throughput.outlier_throughput": {
            "name": "outlier_throughput",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "g": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "plot_throughput.outlier_throughput_std": {
            "name": "outlier_throughput_std",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "g": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/batched_unreplicated_lt/plot.py": {
        "plot_lt": {
            "name": "plot_lt",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "List[str]",
                    "str",
                    "Sequence",
                    "pandas.DataFrame",
                    "int"
                ],
                "ax": [
                    "matplotlib.pyploAxes",
                    "str",
                    "list",
                    "int",
                    "Union[str, float]"
                ],
                "marker": [
                    "str"
                ],
                "label": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 78,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        }
    },
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/batched_unreplicated_lt/__init__.py": {},
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/compartmentalized_lt/benchmark.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.Suite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.Suite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "list[]",
                "bool",
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.Suite.summary": {
            "name": "summary",
            "location": 179,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "int",
                    "Callable"
                ],
                "output": [
                    "int",
                    "Callable"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/compartmentalized_lt/bigger_values_hyperparameter_plot.py": {
        "add_num_clients": {
            "name": "add_num_clients",
            "location": 22,
            "return": [
                "pandas.DataFrame",
                "bool",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "df": [
                    "list[dict[, ]]",
                    "pandas.DataFrame",
                    "bool",
                    "List[dict]",
                    "int"
                ]
            }
        },
        "plot_lt": {
            "name": "plot_lt",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "int",
                    "Callable",
                    "str"
                ],
                "ax": [
                    "numpy.dtype",
                    "str"
                ],
                "title": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 105,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "plot_lt.outlier_throughput": {
            "name": "outlier_throughput",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "g": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "plot_lt.outlier_throughput_std": {
            "name": "outlier_throughput_std",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "g": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "main.replace_with_zero": {
            "name": "replace_with_zero",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "df": [
                    "List[List[int]]",
                    "Dict[str, str]",
                    "str"
                ],
                "label": [
                    "bytes",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/compartmentalized_lt/bigger_values_plot.py": {
        "plot_lt": {
            "name": "plot_lt",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "List[str]",
                    "str",
                    "Sequence",
                    "pandas.DataFrame",
                    "int"
                ],
                "ax": [
                    "matplotlib.pyploAxes",
                    "str",
                    "list",
                    "int",
                    "Union[str, float]"
                ],
                "marker": [
                    "str"
                ],
                "label": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 87,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        }
    },
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/compartmentalized_lt/hyperparameter_plot.py": {
        "add_num_clients": {
            "name": "add_num_clients",
            "location": 22,
            "return": [
                "pandas.DataFrame",
                "bool",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "df": [
                    "list[dict[, ]]",
                    "pandas.DataFrame",
                    "bool",
                    "List[dict]",
                    "int"
                ]
            }
        },
        "plot_throughput": {
            "name": "plot_throughput",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "int",
                    "Callable",
                    "str"
                ],
                "ax": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 86,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "plot_throughput.outlier_throughput": {
            "name": "outlier_throughput",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "g": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "plot_throughput.outlier_throughput_std": {
            "name": "outlier_throughput_std",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "g": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "main.replace_with_zero": {
            "name": "replace_with_zero",
            "location": 63,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "df": [
                    "List[List[int]]",
                    "Dict[str, str]",
                    "str"
                ],
                "label": [
                    "bytes",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/compartmentalized_lt/plot.py": {
        "plot_lt": {
            "name": "plot_lt",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "List[str]",
                    "str",
                    "Sequence",
                    "pandas.DataFrame",
                    "int"
                ],
                "ax": [
                    "matplotlib.pyploAxes",
                    "str",
                    "list",
                    "int",
                    "Union[str, float]"
                ],
                "marker": [
                    "str"
                ],
                "label": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 78,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        }
    },
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/compartmentalized_lt/__init__.py": {},
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/compartmentalized_skew/benchmark.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.Suite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.Suite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "list[]",
                "bool",
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.Suite.summary": {
            "name": "summary",
            "location": 153,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "bool",
                    "int"
                ],
                "output": [
                    "bool",
                    "int"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/compartmentalized_skew/hyperparameter_plot.py": {
        "plot": {
            "name": "plot",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "Optional[int]",
                    "float",
                    "Optional[float]",
                    "int",
                    "str"
                ],
                "ax": [
                    "list",
                    "numpy.ndarray",
                    "int",
                    "float",
                    "pandas.Series"
                ],
                "grouping_columns": [
                    "Tuple[(str, ...)]"
                ],
                "x_column": [
                    "str"
                ],
                "y_columns": [
                    "List[str]"
                ],
                "title": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 107,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "plot.outlier_mean": {
            "name": "outlier_mean",
            "location": 28,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "c": [
                    "str",
                    "Tuple[str]",
                    "argparse.Namespace"
                ]
            }
        },
        "plot.outlier_std": {
            "name": "outlier_std",
            "location": 34,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "c": [
                    "str",
                    "Tuple[str]",
                    "argparse.Namespace"
                ]
            }
        },
        "main.replace_with_zero": {
            "name": "replace_with_zero",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "df": [
                    "Callable",
                    "T",
                    "slice"
                ],
                "label": [
                    "bytes",
                    "Dict[str, str]"
                ]
            }
        },
        "plot.outlier_mean.f": {
            "name": "f",
            "location": 29,
            "return": [],
            "arguments": {
                "g": []
            }
        },
        "plot.outlier_std.f": {
            "name": "f",
            "location": 35,
            "return": [
                "pandas.DataFrame",
                "str",
                "float",
                "Optional[List[int]]"
            ],
            "arguments": {
                "g": [
                    "list",
                    "int",
                    "bytes",
                    "str"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/compartmentalized_skew/plot.py": {
        "outlier_throughput": {
            "name": "outlier_throughput",
            "location": 20,
            "return": [
                "float"
            ],
            "arguments": {
                "df": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "outlier_throughput_std": {
            "name": "outlier_throughput_std",
            "location": 25,
            "return": [
                "float"
            ],
            "arguments": {
                "df": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 83,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "main.replace_with_zero": {
            "name": "replace_with_zero",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "df": [
                    "bytes",
                    "Dict[str, str]"
                ],
                "label": [
                    "bytes",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/compartmentalized_skew/__init__.py": {},
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/craq_skew/benchmark.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.SmokeCraqSuite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.SmokeCraqSuite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "list[]",
                "bool",
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.SmokeCraqSuite.summary": {
            "name": "summary",
            "location": 83,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "list",
                    "List[T]"
                ],
                "output": [
                    "list",
                    "List[T]"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/craq_skew/hyperparameter_plot.py": {
        "plot": {
            "name": "plot",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "Optional[int]",
                    "float",
                    "Optional[float]",
                    "int",
                    "str"
                ],
                "ax": [
                    "list",
                    "numpy.ndarray",
                    "int",
                    "float",
                    "pandas.Series"
                ],
                "grouping_columns": [
                    "Tuple[(str, ...)]"
                ],
                "x_column": [
                    "str"
                ],
                "y_columns": [
                    "List[str]"
                ],
                "title": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 112,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "plot.outlier_mean": {
            "name": "outlier_mean",
            "location": 28,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "c": [
                    "str",
                    "Tuple[str]",
                    "argparse.Namespace"
                ]
            }
        },
        "plot.outlier_std": {
            "name": "outlier_std",
            "location": 34,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "c": [
                    "str",
                    "Tuple[str]",
                    "argparse.Namespace"
                ]
            }
        },
        "main.replace_with_zero": {
            "name": "replace_with_zero",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "df": [
                    "Callable",
                    "T",
                    "slice"
                ],
                "label": [
                    "bytes",
                    "Dict[str, str]"
                ]
            }
        },
        "plot.outlier_mean.f": {
            "name": "f",
            "location": 29,
            "return": [],
            "arguments": {
                "g": []
            }
        },
        "plot.outlier_std.f": {
            "name": "f",
            "location": 35,
            "return": [
                "pandas.DataFrame",
                "str",
                "float",
                "Optional[List[int]]"
            ],
            "arguments": {
                "g": [
                    "list",
                    "int",
                    "bytes",
                    "str"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/craq_skew/__init__.py": {},
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/read_scale/benchmark.py": {
        "r": {
            "name": "r",
            "location": 4,
            "return": [
                "float"
            ],
            "arguments": {
                "w": [
                    "int"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.Suite.args": {
            "name": "args",
            "location": 13,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.Suite.inputs": {
            "name": "inputs",
            "location": 16,
            "return": [
                "list[]",
                "bool",
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.Suite.summary": {
            "name": "summary",
            "location": 209,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "bool",
                    "int"
                ],
                "output": [
                    "bool",
                    "int"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/read_scale/hyperparameter_plot.py": {
        "add_num_clients": {
            "name": "add_num_clients",
            "location": 22,
            "return": [
                "pandas.DataFrame",
                "bool",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "df": [
                    "list[dict[, ]]",
                    "pandas.DataFrame",
                    "bool",
                    "List[dict]",
                    "int"
                ]
            }
        },
        "plot_throughput": {
            "name": "plot_throughput",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "Optional[int]",
                    "float",
                    "Optional[float]",
                    "int",
                    "str"
                ],
                "ax": [
                    "list",
                    "numpy.ndarray",
                    "int",
                    "float",
                    "pandas.Series"
                ],
                "grouping_columns": [
                    "Tuple[(str, ...)]"
                ],
                "x_column": [
                    "str"
                ],
                "y_columns": [
                    "List[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 134,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "plot_throughput.outlier_mean": {
            "name": "outlier_mean",
            "location": 31,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "c": [
                    "str",
                    "Tuple[str]",
                    "argparse.Namespace"
                ]
            }
        },
        "plot_throughput.outlier_std": {
            "name": "outlier_std",
            "location": 37,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "c": [
                    "str",
                    "Tuple[str]",
                    "argparse.Namespace"
                ]
            }
        },
        "main.replace_with_zero": {
            "name": "replace_with_zero",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "df": [
                    "List[List[int]]",
                    "Dict[str, str]",
                    "str"
                ],
                "label": [
                    "bytes",
                    "Dict[str, str]"
                ]
            }
        },
        "plot_throughput.outlier_mean.f": {
            "name": "f",
            "location": 32,
            "return": [
                "int"
            ],
            "arguments": {
                "g": []
            }
        },
        "plot_throughput.outlier_std.f": {
            "name": "f",
            "location": 38,
            "return": [
                "int",
                "pandas.DataFrame",
                "str",
                "float",
                "Optional[List[int]]"
            ],
            "arguments": {
                "g": [
                    "list",
                    "int",
                    "bytes",
                    "str"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/read_scale/plot.py": {
        "outlier_throughput": {
            "name": "outlier_throughput",
            "location": 20,
            "return": [
                "float"
            ],
            "arguments": {
                "df": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "outlier_throughput_std": {
            "name": "outlier_throughput_std",
            "location": 25,
            "return": [
                "float"
            ],
            "arguments": {
                "df": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 91,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "main.replace_with_zero": {
            "name": "replace_with_zero",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "df": [
                    "Callable",
                    "T",
                    "slice"
                ],
                "label": [
                    "bytes",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/read_scale/__init__.py": {},
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/scalog_lt/benchmark.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.Suite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.Suite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "bool",
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.Suite.summary": {
            "name": "summary",
            "location": 203,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "dict",
                    "int",
                    "str"
                ],
                "output": [
                    "float",
                    "int"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/scalog_lt/hyperparameter_plot.py": {
        "add_num_clients": {
            "name": "add_num_clients",
            "location": 22,
            "return": [
                "pandas.DataFrame",
                "bool",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "df": [
                    "list[dict[, ]]",
                    "pandas.DataFrame",
                    "bool",
                    "List[dict]",
                    "int"
                ]
            }
        },
        "plot_lt": {
            "name": "plot_lt",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "int",
                    "Callable",
                    "str"
                ],
                "ax": [
                    "numpy.dtype",
                    "str"
                ],
                "title": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 151,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "plot_lt.outlier_throughput": {
            "name": "outlier_throughput",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "g": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "plot_lt.outlier_throughput_std": {
            "name": "outlier_throughput_std",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "g": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/scalog_lt/plot.py": {
        "plot_lt": {
            "name": "plot_lt",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "List[str]",
                    "str",
                    "Sequence",
                    "pandas.DataFrame",
                    "int"
                ],
                "ax": [
                    "matplotlib.pyploAxes",
                    "str",
                    "list",
                    "int",
                    "Union[str, float]"
                ],
                "marker": [
                    "str"
                ],
                "label": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 71,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        }
    },
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/scalog_lt/__init__.py": {},
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/theory/plot.py": {
        "plot_one_throughput_vs_num_replicas": {
            "name": "plot_one_throughput_vs_num_replicas",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "plot_throughput_vs_num_replicas": {
            "name": "plot_throughput_vs_num_replicas",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "plot_throughput_vs_write_ratio": {
            "name": "plot_throughput_vs_write_ratio",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "plot_nice_throughput_vs_num_replicas": {
            "name": "plot_nice_throughput_vs_num_replicas",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "plot_nice_throughput_vs_writes": {
            "name": "plot_nice_throughput_vs_writes",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 148,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        }
    },
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/theory/__init__.py": {},
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/unreplicated_lt/benchmark.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.Suite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.Suite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "list[]",
                "str",
                "Dict[str, Dict[str, Any]]",
                "Optional[bool]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.Suite.summary": {
            "name": "summary",
            "location": 110,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "float",
                    "int",
                    "List[bytes]"
                ],
                "output": [
                    "float",
                    "int",
                    "List[bytes]"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/unreplicated_lt/hyperparameter_plot.py": {
        "add_num_clients": {
            "name": "add_num_clients",
            "location": 21,
            "return": [
                "pandas.DataFrame",
                "bool",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "df": [
                    "list[dict[, ]]",
                    "pandas.DataFrame",
                    "bool",
                    "List[dict]",
                    "int"
                ]
            }
        },
        "plot_lt": {
            "name": "plot_lt",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "int",
                    "Callable",
                    "str"
                ],
                "ax": [
                    "numpy.dtype",
                    "str"
                ],
                "title": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 83,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "plot_lt.outlier_throughput": {
            "name": "outlier_throughput",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "g": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "plot_lt.outlier_throughput_std": {
            "name": "outlier_throughput_std",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "g": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/unreplicated_lt/__init__.py": {},
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/weak_read_scale/benchmark.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main.Suite.args": {
            "name": "args",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.Suite.inputs": {
            "name": "inputs",
            "location": 9,
            "return": [
                "list[]",
                "bool",
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.Suite.summary": {
            "name": "summary",
            "location": 241,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "bool",
                    "int"
                ],
                "output": [
                    "bool",
                    "int"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/weak_read_scale/hyperparameter_plot.py": {
        "plot": {
            "name": "plot",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "Optional[int]",
                    "float",
                    "Optional[float]",
                    "int",
                    "str"
                ],
                "ax": [
                    "list",
                    "numpy.ndarray",
                    "int",
                    "float",
                    "pandas.Series"
                ],
                "grouping_columns": [
                    "Tuple[(str, ...)]"
                ],
                "x_column": [
                    "str"
                ],
                "y_columns": [
                    "List[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 111,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "plot.outlier_mean": {
            "name": "outlier_mean",
            "location": 27,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "c": [
                    "str",
                    "Tuple[str]",
                    "argparse.Namespace"
                ]
            }
        },
        "plot.outlier_std": {
            "name": "outlier_std",
            "location": 33,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "c": [
                    "str",
                    "Tuple[str]",
                    "argparse.Namespace"
                ]
            }
        },
        "main.replace_with_zero": {
            "name": "replace_with_zero",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "df": [
                    "Callable",
                    "T",
                    "slice"
                ],
                "label": [
                    "bytes",
                    "Dict[str, str]"
                ]
            }
        },
        "plot.outlier_mean.f": {
            "name": "f",
            "location": 28,
            "return": [
                "int"
            ],
            "arguments": {
                "g": []
            }
        },
        "plot.outlier_std.f": {
            "name": "f",
            "location": 34,
            "return": [
                "int",
                "pandas.DataFrame",
                "str",
                "float",
                "Optional[List[int]]"
            ],
            "arguments": {
                "g": [
                    "list",
                    "int",
                    "bytes",
                    "str"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/weak_read_scale/plot.py": {
        "outlier_throughput": {
            "name": "outlier_throughput",
            "location": 20,
            "return": [
                "float"
            ],
            "arguments": {
                "df": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "outlier_throughput_std": {
            "name": "outlier_throughput_std",
            "location": 25,
            "return": [
                "float"
            ],
            "arguments": {
                "df": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 111,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "main.replace_with_zero": {
            "name": "replace_with_zero",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "df": [
                    "Callable",
                    "T",
                    "slice"
                ],
                "label": [
                    "bytes",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/vldb21_compartmentalized/weak_read_scale/__init__.py": {},
    "frankenpaxos-master/benchmarks/vldb21_evelyn/__init__.py": {},
    "frankenpaxos-master/benchmarks/vldb21_evelyn/lt_surprise/plot.py": {
        "vprint": {
            "name": "vprint",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "add_num_clients": {
            "name": "add_num_clients",
            "location": 25,
            "return": [
                "pandas.DataFrame",
                "bool",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "df": [
                    "list[dict[, ]]",
                    "pandas.DataFrame",
                    "bool",
                    "List[dict]",
                    "int"
                ]
            }
        },
        "plot_latency_throughput": {
            "name": "plot_latency_throughput",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "pandas.DataFrame",
                    "bool",
                    "Sequence[str]",
                    "str"
                ],
                "ax": [
                    "str",
                    "matplotlib.pyploAxes",
                    "numpy.array"
                ],
                "label": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 94,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "plot_latency_throughput.outlier_throughput": {
            "name": "outlier_throughput",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "g": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "plot_latency_throughput.outlier_latency": {
            "name": "outlier_latency",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "g": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "main.replace_with_zero": {
            "name": "replace_with_zero",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "df": [
                    "List[List[int]]",
                    "Dict[str, str]",
                    "str"
                ],
                "label": [
                    "bytes",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/vldb21_evelyn/lt_surprise/__init__.py": {},
    "frankenpaxos-master/benchmarks/vldb21_evelyn/no_scale_fraction/plot.py": {
        "vprint": {
            "name": "vprint",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "add_num_clients": {
            "name": "add_num_clients",
            "location": 28,
            "return": [
                "pandas.DataFrame",
                "bool",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "df": [
                    "list[dict[, ]]",
                    "pandas.DataFrame",
                    "bool",
                    "List[dict]",
                    "int"
                ]
            }
        },
        "plot_throughput": {
            "name": "plot_throughput",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "pandas.DataFrame",
                    "int",
                    "str",
                    "list"
                ],
                "ax": [
                    "int",
                    "matplotlib.pyploAxes",
                    "numpy.ndarray"
                ],
                "n": [
                    "int",
                    "float",
                    "list[numpy.array]",
                    "List[numpy.array]",
                    "bool"
                ],
                "label": [
                    "str",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 109,
            "return": [
                "argparse.ArgumentParser",
                "argparse._SubParsersAction",
                "argparse._MutuallyExclusiveGroup"
            ],
            "arguments": {}
        },
        "plot_throughput.outlier_throughput": {
            "name": "outlier_throughput",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "g": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "plot_throughput.outlier_throughput_std": {
            "name": "outlier_throughput_std",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "g": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "main.replace_with_zero": {
            "name": "replace_with_zero",
            "location": 82,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "df": [
                    "List[List[int]]",
                    "Dict[str, str]",
                    "str"
                ],
                "label": [
                    "bytes",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/vldb21_evelyn/no_scale_replica/plot.py": {
        "vprint": {
            "name": "vprint",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "add_num_clients": {
            "name": "add_num_clients",
            "location": 28,
            "return": [
                "pandas.DataFrame",
                "bool",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "df": [
                    "list[dict[, ]]",
                    "pandas.DataFrame",
                    "bool",
                    "List[dict]",
                    "int"
                ]
            }
        },
        "plot_throughput": {
            "name": "plot_throughput",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "List[str]",
                    "str",
                    "Sequence",
                    "pandas.DataFrame",
                    "int"
                ],
                "ax": [
                    "bool",
                    "list[int]",
                    "float",
                    "numpy.array",
                    "List[int]",
                    "int"
                ],
                "fw": [
                    "float"
                ],
                "label": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 116,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "plot_throughput.outlier_throughput": {
            "name": "outlier_throughput",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "g": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "plot_throughput.outlier_throughput_std": {
            "name": "outlier_throughput_std",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "g": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "main.replace_with_zero": {
            "name": "replace_with_zero",
            "location": 83,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "df": [
                    "List[List[int]]",
                    "Dict[str, str]",
                    "str"
                ],
                "label": [
                    "bytes",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/vldb21_evelyn/no_scale_replica/__init__.py": {},
    "frankenpaxos-master/benchmarks/vldb21_evelyn/scale_load/plot.py": {
        "vprint": {
            "name": "vprint",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "add_num_clients": {
            "name": "add_num_clients",
            "location": 28,
            "return": [
                "pandas.DataFrame",
                "bool",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "df": [
                    "list[dict[, ]]",
                    "pandas.DataFrame",
                    "bool",
                    "List[dict]",
                    "int"
                ]
            }
        },
        "rf": {
            "name": "rf",
            "location": 33,
            "return": [
                "int"
            ],
            "arguments": {
                "num_writers": [
                    "int"
                ],
                "num_clients": [
                    "int"
                ]
            }
        },
        "plot_throughput": {
            "name": "plot_throughput",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "pandas.DataFrame",
                    "bool",
                    "Sequence[str]",
                    "str"
                ],
                "ax": [
                    "bool",
                    "typing.Sequence[typing.Hashable]",
                    "Sequence[Hashable]",
                    "numpy.array"
                ],
                "label": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 106,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "plot_throughput.outlier_throughput": {
            "name": "outlier_throughput",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "g": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "plot_throughput.outlier_throughput_std": {
            "name": "outlier_throughput_std",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "g": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "main.replace_with_zero": {
            "name": "replace_with_zero",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "df": [
                    "List[List[int]]",
                    "Dict[str, str]",
                    "str"
                ],
                "label": [
                    "bytes",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/vldb21_evelyn/scale_load/__init__.py": {},
    "frankenpaxos-master/benchmarks/vldb21_evelyn/scale_replica/plot.py": {
        "vprint": {
            "name": "vprint",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "add_num_clients": {
            "name": "add_num_clients",
            "location": 28,
            "return": [
                "pandas.DataFrame",
                "bool",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "df": [
                    "list[dict[, ]]",
                    "pandas.DataFrame",
                    "bool",
                    "List[dict]",
                    "int"
                ]
            }
        },
        "rf": {
            "name": "rf",
            "location": 33,
            "return": [
                "int"
            ],
            "arguments": {
                "num_writers": [
                    "int"
                ],
                "num_clients": [
                    "int"
                ]
            }
        },
        "plot_throughput": {
            "name": "plot_throughput",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "pandas.DataFrame",
                    "bool",
                    "Sequence[str]",
                    "str"
                ],
                "ax": [
                    "bool",
                    "typing.Sequence[typing.Hashable]",
                    "Sequence[Hashable]",
                    "numpy.array"
                ],
                "label": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 104,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "plot_throughput.outlier_throughput": {
            "name": "outlier_throughput",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "g": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "plot_throughput.outlier_throughput_std": {
            "name": "outlier_throughput_std",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "g": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "main.replace_with_zero": {
            "name": "replace_with_zero",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "df": [
                    "List[List[int]]",
                    "Dict[str, str]",
                    "str"
                ],
                "label": [
                    "bytes",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "frankenpaxos-master/benchmarks/vldb21_evelyn/scale_replica/__init__.py": {},
    "frankenpaxos-master/benchmarks/vldb21_evelyn/theory/plot.py": {
        "plot_throughput_vs_num_replicas": {
            "name": "plot_throughput_vs_num_replicas",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "plot_throughput_vs_write_ratio": {
            "name": "plot_throughput_vs_write_ratio",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "plot_nice_throughput_vs_num_replicas": {
            "name": "plot_nice_throughput_vs_num_replicas",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "plot_nice_throughput_vs_writes": {
            "name": "plot_nice_throughput_vs_writes",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 123,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        }
    },
    "frankenpaxos-master/benchmarks/vldb21_evelyn/theory/__init__.py": {},
    "frankenpaxos-master/scripts/latency_client.py": {
        "main": {
            "name": "main",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "arg_parser": {
            "name": "arg_parser",
            "location": 33,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        }
    },
    "frankenpaxos-master/scripts/latency_server.py": {
        "handle_client": {
            "name": "handle_client",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "socket.socket"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "arg_parser": {
            "name": "arg_parser",
            "location": 35,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        }
    },
    "frankenpaxos-master/scripts/quorum_systems.py": {
        "_canonicalize": {
            "name": "_canonicalize",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "nodes": [
                    "Set[str]"
                ]
            }
        },
        "_all_max": {
            "name": "_all_max",
            "location": 19,
            "return": [
                "Tuple[(Any, list)]"
            ],
            "arguments": {
                "xs": [
                    "int",
                    "numpy.ndarray",
                    "bool",
                    "Callable[[numpy.ndarray], numpy.ndarray]"
                ],
                "f": [
                    "Callable[([Any], Any)]"
                ]
            }
        },
        "partition": {
            "name": "partition",
            "location": 293,
            "return": [
                "Iterator[List[list]]"
            ],
            "arguments": {
                "xs": [
                    "list"
                ]
            }
        },
        "_partition_helper": {
            "name": "_partition_helper",
            "location": 301,
            "return": [
                "Iterator[List[list]]"
            ],
            "arguments": {
                "xs": [
                    "list"
                ],
                "max_size": [
                    "int"
                ]
            }
        },
        "systems": {
            "name": "systems",
            "location": 310,
            "return": [
                "Iterator[QuorumSystem]"
            ],
            "arguments": {
                "xs": [
                    "List[str]"
                ]
            }
        },
        "_systems_helper": {
            "name": "_systems_helper",
            "location": 314,
            "return": [
                "Iterator[QuorumSystem]"
            ],
            "arguments": {
                "xs": [
                    "List[Node]"
                ]
            }
        },
        "min_load": {
            "name": "min_load",
            "location": 331,
            "return": [
                "float"
            ],
            "arguments": {
                "f": [
                    "int"
                ],
                "workload": [
                    "Workload"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "average_failure_load": {
            "name": "average_failure_load",
            "location": 339,
            "return": [
                "float"
            ],
            "arguments": {
                "system": [
                    "QuorumSystem"
                ],
                "workload": [
                    "Workload"
                ],
                "num_fail": [
                    "int"
                ]
            }
        },
        "sharded_load": {
            "name": "sharded_load",
            "location": 347,
            "return": [
                "float"
            ],
            "arguments": {
                "f": [
                    "int"
                ],
                "workload": [
                    "Workload"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "optimal_systems": {
            "name": "optimal_systems",
            "location": 353,
            "return": [
                "Tuple[(List[QuorumSystem], float, List[float])]"
            ],
            "arguments": {
                "f": [
                    "int"
                ],
                "workload": [
                    "Workload"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "plot_load": {
            "name": "plot_load",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "find_isomorphism": {
            "name": "find_isomorphism",
            "location": 411,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "print_optimal_systems": {
            "name": "print_optimal_systems",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Workload.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fr": [
                    "float"
                ],
                "fw": [
                    "float"
                ]
            }
        },
        "QuorumSystem.nodes": {
            "name": "nodes",
            "location": 66,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuorumSystem.read_quorums": {
            "name": "read_quorums",
            "location": 69,
            "return": [
                "Iterator[Set[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuorumSystem.write_quorums": {
            "name": "write_quorums",
            "location": 72,
            "return": [
                "Iterator[Set[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuorumSystem.load": {
            "name": "load",
            "location": 75,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "workload": [
                    "Workload"
                ],
                "fail": [
                    "Set[str]"
                ],
                "balanced": [
                    "bool"
                ]
            }
        },
        "QuorumSystem.read_resilience": {
            "name": "read_resilience",
            "location": 80,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuorumSystem.write_resilience": {
            "name": "write_resilience",
            "location": 83,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuorumSystem.resilience": {
            "name": "resilience",
            "location": 86,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuorumSystem.min_read_failure": {
            "name": "min_read_failure",
            "location": 89,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuorumSystem.min_write_failure": {
            "name": "min_write_failure",
            "location": 92,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuorumSystem.to_graph": {
            "name": "to_graph",
            "location": 95,
            "return": [
                "numpy.ndarray",
                "float",
                "Dict[str, numpy.ndarray]",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Node.__repr__": {
            "name": "__repr__",
            "location": 113,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__str__": {
            "name": "__str__",
            "location": 116,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.nodes": {
            "name": "nodes",
            "location": 119,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.read_quorums": {
            "name": "read_quorums",
            "location": 122,
            "return": [
                "Iterator[Set[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.write_quorums": {
            "name": "write_quorums",
            "location": 125,
            "return": [
                "Iterator[Set[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.load": {
            "name": "load",
            "location": 128,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "workload": [
                    "Workload"
                ],
                "fail": [
                    "Set[str]"
                ],
                "balanced": [
                    "bool"
                ]
            }
        },
        "Node.min_read_failure": {
            "name": "min_read_failure",
            "location": 134,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.min_write_failure": {
            "name": "min_write_failure",
            "location": 137,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Simple.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "int"
                ],
                "xs": [
                    "List[QuorumSystem]"
                ]
            }
        },
        "Simple.__repr__": {
            "name": "__repr__",
            "location": 149,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Simple.__str__": {
            "name": "__str__",
            "location": 153,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Simple.nodes": {
            "name": "nodes",
            "location": 157,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Simple.read_quorums": {
            "name": "read_quorums",
            "location": 160,
            "return": [
                "Iterator[Set[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Simple.write_quorums": {
            "name": "write_quorums",
            "location": 165,
            "return": [
                "Iterator[Set[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Simple.load": {
            "name": "load",
            "location": 170,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "workload": [
                    "Workload"
                ],
                "fail": [
                    "Set[str]"
                ],
                "balanced": [
                    "bool"
                ]
            }
        },
        "Simple.min_read_failure": {
            "name": "min_read_failure",
            "location": 246,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Simple.min_write_failure": {
            "name": "min_write_failure",
            "location": 249,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Paths1.__repr__": {
            "name": "__repr__",
            "location": 265,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Paths1.__str__": {
            "name": "__str__",
            "location": 268,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Paths1.read_quorums": {
            "name": "read_quorums",
            "location": 271,
            "return": [
                "Iterator[Set[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Paths1.write_quorums": {
            "name": "write_quorums",
            "location": 277,
            "return": [
                "Iterator[Set[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Paths1.load": {
            "name": "load",
            "location": 283,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "workload": [
                    "Workload"
                ],
                "balanced": [
                    "bool"
                ]
            }
        },
        "Paths1.min_read_failure": {
            "name": "min_read_failure",
            "location": 286,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Paths1.min_write_failure": {
            "name": "min_write_failure",
            "location": 289,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
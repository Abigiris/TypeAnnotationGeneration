{
    "freqtrade-develop/setup.py": {},
    "freqtrade-develop/build_helpers/pre_commit_update.py": {},
    "freqtrade-develop/freqtrade/constants.py": {},
    "freqtrade-develop/freqtrade/exceptions.py": {},
    "freqtrade-develop/freqtrade/freqtradebot.py": {
        "FreqtradeBot.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "FreqtradeBot.notify_status": {
            "name": "notify_status",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "List[str]",
                    "Lock",
                    "float"
                ]
            }
        },
        "FreqtradeBot.cleanup": {
            "name": "cleanup",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FreqtradeBot.startup": {
            "name": "startup",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FreqtradeBot.process": {
            "name": "process",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FreqtradeBot.process_stopped": {
            "name": "process_stopped",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FreqtradeBot.check_for_open_trades": {
            "name": "check_for_open_trades",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FreqtradeBot._refresh_active_whitelist": {
            "name": "_refresh_active_whitelist",
            "location": 244,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "trades": [
                    "List",
                    "List[str]",
                    "Iterable[float]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "FreqtradeBot.get_free_open_trades": {
            "name": "get_free_open_trades",
            "location": 264,
            "return": [
                "int",
                "Dict[str,Any]",
                "str",
                "Optional[str]",
                "Dict[str,List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FreqtradeBot.update_funding_fees": {
            "name": "update_funding_fees",
            "location": 272,
            "return": [
                "float",
                "str",
                "recidiviz.common.constants.enum_overrides.EnumOverrides",
                "datetime.timedelta",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FreqtradeBot.startup_update_open_orders": {
            "name": "startup_update_open_orders",
            "location": 286,
            "return": [
                "None",
                "int",
                "Union[tuple,list]",
                "Optional[bool]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FreqtradeBot.update_closed_trades_without_assigned_fees": {
            "name": "update_closed_trades_without_assigned_fees",
            "location": 321,
            "return": [
                "None",
                "str",
                "Set[str]",
                "DefaultDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "FreqtradeBot.handle_insufficient_funds": {
            "name": "handle_insufficient_funds",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "str",
                    "Callable[[str], None]",
                    "int",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "FreqtradeBot.enter_positions": {
            "name": "enter_positions",
            "location": 395,
            "return": [
                "int",
                "Callable",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "FreqtradeBot.create_trade": {
            "name": "create_trade",
            "location": 439,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "int"
                ]
            }
        },
        "FreqtradeBot.process_open_trade_positions": {
            "name": "process_open_trade_positions",
            "location": 504,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FreqtradeBot.check_and_call_adjust_trade_position": {
            "name": "check_and_call_adjust_trade_position",
            "location": 518,
            "return": [
                "None",
                "int",
                "Iterator[Tuple[str,str]]"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "FreqtradeBot._check_depth_of_market": {
            "name": "_check_depth_of_market",
            "location": 558,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "int",
                    "str",
                    "logging.Logger"
                ],
                "conf": [
                    "str"
                ],
                "side": [
                    "Sequence",
                    "str"
                ]
            }
        },
        "FreqtradeBot.execute_entry": {
            "name": "execute_entry",
            "location": 590,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "bytes",
                    "Dict[str, Any]"
                ],
                "stake_amount": [
                    "bytes",
                    "Dict[str, Any]"
                ],
                "price": [
                    "None",
                    "bytes",
                    "Dict[str,Any]"
                ]
            }
        },
        "FreqtradeBot.cancel_stoploss_on_exchange": {
            "name": "cancel_stoploss_on_exchange",
            "location": 745,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "bool",
                    "Callable",
                    "int",
                    "Mapping[str, Any]",
                    "dict"
                ]
            }
        },
        "FreqtradeBot.get_valid_enter_price_and_stake": {
            "name": "get_valid_enter_price_and_stake",
            "location": 757,
            "return": [
                "Tuple[Union[float,float]]",
                "str",
                "List[Tuple[str,str]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[Sequence[str]]",
                    "datetime.datetime"
                ],
                "price": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, Any]]"
                ],
                "stake_amount": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "trade_side": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[Sequence[str]]",
                    "datetime.datetime"
                ],
                "entry_tag": [
                    "str",
                    "bool",
                    "int",
                    "List[Callable]"
                ],
                "trade": [
                    "Optional[str]",
                    "str",
                    "Optional[int]"
                ],
                "order_adjust": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "FreqtradeBot._notify_enter": {
            "name": "_notify_enter",
            "location": 829,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "int",
                    "str",
                    "float",
                    "Optional[str]"
                ],
                "order": [
                    "Optional[int]",
                    "Optional[str]"
                ],
                "order_type": [
                    "bool",
                    "None"
                ],
                "fill": [
                    "bool",
                    "str",
                    "Literal"
                ]
            }
        },
        "FreqtradeBot._notify_enter_cancel": {
            "name": "_notify_enter_cancel",
            "location": 867,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "Union[dict, List[dict]]",
                    "type",
                    "Optional[str]",
                    "constants.Rank",
                    "Optional[int]"
                ],
                "order_type": [
                    "bool",
                    "IO"
                ],
                "reason": [
                    "bool",
                    "IO"
                ]
            }
        },
        "FreqtradeBot.exit_positions": {
            "name": "exit_positions",
            "location": 901,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "trades": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "FreqtradeBot.handle_trade": {
            "name": "handle_trade",
            "location": 927,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "str",
                    "Mapping"
                ]
            }
        },
        "FreqtradeBot._check_and_execute_exit": {
            "name": "_check_and_execute_exit",
            "location": 962,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "str",
                    "Optional[int]"
                ],
                "exit_rate": [
                    "str",
                    "Optional[int]"
                ],
                "enter": [
                    "str",
                    "Optional[int]"
                ],
                "exit_": [
                    "str",
                    "Optional[int]"
                ],
                "exit_tag": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "FreqtradeBot.create_stoploss_order": {
            "name": "create_stoploss_order",
            "location": 985,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "str",
                    "Optional[List[int]]",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionSentence]"
                ],
                "stop_price": [
                    "str",
                    "Optional[List[int]]",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionSentence]"
                ]
            }
        },
        "FreqtradeBot.handle_stoploss_on_exchange": {
            "name": "handle_stoploss_on_exchange",
            "location": 1023,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "str",
                    "int"
                ]
            }
        },
        "FreqtradeBot.handle_trailing_stoploss_on_exchange": {
            "name": "handle_trailing_stoploss_on_exchange",
            "location": 1106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "Tuple[int, int]"
                ],
                "order": [
                    "bool",
                    "int"
                ]
            }
        },
        "FreqtradeBot.manage_open_orders": {
            "name": "manage_open_orders",
            "location": 1136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FreqtradeBot.handle_timedout_order": {
            "name": "handle_timedout_order",
            "location": 1163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "int",
                    "Callable",
                    "str"
                ],
                "trade": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "FreqtradeBot.replace_order": {
            "name": "replace_order",
            "location": 1188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "str",
                    "float",
                    "List[int]",
                    "datetime.timedelta"
                ],
                "order_obj": [
                    "float",
                    "int",
                    "Tuple[float, float, float, float]"
                ],
                "trade": [
                    "str",
                    "int",
                    "bytes",
                    "freqtrade.persistence.Trade"
                ]
            }
        },
        "FreqtradeBot.cancel_all_open_orders": {
            "name": "cancel_all_open_orders",
            "location": 1236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FreqtradeBot.handle_cancel_enter": {
            "name": "handle_cancel_enter",
            "location": 1256,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "str",
                    "float"
                ],
                "order": [
                    "float",
                    "int",
                    "freqtrade.persistence.Trade",
                    "Callable[[List], float]"
                ],
                "reason": [
                    "freqtrade.persistence.Trade"
                ],
                "replacing": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "FreqtradeBot.handle_cancel_exit": {
            "name": "handle_cancel_exit",
            "location": 1332,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "str",
                    "float"
                ],
                "order": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "int"
                ],
                "reason": [
                    "str",
                    "logging.Logger"
                ]
            }
        },
        "FreqtradeBot._safe_exit_amount": {
            "name": "_safe_exit_amount",
            "location": 1378,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "int",
                    "float",
                    "str",
                    "bool",
                    "Callable[[int], None]",
                    "Type"
                ],
                "amount": [
                    "int",
                    "str"
                ]
            }
        },
        "FreqtradeBot.execute_trade_exit": {
            "name": "execute_trade_exit",
            "location": 1407,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "int",
                    "Optional[float]",
                    "Union[int, str]"
                ],
                "limit": [
                    "int",
                    "str",
                    "state.State"
                ],
                "exit_check": [
                    "bool",
                    "str",
                    "Literal"
                ]
            }
        },
        "FreqtradeBot._notify_exit": {
            "name": "_notify_exit",
            "location": 1509,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "str",
                    "freqtrade.persistence.Trade",
                    "int"
                ],
                "order_type": [
                    "bool",
                    "Dict[str, Any]",
                    "str",
                    "recidiviz.persistence.entity.state.entities.SentenceType"
                ],
                "fill": [
                    "bool",
                    "Callable[[str],str]",
                    "Optional[mimesis.enums.Gender]",
                    "List[str]"
                ]
            }
        },
        "FreqtradeBot._notify_exit_cancel": {
            "name": "_notify_exit_cancel",
            "location": 1556,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "str",
                    "tracim.models.data.Workspace",
                    "int"
                ],
                "order_type": [
                    "bool",
                    "Type[Any]"
                ],
                "reason": [
                    "str",
                    "recidiviz.persistence.entity.state.entities.StateIncarcerationPeriod",
                    "Optional[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]"
                ]
            }
        },
        "FreqtradeBot.update_trade_state": {
            "name": "update_trade_state",
            "location": 1610,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "str",
                    "int"
                ],
                "order_id": [
                    "str",
                    "int"
                ],
                "action_order": [
                    "None",
                    "str",
                    "int"
                ],
                "stoploss_order": [
                    "bool",
                    "str",
                    "int"
                ],
                "send_msg": [
                    "str",
                    "bool"
                ]
            }
        },
        "FreqtradeBot.handle_protections": {
            "name": "handle_protections",
            "location": 1685,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "int",
                    "Callable",
                    "str"
                ],
                "side": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "FreqtradeBot.apply_fee_conditional": {
            "name": "apply_fee_conditional",
            "location": 1698,
            "return": [
                "List[int]",
                "List[dict]",
                "float"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "int",
                    "str",
                    "bytes"
                ],
                "trade_base_currency": [
                    "str",
                    "bool",
                    "Dict[int, dict]",
                    "transfer.models.Order",
                    "int"
                ],
                "amount": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "fee_abs": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "Optional[Dict]"
                ]
            }
        },
        "FreqtradeBot.handle_order_fee": {
            "name": "handle_order_fee",
            "location": 1718,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "str",
                    "int"
                ],
                "order_obj": [
                    "str",
                    "int"
                ],
                "order": [
                    "str",
                    "Optional[List[int]]"
                ]
            }
        },
        "FreqtradeBot.get_real_amount": {
            "name": "get_real_amount",
            "location": 1728,
            "return": [
                "str",
                "bytearray",
                "Optional[Any]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "str",
                    "Mapping[str, Any]",
                    "int"
                ],
                "order": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ],
                "order_obj": [
                    "str",
                    "int",
                    "List[str]",
                    "Tuple[Tuple[str, ...]]",
                    "logging.Logger"
                ]
            }
        },
        "FreqtradeBot.fee_detection_from_trades": {
            "name": "fee_detection_from_trades",
            "location": 1761,
            "return": [
                "int",
                "float",
                "bytes",
                "bytearray",
                "T",
                "Iterable[int]"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "int",
                    "float",
                    "str"
                ],
                "order": [
                    "int",
                    "float",
                    "str"
                ],
                "order_obj": [
                    "str"
                ],
                "order_amount": [
                    "int",
                    "bool",
                    "threading.Event",
                    "Optional[float]",
                    "float"
                ],
                "trades": [
                    "float"
                ]
            }
        },
        "FreqtradeBot.get_valid_price": {
            "name": "get_valid_price",
            "location": 1809,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "custom_price": [
                    "str",
                    "int",
                    "bool"
                ],
                "proposed_price": [
                    "recidiviz.persistence.entity.state.entities.StateSupervisionPeriod",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "FreqtradeBot.__init__.update": {
            "name": "update",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "freqtrade-develop/freqtrade/loggers.py": {
        "_set_loggers": {
            "name": "_set_loggers",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "verbosity": [
                    "int",
                    "logging.Logger",
                    "Exception"
                ],
                "api_verbosity": [
                    "Text",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "get_existing_handlers": {
            "name": "get_existing_handlers",
            "location": 54,
            "return": [
                "Optional[logging.Handler]"
            ],
            "arguments": {
                "handlertype": [
                    "logging.LogRecord",
                    "Dict[str, str]"
                ]
            }
        },
        "setup_logging_pre": {
            "name": "setup_logging_pre",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "setup_logging": {
            "name": "setup_logging",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "MutableMapping[str, Any]",
                    "dict"
                ]
            }
        },
        "FTBufferingHandler.flush": {
            "name": "flush",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "freqtrade-develop/freqtrade/main.py": {
        "main": {
            "name": "main",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "sysargv": [
                    "None",
                    "str",
                    "List[str]",
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/misc.py": {
        "decimals_per_coin": {
            "name": "decimals_per_coin",
            "location": 21,
            "return": [
                "int"
            ],
            "arguments": {
                "coin": [
                    "Dict[str, Any]",
                    "str",
                    "int",
                    "Dict[str, Dict[str, str]]",
                    "dict"
                ]
            }
        },
        "round_coin_value": {
            "name": "round_coin_value",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "int",
                    "bool",
                    "Tuple[float, float]",
                    "Callable"
                ],
                "coin": [
                    "int",
                    "bool",
                    "Tuple[float, float]",
                    "Callable"
                ],
                "show_coin_name": [
                    "bool",
                    "str"
                ],
                "keep_trailing_zeros": [
                    "bool",
                    "str"
                ]
            }
        },
        "shorten_date": {
            "name": "shorten_date",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "_date": [
                    "str",
                    "datetime.date"
                ]
            }
        },
        "file_dump_json": {
            "name": "file_dump_json",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "pathlib.Path"
                ],
                "data": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Union[Any, Any]]",
                    "Dict[Any, pathlib.Path]"
                ],
                "is_zip": [
                    "bool",
                    "pathlib.Path",
                    "Tuple[str]",
                    "List[Dict]",
                    "Iterable[Any]",
                    "Optional[bytes]",
                    "str"
                ],
                "log": [
                    "bool",
                    "pathlib.Path",
                    "Tuple[str]",
                    "List[Dict]",
                    "Iterable[Any]",
                    "Optional[bytes]",
                    "str"
                ]
            }
        },
        "file_dump_joblib": {
            "name": "file_dump_joblib",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "logging.Logger",
                    "pathlib.Path"
                ],
                "data": [
                    "dict",
                    "int",
                    "Mapping[str, Any]",
                    "Dict[str, Dict[str, Any]]",
                    "Optional[Dict]"
                ],
                "log": [
                    "bool",
                    "str",
                    "Tuple[str]",
                    "pathlib.Path",
                    "List[pathlib.Path]",
                    "Iterable[Any]",
                    "List[str]"
                ]
            }
        },
        "json_load": {
            "name": "json_load",
            "location": 103,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "bool",
                "Optional[Callable]",
                "Optional[int]"
            ],
            "arguments": {
                "datafile": [
                    "bool",
                    "int",
                    "datetime.datetime",
                    "str",
                    "Union[str, List[str], Tuple[str, ...]]"
                ]
            }
        },
        "file_load_json": {
            "name": "file_load_json",
            "location": 112,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "file": [
                    "pathlib.Path",
                    "Union[str, pathlib.Path, BinaryIO]"
                ]
            }
        },
        "pair_to_filename": {
            "name": "pair_to_filename",
            "location": 132,
            "return": [
                "str",
                "set",
                "int",
                "Optional[freqtrade.configuration.TimeRange]",
                "bool",
                "freqtrade.arguments.TimeRange",
                "Optional[pathlib.Path]"
            ],
            "arguments": {
                "pair": [
                    "str",
                    "float",
                    "Dict[str, Any]",
                    "Iterable[str]"
                ]
            }
        },
        "format_ms_time": {
            "name": "format_ms_time",
            "location": 138,
            "return": [
                "str"
            ],
            "arguments": {
                "date": [
                    "int",
                    "datetime.datetime",
                    "str",
                    "datetime.date"
                ]
            }
        },
        "deep_merge_dicts": {
            "name": "deep_merge_dicts",
            "location": 146,
            "return": [
                "Dict",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "source": [
                    "str",
                    "Mapping[str, Any]",
                    "dict",
                    "Dict[str, Any]"
                ],
                "destination": [
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "type",
                    "Optional[str]"
                ],
                "allow_null_overrides": [
                    "bool",
                    "Dict",
                    "str"
                ]
            }
        },
        "round_dict": {
            "name": "round_dict",
            "location": 166,
            "return": [
                "dict"
            ],
            "arguments": {
                "d": [
                    "int",
                    "List[int]"
                ],
                "n": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "safe_value_fallback": {
            "name": "safe_value_fallback",
            "location": 173,
            "return": [
                "None",
                "float",
                "str",
                "bool",
                "Tuple[int,int]",
                "Iterable[int]"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Union[str, bytes]",
                    "Optional[Callable]"
                ],
                "key1": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "key2": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "default_value": [
                    "None",
                    "str",
                    "Optional[str]",
                    "List"
                ]
            }
        },
        "safe_value_fallback2": {
            "name": "safe_value_fallback2",
            "location": 187,
            "return": [
                "None",
                "Dict[str,Any]",
                "int",
                "Optional[Mapping[str,Any]]",
                "Optional[Dict[str,Any]]"
            ],
            "arguments": {
                "dict1": [
                    "str",
                    "dict"
                ],
                "dict2": [
                    "str",
                    "dict"
                ],
                "key1": [
                    "str",
                    "dict"
                ],
                "key2": [
                    "str",
                    "dict"
                ],
                "default_value": [
                    "None",
                    "str",
                    "Set[str]",
                    "Optional[list]"
                ]
            }
        },
        "plural": {
            "name": "plural",
            "location": 202,
            "return": [
                "None",
                "int",
                "str",
                "List[int]",
                "float",
                "bytes"
            ],
            "arguments": {
                "num": [
                    "str",
                    "float",
                    "int"
                ],
                "singular": [
                    "str",
                    "float",
                    "int"
                ],
                "plural": [
                    "None",
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "render_template": {
            "name": "render_template",
            "location": 206,
            "return": [
                "str"
            ],
            "arguments": {
                "templatefile": [
                    "str",
                    "List[str]"
                ],
                "arguments": [
                    "Dict",
                    "str",
                    "pathlib.Path",
                    "int"
                ]
            }
        },
        "render_template_with_fallback": {
            "name": "render_template_with_fallback",
            "location": 218,
            "return": [
                "str"
            ],
            "arguments": {
                "templatefile": [
                    "dict",
                    "str",
                    "pathlib.Path",
                    "int"
                ],
                "templatefallbackfile": [
                    "dict",
                    "str",
                    "pathlib.Path",
                    "int"
                ],
                "arguments": [
                    "Dict",
                    "str",
                    "pathlib.Path",
                    "int"
                ]
            }
        },
        "chunks": {
            "name": "chunks",
            "location": 230,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "lst": [
                    "int",
                    "Sequence",
                    "list",
                    "List[T]"
                ],
                "n": [
                    "int",
                    "Sequence",
                    "list",
                    "List[T]"
                ]
            }
        },
        "parse_db_uri_for_logging": {
            "name": "parse_db_uri_for_logging",
            "location": 241,
            "return": [
                "bool",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "uri": [
                    "int"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/wallets.py": {
        "Wallets.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "exchange": [
                    "str",
                    "dict",
                    "int",
                    "Dict[str, Any]"
                ],
                "log": [
                    "bool",
                    "logging.Logger",
                    "Dict"
                ]
            }
        },
        "Wallets.get_free": {
            "name": "get_free",
            "location": 48,
            "return": [
                "int",
                "bool",
                "Optional[float]",
                "List[Dict[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "currency": [
                    "djmoney.contrib.exchange.models.Rate",
                    "int",
                    "Dict[str, bool]",
                    "str"
                ]
            }
        },
        "Wallets.get_used": {
            "name": "get_used",
            "location": 55,
            "return": [
                "int",
                "str",
                "Tuple[int]",
                "List[int]",
                "FrozenSet[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "currency": [
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Wallets.get_total": {
            "name": "get_total",
            "location": 62,
            "return": [
                "int",
                "bool",
                "Optional[float]",
                "List[Dict[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "currency": [
                    "djmoney.contrib.exchange.models.Rate",
                    "int",
                    "Dict[str, bool]",
                    "str"
                ]
            }
        },
        "Wallets._update_dry": {
            "name": "_update_dry",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wallets._update_live": {
            "name": "_update_live",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wallets.update": {
            "name": "update",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "require_update": [
                    "bool",
                    "float",
                    "int",
                    "Optional[int]",
                    "Dict[int,dict]"
                ]
            }
        },
        "Wallets.get_all_balances": {
            "name": "get_all_balances",
            "location": 177,
            "return": [
                "str",
                "Tuple[int, int]",
                "int",
                "Dict[str, List[str]]",
                "Optional[str]",
                "Optional[float]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wallets.get_all_positions": {
            "name": "get_all_positions",
            "location": 180,
            "return": [
                "str",
                "int",
                "Tuple[bytes]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wallets.get_starting_balance": {
            "name": "get_starting_balance",
            "location": 183,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]",
                "raiden.constants.Environment"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wallets.get_total_stake_amount": {
            "name": "get_total_stake_amount",
            "location": 196,
            "return": [
                "bytearray",
                "str",
                "Optional[Any]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wallets.get_available_stake_amount": {
            "name": "get_available_stake_amount",
            "location": 217,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wallets._calculate_unlimited_stake_amount": {
            "name": "_calculate_unlimited_stake_amount",
            "location": 228,
            "return": [
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "available_amount": [
                    "str",
                    "int"
                ],
                "val_tied_up": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "Wallets._check_available_stake_amount": {
            "name": "_check_available_stake_amount",
            "location": 241,
            "return": [
                "int",
                "float",
                "str",
                "bytearray",
                "bytes",
                "Iterable[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "stake_amount": [
                    "dict"
                ],
                "available_amount": [
                    "dict"
                ]
            }
        },
        "Wallets.get_trade_stake_amount": {
            "name": "get_trade_stake_amount",
            "location": 265,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "Sequence[int]"
                ],
                "edge": [
                    "None",
                    "bool",
                    "List[Dict[str,Any]]",
                    "Sequence[int]"
                ],
                "update": [
                    "bool",
                    "int"
                ]
            }
        },
        "Wallets.validate_stake_amount": {
            "name": "validate_stake_amount",
            "location": 293,
            "return": [
                "int",
                "float",
                "str",
                "Iterable[int]",
                "bool",
                "T"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "int",
                    "float",
                    "Optional[logging.Logger]"
                ],
                "stake_amount": [
                    "str",
                    "float",
                    "int"
                ],
                "min_stake_amount": [
                    "Union[int, None]",
                    "Callable[[str], int]",
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[int]",
                    "float"
                ],
                "max_stake_amount": [
                    "int",
                    "float",
                    "Sequence",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/worker.py": {
        "Worker.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "config": [
                    "None"
                ]
            }
        },
        "Worker._init": {
            "name": "_init",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reconfig": [
                    "bool",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Worker._notify": {
            "name": "_notify",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int",
                    "logging.Logger"
                ]
            }
        },
        "Worker.run": {
            "name": "run",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker._worker": {
            "name": "_worker",
            "location": 78,
            "return": [
                "Callable",
                "List[str]",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "old_state": [
                    "State[np.ndarray]"
                ]
            }
        },
        "Worker._throttle": {
            "name": "_throttle",
            "location": 129,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable"
                ],
                "throttle_secs": [
                    "Callable",
                    "Callable[[T], bool]",
                    "float"
                ]
            }
        },
        "Worker._process_stopped": {
            "name": "_process_stopped",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker._process_running": {
            "name": "_process_running",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker._reconfigure": {
            "name": "_reconfigure",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.exit": {
            "name": "exit",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "freqtrade-develop/freqtrade/__init__.py": {},
    "freqtrade-develop/freqtrade/__main__.py": {},
    "freqtrade-develop/freqtrade/commands/analyze_commands.py": {
        "setup_analyze_configuration": {
            "name": "setup_analyze_configuration",
            "location": 13,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "method": [
                    "Type[T]",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "start_analysis_entries_exits": {
            "name": "start_analysis_entries_exits",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "freqtrade-develop/freqtrade/commands/arguments.py": {
        "Arguments.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "Arguments.get_parsed_arg": {
            "name": "get_parsed_arg",
            "location": 124,
            "return": [
                "str",
                "bool",
                "Set[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arguments._parse_args": {
            "name": "_parse_args",
            "location": 135,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arguments._build_args": {
            "name": "_build_args",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "optionlist": [
                    "argparse.ArgumentParser",
                    "Callable[[str], T]",
                    "bool",
                    "Sequence[int]",
                    "str"
                ],
                "parser": [
                    "str",
                    "argparse.ArgumentParser",
                    "Optional[str]",
                    "tuple"
                ]
            }
        },
        "Arguments._build_subcommands": {
            "name": "_build_subcommands",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "freqtrade-develop/freqtrade/commands/build_config_commands.py": {
        "validate_is_int": {
            "name": "validate_is_int",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "val": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "validate_is_float": {
            "name": "validate_is_float",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "val": [
                    "float",
                    "int",
                    "bool",
                    "List[Tuple[str, float, int, float]]"
                ]
            }
        },
        "ask_user_overwrite": {
            "name": "ask_user_overwrite",
            "location": 34,
            "return": [
                "str",
                "Optional[bool]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "config_path": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "ask_user_config": {
            "name": "ask_user_config",
            "location": 47,
            "return": [
                "bool",
                "List[str]"
            ],
            "arguments": {}
        },
        "deploy_new_config": {
            "name": "deploy_new_config",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "config_path": [
                    "pathlib.Path",
                    "str",
                    "Union[pathlib.Path, str]"
                ],
                "selections": [
                    "Dict[str, Any]",
                    "str",
                    "type",
                    "List[str]"
                ]
            }
        },
        "start_new_config": {
            "name": "start_new_config",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "freqtrade-develop/freqtrade/commands/cli_options.py": {
        "check_int_positive": {
            "name": "check_int_positive",
            "location": 11,
            "return": [
                "int"
            ],
            "arguments": {
                "value": [
                    "bool",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "check_int_nonzero": {
            "name": "check_int_nonzero",
            "location": 23,
            "return": [
                "int"
            ],
            "arguments": {
                "value": [
                    "bool",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "Arg.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "freqtrade-develop/freqtrade/commands/data_commands.py": {
        "start_download_data": {
            "name": "start_download_data",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "start_convert_trades": {
            "name": "start_convert_trades",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "start_convert_data": {
            "name": "start_convert_data",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "ohlcv": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "start_list_data": {
            "name": "start_list_data",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "freqtrade-develop/freqtrade/commands/db_commands.py": {
        "start_convert_db": {
            "name": "start_convert_db",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "freqtrade-develop/freqtrade/commands/deploy_commands.py": {
        "start_create_userdir": {
            "name": "start_create_userdir",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "deploy_new_strategy": {
            "name": "deploy_new_strategy",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "strategy_name": [
                    "str",
                    "bytes",
                    "int",
                    "Union[int, str]"
                ],
                "strategy_path": [
                    "pathlib.Path",
                    "str"
                ],
                "subtemplate": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "start_new_strategy": {
            "name": "start_new_strategy",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "clean_ui_subdir": {
            "name": "clean_ui_subdir",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "directory": [
                    "float",
                    "Optional[Union[str, Any]]",
                    "Callable",
                    "str",
                    "list",
                    "Union[int, slice]"
                ]
            }
        },
        "read_ui_version": {
            "name": "read_ui_version",
            "location": 103,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]",
                "Optional[bool]",
                "Optional[Literal[only_clustered,include_clustered]]",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "dest_folder": [
                    "str",
                    "List[Tuple[bool, str]]",
                    "list",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "download_and_install_ui": {
            "name": "download_and_install_ui",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "dest_folder": [
                    "bool",
                    "bytes",
                    "Optional[pathlib.Path]",
                    "pathlib.Path"
                ],
                "dl_url": [
                    "int",
                    "bytes",
                    "dict",
                    "str"
                ],
                "version": [
                    "str",
                    "Tuple[int, int]",
                    "bytes"
                ]
            }
        },
        "get_ui_download_url": {
            "name": "get_ui_download_url",
            "location": 131,
            "return": [
                "Tuple[Text]",
                "str",
                "bool"
            ],
            "arguments": {
                "version": [
                    "None",
                    "str",
                    "List[Optional[float]]",
                    "int",
                    "List"
                ]
            }
        },
        "start_install_ui": {
            "name": "start_install_ui",
            "location": 163,
            "return": [
                "None",
                "Union[tuple,list]",
                "Dict[str,Any]",
                "List[int]",
                "str"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "freqtrade-develop/freqtrade/commands/hyperopt_commands.py": {
        "start_hyperopt_list": {
            "name": "start_hyperopt_list",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "start_hyperopt_show": {
            "name": "start_hyperopt_show",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "freqtrade-develop/freqtrade/commands/list_commands.py": {
        "start_list_exchanges": {
            "name": "start_list_exchanges",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "_print_objs_tabular": {
            "name": "_print_objs_tabular",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "objs": [
                    "str",
                    "float",
                    "int",
                    "bool",
                    "list"
                ],
                "print_colorized": [
                    "bool",
                    "str",
                    "List[List[str]]",
                    "Optional[str]"
                ],
                "base_dir": [
                    "str",
                    "bool"
                ]
            }
        },
        "start_list_strategies": {
            "name": "start_list_strategies",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "start_list_timeframes": {
            "name": "start_list_timeframes",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "start_list_markets": {
            "name": "start_list_markets",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "pairs_only": [
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "start_show_trades": {
            "name": "start_show_trades",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "freqtrade-develop/freqtrade/commands/optimize_commands.py": {
        "setup_optimize_configuration": {
            "name": "setup_optimize_configuration",
            "location": 14,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "method": [
                    "Type[T]",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "start_backtesting": {
            "name": "start_backtesting",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "start_backtesting_show": {
            "name": "start_backtesting_show",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "start_hyperopt": {
            "name": "start_hyperopt",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "start_edge": {
            "name": "start_edge",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "freqtrade-develop/freqtrade/commands/pairlist_commands.py": {
        "start_test_pairlist": {
            "name": "start_test_pairlist",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "freqtrade-develop/freqtrade/commands/plot_commands.py": {
        "validate_plot_args": {
            "name": "validate_plot_args",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "start_plot_dataframe": {
            "name": "start_plot_dataframe",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "start_plot_profit": {
            "name": "start_plot_profit",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "freqtrade-develop/freqtrade/commands/trade_commands.py": {
        "start_trading": {
            "name": "start_trading",
            "location": 8,
            "return": [
                "int",
                "Tuple[str,str]",
                "str",
                "List"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "freqtrade-develop/freqtrade/commands/webserver_commands.py": {
        "start_webserver": {
            "name": "start_webserver",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "freqtrade-develop/freqtrade/commands/__init__.py": {},
    "freqtrade-develop/freqtrade/configuration/check_exchange.py": {
        "check_exchange": {
            "name": "check_exchange",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, Union[str, Set]]",
                    "Optional[dict]",
                    "dict",
                    "\"Config\""
                ],
                "check_for_bad": [
                    "bool",
                    "Optional[Iterable[str]]",
                    "str",
                    "int"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/configuration/configuration.py": {
        "Configuration.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "runmode": [
                    "None",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Configuration.get_config": {
            "name": "get_config",
            "location": 36,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]",
                "raiden.constants.Environment"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration.from_files": {
            "name": "from_files",
            "location": 47,
            "return": [
                "str",
                "List[str]",
                "Union[pathlib.Path, str, None]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "files": [
                    "IO[str]",
                    "List[TextIO]",
                    "pathlib.Path",
                    "Iterable[T]",
                    "Optional[str]",
                    "Iterable[TextIO]"
                ]
            }
        },
        "Configuration.load_config": {
            "name": "load_config",
            "location": 62,
            "return": [
                "Optional[dict]",
                "bool",
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration._process_logging_options": {
            "name": "_process_logging_options",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, Any]"
                ]
            }
        },
        "Configuration._process_trading_options": {
            "name": "_process_trading_options",
            "location": 122,
            "return": [
                "None",
                "DefaultDict",
                "str"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, str]",
                    "Optional[type]"
                ]
            }
        },
        "Configuration._process_common_options": {
            "name": "_process_common_options",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, Any]",
                    "dict",
                    "Mapping"
                ]
            }
        },
        "Configuration._process_datadir_options": {
            "name": "_process_datadir_options",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "Configuration._process_optimize_options": {
            "name": "_process_optimize_options",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "Configuration._process_plot_options": {
            "name": "_process_plot_options",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Configuration._process_data_options": {
            "name": "_process_data_options",
            "location": 427,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "Configuration._process_analyze_options": {
            "name": "_process_analyze_options",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Configuration._process_runmode": {
            "name": "_process_runmode",
            "location": 451,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "networkmonitor.src.configuration.IConfig",
                    "Dict[str, Any]"
                ]
            }
        },
        "Configuration._args_to_config": {
            "name": "_args_to_config",
            "location": 464,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ],
                "argname": [
                    "Dict[str, Any]",
                    "str"
                ],
                "logstring": [
                    "str",
                    "logging.Logger",
                    "pathlib.Path"
                ],
                "logfun": [
                    "None",
                    "Optional[Callable]",
                    "str",
                    "Dict[str,Any]",
                    "int"
                ],
                "deprecated_msg": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Callable[[str],str]"
                ]
            }
        },
        "Configuration._resolve_pairs_list": {
            "name": "_resolve_pairs_list",
            "location": 487,
            "return": [
                "Iterator[Tuple[str,str]]",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/configuration/config_setup.py": {
        "setup_utils_configuration": {
            "name": "setup_utils_configuration",
            "location": 13,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "method": [
                    "Callable[..., str]",
                    "dict",
                    "Callable",
                    "Callable[..., T]",
                    "list"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/configuration/config_validation.py": {
        "_extend_validator": {
            "name": "_extend_validator",
            "location": 17,
            "return": [
                "str",
                "List[Text]"
            ],
            "arguments": {
                "validator_class": [
                    "bool",
                    "dict",
                    "type"
                ]
            }
        },
        "validate_config_schema": {
            "name": "validate_config_schema",
            "location": 42,
            "return": [
                "str",
                "bool",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "conf": [
                    "Dict[str, Any]",
                    "int",
                    "str"
                ],
                "preliminary": [
                    "bool",
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "validate_config_consistency": {
            "name": "validate_config_consistency",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "conf": [
                    "Dict[str, Any]"
                ],
                "preliminary": [
                    "bool",
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[str,str]"
                ]
            }
        },
        "_validate_unlimited_amount": {
            "name": "_validate_unlimited_amount",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "conf": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "_validate_price_config": {
            "name": "_validate_price_config",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "conf": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "_validate_trailing_stoploss": {
            "name": "_validate_trailing_stoploss",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "conf": [
                    "dict",
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "Dict[int, Dict[int, Any]]"
                ]
            }
        },
        "_validate_edge": {
            "name": "_validate_edge",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "conf": [
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "int",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "_validate_whitelist": {
            "name": "_validate_whitelist",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "conf": [
                    "Dict[str, Any]",
                    "bool",
                    "Dict[Hashable, Any]",
                    "int"
                ]
            }
        },
        "_validate_protections": {
            "name": "_validate_protections",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "conf": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "_validate_ask_orderbook": {
            "name": "_validate_ask_orderbook",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "conf": [
                    "str"
                ]
            }
        },
        "validate_migrated_strategy_settings": {
            "name": "validate_migrated_strategy_settings",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "conf": [
                    "Dict[str, Dict[str, int]]",
                    "int",
                    "Dict[Hashable, Any]",
                    "List[List[str]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "_validate_time_in_force": {
            "name": "_validate_time_in_force",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "conf": [
                    "str",
                    "int",
                    "Optional['models.LTI1p3Provider']"
                ]
            }
        },
        "_validate_order_types": {
            "name": "_validate_order_types",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "conf": [
                    "dict",
                    "Dict[str, Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "_validate_unfilledtimeout": {
            "name": "_validate_unfilledtimeout",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "conf": [
                    "int",
                    "Hashable"
                ]
            }
        },
        "_validate_pricing_rules": {
            "name": "_validate_pricing_rules",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "conf": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "_strategy_settings": {
            "name": "_strategy_settings",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "conf": [
                    "str",
                    "Callable[[None], bool]"
                ]
            }
        },
        "_extend_validator.set_defaults": {
            "name": "set_defaults",
            "location": 24,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "validator": [
                    "Dict[str, Any]",
                    "Dict[str, Iterable[Any]]",
                    "Iterable[Dict[str, Any]]",
                    "List[str]",
                    "bool"
                ],
                "properties": [
                    "str",
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "Literal",
                    "List[dict]"
                ],
                "instance": [
                    "str",
                    "ClassVar",
                    "Dict[str, int]",
                    "int",
                    "Optional[int]",
                    "bool"
                ],
                "schema": [
                    "Dict[str, Any]",
                    "Dict[str, Iterable[Any]]",
                    "Iterable[Dict[str, Any]]",
                    "List[str]",
                    "bool"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/configuration/deprecated_settings.py": {
        "check_conflicting_settings": {
            "name": "check_conflicting_settings",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "dict"
                ],
                "section_old": [
                    "str",
                    "Mapping[str, Any]",
                    "dict",
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]"
                ],
                "name_old": [
                    "str",
                    "Dict[str, str]",
                    "List[str]",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "section_new": [
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "List[str]",
                    "Mapping[str, Any]"
                ],
                "name_new": [
                    "str",
                    "Optional[object]",
                    "Optional[bool]",
                    "Dict[str, str]",
                    "Optional[bytes]"
                ]
            }
        },
        "process_removed_setting": {
            "name": "process_removed_setting",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "str"
                ],
                "section1": [
                    "str",
                    "Optional[str]"
                ],
                "name1": [
                    "List[Tuple[str, str]]",
                    "str",
                    "int",
                    "type"
                ],
                "section2": [
                    "str",
                    "dict",
                    "Callable[[str], str]",
                    "Optional[str]",
                    "Dict[str, str]"
                ],
                "name2": [
                    "str",
                    "dict",
                    "Callable[[str], str]",
                    "Optional[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "process_deprecated_setting": {
            "name": "process_deprecated_setting",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "section_old": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "name_old": [
                    "Callable[[str], bool]",
                    "MutableMapping[str, Any]"
                ],
                "section_new": [
                    "str",
                    "Sequence[Tuple[str, str]]",
                    "bool"
                ],
                "name_new": [
                    "str",
                    "Sequence[Tuple[str, str]]",
                    "bool"
                ]
            }
        },
        "process_temporary_deprecated_settings": {
            "name": "process_temporary_deprecated_settings",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "Dict[str, Any]",
                    "Type['BaseConfig']"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/configuration/directory_operations.py": {
        "create_datadir": {
            "name": "create_datadir",
            "location": 13,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "str"
                ],
                "datadir": [
                    "None",
                    "Optional[str]",
                    "str",
                    "pathlib.Path",
                    "NamedTuple"
                ]
            }
        },
        "chown_user_directory": {
            "name": "chown_user_directory",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "bool",
                    "pathlib.Path"
                ]
            }
        },
        "create_userdata_dir": {
            "name": "create_userdata_dir",
            "location": 42,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "Union[str, pathlib.Path]",
                    "pathlib.Path",
                    "bool"
                ],
                "create_dir": [
                    "bool",
                    "str"
                ]
            }
        },
        "copy_sample_files": {
            "name": "copy_sample_files",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "Optional[str]",
                    "Tuple[str]"
                ],
                "overwrite": [
                    "bool",
                    "Set[pathlib.Path]",
                    "pathlib.Path",
                    "Callable"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/configuration/environment_vars.py": {
        "get_var_typed": {
            "name": "get_var_typed",
            "location": 12,
            "return": [
                "Union[(float, int, _T0)]"
            ],
            "arguments": {
                "val": [
                    "_T0@@"
                ]
            }
        },
        "flat_vars_to_nested_dict": {
            "name": "flat_vars_to_nested_dict",
            "location": 27,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "env_dict": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[bytes, bytes]"
                ],
                "prefix": [
                    "str",
                    "Optional[Tuple[str]]",
                    "Union[str, Iterable[str]]"
                ]
            }
        },
        "enironment_vars_to_dict": {
            "name": "enironment_vars_to_dict",
            "location": 49,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {}
        }
    },
    "freqtrade-develop/freqtrade/configuration/load_config.py": {
        "log_config_error_range": {
            "name": "log_config_error_range",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "Optional[pathlib.Path]",
                    "IO[bytes]",
                    "str"
                ],
                "errmsg": [
                    "str",
                    "int"
                ]
            }
        },
        "load_file": {
            "name": "load_file",
            "location": 44,
            "return": [
                "Dict[str, Any]",
                "str",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "str",
                    "pathlib.PurePath",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "load_config_file": {
            "name": "load_config_file",
            "location": 53,
            "return": [
                "Dict[str, Any]",
                "Optional[str]",
                "dict",
                "str",
                "Union[pathlib.Path, str]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path",
                    "pathlib.PurePosixPath"
                ]
            }
        },
        "load_from_files": {
            "name": "load_from_files",
            "location": 78,
            "return": [
                "Dict[Text,list[Union[int,str]]]",
                "Optional[dict]",
                "str",
                "Dict"
            ],
            "arguments": {
                "files": [
                    "List[str]",
                    "pathlib.Path",
                    "List[pathlib.Path]",
                    "str"
                ],
                "base_path": [
                    "str",
                    "pathlib.Path"
                ],
                "level": [
                    "int",
                    "pathlib.Path",
                    "str",
                    "pathlib.PurePosixPath",
                    "norfs.fs.base.Path"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/configuration/PeriodicCache.py": {
        "PeriodicCache.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "maxsize": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "ttl": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "getsizeof": [
                    "None",
                    "bool",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]"
                ]
            }
        },
        "PeriodicCache.__init__.local_timer": {
            "name": "local_timer",
            "location": 13,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {}
        }
    },
    "freqtrade-develop/freqtrade/configuration/timerange.py": {
        "TimeRange.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "starttype": [
                    "None",
                    "Optional[str]",
                    "bool",
                    "Optional[int]",
                    "str"
                ],
                "stoptype": [
                    "None",
                    "Optional[str]",
                    "bool",
                    "Optional[int]",
                    "str"
                ],
                "startts": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "stopts": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "TimeRange.__eq__": {
            "name": "__eq__",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TimeRange.subtract_start": {
            "name": "subtract_start",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seconds": [
                    "str",
                    "float"
                ]
            }
        },
        "TimeRange.adjust_start_if_necessary": {
            "name": "adjust_start_if_necessary",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeframe_secs": [
                    "datetime.datetime",
                    "int",
                    "Optional[datetime.date]",
                    "str"
                ],
                "startup_candles": [
                    "int",
                    "datetime.date",
                    "str",
                    "List[str]"
                ],
                "min_date": [
                    "datetime.date",
                    "datetime.datetime",
                    "Sequence[str]"
                ]
            }
        },
        "TimeRange.parse_timerange": {
            "name": "parse_timerange",
            "location": 66,
            "return": [
                "TimeRange",
                "float",
                "str",
                "int",
                "Union[int,Tuple[int,...]]",
                "bool"
            ],
            "arguments": {
                "text": [
                    "str",
                    "type",
                    "Optional[str]",
                    "Union[str, None]"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/configuration/__init__.py": {},
    "freqtrade-develop/freqtrade/data/btanalysis.py": {
        "get_latest_optimize_filename": {
            "name": "get_latest_optimize_filename",
            "location": 33,
            "return": [
                "str",
                "int",
                "Union[str, pathlib.Path]",
                "list"
            ],
            "arguments": {
                "directory": [
                    "pathlib.Path",
                    "str",
                    "int",
                    "Tuple[str]",
                    "Union[str, pathlib.Path]"
                ],
                "variant": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "get_latest_backtest_filename": {
            "name": "get_latest_backtest_filename",
            "location": 63,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "List[int]",
                    "int"
                ]
            }
        },
        "get_latest_hyperopt_filename": {
            "name": "get_latest_hyperopt_filename",
            "location": 76,
            "return": [
                "Text",
                "str",
                "bool"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "List[int]",
                    "int"
                ]
            }
        },
        "get_latest_hyperopt_file": {
            "name": "get_latest_hyperopt_file",
            "location": 93,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "int",
                "Optional[Callable[..., Any]]"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "pathlib.Path",
                    "int",
                    "List[str]"
                ],
                "predef_filename": [
                    "str",
                    "pathlib.Path",
                    "List[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "load_backtest_metadata": {
            "name": "load_backtest_metadata",
            "location": 113,
            "return": [
                "Dict",
                "Union[str,IO]",
                "Dict[str,Any]",
                "Callable[[str],T]",
                "Callable",
                "IO[str]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "int"
                ]
            }
        },
        "load_backtest_stats": {
            "name": "load_backtest_stats",
            "location": 130,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "filename": [
                    "Union[pathlib.Path, str]",
                    "pathlib.Path",
                    "str",
                    "path.Path",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "load_and_merge_backtest_result": {
            "name": "load_and_merge_backtest_result",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "strategy_name": [
                    "str",
                    "int",
                    "dict",
                    "Dict[str, str]",
                    "Optional[str]"
                ],
                "filename": [
                    "str",
                    "bool"
                ],
                "results": [
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "_get_backtest_files": {
            "name": "_get_backtest_files",
            "location": 171,
            "return": [
                "List",
                "List[str]",
                "str",
                "List[Tuple[str,str]]",
                "List[Tuple[int,int,Any]]"
            ],
            "arguments": {
                "dirname": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "get_backtest_resultlist": {
            "name": "get_backtest_resultlist",
            "location": 175,
            "return": [
                "List[dict[Text,]]",
                "str",
                "bool",
                "Dict",
                "Set",
                "List[str]"
            ],
            "arguments": {
                "dirname": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "find_existing_backtest_stats": {
            "name": "find_existing_backtest_stats",
            "location": 195,
            "return": [
                "Dict[Text,Union[dict,list]]",
                "pandas.DataFrame",
                "str",
                "bool",
                "pandas.Series",
                "int",
                "Dict[str,Tuple[int,int]]"
            ],
            "arguments": {
                "dirname": [
                    "str",
                    "int"
                ],
                "run_ids": [
                    "List[int]",
                    "bool",
                    "bytes",
                    "List[Callable]",
                    "str"
                ],
                "min_backtest_date": [
                    "None",
                    "str",
                    "datetime.date",
                    "int",
                    "Optional[str]",
                    "bytes",
                    "datetime",
                    "Tuple[str,str]",
                    "bool"
                ]
            }
        },
        "load_backtest_data": {
            "name": "load_backtest_data",
            "location": 244,
            "return": [
                "int",
                "Type",
                "bool",
                "set"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bool",
                    "dict",
                    "numpy.ndarray"
                ],
                "strategy": [
                    "None",
                    "str",
                    "int",
                    "Optional[Dict]",
                    "Dict"
                ]
            }
        },
        "analyze_trade_parallelism": {
            "name": "analyze_trade_parallelism",
            "location": 298,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "results": [
                    "pandas.DataFrame",
                    "bool",
                    "float",
                    "str"
                ],
                "timeframe": [
                    "bool",
                    "Tuple[str, str]",
                    "int",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "float"
                ]
            }
        },
        "evaluate_result_multi": {
            "name": "evaluate_result_multi",
            "location": 322,
            "return": [
                "float",
                "int",
                "Tuple[int, int]",
                "str"
            ],
            "arguments": {
                "results": [
                    "str",
                    "pandas.DataFrame",
                    "int",
                    "List[int]",
                    "List[str]"
                ],
                "timeframe": [
                    "str",
                    "pandas.DataFrame",
                    "int",
                    "List[int]",
                    "List[str]"
                ],
                "max_open_trades": [
                    "int",
                    "Optional[float]",
                    "bool"
                ]
            }
        },
        "trade_list_to_dataframe": {
            "name": "trade_list_to_dataframe",
            "location": 336,
            "return": [
                "int",
                "numpy.ndarray",
                "str",
                "Union[int, float]",
                "set",
                "bytes"
            ],
            "arguments": {
                "trades": [
                    "dict",
                    "str",
                    "Mapping"
                ]
            }
        },
        "load_trades_from_db": {
            "name": "load_trades_from_db",
            "location": 350,
            "return": [
                "str",
                "int",
                "Type"
            ],
            "arguments": {
                "db_url": [
                    "Optional[str]",
                    "bool",
                    "int",
                    "Sized",
                    "dict"
                ],
                "strategy": [
                    "None",
                    "List",
                    "str",
                    "bytes"
                ]
            }
        },
        "load_trades": {
            "name": "load_trades",
            "location": 368,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "source": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "db_url": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "exportfilename": [
                    "Optional[str]",
                    "pathlib.Path",
                    "str",
                    "bool"
                ],
                "no_trades": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "strategy": [
                    "None",
                    "Optional[str]",
                    "pathlib.Path",
                    "str",
                    "bool"
                ]
            }
        },
        "extract_trades_of_period": {
            "name": "extract_trades_of_period",
            "location": 390,
            "return": [
                "pandas.DataFrame",
                "Sequence",
                "str"
            ],
            "arguments": {
                "dataframe": [
                    "pandas.DataFrame",
                    "int",
                    "list",
                    "List[str]",
                    "Union[pandas.Series, pandas.DataFrame]"
                ],
                "trades": [
                    "int",
                    "Union[pandas.Series, pandas.DataFrame]"
                ],
                "date_index": [
                    "bool",
                    "datetime.datetime",
                    "Optional[BaseException]",
                    "Optional[Type[BaseException]]",
                    "datetime.date"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/data/converter.py": {
        "ohlcv_to_dataframe": {
            "name": "ohlcv_to_dataframe",
            "location": 20,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "ohlcv": [
                    "list",
                    "int",
                    "str",
                    "pandas.DataFrame",
                    "float"
                ],
                "timeframe": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ],
                "pair": [
                    "str",
                    "int",
                    "Tuple[Tuple[str, ...]]",
                    "float"
                ]
            }
        },
        "clean_ohlcv_dataframe": {
            "name": "clean_ohlcv_dataframe",
            "location": 49,
            "return": [
                "str",
                "float",
                "bool",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "data": [
                    "List[int]",
                    "bytes",
                    "pandas.DataFrame",
                    "dict",
                    "data.Data"
                ],
                "timeframe": [
                    "str",
                    "int"
                ],
                "pair": [
                    "str",
                    "int"
                ]
            }
        },
        "ohlcv_fill_up_missing_data": {
            "name": "ohlcv_fill_up_missing_data",
            "location": 84,
            "return": [
                "str",
                "int",
                "pandas.DataFrame",
                "bool"
            ],
            "arguments": {
                "dataframe": [
                    "Iterable[Any]",
                    "Sequence[str]",
                    "List[Tuple[int, int, str]]",
                    "Dict[str, Any]",
                    "pandas.DataFrame"
                ],
                "timeframe": [
                    "str",
                    "int",
                    "pandas.DataFrame",
                    "bool"
                ],
                "pair": [
                    "List[int]",
                    "int",
                    "str",
                    "Sequence['cirq.Qid']",
                    "T"
                ]
            }
        },
        "trim_dataframe": {
            "name": "trim_dataframe",
            "location": 126,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "df": [
                    "bool",
                    "pandas.DataFrame",
                    "Tuple[float, float, float, float]"
                ],
                "timerange": [
                    "datetime.datetime",
                    "int",
                    "str"
                ],
                "df_date_col": [
                    "Text",
                    "str",
                    "pandas.DataFrame",
                    "Optional[bool]"
                ],
                "startup_candles": [
                    "int",
                    "bool",
                    "List[Tuple[int,float]]",
                    "str",
                    "Sequence[T]"
                ]
            }
        },
        "trim_dataframes": {
            "name": "trim_dataframes",
            "location": 149,
            "return": [
                "dict"
            ],
            "arguments": {
                "preprocessed": [
                    "Dict[str, object]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, int]]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]"
                ],
                "timerange": [
                    "int",
                    "Callable",
                    "str"
                ],
                "startup_candles": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "order_book_to_dataframe": {
            "name": "order_book_to_dataframe",
            "location": 170,
            "return": [
                "float",
                "int",
                "Union[bool, None]",
                "str"
            ],
            "arguments": {
                "bids": [
                    "list",
                    "pandas.DataFrame",
                    "int"
                ],
                "asks": [
                    "list",
                    "pandas.DataFrame",
                    "int"
                ]
            }
        },
        "trades_remove_duplicates": {
            "name": "trades_remove_duplicates",
            "location": 195,
            "return": [
                "list"
            ],
            "arguments": {
                "trades": [
                    "List[List]",
                    "Iterable",
                    "bool",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "trades_dict_to_list": {
            "name": "trades_dict_to_list",
            "location": 206,
            "return": [
                "list"
            ],
            "arguments": {
                "trades": [
                    "List[Dict]",
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "trades_to_ohlcv": {
            "name": "trades_to_ohlcv",
            "location": 215,
            "return": [
                "float",
                "str",
                "bool"
            ],
            "arguments": {
                "trades": [
                    "list",
                    "pandas.DataFrame",
                    "int"
                ],
                "timeframe": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ]
            }
        },
        "convert_trades_format": {
            "name": "convert_trades_format",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "str"
                ],
                "convert_from": [
                    "str",
                    "Optional[str]",
                    "Mapping[str, Any]",
                    "Callable",
                    "List[dict]"
                ],
                "convert_to": [
                    "str",
                    "Optional[str]",
                    "Mapping[str, Any]",
                    "Callable",
                    "List[dict]"
                ],
                "erase": [
                    "bool",
                    "Optional[Callable]",
                    "str",
                    "Optional[List[Any]]"
                ]
            }
        },
        "convert_ohlcv_format": {
            "name": "convert_ohlcv_format",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "str",
                    "List[str]"
                ],
                "convert_from": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "convert_to": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "erase": [
                    "bool",
                    "str",
                    "Optional[Callable]",
                    "List[str]"
                ],
                "candle_type": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "dict"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/data/dataprovider.py": {
        "DataProvider.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "exchange": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ],
                "pairlists": [
                    "None",
                    "Dict[str,Any]",
                    "Mapping[str,Any]"
                ]
            }
        },
        "DataProvider._set_dataframe_max_index": {
            "name": "_set_dataframe_max_index",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "limit_index": [
                    "bool",
                    "float"
                ]
            }
        },
        "DataProvider._set_cached_df": {
            "name": "_set_cached_df",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "datetime.date",
                    "bool",
                    "Optional[Callable[[bool], None]]"
                ],
                "timeframe": [
                    "str",
                    "datetime.date",
                    "bool",
                    "Optional[Callable[[bool], None]]"
                ],
                "dataframe": [
                    "str",
                    "datetime.date",
                    "bool",
                    "Optional[Callable[[bool], None]]"
                ],
                "candle_type": [
                    "str",
                    "datetime.date",
                    "bool",
                    "Optional[Callable[[bool], None]]"
                ]
            }
        },
        "DataProvider.add_pairlisthandler": {
            "name": "add_pairlisthandler",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pairlists": [
                    "int",
                    "Optional[str]",
                    "datetime.datetime"
                ]
            }
        },
        "DataProvider.historic_ohlcv": {
            "name": "historic_ohlcv",
            "location": 69,
            "return": [
                "str",
                "float",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "bool"
                ],
                "timeframe": [
                    "None",
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "Optional[str]"
                ],
                "candle_type": [
                    "Text",
                    "bool",
                    "str"
                ]
            }
        },
        "DataProvider.get_pair_dataframe": {
            "name": "get_pair_dataframe",
            "location": 102,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "Dict[str, Any]",
                    "Optional[constants.ChannelList]"
                ],
                "timeframe": [
                    "None",
                    "str",
                    "bool",
                    "Optional[bool]",
                    "Dict[str,Any]",
                    "Optional[constants.ChannelList]"
                ],
                "candle_type": [
                    "Text",
                    "str",
                    "bool",
                    "Optional[bool]",
                    "Dict[str,Any]",
                    "Optional[constants.ChannelList]"
                ]
            }
        },
        "DataProvider.get_analyzed_dataframe": {
            "name": "get_analyzed_dataframe",
            "location": 128,
            "return": [
                "Tuple",
                "str",
                "Tuple[DataFrame]",
                "Dict[str,Dict[str,Any]]",
                "int",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "Optional[str]",
                    "djmoney.contrib.exchange.models.Rate",
                    "dict",
                    "str",
                    "bool",
                    "int"
                ],
                "timeframe": [
                    "Optional[str]",
                    "djmoney.contrib.exchange.models.Rate",
                    "dict",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "DataProvider.runmode": {
            "name": "runmode",
            "location": 152,
            "return": [
                "RunMode",
                "bool",
                "Optional[str]",
                "Mapping[str,str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataProvider.current_whitelist": {
            "name": "current_whitelist",
            "location": 159,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataProvider.clear_cache": {
            "name": "clear_cache",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataProvider.refresh": {
            "name": "refresh",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pairlist": [
                    "int",
                    "Callable",
                    "str"
                ],
                "helping_pairs": [
                    "None",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "DataProvider.available_pairs": {
            "name": "available_pairs",
            "location": 197,
            "return": [
                "List",
                "List[str]",
                "List[Tuple[str,str]]",
                "freqtrade.constants.ListPairsWithTimeframes"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataProvider.ohlcv": {
            "name": "ohlcv",
            "location": 206,
            "return": [
                "DataFrame",
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "Optional[Callable[[Dict], bool]]",
                    "dict"
                ],
                "timeframe": [
                    "None",
                    "Optional[str]",
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "Optional[Callable[[Dict],bool]]",
                    "Dict"
                ],
                "copy": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Dict[str,Any]",
                    "Optional[Callable[[Dict],bool]]",
                    "Dict"
                ],
                "candle_type": [
                    "Text",
                    "str",
                    "Optional[int]",
                    "bool",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "DataProvider.market": {
            "name": "market",
            "location": 234,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "DataProvider.ticker": {
            "name": "ticker",
            "location": 244,
            "return": [
                "Dict",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "DataProvider.orderbook": {
            "name": "orderbook",
            "location": 257,
            "return": [
                "DefaultDict[int, List[Any]]",
                "OrderedDict",
                "str"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "DefaultDict[int, List[Any]]",
                    "OrderedDict",
                    "str"
                ],
                "maximum": [
                    "DefaultDict[int, List[Any]]",
                    "OrderedDict",
                    "str"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/data/entryexitanalysis.py": {
        "_load_signal_candles": {
            "name": "_load_signal_candles",
            "location": 17,
            "return": [
                "str",
                "bool",
                "Optional[freqtrade.exchange.Exchange]",
                "pandas._FilePathOrBuffer"
            ],
            "arguments": {
                "backtest_dir": [
                    "pathlib.Path",
                    "str",
                    "norfs.fs.base.Path",
                    "bool"
                ]
            }
        },
        "_process_candles_and_indicators": {
            "name": "_process_candles_and_indicators",
            "location": 35,
            "return": [
                "Dict[,dict]",
                "str",
                "Dict",
                "Dict[str,Any]"
            ],
            "arguments": {
                "pairlist": [
                    "str",
                    "int",
                    "bool",
                    "Optional[IO[str]]"
                ],
                "strategy_name": [
                    "str",
                    "Dict[str, str]",
                    "Set[str]"
                ],
                "trades": [
                    "str",
                    "Iterable[str]",
                    "Dict[str, Any]",
                    "type"
                ],
                "signal_candles": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "_analyze_candles_and_indicators": {
            "name": "_analyze_candles_and_indicators",
            "location": 54,
            "return": [
                "bool",
                "Dict[str, Any]",
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "pair": [
                    "int",
                    "Callable",
                    "str"
                ],
                "trades": [
                    "int",
                    "Callable",
                    "str"
                ],
                "signal_candles": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_do_group_table_output": {
            "name": "_do_group_table_output",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "bigdf": [
                    "List[List[T]]",
                    "int",
                    "bytes",
                    "str"
                ],
                "glist": [
                    "str",
                    "Match[Any]",
                    "bytes",
                    "bool",
                    "list"
                ]
            }
        },
        "_print_results": {
            "name": "_print_results",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "analysed_trades": [
                    "bool",
                    "Dict[str, List[str]]",
                    "Dict[str, Dict[str, float]]"
                ],
                "stratname": [
                    "bool",
                    "Dict[str, List[str]]",
                    "Dict[str, Dict[str, float]]"
                ],
                "analysis_groups": [
                    "bool",
                    "Set[str]",
                    "Dict[str, Union[str, int]]",
                    "List[str]",
                    "str"
                ],
                "enter_reason_list": [
                    "List[str]",
                    "list",
                    "tuple",
                    "str",
                    "List[bytes]"
                ],
                "exit_reason_list": [
                    "List[str]",
                    "list",
                    "tuple",
                    "str",
                    "List[bytes]"
                ],
                "indicator_list": [
                    "float",
                    "list",
                    "tuple",
                    "int",
                    "List[Tuple[str, str]]",
                    "bool"
                ],
                "columns": [
                    "None",
                    "bool",
                    "Optional[int]",
                    "Optional[Tuple[float,float]]",
                    "Optional[bool]",
                    "Optional[Type[Any]]"
                ]
            }
        },
        "_print_table": {
            "name": "_print_table",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "str",
                    "Union[int, str]"
                ],
                "sortcols": [
                    "Optional[str]",
                    "None"
                ],
                "show_index": [
                    "bool",
                    "str",
                    "bytes",
                    "Dict[str,str]"
                ]
            }
        },
        "process_entry_exit_reasons": {
            "name": "process_entry_exit_reasons",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "backtest_dir": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ],
                "pairlist": [
                    "dict",
                    "bool",
                    "Dict[str, int]",
                    "List[Dict[str, Any]]",
                    "Tuple[str, str, str]",
                    "Dict[str, str]"
                ],
                "analysis_groups": [
                    "List[Text]",
                    "bool",
                    "List[dict]"
                ],
                "enter_reason_list": [
                    "List[Text]",
                    "bool",
                    "List[dict]"
                ],
                "exit_reason_list": [
                    "List[Text]",
                    "bool",
                    "List[dict]"
                ],
                "indicator_list": [
                    "List",
                    "bool",
                    "List[dict]"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/data/metrics.py": {
        "calculate_market_change": {
            "name": "calculate_market_change",
            "location": 11,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "data": [
                    "Dict[str, pandas.DataFrame]",
                    "Dict[str, str]",
                    "dict",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]"
                ],
                "column": [
                    "Text",
                    "Tuple[int,int]",
                    "Tuple[str,str]",
                    "Codebook",
                    "List[str]",
                    "str"
                ]
            }
        },
        "combine_dataframes_with_mean": {
            "name": "combine_dataframes_with_mean",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "data": [
                    "Optional[Any]",
                    "str",
                    "dict",
                    "Dict[str, pandas.DataFrame]",
                    "numpy.ndarray"
                ],
                "column": [
                    "Text",
                    "Optional[Any]",
                    "str",
                    "Dict",
                    "Dict[str,pandas.DataFrame]",
                    "numpy.ndarray"
                ]
            }
        },
        "create_cum_profit": {
            "name": "create_cum_profit",
            "location": 49,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "df": [
                    "str",
                    "pandas.DataFrame",
                    "Optional[str]"
                ],
                "trades": [
                    "str",
                    "TextIO",
                    "List[str]"
                ],
                "col_name": [
                    "str",
                    "pandas.DataFrame",
                    "Optional[str]"
                ],
                "timeframe": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "float"
                ]
            }
        },
        "_calc_drawdown_series": {
            "name": "_calc_drawdown_series",
            "location": 75,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "profit_results": [
                    "str",
                    "bool",
                    "Optional[List[int]]",
                    "Union[Sequence[Any], Tuple[float, float]]"
                ]
            }
        },
        "calculate_underwater": {
            "name": "calculate_underwater",
            "location": 95,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "trades": [
                    "Optional[str]",
                    "Optional[\"ShippingInfo\"]",
                    "Optional[\"PaymentInfo\"]",
                    "Optional[bool]"
                ]
            }
        },
        "calculate_max_drawdown": {
            "name": "calculate_max_drawdown",
            "location": 119,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "trades": [
                    "Optional[str]",
                    "Optional[\"ShippingInfo\"]",
                    "Optional[\"PaymentInfo\"]",
                    "Optional[bool]"
                ]
            }
        },
        "calculate_csum": {
            "name": "calculate_csum",
            "location": 165,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "trades": [
                    "int",
                    "Optional[Collection[int]]",
                    "tuple",
                    "Optional[float]",
                    "bool"
                ],
                "starting_balance": [
                    "int",
                    "numpy.ndarray",
                    "Optional[float]",
                    "bool",
                    "float"
                ]
            }
        },
        "calculate_cagr": {
            "name": "calculate_cagr",
            "location": 184,
            "return": [
                "float",
                "int",
                "Optional[int]",
                "Optional[List[int]]",
                "pandas.DataFrame",
                "str"
            ],
            "arguments": {
                "days_passed": [
                    "int",
                    "Dict[str, str]",
                    "Optional[List[\"CustomLineItemDraft\"]]",
                    "Optional[int]"
                ],
                "starting_balance": [
                    "int",
                    "Dict[str, str]",
                    "Optional[List[\"CustomLineItemDraft\"]]",
                    "Optional[int]"
                ],
                "final_balance": [
                    "int",
                    "Dict[str, str]",
                    "Optional[List[\"CustomLineItemDraft\"]]",
                    "Optional[int]"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/data/__init__.py": {},
    "freqtrade-develop/freqtrade/data/history/hdf5datahandler.py": {
        "HDF5DataHandler.ohlcv_get_available_data": {
            "name": "ohlcv_get_available_data",
            "location": 25,
            "return": [
                "List[Tuple[(str, str, Any)]]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "datadir": [
                    "str",
                    "Optional[Dict]",
                    "Dict[str, Union[str, int]]",
                    "List[str]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "trading_mode": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[List[str]]"
                ]
            }
        },
        "HDF5DataHandler.ohlcv_get_pairs": {
            "name": "ohlcv_get_pairs",
            "location": 48,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, dict]",
                    "Optional[dict]",
                    "Pattern",
                    "bool"
                ],
                "datadir": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "timeframe": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "bool"
                ],
                "candle_type": [
                    "type",
                    "bool"
                ]
            }
        },
        "HDF5DataHandler.ohlcv_store": {
            "name": "ohlcv_store",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "bytes",
                    "dict",
                    "str"
                ],
                "timeframe": [
                    "bytes",
                    "dict",
                    "str"
                ],
                "data": [
                    "str",
                    "int",
                    "Dict[str, numpy.ndarray]",
                    "Set[str]",
                    "dict",
                    "bytes"
                ],
                "candle_type": [
                    "bytes",
                    "str"
                ]
            }
        },
        "HDF5DataHandler._ohlcv_load": {
            "name": "_ohlcv_load",
            "location": 88,
            "return": [
                "bytes",
                "str",
                "IO",
                "Tuple[str, str]",
                "Callable[[], str]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "dict",
                    "int",
                    "Union[bytes, str]"
                ],
                "timeframe": [
                    "dict",
                    "int",
                    "Union[bytes, str]"
                ],
                "timerange": [
                    "numpy.ndarray",
                    "Type",
                    "Type[T]",
                    "str"
                ],
                "candle_type": [
                    "str",
                    "bytes",
                    "int",
                    "bool"
                ]
            }
        },
        "HDF5DataHandler.ohlcv_append": {
            "name": "ohlcv_append",
            "location": 132,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "bool",
                    "str",
                    "dict"
                ],
                "timeframe": [
                    "bool",
                    "str",
                    "dict"
                ],
                "data": [
                    "bool",
                    "str",
                    "dict"
                ],
                "candle_type": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "HDF5DataHandler.trades_get_pairs": {
            "name": "trades_get_pairs",
            "location": 149,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes"
                ],
                "datadir": [
                    "str",
                    "List[int]",
                    "List[str]"
                ]
            }
        },
        "HDF5DataHandler.trades_store": {
            "name": "trades_store",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "dict",
                    "pandas.DataFrame",
                    "bool",
                    "Union[str, Dict[str, Any]]"
                ],
                "data": [
                    "list",
                    "str",
                    "pandas.DataFrame",
                    "Iterable",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "HDF5DataHandler.trades_append": {
            "name": "trades_append",
            "location": 175,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "bool",
                    "str",
                    "idatahandler.TradeList"
                ],
                "data": [
                    "bool",
                    "str",
                    "idatahandler.TradeList"
                ]
            }
        },
        "HDF5DataHandler._trades_load": {
            "name": "_trades_load",
            "location": 184,
            "return": [
                "List",
                "str",
                "int",
                "List[str]",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "Union[str, IO]",
                    "bytes",
                    "pathlib.Path"
                ],
                "timerange": [
                    "None",
                    "Optional[freqtrade.configuration.TimeRange]",
                    "int"
                ]
            }
        },
        "HDF5DataHandler._get_file_extension": {
            "name": "_get_file_extension",
            "location": 208,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "HDF5DataHandler._pair_ohlcv_key": {
            "name": "_pair_ohlcv_key",
            "location": 212,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable"
                ],
                "pair": [
                    "str",
                    "pathlib.Path"
                ],
                "timeframe": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "HDF5DataHandler._pair_trades_key": {
            "name": "_pair_trades_key",
            "location": 218,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable"
                ],
                "pair": [
                    "str",
                    "Callable"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/data/history/history_utils.py": {
        "load_pair_history": {
            "name": "load_pair_history",
            "location": 24,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]",
                "int",
                "pandas.DataFrame",
                "Iterable[int]"
            ],
            "arguments": {
                "pair": [
                    "bool",
                    "str",
                    "Optional[freqtrade.configuration.TimeRange]",
                    "int",
                    "Dict[str, str]"
                ],
                "timeframe": [
                    "bool",
                    "str",
                    "Optional[freqtrade.configuration.TimeRange]",
                    "int",
                    "Dict[str, str]"
                ],
                "datadir": [
                    "logging.Logger",
                    "pathlib.Path",
                    "str",
                    "bool"
                ]
            }
        },
        "load_data": {
            "name": "load_data",
            "location": 63,
            "return": [
                "Dict[,DataFrame]",
                "str",
                "Set",
                "Dict",
                "List[bool]",
                "Optional[str]"
            ],
            "arguments": {
                "datadir": [
                    "pathlib.Path",
                    "str",
                    "int",
                    "logging.Logger",
                    "bool"
                ],
                "timeframe": [
                    "bool",
                    "str",
                    "Optional[freqtrade.configuration.TimeRange]",
                    "freqtrade.arguments.TimeRange",
                    "Optional[pathlib.Path]",
                    "List[str]",
                    "Generator"
                ],
                "pairs": [
                    "bool",
                    "List[str]",
                    "int",
                    "Iterable[str]",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "refresh_data": {
            "name": "refresh_data",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_load_cached_data_for_updating": {
            "name": "_load_cached_data_for_updating",
            "location": 142,
            "return": [
                "Tuple[Union[DataFrame,int,None]]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "pair": [
                    "bool",
                    "Optional[Path]",
                    "int"
                ],
                "timeframe": [
                    "bool",
                    "Optional[Path]",
                    "int"
                ],
                "timerange": [
                    "Optional[datetime.datetime]",
                    "int",
                    "datetime.datetime"
                ],
                "data_handler": [
                    "bool",
                    "Optional[Path]",
                    "int"
                ],
                "candle_type": [
                    "bool",
                    "Optional[Path]",
                    "int"
                ],
                "prepend": [
                    "bool",
                    "int",
                    "Tuple",
                    "str"
                ]
            }
        },
        "_download_pair_history": {
            "name": "_download_pair_history",
            "location": 185,
            "return": [
                "bool"
            ],
            "arguments": {
                "pair": [
                    "bool",
                    "str",
                    "Dict[str, allennlp.data.token_indexers.TokenIndexer]",
                    "dict",
                    "MutableSequence[str]"
                ]
            }
        },
        "refresh_backtest_ohlcv_data": {
            "name": "refresh_backtest_ohlcv_data",
            "location": 270,
            "return": [
                "List",
                "str",
                "int",
                "pandas.DataFrame",
                "bytes",
                "Set"
            ],
            "arguments": {
                "exchange": [
                    "Optional[float]",
                    "int",
                    "float"
                ],
                "pairs": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "timeframes": [
                    "bool",
                    "int",
                    "str"
                ],
                "datadir": [
                    "str",
                    "logging.Logger",
                    "bytes",
                    "Optional[float]"
                ],
                "trading_mode": [
                    "int",
                    "bool",
                    "List[\"DictDataLoader\"]",
                    "float",
                    "str"
                ],
                "timerange": [
                    "None",
                    "int",
                    "List[int]",
                    "bool",
                    "Iterable[str]"
                ],
                "new_pairs_days": [
                    "int",
                    "List[int]",
                    "bool",
                    "Iterable[str]"
                ],
                "erase": [
                    "bool",
                    "int",
                    "List[int]",
                    "Iterable[str]"
                ],
                "data_format": [
                    "None",
                    "str",
                    "logging.Logger",
                    "bytes",
                    "Optional[float]"
                ],
                "prepend": [
                    "bool",
                    "int",
                    "List[int]",
                    "Iterable[str]"
                ]
            }
        },
        "_download_trades_history": {
            "name": "_download_trades_history",
            "location": 319,
            "return": [
                "bool"
            ],
            "arguments": {
                "exchange": [
                    "int",
                    "float",
                    "DataFrame",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "pair": [
                    "str",
                    "int",
                    "logging.Logger",
                    "bool",
                    "Callable"
                ]
            }
        },
        "refresh_backtest_trades_data": {
            "name": "refresh_backtest_trades_data",
            "location": 386,
            "return": [
                "List",
                "str",
                "int",
                "pandas.DataFrame",
                "bytes",
                "Set"
            ],
            "arguments": {
                "exchange": [
                    "str",
                    "bool"
                ],
                "pairs": [
                    "str",
                    "bool"
                ],
                "datadir": [
                    "str",
                    "logging.Logger",
                    "Union[bytes, str]",
                    "bool"
                ],
                "timerange": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "new_pairs_days": [
                    "int",
                    "str",
                    "bool",
                    "bytes"
                ],
                "erase": [
                    "bool",
                    "str"
                ],
                "data_format": [
                    "Text",
                    "str",
                    "logging.Logger",
                    "Union[bytes,str]",
                    "bool"
                ]
            }
        },
        "convert_trades_to_ohlcv": {
            "name": "convert_trades_to_ohlcv",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {
                "pairs": [
                    "List[str]",
                    "bool",
                    "List[pathlib.Path]",
                    "Optional[Callable]",
                    "str"
                ],
                "timeframes": [
                    "List[str]",
                    "bool",
                    "List[pathlib.Path]",
                    "Optional[Callable]",
                    "str"
                ],
                "datadir": [
                    "str",
                    "int"
                ],
                "timerange": [
                    "List[str]",
                    "bool",
                    "List[pathlib.Path]",
                    "Optional[Callable]",
                    "str"
                ],
                "erase": [
                    "bool",
                    "List[str]",
                    "List[pathlib.Path]",
                    "Optional[Callable]",
                    "str"
                ],
                "data_format_ohlcv": [
                    "Text",
                    "str",
                    "List[str]",
                    "int",
                    "Optional[str]"
                ],
                "data_format_trades": [
                    "Text",
                    "str",
                    "List[str]",
                    "int",
                    "Optional[str]"
                ],
                "candle_type": [
                    "Optional[List[str]]",
                    "str",
                    "Optional[str]",
                    "Optional[recidiviz.common.constants.state.state_assessmenStateAssessmentType]",
                    "Optional[\"ShippingRateInputType\"]",
                    "Dict[str, str]"
                ]
            }
        },
        "get_timerange": {
            "name": "get_timerange",
            "location": 445,
            "return": [
                "Tuple[tuple]",
                "str",
                "Optional[str]",
                "bytes",
                "int",
                "List[Dict[str,Any]]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "dict",
                    "bytes"
                ]
            }
        },
        "validate_backtest_data": {
            "name": "validate_backtest_data",
            "location": 460,
            "return": [
                "bool",
                "Optional[Dict[str,Any]]",
                "List[Union[int,Any]]"
            ],
            "arguments": {
                "data": [
                    "int",
                    "List[str]",
                    "List[int]",
                    "str",
                    "bool",
                    "dict"
                ],
                "pair": [
                    "str",
                    "List[str]"
                ],
                "min_date": [
                    "int",
                    "str",
                    "datetime.date"
                ],
                "max_date": [
                    "int",
                    "str",
                    "datetime.date"
                ],
                "timeframe_min": [
                    "int",
                    "str",
                    "datetime.date"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/data/history/idatahandler.py": {
        "get_datahandlerclass": {
            "name": "get_datahandlerclass",
            "location": 325,
            "return": [
                "Type[Union[(freqtrade.data.history.hdf5datahandler.HDF5DataHandler, freqtrade.data.history.jsondatahandler.JsonDataHandler)]]"
            ],
            "arguments": {
                "datatype": [
                    "Union[int, str]",
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "get_datahandler": {
            "name": "get_datahandler",
            "location": 347,
            "return": [
                "Union[(freqtrade.data.history.hdf5datahandler.HDF5DataHandler, freqtrade.data.history.jsondatahandler.JsonDataHandler, _T2)]"
            ],
            "arguments": {
                "datadir": [
                    "str",
                    "Callable",
                    "int",
                    "bool",
                    "Optional[Any]"
                ],
                "data_format": [
                    "None",
                    "str",
                    "Optional[str]"
                ],
                "data_handler": [
                    "None",
                    "str",
                    "Callable",
                    "int",
                    "bool",
                    "Optional[Any]"
                ]
            }
        },
        "IDataHandler.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "datadir": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "IDataHandler._get_file_extension": {
            "name": "_get_file_extension",
            "location": 35,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "IDataHandler.ohlcv_get_available_data": {
            "name": "ohlcv_get_available_data",
            "location": 43,
            "return": [
                "freqtrade.constants.ListPairsWithTimeframes",
                "None"
            ],
            "arguments": {
                "cls": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Iterable[str]",
                    "constants.HttpRequestMethod",
                    "int",
                    "Literal"
                ],
                "datadir": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Iterable[str]",
                    "constants.HttpRequestMethod",
                    "int",
                    "Literal"
                ],
                "trading_mode": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Iterable[str]",
                    "constants.HttpRequestMethod",
                    "int",
                    "Literal"
                ]
            }
        },
        "IDataHandler.ohlcv_get_pairs": {
            "name": "ohlcv_get_pairs",
            "location": 54,
            "return": [
                "List[str]",
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Optional['Node']",
                    "List[dict]"
                ],
                "datadir": [
                    "bool",
                    "str",
                    "Optional['Node']",
                    "List[dict]"
                ],
                "timeframe": [
                    "bool",
                    "str",
                    "Optional['Node']",
                    "List[dict]"
                ],
                "candle_type": [
                    "bool",
                    "str",
                    "Optional['Node']",
                    "List[dict]"
                ]
            }
        },
        "IDataHandler.ohlcv_store": {
            "name": "ohlcv_store",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "bool",
                    "str",
                    "int"
                ],
                "timeframe": [
                    "bool",
                    "str",
                    "int"
                ],
                "data": [
                    "bool",
                    "str",
                    "int"
                ],
                "candle_type": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "IDataHandler._ohlcv_load": {
            "name": "_ohlcv_load",
            "location": 77,
            "return": [
                "pandas.DataFrame",
                "None"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "bool",
                    "Iterable",
                    "Optional[str]"
                ],
                "timeframe": [
                    "bool",
                    "Iterable",
                    "Optional[str]"
                ],
                "timerange": [
                    "bool",
                    "Iterable",
                    "Optional[str]"
                ],
                "candle_type": [
                    "bool",
                    "Iterable",
                    "Optional[str]"
                ]
            }
        },
        "IDataHandler.ohlcv_purge": {
            "name": "ohlcv_purge",
            "location": 93,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "int",
                    "bytes",
                    "Type['Model']",
                    "bool"
                ],
                "timeframe": [
                    "str",
                    "int",
                    "bytes",
                    "Type['Model']",
                    "bool"
                ],
                "candle_type": [
                    "str",
                    "int",
                    "bytes",
                    "Type['Model']",
                    "bool"
                ]
            }
        },
        "IDataHandler.ohlcv_append": {
            "name": "ohlcv_append",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "bool",
                    "str",
                    "dict"
                ],
                "timeframe": [
                    "bool",
                    "str",
                    "dict"
                ],
                "data": [
                    "bool",
                    "str",
                    "dict"
                ],
                "candle_type": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "IDataHandler.trades_get_pairs": {
            "name": "trades_get_pairs",
            "location": 125,
            "return": [
                "List[str]",
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Type[T]",
                    "List[str]"
                ],
                "datadir": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Type[T]",
                    "List[str]"
                ]
            }
        },
        "IDataHandler.trades_store": {
            "name": "trades_store",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "Optional[str]",
                    "int",
                    "pandas.DataFrame",
                    "list",
                    "List[str]"
                ],
                "data": [
                    "str",
                    "Optional[str]",
                    "int",
                    "pandas.DataFrame",
                    "list",
                    "List[str]"
                ]
            }
        },
        "IDataHandler.trades_append": {
            "name": "trades_append",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "bool",
                    "str",
                    "idatahandler.TradeList"
                ],
                "data": [
                    "bool",
                    "str",
                    "idatahandler.TradeList"
                ]
            }
        },
        "IDataHandler._trades_load": {
            "name": "_trades_load",
            "location": 151,
            "return": [
                "freqtrade.constants.TradeList",
                "None"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "Optional[freqtrade.configuration.TimeRange]",
                    "Type[OrderedDict]",
                    "o2a.converter.workflow.Workflow"
                ],
                "timerange": [
                    "None",
                    "Optional[freqtrade.configuration.TimeRange]",
                    "Type[OrderedDict]",
                    "o2a.converter.workflow.Workflow"
                ]
            }
        },
        "IDataHandler.trades_purge": {
            "name": "trades_purge",
            "location": 159,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "List[int]",
                    "bytes"
                ]
            }
        },
        "IDataHandler.trades_load": {
            "name": "trades_load",
            "location": 171,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "bool",
                    "str",
                    "Optional[freqtrade.exchange.Exchange]",
                    "pandas._FilePathOrBuffer"
                ],
                "timerange": [
                    "None",
                    "bool",
                    "str",
                    "Optional[freqtrade.exchange.Exchange]",
                    "pandas._FilePathOrBuffer"
                ]
            }
        },
        "IDataHandler.create_dir_if_needed": {
            "name": "create_dir_if_needed",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Iterable"
                ],
                "datadir": [
                    "str",
                    "dict",
                    "Optional[T]",
                    "List[Union[str, \"SqlFile\"]]"
                ]
            }
        },
        "IDataHandler._pair_data_filename": {
            "name": "_pair_data_filename",
            "location": 191,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [
                    "list",
                    "str",
                    "Optional[str]"
                ],
                "datadir": [
                    "str",
                    "dict",
                    "Exception",
                    "List[str]",
                    "Dict[str, str]",
                    "Optional[\"AbstractPurpose\"]",
                    "bytes"
                ],
                "pair": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "timeframe": [
                    "list",
                    "str",
                    "Optional[str]"
                ],
                "candle_type": [
                    "Type",
                    "str"
                ],
                "no_timeframe_modify": [
                    "bool",
                    "int",
                    "Optional[int]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "IDataHandler._pair_trades_filename": {
            "name": "_pair_trades_filename",
            "location": 212,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[Union[str, pathlib.Path]]"
                ],
                "datadir": [
                    "str",
                    "Optional[Union[str, pathlib.Path]]"
                ],
                "pair": [
                    "str",
                    "int"
                ]
            }
        },
        "IDataHandler.timeframe_to_file": {
            "name": "timeframe_to_file",
            "location": 218,
            "return": [
                "str",
                "pathlib.Path",
                "datetime.datetime"
            ],
            "arguments": {
                "timeframe": [
                    "str",
                    "pathlib.Path",
                    "datetime.datetime"
                ]
            }
        },
        "IDataHandler.rebuild_timeframe_from_filename": {
            "name": "rebuild_timeframe_from_filename",
            "location": 222,
            "return": [
                "str"
            ],
            "arguments": {
                "timeframe": [
                    "int",
                    "AbstractSet[str]",
                    "Tuple[float, float]",
                    "bool"
                ]
            }
        },
        "IDataHandler.rebuild_pair_from_filename": {
            "name": "rebuild_pair_from_filename",
            "location": 230,
            "return": [
                "str"
            ],
            "arguments": {
                "pair": [
                    "int",
                    "str",
                    "bool",
                    "Iterable"
                ]
            }
        },
        "IDataHandler.ohlcv_load": {
            "name": "ohlcv_load",
            "location": 239,
            "return": [
                "bool",
                "str",
                "Optional[freqtrade.exchange.Exchange]",
                "pandas._FilePathOrBuffer"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "int",
                    "Iterable[T]",
                    "Optional[int]",
                    "bool"
                ],
                "timeframe": [
                    "int",
                    "Union[str, int]",
                    "float"
                ],
                "candle_type": [
                    "str",
                    "int",
                    "Iterable[T]",
                    "Optional[int]",
                    "bool"
                ],
                "timerange": [
                    "str",
                    "None"
                ],
                "fill_missing": [
                    "bool",
                    "int",
                    "str"
                ],
                "drop_incomplete": [
                    "bool",
                    "int",
                    "str"
                ],
                "startup_candles": [
                    "int",
                    "str",
                    "bool"
                ],
                "warn_no_data": [
                    "bool",
                    "List[str]"
                ]
            }
        },
        "IDataHandler._check_empty_df": {
            "name": "_check_empty_df",
            "location": 291,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pairdf": [
                    "bool",
                    "float",
                    "Optional[bool]"
                ],
                "pair": [
                    "str",
                    "int",
                    "Tuple[str, str]",
                    "bool"
                ],
                "timeframe": [
                    "str",
                    "int",
                    "Tuple[str, str]",
                    "bool"
                ],
                "candle_type": [
                    "str",
                    "int",
                    "Tuple[str, str]",
                    "bool"
                ],
                "warn_no_data": [
                    "bool",
                    "float",
                    "Callable",
                    "Sequence[str]",
                    "Optional[str]"
                ]
            }
        },
        "IDataHandler._validate_pairdata": {
            "name": "_validate_pairdata",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "float",
                    "bool",
                    "int"
                ],
                "pairdata": [
                    "str",
                    "float"
                ],
                "timeframe": [
                    "str",
                    "float",
                    "bool",
                    "int"
                ],
                "candle_type": [
                    "str",
                    "float",
                    "bool",
                    "int"
                ],
                "timerange": [
                    "str",
                    "int",
                    "Optional[datetime.tzinfo]",
                    "Union[int, None]",
                    "datetime.datetime"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/data/history/jsondatahandler.py": {
        "JsonDataHandler.ohlcv_get_available_data": {
            "name": "ohlcv_get_available_data",
            "location": 27,
            "return": [
                "List[Tuple[(str, str, Any)]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, Any]",
                    "Mapping"
                ],
                "datadir": [
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, str]",
                    "Optional[str]"
                ],
                "trading_mode": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Iterable[str]",
                    "constants.HttpRequestMethod",
                    "int",
                    "Literal"
                ]
            }
        },
        "JsonDataHandler.ohlcv_get_pairs": {
            "name": "ohlcv_get_pairs",
            "location": 49,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]"
                ],
                "datadir": [
                    "str",
                    "List[str]",
                    "dict"
                ],
                "timeframe": [
                    "str",
                    "Optional[str]",
                    "float"
                ],
                "candle_type": [
                    "type",
                    "bool"
                ]
            }
        },
        "JsonDataHandler.ohlcv_store": {
            "name": "ohlcv_store",
            "location": 68,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "bytes",
                    "str"
                ],
                "timeframe": [
                    "bytes",
                    "str"
                ],
                "data": [
                    "str",
                    "int",
                    "Dict[str, numpy.ndarray]",
                    "Set[str]",
                    "dict",
                    "bytes"
                ],
                "candle_type": [
                    "bytes",
                    "str"
                ]
            }
        },
        "JsonDataHandler._ohlcv_load": {
            "name": "_ohlcv_load",
            "location": 91,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "bytes",
                    "int",
                    "bool"
                ],
                "timeframe": [
                    "str",
                    "bytes",
                    "int",
                    "bool"
                ],
                "timerange": [
                    "bool",
                    "Iterable",
                    "Optional[str]"
                ],
                "candle_type": [
                    "str",
                    "bytes",
                    "int",
                    "bool"
                ]
            }
        },
        "JsonDataHandler.ohlcv_append": {
            "name": "ohlcv_append",
            "location": 128,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "bool",
                    "str",
                    "dict"
                ],
                "timeframe": [
                    "bool",
                    "str",
                    "dict"
                ],
                "data": [
                    "bool",
                    "str",
                    "dict"
                ],
                "candle_type": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "JsonDataHandler.trades_get_pairs": {
            "name": "trades_get_pairs",
            "location": 145,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "pathlib.Path"
                ],
                "datadir": [
                    "str",
                    "pathlib.Path",
                    "Callable[[str], Any]",
                    "Optional[Callable]"
                ]
            }
        },
        "JsonDataHandler.trades_store": {
            "name": "trades_store",
            "location": 156,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "Union[str, pathlib.Path]",
                    "pathlib.Path"
                ],
                "data": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "dict",
                    "list"
                ]
            }
        },
        "JsonDataHandler.trades_append": {
            "name": "trades_append",
            "location": 166,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "bool",
                    "str",
                    "idatahandler.TradeList"
                ],
                "data": [
                    "bool",
                    "str",
                    "idatahandler.TradeList"
                ]
            }
        },
        "JsonDataHandler._trades_load": {
            "name": "_trades_load",
            "location": 175,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]"
                ],
                "timerange": [
                    "None",
                    "Optional[freqtrade.configuration.TimeRange]",
                    "Type[OrderedDict]",
                    "o2a.converter.workflow.Workflow"
                ]
            }
        },
        "JsonDataHandler._get_file_extension": {
            "name": "_get_file_extension",
            "location": 197,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[dict]",
                    "Optional[str]"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/data/history/__init__.py": {},
    "freqtrade-develop/freqtrade/edge/edge_positioning.py": {
        "Edge.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "Mapping",
                    "Dict[str, Any]"
                ],
                "exchange": [
                    "dict"
                ],
                "strategy": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, str]",
                    "Set[str]",
                    "Mapping[str, Any]",
                    "Type[T]"
                ]
            }
        },
        "Edge.calculate": {
            "name": "calculate",
            "location": 94,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pairs": [
                    "logging.LogRecord",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Edge.stake_amount": {
            "name": "stake_amount",
            "location": 197,
            "return": [
                "float",
                "str",
                "bytes",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "bool",
                    "numpy.ndarray",
                    "Optional[Exception]",
                    "int"
                ],
                "free_capital": [
                    "int",
                    "List[List[allennlp.data.dataloader.TensorDict]]",
                    "float"
                ],
                "total_capital": [
                    "bool",
                    "numpy.ndarray"
                ],
                "capital_in_trade": [
                    "bool",
                    "numpy.ndarray"
                ]
            }
        },
        "Edge.stoploss": {
            "name": "stoploss",
            "location": 218,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "numpy.ndarray",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "Edge.adjust": {
            "name": "adjust",
            "location": 226,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "pairs": [
                    "numpy.dtype",
                    "Dict[str, Any]",
                    "Type[Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "Edge.accepted_pairs": {
            "name": "accepted_pairs",
            "location": 255,
            "return": [
                "List[dict[Text,]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Edge._fill_calculable_fields": {
            "name": "_fill_calculable_fields",
            "location": 271,
            "return": [
                "pandas.Series",
                "bool",
                "Tuple[int, Dict[str, Any]]",
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "List[List]",
                    "numpy.ndarray",
                    "list",
                    "str"
                ]
            }
        },
        "Edge._process_expectancy": {
            "name": "_process_expectancy",
            "location": 313,
            "return": [
                "Dict",
                "int",
                "Dict[,PairInfo]",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "List[str]",
                    "list",
                    "List[Dict]",
                    "Dict[str, float]",
                    "Dict[int, Dict[str, Any]]",
                    "str",
                    "List[List]"
                ]
            }
        },
        "Edge._find_trades_for_stoploss_range": {
            "name": "_find_trades_for_stoploss_range",
            "location": 396,
            "return": [
                "List",
                "Set",
                "List[Dict[str,Any]]",
                "List[str]",
                "Dict[str,Any]",
                "Optional[Dict[str,Any]]",
                "Dict",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "float",
                    "dict",
                    "Type",
                    "pandas.DataFrame",
                    "str",
                    "List[numpy.ndarray]"
                ],
                "pair": [
                    "int",
                    "tuple",
                    "pandas.DataFrame",
                    "recidiviz.calculator.pipeline.utils.time_range_utils.TimeRange",
                    "bool",
                    "numpy.ndarray"
                ],
                "stoploss_range": [
                    "bool",
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "dict",
                    "Callable[..., Awaitable]",
                    "int"
                ]
            }
        },
        "Edge._detect_next_stop_or_sell_point": {
            "name": "_detect_next_stop_or_sell_point",
            "location": 410,
            "return": [
                "List[dict[Text,Union[Text,float]]]",
                "bool",
                "pandas.DataFrame",
                "Optional[Union[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "buy_column": [
                    "int",
                    "list",
                    "float"
                ],
                "sell_column": [
                    "int",
                    "bool",
                    "str",
                    "raiden.constants.RoutingMode",
                    "float"
                ],
                "date_column": [
                    "int",
                    "Tuple[int, int]",
                    "str",
                    "float"
                ],
                "ohlc_columns": [
                    "int",
                    "list",
                    "float",
                    "Union[mxnend.NDArray, numpy.ndarray]",
                    "numpy.ndarray"
                ],
                "stoploss": [
                    "float",
                    "List[int]",
                    "numpy.ndarray",
                    "bool"
                ],
                "pair": [
                    "int",
                    "Tuple[int, int]",
                    "float"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/edge/__init__.py": {},
    "freqtrade-develop/freqtrade/enums/backteststate.py": {
        "BacktestState.__str__": {
            "name": "__str__",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "freqtrade-develop/freqtrade/enums/candletype.py": {
        "CandleType.from_string": {
            "name": "from_string",
            "location": 17,
            "return": [
                "CandleType",
                "str",
                "bool",
                "Type",
                "Type[T]"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "CandleType.get_default": {
            "name": "get_default",
            "location": 24,
            "return": [
                "bool",
                "BaseException",
                "int",
                "Tuple[str, str]",
                "Callable[[KT], VT]",
                "Exception"
            ],
            "arguments": {
                "trading_mode": [
                    "bytes",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/enums/exitchecktuple.py": {
        "ExitCheckTuple.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exit_type": [
                    "str",
                    "dict",
                    "Optional[type]",
                    "Dict[str, str]",
                    "int"
                ],
                "exit_reason": [
                    "Text",
                    "Mapping[str,Any]",
                    "Dict[str,Any]",
                    "List[str]"
                ]
            }
        },
        "ExitCheckTuple.exit_flag": {
            "name": "exit_flag",
            "location": 16,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExitCheckTuple.__eq__": {
            "name": "__eq__",
            "location": 19,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Type"
                ]
            }
        },
        "ExitCheckTuple.__repr__": {
            "name": "__repr__",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "freqtrade-develop/freqtrade/enums/exittype.py": {
        "ExitType.__str__": {
            "name": "__str__",
            "location": 18,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "freqtrade-develop/freqtrade/enums/marginmode.py": {},
    "freqtrade-develop/freqtrade/enums/ordertypevalue.py": {},
    "freqtrade-develop/freqtrade/enums/rpcmessagetype.py": {
        "RPCMessageType.__repr__": {
            "name": "__repr__",
            "location": 20,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPCMessageType.__str__": {
            "name": "__str__",
            "location": 23,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "freqtrade-develop/freqtrade/enums/runmode.py": {},
    "freqtrade-develop/freqtrade/enums/signaltype.py": {},
    "freqtrade-develop/freqtrade/enums/state.py": {
        "State.__str__": {
            "name": "__str__",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "freqtrade-develop/freqtrade/enums/tradingmode.py": {},
    "freqtrade-develop/freqtrade/enums/__init__.py": {},
    "freqtrade-develop/freqtrade/exchange/bibox.py": {
        "Bibox._ccxt_config": {
            "name": "_ccxt_config",
            "location": 24,
            "return": [
                "Dict[Text,dict[Text,bool]]",
                "str",
                "Dict",
                "Optional[dict]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "freqtrade-develop/freqtrade/exchange/binance.py": {
        "Binance.stoploss_adjust": {
            "name": "stoploss_adjust",
            "location": 46,
            "return": [
                "bool",
                "Optional[bool]",
                "Optional[str]",
                "float",
                "str",
                "Dict[str,Any]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "stop_loss": [
                    "Iterable",
                    "str",
                    "Optional[Tuple[str, ...]]"
                ],
                "order": [
                    "Iterable",
                    "str",
                    "Optional[Tuple[str, ...]]"
                ],
                "side": [
                    "Iterable",
                    "str",
                    "Optional[Tuple[str, ...]]"
                ]
            }
        },
        "Binance.get_tickers": {
            "name": "get_tickers",
            "location": 65,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "symbols": [
                    "None",
                    "str",
                    "Callable"
                ],
                "cached": [
                    "bool",
                    "str",
                    "Callable"
                ]
            }
        },
        "Binance._set_leverage": {
            "name": "_set_leverage",
            "location": 75,
            "return": [
                "None",
                "Union[tuple,list]",
                "Dict[str,Any]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "leverage": [
                    "bool",
                    "Optional[Callable[..., Any]]",
                    "Optional[Sequence[str]]",
                    "Optional[Callable]"
                ],
                "pair": [
                    "None",
                    "bool",
                    "Optional[Callable[...,Any]]",
                    "Optional[Sequence[str]]",
                    "Optional[Callable]"
                ],
                "trading_mode": [
                    "None",
                    "str",
                    "bool",
                    "int",
                    "Optional[ShippingInfo]"
                ]
            }
        },
        "Binance.funding_fee_cutoff": {
            "name": "funding_fee_cutoff",
            "location": 128,
            "return": [
                "bool",
                "str",
                "datetime.datetime",
                "int",
                "Union[str,int]",
                "Optional[datetime.tzinfo]"
            ],
            "arguments": {
                "self": [],
                "open_date": [
                    "datetime.date",
                    "datetime.datetime",
                    "int"
                ]
            }
        },
        "Binance.dry_run_liquidation_price": {
            "name": "dry_run_liquidation_price",
            "location": 135,
            "return": [
                "List[int]",
                "int",
                "datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "Optional[float]",
                    "str"
                ],
                "open_rate": [
                    "str"
                ],
                "is_short": [
                    "bool",
                    "int",
                    "Union[float, Tuple[float, float]]"
                ],
                "position": [
                    "bool",
                    "Optional[float]"
                ],
                "wallet_balance": [
                    "str"
                ],
                "mm_ex_1": [
                    "float",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool",
                    "List[str]",
                    "str",
                    "Optional[float]"
                ],
                "upnl_ex_1": [
                    "float",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool",
                    "List[str]",
                    "str",
                    "Optional[float]"
                ]
            }
        },
        "Binance.load_leverage_tiers": {
            "name": "load_leverage_tiers",
            "location": 195,
            "return": [
                "Dict",
                "str",
                "bool",
                "int",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "freqtrade-develop/freqtrade/exchange/bitpanda.py": {
        "Bitpanda.get_trades_for_order": {
            "name": "get_trades_for_order",
            "location": 18,
            "return": [
                "Optional[str]",
                "str",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "order_id": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "pair": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "since": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "params": [
                    "None",
                    "int",
                    "str",
                    "float"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/exchange/bittrex.py": {},
    "freqtrade-develop/freqtrade/exchange/bybit.py": {
        "Bybit._ccxt_config": {
            "name": "_ccxt_config",
            "location": 34,
            "return": [
                "Dict[Text,dict[Text,Text]]",
                "str",
                "Dict",
                "Optional[dict]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "freqtrade-develop/freqtrade/exchange/coinbasepro.py": {},
    "freqtrade-develop/freqtrade/exchange/common.py": {
        "_reset_logging_mixin": {
            "name": "_reset_logging_mixin",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_get_logging_mixin": {
            "name": "_get_logging_mixin",
            "location": 23,
            "return": [
                "None",
                "LoggingMixin",
                "Dict",
                "str",
                "Dict[str,str]",
                "int",
                "Callable",
                "Dict[str,Any]"
            ],
            "arguments": {}
        },
        "remove_credentials": {
            "name": "remove_credentials",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "str",
                    "OrderedDict"
                ]
            }
        },
        "calculate_backoff": {
            "name": "calculate_backoff",
            "location": 104,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "retrycount": [
                    "int",
                    "Callable",
                    "str"
                ],
                "max_retries": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "retrier_async": {
            "name": "retrier_async",
            "location": 111,
            "return": [
                "Callable"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "retrier": {
            "name": "retrier",
            "location": 159,
            "return": [
                "None",
                "str",
                "List[str]",
                "logging.LogRecord"
            ],
            "arguments": {
                "_func": [
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Callable[[], None]",
                    "str",
                    "Sequence[object]"
                ]
            }
        },
        "retrier.decorator": {
            "name": "decorator",
            "location": 160,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "retrier.decorator.wrapper": {
            "name": "wrapper",
            "location": 162,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {}
        }
    },
    "freqtrade-develop/freqtrade/exchange/exchange.py": {
        "is_exchange_known_ccxt": {
            "name": "is_exchange_known_ccxt",
            "location": 2655,
            "return": [
                "bool"
            ],
            "arguments": {
                "exchange_name": [
                    "str",
                    "int"
                ],
                "ccxt_module": [
                    "str",
                    "int"
                ]
            }
        },
        "is_exchange_officially_supported": {
            "name": "is_exchange_officially_supported",
            "location": 2659,
            "return": [
                "bool"
            ],
            "arguments": {
                "exchange_name": [
                    "str"
                ]
            }
        },
        "ccxt_exchanges": {
            "name": "ccxt_exchanges",
            "location": 2663,
            "return": [
                "Optional[str]",
                "bool",
                "str"
            ],
            "arguments": {
                "ccxt_module": []
            }
        },
        "available_exchanges": {
            "name": "available_exchanges",
            "location": 2670,
            "return": [
                "list",
                "Dict[int, int]",
                "str",
                "Optional[dict]",
                "Set[str]",
                "Sequence[int]"
            ],
            "arguments": {
                "ccxt_module": [
                    "List[str]",
                    "str",
                    "int"
                ]
            }
        },
        "validate_exchange": {
            "name": "validate_exchange",
            "location": 2678,
            "return": [
                "bool"
            ],
            "arguments": {
                "exchange": [
                    "bytes",
                    "dict",
                    "Callable[[T], bool]",
                    "werkzeug.exceptions.HTTPException",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "validate_exchanges": {
            "name": "validate_exchanges",
            "location": 2696,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "all_exchanges": [
                    "int",
                    "str",
                    "List[int]",
                    "Type['DataclassT']"
                ]
            }
        },
        "timeframe_to_seconds": {
            "name": "timeframe_to_seconds",
            "location": 2707,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "timeframe": [
                    "str",
                    "int",
                    "bytes",
                    "bool",
                    "AbstractSet[str]",
                    "Tuple[str, str]"
                ]
            }
        },
        "timeframe_to_minutes": {
            "name": "timeframe_to_minutes",
            "location": 2716,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "timeframe": [
                    "str",
                    "int",
                    "bytes",
                    "bool",
                    "AbstractSet[str]",
                    "Tuple[str, str]"
                ]
            }
        },
        "timeframe_to_msecs": {
            "name": "timeframe_to_msecs",
            "location": 2723,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "timeframe": [
                    "str",
                    "int",
                    "bytes",
                    "bool",
                    "AbstractSet[str]",
                    "Tuple[str, str]"
                ]
            }
        },
        "timeframe_to_prev_date": {
            "name": "timeframe_to_prev_date",
            "location": 2730,
            "return": [
                "int",
                "datetime.timedelta",
                "datetime.date"
            ],
            "arguments": {
                "timeframe": [
                    "Optional[object]",
                    "str",
                    "recidiviz.persistence.entity.state.entities.StateSupervisionPeriod",
                    "Optional[datetime.datetime]",
                    "List[int]",
                    "Optional[T]",
                    "Union[datetime.datetime, str]",
                    "T"
                ],
                "date": [
                    "datetime.date",
                    "datetime.datetime",
                    "Optional[datetime.datetime]",
                    "str"
                ]
            }
        },
        "timeframe_to_next_date": {
            "name": "timeframe_to_next_date",
            "location": 2746,
            "return": [
                "int",
                "datetime.timedelta",
                "datetime.date"
            ],
            "arguments": {
                "timeframe": [
                    "Optional[object]",
                    "str",
                    "recidiviz.persistence.entity.state.entities.StateSupervisionPeriod",
                    "Optional[datetime.datetime]",
                    "List[int]",
                    "Optional[T]",
                    "Union[datetime.datetime, str]",
                    "T"
                ],
                "date": [
                    "datetime.date",
                    "datetime.datetime",
                    "Optional[datetime.datetime]",
                    "str"
                ]
            }
        },
        "date_minus_candles": {
            "name": "date_minus_candles",
            "location": 2760,
            "return": [
                "str",
                "Optional[datetime.datetime]",
                "datetime.date",
                "pandas.DataFrame",
                "float"
            ],
            "arguments": {
                "timeframe": [
                    "datetime.date",
                    "Optional[str]",
                    "str"
                ],
                "candle_count": [
                    "datetime.date",
                    "Optional[datetime.date]",
                    "Union[str, datetime.datetime]",
                    "List[recidiviz.persistence.entity.state.entities.SentenceType]",
                    "int"
                ],
                "date": [
                    "datetime.date",
                    "datetime.datetime",
                    "str"
                ]
            }
        },
        "market_is_active": {
            "name": "market_is_active",
            "location": 2777,
            "return": [
                "bool"
            ],
            "arguments": {
                "market": [
                    "dict",
                    "Dict[str, Any]",
                    "list"
                ]
            }
        },
        "Exchange.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ],
                "validate": [
                    "dict"
                ]
            }
        },
        "Exchange.__del__": {
            "name": "__del__",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Exchange.close": {
            "name": "close",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Exchange._init_ccxt": {
            "name": "_init_ccxt",
            "location": 216,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "exchange_config": [
                    "dict"
                ],
                "ccxt_module": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ],
                "ccxt_kwargs": [
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "Exchange._ccxt_config": {
            "name": "_ccxt_config",
            "location": 254,
            "return": [
                "bool",
                "Optional[str]",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exchange.name": {
            "name": "name",
            "location": 272,
            "return": [
                "str",
                "Type",
                "Callable[..., T]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exchange.id": {
            "name": "id",
            "location": 277,
            "return": [
                "str",
                "int",
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exchange.timeframes": {
            "name": "timeframes",
            "location": 282,
            "return": [
                "List[str]",
                "List[int]",
                "str",
                "tuple",
                "list",
                "Optional[List[str]]",
                "List[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exchange.markets": {
            "name": "markets",
            "location": 286,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exchange.precisionMode": {
            "name": "precisionMode",
            "location": 294,
            "return": [
                "logging.LogRecord",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exchange.additional_exchange_init": {
            "name": "additional_exchange_init",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exchange._log_exchange_response": {
            "name": "_log_exchange_response",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "Optional[dict]",
                    "str",
                    "int",
                    "dict"
                ],
                "response": [
                    "Optional[dict]",
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "Exchange.ohlcv_candle_limit": {
            "name": "ohlcv_candle_limit",
            "location": 311,
            "return": [
                "Optional[bool]",
                "Optional[int]",
                "str",
                "List[int]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": [],
                "timeframe": [
                    "str",
                    "dict",
                    "Dict[str, type]",
                    "Optional[str]"
                ],
                "candle_type": [
                    "bool",
                    "str"
                ],
                "since_ms": [
                    "bool",
                    "str"
                ]
            }
        },
        "Exchange.get_markets": {
            "name": "get_markets",
            "location": 325,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "base_currencies": [
                    "int",
                    "dict",
                    "List[str]",
                    "str",
                    "frozenset[str]"
                ],
                "quote_currencies": [
                    "int",
                    "Dict[str, str]",
                    "List[str]",
                    "Dict[str, Union[Any, Any, Any, Any, Any, Any, Any]]",
                    "Dict[str, Tuple[int, int]]",
                    "str"
                ],
                "spot_only": [
                    "bool",
                    "int",
                    "List[int]",
                    "Tuple[int, int, int, int]"
                ],
                "margin_only": [
                    "bool",
                    "int",
                    "List[int]",
                    "Tuple[int, int, int, int]"
                ],
                "futures_only": [
                    "bool",
                    "int",
                    "List[int]",
                    "Tuple[int, int, int, int]"
                ],
                "tradable_only": [
                    "bool",
                    "int",
                    "List[int]",
                    "Tuple[int, int, int, int]"
                ],
                "active_only": [
                    "bool",
                    "int",
                    "List[int]",
                    "Tuple[int, int, int, int]"
                ]
            }
        },
        "Exchange.get_quote_currencies": {
            "name": "get_quote_currencies",
            "location": 353,
            "return": [
                "List[Dict[str, Any]]",
                "str",
                "int",
                "Optional[bool]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exchange.get_pair_quote_currency": {
            "name": "get_pair_quote_currency",
            "location": 360,
            "return": [
                "str",
                "Optional[List[str]]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Exchange.get_pair_base_currency": {
            "name": "get_pair_base_currency",
            "location": 364,
            "return": [
                "Optional[str]",
                "str",
                "int",
                "Optional[Dict[str, Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str"
                ]
            }
        },
        "Exchange.market_is_future": {
            "name": "market_is_future",
            "location": 368,
            "return": [
                "str",
                "pandas.DataFrame",
                "bool"
            ],
            "arguments": {
                "self": [],
                "market": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "Exchange.market_is_spot": {
            "name": "market_is_spot",
            "location": 374,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[Sequence[str]]",
                "Optional[Callable]"
            ],
            "arguments": {
                "self": [],
                "market": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "Exchange.market_is_margin": {
            "name": "market_is_margin",
            "location": 377,
            "return": [
                "bool",
                "Union[int, float]",
                "int",
                "list",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "market": [
                    "dict",
                    "Dict[str, bool]",
                    "Dict[str, float]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Exchange.market_is_tradable": {
            "name": "market_is_tradable",
            "location": 380,
            "return": [
                "str",
                "List[str]",
                "bool",
                "Optional[str]",
                "type"
            ],
            "arguments": {
                "self": [],
                "market": [
                    "dict",
                    "bool",
                    "Dict[str, Any]",
                    "Iterable"
                ]
            }
        },
        "Exchange.klines": {
            "name": "klines",
            "location": 396,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "pair_interval": [
                    "str",
                    "bytes"
                ],
                "copy": [
                    "pandas.DataFrame",
                    "List[str]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "Exchange._get_contract_size": {
            "name": "_get_contract_size",
            "location": 402,
            "return": [
                "Callable[[T], List[T]]",
                "str",
                "Set[str]",
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "List[str]",
                    "str",
                    "Callable",
                    "int"
                ]
            }
        },
        "Exchange._trades_contracts_to_amount": {
            "name": "_trades_contracts_to_amount",
            "location": 413,
            "return": [
                "pandas.DataFrame",
                "bool",
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "trades": [
                    "int",
                    "logging.LogRecord",
                    "str",
                    "bool",
                    "List[List[int]]"
                ]
            }
        },
        "Exchange._order_contracts_to_amount": {
            "name": "_order_contracts_to_amount",
            "location": 421,
            "return": [
                "pandas.DataFrame",
                "bool",
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "Optional[bool]",
                    "Optional[float]",
                    "Optional[Any]"
                ]
            }
        },
        "Exchange._amount_to_contracts": {
            "name": "_amount_to_contracts",
            "location": 430,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "int",
                    "bytes",
                    "bytearray"
                ],
                "amount": [
                    "int",
                    "List[int]",
                    "Iterable",
                    "str"
                ]
            }
        },
        "Exchange._contracts_to_amount": {
            "name": "_contracts_to_amount",
            "location": 438,
            "return": [
                "int",
                "Optional[float]",
                "List[str]",
                "type",
                "bool"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "int",
                    "str",
                    "bytearray",
                    "Callable"
                ],
                "num_contracts": [
                    "int",
                    "datetime.datetime",
                    "List[List[int]]"
                ]
            }
        },
        "Exchange.set_sandbox": {
            "name": "set_sandbox",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ],
                "exchange_config": [
                    "dict",
                    "Dict[str, Any]",
                    "bool",
                    "Optional[Dict]"
                ],
                "name": [
                    "str",
                    "logging.Logger",
                    "bytes"
                ]
            }
        },
        "Exchange._load_async_markets": {
            "name": "_load_async_markets",
            "location": 456,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "reload": [
                    "qutebrowser.misc.savemanager.SaveManager",
                    "int"
                ]
            }
        },
        "Exchange._load_markets": {
            "name": "_load_markets",
            "location": 466,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exchange.reload_markets": {
            "name": "reload_markets",
            "location": 478,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exchange.validate_stakecurrency": {
            "name": "validate_stakecurrency",
            "location": 495,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stake_currency": [
                    "str",
                    "bool",
                    "float",
                    "Iterable[str]",
                    "o2a.converter.workflow.Workflow"
                ]
            }
        },
        "Exchange.validate_pairs": {
            "name": "validate_pairs",
            "location": 514,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "pairs": [
                    "int",
                    "bytes",
                    "datetime.datetime"
                ]
            }
        },
        "Exchange.get_valid_pair_combination": {
            "name": "get_valid_pair_combination",
            "location": 555,
            "return": [
                "List[recidiviz.persistence.entity.state.entities.SentenceType]",
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "curr_1": [
                    "str",
                    "datetime.timedelta"
                ],
                "curr_2": [
                    "str",
                    "datetime.timedelta"
                ]
            }
        },
        "Exchange.validate_timeframes": {
            "name": "validate_timeframes",
            "location": 564,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeframe": [
                    "str",
                    "List[str]",
                    "Type[Any]"
                ]
            }
        },
        "Exchange.validate_ordertypes": {
            "name": "validate_ordertypes",
            "location": 584,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "order_types": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Exchange.validate_pricing": {
            "name": "validate_pricing",
            "location": 599,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pricing": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Exchange.validate_order_time_in_force": {
            "name": "validate_order_time_in_force",
            "location": 607,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "order_time_in_force": [
                    "str",
                    "Optional[str]",
                    "Dict[Any, list]",
                    "set",
                    "Iterable[str]"
                ]
            }
        },
        "Exchange.validate_required_startup_candles": {
            "name": "validate_required_startup_candles",
            "location": 616,
            "return": [
                "Optional[int]",
                "Dict[str, int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "startup_candles": [
                    "List[int]",
                    "int",
                    "list",
                    "Tuple[int, int, int]"
                ],
                "timeframe": [
                    "int",
                    "allennlp.data.vocabulary.Vocabulary",
                    "List[int]",
                    "list"
                ]
            }
        },
        "Exchange.validate_trading_mode_and_margin_mode": {
            "name": "validate_trading_mode_and_margin_mode",
            "location": 649,
            "return": [],
            "arguments": {
                "self": [],
                "trading_mode": [
                    "str",
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "margin_mode": [
                    "str",
                    "bool",
                    "int",
                    "Type[T]",
                    "Union[str, int]",
                    "List[str]"
                ]
            }
        },
        "Exchange.exchange_has": {
            "name": "exchange_has",
            "location": 668,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "str"
                ]
            }
        },
        "Exchange.amount_to_precision": {
            "name": "amount_to_precision",
            "location": 677,
            "return": [
                "int",
                "bytes",
                "dict",
                "Union[int, float]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "Optional[int]",
                    "Union[int, None]",
                    "float",
                    "Optional[float]",
                    "Optional[gluonts.model.common.Tensor]"
                ],
                "amount": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "Exchange.price_to_precision": {
            "name": "price_to_precision",
            "location": 691,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "set",
                    "str",
                    "dict",
                    "Dict[str, Dict]",
                    "tuple"
                ],
                "price": [
                    "int",
                    "asyncio.Future",
                    "bool"
                ]
            }
        },
        "Exchange.price_get_one_pip": {
            "name": "price_get_one_pip",
            "location": 717,
            "return": [
                "Callable",
                "str",
                "List[str]",
                "list"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "Callable",
                    "str",
                    "List[str]",
                    "list"
                ],
                "price": [
                    "bool",
                    "int",
                    "Dict[str, Any]",
                    "relay.exchange.order.Order",
                    "Callable[[], T]"
                ]
            }
        },
        "Exchange.get_min_pair_stake_amount": {
            "name": "get_min_pair_stake_amount",
            "location": 728,
            "return": [
                "str",
                "Union[int, float]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "dict",
                    "pandas.DataFrame",
                    "int"
                ],
                "price": [
                    "dict",
                    "pandas.DataFrame",
                    "int"
                ],
                "stoploss": [
                    "dict",
                    "pandas.DataFrame",
                    "int"
                ],
                "leverage": [
                    "dict",
                    "pandas.DataFrame",
                    "int"
                ]
            }
        },
        "Exchange.get_max_pair_stake_amount": {
            "name": "get_max_pair_stake_amount",
            "location": 737,
            "return": [
                "dict",
                "pandas.DataFrame",
                "int"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "int",
                    "float",
                    "str",
                    "order.Order"
                ],
                "price": [
                    "int",
                    "float",
                    "str",
                    "order.Order"
                ],
                "leverage": [
                    "List[str]",
                    "str",
                    "Callable",
                    "int"
                ]
            }
        },
        "Exchange._get_stake_amount_limit": {
            "name": "_get_stake_amount_limit",
            "location": 745,
            "return": [
                "Optional[int]",
                "bool",
                "Optional[Dict]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "pandas.DataFrame",
                    "T",
                    "Dict[str, Any]",
                    "list"
                ],
                "price": [
                    "str"
                ],
                "stoploss": [
                    "str",
                    "dict",
                    "bytes",
                    "int"
                ],
                "limit": [
                    "List[str]"
                ],
                "leverage": [
                    "float",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]",
                    "apps.common.coininfo.CoinInfo"
                ]
            }
        },
        "Exchange._get_stake_amount_considering_leverage": {
            "name": "_get_stake_amount_considering_leverage",
            "location": 799,
            "return": [
                "str",
                "bytearray",
                "Optional[Any]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "stake_amount": [
                    "int",
                    "bool",
                    "List[int]"
                ],
                "leverage": [
                    "int",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "Exchange.create_dry_run_order": {
            "name": "create_dry_run_order",
            "location": 810,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "int",
                    "Dict[str, Any]",
                    "Optional[Any]",
                    "dict",
                    "datetime"
                ],
                "ordertype": [
                    "str",
                    "int",
                    "float",
                    "set"
                ],
                "side": [
                    "str",
                    "int",
                    "dict",
                    "bool"
                ],
                "amount": [
                    "bytes",
                    "int"
                ],
                "rate": [
                    "str",
                    "int",
                    "float",
                    "set"
                ],
                "leverage": [
                    "str",
                    "int",
                    "float",
                    "set"
                ],
                "params": [
                    "bool",
                    "str",
                    "Mapping[str, Any]",
                    "float",
                    "Callable",
                    "int"
                ],
                "stop_loss": [
                    "str",
                    "int",
                    "float",
                    "set"
                ]
            }
        },
        "Exchange.add_dry_order_fee": {
            "name": "add_dry_order_fee",
            "location": 857,
            "return": [
                "int",
                "Optional[str]",
                "datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "dict",
                    "bool",
                    "Union[object, type]"
                ],
                "dry_order": [
                    "str",
                    "dict",
                    "bool",
                    "Union[object, type]"
                ]
            }
        },
        "Exchange.get_dry_market_fill_price": {
            "name": "get_dry_market_fill_price",
            "location": 867,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "bool",
                    "pandas.DataFrame",
                    "http.HTTPStatus"
                ],
                "side": [
                    "int"
                ],
                "amount": [
                    "int",
                    "float",
                    "str"
                ],
                "rate": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "Exchange._is_dry_limit_order_filled": {
            "name": "_is_dry_limit_order_filled",
            "location": 908,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "int",
                    "logging.Logger"
                ],
                "side": [
                    "str",
                    "int"
                ],
                "limit": [
                    "str",
                    "logging.Logger",
                    "int",
                    "Callable[[str], None]"
                ]
            }
        },
        "Exchange.check_dry_limit_order_filled": {
            "name": "check_dry_limit_order_filled",
            "location": 928,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "Exchange.fetch_dry_run_order": {
            "name": "fetch_dry_run_order",
            "location": 946,
            "return": [
                "int",
                "str",
                "List[int]",
                "Tuple[int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "order_id": [
                    "str",
                    "int",
                    "bytes",
                    "Dict[str, Any]",
                    "Dict[str, object]"
                ]
            }
        },
        "Exchange._lev_prep": {
            "name": "_lev_prep",
            "location": 968,
            "return": [],
            "arguments": {
                "self": [],
                "pair": [
                    "str"
                ],
                "leverage": [
                    "int",
                    "Callable",
                    "str"
                ],
                "side": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Exchange._get_params": {
            "name": "_get_params",
            "location": 973,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "side": [
                    "str",
                    "bool",
                    "int",
                    "Optional[bytes]"
                ],
                "ordertype": [
                    "bool",
                    "float",
                    "Optional[dict]",
                    "Tuple[str]",
                    "Tuple[int, int, int]"
                ],
                "leverage": [
                    "str",
                    "bool",
                    "int",
                    "Optional[bytes]"
                ],
                "reduceOnly": [
                    "str",
                    "bool",
                    "int",
                    "Optional[bytes]"
                ],
                "time_in_force": [
                    "bool",
                    "Dict[str, str]",
                    "List[str]",
                    "int",
                    "str"
                ]
            }
        },
        "Exchange.create_order": {
            "name": "create_order",
            "location": 989,
            "return": [
                "bool",
                "allennlp.data.dataseDataset",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exchange.stoploss_adjust": {
            "name": "stoploss_adjust",
            "location": 1047,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "stop_loss": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "order": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "side": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Exchange._get_stop_order_type": {
            "name": "_get_stop_order_type",
            "location": 1054,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "user_order_type": [
                    "str",
                    "Optional[Union[str, Any]]",
                    "recidiviz.persistence.entity.base_entity.Entity",
                    "Type",
                    "recidiviz.persistence.database.schema_entity_converter.base_schema_entity_converter.FieldNameType",
                    "recidiviz.persistence.entity.core_entity.CoreEntity"
                ]
            }
        },
        "Exchange._get_stop_limit_rate": {
            "name": "_get_stop_limit_rate",
            "location": 1066,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "stop_price": [
                    "int",
                    "str",
                    "bool"
                ],
                "order_types": [
                    "Optional[List[str]]",
                    "str",
                    "Optional[str]",
                    "cmk.gui.plugins.openapi.restful_objects.type_defs.EndpointName",
                    "Dict[str, str]",
                    "bool"
                ],
                "side": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "Exchange._get_stop_params": {
            "name": "_get_stop_params",
            "location": 1082,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "ordertype": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ],
                "stop_price": [
                    "int",
                    "dict",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, Union[str, int]]",
                    "bytes",
                    "Optional[Dict[str, Any]]",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "Exchange.stoploss": {
            "name": "stoploss",
            "location": 1089,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "recidiviz.persistence.entity.state.entities.StateIncarcerationPeriod",
                    "tuple",
                    "bool",
                    "float"
                ],
                "amount": [
                    "int",
                    "asyncio.AbstractEventLoop",
                    "str",
                    "List[str]"
                ],
                "stop_price": [
                    "Optional[Union[int, Any]]",
                    "Union[int, str]",
                    "Optional[bool]",
                    "Optional[int]",
                    "Optional[recidiviz.common.constants.state.state_incarceration_period.StateIncarcerationPeriodAdmissionReason]"
                ],
                "order_types": [
                    "bool",
                    "dict"
                ],
                "side": [
                    "str",
                    "Tuple[str]",
                    "List[Dict[str, Any]]"
                ],
                "leverage": [
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Exchange.fetch_order": {
            "name": "fetch_order",
            "location": 1167,
            "return": [
                "Dict[str, Dict[str, Any]]",
                "str",
                "Tuple[int, int]",
                "allennlp.data.Instance",
                "bool"
            ],
            "arguments": {
                "self": [],
                "order_id": [
                    "int",
                    "str",
                    "common.constants.ConcentUseCase"
                ],
                "pair": [
                    "str"
                ],
                "params": [
                    "str",
                    "int"
                ]
            }
        },
        "Exchange.fetch_stoploss_order": {
            "name": "fetch_stoploss_order",
            "location": 1189,
            "return": [
                "str",
                "Optional[int]",
                "Optional[str]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "order_id": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "pair": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "params": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "Exchange.fetch_order_or_stoploss_order": {
            "name": "fetch_order_or_stoploss_order",
            "location": 1192,
            "return": [
                "str",
                "Optional[int]",
                "Callable",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "order_id": [
                    "int",
                    "str",
                    "bool"
                ],
                "pair": [
                    "int",
                    "str",
                    "bool"
                ],
                "stoploss_order": [
                    "int",
                    "str",
                    "Optional[float]",
                    "list",
                    "bytes"
                ]
            }
        },
        "Exchange.check_order_canceled_empty": {
            "name": "check_order_canceled_empty",
            "location": 1205,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "Dict[Hashable, Any]",
                    "int",
                    "Dict[str, Any]",
                    "float",
                    "Dict[str, AsyncGenerator]",
                    "dict"
                ]
            }
        },
        "Exchange.cancel_order": {
            "name": "cancel_order",
            "location": 1215,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "order_id": [
                    "str",
                    "int"
                ],
                "pair": [
                    "str",
                    "int"
                ],
                "params": [
                    "str",
                    "int"
                ]
            }
        },
        "Exchange.cancel_stoploss_order": {
            "name": "cancel_stoploss_order",
            "location": 1241,
            "return": [
                "str",
                "Optional[int]",
                "Optional[str]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "order_id": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "pair": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "params": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "Exchange.is_cancel_order_result_suitable": {
            "name": "is_cancel_order_result_suitable",
            "location": 1244,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "corder": [
                    "str",
                    "pandas.DataFrame",
                    "List[str]"
                ]
            }
        },
        "Exchange.cancel_order_with_result": {
            "name": "cancel_order_with_result",
            "location": 1251,
            "return": [
                "int",
                "Tuple[int, int, int, int]",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": [],
                "order_id": [
                    "int",
                    "Optional[int]",
                    "Optional[float]",
                    "str"
                ],
                "pair": [
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "amount": [
                    "int",
                    "str"
                ]
            }
        },
        "Exchange.cancel_stoploss_order_with_result": {
            "name": "cancel_stoploss_order_with_result",
            "location": 1275,
            "return": [
                "bool",
                "str",
                "Iterable[Any]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "order_id": [
                    "int",
                    "str"
                ],
                "pair": [
                    "int",
                    "str"
                ],
                "amount": [
                    "int",
                    "str"
                ]
            }
        },
        "Exchange.get_balances": {
            "name": "get_balances",
            "location": 1297,
            "return": [
                "str",
                "int",
                "List[allennlp.data.tokenizers.Token]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exchange.fetch_positions": {
            "name": "fetch_positions",
            "location": 1317,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exchange.fetch_trading_fees": {
            "name": "fetch_trading_fees",
            "location": 1333,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exchange.fetch_bids_asks": {
            "name": "fetch_bids_asks",
            "location": 1354,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "symbols": [
                    "str",
                    "bool",
                    "gluonts.model.common.Tensor"
                ],
                "cached": [
                    "bool",
                    "Iterable[str]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Exchange.get_tickers": {
            "name": "get_tickers",
            "location": 1382,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "symbols": [
                    "Optional[str]",
                    "str"
                ],
                "cached": [
                    "str",
                    "Iterable[str]",
                    "bool",
                    "int",
                    "Type[recidiviz.persistence.entity.state.entities.Entity]"
                ]
            }
        },
        "Exchange.fetch_ticker": {
            "name": "fetch_ticker",
            "location": 1410,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "Dict[str, Any]",
                    "Type[T]"
                ]
            }
        },
        "Exchange.get_next_limit_in_list": {
            "name": "get_next_limit_in_list",
            "location": 1426,
            "return": [
                "Optional[bool]",
                "Optional[str]",
                "bool",
                "Optional[float]",
                "dict"
            ],
            "arguments": {
                "limit": [
                    "list",
                    "str",
                    "List[str]",
                    "callable",
                    "List[tuple]",
                    "List[Dict[str, Any]]"
                ],
                "limit_range": [
                    "list",
                    "str",
                    "List[str]",
                    "callable",
                    "List[tuple]",
                    "List[Dict[str, Any]]"
                ],
                "range_required": [
                    "int",
                    "float",
                    "Union[float, int]",
                    "bool",
                    "str"
                ]
            }
        },
        "Exchange.fetch_l2_order_book": {
            "name": "fetch_l2_order_book",
            "location": 1442,
            "return": [
                "DefaultDict[int, List[Any]]",
                "OrderedDict",
                "str"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "DefaultDict[int, List[Any]]",
                    "OrderedDict",
                    "str"
                ],
                "limit": [
                    "int",
                    "str",
                    "dict",
                    "Iterable[allennlp.data.instance.Instance]"
                ]
            }
        },
        "Exchange._get_price_side": {
            "name": "_get_price_side",
            "location": 1466,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "side": [
                    "int",
                    "apps.common.coininfo.CoinInfo",
                    "bytes",
                    "List['cirq.Circuit']"
                ],
                "is_short": [
                    "int",
                    "apps.common.coininfo.CoinInfo",
                    "bytes",
                    "List['cirq.Circuit']"
                ],
                "conf_strategy": [
                    "int",
                    "apps.common.coininfo.CoinInfo",
                    "bytes",
                    "List['cirq.Circuit']"
                ]
            }
        },
        "Exchange.get_rate": {
            "name": "get_rate",
            "location": 1483,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "int",
                    "bool"
                ],
                "refresh": [
                    "bool",
                    "int",
                    "str",
                    "nevergrad.common.Optional[str]"
                ],
                "side": [
                    "Optional[List[Any]]",
                    "int",
                    "Optional[bool]",
                    "List[str]",
                    "str"
                ],
                "is_short": [
                    "int",
                    "Dict[int, dict]",
                    "tuple",
                    "Optional[int]",
                    "Optional[datetime.timedelta]"
                ]
            }
        },
        "Exchange.get_trades_for_order": {
            "name": "get_trades_for_order",
            "location": 1551,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[int, str]",
                "Iterable[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "order_id": [
                    "str",
                    "int",
                    "Optional[float]",
                    "list"
                ],
                "pair": [
                    "int"
                ],
                "since": [
                    "int"
                ],
                "params": [
                    "str",
                    "int"
                ]
            }
        },
        "Exchange.get_order_id_conditional": {
            "name": "get_order_id_conditional",
            "location": 1595,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "List[Dict[str, Any]]",
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "Exchange.get_fee": {
            "name": "get_fee",
            "location": 1599,
            "return": [
                "str",
                "T"
            ],
            "arguments": {
                "self": [],
                "symbol": [
                    "str",
                    "Mapping"
                ],
                "type": [
                    "str",
                    "Mapping"
                ],
                "side": [
                    "str",
                    "Mapping"
                ],
                "amount": [
                    "str",
                    "Mapping"
                ],
                "price": [
                    "str",
                    "Mapping"
                ],
                "taker_or_maker": [
                    "str",
                    "Mapping"
                ]
            }
        },
        "Exchange.order_has_fee": {
            "name": "order_has_fee",
            "location": 1619,
            "return": [
                "bool"
            ],
            "arguments": {
                "order": [
                    "str",
                    "pandas.DataFrame",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "Exchange.calculate_fee_rate": {
            "name": "calculate_fee_rate",
            "location": 1634,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "Exchange.extract_cost_curr_rate": {
            "name": "extract_cost_curr_rate",
            "location": 1669,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Exchange.get_historic_ohlcv": {
            "name": "get_historic_ohlcv",
            "location": 1682,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "Callable",
                    "int",
                    "Iterable",
                    "pandas.DataFrame",
                    "Dict[Tuple[int, int], str]"
                ],
                "timeframe": [
                    "Callable",
                    "int",
                    "Iterable",
                    "pandas.DataFrame",
                    "Dict[Tuple[int, int], str]"
                ],
                "since_ms": [
                    "Callable",
                    "int",
                    "Iterable",
                    "pandas.DataFrame",
                    "Dict[Tuple[int, int], str]"
                ],
                "candle_type": [
                    "Callable",
                    "int",
                    "Iterable",
                    "pandas.DataFrame",
                    "Dict[Tuple[int, int], str]"
                ],
                "is_new_pair": [
                    "Callable",
                    "int",
                    "Iterable",
                    "pandas.DataFrame",
                    "Dict[Tuple[int, int], str]"
                ],
                "until_ms": [
                    "Callable",
                    "int",
                    "Iterable",
                    "pandas.DataFrame",
                    "Dict[Tuple[int, int], str]"
                ]
            }
        },
        "Exchange.get_historic_ohlcv_as_df": {
            "name": "get_historic_ohlcv_as_df",
            "location": 1704,
            "return": [
                "Dict[str, Any]",
                "str",
                "Optional[str]",
                "Optional[bool]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "Type",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "timeframe": [
                    "str",
                    "Type",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "since_ms": [
                    "int",
                    "str",
                    "Iterable[int]"
                ],
                "candle_type": [
                    "int",
                    "str",
                    "Iterable[int]"
                ]
            }
        },
        "Exchange._build_coroutine": {
            "name": "_build_coroutine",
            "location": 1760,
            "return": [
                "Optional[Any]",
                "bool",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "bool"
                ],
                "timeframe": [],
                "candle_type": [
                    "int",
                    "recidiviz.persistence.database.schema.state.schema.StateSentenceGroup",
                    "str",
                    "List[int]",
                    "bool",
                    "pandas.DataFrame"
                ],
                "since_ms": [
                    "str",
                    "Tuple[int, int]",
                    "int",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "Exchange.refresh_latest_ohlcv": {
            "name": "refresh_latest_ohlcv",
            "location": 1780,
            "return": [
                "bool",
                "pandas.DataFrame",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "pair_list": [
                    "List[Tuple[str, str]]",
                    "Sequence[dict]",
                    "list",
                    "List[str]",
                    "Iterator[tuple]",
                    "bool"
                ]
            }
        },
        "Exchange._now_is_time_to_refresh": {
            "name": "_now_is_time_to_refresh",
            "location": 1853,
            "return": [
                "Tuple[float, float]",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]",
                "List[str]",
                "List[recidiviz.persistence.entity.state.entities.StateIncarcerationSentence]",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionSentence]",
                "int"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "T",
                    "Type",
                    "datetime.datetime",
                    "float"
                ],
                "timeframe": [
                    "str",
                    "Mapping",
                    "int",
                    "freqtrade.strategy.interface.SellCheckTuple",
                    "Callable"
                ],
                "candle_type": [
                    "str",
                    "T",
                    "Type",
                    "datetime.datetime",
                    "float"
                ]
            }
        },
        "Exchange.get_historic_trades": {
            "name": "get_historic_trades",
            "location": 2068,
            "return": [
                "str",
                "int",
                "bool",
                "Optional[Sequence[Any]]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "Optional[bool]",
                    "Optional[int]",
                    "str",
                    "int"
                ],
                "since": [
                    "Optional[bool]",
                    "Optional[int]",
                    "str",
                    "int"
                ],
                "until": [
                    "Optional[bool]",
                    "Optional[int]",
                    "str",
                    "int"
                ],
                "from_id": [
                    "Optional[bool]",
                    "Optional[int]",
                    "str",
                    "int"
                ]
            }
        },
        "Exchange._get_funding_fees_from_exchange": {
            "name": "_get_funding_fees_from_exchange",
            "location": 2091,
            "return": [
                "list",
                "bool",
                "int",
                "List[str]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "Dict[str, Any]",
                    "dict",
                    "Optional[str]"
                ],
                "since": [
                    "pandas.Series",
                    "str",
                    "datetime.datetime",
                    "datetime.timedelta"
                ]
            }
        },
        "Exchange.get_leverage_tiers": {
            "name": "get_leverage_tiers",
            "location": 2122,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exchange.load_leverage_tiers": {
            "name": "load_leverage_tiers",
            "location": 2149,
            "return": [
                "str",
                "bool",
                "Union[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exchange.fill_leverage_tiers": {
            "name": "fill_leverage_tiers",
            "location": 2189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exchange.parse_leverage_tier": {
            "name": "parse_leverage_tier",
            "location": 2201,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "tier": [
                    "Dict[str, Any]",
                    "str",
                    "recidiviz.persistence.entity.state.entities.StateSupervisionPeriod"
                ]
            }
        },
        "Exchange.get_max_leverage": {
            "name": "get_max_leverage",
            "location": 2211,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "int",
                    "Optional[datetime.datetime]"
                ],
                "stake_amount": [
                    "Optional[float]",
                    "float",
                    "Optional[Callable[[str], bool]]",
                    "datetime.timedelta",
                    "asyncio.AbstractEventLoop",
                    "Optional[str]",
                    "Optional[Callable]"
                ]
            }
        },
        "Exchange._set_leverage": {
            "name": "_set_leverage",
            "location": 2287,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "leverage": [
                    "bool",
                    "Optional[Callable[..., Any]]",
                    "Optional[Sequence[str]]",
                    "Optional[Callable]"
                ],
                "pair": [
                    "bool",
                    "Optional[Callable[..., Any]]",
                    "Optional[Sequence[str]]",
                    "Optional[Callable]"
                ],
                "trading_mode": [
                    "bool",
                    "int",
                    "Optional[float]",
                    "Dict[str, str]",
                    "Optional[List[str]]",
                    "constants.HttpVersion",
                    "Set[Tuple[int, int]]"
                ]
            }
        },
        "Exchange.get_interest_rate": {
            "name": "get_interest_rate",
            "location": 2311,
            "return": [
                "float",
                "str",
                "Dict[str, List[str]]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exchange.get_liquidation_price": {
            "name": "get_liquidation_price",
            "location": 2318,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "open_rate": [
                    "Optional[str]",
                    "str"
                ],
                "amount": [
                    "Optional[str]",
                    "str"
                ],
                "leverage": [
                    "bool",
                    "Optional[bool]",
                    "Optional[int]",
                    "int"
                ],
                "is_short": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "Exchange.funding_fee_cutoff": {
            "name": "funding_fee_cutoff",
            "location": 2348,
            "return": [
                "str",
                "datetime.datetime",
                "int",
                "Union[str, int]",
                "Optional[datetime.tzinfo]",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionSentence]"
            ],
            "arguments": {
                "self": [],
                "open_date": [
                    "datetime.date",
                    "int",
                    "datetime.datetime",
                    "List[recidiviz.persistence.entity.state.entities.SentenceType]",
                    "str"
                ]
            }
        },
        "Exchange.set_margin_mode": {
            "name": "set_margin_mode",
            "location": 2356,
            "return": [
                "str",
                "bool",
                "Sequence[str]",
                "int",
                "pandas.Series"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "Optional[str]",
                    "datetime.datetime",
                    "Optional[Dict[str, str]]",
                    "bool"
                ],
                "margin_mode": [
                    "Optional[str]",
                    "datetime.datetime",
                    "Optional[Dict[str, str]]",
                    "bool"
                ],
                "params": [
                    "Optional[str]",
                    "datetime.datetime",
                    "Optional[Dict[str, str]]",
                    "bool"
                ]
            }
        },
        "Exchange._fetch_and_calculate_funding_fees": {
            "name": "_fetch_and_calculate_funding_fees",
            "location": 2375,
            "return": [
                "float",
                "str",
                "bytearray",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "Dict[str, Any]",
                    "bool",
                    "int",
                    "Optional[List[Any]]",
                    "recidiviz.common.constants.state.state_incarceration_period.StateIncarcerationPeriodAdmissionReason",
                    "Dict[str, Dict[str, Any]]"
                ],
                "amount": [
                    "datetime.datetime",
                    "datetime.date",
                    "Optional[datetime.date]",
                    "Sequence[str]",
                    "List[recidiviz.persistence.entity.state.entities.StateAssessment]"
                ],
                "is_short": [
                    "datetime.datetime",
                    "datetime.date",
                    "Optional[datetime.date]",
                    "Sequence[str]",
                    "List[recidiviz.persistence.entity.state.entities.StateAssessment]"
                ],
                "open_date": [
                    "datetime.datetime",
                    "datetime.date",
                    "Sequence[str]",
                    "Optional[datetime.date]"
                ],
                "close_date": [
                    "datetime.date",
                    "datetime.datetime",
                    "Optional[datetime.date]",
                    "Optional[Union[str, datetime.datetime]]"
                ]
            }
        },
        "Exchange.combine_funding_and_mark": {
            "name": "combine_funding_and_mark",
            "location": 2429,
            "return": [
                "float",
                "int",
                "str",
                "List[recidiviz.persistence.entity.state.entities.StateIncarcerationPeriod]",
                "bool"
            ],
            "arguments": {
                "funding_rates": [
                    "int",
                    "str"
                ],
                "mark_rates": [
                    "str",
                    "Dict[str, Any]"
                ],
                "futures_funding_rate": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "Exchange.calculate_funding_fees": {
            "name": "calculate_funding_fees",
            "location": 2459,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "datetime.date",
                    "List[recidiviz.persistence.entity.state.entities.StateAssessment]",
                    "recidiviz.persistence.entity.state.entities.StatePerson",
                    "str",
                    "datetime.datetime",
                    "Sequence[str]"
                ],
                "amount": [
                    "Optional[str]",
                    "Set[str]",
                    "Mapping[str, Any]",
                    "Optional[int]",
                    "Optional[List[str]]"
                ],
                "is_short": [
                    "Optional[str]",
                    "Set[str]",
                    "Mapping[str, Any]",
                    "Optional[int]",
                    "Optional[List[str]]"
                ],
                "open_date": [
                    "datetime.time",
                    "datetime.datetime",
                    "datetime.date",
                    "bool",
                    "Optional[datetime.date]"
                ],
                "close_date": [
                    "datetime.time",
                    "datetime.datetime",
                    "datetime.date",
                    "bool",
                    "Optional[datetime.date]"
                ],
                "time_in_ratio": [
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "type",
                    "Dict[str, Any]",
                    "Optional[list]",
                    "Optional[str]"
                ]
            }
        },
        "Exchange.get_funding_fees": {
            "name": "get_funding_fees",
            "location": 2487,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "List[recidiviz.persistence.entity.state.entities.StateAssessment]",
                    "datetime.datetime",
                    "Optional[bool]",
                    "pandas.Series",
                    "float",
                    "datetime.date",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]"
                ],
                "amount": [
                    "int"
                ],
                "is_short": [
                    "int"
                ],
                "open_date": [
                    "List[recidiviz.persistence.entity.state.entities.StateAssessment]",
                    "datetime.datetime",
                    "Optional[bool]",
                    "pandas.Series",
                    "float",
                    "datetime.date",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]"
                ]
            }
        },
        "Exchange.get_or_calculate_liquidation_price": {
            "name": "get_or_calculate_liquidation_price",
            "location": 2508,
            "return": [
                "Optional[str]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "Optional[int]",
                "bool",
                "dict",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "bool"
                ],
                "open_rate": [
                    "bool"
                ],
                "is_short": [
                    "bool"
                ],
                "position": [
                    "bool"
                ],
                "wallet_balance": [
                    "bool"
                ],
                "mm_ex_1": [
                    "bool"
                ],
                "upnl_ex_1": [
                    "bool"
                ]
            }
        },
        "Exchange.dry_run_liquidation_price": {
            "name": "dry_run_liquidation_price",
            "location": 2567,
            "return": [
                "int",
                "str",
                "Dict[Tuple[str, str], Tuple[float, float]]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "bool",
                    "str",
                    "Callable[[], str]",
                    "Union[int, float]"
                ],
                "open_rate": [
                    "float",
                    "str",
                    "Callable",
                    "dict",
                    "Tuple[float, float]",
                    "int",
                    "Optional[Dict]"
                ],
                "is_short": [
                    "bool",
                    "int",
                    "Mapping[str, Any]"
                ],
                "position": [
                    "bool",
                    "float",
                    "Union[int, float]",
                    "Optional[List[\"custom_index\"]]"
                ],
                "wallet_balance": [
                    "bool",
                    "str",
                    "List[str]"
                ],
                "mm_ex_1": [
                    "bool",
                    "int",
                    "Mapping[str, Any]"
                ],
                "upnl_ex_1": [
                    "bool",
                    "int",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Exchange.get_maintenance_ratio_and_amt": {
            "name": "get_maintenance_ratio_and_amt",
            "location": 2620,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "bool",
                    "int",
                    "Dict[str, str]",
                    "cmk.gui.plugins.openapi.restful_objects.type_defs.EndpointName",
                    "Optional[str]",
                    "Union[str, List[str]]"
                ],
                "nominal_value": [
                    "int",
                    "asyncio.Event",
                    "common.AgentMechanismInterface"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/exchange/ftx.py": {
        "Ftx.stoploss_adjust": {
            "name": "stoploss_adjust",
            "location": 36,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "stop_loss": [
                    "float",
                    "str",
                    "Optional[int]"
                ],
                "order": [
                    "float",
                    "str",
                    "Optional[int]"
                ],
                "side": [
                    "float",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "Ftx.stoploss": {
            "name": "stoploss",
            "location": 47,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "Tuple[int, int]",
                    "bool",
                    "freqtrade.exchange.Exchange",
                    "Optional[freqtrade.configuration.TimeRange]"
                ],
                "amount": [
                    "int",
                    "bytes",
                    "bool"
                ],
                "stop_price": [
                    "int",
                    "bool",
                    "Optional[bool]",
                    "apps.common.coininfo.CoinInfo",
                    "str"
                ],
                "order_types": [
                    "str",
                    "bool",
                    "BoundMethod[Callable(logging.Logger.debug)[Any, Any], logging.Logger]"
                ],
                "side": [
                    "int",
                    "bytes",
                    "bool"
                ],
                "leverage": [
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Ftx.fetch_stoploss_order": {
            "name": "fetch_stoploss_order",
            "location": 107,
            "return": [
                "Dict[str, Dict[str, Any]]",
                "str",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "order_id": [
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "pair": [
                    "str",
                    "int"
                ],
                "params": [
                    "Dict",
                    "str",
                    "int"
                ]
            }
        },
        "Ftx.cancel_stoploss_order": {
            "name": "cancel_stoploss_order",
            "location": 148,
            "return": [
                "Dict",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "order_id": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "pair": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "params": [
                    "Dict",
                    "int",
                    "str",
                    "Optional[bool]",
                    "Optional[int]"
                ]
            }
        },
        "Ftx.get_order_id_conditional": {
            "name": "get_order_id_conditional",
            "location": 166,
            "return": [
                "Optional[str]",
                "str",
                "Optional[List[str]]",
                "list"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "str",
                    "Iterable[Iterable[str]]"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/exchange/gateio.py": {
        "Gateio.validate_ordertypes": {
            "name": "validate_ordertypes",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "order_types": [
                    "str",
                    "Union[str, List]",
                    "Sequence[Any]"
                ]
            }
        },
        "Gateio._get_params": {
            "name": "_get_params",
            "location": 52,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "side": [
                    "List[int]",
                    "Union[int, float]",
                    "str",
                    "bool",
                    "Optional[Dict]"
                ],
                "ordertype": [
                    "Optional[Dict]",
                    "str",
                    "Callable",
                    "list",
                    "bool"
                ],
                "leverage": [
                    "List[int]",
                    "Union[int, float]",
                    "str",
                    "bool",
                    "Optional[Dict]"
                ],
                "reduceOnly": [
                    "List[int]",
                    "Union[int, float]",
                    "str",
                    "bool",
                    "Optional[Dict]"
                ],
                "time_in_force": [
                    "Text",
                    "List[int]",
                    "Union[int,float]",
                    "str",
                    "bool",
                    "Optional[Dict]"
                ]
            }
        },
        "Gateio.get_trades_for_order": {
            "name": "get_trades_for_order",
            "location": 73,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "order_id": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "pair": [
                    "str",
                    "int"
                ],
                "since": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "params": [
                    "None",
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Gateio.fetch_stoploss_order": {
            "name": "fetch_stoploss_order",
            "location": 98,
            "return": [
                "dict",
                "bool",
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "order_id": [
                    "int",
                    "str",
                    "Optional[float]",
                    "Optional[int]"
                ],
                "pair": [
                    "int",
                    "str",
                    "Optional[float]",
                    "Optional[int]"
                ],
                "params": [
                    "Dict",
                    "int",
                    "str",
                    "Optional[float]",
                    "Optional[int]"
                ]
            }
        },
        "Gateio.cancel_stoploss_order": {
            "name": "cancel_stoploss_order",
            "location": 105,
            "return": [
                "dict",
                "bool",
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "order_id": [
                    "int",
                    "str",
                    "Optional[float]",
                    "Optional[int]"
                ],
                "pair": [
                    "int",
                    "str",
                    "Optional[float]",
                    "Optional[int]"
                ],
                "params": [
                    "Dict",
                    "int",
                    "str",
                    "Optional[float]",
                    "Optional[int]"
                ]
            }
        },
        "Gateio.stoploss_adjust": {
            "name": "stoploss_adjust",
            "location": 112,
            "return": [
                "bool",
                "Optional[bool]",
                "Optional[str]",
                "float",
                "str",
                "Dict[str,Any]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "stop_loss": [
                    "Optional[Tuple[str, ...]]",
                    "logging.LogRecord",
                    "Optional[str]",
                    "Iterable",
                    "str"
                ],
                "order": [
                    "Optional[Tuple[str, ...]]",
                    "logging.LogRecord",
                    "Optional[str]",
                    "Iterable",
                    "str"
                ],
                "side": [
                    "Optional[Tuple[str, ...]]",
                    "logging.LogRecord",
                    "Optional[str]",
                    "Iterable",
                    "str"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/exchange/hitbtc.py": {},
    "freqtrade-develop/freqtrade/exchange/huobi.py": {
        "Huobi.stoploss_adjust": {
            "name": "stoploss_adjust",
            "location": 25,
            "return": [
                "bool",
                "Optional[bool]",
                "Optional[str]",
                "float",
                "str",
                "Dict[str,Any]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "stop_loss": [
                    "Dict[str, Any]",
                    "logging.LogRecord",
                    "Optional[str]",
                    "Optional[Tuple[str, ...]]",
                    "Optional[List[dict]]"
                ],
                "order": [
                    "Dict[str, Any]",
                    "logging.LogRecord",
                    "Optional[str]",
                    "Optional[Tuple[str, ...]]",
                    "Optional[List[dict]]"
                ],
                "side": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Huobi._get_stop_params": {
            "name": "_get_stop_params",
            "location": 38,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "ordertype": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ],
                "stop_price": [
                    "int",
                    "dict",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, Union[str, int]]",
                    "bytes",
                    "Optional[Dict[str, Any]]",
                    "Optional[Dict[str, str]]"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/exchange/kraken.py": {
        "Kraken.market_is_tradable": {
            "name": "market_is_tradable",
            "location": 38,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[Exception]",
                "str"
            ],
            "arguments": {
                "self": [],
                "market": [
                    "Type[T]"
                ]
            }
        },
        "Kraken.get_tickers": {
            "name": "get_tickers",
            "location": 48,
            "return": [
                "Optional[str]",
                "Optional[List[str]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "symbols": [
                    "str",
                    "None"
                ],
                "cached": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "Type"
                ]
            }
        },
        "Kraken.get_balances": {
            "name": "get_balances",
            "location": 55,
            "return": [
                "Dict",
                "str",
                "int",
                "Tuple[int,int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Kraken.stoploss_adjust": {
            "name": "stoploss_adjust",
            "location": 88,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "stop_loss": [
                    "float",
                    "str",
                    "Optional[int]"
                ],
                "order": [
                    "float",
                    "str",
                    "Optional[int]"
                ],
                "side": [
                    "float",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "Kraken.stoploss": {
            "name": "stoploss",
            "location": 99,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "bool",
                    "int"
                ],
                "amount": [
                    "int",
                    "bytes",
                    "bool"
                ],
                "stop_price": [
                    "int",
                    "bool",
                    "Optional[bool]",
                    "apps.common.coininfo.CoinInfo",
                    "str"
                ],
                "order_types": [
                    "str",
                    "bool",
                    "list"
                ],
                "side": [
                    "int",
                    "Optional[int]",
                    "bytes"
                ],
                "leverage": [
                    "int",
                    "bytes",
                    "Callable",
                    "bool"
                ]
            }
        },
        "Kraken._set_leverage": {
            "name": "_set_leverage",
            "location": 156,
            "return": [
                "None",
                "Union[tuple,list]",
                "Dict[str,Any]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "leverage": [
                    "bool",
                    "int",
                    "Optional[float]",
                    "Dict[str, str]",
                    "Optional[List[str]]",
                    "constants.HttpVersion",
                    "Set[Tuple[int, int]]"
                ],
                "pair": [
                    "None",
                    "bool",
                    "int",
                    "Optional[float]",
                    "Dict[str,str]",
                    "Optional[List[str]]",
                    "constants.HttpVersion",
                    "Set[Tuple[int,int]]"
                ],
                "trading_mode": [
                    "None",
                    "bool",
                    "int",
                    "Optional[float]",
                    "Dict[str,str]",
                    "Optional[List[str]]",
                    "constants.HttpVersion",
                    "Set[Tuple[int,int]]"
                ]
            }
        },
        "Kraken._get_params": {
            "name": "_get_params",
            "location": 168,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "side": [
                    "List[int]",
                    "Union[int, float]",
                    "str",
                    "bool",
                    "Optional[Dict]"
                ],
                "ordertype": [
                    "List[int]",
                    "Union[int, float]",
                    "str",
                    "bool",
                    "Optional[Dict]"
                ],
                "leverage": [
                    "Optional[Dict]"
                ],
                "reduceOnly": [
                    "List[int]",
                    "Union[int, float]",
                    "str",
                    "bool",
                    "Optional[Dict]"
                ],
                "time_in_force": [
                    "Text",
                    "List[int]",
                    "Union[int,float]",
                    "str",
                    "bool",
                    "Optional[Dict]"
                ]
            }
        },
        "Kraken.calculate_funding_fees": {
            "name": "calculate_funding_fees",
            "location": 187,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "datetime.date",
                    "Optional[bool]",
                    "datetime.datetime"
                ],
                "amount": [
                    "str",
                    "Optional[str]",
                    "list",
                    "int"
                ],
                "is_short": [
                    "Optional[str]",
                    "Set[str]",
                    "Mapping[str, Any]",
                    "Optional[int]",
                    "Optional[List[str]]"
                ],
                "open_date": [
                    "datetime.time",
                    "datetime.datetime",
                    "datetime.date",
                    "bool",
                    "Optional[datetime.date]"
                ],
                "close_date": [
                    "None",
                    "datetime.time",
                    "datetime.datetime",
                    "datetime.date",
                    "bool",
                    "Optional[datetime.date]"
                ],
                "time_in_ratio": [
                    "None",
                    "str",
                    "Optional[str]",
                    "List",
                    "int"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/exchange/kucoin.py": {
        "Kucoin.stoploss_adjust": {
            "name": "stoploss_adjust",
            "location": 31,
            "return": [
                "bool",
                "Optional[bool]",
                "Optional[str]",
                "float",
                "str",
                "Dict[str,Any]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "stop_loss": [
                    "List[Dict[str, Any]]",
                    "logging.LogRecord",
                    "Optional[List[dict]]",
                    "List[int]",
                    "Dict[str, Any]"
                ],
                "order": [
                    "List[Dict[str, Any]]",
                    "logging.LogRecord",
                    "Optional[List[dict]]",
                    "List[int]",
                    "Dict[str, Any]"
                ],
                "side": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Kucoin._get_stop_params": {
            "name": "_get_stop_params",
            "location": 41,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "ordertype": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ],
                "stop_price": [
                    "int",
                    "dict",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, Union[str, int]]",
                    "bytes",
                    "Optional[Dict[str, Any]]",
                    "Optional[Dict[str, str]]"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/exchange/okx.py": {
        "Okx.ohlcv_candle_limit": {
            "name": "ohlcv_candle_limit",
            "location": 42,
            "return": [
                "int",
                "List[cirq.Qid]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "timeframe": [
                    "T",
                    "Callable",
                    "int"
                ],
                "candle_type": [
                    "T",
                    "Callable",
                    "int"
                ],
                "since_ms": [
                    "None",
                    "T",
                    "Callable",
                    "int"
                ]
            }
        },
        "Okx.additional_exchange_init": {
            "name": "additional_exchange_init",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Okx._get_posSide": {
            "name": "_get_posSide",
            "location": 83,
            "return": [
                "Text",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "side": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ],
                "reduceOnly": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "Okx._get_params": {
            "name": "_get_params",
            "location": 93,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "side": [
                    "Optional[Dict]"
                ],
                "ordertype": [
                    "List[int]",
                    "Union[int, float]",
                    "str",
                    "bool",
                    "Optional[Dict]"
                ],
                "leverage": [
                    "List[int]",
                    "Union[int, float]",
                    "str",
                    "bool",
                    "Optional[Dict]"
                ],
                "reduceOnly": [
                    "Optional[Dict]"
                ],
                "time_in_force": [
                    "Text",
                    "List[int]",
                    "Union[int,float]",
                    "str",
                    "bool",
                    "Optional[Dict]"
                ]
            }
        },
        "Okx._lev_prep": {
            "name": "_lev_prep",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "Optional[int]"
                ],
                "leverage": [
                    "Optional[int]"
                ],
                "side": [
                    "Optional[int]"
                ]
            }
        },
        "Okx.get_max_pair_stake_amount": {
            "name": "get_max_pair_stake_amount",
            "location": 133,
            "return": [
                "float",
                "List[str]",
                "str",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "List[str]",
                    "str",
                    "Callable",
                    "int"
                ],
                "price": [
                    "Dict[str, Any]",
                    "bool",
                    "int",
                    "relay.exchange.order.Order"
                ],
                "leverage": [
                    "float",
                    "List[str]",
                    "str",
                    "Callable",
                    "int"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/exchange/__init__.py": {},
    "freqtrade-develop/freqtrade/leverage/interest.py": {
        "interest": {
            "name": "interest",
            "location": 12,
            "return": [
                "str",
                "Tuple[bytes]",
                "float",
                "int",
                "bool"
            ],
            "arguments": {
                "exchange_name": [
                    "str",
                    "Set[str]"
                ],
                "borrowed": [
                    "str",
                    "Dict[str, Any]",
                    "type"
                ],
                "rate": [
                    "str",
                    "Dict[str, Any]",
                    "type"
                ],
                "hours": [
                    "str",
                    "Dict[str, Any]",
                    "type"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/leverage/__init__.py": {},
    "freqtrade-develop/freqtrade/mixins/logging_mixin.py": {
        "LoggingMixin.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "str",
                    "List[str]",
                    "Tuple[Tuple[str, ...]]"
                ],
                "refresh_period": [
                    "str",
                    "int"
                ]
            }
        },
        "LoggingMixin.log_once": {
            "name": "log_once",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "float",
                    "int"
                ],
                "logmethod": [
                    "Callable",
                    "str"
                ]
            }
        },
        "LoggingMixin.log_once._log_once": {
            "name": "_log_once",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "str",
                    "List[bytes]",
                    "Iterable[float]",
                    "int",
                    "float"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/mixins/__init__.py": {},
    "freqtrade-develop/freqtrade/optimize/backtesting.py": {
        "Backtesting.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "Type['BaseConfig']",
                    "lmcommon.configuration.Configuration"
                ]
            }
        },
        "Backtesting.__del__": {
            "name": "__del__",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backtesting.cleanup": {
            "name": "cleanup",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Backtesting.init_backtest_detail": {
            "name": "init_backtest_detail",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backtesting.init_backtest": {
            "name": "init_backtest",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backtesting._set_strategy": {
            "name": "_set_strategy",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "strategy": [
                    "float",
                    "tuple"
                ]
            }
        },
        "Backtesting._load_protections": {
            "name": "_load_protections",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "strategy": [
                    "Optional[str]"
                ]
            }
        },
        "Backtesting.load_bt_data": {
            "name": "load_bt_data",
            "location": 202,
            "return": [
                "Tuple",
                "Dict",
                "pandas.DataFrame",
                "str",
                "bytes",
                "Union[shap.utils._legacy.Data,pandas.DataFrame,numpy.ndarray,scipy.sparse.spmatrix]",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backtesting.load_bt_data_detail": {
            "name": "load_bt_data_detail",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backtesting.prepare_backtest": {
            "name": "prepare_backtest",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "enable_protections": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Backtesting.check_abort": {
            "name": "check_abort",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backtesting._get_ohlcv_as_lists": {
            "name": "_get_ohlcv_as_lists",
            "location": 322,
            "return": [
                "Dict[,list]",
                "Dict",
                "str",
                "Callable",
                "pandas.DataFrame",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "processed": [
                    "dict",
                    "list",
                    "str",
                    "allennlp.data.Vocabulary"
                ]
            }
        },
        "Backtesting._get_close_rate": {
            "name": "_get_close_rate",
            "location": 377,
            "return": [
                "str",
                "int",
                "Hashable",
                "pandas.DataFrame",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "bool",
                    "str",
                    "int"
                ],
                "trade": [
                    "bool",
                    "str",
                    "int"
                ],
                "exit": [
                    "freqtrade.strategy.interface.SellCheckTuple",
                    "int",
                    "type",
                    "Optional[str]"
                ],
                "trade_dur": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "Backtesting._get_close_rate_for_stoploss": {
            "name": "_get_close_rate_for_stoploss",
            "location": 390,
            "return": [
                "float",
                "List[recidiviz.persistence.entity.state.entities.StateAssessment]",
                "Dict[int,dict]",
                "Iterable[T]"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "str",
                    "float"
                ],
                "trade": [
                    "Optional[Callable]",
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "Iterator[Tuple[Any, Any]]"
                ],
                "exit": [
                    "Set[str]",
                    "int",
                    "Union[int, float, complex]",
                    "Dict[str, Any]",
                    "Type[T]"
                ],
                "trade_dur": [
                    "Set[str]",
                    "int",
                    "Union[int, float, complex]",
                    "Dict[str, Any]",
                    "Type[T]"
                ]
            }
        },
        "Backtesting._get_close_rate_for_roi": {
            "name": "_get_close_rate_for_roi",
            "location": 437,
            "return": [
                "int",
                "List[recidiviz.persistence.entity.state.entities.StateAssessment]",
                "Dict[int,dict]",
                "Iterable[T]"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "bool",
                    "int",
                    "Iterable[str]"
                ],
                "trade": [
                    "bool",
                    "Optional[Callable]",
                    "Dict[str, bool]"
                ],
                "exit": [
                    "str",
                    "int",
                    "Iterable[Dict]",
                    "List[List[str]]",
                    "Iterable",
                    "list"
                ],
                "trade_dur": [
                    "int",
                    "Dict[str, str]",
                    "Sequence[MutableMapping]",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "Backtesting._get_adjust_trade_entry_for_candle": {
            "name": "_get_adjust_trade_entry_for_candle",
            "location": 497,
            "return": [
                "bool",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "row": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Backtesting._get_order_filled": {
            "name": "_get_order_filled",
            "location": 521,
            "return": [
                "bool",
                "int",
                "Hashable",
                "Iterable[Union[Any,int]]",
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "rate": [
                    "Optional[int]",
                    "List[Dict]",
                    "int",
                    "list",
                    "bool"
                ],
                "row": [
                    "Optional[int]",
                    "List[Dict]",
                    "int",
                    "list",
                    "bool"
                ]
            }
        },
        "Backtesting._get_exit_trade_entry_for_candle": {
            "name": "_get_exit_trade_entry_for_candle",
            "location": 525,
            "return": [
                "None",
                "List[str]",
                "Callable[,datetime.datetime]",
                "Optional[Sequence[Any]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "int"
                ],
                "row": [
                    "Dict[str, Any]",
                    "bool",
                    "Dict[str, Union[str, int]]"
                ]
            }
        },
        "Backtesting._get_exit_for_signal": {
            "name": "_get_exit_for_signal",
            "location": 550,
            "return": [
                "None",
                "Optional[str]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "datetime.datetime",
                    "dict",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionContact]",
                    "List[recidiviz.persistence.entity.state.entities.StateIncarcerationSentence]",
                    "List[recidiviz.persistence.entity.state.entities.StateAssessment]",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                    "int"
                ],
                "row": [
                    "datetime.datetime",
                    "pandas.Series",
                    "Optional[freqtrade.configuration.TimeRange]",
                    "str",
                    "dict",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionContact]",
                    "List[recidiviz.persistence.entity.state.entities.StateIncarcerationSentence]"
                ],
                "exit_": [
                    "pandas.DataFrame",
                    "str",
                    "int"
                ]
            }
        },
        "Backtesting._get_exit_trade_entry": {
            "name": "_get_exit_trade_entry",
            "location": 634,
            "return": [
                "None",
                "bool",
                "List[str]",
                "Dict[str,Union[str,int]]"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "str",
                    "allennlp.data.DataLoader"
                ],
                "row": [
                    "List[str]",
                    "str",
                    "Optional[freqtrade.configuration.TimeRange]",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionContact]",
                    "List[recidiviz.persistence.entity.state.entities.StateIncarcerationSentence]",
                    "List[recidiviz.persistence.entity.state.entities.StateAssessment]",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                    "float"
                ]
            }
        },
        "Backtesting.get_valid_price_and_stake": {
            "name": "get_valid_price_and_stake",
            "location": 673,
            "return": [
                "str",
                "Tuple[int]",
                "Optional[float]",
                "Tuple[Union[float,float,int]]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "int",
                    "dict",
                    "bool"
                ],
                "row": [
                    "int",
                    "str",
                    "pandas.DataFrame"
                ],
                "propose_rate": [
                    "str",
                    "int",
                    "dict",
                    "bool"
                ],
                "stake_amount": [
                    "int",
                    "Optional[int]",
                    "raiden_contracts.constants.MessageTypeId"
                ],
                "direction": [
                    "str",
                    "int",
                    "dict",
                    "bool"
                ],
                "current_time": [
                    "str",
                    "int",
                    "dict",
                    "bool"
                ],
                "entry_tag": [
                    "str",
                    "int",
                    "dict",
                    "bool"
                ],
                "trade": [
                    "bool",
                    "Optional[str]",
                    "Optional[float]",
                    "int",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "str"
                ],
                "order_type": [
                    "bool",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "Backtesting._enter_trade": {
            "name": "_enter_trade",
            "location": 736,
            "return": [
                "None",
                "int",
                "LocalTrade",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "Optional[float]",
                    "int"
                ],
                "row": [
                    "bool",
                    "int",
                    "Tuple[numpy.dtype]",
                    "BinaryIO"
                ],
                "direction": [
                    "Optional[float]",
                    "int"
                ],
                "stake_amount": [
                    "None",
                    "bool",
                    "Iterable[str]"
                ],
                "trade": [
                    "None",
                    "Optional[Union[AbstractSetIntStr,MappingIntStrAny]]",
                    "Optional[str]",
                    "Optional[Tuple[Any]]",
                    "bool"
                ],
                "requested_rate": [
                    "None",
                    "Optional[str]",
                    "Optional[Union[AbstractSetIntStr,MappingIntStrAny]]",
                    "Optional[Dict[str,str]]"
                ],
                "requested_stake": [
                    "None",
                    "Mapping[str,Any]",
                    "int",
                    "Optional[bool]",
                    "Dict",
                    "Dict[str,Dict[str,str]]",
                    "Dict[str,Any]"
                ]
            }
        },
        "Backtesting.handle_left_open": {
            "name": "handle_left_open",
            "location": 847,
            "return": [
                "List",
                "str",
                "bool",
                "int",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "open_trades": [
                    "pandas.DataFrame",
                    "Dict[str, Any]",
                    "List[int]",
                    "Optional[Dict]",
                    "Union[list, dict]"
                ],
                "data": [
                    "Dict[str, str]",
                    "List[Dict[str, Any]]",
                    "Sequence",
                    "T",
                    "Optional[Dict]",
                    "Optional[List[Any]]",
                    "Tuple[int, str, bytearray]"
                ]
            }
        },
        "Backtesting.trade_slot_available": {
            "name": "trade_slot_available",
            "location": 871,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "max_open_trades": [
                    "int",
                    "float",
                    "Tuple[int]"
                ],
                "open_trade_count": [
                    "int",
                    "float",
                    "Tuple[int]"
                ]
            }
        },
        "Backtesting.check_for_trade_entry": {
            "name": "check_for_trade_entry",
            "location": 879,
            "return": [
                "Text",
                "Optional[str]",
                "None",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "Backtesting.run_protections": {
            "name": "run_protections",
            "location": 893,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "enable_protections": [
                    "datetime.datetime",
                    "int",
                    "float",
                    "bool"
                ],
                "pair": [
                    "numpy.ndarray",
                    "float",
                    "int",
                    "bool"
                ],
                "current_time": [
                    "float",
                    "datetime.datetime",
                    "int"
                ],
                "side": [
                    "float",
                    "datetime.datetime",
                    "int"
                ]
            }
        },
        "Backtesting.manage_open_orders": {
            "name": "manage_open_orders",
            "location": 899,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "allennlp.data.tokenizers.Tokenizer",
                    "int",
                    "bool",
                    "Optional[int]",
                    "Literal"
                ],
                "current_time": [
                    "bool",
                    "int",
                    "Optional[Dict[str, Any]]",
                    "numpy.ndarray",
                    "Iterable[int]"
                ],
                "row": [
                    "Optional[str]",
                    "Optional[Union[float, Any]]",
                    "Optional[int]",
                    "Optional[bool]"
                ]
            }
        },
        "Backtesting.check_order_cancel": {
            "name": "check_order_cancel",
            "location": 916,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "pandas.DataFrame",
                    "float",
                    "int"
                ],
                "order": [
                    "float",
                    "pandas.DataFrame",
                    "List[str]"
                ],
                "current_time": [
                    "float",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "Backtesting.check_order_replace": {
            "name": "check_order_replace",
            "location": 946,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "int"
                ],
                "order": [
                    "int"
                ],
                "current_time": [
                    "int"
                ],
                "row": [
                    "str",
                    "bool",
                    "numpy.ndarray",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Backtesting.validate_row": {
            "name": "validate_row",
            "location": 985,
            "return": [
                "None",
                "Optional[str]",
                "Union[numpy.ndarray,None]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "dict",
                    "Optional[bytes]"
                ],
                "pair": [
                    "int",
                    "bytes",
                    "dict",
                    "Optional[bytes]"
                ],
                "row_index": [
                    "int",
                    "bytes",
                    "dict",
                    "Optional[bytes]"
                ],
                "current_time": [
                    "int",
                    "bool",
                    "Tuple[int]",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "Backtesting.backtest": {
            "name": "backtest",
            "location": 1001,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "processed": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "int"
                ],
                "start_date": [
                    "datetime.date",
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]",
                    "Optional[datetime.date]",
                    "int"
                ],
                "end_date": [
                    "datetime.date",
                    "datetime.datetime",
                    "Optional[datetime.date]",
                    "Optional[str]"
                ],
                "max_open_trades": [
                    "int",
                    "Optional[int]",
                    "numpy.ndarray",
                    "bool",
                    "Optional[str]",
                    "Tuple[int]",
                    "Optional[numpy.ndarray]"
                ],
                "position_stacking": [
                    "bool",
                    "int",
                    "Optional[int]",
                    "numpy.ndarray",
                    "Optional[str]",
                    "Tuple[int]",
                    "Optional[numpy.ndarray]"
                ],
                "enable_protections": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "Backtesting.backtest_one_strategy": {
            "name": "backtest_one_strategy",
            "location": 1136,
            "return": [
                "Tuple",
                "datetime.datetime",
                "List[recidiviz.persistence.entity.state.entities.StateIncarcerationPeriod]",
                "str",
                "Union[str,int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "strat": [
                    "str",
                    "dict",
                    "bytes"
                ],
                "data": [
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, pandas.DataFrame]",
                    "int",
                    "bytes",
                    "List[int]"
                ],
                "timerange": [
                    "str",
                    "pandas.DataFrame",
                    "bool",
                    "Optional[Dict]",
                    "int"
                ]
            }
        },
        "Backtesting._generate_trade_signal_candles": {
            "name": "_generate_trade_signal_candles",
            "location": 1192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "preprocessed_df": [
                    "int",
                    "float",
                    "pandas.DataFrame",
                    "Optional[datetime.date]",
                    "Tuple[int, int, int]",
                    "Tuple[int, int, int, int]"
                ],
                "bt_results": [
                    "numpy.ndarray",
                    "Tuple[float, float, float, float]",
                    "float",
                    "Optional[List[Any]]",
                    "bytes",
                    "int"
                ]
            }
        },
        "Backtesting._get_min_cached_backtest_date": {
            "name": "_get_min_cached_backtest_date",
            "location": 1211,
            "return": [
                "None",
                "datetime.datetime",
                "int",
                "str",
                "Union[str,int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backtesting.load_prior_backtest": {
            "name": "load_prior_backtest",
            "location": 1225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backtesting.start": {
            "name": "start",
            "location": 1238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "freqtrade-develop/freqtrade/optimize/backtest_caching.py": {
        "get_strategy_run_id": {
            "name": "get_strategy_run_id",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "strategy": [
                    "str",
                    "dict"
                ]
            }
        },
        "get_backtest_metadata_filename": {
            "name": "get_backtest_metadata_filename",
            "location": 37,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "int",
                    "pathlib.Path"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/optimize/bt_progress.py": {
        "BTProgress.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BTProgress.init_step": {
            "name": "init_step",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "int",
                    "bool",
                    "float"
                ],
                "max_steps": [
                    "int",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "BTProgress.set_new_value": {
            "name": "set_new_value",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_value": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "dict",
                    "int"
                ]
            }
        },
        "BTProgress.increment": {
            "name": "increment",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BTProgress.progress": {
            "name": "progress",
            "location": 24,
            "return": [
                "int",
                "float",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BTProgress.action": {
            "name": "action",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "freqtrade-develop/freqtrade/optimize/edge_cli.py": {
        "EdgeCli.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "str"
                ]
            }
        },
        "EdgeCli.start": {
            "name": "start",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "freqtrade-develop/freqtrade/optimize/hyperopt.py": {
        "Hyperopt.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Hyperopt.get_lock_filename": {
            "name": "get_lock_filename",
            "location": 126,
            "return": [
                "str"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "str"
                ]
            }
        },
        "Hyperopt.clean_hyperopt": {
            "name": "clean_hyperopt",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hyperopt._get_params_dict": {
            "name": "_get_params_dict",
            "location": 140,
            "return": [
                "Dict",
                "List[str]",
                "Dict[str,Any]",
                "Iterable[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "dimensions": [
                    "str",
                    "Pattern[str]",
                    "List[str]",
                    "Sequence",
                    "Set[str]"
                ],
                "raw_params": [
                    "str",
                    "Pattern[str]",
                    "List[str]",
                    "Sequence",
                    "Set[str]"
                ]
            }
        },
        "Hyperopt._save_result": {
            "name": "_save_result",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "epoch": []
            }
        },
        "Hyperopt._get_params_details": {
            "name": "_get_params_details",
            "location": 172,
            "return": [
                "Dict[Text,dict[str,]]",
                "str",
                "bool",
                "Dict",
                "Set",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "Hyperopt._get_no_optimize_details": {
            "name": "_get_no_optimize_details",
            "location": 194,
            "return": [
                "Dict[Text,dict[str,]]",
                "str",
                "Dict[str,Any]",
                "bytes",
                "Callable",
                "Optional[Dict[str,Any]]",
                "int",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hyperopt.print_results": {
            "name": "print_results",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "Dict[str, Any]",
                    "Union[bool, int, str]",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "Hyperopt.init_spaces": {
            "name": "init_spaces",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hyperopt.assign_params": {
            "name": "assign_params",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params_dict": [
                    "str",
                    "type",
                    "dict",
                    "Dict[str, Optional[str]]"
                ],
                "category": [
                    "Dict[str, Any]",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "Hyperopt.generate_optimizer": {
            "name": "generate_optimizer",
            "location": 273,
            "return": [
                "pandas.DataFrame",
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "raw_params": [
                    "dict",
                    "list"
                ],
                "iteration": [
                    "None",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Hyperopt._get_results_dict": {
            "name": "_get_results_dict",
            "location": 328,
            "return": [
                "Dict[Text,int]",
                "int",
                "List[str]",
                "bool",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "backtesting_results": [
                    "str",
                    "datetime.date",
                    "Dict[datetime.date, Dict[str, Any]]",
                    "Optional[datetime.date]"
                ],
                "min_date": [
                    "str",
                    "datetime.date",
                    "Dict[datetime.date, Dict[str, Any]]",
                    "Optional[datetime.date]"
                ],
                "max_date": [
                    "str",
                    "datetime.date",
                    "Dict[datetime.date, Dict[str, Any]]",
                    "Optional[datetime.date]"
                ],
                "params_dict": [
                    "bool",
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, int]"
                ],
                "processed": [
                    "dict",
                    "datetime",
                    "datetime.datetime"
                ]
            }
        },
        "Hyperopt.get_optimizer": {
            "name": "get_optimizer",
            "location": 367,
            "return": [
                "Optimizer",
                "bool",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "dimensions": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "Optional[str]"
                ],
                "cpu_count": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "Hyperopt.run_optimizer_parallel": {
            "name": "run_optimizer_parallel",
            "location": 388,
            "return": [
                "bool",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "parallel": [
                    "str",
                    "Dict[str, Any]"
                ],
                "asked": [
                    "str",
                    "Dict[str, Any]"
                ],
                "i": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Hyperopt._set_random_state": {
            "name": "_set_random_state",
            "location": 392,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "random_state": [
                    "int",
                    "str",
                    "Mapping[str, Sequence[Any]]"
                ]
            }
        },
        "Hyperopt.prepare_hyperopt_data": {
            "name": "prepare_hyperopt_data",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hyperopt.get_asked_points": {
            "name": "get_asked_points",
            "location": 412,
            "return": [
                "Tuple",
                "str",
                "Tuple[list[bool]]",
                "bool",
                "Optional[int]",
                "Optional[Dict[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "n_points": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "Hyperopt.start": {
            "name": "start",
            "location": 457,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hyperopt.get_asked_points.unique_list": {
            "name": "unique_list",
            "location": 424,
            "return": [
                "str",
                "List"
            ],
            "arguments": {
                "a_list": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/optimize/hyperopt_auto.py": {
        "_format_exception_message": {
            "name": "_format_exception_message",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "space": [
                    "str",
                    "Container[\"Taxon\"]"
                ],
                "ignore_missing_space": [
                    "bool",
                    "List[Tuple[int, str]]",
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "HyperOptAuto._get_func": {
            "name": "_get_func",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "HyperOptAuto._generate_indicator_space": {
            "name": "_generate_indicator_space",
            "location": 54,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "self": [],
                "category": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "HyperOptAuto._get_indicator_space": {
            "name": "_get_indicator_space",
            "location": 59,
            "return": [
                "List",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "category": [
                    "Optional[str]",
                    "int",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "HyperOptAuto.buy_indicator_space": {
            "name": "buy_indicator_space",
            "location": 70,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HyperOptAuto.sell_indicator_space": {
            "name": "sell_indicator_space",
            "location": 73,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HyperOptAuto.protection_space": {
            "name": "protection_space",
            "location": 76,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HyperOptAuto.generate_roi_table": {
            "name": "generate_roi_table",
            "location": 79,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "str",
                    "Sequence"
                ]
            }
        },
        "HyperOptAuto.roi_space": {
            "name": "roi_space",
            "location": 82,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HyperOptAuto.stoploss_space": {
            "name": "stoploss_space",
            "location": 85,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HyperOptAuto.generate_trailing_params": {
            "name": "generate_trailing_params",
            "location": 88,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "HyperOptAuto.trailing_space": {
            "name": "trailing_space",
            "location": 91,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HyperOptAuto.generate_estimator": {
            "name": "generate_estimator",
            "location": 94,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "dimensions": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/optimize/hyperopt_epoch_filters.py": {
        "hyperopt_filter_epochs": {
            "name": "hyperopt_filter_epochs",
            "location": 10,
            "return": [
                "str",
                "dict",
                "bytes"
            ],
            "arguments": {
                "epochs": [
                    "Dict[str, List[str]]",
                    "Optional[Dict[str, Any]]"
                ],
                "filteroptions": [
                    "int",
                    "dict",
                    "slice",
                    "Dict[str, str]"
                ],
                "log": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "_hyperopt_filter_epochs_trade": {
            "name": "_hyperopt_filter_epochs_trade",
            "location": 35,
            "return": [
                "list"
            ],
            "arguments": {
                "epochs": [
                    "int",
                    "str",
                    "Dict[str, Any]"
                ],
                "trade_count": [
                    "int",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "_hyperopt_filter_epochs_trade_count": {
            "name": "_hyperopt_filter_epochs_trade_count",
            "location": 44,
            "return": [
                "List",
                "str",
                "Dict",
                "bytes"
            ],
            "arguments": {
                "epochs": [
                    "List[str]",
                    "Dict[str, str]",
                    "List[Dict]",
                    "Dict[str, float]",
                    "Optional[dict]"
                ],
                "filteroptions": [
                    "List[str]",
                    "Dict[str, str]",
                    "List[Dict]",
                    "Dict[str, float]",
                    "Optional[dict]"
                ]
            }
        },
        "_hyperopt_filter_epochs_duration": {
            "name": "_hyperopt_filter_epochs_duration",
            "location": 57,
            "return": [
                "Union[(list, _T0)]"
            ],
            "arguments": {
                "epochs": [
                    "int",
                    "List[Dict]"
                ],
                "filteroptions": [
                    "dict",
                    "Iterable[Any]",
                    "List[Union[\"PipeChain\", str]]"
                ]
            }
        },
        "_hyperopt_filter_epochs_profit": {
            "name": "_hyperopt_filter_epochs_profit",
            "location": 84,
            "return": [
                "Union[(list, _T0)]"
            ],
            "arguments": {
                "epochs": [
                    "str",
                    "dict",
                    "List[str]",
                    "Callable[[], Awaitable[Mapping]]"
                ],
                "filteroptions": [
                    "Dict[str, Any]",
                    "Dict[str, Set[str]]",
                    "Optional[Any]",
                    "Type"
                ]
            }
        },
        "_hyperopt_filter_epochs_objective": {
            "name": "_hyperopt_filter_epochs_objective",
            "location": 117,
            "return": [
                "Union[(list, _T0)]"
            ],
            "arguments": {
                "epochs": [
                    "str",
                    "Mapping[str, Any]",
                    "float"
                ],
                "filteroptions": [
                    "dict",
                    "List[str]",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "_hyperopt_filter_epochs_duration.get_duration_value": {
            "name": "get_duration_value",
            "location": 59,
            "return": [
                "int",
                "str",
                "bytes",
                "Type",
                "Set"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/optimize/hyperopt_interface.py": {
        "IHyperOpt.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "Sequence"
                ]
            }
        },
        "IHyperOpt.generate_estimator": {
            "name": "generate_estimator",
            "location": 41,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dimensions": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "IHyperOpt.generate_roi_table": {
            "name": "generate_roi_table",
            "location": 49,
            "return": [
                "Dict[int,int]",
                "float",
                "Type",
                "str",
                "logging.LogRecord",
                "List",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "dict",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "IHyperOpt.roi_space": {
            "name": "roi_space",
            "location": 64,
            "return": [
                "str",
                "Tuple[Any, Any, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IHyperOpt.stoploss_space": {
            "name": "stoploss_space",
            "location": 143,
            "return": [
                "List[SKDecimal]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IHyperOpt.generate_trailing_params": {
            "name": "generate_trailing_params",
            "location": 154,
            "return": [
                "Dict[Text,]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "bool"
                ]
            }
        },
        "IHyperOpt.trailing_space": {
            "name": "trailing_space",
            "location": 166,
            "return": [
                "List[Union[Categorical,SKDecimal]]",
                "bool",
                "Optional[str]",
                "Iterable",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IHyperOpt.__getstate__": {
            "name": "__getstate__",
            "location": 196,
            "return": [
                "Callable",
                "List[str]",
                "dict",
                "int",
                "SendCh[trio.abc.Stream]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IHyperOpt.__setstate__": {
            "name": "__setstate__",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/optimize/hyperopt_loss_interface.py": {
        "IHyperOptLoss.hyperopt_loss_function": {
            "name": "hyperopt_loss_function",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "freqtrade-develop/freqtrade/optimize/hyperopt_tools.py": {
        "hyperopt_serializer": {
            "name": "hyperopt_serializer",
            "location": 26,
            "return": [
                "str",
                "int",
                "Block",
                "bool"
            ],
            "arguments": {
                "x": [
                    "str",
                    "dict",
                    "bool",
                    "int",
                    "Set[str]"
                ]
            }
        },
        "HyperoptTools.get_strategy_filename": {
            "name": "get_strategy_filename",
            "location": 38,
            "return": [
                "Path",
                "pathlib.Path",
                "None",
                "str",
                "List[int]",
                "Optional[pathlib.Path]"
            ],
            "arguments": {
                "config": [
                    "str",
                    "Callable[[str], str]",
                    "Optional[str]"
                ],
                "strategy_name": [
                    "str",
                    "bytes",
                    "List[str]",
                    "List[Tuple[str, Any]]"
                ]
            }
        },
        "HyperoptTools.export_params": {
            "name": "export_params",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [
                    "bool",
                    "Optional[str]",
                    "numpy.ndarray",
                    "str",
                    "dict"
                ],
                "strategy_name": [
                    "Optional[bool]",
                    "Optional[Any]",
                    "Optional[str]"
                ],
                "filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "HyperoptTools.try_export_params": {
            "name": "try_export_params",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Any]"
                ],
                "strategy_name": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "params": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "HyperoptTools.has_space": {
            "name": "has_space",
            "location": 84,
            "return": [
                "bool",
                "Callable[,bool]",
                "int",
                "str"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "Dict[Any, pathlib.Path]",
                    "Dict[str, Dict[str, str]]"
                ],
                "space": [
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "Dict[Any, pathlib.Path]",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "HyperoptTools._read_results": {
            "name": "_read_results",
            "location": 95,
            "return": [
                "Iterator[List[Any]]",
                "Generator[list]"
            ],
            "arguments": {
                "results_file": [
                    "str",
                    "Union[str, bytes, int]",
                    "int"
                ],
                "batch_size": [
                    "int",
                    "str",
                    "List[str]",
                    "pathlib.Path",
                    "Dict[str,str]"
                ]
            }
        },
        "HyperoptTools._test_hyperopt_results_exist": {
            "name": "_test_hyperopt_results_exist",
            "location": 111,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "results_file": [
                    "pathlib.Path",
                    "path.Path"
                ]
            }
        },
        "HyperoptTools.load_filtered_results": {
            "name": "load_filtered_results",
            "location": 124,
            "return": [
                "str",
                "Tuple[Union[list,int]]",
                "Tuple[int]"
            ],
            "arguments": {
                "results_file": [],
                "config": [
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "HyperoptTools.show_epoch_details": {
            "name": "show_epoch_details",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "results": [
                    "str",
                    "Optional[Any]"
                ],
                "total_epochs": [
                    "str"
                ],
                "print_json": [
                    "List[str]",
                    "str",
                    "datetime.timedelta",
                    "pandas.DataFrame",
                    "bool"
                ],
                "no_header": [
                    "bool",
                    "List[str]",
                    "str",
                    "datetime.timedelta",
                    "pandas.DataFrame"
                ],
                "header_str": [
                    "None",
                    "bool",
                    "Optional[str]",
                    "Optional[AnyStr]",
                    "Optional[bool]",
                    "Optional[float]"
                ]
            }
        },
        "HyperoptTools._params_update_for_json": {
            "name": "_params_update_for_json",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "result_dict": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "params": [
                    "str",
                    "Dict[Hashable, Any]",
                    "bytes"
                ],
                "non_optimized": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "space": [
                    "str",
                    "Dict[Hashable, Any]"
                ]
            }
        },
        "HyperoptTools._params_pretty_print": {
            "name": "_params_pretty_print",
            "location": 216,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "params": [
                    "str",
                    "bytes",
                    "int"
                ],
                "space": [
                    "qutebrowser.misc.savemanager.SaveManager",
                    "bool",
                    "str",
                    "bytes"
                ],
                "header": [
                    "str",
                    "List[str]"
                ],
                "non_optimized": [
                    "Dict",
                    "str",
                    "List[Tuple[str,Any]]",
                    "pathlib.Path"
                ]
            }
        },
        "HyperoptTools._space_params": {
            "name": "_space_params",
            "location": 252,
            "return": [
                "Dict",
                "Dict[str,Any]",
                "str",
                "Dict[str,str]"
            ],
            "arguments": {
                "params": [
                    "str",
                    "bool",
                    "List[Dict[str, str]]",
                    "Sequence[Any]"
                ],
                "space": [
                    "str",
                    "bool",
                    "List[Dict[str, str]]",
                    "Sequence[Any]"
                ],
                "r": [
                    "None",
                    "bool",
                    "Callable",
                    "bytes",
                    "str"
                ]
            }
        },
        "HyperoptTools._pprint_dict": {
            "name": "_pprint_dict",
            "location": 260,
            "return": [
                "Text",
                "Dict[str,Any]",
                "Dict",
                "List"
            ],
            "arguments": {
                "params": [
                    "str",
                    "Dict[str, str]",
                    "Optional[Dict]",
                    "Optional[str]",
                    "Optional",
                    "bool"
                ],
                "non_optimized": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, str]",
                    "str"
                ],
                "indent": [
                    "Callable[...,Awaitable]",
                    "int"
                ]
            }
        },
        "HyperoptTools.is_best_loss": {
            "name": "is_best_loss",
            "location": 278,
            "return": [
                "bool"
            ],
            "arguments": {
                "results": [],
                "current_best_loss": []
            }
        },
        "HyperoptTools.format_results_explanation_string": {
            "name": "format_results_explanation_string",
            "location": 282,
            "return": [
                "Text",
                "str",
                "Optional[str]",
                "Tuple[Tuple[int,...]]"
            ],
            "arguments": {
                "results_metrics": [
                    "int",
                    "List[Dict[str, Any]]",
                    "dict",
                    "list"
                ],
                "stake_currency": [
                    "int",
                    "List[Dict[str, Any]]",
                    "dict",
                    "list"
                ]
            }
        },
        "HyperoptTools._format_explanation_string": {
            "name": "_format_explanation_string",
            "location": 297,
            "return": [
                "Text",
                "numpy.array",
                "int",
                "bool",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "results": [
                    "List[Dict[str, Any]]",
                    "str",
                    "int"
                ],
                "total_epochs": [
                    "List[Dict[str, Any]]",
                    "str",
                    "int"
                ]
            }
        },
        "HyperoptTools.prepare_trials_columns": {
            "name": "prepare_trials_columns",
            "location": 304,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "trials": [
                    "str",
                    "list",
                    "bool"
                ],
                "has_drawdown": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "HyperoptTools.get_result_table": {
            "name": "get_result_table",
            "location": 339,
            "return": [
                "Text",
                "Optional[str]",
                "str",
                "List",
                "bool"
            ],
            "arguments": {
                "config": [
                    "bool",
                    "List[numpy.array]",
                    "int"
                ],
                "results": [
                    "int",
                    "float",
                    "Tuple[int, int]",
                    "str"
                ],
                "total_epochs": [
                    "int",
                    "str",
                    "bool"
                ],
                "highlight_best": [
                    "bool",
                    "float",
                    "int"
                ],
                "print_colorized": [
                    "bool",
                    "str"
                ],
                "remove_header": [
                    "str",
                    "Dict[str, str]",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "HyperoptTools.export_csv_file": {
            "name": "export_csv_file",
            "location": 437,
            "return": [
                "None",
                "int",
                "Set"
            ],
            "arguments": {
                "config": [
                    "str",
                    "Sequence[str]",
                    "List[str]",
                    "int"
                ],
                "results": [
                    "bool",
                    "int",
                    "Dict[str, Any]",
                    "Iterable[pathlib.Path]",
                    "numpy.ndarray",
                    "dict"
                ],
                "csv_file": [
                    "pathlib.Path",
                    "str"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/optimize/optimize_reports.py": {
        "store_backtest_stats": {
            "name": "store_backtest_stats",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "recordfilename": [
                    "str"
                ],
                "stats": [
                    "str"
                ],
                "dtappendix": [
                    "Coroutine"
                ]
            }
        },
        "store_backtest_signal_candles": {
            "name": "store_backtest_signal_candles",
            "location": 47,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]",
                "tracim.models.data.Workspace"
            ],
            "arguments": {
                "recordfilename": [
                    "str",
                    "type",
                    "bool"
                ],
                "candles": [
                    "bool",
                    "str",
                    "int",
                    "Callable"
                ],
                "dtappendix": [
                    "dict",
                    "Coroutine",
                    "str"
                ]
            }
        },
        "_get_line_floatfmt": {
            "name": "_get_line_floatfmt",
            "location": 70,
            "return": [
                "List[Text]",
                "str",
                "Tuple[Tuple[int,...]]"
            ],
            "arguments": {
                "stake_currency": [
                    "int",
                    "Tuple[bytes]",
                    "Dict[str, Any]"
                ]
            }
        },
        "_get_line_header": {
            "name": "_get_line_header",
            "location": 78,
            "return": [
                "List[Text]",
                "Dict",
                "bool",
                "int"
            ],
            "arguments": {
                "first_column": [
                    "List[int]"
                ],
                "stake_currency": [
                    "List[int]"
                ],
                "direction": [
                    "List[int]",
                    "Text"
                ]
            }
        },
        "_generate_wins_draws_losses": {
            "name": "_generate_wins_draws_losses",
            "location": 87,
            "return": [
                "Text",
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "wins": [
                    "int",
                    "str",
                    "bool",
                    "[str]",
                    "Optional[str]"
                ],
                "draws": [
                    "int",
                    "str",
                    "bool",
                    "[str]",
                    "Optional[str]"
                ],
                "losses": [
                    "int",
                    "str",
                    "bool",
                    "[str]",
                    "Optional[str]"
                ]
            }
        },
        "_generate_result_line": {
            "name": "_generate_result_line",
            "location": 97,
            "return": [
                "Dict[Text,Union[int,float,str]]",
                "str",
                "Dict",
                "Union[str,bytes]"
            ],
            "arguments": {
                "result": [
                    "Optional[int]",
                    "click.Path",
                    "List[Dict[str, Any]]",
                    "employees.common.constants.ColumnSettings"
                ],
                "starting_balance": [
                    "bool",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "float",
                    "str",
                    "Optional[bool]",
                    "Optional[dict]"
                ],
                "first_column": [
                    "str",
                    "List[float]",
                    "List[int]",
                    "List[List[int]]",
                    "int",
                    "Optional[List[str]]",
                    "Callable[[Type, str], bool]",
                    "List['Entity']"
                ]
            }
        },
        "generate_pair_metrics": {
            "name": "generate_pair_metrics",
            "location": 130,
            "return": [
                "List",
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "pairlist": [
                    "str",
                    "List[str]",
                    "bool",
                    "int"
                ],
                "stake_currency": [
                    "str",
                    "List[str]",
                    "bool",
                    "int"
                ],
                "starting_balance": [
                    "str",
                    "int",
                    "float",
                    "List[str]",
                    "Dict[str, Any]",
                    "bool"
                ],
                "results": [
                    "Callable[[], Any]",
                    "str",
                    "List[Dict[str, Any]]",
                    "dict"
                ],
                "skip_nan": [
                    "bool",
                    "Set",
                    "int",
                    "pandas.DataFrame",
                    "Dict",
                    "Sized",
                    "float",
                    "Type"
                ]
            }
        },
        "generate_tag_metrics": {
            "name": "generate_tag_metrics",
            "location": 159,
            "return": [
                "List",
                "bytes",
                "str",
                "Callable"
            ],
            "arguments": {
                "tag_type": [
                    "str",
                    "Iterable"
                ],
                "starting_balance": [
                    "str",
                    "int",
                    "bool",
                    "List[str]"
                ],
                "results": [
                    "str",
                    "Optional[str]"
                ],
                "skip_nan": [
                    "bool",
                    "Type",
                    "str",
                    "Type[T]"
                ]
            }
        },
        "generate_exit_reason_stats": {
            "name": "generate_exit_reason_stats",
            "location": 191,
            "return": [
                "List[dict[Text,Union[int,float]]]",
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "max_open_trades": [
                    "int",
                    "float",
                    "bool"
                ],
                "results": [
                    "dict",
                    "int",
                    "Set[str]",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "List[str]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "generate_strategy_comparison": {
            "name": "generate_strategy_comparison",
            "location": 226,
            "return": [
                "List",
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "bt_stats": [
                    "dict",
                    "Dict[Tuple[int, ...], float]"
                ]
            }
        },
        "generate_edge_table": {
            "name": "generate_edge_table",
            "location": 244,
            "return": [
                "Dict[str, Any]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "results": [
                    "dict",
                    "OrderedDict",
                    "Iterable[Tuple[Hashable, Any]]",
                    "str"
                ]
            }
        },
        "_get_resample_from_period": {
            "name": "_get_resample_from_period",
            "location": 269,
            "return": [
                "Text",
                "str",
                "Dict[str,bool]"
            ],
            "arguments": {
                "period": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "BinaryIO",
                    "Union[int, str]"
                ]
            }
        },
        "generate_periodic_breakdown_stats": {
            "name": "generate_periodic_breakdown_stats",
            "location": 279,
            "return": [
                "List",
                "int",
                "List[dict[Text,bool]]",
                "Callable",
                "str"
            ],
            "arguments": {
                "trade_list": [
                    "Union[int, float]",
                    "str",
                    "pandas.DataFrame"
                ],
                "period": [
                    "int",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "generate_trading_stats": {
            "name": "generate_trading_stats",
            "location": 304,
            "return": [
                "Dict[Text,int]",
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "results": [
                    "List[str]",
                    "Sequence[Dict]",
                    "sideeye.data.Trial"
                ]
            }
        },
        "generate_daily_stats": {
            "name": "generate_daily_stats",
            "location": 340,
            "return": [
                "Dict[Text,Union[int,list]]",
                "str",
                "Dict[Text,Union[bool,list[tuple[str]]]]",
                "pandas.DataFrame",
                "pandas.Series",
                "Iterable[Any]"
            ],
            "arguments": {
                "results": [
                    "bool",
                    "List[Union[\"PipeChain\", str]]",
                    "Callable"
                ]
            }
        },
        "generate_strategy_stats": {
            "name": "generate_strategy_stats",
            "location": 376,
            "return": [
                "Dict",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pairlist": [
                    "int",
                    "bool",
                    "dict",
                    "str"
                ],
                "strategy": [
                    "bool",
                    "Optional[Union[Any, Any]]",
                    "List[str]",
                    "dict",
                    "str"
                ],
                "content": [],
                "min_date": [
                    "datetime.datetime",
                    "datetime.date",
                    "pandas.Series",
                    "float",
                    "dict",
                    "str"
                ],
                "max_date": [
                    "datetime.datetime",
                    "datetime.date",
                    "pandas.Series",
                    "float",
                    "dict",
                    "str"
                ],
                "market_change": [
                    "bool",
                    "Optional[Union[Any, Any]]",
                    "List[str]",
                    "dict",
                    "str"
                ]
            }
        },
        "generate_backtest_stats": {
            "name": "generate_backtest_stats",
            "location": 547,
            "return": [
                "Dict[Text,Union[list,dict[,dict[Text,]]]]",
                "bool",
                "pandas.DataFrame",
                "Optional[Union[str,Any]]"
            ],
            "arguments": {
                "btdata": [
                    "Dict[str, float]",
                    "str",
                    "float",
                    "Callable",
                    "range"
                ],
                "all_results": [
                    "dict",
                    "bool",
                    "Dict[str, Any]",
                    "Dict[str, Dict[int, str]]",
                    "Dict[str, pandas.DataFrame]"
                ],
                "min_date": [
                    "datetime.date",
                    "datetime.datetime",
                    "Optional[str]",
                    "List[int]",
                    "str"
                ],
                "max_date": [
                    "datetime.date",
                    "datetime.datetime",
                    "Optional[str]",
                    "List[int]",
                    "str"
                ]
            }
        },
        "text_table_bt_results": {
            "name": "text_table_bt_results",
            "location": 588,
            "return": [
                "Iterable[str]",
                "pandas.DataFrame",
                "Pattern",
                "Dict[str, Any]"
            ],
            "arguments": {
                "pair_results": [
                    "int"
                ],
                "stake_currency": [
                    "Type",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "text_table_exit_reason": {
            "name": "text_table_exit_reason",
            "location": 608,
            "return": [
                "pandas.DataFrame"
            ],
            "arguments": {
                "exit_reason_stats": [
                    "dict"
                ],
                "stake_currency": []
            }
        },
        "text_table_tags": {
            "name": "text_table_tags",
            "location": 635,
            "return": [
                "str",
                "int",
                "list"
            ],
            "arguments": {
                "tag_type": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "bool",
                    "Optional[bool]"
                ],
                "tag_results": [
                    "Optional[str]",
                    "List[Dict[str, Any]]",
                    "Optional[List[str]]",
                    "Optional[Any]",
                    "Iterable[Iterable[str]]",
                    "Optional[Iterable[str]]",
                    "Optional[Union[str, int]]"
                ],
                "stake_currency": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Callable[[Any], bool]",
                    "Dict[str, str]"
                ]
            }
        },
        "text_table_periodic_breakdown": {
            "name": "text_table_periodic_breakdown",
            "location": 666,
            "return": [
                "pandas.DataFrame"
            ],
            "arguments": {
                "days_breakdown_stats": [],
                "stake_currency": [],
                "period": []
            }
        },
        "text_table_strategy": {
            "name": "text_table_strategy",
            "location": 688,
            "return": [
                "pandas.DataFrame"
            ],
            "arguments": {
                "strategy_results": [
                    "T",
                    "dict"
                ],
                "stake_currency": [
                    "dict",
                    "bool",
                    "Callable[..., None]",
                    "Type"
                ]
            }
        },
        "text_table_add_metrics": {
            "name": "text_table_add_metrics",
            "location": 723,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "strat_results": []
            }
        },
        "show_backtest_result": {
            "name": "show_backtest_result",
            "location": 844,
            "return": [
                "None"
            ],
            "arguments": {
                "strategy": [
                    "str",
                    "int",
                    "T",
                    "List[str]"
                ],
                "results": [
                    "List[Dict]",
                    "dict",
                    "Union[bool, int, str]"
                ],
                "stake_currency": [
                    "dict",
                    "str"
                ],
                "backtest_breakdown": [
                    "List",
                    "bool",
                    "Dict",
                    "Optional[Any]"
                ]
            }
        },
        "show_backtest_results": {
            "name": "show_backtest_results",
            "location": 900,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]"
                ],
                "backtest_stats": [
                    "bool",
                    "pathlib.Path",
                    "List[str]",
                    "str"
                ]
            }
        },
        "show_sorted_pairlist": {
            "name": "show_sorted_pairlist",
            "location": 920,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "str",
                    "OrderedDict"
                ],
                "backtest_stats": [
                    "dict",
                    "Dict[str, bool]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/optimize/__init__.py": {},
    "freqtrade-develop/freqtrade/optimize/hyperopt_loss/hyperopt_loss_calmar.py": {
        "CalmarHyperOptLoss.hyperopt_loss_function": {
            "name": "hyperopt_loss_function",
            "location": 25,
            "return": [
                "float",
                "int",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "results": [
                    "int",
                    "Optional[Callable]",
                    "float",
                    "str"
                ],
                "trade_count": [
                    "bool",
                    "Iterable[str]",
                    "str"
                ],
                "min_date": [
                    "datetime.datetime",
                    "datetime.date",
                    "str",
                    "Optional[datetime.date]",
                    "pandas.DataFrame"
                ],
                "max_date": [
                    "datetime.datetime",
                    "datetime.date",
                    "str",
                    "Optional[datetime.date]",
                    "pandas.DataFrame"
                ],
                "config": [
                    "bool",
                    "Iterable[str]",
                    "str"
                ],
                "processed": [
                    "bool",
                    "Iterable[str]",
                    "str"
                ],
                "backtest_stats": [
                    "bool",
                    "Optional[Mapping]",
                    "Optional[int]",
                    "Type[T]",
                    "pandas.DataFrame"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/optimize/hyperopt_loss/hyperopt_loss_max_drawdown.py": {
        "MaxDrawDownHyperOptLoss.hyperopt_loss_function": {
            "name": "hyperopt_loss_function",
            "location": 25,
            "return": [
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "results": [
                    "Callable",
                    "bool",
                    "Optional[str]",
                    "dict",
                    "Optional[Sequence[str]]",
                    "Optional[Callable[[], None]]"
                ],
                "trade_count": [
                    "int",
                    "datetime.datetime",
                    "Optional[datetime.datetime]"
                ],
                "min_date": [
                    "int",
                    "datetime.datetime",
                    "Optional[datetime.datetime]"
                ],
                "max_date": [
                    "int",
                    "datetime.datetime",
                    "Optional[datetime.datetime]"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/optimize/hyperopt_loss/hyperopt_loss_max_drawdown_relative.py": {
        "MaxDrawDownRelativeHyperOptLoss.hyperopt_loss_function": {
            "name": "hyperopt_loss_function",
            "location": 25,
            "return": [
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "results": [
                    "dict"
                ],
                "config": [
                    "dict"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/optimize/hyperopt_loss/hyperopt_loss_onlyprofit.py": {
        "OnlyProfitHyperOptLoss.hyperopt_loss_function": {
            "name": "hyperopt_loss_function",
            "location": 20,
            "return": [
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "results": [
                    "Dict[str, Any]",
                    "Dict[str, Set[str]]",
                    "bool",
                    "type",
                    "dict",
                    "OrderedDict"
                ],
                "trade_count": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/optimize/hyperopt_loss/hyperopt_loss_profit_drawdown.py": {
        "ProfitDrawDownHyperOptLoss.hyperopt_loss_function": {
            "name": "hyperopt_loss_function",
            "location": 22,
            "return": [
                "float",
                "int",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "results": [
                    "bool"
                ],
                "trade_count": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/optimize/hyperopt_loss/hyperopt_loss_sharpe.py": {
        "SharpeHyperOptLoss.hyperopt_loss_function": {
            "name": "hyperopt_loss_function",
            "location": 23,
            "return": [
                "float",
                "int",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "results": [
                    "pandas.DataFrame",
                    "float",
                    "int"
                ],
                "trade_count": [
                    "int",
                    "datetime.datetime",
                    "Optional[datetime.datetime]"
                ],
                "min_date": [
                    "datetime.datetime",
                    "bool",
                    "Optional[Union[str, datetime.datetime]]",
                    "datetime"
                ],
                "max_date": [
                    "datetime.datetime",
                    "bool",
                    "Optional[Union[str, datetime.datetime]]",
                    "datetime"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/optimize/hyperopt_loss/hyperopt_loss_sharpe_daily.py": {
        "SharpeHyperOptLossDaily.hyperopt_loss_function": {
            "name": "hyperopt_loss_function",
            "location": 23,
            "return": [
                "float",
                "int",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "results": [
                    "bool",
                    "Optional[Union[int, str]]",
                    "Tuple[str, str]",
                    "Callable"
                ],
                "trade_count": [
                    "int",
                    "datetime.datetime",
                    "Optional[datetime.datetime]"
                ],
                "min_date": [
                    "datetime.datetime",
                    "datetime.date",
                    "bool",
                    "Optional[datetime.date]",
                    "datetime"
                ],
                "max_date": [
                    "datetime.datetime",
                    "datetime.date",
                    "bool",
                    "Optional[datetime.date]",
                    "datetime"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/optimize/hyperopt_loss/hyperopt_loss_short_trade_dur.py": {
        "ShortTradeDurHyperOptLoss.hyperopt_loss_function": {
            "name": "hyperopt_loss_function",
            "location": 35,
            "return": [
                "float"
            ],
            "arguments": {
                "results": [],
                "trade_count": []
            }
        }
    },
    "freqtrade-develop/freqtrade/optimize/hyperopt_loss/hyperopt_loss_sortino.py": {
        "SortinoHyperOptLoss.hyperopt_loss_function": {
            "name": "hyperopt_loss_function",
            "location": 23,
            "return": [
                "float",
                "int",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "results": [
                    "list",
                    "pandas.DataFrame",
                    "Dict[str, bool]",
                    "List[Dict[Any, str]]",
                    "dict",
                    "pyspark.sql.DataFrame",
                    "List[Dict[str, Any]]"
                ],
                "trade_count": [
                    "int",
                    "datetime.datetime",
                    "Optional[datetime.datetime]"
                ],
                "min_date": [
                    "datetime.datetime",
                    "bool",
                    "Optional[Union[str, datetime.datetime]]",
                    "datetime"
                ],
                "max_date": [
                    "datetime.datetime",
                    "bool",
                    "Optional[Union[str, datetime.datetime]]",
                    "datetime"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/optimize/hyperopt_loss/hyperopt_loss_sortino_daily.py": {
        "SortinoHyperOptLossDaily.hyperopt_loss_function": {
            "name": "hyperopt_loss_function",
            "location": 23,
            "return": [
                "float",
                "int",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "results": [
                    "bool",
                    "Optional[Union[int, str]]",
                    "Tuple[str, str]",
                    "Callable"
                ],
                "trade_count": [
                    "int",
                    "datetime.datetime",
                    "Optional[datetime.datetime]"
                ],
                "min_date": [
                    "datetime.datetime",
                    "datetime.date",
                    "bool",
                    "Optional[datetime.date]",
                    "datetime"
                ],
                "max_date": [
                    "datetime.datetime",
                    "datetime.date",
                    "bool",
                    "Optional[datetime.date]",
                    "datetime"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/optimize/space/decimalspace.py": {
        "SKDecimal.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "low": [
                    "int",
                    "str",
                    "Tuple[str, int]",
                    "Optional[str]",
                    "bool"
                ],
                "high": [
                    "int",
                    "float",
                    "Optional[int]"
                ],
                "decimals": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "bool"
                ],
                "prior": [
                    "Text",
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[Any]",
                    "Optional[int]"
                ],
                "base": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[Any]",
                    "Optional[int]"
                ],
                "transform": [
                    "None",
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[Any]",
                    "Optional[int]"
                ],
                "name": [
                    "None",
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[Any]",
                    "Optional[int]"
                ],
                "dtype": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[Any]",
                    "Optional[int]"
                ]
            }
        },
        "SKDecimal.__repr__": {
            "name": "__repr__",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SKDecimal.__contains__": {
            "name": "__contains__",
            "location": 26,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "point": [
                    "list",
                    "numpy.ndarray",
                    "str",
                    "List['cirq.Qid']",
                    "int"
                ]
            }
        },
        "SKDecimal.transform": {
            "name": "transform",
            "location": 31,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "Xt": [
                    "str",
                    "int",
                    "Callable[[int], None]",
                    "float",
                    "List[str]"
                ]
            }
        },
        "SKDecimal.inverse_transform": {
            "name": "inverse_transform",
            "location": 34,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "Xt": [
                    "int",
                    "str",
                    "dict",
                    "List[str]"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/optimize/space/__init__.py": {},
    "freqtrade-develop/freqtrade/persistence/base.py": {},
    "freqtrade-develop/freqtrade/persistence/migrations.py": {
        "get_table_names_for_table": {
            "name": "get_table_names_for_table",
            "location": 13,
            "return": [
                "list"
            ],
            "arguments": {
                "inspector": [
                    "str"
                ],
                "tabletype": [
                    "str"
                ]
            }
        },
        "has_column": {
            "name": "has_column",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "columns": [
                    "List[str]",
                    "list",
                    "List[Dict[str, Any]]",
                    "int",
                    "dict"
                ],
                "searchname": [
                    "List[str]",
                    "list",
                    "List[Dict[str, Any]]",
                    "int",
                    "dict"
                ]
            }
        },
        "get_column_def": {
            "name": "get_column_def",
            "location": 21,
            "return": [
                "Union[(_T1, _T2)]"
            ],
            "arguments": {
                "columns": [
                    "bool",
                    "str",
                    "Optional[list]",
                    "Optional[List[str]]"
                ],
                "column": [
                    "bool",
                    "str",
                    "Optional[list]",
                    "Optional[List[str]]"
                ],
                "default": [
                    "bool",
                    "str",
                    "Optional[list]",
                    "Optional[List[str]]"
                ]
            }
        },
        "get_backup_name": {
            "name": "get_backup_name",
            "location": 25,
            "return": [
                "Union[(str, _T1)]"
            ],
            "arguments": {
                "tabs": [
                    "int",
                    "Dict[str, Any]",
                    "str"
                ],
                "backup_prefix": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "get_last_sequence_ids": {
            "name": "get_last_sequence_ids",
            "location": 34,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "engine": [
                    "str",
                    "List[str]"
                ],
                "trade_back_name": [
                    "str",
                    "Optional[str]"
                ],
                "order_back_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "set_sequence_ids": {
            "name": "set_sequence_ids",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "engine": [
                    "str"
                ],
                "order_id": [
                    "str",
                    "int"
                ],
                "trade_id": [
                    "str",
                    "int"
                ],
                "pairlock_id": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "drop_index_on_table": {
            "name": "drop_index_on_table",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "engine": [
                    "str",
                    "Dict[str, Any]"
                ],
                "inspector": [
                    "str"
                ],
                "table_bak_name": [
                    "str"
                ]
            }
        },
        "migrate_trades_and_orders_table": {
            "name": "migrate_trades_and_orders_table",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "decl_base": [
                    "bytes",
                    "str",
                    "int",
                    "Tuple[int, int]"
                ],
                "inspector": [
                    "int",
                    "Optional[str]",
                    "type",
                    "bool",
                    "Optional[Sequence[Any]]"
                ],
                "engine": [
                    "Sequence[str]",
                    "Optional[str]",
                    "str",
                    "list",
                    "Tuple[str, int, int]",
                    "bool",
                    "List[str]"
                ],
                "trade_back_name": [
                    "str",
                    "Callable"
                ],
                "cols": [
                    "Callable[[float], float]",
                    "float"
                ],
                "order_back_name": [
                    "Optional[str]",
                    "bool",
                    "int",
                    "Type"
                ],
                "cols_order": [
                    "Optional[int]",
                    "Optional[str]",
                    "str",
                    "int",
                    "type"
                ]
            }
        },
        "drop_orders_table": {
            "name": "drop_orders_table",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "engine": [
                    "str",
                    "sqlalchemy.engine.base.Engine"
                ],
                "table_back_name": [
                    "str"
                ]
            }
        },
        "migrate_orders_table": {
            "name": "migrate_orders_table",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "engine": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ],
                "table_back_name": [
                    "str",
                    "List[str]"
                ],
                "cols_order": [
                    "str",
                    "Optional[bool]",
                    "Optional[str]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "migrate_pairlocks_table": {
            "name": "migrate_pairlocks_table",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "decl_base": [
                    "bytes",
                    "str",
                    "Tuple[int, int]",
                    "int"
                ],
                "inspector": [
                    "int",
                    "Optional[str]",
                    "type",
                    "bool",
                    "Optional[Sequence[Any]]",
                    "str"
                ],
                "engine": [
                    "str",
                    "type",
                    "Optional[Sequence[Any]]",
                    "Optional[str]"
                ],
                "pairlock_back_name": [
                    "Optional[str]",
                    "type",
                    "List[str]",
                    "int",
                    "str",
                    "sqlalchemy.Column"
                ],
                "cols": []
            }
        },
        "set_sqlite_to_wal": {
            "name": "set_sqlite_to_wal",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "engine": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "fix_old_dry_orders": {
            "name": "fix_old_dry_orders",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "engine": [
                    "sqlalchemy.engine.base.Engine",
                    "str",
                    "Callable[[T], bool]"
                ]
            }
        },
        "check_migrate": {
            "name": "check_migrate",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "engine": [
                    "str",
                    "int",
                    "bytes"
                ],
                "decl_base": [
                    "str",
                    "int",
                    "Callable"
                ],
                "previous_tables": [
                    "dict",
                    "Dict[str, str]",
                    "str"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/persistence/models.py": {
        "init_db": {
            "name": "init_db",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "db_url": [
                    "str",
                    "int",
                    "type"
                ]
            }
        },
        "cleanup_db": {
            "name": "cleanup_db",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "freqtrade-develop/freqtrade/persistence/pairlock.py": {
        "PairLock.__repr__": {
            "name": "__repr__",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PairLock.query_pair_locks": {
            "name": "query_pair_locks",
            "location": 38,
            "return": [
                "dict",
                "str",
                "Dict[str, Any]",
                "Tuple[str]",
                "sqlalchemy.MetaData"
            ],
            "arguments": {
                "pair": [
                    "str",
                    "int"
                ],
                "now": [
                    "int",
                    "str",
                    "T",
                    "Optional[float]"
                ],
                "side": [
                    "Text",
                    "T",
                    "Optional[str]"
                ]
            }
        },
        "PairLock.to_json": {
            "name": "to_json",
            "location": 58,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "freqtrade-develop/freqtrade/persistence/pairlock_middleware.py": {
        "PairLocks.reset_locks": {
            "name": "reset_locks",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "PairLocks.lock_pair": {
            "name": "lock_pair",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "pair": [
                    "dict",
                    "freqtrade.persistence.Trade",
                    "str",
                    "taxonomy.db.models.Location",
                    "Tuple[float, float, float, float]",
                    "abilian.core.models.subjects.Principal"
                ],
                "until": [
                    "dict",
                    "freqtrade.persistence.Trade",
                    "str",
                    "taxonomy.db.models.Location",
                    "Tuple[float, float, float, float]",
                    "abilian.core.models.subjects.Principal"
                ],
                "reason": [
                    "None",
                    "Dict",
                    "freqtrade.persistence.Trade",
                    "str",
                    "taxonomy.db.models.Location",
                    "Tuple[float,float,float,float]",
                    "abilian.core.models.subjects.Principal"
                ]
            }
        },
        "PairLocks.get_pair_locks": {
            "name": "get_pair_locks",
            "location": 61,
            "return": [
                "List",
                "str",
                "int",
                "Dict[str,Any]"
            ],
            "arguments": {
                "pair": [
                    "int",
                    "List['cirq.Qid']"
                ],
                "now": [
                    "None",
                    "str",
                    "datetime.datetime",
                    "Optional[datetime.tzinfo]",
                    "Union[str,int]",
                    "float"
                ],
                "side": [
                    "Text",
                    "int",
                    "List[cirq.Qid]"
                ]
            }
        },
        "PairLocks.get_pair_longest_lock": {
            "name": "get_pair_longest_lock",
            "location": 84,
            "return": [
                "None",
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "pair": [
                    "Union[str, int]",
                    "str",
                    "int"
                ],
                "now": [
                    "None",
                    "Union[str,int]",
                    "str",
                    "int"
                ],
                "side": [
                    "Text",
                    "Union[str,int]",
                    "str",
                    "int"
                ]
            }
        },
        "PairLocks.unlock_pair": {
            "name": "unlock_pair",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "pair": [
                    "str",
                    "int"
                ],
                "now": [
                    "None",
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "side": [
                    "Text",
                    "Union[int,float]",
                    "Optional[float]",
                    "float",
                    "int"
                ]
            }
        },
        "PairLocks.unlock_reason": {
            "name": "unlock_reason",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "reason": [
                    "str",
                    "int",
                    "dict"
                ],
                "now": [
                    "None",
                    "int",
                    "str",
                    "Optional[str]",
                    "recidiviz.persistence.database.schema.state.schema.StateIncarcerationPeriod"
                ]
            }
        },
        "PairLocks.is_global_lock": {
            "name": "is_global_lock",
            "location": 142,
            "return": [
                "bool",
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "now": [
                    "None",
                    "List[recidiviz.persistence.entity.state.entities.StateAssessment]",
                    "str"
                ],
                "side": [
                    "Text",
                    "Callable",
                    "int"
                ]
            }
        },
        "PairLocks.is_pair_locked": {
            "name": "is_pair_locked",
            "location": 153,
            "return": [
                "bool",
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "pair": [
                    "Optional[float]",
                    "float"
                ],
                "now": [
                    "None",
                    "str",
                    "int",
                    "List[recidiviz.persistence.entity.state.entities.StateAssessment]",
                    "transfer.models.Article",
                    "recidiviz.persistence.entity.state.entities.StateIncarcerationPeriod",
                    "Optional[float]"
                ],
                "side": [
                    "Text",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "PairLocks.get_all_locks": {
            "name": "get_all_locks",
            "location": 168,
            "return": [
                "dict",
                "bool",
                "str",
                "Union[int, float, complex]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "freqtrade-develop/freqtrade/persistence/trade_model.py": {
        "Order.order_date_utc": {
            "name": "order_date_utc",
            "location": 68,
            "return": [
                "datetime.datetime",
                "str",
                "int",
                "datetime.date",
                "Union[datetime.datetime, str]",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionSentence]",
                "List[recidiviz.persistence.entity.state.entities.StateIncarcerationSentence]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Order.safe_price": {
            "name": "safe_price",
            "location": 73,
            "return": [
                "float",
                "str",
                "T",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Order.safe_filled": {
            "name": "safe_filled",
            "location": 77,
            "return": [
                "float",
                "bool",
                "Dict",
                "Optional[Exception]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Order.safe_fee_base": {
            "name": "safe_fee_base",
            "location": 81,
            "return": [
                "float",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Order.safe_amount_after_fee": {
            "name": "safe_amount_after_fee",
            "location": 85,
            "return": [
                "int",
                "Tuple[float, float, float]",
                "Callable",
                "List[recidiviz.persistence.entity.entities.EntityPersonType]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Order.__repr__": {
            "name": "__repr__",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Order.update_from_ccxt_object": {
            "name": "update_from_ccxt_object",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "Dict[str, Any]",
                    "Exception",
                    "dict"
                ]
            }
        },
        "Order.to_ccxt_object": {
            "name": "to_ccxt_object",
            "location": 123,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Order.to_json": {
            "name": "to_json",
            "location": 143,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "entry_side": [
                    "Optional[List[str]]",
                    "str",
                    "int",
                    "Optional[Callable]",
                    "datetime"
                ],
                "minified": [
                    "bool",
                    "str",
                    "Callable",
                    "int"
                ]
            }
        },
        "Order.close_bt_order": {
            "name": "close_bt_order",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "close_date": [
                    "datetime.date",
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]",
                    "int",
                    "datetime.datetime"
                ],
                "trade": [
                    "bool",
                    "list",
                    "List[float]",
                    "int",
                    "float"
                ]
            }
        },
        "Order.update_orders": {
            "name": "update_orders",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "orders": [
                    "dict",
                    "bool",
                    "str"
                ],
                "order": [
                    "str"
                ]
            }
        },
        "Order.parse_from_ccxt_object": {
            "name": "parse_from_ccxt_object",
            "location": 203,
            "return": [
                "Order"
            ],
            "arguments": {
                "order": [
                    "bool",
                    "dict",
                    "bytes",
                    "str",
                    "int"
                ],
                "pair": [
                    "dict",
                    "str"
                ],
                "side": [
                    "dict",
                    "str"
                ]
            }
        },
        "Order.get_open_orders": {
            "name": "get_open_orders",
            "location": 213,
            "return": [
                "int",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {}
        },
        "Order.order_by_id": {
            "name": "order_by_id",
            "location": 221,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Callable",
                "dict",
                "sqlalchemy.MetaData"
            ],
            "arguments": {
                "order_id": [
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "LocalTrade.buy_tag": {
            "name": "buy_tag",
            "location": 306,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalTrade.has_no_leverage": {
            "name": "has_no_leverage",
            "location": 314,
            "return": [
                "bool",
                "Optional[bool]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalTrade.borrowed": {
            "name": "borrowed",
            "location": 319,
            "return": [
                "float",
                "str",
                "int",
                "bytearray",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalTrade.open_date_utc": {
            "name": "open_date_utc",
            "location": 333,
            "return": [
                "str",
                "datetime.datetime",
                "int",
                "datetime.date",
                "Optional[datetime.tzinfo]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalTrade.close_date_utc": {
            "name": "close_date_utc",
            "location": 337,
            "return": [
                "datetime.datetime",
                "str",
                "int",
                "datetime.date",
                "Union[datetime.datetime, str]",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionSentence]",
                "List[recidiviz.persistence.entity.state.entities.StateIncarcerationSentence]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalTrade.enter_side": {
            "name": "enter_side",
            "location": 341,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalTrade.entry_side": {
            "name": "entry_side",
            "location": 347,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalTrade.exit_side": {
            "name": "exit_side",
            "location": 354,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalTrade.trade_direction": {
            "name": "trade_direction",
            "location": 361,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalTrade.safe_base_currency": {
            "name": "safe_base_currency",
            "location": 368,
            "return": [
                "Text",
                "str",
                "IO",
                "bytes",
                "Callable[,str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalTrade.safe_quote_currency": {
            "name": "safe_quote_currency",
            "location": 378,
            "return": [
                "Callable",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalTrade.__init__": {
            "name": "__init__",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalTrade.__repr__": {
            "name": "__repr__",
            "location": 395,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalTrade.to_json": {
            "name": "to_json",
            "location": 404,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "minified": [
                    "bool",
                    "int",
                    "bytes",
                    "Dict[str,str]",
                    "str"
                ]
            }
        },
        "LocalTrade.reset_trades": {
            "name": "reset_trades",
            "location": 485,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LocalTrade.adjust_min_max_rates": {
            "name": "adjust_min_max_rates",
            "location": 493,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current_price": [
                    "List[str]"
                ],
                "current_price_low": [
                    "int",
                    "float",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "LocalTrade.set_isolated_liq": {
            "name": "set_isolated_liq",
            "location": 500,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "liquidation_price": [
                    "bool",
                    "float"
                ]
            }
        },
        "LocalTrade._set_stop_loss": {
            "name": "_set_stop_loss",
            "location": 509,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stop_loss": [
                    "bool",
                    "float"
                ],
                "percent": [
                    "bool",
                    "float"
                ]
            }
        },
        "LocalTrade.adjust_stop_loss": {
            "name": "adjust_stop_loss",
            "location": 529,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current_price": [],
                "stoploss": [],
                "initial": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ],
                "refresh": [
                    "bool",
                    "str"
                ]
            }
        },
        "LocalTrade.update_trade": {
            "name": "update_trade",
            "location": 584,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "int",
                    "Optional[dict]",
                    "Callable[[Any], bool]"
                ]
            }
        },
        "LocalTrade.close": {
            "name": "close",
            "location": 623,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rate": [
                    "str"
                ]
            }
        },
        "LocalTrade.update_fee": {
            "name": "update_fee",
            "location": 641,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fee_cost": [
                    "Optional[str]",
                    "str",
                    "float"
                ],
                "fee_currency": [
                    "Optional[str]",
                    "str",
                    "float"
                ],
                "fee_rate": [
                    "Optional[int]",
                    "Dict[str, Any]"
                ],
                "side": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "LocalTrade.fee_updated": {
            "name": "fee_updated",
            "location": 659,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "side": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "LocalTrade.update_order": {
            "name": "update_order",
            "location": 670,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "LocalTrade.get_exit_order_count": {
            "name": "get_exit_order_count",
            "location": 673,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalTrade._calc_open_trade_value": {
            "name": "_calc_open_trade_value",
            "location": 680,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalTrade.recalc_open_trade_value": {
            "name": "recalc_open_trade_value",
            "location": 692,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalTrade.calculate_interest": {
            "name": "calculate_interest",
            "location": 699,
            "return": [
                "Decimal",
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalTrade._calc_base_close": {
            "name": "_calc_base_close",
            "location": 719,
            "return": [
                "str",
                "int",
                "float",
                "sqlalchemy.engine.base.Engine"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "float",
                    "bool"
                ],
                "rate": [
                    "int",
                    "float",
                    "bool"
                ],
                "fee": [
                    "int",
                    "float"
                ]
            }
        },
        "LocalTrade.calc_close_trade_value": {
            "name": "calc_close_trade_value",
            "location": 729,
            "return": [
                "float",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "rate": [
                    "base.cell.Cell",
                    "base.colored_grid.ColoredGrid",
                    "Optional[Any]",
                    "float",
                    "int"
                ]
            }
        },
        "LocalTrade.calc_profit": {
            "name": "calc_profit",
            "location": 767,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "rate": [
                    "float",
                    "dict",
                    "str"
                ]
            }
        },
        "LocalTrade.calc_profit_ratio": {
            "name": "calc_profit_ratio",
            "location": 781,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "rate": [
                    "float",
                    "dict",
                    "str"
                ]
            }
        },
        "LocalTrade.recalc_trade_from_orders": {
            "name": "recalc_trade_from_orders",
            "location": 803,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalTrade.select_order_by_order_id": {
            "name": "select_order_by_order_id",
            "location": 829,
            "return": [
                "None",
                "Optional[int]",
                "Optional[bool]",
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "order_id": [
                    "str",
                    "int"
                ]
            }
        },
        "LocalTrade.select_order": {
            "name": "select_order",
            "location": 839,
            "return": [
                "None",
                "Optional[str]",
                "List",
                "str"
            ],
            "arguments": {
                "self": [],
                "order_side": [
                    "None",
                    "int",
                    "Tuple[int,int]",
                    "str",
                    "float",
                    "T",
                    "Optional[int]"
                ],
                "is_open": [
                    "None",
                    "Optional[Dict[str,str]]",
                    "Callable"
                ]
            }
        },
        "LocalTrade.select_filled_orders": {
            "name": "select_filled_orders",
            "location": 857,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "order_side": [
                    "None",
                    "int",
                    "T"
                ]
            }
        },
        "LocalTrade.select_filled_or_open_orders": {
            "name": "select_filled_or_open_orders",
            "location": 868,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalTrade.nr_of_successful_entries": {
            "name": "nr_of_successful_entries",
            "location": 884,
            "return": [
                "int",
                "Iterable[T]",
                "constants.Rank",
                "str",
                "Callable[[T],bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalTrade.nr_of_successful_exits": {
            "name": "nr_of_successful_exits",
            "location": 893,
            "return": [
                "int",
                "Iterable[T]",
                "constants.Rank",
                "str",
                "Callable[[T],bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalTrade.nr_of_successful_buys": {
            "name": "nr_of_successful_buys",
            "location": 901,
            "return": [
                "int",
                "Iterable[T]",
                "constants.Rank",
                "str",
                "Callable[[T],bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalTrade.nr_of_successful_sells": {
            "name": "nr_of_successful_sells",
            "location": 911,
            "return": [
                "int",
                "Iterable[T]",
                "constants.Rank",
                "str",
                "Callable[[T],bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalTrade.sell_reason": {
            "name": "sell_reason",
            "location": 920,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalTrade.get_trades_proxy": {
            "name": "get_trades_proxy",
            "location": 925,
            "return": [
                "List[nothing]"
            ],
            "arguments": {}
        },
        "LocalTrade.close_bt_trade": {
            "name": "close_bt_trade",
            "location": 959,
            "return": [
                "None"
            ],
            "arguments": {
                "trade": [
                    "str",
                    "List[Mapping[str, Any]]",
                    "float"
                ]
            }
        },
        "LocalTrade.add_bt_trade": {
            "name": "add_bt_trade",
            "location": 965,
            "return": [
                "None"
            ],
            "arguments": {
                "trade": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "LocalTrade.get_open_trades": {
            "name": "get_open_trades",
            "location": 972,
            "return": [
                "str",
                "Optional[Dict[str, Any]]",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "LocalTrade.stoploss_reinitialization": {
            "name": "stoploss_reinitialization",
            "location": 979,
            "return": [
                "None"
            ],
            "arguments": {
                "desired_stoploss": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Trade.__init__": {
            "name": "__init__",
            "location": 1074,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trade.delete": {
            "name": "delete",
            "location": 1078,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trade.commit": {
            "name": "commit",
            "location": 1087,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Trade.get_trades_proxy": {
            "name": "get_trades_proxy",
            "location": 1091,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "Optional[List[str]]"
            ],
            "arguments": {}
        },
        "Trade.get_trades": {
            "name": "get_trades",
            "location": 1121,
            "return": [
                "Dict[str, Any]",
                "str",
                "dict",
                "base.ConfigOptions",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "trade_filter": [
                    "None",
                    "str",
                    "Optional[str]",
                    "Iterable[T]"
                ],
                "include_orders": [
                    "bool",
                    "int",
                    "Callable[[List],None]",
                    "List[str]",
                    "T",
                    "Container[T]",
                    "Dict"
                ]
            }
        },
        "Trade.get_open_order_trades": {
            "name": "get_open_order_trades",
            "location": 1146,
            "return": [
                "str",
                "bytes",
                "Optional[List[str]]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "Trade.get_open_trades_without_assigned_fees": {
            "name": "get_open_trades_without_assigned_fees",
            "location": 1154,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "Trade.get_closed_trades_without_assigned_fees": {
            "name": "get_closed_trades_without_assigned_fees",
            "location": 1165,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "Trade.get_total_closed_profit": {
            "name": "get_total_closed_profit",
            "location": 1176,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "Trade.total_open_trades_stakes": {
            "name": "total_open_trades_stakes",
            "location": 1189,
            "return": [
                "bool",
                "str",
                "MutableMapping",
                "recidiviz.persistence.database.schema_entity_converter.base_schema_entity_converter.DstBaseType"
            ],
            "arguments": {}
        },
        "Trade.get_overall_performance": {
            "name": "get_overall_performance",
            "location": 1203,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "minutes": [
                    "None",
                    "int",
                    "datetime.datetime",
                    "Optional[datetime.tzinfo]",
                    "ddionrails.base.models.News",
                    "str"
                ]
            }
        },
        "Trade.get_enter_tag_performance": {
            "name": "get_enter_tag_performance",
            "location": 1234,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "pair": [
                    "Optional[str]",
                    "Match[str]",
                    "Optional[int]",
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "Trade.get_exit_reason_performance": {
            "name": "get_exit_reason_performance",
            "location": 1267,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "pair": [
                    "Optional[List[str]]",
                    "Match[str]",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "Trade.get_mix_tag_performance": {
            "name": "get_mix_tag_performance",
            "location": 1300,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "pair": [
                    "Optional[str]",
                    "Match[str]",
                    "str",
                    "Sequence[str]",
                    "logging.LogRecord"
                ]
            }
        },
        "Trade.get_best_pair": {
            "name": "get_best_pair",
            "location": 1351,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "start_date": [
                    "str",
                    "Optional[str]",
                    "datetime.datetime.datetime"
                ]
            }
        },
        "Trade.get_trading_volume": {
            "name": "get_trading_volume",
            "location": 1365,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "start_date": [
                    "str",
                    "float",
                    "Optional[int]",
                    "Optional[datetime.date]",
                    "Optional[Callable]",
                    "datetime"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/persistence/__init__.py": {},
    "freqtrade-develop/freqtrade/plot/plotting.py": {
        "init_plotscript": {
            "name": "init_plotscript",
            "location": 36,
            "return": [
                "Dict[Text,]",
                "bool",
                "int",
                "bytes",
                "Optional[float]"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]"
                ],
                "markets": [
                    "dict"
                ],
                "startup_candles": [
                    "int",
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        },
        "add_indicators": {
            "name": "add_indicators",
            "location": 94,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "fig": [
                    "Dict[str, Any]",
                    "bool",
                    "str"
                ],
                "row": [
                    "Dict[str, Any]",
                    "bool",
                    "str"
                ],
                "indicators": [
                    "Dict[str, Dict]",
                    "Dict[str, Any]",
                    "Dict[str, float]",
                    "dict",
                    "Mapping[str, Mapping[str, Any]]"
                ],
                "data": [
                    "dict",
                    "bool",
                    "List[int]",
                    "pandas.DataFrame",
                    "str",
                    "Optional[Dict]"
                ]
            }
        },
        "add_profit": {
            "name": "add_profit",
            "location": 141,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "fig": [
                    "str",
                    "Optional[List[str]]"
                ],
                "row": [
                    "str",
                    "Optional[List[str]]"
                ],
                "data": [
                    "str",
                    "Union[int, str, bool]",
                    "Optional[str]"
                ],
                "column": [
                    "str",
                    "Union[int, str, bool]",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "Union[int, str, bool]",
                    "Optional[str]"
                ]
            }
        },
        "add_max_drawdown": {
            "name": "add_max_drawdown",
            "location": 161,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "fig": [
                    "str",
                    "Dict[str, Any]",
                    "Iterable[Tuple[str, dict]]",
                    "int"
                ],
                "row": [
                    "str",
                    "Dict[str, Any]",
                    "Iterable[Tuple[str, dict]]",
                    "int"
                ],
                "trades": [
                    "float",
                    "int",
                    "Optional[Union[int, float]]",
                    "str"
                ],
                "df_comb": [
                    "int"
                ],
                "timeframe": [
                    "int"
                ],
                "starting_balance": [
                    "float",
                    "int",
                    "Optional[Union[int, float]]",
                    "str"
                ]
            }
        },
        "add_underwater": {
            "name": "add_underwater",
            "location": 195,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "fig": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "row": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "trades": [
                    "int",
                    "str",
                    "float"
                ],
                "starting_balance": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "add_parallelism": {
            "name": "add_parallelism",
            "location": 231,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "fig": [
                    "logging.Logger",
                    "int"
                ],
                "row": [
                    "logging.Logger",
                    "int"
                ],
                "trades": [
                    "Dict[str, Any]",
                    "Dict[int, dict]",
                    "Optional[List[str]]",
                    "str",
                    "dict"
                ],
                "timeframe": [
                    "Dict[str, Any]",
                    "Dict[int, dict]",
                    "Optional[List[str]]",
                    "str",
                    "dict"
                ]
            }
        },
        "plot_trades": {
            "name": "plot_trades",
            "location": 252,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fig": [
                    "str",
                    "bytes"
                ],
                "trades": [
                    "pandas.DataFrame",
                    "List[Dict[str, Any]]",
                    "Optional[float]"
                ]
            }
        },
        "create_plotconfig": {
            "name": "create_plotconfig",
            "location": 314,
            "return": [
                "Dict[Text,dict[Text,dict[Text,dict]]]",
                "str",
                "bool",
                "Dict[str,Any]",
                "Dict[str,str]",
                "Dict"
            ],
            "arguments": {
                "indicators1": [
                    "bool",
                    "Callable",
                    "str"
                ],
                "indicators2": [
                    "bool",
                    "Callable",
                    "str"
                ],
                "plot_config": [
                    "str"
                ]
            }
        },
        "plot_area": {
            "name": "plot_area",
            "location": 350,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fig": [
                    "Dict[str, Any]",
                    "Optional[int]",
                    "int"
                ],
                "row": [
                    "Dict[str, Any]",
                    "Optional[int]",
                    "int"
                ],
                "data": [
                    "int",
                    "str",
                    "bytearray"
                ],
                "indicator_a": [
                    "int",
                    "str"
                ],
                "indicator_b": [
                    "int"
                ],
                "label": [
                    "Text",
                    "int",
                    "T"
                ],
                "fill_color": [
                    "Text",
                    "int",
                    "T"
                ]
            }
        },
        "add_areas": {
            "name": "add_areas",
            "location": 378,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "fig": [],
                "row": [],
                "data": [
                    "Union[pandas.DataFrame, numpy.ndarray]",
                    "bytes",
                    "List[allennlp.data.Instance]",
                    "pandas.DataFrame"
                ],
                "indicators": [
                    "Dict[str, Any]",
                    "Dict[bytes, bytes]",
                    "Dict[str, Dict]",
                    "Dict[str, str]",
                    "pandas.Series",
                    "dict"
                ]
            }
        },
        "create_scatter": {
            "name": "create_scatter",
            "location": 409,
            "return": [
                "None",
                "Optional[bool]",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Mapping[str, str]",
                    "Optional[Mapping[str, Any]]",
                    "Optional[str]"
                ],
                "column_name": [
                    "str",
                    "Dict[str, str]",
                    "int"
                ],
                "color": [
                    "dict",
                    "List[allennlp.data.tokenizers.token.Token]",
                    "str"
                ],
                "direction": [
                    "dict",
                    "List[allennlp.data.tokenizers.token.Token]",
                    "str"
                ]
            }
        },
        "generate_candlestick_graph": {
            "name": "generate_candlestick_graph",
            "location": 438,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pair": [
                    "str",
                    "dict",
                    "bytes",
                    "Dict[str, str]"
                ],
                "data": [
                    "dict",
                    "int",
                    "bytes",
                    "Optional[int]",
                    "Exception",
                    "str"
                ],
                "trades": [
                    "None",
                    "pandas.DataFrame",
                    "bool",
                    "str",
                    "int",
                    "slice",
                    "Union[int,Tuple[int,int]]"
                ]
            }
        },
        "generate_profit_graph": {
            "name": "generate_profit_graph",
            "location": 527,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pairs": [
                    "bool",
                    "int",
                    "Set[Tuple[int, int]]"
                ],
                "data": [
                    "int",
                    "float"
                ],
                "trades": [
                    "bool",
                    "int",
                    "List[float]"
                ],
                "timeframe": [
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "str"
                ],
                "stake_currency": [
                    "bytes",
                    "int",
                    "bool",
                    "Optional[int]",
                    "Optional[bool]"
                ],
                "starting_balance": [
                    "Optional[bool]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "generate_plot_filename": {
            "name": "generate_plot_filename",
            "location": 592,
            "return": [
                "str",
                "pathlib.Path",
                "List[str]"
            ],
            "arguments": {
                "pair": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "timeframe": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "store_plot_file": {
            "name": "store_plot_file",
            "location": 604,
            "return": [
                "None"
            ],
            "arguments": {
                "fig": [
                    "bool",
                    "str"
                ],
                "filename": [
                    "str"
                ],
                "directory": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]",
                    "bool"
                ],
                "auto_open": [
                    "bool",
                    "str"
                ]
            }
        },
        "load_and_plot_trades": {
            "name": "load_and_plot_trades",
            "location": 621,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "plot_profit": {
            "name": "plot_profit",
            "location": 669,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "configuration.Configuration"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/plot/__init__.py": {},
    "freqtrade-develop/freqtrade/plugins/pairlistmanager.py": {
        "PairListManager.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange": [],
                "config": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "PairListManager.whitelist": {
            "name": "whitelist",
            "location": 50,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PairListManager.blacklist": {
            "name": "blacklist",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PairListManager.expanded_blacklist": {
            "name": "expanded_blacklist",
            "location": 63,
            "return": [
                "int",
                "str",
                "List[str]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "PairListManager.name_list": {
            "name": "name_list",
            "location": 68,
            "return": [
                "List",
                "List[str]",
                "bool",
                "Iterable[str]",
                "str",
                "List[Tuple[str,Any]]",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PairListManager.short_desc": {
            "name": "short_desc",
            "location": 72,
            "return": [
                "List[dict]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PairListManager._get_cached_tickers": {
            "name": "_get_cached_tickers",
            "location": 77,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PairListManager.refresh_pairlist": {
            "name": "refresh_pairlist",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PairListManager.verify_blacklist": {
            "name": "verify_blacklist",
            "location": 101,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "pairlist": [
                    "dict",
                    "List[str]",
                    "int"
                ],
                "logmethod": [
                    "logging.Logger",
                    "str",
                    "int",
                    "float",
                    "Callable"
                ]
            }
        },
        "PairListManager.verify_whitelist": {
            "name": "verify_whitelist",
            "location": 123,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "pairlist": [
                    "int",
                    "Set[int]",
                    "List[dict]"
                ],
                "logmethod": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "keep_invalid": [
                    "bool",
                    "int",
                    "Set[int]",
                    "List[dict]"
                ]
            }
        },
        "PairListManager.create_pair_list": {
            "name": "create_pair_list",
            "location": 142,
            "return": [
                "List[tuple[None]]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "pairs": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "timeframe": [
                    "None",
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/plugins/protectionmanager.py": {
        "ProtectionManager.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "protections": [
                    "str",
                    "list"
                ]
            }
        },
        "ProtectionManager.name_list": {
            "name": "name_list",
            "location": 36,
            "return": [
                "List",
                "List[str]",
                "bool",
                "Iterable[str]",
                "str",
                "List[Tuple[str,Any]]",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProtectionManager.short_desc": {
            "name": "short_desc",
            "location": 42,
            "return": [
                "List[dict]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProtectionManager.global_stop": {
            "name": "global_stop",
            "location": 48,
            "return": [
                "None",
                "bool",
                "Optional[Union[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "now": [
                    "None",
                    "int",
                    "str",
                    "Optional[str]",
                    "recidiviz.persistence.database.schema.state.schema.StateIncarcerationPeriod"
                ],
                "side": [
                    "Text",
                    "int",
                    "recidiviz.persistence.entity.state.entities.StateIncarcerationPeriod",
                    "annofabapi.models.Inspection",
                    "bool"
                ]
            }
        },
        "ProtectionManager.stop_per_pair": {
            "name": "stop_per_pair",
            "location": 62,
            "return": [
                "None",
                "bool",
                "Optional[Union[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "int",
                    "models.User",
                    "Sequence[str]"
                ],
                "now": [
                    "None",
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "side": [
                    "Text",
                    "Any",
                    "str",
                    "int",
                    "float",
                    "Union[int,slice]",
                    "models.User"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/plugins/__init__.py": {},
    "freqtrade-develop/freqtrade/plugins/pairlist/AgeFilter.py": {
        "AgeFilter.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange": [
                    "Dict[str, Any]",
                    "int"
                ],
                "pairlistmanager": [
                    "Dict[str, Any]",
                    "int"
                ],
                "config": [
                    "Dict[str, Any]",
                    "int"
                ],
                "pairlistconfig": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "pairlist_pos": [
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "AgeFilter.needstickers": {
            "name": "needstickers",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgeFilter.short_desc": {
            "name": "short_desc",
            "location": 58,
            "return": [
                "Text",
                "str",
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgeFilter.filter_pairlist": {
            "name": "filter_pairlist",
            "location": 70,
            "return": [
                "List",
                "str",
                "bool",
                "Tuple[int,int]",
                "pandas.DataFrame",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "pairlist": [
                    "str"
                ],
                "tickers": [
                    "logging.LogRecord",
                    "str",
                    "bool",
                    "list"
                ]
            }
        },
        "AgeFilter._validate_pair_loc": {
            "name": "_validate_pair_loc",
            "location": 100,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pair": [],
                "daily_candles": [
                    "int",
                    "List['cirq.Qid']",
                    "pandas.DataFrame",
                    "bool"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/plugins/pairlist/IPairList.py": {
        "IPairList.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange": [
                    "str",
                    "list",
                    "dict"
                ],
                "pairlistmanager": [
                    "str",
                    "list",
                    "dict"
                ],
                "config": [
                    "dict",
                    "int"
                ],
                "pairlistconfig": [
                    "str",
                    "list",
                    "dict"
                ],
                "pairlist_pos": [
                    "str",
                    "list",
                    "dict"
                ]
            }
        },
        "IPairList.name": {
            "name": "name",
            "location": 41,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "IPairList.needstickers": {
            "name": "needstickers",
            "location": 49,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IPairList.short_desc": {
            "name": "short_desc",
            "location": 57,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IPairList._validate_pair": {
            "name": "_validate_pair",
            "location": 63,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "ticker": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "IPairList.gen_pairlist": {
            "name": "gen_pairlist",
            "location": 76,
            "return": [
                "List[str]",
                "None"
            ],
            "arguments": {
                "self": [],
                "tickers": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "IPairList.filter_pairlist": {
            "name": "filter_pairlist",
            "location": 93,
            "return": [
                "float",
                "logging.LogRecord",
                "Callable[[None], bool]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "pairlist": [
                    "float",
                    "logging.LogRecord",
                    "Callable[[None], bool]",
                    "List[str]",
                    "int"
                ],
                "tickers": [
                    "float",
                    "logging.LogRecord",
                    "Callable[[None], bool]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "IPairList.verify_blacklist": {
            "name": "verify_blacklist",
            "location": 117,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "pairlist": [
                    "int",
                    "Callable",
                    "str"
                ],
                "logmethod": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "IPairList.verify_whitelist": {
            "name": "verify_whitelist",
            "location": 126,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "pairlist": [
                    "int",
                    "Callable",
                    "str"
                ],
                "logmethod": [
                    "int",
                    "Callable",
                    "str"
                ],
                "keep_invalid": [
                    "bool",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "IPairList._whitelist_for_active_markets": {
            "name": "_whitelist_for_active_markets",
            "location": 137,
            "return": [
                "List",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "pairlist": [
                    "str",
                    "bool",
                    "int",
                    "List[str]",
                    "Union[int, Tuple[int, int]]",
                    "Optional[int]"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/plugins/pairlist/OffsetFilter.py": {
        "OffsetFilter.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange": [
                    "Dict[str, Any]",
                    "int"
                ],
                "pairlistmanager": [
                    "Dict[str, Any]",
                    "int"
                ],
                "config": [
                    "Dict[str, Any]",
                    "int"
                ],
                "pairlistconfig": [
                    "Dict[str, Any]",
                    "int"
                ],
                "pairlist_pos": [
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "OffsetFilter.needstickers": {
            "name": "needstickers",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OffsetFilter.short_desc": {
            "name": "short_desc",
            "location": 36,
            "return": [
                "Text",
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OffsetFilter.filter_pairlist": {
            "name": "filter_pairlist",
            "location": 44,
            "return": [
                "float",
                "logging.LogRecord",
                "Callable[[None], bool]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "pairlist": [
                    "int",
                    "Set[str]",
                    "str",
                    "List[int]",
                    "bytes",
                    "Dict[str, Any]"
                ],
                "tickers": [
                    "logging.LogRecord",
                    "str",
                    "bool",
                    "list"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/plugins/pairlist/pairlist_helpers.py": {
        "expand_pairlist": {
            "name": "expand_pairlist",
            "location": 5,
            "return": [
                "List",
                "bool",
                "Optional[Union[str,Any]]"
            ],
            "arguments": {
                "wildcardpl": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "available_pairs": [
                    "float"
                ],
                "keep_invalid": [
                    "bool",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/plugins/pairlist/PerformanceFilter.py": {
        "PerformanceFilter.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange": [
                    "Dict[str, Any]",
                    "int"
                ],
                "pairlistmanager": [
                    "Dict[str, Any]",
                    "int"
                ],
                "config": [
                    "Dict[str, Any]",
                    "int"
                ],
                "pairlistconfig": [
                    "Dict[str, Any]",
                    "int"
                ],
                "pairlist_pos": [
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "PerformanceFilter.needstickers": {
            "name": "needstickers",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PerformanceFilter.short_desc": {
            "name": "short_desc",
            "location": 35,
            "return": [
                "Text",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PerformanceFilter.filter_pairlist": {
            "name": "filter_pairlist",
            "location": 41,
            "return": [
                "float",
                "logging.LogRecord",
                "Callable[[None], bool]",
                "pandas.DataFrame",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "pairlist": [
                    "float",
                    "logging.LogRecord",
                    "Callable[[None], bool]",
                    "pandas.DataFrame",
                    "List[str]",
                    "int"
                ],
                "tickers": [
                    "logging.LogRecord",
                    "str",
                    "bool",
                    "list"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/plugins/pairlist/PrecisionFilter.py": {
        "PrecisionFilter.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange": [
                    "Dict[str, Any]",
                    "int"
                ],
                "pairlistmanager": [
                    "Dict[str, Any]",
                    "int"
                ],
                "config": [
                    "Dict[str, Any]",
                    "int"
                ],
                "pairlistconfig": [
                    "Dict[str, Any]",
                    "int"
                ],
                "pairlist_pos": [
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "PrecisionFilter.needstickers": {
            "name": "needstickers",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrecisionFilter.short_desc": {
            "name": "short_desc",
            "location": 40,
            "return": [
                "Text",
                "str",
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrecisionFilter._validate_pair": {
            "name": "_validate_pair",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "int",
                    "Callable",
                    "str"
                ],
                "ticker": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/plugins/pairlist/PriceFilter.py": {
        "PriceFilter.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange": [
                    "Dict[str, Any]",
                    "int"
                ],
                "pairlistmanager": [
                    "Dict[str, Any]",
                    "int"
                ],
                "config": [
                    "Dict[str, Any]",
                    "int"
                ],
                "pairlistconfig": [
                    "Dict[str, Any]",
                    "int",
                    "dict"
                ],
                "pairlist_pos": [
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "PriceFilter.needstickers": {
            "name": "needstickers",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PriceFilter.short_desc": {
            "name": "short_desc",
            "location": 47,
            "return": [
                "Text",
                "str",
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "PriceFilter._validate_pair": {
            "name": "_validate_pair",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "logging.Logger",
                    "int"
                ],
                "ticker": [
                    "str",
                    "logging.LogRecord",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/plugins/pairlist/rangestabilityfilter.py": {
        "RangeStabilityFilter.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange": [
                    "Dict[str, Any]",
                    "int"
                ],
                "pairlistmanager": [
                    "Dict[str, Any]",
                    "int"
                ],
                "config": [
                    "Dict[str, Any]",
                    "int"
                ],
                "pairlistconfig": [
                    "dict",
                    "Dict[str, Any]",
                    "Sequence"
                ],
                "pairlist_pos": [
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "RangeStabilityFilter.needstickers": {
            "name": "needstickers",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeStabilityFilter.short_desc": {
            "name": "short_desc",
            "location": 52,
            "return": [
                "Text",
                "str",
                "Callable",
                "int",
                "Tuple[str,str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeStabilityFilter.filter_pairlist": {
            "name": "filter_pairlist",
            "location": 63,
            "return": [
                "float",
                "logging.LogRecord",
                "Callable[[None], bool]",
                "pandas.DataFrame",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "pairlist": [
                    "float",
                    "logging.LogRecord",
                    "Callable[[None], bool]",
                    "pandas.DataFrame",
                    "List[str]",
                    "int"
                ],
                "tickers": [
                    "logging.LogRecord",
                    "str",
                    "bool",
                    "list"
                ]
            }
        },
        "RangeStabilityFilter._validate_pair_loc": {
            "name": "_validate_pair_loc",
            "location": 91,
            "return": [
                "bool",
                "int",
                "Union[int,float,complex]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "daily_candles": [
                    "int",
                    "float",
                    "Iterable[Optional[Any]]",
                    "Optional[int]"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/plugins/pairlist/ShuffleFilter.py": {
        "ShuffleFilter.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange": [
                    "Dict[str, Any]",
                    "int"
                ],
                "pairlistmanager": [
                    "Dict[str, Any]",
                    "int"
                ],
                "config": [
                    "Dict[str, str]",
                    "Sequence[int]",
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ],
                "pairlistconfig": [
                    "Dict[str, Any]",
                    "int"
                ],
                "pairlist_pos": [
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "ShuffleFilter.needstickers": {
            "name": "needstickers",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShuffleFilter.short_desc": {
            "name": "short_desc",
            "location": 42,
            "return": [
                "Text",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShuffleFilter.filter_pairlist": {
            "name": "filter_pairlist",
            "location": 49,
            "return": [
                "float",
                "logging.LogRecord",
                "Callable[[None], bool]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "pairlist": [
                    "float",
                    "logging.LogRecord",
                    "Callable[[None], bool]",
                    "List[str]",
                    "int"
                ],
                "tickers": [
                    "logging.LogRecord",
                    "str",
                    "bool",
                    "list"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/plugins/pairlist/SpreadFilter.py": {
        "SpreadFilter.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange": [
                    "Dict[str, Any]",
                    "int"
                ],
                "pairlistmanager": [
                    "Dict[str, Any]",
                    "int"
                ],
                "config": [
                    "Dict[str, Any]",
                    "int"
                ],
                "pairlistconfig": [
                    "Dict[str, Any]",
                    "int"
                ],
                "pairlist_pos": [
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "SpreadFilter.needstickers": {
            "name": "needstickers",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpreadFilter.short_desc": {
            "name": "short_desc",
            "location": 39,
            "return": [
                "Text",
                "str",
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpreadFilter._validate_pair": {
            "name": "_validate_pair",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "int",
                    "str",
                    "float",
                    "logging.Logger"
                ],
                "ticker": [
                    "int",
                    "float",
                    "list",
                    "logging.LogRecord"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/plugins/pairlist/StaticPairList.py": {
        "StaticPairList.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange": [
                    "Dict[str, Any]",
                    "int"
                ],
                "pairlistmanager": [
                    "Dict[str, Any]",
                    "int"
                ],
                "config": [
                    "Dict[str, Any]",
                    "int"
                ],
                "pairlistconfig": [
                    "Dict[str, Any]",
                    "int"
                ],
                "pairlist_pos": [
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "StaticPairList.needstickers": {
            "name": "needstickers",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StaticPairList.short_desc": {
            "name": "short_desc",
            "location": 34,
            "return": [
                "Text",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StaticPairList.gen_pairlist": {
            "name": "gen_pairlist",
            "location": 41,
            "return": [
                "Optional[str]",
                "Dict[str, Any]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "tickers": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "StaticPairList.filter_pairlist": {
            "name": "filter_pairlist",
            "location": 55,
            "return": [
                "float",
                "logging.LogRecord",
                "Callable[[None], bool]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "pairlist": [
                    "float",
                    "logging.LogRecord",
                    "Callable[[None], bool]",
                    "List[str]",
                    "int"
                ],
                "tickers": [
                    "logging.LogRecord",
                    "str",
                    "bool",
                    "list"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/plugins/pairlist/VolatilityFilter.py": {
        "VolatilityFilter.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange": [
                    "Dict[str, Any]",
                    "int"
                ],
                "pairlistmanager": [
                    "Dict[str, Any]",
                    "int"
                ],
                "config": [
                    "Dict[str, Any]",
                    "int"
                ],
                "pairlistconfig": [
                    "dict",
                    "OrderedDict",
                    "Sequence",
                    "Dict[str, Any]"
                ],
                "pairlist_pos": [
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "VolatilityFilter.needstickers": {
            "name": "needstickers",
            "location": 49,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VolatilityFilter.short_desc": {
            "name": "short_desc",
            "location": 57,
            "return": [
                "Text",
                "str",
                "Set[str]",
                "Optional[str]",
                "Optional[Sequence[str]]",
                "Dict[str,Any]",
                "Dict",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VolatilityFilter.filter_pairlist": {
            "name": "filter_pairlist",
            "location": 65,
            "return": [
                "float",
                "logging.LogRecord",
                "Callable[[None], bool]",
                "pandas.DataFrame",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "pairlist": [
                    "float",
                    "logging.LogRecord",
                    "Callable[[None], bool]",
                    "pandas.DataFrame",
                    "List[str]",
                    "int"
                ],
                "tickers": [
                    "logging.LogRecord",
                    "str",
                    "bool",
                    "list"
                ]
            }
        },
        "VolatilityFilter._validate_pair_loc": {
            "name": "_validate_pair_loc",
            "location": 93,
            "return": [
                "bool",
                "int",
                "Union[int,float,complex]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ],
                "daily_candles": [
                    "bool",
                    "Optional[numpy.ndarray]"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/plugins/pairlist/VolumePairList.py": {
        "VolumePairList.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange": [
                    "Dict[str, Any]",
                    "int"
                ],
                "pairlistmanager": [
                    "Dict[str, Any]",
                    "int"
                ],
                "config": [
                    "Dict[str, Any]",
                    "int"
                ],
                "pairlistconfig": [
                    "Dict[str, Any]",
                    "int"
                ],
                "pairlist_pos": [
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "VolumePairList.needstickers": {
            "name": "needstickers",
            "location": 96,
            "return": [
                "bool",
                "int",
                "Set[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VolumePairList._validate_keys": {
            "name": "_validate_keys",
            "location": 104,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "VolumePairList.short_desc": {
            "name": "short_desc",
            "location": 107,
            "return": [
                "Text",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VolumePairList.gen_pairlist": {
            "name": "gen_pairlist",
            "location": 113,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "tickers": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "VolumePairList.filter_pairlist": {
            "name": "filter_pairlist",
            "location": 148,
            "return": [
                "float",
                "logging.LogRecord",
                "Callable[[None], bool]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "pairlist": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "dict"
                ],
                "tickers": [
                    "Dict[Hashable, Any]",
                    "dict",
                    "Mapping[Any, Any]"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/plugins/pairlist/__init__.py": {},
    "freqtrade-develop/freqtrade/plugins/protections/cooldown_period.py": {
        "CooldownPeriod._reason": {
            "name": "_reason",
            "location": 19,
            "return": [
                "Text",
                "str",
                "Optional[str]",
                "Optional[Union[str,Any]]",
                "bool",
                "Container[Taxon]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CooldownPeriod.short_desc": {
            "name": "short_desc",
            "location": 25,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "CooldownPeriod._cooldown_period": {
            "name": "_cooldown_period",
            "location": 31,
            "return": [
                "ProtectionReturn",
                "bool",
                "None",
                "List[List[str]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str"
                ],
                "date_now": [
                    "datetime.date",
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]",
                    "str",
                    "datetime.datetime"
                ]
            }
        },
        "CooldownPeriod.global_stop": {
            "name": "global_stop",
            "location": 58,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "date_now": [
                    "int",
                    "datetime.date",
                    "bytes",
                    "str",
                    "list"
                ],
                "side": [
                    "int",
                    "datetime.date",
                    "bytes",
                    "str",
                    "list"
                ]
            }
        },
        "CooldownPeriod.stop_per_pair": {
            "name": "stop_per_pair",
            "location": 68,
            "return": [
                "List[recidiviz.persistence.entity.state.entities.StateIncarcerationPeriod]",
                "str",
                "int",
                "dict",
                "float"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "int",
                    "List[datetime.date]",
                    "datetime.timedelta",
                    "bool"
                ],
                "date_now": [
                    "str",
                    "int",
                    "List[datetime.date]",
                    "datetime.timedelta",
                    "bool"
                ],
                "side": [
                    "bool",
                    "datetime.date",
                    "int"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/plugins/protections/iprotection.py": {
        "IProtection.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "protection_config": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "IProtection.name": {
            "name": "name",
            "location": 56,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "IProtection.stop_duration_str": {
            "name": "stop_duration_str",
            "location": 60,
            "return": [
                "Text",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IProtection.lookback_period_str": {
            "name": "lookback_period_str",
            "location": 72,
            "return": [
                "Text",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IProtection.short_desc": {
            "name": "short_desc",
            "location": 84,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IProtection.global_stop": {
            "name": "global_stop",
            "location": 91,
            "return": [
                "Optional[ProtectionReturn]",
                "None"
            ],
            "arguments": {
                "self": [],
                "date_now": [
                    "int",
                    "datetime.date",
                    "bytes",
                    "str",
                    "list"
                ],
                "side": [
                    "int",
                    "datetime.date",
                    "bytes",
                    "str",
                    "list"
                ]
            }
        },
        "IProtection.stop_per_pair": {
            "name": "stop_per_pair",
            "location": 98,
            "return": [
                "Optional[ProtectionReturn]",
                "None"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "bool",
                    "datetime.date",
                    "int"
                ],
                "date_now": [
                    "bool",
                    "datetime.date",
                    "int"
                ],
                "side": [
                    "bool",
                    "datetime.date",
                    "int"
                ]
            }
        },
        "IProtection.calculate_lock_end": {
            "name": "calculate_lock_end",
            "location": 108,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "trades": [
                    "int",
                    "Optional[str]",
                    "str"
                ],
                "stop_minutes": [
                    "str",
                    "int",
                    "datetime.timezone",
                    "float"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/plugins/protections/low_profit_pairs.py": {
        "LowProfitPairs.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ],
                "protection_config": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "LowProfitPairs.short_desc": {
            "name": "short_desc",
            "location": 26,
            "return": [
                "Text",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LowProfitPairs._reason": {
            "name": "_reason",
            "location": 33,
            "return": [
                "Text",
                "str",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "profit": [
                    "str",
                    "bool"
                ]
            }
        },
        "LowProfitPairs._low_profit": {
            "name": "_low_profit",
            "location": 40,
            "return": [
                "None",
                "Optional[str]",
                "ProtectionReturn",
                "bool",
                "Optional[float]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "date_now": [
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]",
                    "datetime.date",
                    "str",
                    "datetime.datetime"
                ],
                "pair": [
                    "str",
                    "Optional[datetime.datetime]"
                ],
                "side": [
                    "int",
                    "Optional[str]",
                    "list",
                    "Optional[freqtrade.arguments.TimeRange]",
                    "float"
                ]
            }
        },
        "LowProfitPairs.global_stop": {
            "name": "global_stop",
            "location": 78,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "date_now": [
                    "int",
                    "datetime.date",
                    "bytes",
                    "str",
                    "list"
                ],
                "side": [
                    "int",
                    "datetime.date",
                    "bytes",
                    "str",
                    "list"
                ]
            }
        },
        "LowProfitPairs.stop_per_pair": {
            "name": "stop_per_pair",
            "location": 87,
            "return": [
                "List[recidiviz.persistence.entity.state.entities.StateIncarcerationPeriod]",
                "datetime.datetime",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "datetime.date",
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]",
                    "str",
                    "datetime.datetime"
                ],
                "date_now": [
                    "datetime.date",
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]",
                    "str",
                    "datetime.datetime"
                ],
                "side": [
                    "datetime.date",
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]",
                    "str",
                    "datetime.datetime"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/plugins/protections/max_drawdown_protection.py": {
        "MaxDrawdown.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ],
                "protection_config": [
                    "dict"
                ]
            }
        },
        "MaxDrawdown.short_desc": {
            "name": "short_desc",
            "location": 29,
            "return": [
                "Text",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MaxDrawdown._reason": {
            "name": "_reason",
            "location": 36,
            "return": [
                "Text",
                "str",
                "List[str]",
                "Optional[str]",
                "Optional[int]",
                "Tuple[Tuple[int,...]]"
            ],
            "arguments": {
                "self": [],
                "drawdown": [
                    "int",
                    "float"
                ]
            }
        },
        "MaxDrawdown._max_drawdown": {
            "name": "_max_drawdown",
            "location": 43,
            "return": [
                "None",
                "ProtectionReturn",
                "bool",
                "Optional[str]",
                "Optional[bool]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "date_now": [
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]",
                    "datetime.date",
                    "str",
                    "datetime.datetime"
                ]
            }
        },
        "MaxDrawdown.global_stop": {
            "name": "global_stop",
            "location": 78,
            "return": [
                "List[recidiviz.persistence.entity.state.entities.StateIncarcerationPeriod]",
                "datetime.datetime",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "date_now": [
                    "int",
                    "Tuple[int, int]",
                    "Union[int, float]",
                    "float"
                ],
                "side": [
                    "int",
                    "datetime.date",
                    "bytes",
                    "str",
                    "list"
                ]
            }
        },
        "MaxDrawdown.stop_per_pair": {
            "name": "stop_per_pair",
            "location": 87,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "bool",
                    "datetime.date",
                    "int"
                ],
                "date_now": [
                    "bool",
                    "datetime.date",
                    "int"
                ],
                "side": [
                    "bool",
                    "datetime.date",
                    "int"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/plugins/protections/stoploss_guard.py": {
        "StoplossGuard.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ],
                "protection_config": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "StoplossGuard.short_desc": {
            "name": "short_desc",
            "location": 27,
            "return": [
                "Text",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoplossGuard._reason": {
            "name": "_reason",
            "location": 34,
            "return": [
                "Text",
                "str",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoplossGuard._stoploss_guard": {
            "name": "_stoploss_guard",
            "location": 41,
            "return": [
                "None",
                "Optional[str]",
                "ProtectionReturn",
                "bool",
                "Optional[float]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "date_now": [
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]",
                    "datetime.date",
                    "str",
                    "datetime.datetime"
                ],
                "pair": [
                    "str",
                    "int"
                ],
                "side": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "StoplossGuard.global_stop": {
            "name": "global_stop",
            "location": 71,
            "return": [
                "None",
                "Optional[str]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "date_now": [
                    "Optional[str]",
                    "Optional[datetime.datetime]",
                    "datetime",
                    "Optional[datetime.date]",
                    "Optional[Iterable[str]]",
                    "datetime.date",
                    "str"
                ],
                "side": [
                    "Optional[str]",
                    "Optional[datetime.datetime]",
                    "datetime",
                    "Optional[datetime.date]",
                    "Optional[Iterable[str]]",
                    "datetime.date",
                    "str"
                ]
            }
        },
        "StoplossGuard.stop_per_pair": {
            "name": "stop_per_pair",
            "location": 82,
            "return": [
                "List[recidiviz.persistence.entity.state.entities.StateIncarcerationPeriod]",
                "datetime.datetime",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "datetime.date",
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]",
                    "str",
                    "datetime.datetime"
                ],
                "date_now": [
                    "datetime.date",
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]",
                    "str",
                    "datetime.datetime"
                ],
                "side": [
                    "datetime.date",
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]",
                    "str",
                    "datetime.datetime"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/plugins/protections/__init__.py": {},
    "freqtrade-develop/freqtrade/resolvers/exchange_resolver.py": {
        "ExchangeResolver.load_exchange": {
            "name": "load_exchange",
            "location": 21,
            "return": [
                "Exchange",
                "str",
                "bool",
                "Optional[freqtrade.exchange.Exchange]"
            ],
            "arguments": {
                "exchange_name": [
                    "Dict[str, Any]",
                    "Sequence[str]",
                    "Optional[str]",
                    "Dict[str, str]",
                    "str",
                    "dict"
                ],
                "config": [
                    "bool",
                    "str",
                    "dict"
                ],
                "validate": [
                    "bool",
                    "str",
                    "Dict"
                ]
            }
        },
        "ExchangeResolver._load_exchange": {
            "name": "_load_exchange",
            "location": 43,
            "return": [
                "str",
                "bool",
                "Optional[freqtrade.exchange.Exchange]"
            ],
            "arguments": {
                "exchange_name": [
                    "str"
                ],
                "kwargs": []
            }
        }
    },
    "freqtrade-develop/freqtrade/resolvers/hyperopt_resolver.py": {
        "HyperOptLossResolver.load_hyperoptloss": {
            "name": "load_hyperoptloss",
            "location": 29,
            "return": [
                "str",
                "bool",
                "Optional[freqtrade.exchange.Exchange]"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/resolvers/iresolver.py": {
        "PathModifier.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "pathlib.Path",
                    "int",
                    "bool"
                ]
            }
        },
        "PathModifier.__enter__": {
            "name": "__enter__",
            "location": 23,
            "return": [
                "PathModifier",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathModifier.__exit__": {
            "name": "__exit__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "IResolver.build_search_paths": {
            "name": "build_search_paths",
            "location": 46,
            "return": [
                "List[int]",
                "pathlib.Path",
                "str"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "List[str]",
                    "Callable[[], None]",
                    "str",
                    "bool"
                ],
                "config": [
                    "dict",
                    "Optional[List[str]]",
                    "Optional[Iterable[str]]"
                ],
                "user_subdir": [
                    "None",
                    "Dict",
                    "Optional[List[str]]",
                    "Optional[Iterable[str]]"
                ],
                "extra_dirs": [
                    "List",
                    "Type[T]",
                    "List[dict]",
                    "str",
                    "bool",
                    "Tuple"
                ]
            }
        },
        "IResolver._get_valid_object": {
            "name": "_get_valid_object",
            "location": 63,
            "return": [
                "Generator[tuple]",
                "str",
                "Dict",
                "logging.Formatter",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Tuple[Type]"
                ],
                "module_path": [
                    "str",
                    "Callable[[str], str]",
                    "IO[Any]",
                    "pathlib.Path",
                    "Optional[str]"
                ],
                "object_name": [
                    "str",
                    "bool",
                    "Tuple[Type]"
                ],
                "enum_failed": [
                    "bool",
                    "str",
                    "List",
                    "Optional[str]"
                ]
            }
        },
        "IResolver._search_object": {
            "name": "_search_object",
            "location": 105,
            "return": [
                "Tuple",
                "Tuple[None]",
                "bool",
                "Optional[str]",
                "Optional[List[str]]",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[int]",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "directory": [
                    "str",
                    "pathlib.Path",
                    "dict"
                ]
            }
        },
        "IResolver._load_object": {
            "name": "_load_object",
            "location": 134,
            "return": [
                "None",
                "bool",
                "List[str]",
                "Optional[Literal[only_clustered,include_clustered]]",
                "Optional[str]",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[Iterable[str]]",
                    "List[str]",
                    "int",
                    "Optional[List[str]]"
                ],
                "paths": [
                    "str",
                    "Optional[str]",
                    "Optional[Callable]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "IResolver.load_object": {
            "name": "load_object",
            "location": 156,
            "return": [
                "bool",
                "Tuple[int, int]",
                "dict",
                "List[str]",
                "list",
                "str",
                "property"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Union[pathlib.Path, str]",
                    "dict",
                    "Dict[str, Any]"
                ],
                "object_name": [
                    "str",
                    "Optional[str]",
                    "Iterable[str]"
                ],
                "config": [
                    "str",
                    "bool",
                    "pathlib.Path"
                ]
            }
        },
        "IResolver.search_all_objects": {
            "name": "search_all_objects",
            "location": 185,
            "return": [
                "List[dict[Text,Union[Text,None]]]",
                "str",
                "bool",
                "Dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type[Any]",
                    "pathlib.Path"
                ],
                "directory": [
                    "pathlib.Path",
                    "str",
                    "werkzeug.exceptions.BadRequest",
                    "Dict[scripts.node_integration_tests.playbooks.test_config_base.NodeId, pathlib.Path]",
                    "werkzeug.exceptions.NotFound",
                    "Exception",
                    "dict"
                ],
                "enum_failed": [
                    "dict",
                    "Type[Any]",
                    "List[Tuple[str, str]]"
                ],
                "recursive": [
                    "bool",
                    "str",
                    "Dict"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/resolvers/pairlist_resolver.py": {
        "PairListResolver.load_pairlist": {
            "name": "load_pairlist",
            "location": 26,
            "return": [
                "Sequence[str]",
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "pairlist_name": [
                    "dict",
                    "int",
                    "str",
                    "Optional[Dict]"
                ],
                "exchange": [
                    "dict",
                    "int",
                    "str",
                    "Optional[Dict]"
                ],
                "pairlistmanager": [
                    "dict",
                    "int",
                    "str",
                    "Optional[Dict]"
                ],
                "config": [
                    "dict",
                    "int",
                    "str",
                    "Optional[Dict]"
                ],
                "pairlistconfig": [
                    "dict",
                    "int",
                    "str",
                    "Optional[Dict]"
                ],
                "pairlist_pos": [
                    "dict",
                    "int",
                    "str",
                    "Optional[Dict]"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/resolvers/protection_resolver.py": {
        "ProtectionResolver.load_protection": {
            "name": "load_protection",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "protection_name": [
                    "Optional[Dict[str, Any]]",
                    "dict",
                    "Optional[dict]",
                    "Optional[Dict]",
                    "Tuple[pathlib.Path, pathlib.Path]"
                ],
                "config": [
                    "Optional[Dict[str, Any]]",
                    "dict",
                    "Optional[dict]",
                    "Optional[Dict]",
                    "Tuple[pathlib.Path, pathlib.Path]"
                ],
                "protection_config": [
                    "Optional[Dict[str, Any]]",
                    "dict",
                    "Optional[dict]",
                    "Optional[Dict]",
                    "Tuple[pathlib.Path, pathlib.Path]"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/resolvers/strategy_resolver.py": {
        "warn_deprecated_setting": {
            "name": "warn_deprecated_setting",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "strategy": [
                    "Optional[Dict]"
                ],
                "old": [
                    "bool",
                    "dict",
                    "Callable"
                ],
                "new": [
                    "Dict[str, str]",
                    "str",
                    "dict"
                ],
                "error": [
                    "bool",
                    "Callable[[int],None]",
                    "str"
                ]
            }
        },
        "check_override": {
            "name": "check_override",
            "location": 282,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "object": [
                    "str",
                    "Optional[str]",
                    "Optional[dict]"
                ],
                "parentclass": [
                    "str",
                    "Optional[str]",
                    "Optional[dict]"
                ],
                "attribute": [
                    "str",
                    "Optional[str]",
                    "Optional[dict]"
                ]
            }
        },
        "StrategyResolver.load_strategy": {
            "name": "load_strategy",
            "location": 35,
            "return": [
                "str",
                "bool",
                "Optional[freqtrade.exchange.Exchange]"
            ],
            "arguments": {
                "config": [
                    "None",
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "StrategyResolver._override_attribute_helper": {
            "name": "_override_attribute_helper",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "strategy": [
                    "dict"
                ],
                "config": [],
                "attribute": [],
                "default": [
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "StrategyResolver._normalize_attributes": {
            "name": "_normalize_attributes",
            "location": 120,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "strategy": [
                    "list",
                    "Dict[str, float]"
                ]
            }
        },
        "StrategyResolver._strategy_sanity_validations": {
            "name": "_strategy_sanity_validations",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "strategy": [
                    "str",
                    "Exception"
                ]
            }
        },
        "StrategyResolver.validate_strategy": {
            "name": "validate_strategy",
            "location": 155,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "strategy": []
            }
        },
        "StrategyResolver._load_strategy": {
            "name": "_load_strategy",
            "location": 217,
            "return": [
                "str",
                "bool",
                "Optional[freqtrade.exchange.Exchange]"
            ],
            "arguments": {
                "strategy_name": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]"
                ],
                "config": [
                    "str",
                    "Optional[str]"
                ],
                "extra_dir": [
                    "None",
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "apistar.http.Path",
                    "pathlib.Path",
                    "List"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/resolvers/__init__.py": {},
    "freqtrade-develop/freqtrade/rpc/discord.py": {
        "Discord.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rpc": [
                    "dict",
                    "str",
                    "list"
                ],
                "config": [
                    "Dict[str, Any]",
                    "dict",
                    "bytes"
                ]
            }
        },
        "Discord.cleanup": {
            "name": "cleanup",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Discord.send_msg": {
            "name": "send_msg",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "dict",
                    "Mapping[str, Any]",
                    "str"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/rpc/fiat_convert.py": {
        "CryptoToFiatConverter.__new__": {
            "name": "__new__",
            "location": 41,
            "return": [
                "dict",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool"
                ]
            }
        },
        "CryptoToFiatConverter.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CryptoToFiatConverter._load_cryptomap": {
            "name": "_load_cryptomap",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CryptoToFiatConverter._get_gekko_id": {
            "name": "_get_gekko_id",
            "location": 80,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[Dict[str,Any]]",
                "Optional[int]",
                "Optional[Sequence[str]]"
            ],
            "arguments": {
                "self": [],
                "crypto_symbol": [
                    "str"
                ]
            }
        },
        "CryptoToFiatConverter.convert_amount": {
            "name": "convert_amount",
            "location": 102,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "crypto_amount": [
                    "Tuple[int]",
                    "int"
                ],
                "crypto_symbol": [
                    "str",
                    "Optional[str]"
                ],
                "fiat_symbol": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "CryptoToFiatConverter.get_price": {
            "name": "get_price",
            "location": 115,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "crypto_symbol": [
                    "str",
                    "Sequence[str]"
                ],
                "fiat_symbol": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "CryptoToFiatConverter._is_supported_fiat": {
            "name": "_is_supported_fiat",
            "location": 152,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "fiat": [
                    "str",
                    "float"
                ]
            }
        },
        "CryptoToFiatConverter._find_price": {
            "name": "_find_price",
            "location": 161,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "crypto_symbol": [
                    "str",
                    "Optional[Collection[str]]",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "fiat_symbol": [
                    "str",
                    "bool",
                    "Callable",
                    "Optional[str]",
                    "bytes"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/rpc/rpc.py": {
        "RPCException.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "RPCException.__str__": {
            "name": "__str__",
            "location": 50,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPCException.__json__": {
            "name": "__json__",
            "location": 53,
            "return": [
                "Dict[Text,]",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPCHandler.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rpc": [
                    "metrics.Metric",
                    "dict",
                    "str",
                    "list"
                ],
                "config": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "RPCHandler.name": {
            "name": "name",
            "location": 72,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPCHandler.cleanup": {
            "name": "cleanup",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPCHandler.send_msg": {
            "name": "send_msg",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "Dict[str, str]",
                    "Sequence",
                    "bool"
                ]
            }
        },
        "RPC.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "freqtrade": [
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, Dict]"
                ]
            }
        },
        "RPC._rpc_show_config": {
            "name": "_rpc_show_config",
            "location": 104,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "int"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "MutableMapping[str, Any]",
                    "Dict[str, Any]"
                ],
                "botstate": [
                    "dict",
                    "MutableMapping[str, Any]",
                    "Dict[str, Any]"
                ],
                "strategy_version": [
                    "None",
                    "Dict",
                    "MutableMapping[str,Any]",
                    "Dict[str,Any]"
                ]
            }
        },
        "RPC._rpc_trade_status": {
            "name": "_rpc_trade_status",
            "location": 153,
            "return": [
                "bool",
                "pandas.Series",
                "zerver.models.Realm",
                "Tuple[int, Dict[str, Any]]",
                "List[object]",
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "trade_ids": [
                    "List",
                    "str",
                    "List[str]",
                    "int",
                    "pandas.DataFrame",
                    "float"
                ]
            }
        },
        "RPC._rpc_status_table": {
            "name": "_rpc_status_table",
            "location": 226,
            "return": [
                "Tuple[Union[list[list[Text]],list[Text]]]",
                "str",
                "List[Dict]",
                "List[str]",
                "List[int]",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "stake_currency": [
                    "str",
                    "numpy.ndarray",
                    "List[int]",
                    "Tuple[str, int]",
                    "float"
                ],
                "fiat_display_currency": [
                    "str",
                    "numpy.ndarray",
                    "List[int]",
                    "Tuple[str, int]",
                    "float"
                ]
            }
        },
        "RPC._rpc_timeunit_profit": {
            "name": "_rpc_timeunit_profit",
            "location": 287,
            "return": [
                "Dict[Text,list[dict[Text,Union[Text,int]]]]",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "timescale": [
                    "int",
                    "List[int]",
                    "str",
                    "List[float]"
                ],
                "stake_currency": [
                    "Match",
                    "Iterable[zam_repondeur.models.Amendement]",
                    "str"
                ],
                "fiat_display_currency": [
                    "Match",
                    "Iterable[zam_repondeur.models.Amendement]",
                    "str"
                ],
                "timeunit": [
                    "Text",
                    "Match",
                    "Iterable[zam_repondeur.models.Amendement]",
                    "str"
                ]
            }
        },
        "RPC._rpc_trade_history": {
            "name": "_rpc_trade_history",
            "location": 353,
            "return": [
                "Dict[Text,Union[list,int]]",
                "str",
                "List[int]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "bool",
                    "str",
                    "Iterable[List[Any]]",
                    "Optional[str]"
                ],
                "offset": [
                    "int",
                    "Dict[str,Any]",
                    "Tuple",
                    "Callable",
                    "Union[str,int]",
                    "float",
                    "bytes"
                ],
                "order_by_id": [
                    "bool",
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "RPC._rpc_stats": {
            "name": "_rpc_stats",
            "location": 372,
            "return": [
                "Dict[Text,Union[dict[,dict[Text,int]],dict[Text,Union[float,None]]]]",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPC._rpc_trade_statistics": {
            "name": "_rpc_trade_statistics",
            "location": 405,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "stake_currency": [
                    "pandas.DataFrame",
                    "bool",
                    "float",
                    "str"
                ],
                "fiat_display_currency": [
                    "pandas.DataFrame",
                    "bool",
                    "float",
                    "str"
                ],
                "start_date": [
                    "int",
                    "django.utils.timezone.datetime",
                    "datetime.datetime",
                    "float"
                ]
            }
        },
        "RPC._rpc_balance": {
            "name": "_rpc_balance",
            "location": 540,
            "return": [
                "Dict[Text,Union[list[dict[Text,Union[int,float,Text]]],float,int,Text]]",
                "bool",
                "Dict[str,int]",
                "esm.models.service_type.ServiceType"
            ],
            "arguments": {
                "self": [],
                "stake_currency": [
                    "int",
                    "Optional[datetime.datetime]",
                    "str",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "fiat_display_currency": [
                    "str",
                    "int"
                ]
            }
        },
        "RPC._rpc_start": {
            "name": "_rpc_start",
            "location": 631,
            "return": [
                "Dict[Text,Text]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPC._rpc_stop": {
            "name": "_rpc_stop",
            "location": 639,
            "return": [
                "Dict[Text,Text]",
                "str",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]",
                "zerver.models.Realm",
                "salon.models.Stylist",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPC._rpc_reload_config": {
            "name": "_rpc_reload_config",
            "location": 647,
            "return": [
                "Dict[Text,Text]",
                "Dict[str,Dict[str,Any]]",
                "Dict",
                "Optional[int]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPC._rpc_stopbuy": {
            "name": "_rpc_stopbuy",
            "location": 652,
            "return": [
                "Dict[Text,Text]",
                "int",
                "List[str]",
                "Dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPC._rpc_force_exit": {
            "name": "_rpc_force_exit",
            "location": 662,
            "return": [
                "bool",
                "Dict[Text,Text]"
            ],
            "arguments": {
                "self": [],
                "trade_id": [
                    "str",
                    "Optional[bool]",
                    "int"
                ],
                "ordertype": [
                    "None",
                    "int",
                    "str",
                    "Optional[float]",
                    "List",
                    "bytes"
                ]
            }
        },
        "RPC._rpc_force_entry": {
            "name": "_rpc_force_entry",
            "location": 718,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray",
                    "str",
                    "Optional[float]",
                    "bool"
                ],
                "price": [
                    "str",
                    "int",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "RPC._rpc_delete": {
            "name": "_rpc_delete",
            "location": 771,
            "return": [
                "Dict[Text,Union[Text,int]]",
                "str",
                "zerver.models.Recipient",
                "Optional[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]"
            ],
            "arguments": {
                "self": [],
                "trade_id": [
                    "str",
                    "int"
                ]
            }
        },
        "RPC._rpc_performance": {
            "name": "_rpc_performance",
            "location": 810,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPC._rpc_enter_tag_performance": {
            "name": "_rpc_enter_tag_performance",
            "location": 819,
            "return": [
                "List[str]",
                "str",
                "Set[str]",
                "MutableMapping[str, int]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "int",
                    "pandas.DataFrame"
                ]
            }
        },
        "RPC._rpc_exit_reason_performance": {
            "name": "_rpc_exit_reason_performance",
            "location": 826,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]",
                "allennlp.models.Model"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "RPC._rpc_mix_tag_performance": {
            "name": "_rpc_mix_tag_performance",
            "location": 833,
            "return": [
                "str",
                "Tuple[str]",
                "Set[str]",
                "dict",
                "List[cmk.gui.plugins.views.utils.Cell]",
                "List[cmk.gui.plugins.views.utils.JoinCell]",
                "Dict[str, Any]",
                "Callable[[str], str]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "BaseException",
                    "bool"
                ]
            }
        },
        "RPC._rpc_count": {
            "name": "_rpc_count",
            "location": 842,
            "return": [
                "Dict[Text,int]",
                "int",
                "Callable",
                "bytes",
                "x509_pki.models.Certificate",
                "Iterable"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPC._rpc_locks": {
            "name": "_rpc_locks",
            "location": 855,
            "return": [
                "Dict[Text,Union[int,list]]",
                "str",
                "numpy.ndarray",
                "Dict",
                "esm.models.service_type.ServiceType",
                "Dict[str,int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPC._rpc_delete_lock": {
            "name": "_rpc_delete_lock",
            "location": 864,
            "return": [
                "str",
                "bool",
                "Optional[freqtrade.exchange.Exchange]",
                "pandas._FilePathOrBuffer"
            ],
            "arguments": {
                "self": [],
                "lockid": [
                    "None",
                    "str",
                    "zerver.models.Realm",
                    "transfer.models.Scope",
                    "daylighdb.models.Photo",
                    "app.models.GameMember",
                    "app.models.course.Course"
                ],
                "pair": [
                    "None",
                    "Optional[str]",
                    "str",
                    "TextIO",
                    "gardnr.models.Grow",
                    "Sequence[services.seating.models.seaSeat]",
                    "Dict"
                ]
            }
        },
        "RPC._rpc_whitelist": {
            "name": "_rpc_whitelist",
            "location": 882,
            "return": [
                "Dict[Text,int]",
                "List[int]",
                "numpy.ndarray",
                "Iterable[str]",
                "Iterable[T]",
                "multinedb.models.workspace.Workspace",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPC._rpc_blacklist_delete": {
            "name": "_rpc_blacklist_delete",
            "location": 890,
            "return": [
                "Dict[str, Any]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "delete": [
                    "bool",
                    "str",
                    "List[str]",
                    "Optional[int]",
                    "int",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "RPC._rpc_blacklist": {
            "name": "_rpc_blacklist",
            "location": 904,
            "return": [
                "Dict[Text,Union[int,dict[,dict[Text,Text]]]]",
                "List[int]",
                "numpy.ndarray",
                "Iterable[str]",
                "Iterable[T]",
                "multinedb.models.workspace.Workspace",
                "int"
            ],
            "arguments": {
                "self": [],
                "add": [
                    "str",
                    "List[str]",
                    "Set[T]",
                    "dep_check.models.ModuleWildcard",
                    "list"
                ]
            }
        },
        "RPC._rpc_get_logs": {
            "name": "_rpc_get_logs",
            "location": 930,
            "return": [
                "Dict[Text,Union[int,list[list]]]",
                "Dict",
                "int",
                "Dict[str,str]",
                "Mapping[int,str]",
                "List[str]"
            ],
            "arguments": {
                "limit": [
                    "Optional[int]",
                    "str",
                    "Exception",
                    "bytes",
                    "Callable"
                ]
            }
        },
        "RPC._rpc_edge": {
            "name": "_rpc_edge",
            "location": 948,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPC._convert_dataframe_to_dict": {
            "name": "_convert_dataframe_to_dict",
            "location": 955,
            "return": [
                "Dict[Text,Union[list,int,Text]]",
                "List[str]",
                "Tuple[Sequence]",
                "Dict[str,Any]",
                "Dict[str,int]",
                "Mapping[str,object]",
                "str"
            ],
            "arguments": {
                "strategy": [
                    "int",
                    "str",
                    "Union[numpy.dtype, numpy.ndarray]",
                    "float",
                    "numpy.ndarray"
                ],
                "pair": [
                    "int",
                    "str",
                    "Union[numpy.dtype, numpy.ndarray]",
                    "float",
                    "numpy.ndarray"
                ],
                "timeframe": [
                    "int",
                    "str",
                    "Union[numpy.dtype, numpy.ndarray]",
                    "float",
                    "numpy.ndarray"
                ],
                "dataframe": [
                    "int",
                    "numpy.ndarray",
                    "pandas.DataFrame",
                    "List[str]",
                    "Dict[int, Set[int]]",
                    "bool",
                    "Iterable[\"Entity\"]"
                ],
                "last_analyzed": [
                    "int",
                    "str",
                    "Union[numpy.dtype, numpy.ndarray]",
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "RPC._rpc_analysed_dataframe": {
            "name": "_rpc_analysed_dataframe",
            "location": 1014,
            "return": [
                "str",
                "salon.models.Stylist",
                "dict"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str"
                ],
                "timeframe": [
                    "str"
                ],
                "limit": [
                    "str",
                    "int",
                    "datetime.date"
                ]
            }
        },
        "RPC._rpc_analysed_history_full": {
            "name": "_rpc_analysed_history_full",
            "location": 1026,
            "return": [
                "str",
                "zerver.models.Realm",
                "core.models.GroupingKey"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "pair": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "timeframe": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "timerange": [
                    "configuration.Configuration",
                    "dict"
                ],
                "exchange": [
                    "dict"
                ]
            }
        },
        "RPC._rpc_plot_config": {
            "name": "_rpc_plot_config",
            "location": 1050,
            "return": [
                "str",
                "dict",
                "IO[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPC._rpc_sysinfo": {
            "name": "_rpc_sysinfo",
            "location": 1057,
            "return": [
                "Dict[Text,]",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "RPC._health": {
            "name": "_health",
            "location": 1063,
            "return": [
                "Dict[Text,Union[str,int]]",
                "pandas.DataFrame",
                "Iterable[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPC._rpc_timeunit_profit.time_offset": {
            "name": "time_offset",
            "location": 301,
            "return": [
                "int",
                "float",
                "datetime.datetime",
                "str"
            ],
            "arguments": {
                "step": [
                    "str",
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "RPC._rpc_stats.trade_win_loss": {
            "name": "trade_win_loss",
            "location": 376,
            "return": [
                "Text",
                "int",
                "str"
            ],
            "arguments": {
                "trade": [
                    "int",
                    "str"
                ]
            }
        },
        "RPC._rpc_force_exit._exec_force_exit": {
            "name": "_exec_force_exit",
            "location": 667,
            "return": [
                "None"
            ],
            "arguments": {
                "trade": [
                    "zerver.models.Realm",
                    "Dict[str, AsyncGenerator]"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/rpc/rpc_manager.py": {
        "RPCManager.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "freqtrade": [
                    "Sequence['cirq.Qid']",
                    "int"
                ]
            }
        },
        "RPCManager.cleanup": {
            "name": "cleanup",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPCManager.send_msg": {
            "name": "send_msg",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        },
        "RPCManager.startup_messages": {
            "name": "startup_messages",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "pairlist": [
                    "dict",
                    "str",
                    "logging.LogRecord"
                ],
                "protections": [
                    "dict",
                    "List[str]",
                    "Callable",
                    "Callable[[], None]",
                    "list"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/rpc/telegram.py": {
        "authorized_only": {
            "name": "authorized_only",
            "location": 50,
            "return": [],
            "arguments": {
                "command_handler": []
            }
        },
        "authorized_only.wrapper": {
            "name": "wrapper",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Telegram.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "rpc": [],
                "config": []
            }
        },
        "Telegram._init_keyboard": {
            "name": "_init_keyboard",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Telegram._init": {
            "name": "_init",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Telegram.cleanup": {
            "name": "cleanup",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Telegram._exchange_from_msg": {
            "name": "_exchange_from_msg",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "Telegram._format_entry_msg": {
            "name": "_format_entry_msg",
            "location": 246,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "Telegram._format_exit_msg": {
            "name": "_format_exit_msg",
            "location": 281,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "Telegram.compose_message": {
            "name": "compose_message",
            "location": 328,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [],
                "msg_type": []
            }
        },
        "Telegram.send_msg": {
            "name": "send_msg",
            "location": 366,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "Telegram._get_sell_emoji": {
            "name": "_get_sell_emoji",
            "location": 394,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "Telegram._prepare_entry_details": {
            "name": "_prepare_entry_details",
            "location": 408,
            "return": [],
            "arguments": {
                "self": [],
                "filled_orders": [],
                "quote_currency": [],
                "is_open": []
            }
        },
        "Telegram._status": {
            "name": "_status",
            "location": 458,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._status_table": {
            "name": "_status_table",
            "location": 544,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._timeunit_stats": {
            "name": "_timeunit_stats",
            "location": 585,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": [],
                "unit": []
            }
        },
        "Telegram._daily": {
            "name": "_daily",
            "location": 639,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._weekly": {
            "name": "_weekly",
            "location": 650,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._monthly": {
            "name": "_monthly",
            "location": 661,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._profit": {
            "name": "_profit",
            "location": 672,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._stats": {
            "name": "_stats",
            "location": 749,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._balance": {
            "name": "_balance",
            "location": 798,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._start": {
            "name": "_start",
            "location": 875,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._stop": {
            "name": "_stop",
            "location": 887,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._reload_config": {
            "name": "_reload_config",
            "location": 899,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._stopbuy": {
            "name": "_stopbuy",
            "location": 911,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._force_exit": {
            "name": "_force_exit",
            "location": 923,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._force_exit_action": {
            "name": "_force_exit_action",
            "location": 956,
            "return": [],
            "arguments": {
                "self": [],
                "trade_id": []
            }
        },
        "Telegram._force_exit_inline": {
            "name": "_force_exit_inline",
            "location": 963,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "_": []
            }
        },
        "Telegram._force_enter_action": {
            "name": "_force_enter_action",
            "location": 978,
            "return": [],
            "arguments": {
                "self": [],
                "pair": [],
                "price": [],
                "order_side": []
            }
        },
        "Telegram._force_enter_inline": {
            "name": "_force_enter_inline",
            "location": 985,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "_": []
            }
        },
        "Telegram._layout_inline_keyboard": {
            "name": "_layout_inline_keyboard",
            "location": 996,
            "return": [],
            "arguments": {
                "buttons": [],
                "cols": []
            }
        },
        "Telegram._layout_inline_keyboard_onecol": {
            "name": "_layout_inline_keyboard_onecol",
            "location": 1001,
            "return": [],
            "arguments": {
                "buttons": [],
                "cols": []
            }
        },
        "Telegram._force_enter": {
            "name": "_force_enter",
            "location": 1006,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": [],
                "order_side": []
            }
        },
        "Telegram._trades": {
            "name": "_trades",
            "location": 1033,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._delete_trade": {
            "name": "_delete_trade",
            "location": 1068,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._performance": {
            "name": "_performance",
            "location": 1090,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._enter_tag_performance": {
            "name": "_enter_tag_performance",
            "location": 1121,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._exit_reason_performance": {
            "name": "_exit_reason_performance",
            "location": 1156,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._mix_tag_performance": {
            "name": "_mix_tag_performance",
            "location": 1191,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._count": {
            "name": "_count",
            "location": 1226,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._locks": {
            "name": "_locks",
            "location": 1248,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._delete_locks": {
            "name": "_delete_locks",
            "location": 1270,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._whitelist": {
            "name": "_whitelist",
            "location": 1288,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._blacklist": {
            "name": "_blacklist",
            "location": 1305,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram.send_blacklist_msg": {
            "name": "send_blacklist_msg",
            "location": 1312,
            "return": [],
            "arguments": {
                "self": [],
                "blacklist": []
            }
        },
        "Telegram._blacklist_delete": {
            "name": "_blacklist_delete",
            "location": 1326,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._logs": {
            "name": "_logs",
            "location": 1334,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._edge": {
            "name": "_edge",
            "location": 1366,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._help": {
            "name": "_help",
            "location": 1388,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._health": {
            "name": "_health",
            "location": 1460,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._version": {
            "name": "_version",
            "location": 1473,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._show_config": {
            "name": "_show_config",
            "location": 1489,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._update_msg": {
            "name": "_update_msg",
            "location": 1534,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "msg": [],
                "callback_path": [],
                "reload_able": [],
                "parse_mode": []
            }
        },
        "Telegram._send_msg": {
            "name": "_send_msg",
            "location": 1564,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [],
                "parse_mode": [],
                "disable_notification": [],
                "keyboard": [],
                "callback_path": [],
                "reload_able": [],
                "query": []
            }
        }
    },
    "freqtrade-develop/freqtrade/rpc/webhook.py": {
        "Webhook.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rpc": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ],
                "config": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "Webhook.cleanup": {
            "name": "cleanup",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Webhook.send_msg": {
            "name": "send_msg",
            "location": 43,
            "return": [
                "None",
                "Union[tuple,list]",
                "Dict[str,Any]",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "Webhook._send_msg": {
            "name": "_send_msg",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "dict",
                    "Dict[str, Any]",
                    "int",
                    "OrderedDict",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/rpc/__init__.py": {},
    "freqtrade-develop/freqtrade/rpc/api_server/api_auth.py": {
        "verify_auth": {
            "name": "verify_auth",
            "location": 18,
            "return": [
                "int",
                "dict",
                "bool",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "api_config": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "username": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "password": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "get_user_from_token": {
            "name": "get_user_from_token",
            "location": 28,
            "return": [
                "None",
                "str",
                "int",
                "List",
                "Dict[str,Any]"
            ],
            "arguments": {
                "token": [
                    "str",
                    "Union[List, str]"
                ],
                "secret_key": [
                    "str",
                    "Union[List, str]"
                ],
                "token_type": [
                    "Text",
                    "str",
                    "apistar.http.QueryParams"
                ]
            }
        },
        "create_token": {
            "name": "create_token",
            "location": 47,
            "return": [
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Dict[str, str]"
                ],
                "secret_key": [
                    "str",
                    "Union[int, str]"
                ],
                "token_type": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "Dict",
                    "Dict[str,Any]",
                    "Optional[dict]"
                ]
            }
        },
        "http_basic_or_jwt_token": {
            "name": "http_basic_or_jwt_token",
            "location": 64,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "form_data": [
                    "Optional[Exception]",
                    "Depends"
                ],
                "token": [
                    "Depends",
                    "Dict",
                    "bool",
                    "Dict[str,Any]"
                ],
                "api_config": [
                    "Depends",
                    "Dict",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "token_login": {
            "name": "token_login",
            "location": 79,
            "return": [
                "Dict[Text,]",
                "Optional[Dict]",
                "bool",
                "Dict",
                "str",
                "Dict[str,str]"
            ],
            "arguments": {
                "form_data": [
                    "Callable",
                    "Depends"
                ],
                "api_config": [
                    "Depends",
                    "Optional[Exception]",
                    "bool"
                ]
            }
        },
        "token_refresh": {
            "name": "token_refresh",
            "location": 99,
            "return": [
                "Dict[Text,]",
                "str",
                "Optional[Dict]",
                "bool",
                "Dict[str,str]"
            ],
            "arguments": {
                "token": [
                    "Depends",
                    "Callable",
                    "Dict",
                    "TextIO"
                ],
                "api_config": [
                    "Depends",
                    "str",
                    "Dict"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/rpc/api_server/api_backtest.py": {
        "api_get_backtest": {
            "name": "api_get_backtest",
            "location": 132,
            "return": [
                "Dict[Text,Union[Text,bool]]",
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "ws_mode": [
                    "Depends",
                    "Type",
                    "bool",
                    "Callable",
                    "Optional[type]"
                ]
            }
        },
        "api_delete_backtest": {
            "name": "api_delete_backtest",
            "location": 168,
            "return": [
                "Dict[Text,Union[Text,bool]]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "ws_mode": [
                    "Depends",
                    "str",
                    "bool",
                    "Iterable",
                    "asyncio.AbstractEventLoop",
                    "Optional[bool]",
                    "List[str]",
                    "Optional[Any]",
                    "Optional[int]"
                ]
            }
        },
        "api_backtest_abort": {
            "name": "api_backtest_abort",
            "location": 195,
            "return": [
                "bool",
                "Dict[Text,Union[Text,bool]]"
            ],
            "arguments": {
                "ws_mode": [
                    "Depends",
                    "int",
                    "bool",
                    "bytes"
                ]
            }
        },
        "api_backtest_history": {
            "name": "api_backtest_history",
            "location": 215,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "config": [
                    "Depends",
                    "bool",
                    "Dict[str,Any]",
                    "int",
                    "str",
                    "Dict"
                ],
                "ws_mode": [
                    "Depends",
                    "bool",
                    "str",
                    "Dict[str,str]",
                    "List[str]",
                    "Sequence[str]",
                    "Iterable[str]"
                ]
            }
        },
        "api_backtest_history_result": {
            "name": "api_backtest_history_result",
            "location": 221,
            "return": [
                "Dict[Text,Union[Text,bool,dict[Text,Union[dict,list]]]]",
                "int",
                "Dict[str,Any]",
                "T"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Dict[str, str]"
                ],
                "strategy": [
                    "str",
                    "asyncio.AbstractEventLoop",
                    "Callable",
                    "int"
                ],
                "config": [
                    "Depends",
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "Dict[str,str]"
                ],
                "ws_mode": [
                    "Depends",
                    "bool",
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "List[sideeye.data.Experiment]",
                    "List[str]"
                ]
            }
        },
        "api_start_backtest.run_backtest": {
            "name": "run_backtest",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "freqtrade-develop/freqtrade/rpc/api_server/api_schemas.py": {},
    "freqtrade-develop/freqtrade/rpc/api_server/api_v1.py": {
        "ping": {
            "name": "ping",
            "location": 49,
            "return": [
                "Dict[Text,Text]",
                "str",
                "List[Dict[str,Any]]",
                "Dict",
                "Optional[List[str]]"
            ],
            "arguments": {}
        },
        "version": {
            "name": "version",
            "location": 55,
            "return": [
                "Dict[Text,]",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "balance": {
            "name": "balance",
            "location": 61,
            "return": [
                "dict",
                "Mapping[str, str]"
            ],
            "arguments": {
                "rpc": [
                    "Depends",
                    "Dict",
                    "Dict[str,Any]"
                ],
                "config": [
                    "Depends",
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "count": {
            "name": "count",
            "location": 67,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rpc": [
                    "Depends",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "performance": {
            "name": "performance",
            "location": 72,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rpc": [
                    "Depends",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "profit": {
            "name": "profit",
            "location": 77,
            "return": [
                "bytes",
                "int",
                "Callable",
                "str",
                "bool"
            ],
            "arguments": {
                "rpc": [
                    "Dict",
                    "Depends"
                ],
                "config": [
                    "Dict",
                    "Depends"
                ]
            }
        },
        "stats": {
            "name": "stats",
            "location": 84,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rpc": [
                    "Depends",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "daily": {
            "name": "daily",
            "location": 89,
            "return": [
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "timescale": [
                    "Dict",
                    "int"
                ],
                "rpc": [
                    "Dict",
                    "Depends"
                ],
                "config": [
                    "Dict",
                    "Depends"
                ]
            }
        },
        "status": {
            "name": "status",
            "location": 95,
            "return": [
                "List",
                "Iterable[int]",
                "IO[str]",
                "str"
            ],
            "arguments": {
                "rpc": [
                    "Depends",
                    "int",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "trades": {
            "name": "trades",
            "location": 105,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "limit": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Callable"
                ],
                "offset": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Callable"
                ],
                "rpc": [
                    "Depends",
                    "str",
                    "Optional[int]",
                    "Callable"
                ]
            }
        },
        "trade": {
            "name": "trade",
            "location": 110,
            "return": [
                "dict",
                "List[str]",
                "int",
                "pathlib.Path"
            ],
            "arguments": {
                "tradeid": [
                    "int",
                    "Dict[str,Dict[str,int]]",
                    "bool",
                    "str",
                    "Dict"
                ],
                "rpc": [
                    "Depends",
                    "Dict[str,Dict[str,int]]",
                    "bool",
                    "int",
                    "str",
                    "Dict"
                ]
            }
        },
        "trades_delete": {
            "name": "trades_delete",
            "location": 118,
            "return": [
                "dict",
                "Any",
                "bytes",
                "MutableMapping",
                "str"
            ],
            "arguments": {
                "tradeid": [
                    "str",
                    "bool",
                    "Optional[freqtrade.exchange.Exchange]"
                ],
                "rpc": [
                    "Depends",
                    "str",
                    "bool",
                    "Optional[freqtrade.exchange.Exchange]"
                ]
            }
        },
        "edge": {
            "name": "edge",
            "location": 124,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rpc": [
                    "Depends",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "show_config": {
            "name": "show_config",
            "location": 129,
            "return": [
                "dict",
                "str",
                "Optional[int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "rpc": [
                    "Depends",
                    "Dict",
                    "str",
                    "List"
                ],
                "config": [
                    "Dict",
                    "Depends"
                ]
            }
        },
        "force_entry": {
            "name": "force_entry",
            "location": 143,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]",
                "Sequence[Sequence[str]]"
            ],
            "arguments": {
                "payload": [
                    "Optional[\"Outcome\"]",
                    "str",
                    "Optional[queries.Query]"
                ],
                "rpc": [
                    "Depends"
                ]
            }
        },
        "forceexit": {
            "name": "forceexit",
            "location": 162,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "payload": [
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "float",
                    "int"
                ],
                "rpc": [
                    "Depends",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "blacklist": {
            "name": "blacklist",
            "location": 168,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rpc": [
                    "Depends",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "blacklist_post": {
            "name": "blacklist_post",
            "location": 173,
            "return": [
                "Optional[Type]",
                "dict",
                "float",
                "str"
            ],
            "arguments": {
                "payload": [
                    "Optional[Type]",
                    "dict",
                    "float",
                    "str"
                ],
                "rpc": [
                    "Depends",
                    "Optional[Type]",
                    "Dict",
                    "float",
                    "str"
                ]
            }
        },
        "blacklist_delete": {
            "name": "blacklist_delete",
            "location": 178,
            "return": [
                "float",
                "str",
                "bytes",
                "dict",
                "Callable"
            ],
            "arguments": {
                "pairs_to_delete": [
                    "Query",
                    "bool",
                    "int",
                    "Set[str]",
                    "List[allennlp.data.fields.production_rule_field.ProductionRule]",
                    "str",
                    "Optional[str]"
                ],
                "rpc": [
                    "Depends",
                    "bool",
                    "int",
                    "Set[str]",
                    "List[allennlp.data.fields.production_rule_field.ProductionRule]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "whitelist": {
            "name": "whitelist",
            "location": 185,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rpc": [
                    "Depends",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "locks": {
            "name": "locks",
            "location": 190,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rpc": [
                    "Depends",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "delete_lock": {
            "name": "delete_lock",
            "location": 195,
            "return": [
                "int",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "lockid": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "rpc": [
                    "Depends",
                    "int",
                    "bool",
                    "Dict[str,Any]"
                ]
            }
        },
        "delete_lock_pair": {
            "name": "delete_lock_pair",
            "location": 200,
            "return": [
                "int",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "payload": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "rpc": [
                    "Depends",
                    "int",
                    "bool",
                    "Dict[str,Any]"
                ]
            }
        },
        "logs": {
            "name": "logs",
            "location": 205,
            "return": [
                "int",
                "Optional[int]",
                "Optional[bool]"
            ],
            "arguments": {
                "limit": [
                    "None",
                    "str",
                    "bytes",
                    "bool",
                    "int"
                ]
            }
        },
        "start": {
            "name": "start",
            "location": 210,
            "return": [
                "int",
                "str",
                "Dict[str, Any]",
                "List[int]"
            ],
            "arguments": {
                "rpc": [
                    "Depends",
                    "int",
                    "Tuple[str,str]",
                    "str",
                    "List"
                ]
            }
        },
        "stop": {
            "name": "stop",
            "location": 215,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rpc": [
                    "Depends",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "stop_buy": {
            "name": "stop_buy",
            "location": 220,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rpc": [
                    "Depends",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "reload_config": {
            "name": "reload_config",
            "location": 225,
            "return": [
                "str",
                "dict",
                "IO[str]"
            ],
            "arguments": {
                "rpc": [
                    "Depends",
                    "str",
                    "bool",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "pair_candles": {
            "name": "pair_candles",
            "location": 230,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pair": [
                    "int",
                    "Callable",
                    "str"
                ],
                "timeframe": [
                    "int",
                    "Callable",
                    "str"
                ],
                "limit": [
                    "None",
                    "int",
                    "Callable",
                    "str"
                ],
                "rpc": [
                    "Depends",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "pair_history": {
            "name": "pair_history",
            "location": 236,
            "return": [
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "pair": [
                    "Dict[str, Any]",
                    "Sequence[int]"
                ],
                "timeframe": [
                    "Dict[str, Any]",
                    "Sequence[int]"
                ],
                "timerange": [
                    "Dict[str, Any]",
                    "Sequence[int]"
                ],
                "strategy": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "config": [
                    "Dict",
                    "Depends"
                ],
                "exchange": [
                    "Depends",
                    "Dict[str,Any]",
                    "Sequence[int]"
                ]
            }
        },
        "plot_config": {
            "name": "plot_config",
            "location": 248,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "rpc": [
                    "Depends",
                    "str",
                    "bool"
                ]
            }
        },
        "list_strategies": {
            "name": "list_strategies",
            "location": 253,
            "return": [
                "Dict[Text,list]",
                "List[str]",
                "Iterable[str]",
                "List[Tuple[str,Any]]"
            ],
            "arguments": {
                "config": [
                    "Depends",
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "get_strategy": {
            "name": "get_strategy",
            "location": 265,
            "return": [
                "Dict[Text,]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "strategy": [],
                "config": [
                    "Dict",
                    "Depends"
                ]
            }
        },
        "list_available_pairs": {
            "name": "list_available_pairs",
            "location": 282,
            "return": [
                "Dict[Text,Union[int,list]]",
                "str",
                "object",
                "List",
                "List[str]",
                "Callable[...,None]"
            ],
            "arguments": {
                "timeframe": [
                    "None",
                    "int",
                    "str",
                    "bool",
                    "float"
                ],
                "stake_currency": [
                    "None",
                    "Optional[Sequence[str]]",
                    "List[str]",
                    "float",
                    "str",
                    "pathlib.Path",
                    "Dict"
                ],
                "candletype": [
                    "None",
                    "int",
                    "str",
                    "bool",
                    "float"
                ],
                "config": [
                    "Depends",
                    "Dict[str,Any]",
                    "bool",
                    "raiden.constants.Environment",
                    "str"
                ]
            }
        },
        "sysinfo": {
            "name": "sysinfo",
            "location": 312,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "health": {
            "name": "health",
            "location": 317,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rpc": [
                    "Depends",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/rpc/api_server/deps.py": {
        "get_rpc_optional": {
            "name": "get_rpc_optional",
            "location": 12,
            "return": [
                "None",
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "get_rpc": {
            "name": "get_rpc",
            "location": 18,
            "return": [
                "Optional[Iterator[freqtrade.rpc.rpc.RPC]]",
                "Generator"
            ],
            "arguments": {}
        },
        "get_config": {
            "name": "get_config",
            "location": 28,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "get_api_config": {
            "name": "get_api_config",
            "location": 32,
            "return": [
                "str",
                "Dict[str, str]",
                "Dict[str, Any]",
                "List[str]",
                "int"
            ],
            "arguments": {}
        },
        "get_exchange": {
            "name": "get_exchange",
            "location": 36,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "config": [
                    "Depends",
                    "str",
                    "Dict"
                ]
            }
        },
        "is_webserver_mode": {
            "name": "is_webserver_mode",
            "location": 44,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "config": [
                    "Depends",
                    "bool",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/rpc/api_server/uvicorn_threaded.py": {
        "asyncio_setup": {
            "name": "asyncio_setup",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "UvicornServer.run": {
            "name": "run",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sockets": [
                    "None",
                    "str",
                    "Iterable[T]",
                    "Optional[str]"
                ]
            }
        },
        "UvicornServer.run_in_thread": {
            "name": "run_in_thread",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UvicornServer.cleanup": {
            "name": "cleanup",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "freqtrade-develop/freqtrade/rpc/api_server/webserver.py": {
        "FTJSONResponse.render": {
            "name": "render",
            "location": 22,
            "return": [
                "str",
                "int",
                "Mapping[str, Any]",
                "List[Callable]"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "dict"
                ]
            }
        },
        "ApiServer.__new__": {
            "name": "__new__",
            "location": 47,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "bool",
                    "bytes"
                ]
            }
        },
        "ApiServer.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None",
                "Dict[str,Dict[str,int]]",
                "str",
                "Dict[str,Any]",
                "Union[tuple,list]"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, str]",
                    "dict",
                    "str"
                ],
                "standalone": [
                    "bool",
                    "Optional[bool]",
                    "List[dict]",
                    "Type[BaseConfig]"
                ]
            }
        },
        "ApiServer.add_rpc_handler": {
            "name": "add_rpc_handler",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rpc": [
                    "float",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "ApiServer.cleanup": {
            "name": "cleanup",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiServer.shutdown": {
            "name": "shutdown",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Optional[str]",
                    "Callable[[T], bool]",
                    "type",
                    "Optional[Callable]"
                ]
            }
        },
        "ApiServer.send_msg": {
            "name": "send_msg",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "Dict[str, str]",
                    "Sequence",
                    "bool"
                ]
            }
        },
        "ApiServer.handle_rpc_exception": {
            "name": "handle_rpc_exception",
            "location": 106,
            "return": [
                "JSONResponse",
                "starlette.types.Receive",
                "starlette.types.Scope",
                "Optional[int]",
                "int",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str, Any]",
                    "starlette.requests.Request"
                ],
                "exc": [
                    "starlette.requests.Request",
                    "fastapi.exceptions.RequestValidationError",
                    "dict"
                ]
            }
        },
        "ApiServer.configure_app": {
            "name": "configure_app",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "dict"
                ],
                "config": [
                    "str"
                ]
            }
        },
        "ApiServer.start_api": {
            "name": "start_api",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "freqtrade-develop/freqtrade/rpc/api_server/web_ui.py": {
        "is_relative_to": {
            "name": "is_relative_to",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path",
                    "Callable",
                    "List[str]"
                ],
                "base": [
                    "str",
                    "pathlib.Path",
                    "Callable",
                    "List[str]"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/rpc/api_server/__init__.py": {},
    "freqtrade-develop/freqtrade/strategy/hyper.py": {
        "detect_parameters": {
            "name": "detect_parameters",
            "location": 177,
            "return": [
                "Iterator[Tuple[str,freqtrade.strategy.parameters.BaseParameter]]",
                "Generator[tuple[str]]"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "dict"
                ],
                "category": [
                    "Dict[str, Any]",
                    "int",
                    "dict"
                ]
            }
        },
        "HyperStrategyMixin.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "HyperStrategyMixin.enumerate_parameters": {
            "name": "enumerate_parameters",
            "location": 38,
            "return": [
                "Iterator[Tuple[str,freqtrade.strategy.parameters.BaseParameter]]",
                "Generator[tuple]"
            ],
            "arguments": {
                "self": [],
                "category": [
                    "None",
                    "Dict[str,Any]",
                    "str",
                    "logging.LogRecord",
                    "Optional[BaseException]",
                    "Type",
                    "List"
                ]
            }
        },
        "HyperStrategyMixin.detect_all_parameters": {
            "name": "detect_all_parameters",
            "location": 57,
            "return": [
                "Dict[Text,Union[list,int]]",
                "int",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "dict",
                    "Type[Any]",
                    "Optional[Type[Any]]",
                    "Type[T]"
                ]
            }
        },
        "HyperStrategyMixin.ft_load_params_from_file": {
            "name": "ft_load_params_from_file",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HyperStrategyMixin.ft_load_hyper_params": {
            "name": "ft_load_hyper_params",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hyperopt": [
                    "bool",
                    "Union[str,IO]",
                    "int",
                    "Dict",
                    "IO[str]",
                    "str"
                ]
            }
        },
        "HyperStrategyMixin.load_params_from_file": {
            "name": "load_params_from_file",
            "location": 114,
            "return": [
                "Dict",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HyperStrategyMixin._ft_load_params": {
            "name": "_ft_load_params",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "str",
                    "bytes"
                ],
                "space": [
                    "str"
                ],
                "hyperopt": [
                    "bool",
                    "str",
                    "Dict"
                ]
            }
        },
        "HyperStrategyMixin.get_no_optimize_params": {
            "name": "get_no_optimize_params",
            "location": 162,
            "return": [
                "Dict[Text,dict]",
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "freqtrade-develop/freqtrade/strategy/informative_decorator.py": {
        "informative": {
            "name": "informative",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "timeframe": [
                    "bool",
                    "int",
                    "List[dict]",
                    "str",
                    "Iterable[str]",
                    "Optional[str]"
                ],
                "asset": [
                    "Text",
                    "bool",
                    "int",
                    "List[dict]",
                    "str",
                    "Iterable[str]",
                    "Optional[str]"
                ],
                "fmt": [
                    "None",
                    "bool",
                    "int",
                    "List[dict]",
                    "str",
                    "Iterable[str]",
                    "Optional[str]"
                ]
            }
        },
        "_format_pair_name": {
            "name": "_format_pair_name",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "Dict[str, Any]",
                    "List[Tuple[str, str, str, str, str]]"
                ],
                "pair": [
                    "dict",
                    "Dict[str, Any]",
                    "List[Tuple[str, str, str, str, str]]"
                ]
            }
        },
        "_create_and_merge_informative_pair": {
            "name": "_create_and_merge_informative_pair",
            "location": 76,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "strategy": [
                    "dict",
                    "str"
                ],
                "dataframe": [
                    "Dict[str, Any]",
                    "pandas.DataFrame",
                    "Optional[List[str]]",
                    "dict",
                    "Tuple[int, int]",
                    "List[Tuple[int, int]]",
                    "float"
                ],
                "metadata": [
                    "dict",
                    "bytes",
                    "str",
                    "list",
                    "Optional[Dict]",
                    "pandas.DataFrame"
                ],
                "inf_data": [
                    "str",
                    "dict",
                    "Callable",
                    "Optional[Dict]"
                ],
                "populate_indicators": [
                    "dict",
                    "bytes",
                    "str",
                    "list",
                    "Optional[Dict]",
                    "pandas.DataFrame"
                ]
            }
        },
        "informative.decorator": {
            "name": "decorator",
            "location": 63,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "Dict[str, Any]",
                    "bool",
                    "List[str]",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/strategy/interface.py": {
        "IStrategy.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "IStrategy.ft_bot_start": {
            "name": "ft_bot_start",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IStrategy.populate_indicators": {
            "name": "populate_indicators",
            "location": 158,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "IStrategy.populate_buy_trend": {
            "name": "populate_buy_trend",
            "location": 167,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "IStrategy.populate_entry_trend": {
            "name": "populate_entry_trend",
            "location": 176,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "Callable",
                    "str"
                ],
                "metadata": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "IStrategy.populate_sell_trend": {
            "name": "populate_sell_trend",
            "location": 185,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "IStrategy.populate_exit_trend": {
            "name": "populate_exit_trend",
            "location": 195,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "Callable",
                    "str"
                ],
                "metadata": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "IStrategy.bot_start": {
            "name": "bot_start",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IStrategy.bot_loop_start": {
            "name": "bot_loop_start",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IStrategy.check_buy_timeout": {
            "name": "check_buy_timeout",
            "location": 220,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "datetime.datetime",
                    "int",
                    "float",
                    "bool"
                ],
                "trade": [
                    "datetime.datetime",
                    "int",
                    "float",
                    "bool"
                ],
                "order": [
                    "datetime.datetime",
                    "int",
                    "float",
                    "bool"
                ],
                "current_time": [
                    "datetime.datetime",
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "IStrategy.check_entry_timeout": {
            "name": "check_entry_timeout",
            "location": 227,
            "return": [
                "bool",
                "bytes",
                "Tuple[float, float, float]",
                "str",
                "float",
                "int",
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "bool",
                    "float",
                    "int"
                ],
                "trade": [
                    "bool",
                    "float",
                    "int"
                ],
                "order": [
                    "bool",
                    "float",
                    "int"
                ],
                "current_time": [
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "IStrategy.check_sell_timeout": {
            "name": "check_sell_timeout",
            "location": 248,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "datetime.datetime",
                    "int",
                    "float",
                    "bool"
                ],
                "trade": [
                    "datetime.datetime",
                    "int",
                    "float",
                    "bool"
                ],
                "order": [
                    "datetime.datetime",
                    "int",
                    "float",
                    "bool"
                ],
                "current_time": [
                    "datetime.datetime",
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "IStrategy.check_exit_timeout": {
            "name": "check_exit_timeout",
            "location": 255,
            "return": [
                "bool",
                "bytes",
                "Tuple[float, float, float]",
                "str",
                "float",
                "int",
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "bool",
                    "float",
                    "int"
                ],
                "trade": [
                    "bool",
                    "float",
                    "int"
                ],
                "order": [
                    "bool",
                    "float",
                    "int"
                ],
                "current_time": [
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "IStrategy.confirm_trade_entry": {
            "name": "confirm_trade_entry",
            "location": 276,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "bool",
                    "int",
                    "Mapping[str, str]",
                    "Type"
                ],
                "order_type": [
                    "bool",
                    "int",
                    "Mapping[str, str]",
                    "Type"
                ],
                "amount": [
                    "bool",
                    "int",
                    "Mapping[str, str]",
                    "Type"
                ],
                "rate": [
                    "bool",
                    "int",
                    "Mapping[str, str]",
                    "Type"
                ],
                "time_in_force": [
                    "bool",
                    "int",
                    "Mapping[str, str]",
                    "Type"
                ],
                "current_time": [
                    "bool",
                    "int",
                    "Mapping[str, str]",
                    "Type"
                ],
                "entry_tag": [
                    "bool",
                    "int",
                    "Mapping[str, str]",
                    "Type"
                ],
                "side": [
                    "bool",
                    "int",
                    "Mapping[str, str]",
                    "Type"
                ]
            }
        },
        "IStrategy.confirm_trade_exit": {
            "name": "confirm_trade_exit",
            "location": 303,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "float",
                    "freqtrade.persistence.Trade"
                ],
                "trade": [
                    "str",
                    "float",
                    "freqtrade.persistence.Trade"
                ],
                "order_type": [
                    "str",
                    "float",
                    "freqtrade.persistence.Trade"
                ],
                "amount": [
                    "str",
                    "float",
                    "freqtrade.persistence.Trade"
                ],
                "rate": [
                    "str",
                    "float",
                    "freqtrade.persistence.Trade"
                ],
                "time_in_force": [
                    "str",
                    "float",
                    "freqtrade.persistence.Trade"
                ],
                "exit_reason": [
                    "str",
                    "float",
                    "freqtrade.persistence.Trade"
                ],
                "current_time": [
                    "str",
                    "float",
                    "freqtrade.persistence.Trade"
                ]
            }
        },
        "IStrategy.custom_stoploss": {
            "name": "custom_stoploss",
            "location": 332,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "int",
                    "float",
                    "bool"
                ],
                "trade": [
                    "int",
                    "float",
                    "bool"
                ],
                "current_time": [
                    "int",
                    "float",
                    "bool"
                ],
                "current_rate": [
                    "int",
                    "float",
                    "bool"
                ],
                "current_profit": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "IStrategy.custom_entry_price": {
            "name": "custom_entry_price",
            "location": 354,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "int"
                ],
                "current_time": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "int"
                ],
                "proposed_rate": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "int"
                ],
                "entry_tag": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "int"
                ],
                "side": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "int"
                ]
            }
        },
        "IStrategy.custom_exit_price": {
            "name": "custom_exit_price",
            "location": 373,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "bool",
                    "str"
                ],
                "trade": [
                    "bool",
                    "str"
                ],
                "current_time": [
                    "bool",
                    "str"
                ],
                "proposed_rate": [
                    "bool",
                    "str"
                ],
                "current_profit": [
                    "bool",
                    "str"
                ],
                "exit_tag": [
                    "bool",
                    "str"
                ]
            }
        },
        "IStrategy.custom_sell": {
            "name": "custom_sell",
            "location": 394,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "int",
                    "float",
                    "bool"
                ],
                "trade": [
                    "int",
                    "float",
                    "bool"
                ],
                "current_time": [
                    "int",
                    "float",
                    "bool"
                ],
                "current_rate": [
                    "int",
                    "float",
                    "bool"
                ],
                "current_profit": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "IStrategy.custom_exit": {
            "name": "custom_exit",
            "location": 419,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[str, int]",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "float",
                    "bool",
                    "int"
                ],
                "trade": [
                    "float",
                    "bool",
                    "int"
                ],
                "current_time": [
                    "float",
                    "bool",
                    "int"
                ],
                "current_rate": [
                    "float",
                    "bool",
                    "int"
                ],
                "current_profit": [
                    "float",
                    "bool",
                    "int"
                ]
            }
        },
        "IStrategy.custom_stake_amount": {
            "name": "custom_stake_amount",
            "location": 443,
            "return": [
                "tuple",
                "Tuple[str, str, str]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "Iterable[T]",
                    "bool",
                    "int",
                    "Optional[float]"
                ],
                "current_time": [
                    "Iterable[T]",
                    "bool",
                    "int",
                    "Optional[float]"
                ],
                "current_rate": [
                    "Iterable[T]",
                    "bool",
                    "int",
                    "Optional[float]"
                ],
                "proposed_stake": [
                    "Iterable[T]",
                    "bool",
                    "int",
                    "Optional[float]"
                ],
                "min_stake": [
                    "Iterable[T]",
                    "bool",
                    "int",
                    "Optional[float]"
                ],
                "max_stake": [
                    "Iterable[T]",
                    "bool",
                    "int",
                    "Optional[float]"
                ],
                "entry_tag": [
                    "Iterable[T]",
                    "bool",
                    "int",
                    "Optional[float]"
                ],
                "side": [
                    "Iterable[T]",
                    "bool",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "IStrategy.adjust_trade_position": {
            "name": "adjust_trade_position",
            "location": 461,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "float",
                    "Optional[datetime.datetime]",
                    "Callable[[], Any]",
                    "int",
                    "List[int]",
                    "bool"
                ],
                "current_time": [
                    "float",
                    "Optional[datetime.datetime]",
                    "Callable[[], Any]",
                    "int",
                    "List[int]",
                    "bool"
                ],
                "current_rate": [
                    "float",
                    "Optional[datetime.datetime]",
                    "Callable[[], Any]",
                    "int",
                    "List[int]",
                    "bool"
                ],
                "current_profit": [
                    "float",
                    "Optional[datetime.datetime]",
                    "Callable[[], Any]",
                    "int",
                    "List[int]",
                    "bool"
                ],
                "min_stake": [
                    "float",
                    "Optional[datetime.datetime]",
                    "Callable[[], Any]",
                    "int",
                    "List[int]",
                    "bool"
                ],
                "max_stake": [
                    "float",
                    "Optional[datetime.datetime]",
                    "Callable[[], Any]",
                    "int",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "IStrategy.adjust_entry_price": {
            "name": "adjust_entry_price",
            "location": 485,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "datetime.datetime",
                    "int",
                    "float",
                    "bool"
                ],
                "order": [
                    "datetime.datetime",
                    "int",
                    "float",
                    "bool"
                ],
                "pair": [
                    "datetime.datetime",
                    "int",
                    "float",
                    "bool"
                ],
                "current_time": [
                    "datetime.datetime",
                    "int",
                    "float",
                    "bool"
                ],
                "proposed_rate": [
                    "datetime.datetime",
                    "int",
                    "float",
                    "bool"
                ],
                "current_order_rate": [
                    "datetime.datetime",
                    "int",
                    "float",
                    "bool"
                ],
                "entry_tag": [
                    "datetime.datetime",
                    "int",
                    "float",
                    "bool"
                ],
                "side": [
                    "datetime.datetime",
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "IStrategy.leverage": {
            "name": "leverage",
            "location": 513,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "float",
                    "Optional[datetime.datetime]",
                    "Callable[[], Any]",
                    "int",
                    "List[int]",
                    "bool"
                ],
                "current_time": [
                    "float",
                    "Optional[datetime.datetime]",
                    "Callable[[], Any]",
                    "int",
                    "List[int]",
                    "bool"
                ],
                "current_rate": [
                    "float",
                    "Optional[datetime.datetime]",
                    "Callable[[], Any]",
                    "int",
                    "List[int]",
                    "bool"
                ],
                "proposed_leverage": [
                    "float",
                    "Optional[datetime.datetime]",
                    "Callable[[], Any]",
                    "int",
                    "List[int]",
                    "bool"
                ],
                "max_leverage": [
                    "float",
                    "Optional[datetime.datetime]",
                    "Callable[[], Any]",
                    "int",
                    "List[int]",
                    "bool"
                ],
                "entry_tag": [
                    "float",
                    "Optional[datetime.datetime]",
                    "Callable[[], Any]",
                    "int",
                    "List[int]",
                    "bool"
                ],
                "side": [
                    "float",
                    "Optional[datetime.datetime]",
                    "Callable[[], Any]",
                    "int",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "IStrategy.informative_pairs": {
            "name": "informative_pairs",
            "location": 530,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IStrategy.version": {
            "name": "version",
            "location": 543,
            "return": [
                "None",
                "Optional[int]",
                "bool",
                "str",
                "Dict",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IStrategy.gather_informative_pairs": {
            "name": "gather_informative_pairs",
            "location": 553,
            "return": [
                "List[tuple]",
                "str",
                "List[Dict]",
                "List[allennlp.data.dataset_readers.dataset_utils.span_utils.TypedStringSpan]",
                "List[str]",
                "Union[List,Tuple]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IStrategy.get_strategy_name": {
            "name": "get_strategy_name",
            "location": 582,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IStrategy.lock_pair": {
            "name": "lock_pair",
            "location": 588,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "int",
                    "allennlp.data.vocabulary.Vocabulary",
                    "str"
                ],
                "until": [
                    "int",
                    "allennlp.data.vocabulary.Vocabulary",
                    "str"
                ],
                "reason": [
                    "None",
                    "int",
                    "allennlp.data.vocabulary.Vocabulary",
                    "str"
                ],
                "side": [
                    "Text",
                    "int",
                    "allennlp.data.vocabulary.Vocabulary",
                    "str"
                ]
            }
        },
        "IStrategy.unlock_pair": {
            "name": "unlock_pair",
            "location": 602,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "float",
                    "List[recidiviz.persistence.entity.state.entities.StateIncarcerationPeriod]",
                    "datetime.timedelta",
                    "int"
                ]
            }
        },
        "IStrategy.unlock_reason": {
            "name": "unlock_reason",
            "location": 611,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "int",
                    "str",
                    "datetime.date",
                    "datetime.datetime"
                ]
            }
        },
        "IStrategy.is_pair_locked": {
            "name": "is_pair_locked",
            "location": 620,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "int",
                    "datetime.datetime",
                    "str"
                ]
            }
        },
        "IStrategy.analyze_ticker": {
            "name": "analyze_ticker",
            "location": 639,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "Callable",
                    "str"
                ],
                "metadata": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "IStrategy._analyze_ticker_internal": {
            "name": "_analyze_ticker_internal",
            "location": 653,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "str",
                    "Dict[str, float]",
                    "int"
                ],
                "metadata": [
                    "str",
                    "bool",
                    "Callable[[str], T]",
                    "Dict[str, Any]"
                ]
            }
        },
        "IStrategy.analyze_pair": {
            "name": "analyze_pair",
            "location": 688,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "Union[str, Dict[str, str]]",
                    "Dict[str, str]"
                ]
            }
        },
        "IStrategy.analyze": {
            "name": "analyze",
            "location": 720,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pairs": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "IStrategy.preserve_df": {
            "name": "preserve_df",
            "location": 729,
            "return": [
                "Tuple[int]",
                "float",
                "int",
                "str",
                "List[recidiviz.persistence.entity.state.entities.StateIncarcerationPeriod]",
                "bool"
            ],
            "arguments": {
                "dataframe": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "IStrategy.assert_df": {
            "name": "assert_df",
            "location": 733,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "Optional[datetime.datetime]",
                    "Optional[float]",
                    "Union[int, None]",
                    "bool",
                    "list"
                ],
                "df_len": [
                    "int",
                    "List[int]",
                    "tuple",
                    "float",
                    "list",
                    "Optional[T]",
                    "Sequence[T]"
                ],
                "df_close": [
                    "float",
                    "bool",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionSentence]",
                    "List[recidiviz.persistence.entity.state.entities.StateIncarcerationSentence]",
                    "pandas.Series",
                    "pandas.DataFrame"
                ],
                "df_date": [
                    "datetime.datetime",
                    "List[int]",
                    "Sequence[str]",
                    "Optional[datetime.date]",
                    "str"
                ]
            }
        },
        "IStrategy.get_latest_candle": {
            "name": "get_latest_candle",
            "location": 755,
            "return": [
                "Tuple[None]",
                "str",
                "Tuple",
                "int",
                "Optional[str]",
                "Optional[Literal[only_clustered,include_clustered]]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "int",
                    "bool",
                    "Exception"
                ],
                "timeframe": [
                    "str",
                    "bool"
                ],
                "dataframe": [
                    "pandas.DataFrame",
                    "float",
                    "List[recidiviz.persistence.database.schema.state.schema.StateIncarcerationPeriod]"
                ]
            }
        },
        "IStrategy.get_exit_signal": {
            "name": "get_exit_signal",
            "location": 790,
            "return": [
                "bool",
                "Tuple[Optional[bool]]",
                "Tuple[Union[bool,str,None]]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "int",
                    "str"
                ],
                "timeframe": [
                    "str",
                    "int"
                ],
                "dataframe": [
                    "str",
                    "int"
                ],
                "is_short": [
                    "None",
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "IStrategy.get_entry_signal": {
            "name": "get_entry_signal",
            "location": 828,
            "return": [
                "Tuple[None]",
                "Tuple[Optional[str]]",
                "Optional[Literal[only_clustered,include_clustered]]",
                "List[str]",
                "Optional[Dict]",
                "Optional[Any]",
                "Union[int,str]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "Optional[List[str]]",
                    "int",
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "timeframe": [
                    "Optional[List[str]]",
                    "str",
                    "int",
                    "Callable",
                    "Optional[str]"
                ],
                "dataframe": [
                    "Optional[List[str]]",
                    "str",
                    "int",
                    "Callable",
                    "Optional[str]"
                ]
            }
        },
        "IStrategy.ignore_expired_candle": {
            "name": "ignore_expired_candle",
            "location": 879,
            "return": [
                "bool",
                "int",
                "str",
                "datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "latest_date": [
                    "datetime.date",
                    "datetime.datetime",
                    "str",
                    "List[str]",
                    "Optional[datetime.datetime]"
                ],
                "current_time": [
                    "datetime.date",
                    "datetime.datetime",
                    "str",
                    "List[str]",
                    "Optional[datetime.datetime]"
                ],
                "timeframe_seconds": [
                    "datetime.date",
                    "datetime.datetime",
                    "str",
                    "List[str]",
                    "Optional[datetime.datetime]"
                ],
                "enter": [
                    "int",
                    "float",
                    "str",
                    "list",
                    "recidiviz.persistence.entity.state.entities.StatePerson"
                ]
            }
        },
        "IStrategy.should_exit": {
            "name": "should_exit",
            "location": 892,
            "return": [
                "List[ExitCheckTuple]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "freqtrade.persistence.Trade",
                    "list",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]",
                    "str",
                    "Iterable[str]"
                ],
                "rate": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Tuple[int, int]",
                    "float",
                    "Optional[bool]"
                ],
                "current_time": [
                    "int",
                    "bool",
                    "freqtrade.exchange.Exchange"
                ]
            }
        },
        "IStrategy.stop_loss_reached": {
            "name": "stop_loss_reached",
            "location": 980,
            "return": [
                "ExitCheckTuple"
            ],
            "arguments": {
                "self": [],
                "current_rate": [
                    "dict",
                    "recidiviz.persistence.database.schema.schema_person_type.SchemaPersonType",
                    "List[Tuple[int, int]]"
                ],
                "trade": [
                    "freqtrade.persistence.Trade",
                    "int",
                    "bool"
                ],
                "current_time": [
                    "datetime.datetime",
                    "int",
                    "str"
                ],
                "current_profit": [
                    "datetime.datetime",
                    "int",
                    "str"
                ],
                "force_stoploss": [
                    "int",
                    "Union[int, Tuple[int, ...]]",
                    "bool"
                ],
                "low": [
                    "None",
                    "int",
                    "Dict[str,Any]",
                    "recidiviz.persistence.database.schema.schema_person_type.SchemaPersonType"
                ],
                "high": [
                    "None",
                    "int",
                    "Dict[str,Any]",
                    "recidiviz.persistence.database.schema.schema_person_type.SchemaPersonType"
                ]
            }
        },
        "IStrategy.min_roi_reached_entry": {
            "name": "min_roi_reached_entry",
            "location": 1065,
            "return": [
                "Tuple[None]",
                "Optional[str]",
                "Tuple",
                "Type",
                "Optional[List[Any]]",
                "List"
            ],
            "arguments": {
                "self": [],
                "trade_dur": [
                    "bool",
                    "pandas.DataFrame",
                    "Callable",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "IStrategy.min_roi_reached": {
            "name": "min_roi_reached",
            "location": 1078,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "float",
                    "datetime.datetime",
                    "str",
                    "int"
                ],
                "current_profit": [
                    "int",
                    "float"
                ],
                "current_time": [
                    "float",
                    "datetime.datetime",
                    "str",
                    "int"
                ]
            }
        },
        "IStrategy.ft_check_timed_out": {
            "name": "ft_check_timed_out",
            "location": 1093,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "int",
                    "List[int]",
                    "List[float]"
                ],
                "order": [
                    "int",
                    "str"
                ],
                "current_time": [
                    "int",
                    "Dict[int, int]",
                    "Union[int, str]",
                    "float"
                ]
            }
        },
        "IStrategy.advise_all_indicators": {
            "name": "advise_all_indicators",
            "location": 1117,
            "return": [
                "Dict",
                "bool",
                "str",
                "List[List[int]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        },
        "IStrategy.advise_indicators": {
            "name": "advise_indicators",
            "location": 1130,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "Sequence[Dict[str, Any]]",
                    "int",
                    "str"
                ],
                "metadata": [
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "IStrategy.advise_entry": {
            "name": "advise_entry",
            "location": 1147,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "Callable",
                    "str"
                ],
                "metadata": [
                    "Dict[str, str]",
                    "dict",
                    "Optional[Exception]",
                    "List[dict]"
                ]
            }
        },
        "IStrategy.advise_exit": {
            "name": "advise_exit",
            "location": 1165,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "Callable",
                    "str"
                ],
                "metadata": [
                    "Dict[str, str]",
                    "dict",
                    "Optional[Exception]",
                    "List[dict]"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/strategy/parameters.py": {
        "BaseParameter.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseParameter.__repr__": {
            "name": "__repr__",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseParameter.get_space": {
            "name": "get_space",
            "location": 55,
            "return": [
                "Union[Integer,Real,SKDecimal,Categorical]",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "Iterable[str]"
                ]
            }
        },
        "NumericParameter.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "low": [
                    "Optional[float]",
                    "Optional[Type[Any]]",
                    "Optional[dict]",
                    "Optional[Tuple[float, float]]",
                    "bool"
                ],
                "high": [
                    "None",
                    "bool",
                    "Optional[bool]",
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[Type[Any]]",
                    "Optional[Tuple[float,float]]"
                ]
            }
        },
        "IntParameter.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "low": [
                    "bool"
                ],
                "high": [
                    "bool",
                    "None"
                ]
            }
        },
        "IntParameter.get_space": {
            "name": "get_space",
            "location": 121,
            "return": [
                "Integer",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "IntParameter.range": {
            "name": "range",
            "location": 129,
            "return": [
                "range",
                "float",
                "Type[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RealParameter.__init__": {
            "name": "__init__",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "low": [
                    "bool"
                ],
                "high": [
                    "bool",
                    "None"
                ]
            }
        },
        "RealParameter.get_space": {
            "name": "get_space",
            "location": 165,
            "return": [
                "Real",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "DecimalParameter.__init__": {
            "name": "__init__",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "low": [
                    "bool",
                    "int"
                ],
                "high": [
                    "None",
                    "bool",
                    "int"
                ]
            }
        },
        "DecimalParameter.get_space": {
            "name": "get_space",
            "location": 199,
            "return": [
                "freqtrade.optimize.space.decimalspace.SKDecimal"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "DecimalParameter.range": {
            "name": "range",
            "location": 208,
            "return": [
                "str",
                "List[float]",
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoricalParameter.__init__": {
            "name": "__init__",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "categories": [
                    "bool",
                    "int"
                ]
            }
        },
        "CategoricalParameter.get_space": {
            "name": "get_space",
            "location": 249,
            "return": [
                "Categorical",
                "Type",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "CategoricalParameter.range": {
            "name": "range",
            "location": 257,
            "return": [
                "List",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BooleanParameter.__init__": {
            "name": "__init__",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "freqtrade-develop/freqtrade/strategy/strategy_helper.py": {
        "merge_informative_pair": {
            "name": "merge_informative_pair",
            "location": 6,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "dataframe": [
                    "float",
                    "Tuple[int, int]",
                    "Optional[int]"
                ],
                "informative": [
                    "pandas.DataFrame",
                    "range"
                ],
                "timeframe": [
                    "bool",
                    "float",
                    "int"
                ],
                "timeframe_inf": [
                    "List[Dict[str, int]]",
                    "int",
                    "Optional[bool]",
                    "Iterable[dict]",
                    "Optional[str]",
                    "pandas.DataFrame"
                ],
                "ffill": [
                    "bool",
                    "str",
                    "Optional[Any]",
                    "Union[str,bytes]",
                    "Optional[str]"
                ],
                "append_timeframe": [
                    "bool",
                    "str",
                    "Optional[Any]",
                    "Union[str,bytes]",
                    "Optional[str]"
                ],
                "date_column": [
                    "Text",
                    "int",
                    "float",
                    "Tuple[int,int]",
                    "str"
                ]
            }
        },
        "stoploss_from_open": {
            "name": "stoploss_from_open",
            "location": 75,
            "return": [
                "int",
                "float",
                "bool",
                "str",
                "pandas.DataFrame"
            ],
            "arguments": {
                "open_relative_stop": [
                    "bool",
                    "pandas.DataFrame",
                    "Optional[float]"
                ],
                "current_profit": [
                    "bool",
                    "pandas.DataFrame",
                    "Optional[float]"
                ],
                "is_short": [
                    "bool",
                    "str"
                ]
            }
        },
        "stoploss_from_absolute": {
            "name": "stoploss_from_absolute",
            "location": 111,
            "return": [
                "int",
                "str",
                "float",
                "bool",
                "Dict[str,Any]"
            ],
            "arguments": {
                "stop_rate": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "current_rate": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "is_short": [
                    "bool",
                    "Tuple[str,int]",
                    "Optional[bool]",
                    "int",
                    "Optional[str]"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/strategy/strategy_wrapper.py": {
        "strategy_safe_wrapper": {
            "name": "strategy_safe_wrapper",
            "location": 15,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "f": [
                    "str",
                    "List[T]",
                    "Literal[Literal]",
                    "Optional[List[Any]]",
                    "bool"
                ],
                "message": [
                    "Text",
                    "str",
                    "List[T]",
                    "Literal[Literal]",
                    "Optional[List[Any]]",
                    "bool"
                ],
                "default_retval": [
                    "None",
                    "str",
                    "List[T]",
                    "Literal[Literal]",
                    "Optional[List[Any]]",
                    "bool"
                ],
                "supress_error": [
                    "bool",
                    "str",
                    "List[T]",
                    "Literal[Literal]",
                    "Optional[List[Any]]"
                ]
            }
        },
        "strategy_safe_wrapper.wrapper": {
            "name": "wrapper",
            "location": 22,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "freqtrade-develop/freqtrade/strategy/__init__.py": {},
    "freqtrade-develop/freqtrade/templates/sample_hyperopt_loss.py": {
        "SampleHyperOptLoss.hyperopt_loss_function": {
            "name": "hyperopt_loss_function",
            "location": 37,
            "return": [
                "float"
            ],
            "arguments": {
                "results": [],
                "trade_count": [],
                "min_date": [],
                "max_date": [],
                "config": [],
                "processed": []
            }
        }
    },
    "freqtrade-develop/freqtrade/templates/sample_strategy.py": {
        "SampleStrategy.informative_pairs": {
            "name": "informative_pairs",
            "location": 111,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SampleStrategy.populate_indicators": {
            "name": "populate_indicators",
            "location": 124,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "Callable",
                    "str"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "SampleStrategy.populate_entry_trend": {
            "name": "populate_entry_trend",
            "location": 345,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "Union[numpy.ndarray, astropy.units.quantity.Quantity]",
                    "pandas.DataFrame",
                    "bytearray"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "SampleStrategy.populate_exit_trend": {
            "name": "populate_exit_trend",
            "location": 374,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "Union[numpy.ndarray, astropy.units.quantity.Quantity]",
                    "pandas.DataFrame",
                    "bytearray"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/vendor/__init__.py": {},
    "freqtrade-develop/freqtrade/vendor/qtpylib/indicators.py": {
        "numpy_rolling_window": {
            "name": "numpy_rolling_window",
            "location": 42,
            "return": [
                "numpy.ndarray",
                "bool",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "dict",
                    "numpy.ndarray",
                    "Dict[str, Any]"
                ],
                "window": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "bytes",
                    "jgikbase.idmapping.core.user.User.name"
                ]
            }
        },
        "numpy_rolling_series": {
            "name": "numpy_rolling_series",
            "location": 48,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "numpy_rolling_mean": {
            "name": "numpy_rolling_mean",
            "location": 65,
            "return": [
                "bytes"
            ],
            "arguments": {
                "data": [
                    "str",
                    "int",
                    "bytes"
                ],
                "window": [
                    "str",
                    "int",
                    "bytes"
                ],
                "as_source": [
                    "bool",
                    "List",
                    "Optional[bytes]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "numpy_rolling_std": {
            "name": "numpy_rolling_std",
            "location": 70,
            "return": [
                "bytes"
            ],
            "arguments": {
                "data": [
                    "str",
                    "int",
                    "bytes"
                ],
                "window": [
                    "str",
                    "int",
                    "bytes"
                ],
                "as_source": [
                    "bool",
                    "List",
                    "Optional[bytes]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "session": {
            "name": "session",
            "location": 77,
            "return": [
                "bool",
                "List[Dict]",
                "Mapping[str, Any]",
                "str",
                "Dict[int, Dict[str, Any]]"
            ],
            "arguments": {
                "df": [
                    "int",
                    "list",
                    "List[int]",
                    "Optional[Union[float, Any]]",
                    "pandas.DataFrame"
                ],
                "start": [
                    "Text",
                    "int",
                    "str",
                    "List[datetime.date]",
                    "Optional[Union[float,Any]]",
                    "Sequence[T]",
                    "numpy.ndarray"
                ],
                "end": [
                    "Text",
                    "int",
                    "bool",
                    "Iterable[Entity]",
                    "Tuple[str]"
                ]
            }
        },
        "heikinashi": {
            "name": "heikinashi",
            "location": 111,
            "return": [
                "bool",
                "str",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "bars": [
                    "list",
                    "int",
                    "bool",
                    "bytes",
                    "numpy.ma.MaskedArray"
                ]
            }
        },
        "tdi": {
            "name": "tdi",
            "location": 133,
            "return": [
                "bool",
                "str",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "series": [
                    "Optional[str]"
                ],
                "rsi_lookback": [
                    "str",
                    "int"
                ],
                "rsi_smooth_len": [
                    "int",
                    "Dict[str,Any]",
                    "Dict",
                    "pandas.DataFrame"
                ],
                "rsi_signal_len": [
                    "int",
                    "Dict[str,Any]",
                    "Dict",
                    "pandas.DataFrame"
                ],
                "bb_lookback": [
                    "int",
                    "pandas._ArrayLike",
                    "bool",
                    "Dict",
                    "str",
                    "Iterable[T]"
                ],
                "bb_std": [
                    "float",
                    "pandas._ArrayLike",
                    "bool",
                    "Dict",
                    "str",
                    "Iterable[T]"
                ]
            }
        },
        "awesome_oscillator": {
            "name": "awesome_oscillator",
            "location": 154,
            "return": [
                "str",
                "List[dict]",
                "int",
                "numpy.ndarray"
            ],
            "arguments": {
                "df": [
                    "List[int]",
                    "list"
                ],
                "weighted": [
                    "bool",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict"
                ],
                "fast": [
                    "int",
                    "Union[numpy.ndarray,astropy.units.quantity.Quantity]",
                    "float",
                    "str",
                    "Iterable[str]"
                ],
                "slow": [
                    "int",
                    "Union[numpy.ndarray,astropy.units.quantity.Quantity]",
                    "float",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "nans": {
            "name": "nans",
            "location": 168,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "length": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "typical_price": {
            "name": "typical_price",
            "location": 176,
            "return": [
                "numpy.ndarray",
                "List[dict]",
                "float",
                "int",
                "datetime.timedelta",
                "str"
            ],
            "arguments": {
                "bars": [
                    "int",
                    "Callable[[None], bool]",
                    "list"
                ]
            }
        },
        "mid_price": {
            "name": "mid_price",
            "location": 183,
            "return": [
                "numpy.ndarray",
                "List[dict]",
                "float",
                "int",
                "datetime.timedelta",
                "str"
            ],
            "arguments": {
                "bars": [
                    "int",
                    "Callable[[None], bool]",
                    "list"
                ]
            }
        },
        "ibs": {
            "name": "ibs",
            "location": 190,
            "return": [
                "numpy.ndarray",
                "List[dict]",
                "float",
                "int",
                "datetime.timedelta",
                "str"
            ],
            "arguments": {
                "bars": [
                    "float",
                    "list",
                    "bool",
                    "List[numpy.array]"
                ]
            }
        },
        "true_range": {
            "name": "true_range",
            "location": 199,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "dict",
                "int"
            ],
            "arguments": {
                "bars": [
                    "str",
                    "int",
                    "Tuple[bytes]",
                    "Dict[str, Any]"
                ]
            }
        },
        "atr": {
            "name": "atr",
            "location": 209,
            "return": [
                "str",
                "bool",
                "bytes",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "bars": [
                    "List[datetime.time]",
                    "int",
                    "numpy.ndarray",
                    "List[str]",
                    "float"
                ],
                "window": [
                    "int",
                    "float",
                    "starfish.core.morphology.binary_mask.BinaryMaskCollection"
                ],
                "exp": [
                    "bool",
                    "numpy.ndarray",
                    "Optional[numpy.ndarray]",
                    "Optional[List]",
                    "List",
                    "int"
                ]
            }
        },
        "crossed": {
            "name": "crossed",
            "location": 222,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "series1": [
                    "numpy.array",
                    "List['cirq.Qid']",
                    "Optional[numpy.ndarray]"
                ],
                "series2": [
                    "float",
                    "List[int]"
                ],
                "direction": [
                    "None",
                    "Optional[float]",
                    "Optional[int]",
                    "numpy.ndarray",
                    "Optional[str]"
                ]
            }
        },
        "crossed_above": {
            "name": "crossed_above",
            "location": 243,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "series1": [
                    "int",
                    "Callable",
                    "str"
                ],
                "series2": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "crossed_below": {
            "name": "crossed_below",
            "location": 247,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "series1": [
                    "int",
                    "Callable",
                    "str"
                ],
                "series2": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "rolling_std": {
            "name": "rolling_std",
            "location": 253,
            "return": [
                "str",
                "Dict[str, Any]",
                "numpy.ndarray",
                "List[dict]"
            ],
            "arguments": {
                "series": [
                    "List[bytes]",
                    "List[str]",
                    "Union[int, float]",
                    "numpy.ndarray"
                ],
                "window": [
                    "starfish.core.imagestack.imagestack.ImageStack",
                    "int"
                ],
                "min_periods": [
                    "None",
                    "starfish.core.imagestack.imagestack.ImageStack",
                    "bool",
                    "starfish.core.types.SpotAttributes"
                ]
            }
        },
        "rolling_mean": {
            "name": "rolling_mean",
            "location": 266,
            "return": [
                "str",
                "Dict[str, Any]",
                "numpy.ndarray",
                "List[dict]"
            ],
            "arguments": {
                "series": [
                    "List[bytes]",
                    "List[str]",
                    "Union[int, float]",
                    "numpy.ndarray"
                ],
                "window": [
                    "starfish.core.imagestack.imagestack.ImageStack",
                    "int"
                ],
                "min_periods": [
                    "None",
                    "starfish.core.imagestack.imagestack.ImageStack",
                    "bool",
                    "starfish.core.types.SpotAttributes"
                ]
            }
        },
        "rolling_min": {
            "name": "rolling_min",
            "location": 279,
            "return": [
                "dict",
                "numpy.ndarray",
                "Optional[numpy.dtype]"
            ],
            "arguments": {
                "series": [
                    "bool",
                    "str",
                    "Tuple[str, str]",
                    "Optional[str]",
                    "Optional[Callable]"
                ],
                "window": [
                    "int",
                    "bool",
                    "Dict[str,Any]",
                    "numpy.ndarray"
                ],
                "min_periods": [
                    "None",
                    "bool",
                    "Dict[str,Any]",
                    "numpy.ndarray"
                ]
            }
        },
        "rolling_max": {
            "name": "rolling_max",
            "location": 289,
            "return": [
                "dict",
                "numpy.ndarray",
                "Optional[numpy.dtype]"
            ],
            "arguments": {
                "series": [
                    "bool",
                    "str",
                    "Tuple[str, str]",
                    "Optional[str]",
                    "Optional[Callable]"
                ],
                "window": [
                    "int",
                    "bool",
                    "Dict[str,Any]",
                    "numpy.ndarray"
                ],
                "min_periods": [
                    "None",
                    "bool",
                    "Dict[str,Any]",
                    "numpy.ndarray"
                ]
            }
        },
        "rolling_weighted_mean": {
            "name": "rolling_weighted_mean",
            "location": 299,
            "return": [
                "Callable",
                "bytes",
                "BinaryIO",
                "List[List[int]]"
            ],
            "arguments": {
                "series": [
                    "float",
                    "Dict[str, Any]",
                    "bool",
                    "Optional[float]",
                    "int"
                ],
                "window": [
                    "int",
                    "numpy.ndarray",
                    "Dict",
                    "Optional[Dict[str,str]]",
                    "Dict[str,Any]"
                ],
                "min_periods": [
                    "None",
                    "int",
                    "numpy.ndarray",
                    "Dict",
                    "Optional[Dict[str,str]]",
                    "Dict[str,Any]"
                ]
            }
        },
        "hull_moving_average": {
            "name": "hull_moving_average",
            "location": 309,
            "return": [
                "bool"
            ],
            "arguments": {
                "series": [
                    "int",
                    "Dict[str, Any]",
                    "List[str]",
                    "Optional[int]",
                    "Callable"
                ],
                "window": [
                    "int",
                    "Optional[Sequence[int]]",
                    "bool",
                    "Union[int,float]",
                    "starfish.core.imagestack.imagestack.ImageStack"
                ],
                "min_periods": [
                    "None",
                    "Optional[Sequence[int]]",
                    "int",
                    "bool",
                    "Union[int,float]",
                    "starfish.core.imagestack.imagestack.ImageStack"
                ]
            }
        },
        "sma": {
            "name": "sma",
            "location": 318,
            "return": [
                "dict",
                "float",
                "int"
            ],
            "arguments": {
                "series": [
                    "bool",
                    "\"Rational\"",
                    "Optional[Exception]",
                    "Optional[int]"
                ],
                "window": [
                    "int",
                    "bool",
                    "Rational",
                    "Optional[Exception]",
                    "Optional[int]"
                ],
                "min_periods": [
                    "None",
                    "bool",
                    "Rational",
                    "Optional[Exception]",
                    "Optional[int]"
                ]
            }
        },
        "wma": {
            "name": "wma",
            "location": 324,
            "return": [
                "int",
                "bytes",
                "dict",
                "Callable[[bytes], bytes]"
            ],
            "arguments": {
                "series": [
                    "bool",
                    "Optional[int]"
                ],
                "window": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "min_periods": [
                    "None",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "hma": {
            "name": "hma",
            "location": 330,
            "return": [
                "int",
                "bytes",
                "dict",
                "Callable[[bytes], bytes]"
            ],
            "arguments": {
                "series": [
                    "bool",
                    "Optional[int]"
                ],
                "window": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "min_periods": [
                    "None",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "vwap": {
            "name": "vwap",
            "location": 336,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "bars": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "rolling_vwap": {
            "name": "rolling_vwap",
            "location": 353,
            "return": [
                "str",
                "List[dict]",
                "int",
                "numpy.ndarray"
            ],
            "arguments": {
                "bars": [],
                "window": [
                    "int",
                    "Optional[str]",
                    "Tuple[int,int]",
                    "object",
                    "Dict[str,Any]"
                ],
                "min_periods": [
                    "None",
                    "Optional[str]",
                    "Tuple[int,int]",
                    "object",
                    "Dict[str,Any]"
                ]
            }
        },
        "rsi": {
            "name": "rsi",
            "location": 374,
            "return": [
                "str",
                "List[dict]",
                "int",
                "numpy.ndarray"
            ],
            "arguments": {
                "series": [
                    "pandas.DataFrame",
                    "numpy.ndarray",
                    "Callable[[numpy.ndarray], numpy.ndarray]",
                    "List[Tuple[int, int]]"
                ],
                "window": [
                    "int",
                    "starfish.core.imagestack.imagestack.ImageStack",
                    "numpy.ndarray"
                ]
            }
        },
        "macd": {
            "name": "macd",
            "location": 409,
            "return": [
                "bool",
                "str",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "series": [
                    "str",
                    "int"
                ],
                "fast": [
                    "int",
                    "Dict",
                    "Tuple[float,float]",
                    "numpy.ndarray"
                ],
                "slow": [
                    "int",
                    "Dict",
                    "Tuple[float,float]",
                    "numpy.ndarray"
                ],
                "smooth": [
                    "int",
                    "float",
                    "Tuple[float,float]"
                ]
            }
        },
        "bollinger_bands": {
            "name": "bollinger_bands",
            "location": 429,
            "return": [
                "bool",
                "str",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "series": [
                    "str",
                    "bool",
                    "float",
                    "Optional[List[str]]",
                    "Callable",
                    "List[str]",
                    "Optional[Dict[str, str]]"
                ],
                "window": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "Optional[Exception]",
                    "Callable",
                    "numpy.ndarray"
                ],
                "stds": [
                    "int",
                    "float",
                    "bool",
                    "numpy.ndarray",
                    "bytes"
                ]
            }
        },
        "weighted_bollinger_bands": {
            "name": "weighted_bollinger_bands",
            "location": 444,
            "return": [
                "bool",
                "str",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "series": [
                    "int",
                    "float"
                ],
                "window": [
                    "int",
                    "float",
                    "Optional[Callable]",
                    "bool"
                ],
                "stds": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "returns": {
            "name": "returns",
            "location": 459,
            "return": [
                "List[dict]",
                "Dict[str, Any]",
                "str",
                "numpy.ndarray",
                "float"
            ],
            "arguments": {
                "series": [
                    "numpy.ndarray",
                    "Callable[[None], bool]",
                    "float",
                    "list"
                ]
            }
        },
        "log_returns": {
            "name": "log_returns",
            "location": 471,
            "return": [
                "str",
                "List[dict]",
                "float",
                "numpy.ndarray",
                "int",
                "Dict[str, Any]",
                "List[int]"
            ],
            "arguments": {
                "series": [
                    "numpy.ndarray",
                    "str",
                    "int",
                    "edp.gui.components.base.BaseMainWindowSection",
                    "Iterable[str]",
                    "bool",
                    "Callable"
                ]
            }
        },
        "implied_volatility": {
            "name": "implied_volatility",
            "location": 483,
            "return": [
                "numpy.ndarray",
                "List[dict]",
                "float",
                "int",
                "datetime.timedelta",
                "str"
            ],
            "arguments": {
                "series": [
                    "float",
                    "Tuple['cirq.Qid']",
                    "int"
                ],
                "window": [
                    "int",
                    "List[str]",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "pandas.DataFrame",
                    "List[Dict]",
                    "Optional[float]"
                ]
            }
        },
        "keltner_channel": {
            "name": "keltner_channel",
            "location": 496,
            "return": [
                "int",
                "bool",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "bars": [
                    "int",
                    "Dict[str, Any]",
                    "float",
                    "Callable"
                ],
                "window": [
                    "int",
                    "bool",
                    "float",
                    "Dict[str,Any]"
                ],
                "atrs": [
                    "int",
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "roc": {
            "name": "roc",
            "location": 512,
            "return": [
                "numpy.ndarray",
                "List[dict]",
                "float",
                "int",
                "datetime.timedelta",
                "str"
            ],
            "arguments": {
                "series": [
                    "int",
                    "numpy.ndarray",
                    "Union[int, float]",
                    "Dict[str, Any]",
                    "Union[numpy.ndarray, xarray.DataArray]",
                    "bool"
                ],
                "window": [
                    "int",
                    "List[str]",
                    "str",
                    "bool",
                    "Callable[[Any],None]",
                    "pandas.DataFrame",
                    "List[Dict]"
                ]
            }
        },
        "cci": {
            "name": "cci",
            "location": 522,
            "return": [
                "numpy.ndarray",
                "List[dict]",
                "float",
                "int",
                "datetime.timedelta",
                "str"
            ],
            "arguments": {
                "series": [
                    "bool",
                    "numpy.ndarray",
                    "pandas.DataFrame",
                    "bytes",
                    "int",
                    "shapely.geometry.base.BaseGeometry"
                ],
                "window": [
                    "int",
                    "List[datetime.time]",
                    "numpy.ndarray",
                    "List[str]",
                    "float"
                ]
            }
        },
        "stoch": {
            "name": "stoch",
            "location": 534,
            "return": [
                "str",
                "Optional[int]",
                "numpy.ndarray",
                "bool",
                "int"
            ],
            "arguments": {
                "df": [
                    "numpy.ndarray",
                    "pd.DataFrame",
                    "int",
                    "Optional[starfish.core.imagestack.imagestack.ImageStack]"
                ],
                "window": [
                    "bool",
                    "int"
                ],
                "d": [
                    "int",
                    "bool",
                    "bytes",
                    "float"
                ],
                "k": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "numpy.ndarray"
                ],
                "fast": [
                    "bool",
                    "float",
                    "Tuple",
                    "int",
                    "List[float]"
                ]
            }
        },
        "zlma": {
            "name": "zlma",
            "location": 562,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "series": [
                    "List[datetime.time]",
                    "int",
                    "numpy.ndarray",
                    "List[str]",
                    "float"
                ],
                "window": [
                    "int",
                    "bool",
                    "Optional[Union[int,str]]",
                    "Union[numpy.ndarray,numpy.void]",
                    "Optional[str]",
                    "Optional[numpy.ndarray]",
                    "static_frame.core.util.DtypesSpecifier",
                    "numpy.ndarray"
                ],
                "min_periods": [
                    "None",
                    "bool",
                    "Optional[Union[int,str]]",
                    "Union[numpy.ndarray,numpy.void]",
                    "Optional[str]",
                    "Optional[numpy.ndarray]",
                    "static_frame.core.util.DtypesSpecifier",
                    "numpy.ndarray"
                ],
                "kind": [
                    "Text",
                    "numpy.ndarray",
                    "Optional[numpy.ndarray]",
                    "Optional[List]",
                    "List",
                    "int"
                ]
            }
        },
        "zlema": {
            "name": "zlema",
            "location": 578,
            "return": [
                "List[str]",
                "int",
                "str",
                "Union[numpy.ndarray, numpy.void]"
            ],
            "arguments": {
                "series": [
                    "float",
                    "bool",
                    "str"
                ],
                "window": [
                    "float",
                    "bool",
                    "str"
                ],
                "min_periods": [
                    "None",
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "zlsma": {
            "name": "zlsma",
            "location": 582,
            "return": [
                "List[str]",
                "int",
                "str",
                "Union[numpy.ndarray, numpy.void]"
            ],
            "arguments": {
                "series": [
                    "float",
                    "bool",
                    "str"
                ],
                "window": [
                    "float",
                    "bool",
                    "str"
                ],
                "min_periods": [
                    "None",
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "zlhma": {
            "name": "zlhma",
            "location": 586,
            "return": [
                "List[str]",
                "int",
                "str",
                "Union[numpy.ndarray, numpy.void]"
            ],
            "arguments": {
                "series": [
                    "float",
                    "bool",
                    "str"
                ],
                "window": [
                    "float",
                    "bool",
                    "str"
                ],
                "min_periods": [
                    "None",
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "zscore": {
            "name": "zscore",
            "location": 592,
            "return": [
                "int",
                "bool",
                "Tuple[int]",
                "Hashable"
            ],
            "arguments": {
                "bars": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "Optional[float]"
                ],
                "window": [
                    "int",
                    "bool",
                    "List",
                    "str"
                ],
                "stds": [
                    "int",
                    "bool",
                    "Sequence[int]",
                    "Optional[str]"
                ],
                "col": [
                    "Text",
                    "int",
                    "bool",
                    "Dict[str,Any]",
                    "Optional[float]"
                ]
            }
        },
        "pvt": {
            "name": "pvt",
            "location": 601,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "bars": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "chopiness": {
            "name": "chopiness",
            "location": 608,
            "return": [
                "BaseException",
                "aiocometd.transports.base.Payload",
                "str"
            ],
            "arguments": {
                "bars": [
                    "bool",
                    "Tuple[int]",
                    "Dict[str, int]",
                    "int"
                ],
                "window": [
                    "int",
                    "Dict[str,int]"
                ]
            }
        },
        "numpy_rolling_series.func_wrapper": {
            "name": "func_wrapper",
            "location": 49,
            "return": [
                "List[str]",
                "bool",
                "str",
                "starfish.core.imagestack.parser.TileKey"
            ],
            "arguments": {
                "data": [
                    "bool",
                    "dict",
                    "list",
                    "str"
                ],
                "window": [
                    "list",
                    "Optional[List[str]]",
                    "tuple",
                    "Dict[str, Any]"
                ],
                "as_source": [
                    "bool",
                    "str",
                    "List[dict]",
                    "Type[object]",
                    "Type",
                    "Dict"
                ]
            }
        }
    },
    "freqtrade-develop/freqtrade/vendor/qtpylib/__init__.py": {},
    "freqtrade-develop/scripts/rest_client.py": {
        "add_arguments": {
            "name": "add_arguments",
            "location": 359,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {}
        },
        "load_config": {
            "name": "load_config",
            "location": 391,
            "return": [
                "Optional[dict]",
                "bool",
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "configfile": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "print_commands": {
            "name": "print_commands",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "FtRestClient.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serverurl": [
                    "str",
                    "bytes",
                    "int"
                ],
                "username": [
                    "None",
                    "str",
                    "bytes",
                    "int"
                ],
                "password": [
                    "None",
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "FtRestClient._call": {
            "name": "_call",
            "location": 39,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ],
                "apipath": [
                    "str",
                    "bool",
                    "int"
                ],
                "params": [
                    "None",
                    "Dict",
                    "bool",
                    "int",
                    "Optional[dict]",
                    "Optional[str]",
                    "str"
                ],
                "data": [
                    "None",
                    "str",
                    "Dict",
                    "Optional[str]",
                    "Mapping[str,str]"
                ],
                "files": [
                    "None",
                    "str",
                    "List[str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "FtRestClient._get": {
            "name": "_get",
            "location": 63,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "apipath": [
                    "bytes",
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "params": [
                    "None",
                    "bytes",
                    "str",
                    "Dict[str,str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "FtRestClient._delete": {
            "name": "_delete",
            "location": 66,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "apipath": [
                    "Union[str, IO]",
                    "str",
                    "IO[str]",
                    "bytes",
                    "Dict[str, str]"
                ],
                "params": [
                    "None",
                    "Union[str,IO]",
                    "str",
                    "IO[str]",
                    "bytes",
                    "Dict[str,str]"
                ]
            }
        },
        "FtRestClient._post": {
            "name": "_post",
            "location": 69,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "apipath": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "bytes"
                ],
                "params": [
                    "None",
                    "Dict",
                    "str",
                    "Dict[str,Any]",
                    "bytes"
                ],
                "data": [
                    "None",
                    "Dict",
                    "str",
                    "Dict[str,Any]",
                    "bytes"
                ]
            }
        },
        "FtRestClient.start": {
            "name": "start",
            "location": 72,
            "return": [
                "str",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FtRestClient.stop": {
            "name": "stop",
            "location": 79,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FtRestClient.stopbuy": {
            "name": "stopbuy",
            "location": 86,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FtRestClient.reload_config": {
            "name": "reload_config",
            "location": 93,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FtRestClient.balance": {
            "name": "balance",
            "location": 100,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FtRestClient.count": {
            "name": "count",
            "location": 107,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FtRestClient.locks": {
            "name": "locks",
            "location": 114,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FtRestClient.delete_lock": {
            "name": "delete_lock",
            "location": 121,
            "return": [
                "str",
                "dict",
                "Union[int, float]"
            ],
            "arguments": {
                "self": [],
                "lock_id": [
                    "str",
                    "int"
                ]
            }
        },
        "FtRestClient.daily": {
            "name": "daily",
            "location": 129,
            "return": [
                "int",
                "Optional[int]",
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "days": [
                    "None",
                    "Optional[int]",
                    "int",
                    "bool",
                    "Dict[str,Any]"
                ]
            }
        },
        "FtRestClient.edge": {
            "name": "edge",
            "location": 136,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FtRestClient.profit": {
            "name": "profit",
            "location": 143,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FtRestClient.stats": {
            "name": "stats",
            "location": 150,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FtRestClient.performance": {
            "name": "performance",
            "location": 157,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FtRestClient.status": {
            "name": "status",
            "location": 164,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FtRestClient.version": {
            "name": "version",
            "location": 171,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FtRestClient.show_config": {
            "name": "show_config",
            "location": 178,
            "return": [
                "Dict[str, Any]",
                "List[str]",
                "Optional[pathlib.Path]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FtRestClient.ping": {
            "name": "ping",
            "location": 185,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FtRestClient.logs": {
            "name": "logs",
            "location": 195,
            "return": [
                "Callable",
                "str",
                "Optional[str]",
                "Awaitable[T_co]",
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "None",
                    "str",
                    "bool",
                    "Dict[str,str]",
                    "bytes"
                ]
            }
        },
        "FtRestClient.trades": {
            "name": "trades",
            "location": 203,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "None",
                    "int",
                    "Callable",
                    "str"
                ],
                "offset": [
                    "None",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "FtRestClient.trade": {
            "name": "trade",
            "location": 217,
            "return": [
                "Optional[bool]",
                "str"
            ],
            "arguments": {
                "self": [],
                "trade_id": [
                    "str",
                    "int"
                ]
            }
        },
        "FtRestClient.delete_trade": {
            "name": "delete_trade",
            "location": 225,
            "return": [
                "str",
                "dict",
                "Union[int, float]"
            ],
            "arguments": {
                "self": [],
                "trade_id": [
                    "str",
                    "int"
                ]
            }
        },
        "FtRestClient.whitelist": {
            "name": "whitelist",
            "location": 234,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FtRestClient.blacklist": {
            "name": "blacklist",
            "location": 241,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FtRestClient.forcebuy": {
            "name": "forcebuy",
            "location": 252,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str"
                ],
                "price": [
                    "str",
                    "None"
                ]
            }
        },
        "FtRestClient.forceenter": {
            "name": "forceenter",
            "location": 264,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str"
                ],
                "side": [
                    "str"
                ],
                "price": [
                    "str",
                    "None"
                ]
            }
        },
        "FtRestClient.forceexit": {
            "name": "forceexit",
            "location": 278,
            "return": [
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "tradeid": [
                    "str",
                    "float",
                    "bytes",
                    "dict",
                    "IO[str]"
                ]
            }
        },
        "FtRestClient.strategies": {
            "name": "strategies",
            "location": 287,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FtRestClient.strategy": {
            "name": "strategy",
            "location": 294,
            "return": [
                "int",
                "dict",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "strategy": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "FtRestClient.plot_config": {
            "name": "plot_config",
            "location": 302,
            "return": [
                "Dict[str, Any]",
                "List[str]",
                "Optional[pathlib.Path]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FtRestClient.available_pairs": {
            "name": "available_pairs",
            "location": 309,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": [],
                "timeframe": [
                    "None",
                    "str",
                    "Dict[str,str]",
                    "bytes"
                ],
                "stake_currency": [
                    "None",
                    "str",
                    "Dict[str,str]",
                    "bytes"
                ]
            }
        },
        "FtRestClient.pair_candles": {
            "name": "pair_candles",
            "location": 321,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "Dict[str, str]",
                    "bytes"
                ],
                "timeframe": [
                    "str",
                    "Dict[str, str]",
                    "bytes"
                ],
                "limit": [
                    "None",
                    "str",
                    "Dict[str,str]",
                    "bytes"
                ]
            }
        },
        "FtRestClient.pair_history": {
            "name": "pair_history",
            "location": 335,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "Dict[str, str]",
                    "bytes"
                ],
                "timeframe": [
                    "str",
                    "Dict[str, str]",
                    "bytes"
                ],
                "strategy": [
                    "str",
                    "Dict[str, str]",
                    "bytes"
                ],
                "timerange": [
                    "None",
                    "str",
                    "Dict[str,str]",
                    "bytes"
                ]
            }
        },
        "FtRestClient.sysinfo": {
            "name": "sysinfo",
            "location": 351,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "freqtrade-develop/tests/conftest.py": {
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "config": []
            }
        },
        "log_has": {
            "name": "log_has",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "line": [],
                "logs": []
            }
        },
        "log_has_re": {
            "name": "log_has_re",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "line": [],
                "logs": []
            }
        },
        "num_log_has": {
            "name": "num_log_has",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "line": [],
                "logs": []
            }
        },
        "num_log_has_re": {
            "name": "num_log_has_re",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "line": [],
                "logs": []
            }
        },
        "get_args": {
            "name": "get_args",
            "location": 76,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "get_mock_coro": {
            "name": "get_mock_coro",
            "location": 82,
            "return": [
                "Mock"
            ],
            "arguments": {
                "return_value": [
                    "None"
                ],
                "side_effect": [
                    "None"
                ]
            }
        },
        "patched_configuration_load_config_file": {
            "name": "patched_configuration_load_config_file",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "config": []
            }
        },
        "patch_exchange": {
            "name": "patch_exchange",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "api_mock": [
                    "None"
                ],
                "id": [
                    "typing.Text"
                ],
                "mock_markets": [
                    "bool"
                ],
                "mock_supported_modes": [
                    "bool"
                ]
            }
        },
        "get_patched_exchange": {
            "name": "get_patched_exchange",
            "location": 149,
            "return": [
                "Exchange"
            ],
            "arguments": {
                "mocker": [],
                "config": [],
                "api_mock": [
                    "None"
                ],
                "id": [
                    "typing.Text"
                ],
                "mock_markets": [
                    "bool"
                ],
                "mock_supported_modes": [
                    "bool"
                ]
            }
        },
        "patch_wallet": {
            "name": "patch_wallet",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "free": [
                    "float"
                ]
            }
        },
        "patch_whitelist": {
            "name": "patch_whitelist",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "conf": []
            }
        },
        "patch_edge": {
            "name": "patch_edge",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "patch_freqtradebot": {
            "name": "patch_freqtradebot",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "config": []
            }
        },
        "get_patched_freqtradebot": {
            "name": "get_patched_freqtradebot",
            "location": 203,
            "return": [
                "FreqtradeBot"
            ],
            "arguments": {
                "mocker": [],
                "config": []
            }
        },
        "get_patched_worker": {
            "name": "get_patched_worker",
            "location": 215,
            "return": [
                "Worker"
            ],
            "arguments": {
                "mocker": [],
                "config": []
            }
        },
        "patch_get_signal": {
            "name": "patch_get_signal",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "freqtrade": [],
                "enter_long": [
                    "bool"
                ],
                "exit_long": [
                    "bool"
                ],
                "enter_short": [
                    "bool"
                ],
                "exit_short": [
                    "bool"
                ],
                "enter_tag": [
                    "None"
                ],
                "exit_tag": [
                    "None"
                ]
            }
        },
        "create_mock_trades": {
            "name": "create_mock_trades",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "fee": [],
                "is_short": [
                    "bool"
                ],
                "use_db": [
                    "bool"
                ]
            }
        },
        "create_mock_trades_with_leverage": {
            "name": "create_mock_trades_with_leverage",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "fee": [],
                "use_db": [
                    "bool"
                ]
            }
        },
        "create_mock_trades_usdt": {
            "name": "create_mock_trades_usdt",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "fee": [],
                "is_short": [
                    "bool"
                ],
                "use_db": [
                    "bool"
                ]
            }
        },
        "patch_coingekko": {
            "name": "patch_coingekko",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "init_persistence": {
            "name": "init_persistence",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": []
            }
        },
        "default_conf": {
            "name": "default_conf",
            "location": 406,
            "return": [],
            "arguments": {
                "testdatadir": []
            }
        },
        "default_conf_usdt": {
            "name": "default_conf_usdt",
            "location": 411,
            "return": [],
            "arguments": {
                "testdatadir": []
            }
        },
        "get_default_conf": {
            "name": "get_default_conf",
            "location": 415,
            "return": [
                "dict[typing.Text, typing.Union[int,typing.Text,float,dict[typing.Text, typing.Union[float,bool,dict[typing.Text, bool]]],dict[typing.Text, typing.Union[typing.Text,bool,list[typing.Text]]],list[dict[typing.Text, typing.Text]],dict[typing.Text, typing.Union[bool,typing.Text,dict]],Path]]"
            ],
            "arguments": {
                "testdatadir": []
            }
        },
        "get_default_conf_usdt": {
            "name": "get_default_conf_usdt",
            "location": 490,
            "return": [],
            "arguments": {
                "testdatadir": []
            }
        },
        "update": {
            "name": "update",
            "location": 517,
            "return": [],
            "arguments": {}
        },
        "fee": {
            "name": "fee",
            "location": 524,
            "return": [
                "MagicMock"
            ],
            "arguments": {}
        },
        "ticker": {
            "name": "ticker",
            "location": 529,
            "return": [
                "MagicMock"
            ],
            "arguments": {}
        },
        "ticker_sell_up": {
            "name": "ticker_sell_up",
            "location": 538,
            "return": [
                "MagicMock"
            ],
            "arguments": {}
        },
        "ticker_sell_down": {
            "name": "ticker_sell_down",
            "location": 547,
            "return": [
                "MagicMock"
            ],
            "arguments": {}
        },
        "ticker_usdt": {
            "name": "ticker_usdt",
            "location": 556,
            "return": [
                "MagicMock"
            ],
            "arguments": {}
        },
        "ticker_usdt_sell_up": {
            "name": "ticker_usdt_sell_up",
            "location": 565,
            "return": [
                "MagicMock"
            ],
            "arguments": {}
        },
        "ticker_usdt_sell_down": {
            "name": "ticker_usdt_sell_down",
            "location": 574,
            "return": [
                "MagicMock"
            ],
            "arguments": {}
        },
        "markets": {
            "name": "markets",
            "location": 583,
            "return": [],
            "arguments": {}
        },
        "get_markets": {
            "name": "get_markets",
            "location": 587,
            "return": [],
            "arguments": {}
        },
        "markets_static": {
            "name": "markets_static",
            "location": 1412,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {}
        },
        "shitcoinmarkets": {
            "name": "shitcoinmarkets",
            "location": 1425,
            "return": [],
            "arguments": {
                "markets_static": []
            }
        },
        "markets_empty": {
            "name": "markets_empty",
            "location": 1619,
            "return": [
                "MagicMock"
            ],
            "arguments": {}
        },
        "limit_buy_order_open": {
            "name": "limit_buy_order_open",
            "location": 1624,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,float,None]]"
            ],
            "arguments": {}
        },
        "limit_buy_order": {
            "name": "limit_buy_order",
            "location": 1643,
            "return": [],
            "arguments": {
                "limit_buy_order_open": []
            }
        },
        "limit_buy_order_old": {
            "name": "limit_buy_order_old",
            "location": 1652,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,float]]"
            ],
            "arguments": {}
        },
        "limit_sell_order_old": {
            "name": "limit_sell_order_old",
            "location": 1669,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,float]]"
            ],
            "arguments": {}
        },
        "limit_buy_order_old_partial": {
            "name": "limit_buy_order_old_partial",
            "location": 1686,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,float]]"
            ],
            "arguments": {}
        },
        "limit_buy_order_old_partial_canceled": {
            "name": "limit_buy_order_old_partial_canceled",
            "location": 1703,
            "return": [],
            "arguments": {
                "limit_buy_order_old_partial": []
            }
        },
        "limit_buy_order_canceled_empty": {
            "name": "limit_buy_order_canceled_empty",
            "location": 1711,
            "return": [
                "dict[typing.Text, typing.Union[dict,typing.Text,None,float]]",
                "dict[typing.Text, typing.Union[typing.Text,None,float,dict[typing.Text, typing.Union[float,None,typing.Text]],list]]"
            ],
            "arguments": {
                "request": []
            }
        },
        "limit_sell_order_open": {
            "name": "limit_sell_order_open",
            "location": 1804,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,float]]"
            ],
            "arguments": {}
        },
        "limit_sell_order": {
            "name": "limit_sell_order",
            "location": 1821,
            "return": [],
            "arguments": {
                "limit_sell_order_open": []
            }
        },
        "order_book_l2": {
            "name": "order_book_l2",
            "location": 1830,
            "return": [
                "MagicMock"
            ],
            "arguments": {}
        },
        "order_book_l2_usd": {
            "name": "order_book_l2_usd",
            "location": 1863,
            "return": [
                "MagicMock"
            ],
            "arguments": {}
        },
        "ohlcv_history_list": {
            "name": "ohlcv_history_list",
            "location": 1897,
            "return": [
                "list[list[typing.Union[int,float]]]"
            ],
            "arguments": {}
        },
        "ohlcv_history": {
            "name": "ohlcv_history",
            "location": 1927,
            "return": [],
            "arguments": {
                "ohlcv_history_list": []
            }
        },
        "tickers": {
            "name": "tickers",
            "location": 1933,
            "return": [
                "MagicMock"
            ],
            "arguments": {}
        },
        "result": {
            "name": "result",
            "location": 2287,
            "return": [],
            "arguments": {
                "testdatadir": []
            }
        },
        "trades_for_order": {
            "name": "trades_for_order",
            "location": 2294,
            "return": [
                "list[dict[typing.Text, typing.Union[dict[typing.Text, typing.Union[int,typing.Text]],int,typing.Text,None,float,dict[typing.Text, typing.Union[float,typing.Text]]]]]"
            ],
            "arguments": {}
        },
        "trades_history": {
            "name": "trades_history",
            "location": 2326,
            "return": [
                "list[list[typing.Union[int,typing.Text,None,float]]]"
            ],
            "arguments": {}
        },
        "fetch_trades_result": {
            "name": "fetch_trades_result",
            "location": 2335,
            "return": [
                "list[dict[typing.Text, typing.Union[dict[typing.Text, typing.Union[int,typing.Text]],int,typing.Text,None,float]]]"
            ],
            "arguments": {}
        },
        "trades_for_order2": {
            "name": "trades_for_order2",
            "location": 2439,
            "return": [
                "list[dict[typing.Text, typing.Union[int,typing.Text,None,float,dict[typing.Text, typing.Union[float,typing.Text]]]]]"
            ],
            "arguments": {}
        },
        "buy_order_fee": {
            "name": "buy_order_fee",
            "location": 2467,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,float,None]]"
            ],
            "arguments": {}
        },
        "edge_conf": {
            "name": "edge_conf",
            "location": 2485,
            "return": [],
            "arguments": {
                "default_conf": []
            }
        },
        "rpc_balance": {
            "name": "rpc_balance",
            "location": 2510,
            "return": [
                "dict[typing.Text, dict[typing.Text, float]]"
            ],
            "arguments": {}
        },
        "testdatadir": {
            "name": "testdatadir",
            "location": 2546,
            "return": [],
            "arguments": {}
        },
        "import_fails": {
            "name": "import_fails",
            "location": 2552,
            "return": [
                "typing.Generator"
            ],
            "arguments": {}
        },
        "open_trade": {
            "name": "open_trade",
            "location": 2573,
            "return": [
                "Trade"
            ],
            "arguments": {}
        },
        "open_trade_usdt": {
            "name": "open_trade_usdt",
            "location": 2609,
            "return": [
                "Trade"
            ],
            "arguments": {}
        },
        "saved_hyperopt_results": {
            "name": "saved_hyperopt_results",
            "location": 2645,
            "return": [],
            "arguments": {}
        },
        "limit_buy_order_usdt_open": {
            "name": "limit_buy_order_usdt_open",
            "location": 2796,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,float]]"
            ],
            "arguments": {}
        },
        "limit_buy_order_usdt": {
            "name": "limit_buy_order_usdt",
            "location": 2814,
            "return": [],
            "arguments": {
                "limit_buy_order_usdt_open": []
            }
        },
        "limit_sell_order_usdt_open": {
            "name": "limit_sell_order_usdt_open",
            "location": 2823,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,float]]"
            ],
            "arguments": {}
        },
        "limit_sell_order_usdt": {
            "name": "limit_sell_order_usdt",
            "location": 2841,
            "return": [],
            "arguments": {
                "limit_sell_order_usdt_open": []
            }
        },
        "market_buy_order_usdt": {
            "name": "market_buy_order_usdt",
            "location": 2850,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,float]]"
            ],
            "arguments": {}
        },
        "market_buy_order_usdt_doublefee": {
            "name": "market_buy_order_usdt_doublefee",
            "location": 2867,
            "return": [],
            "arguments": {
                "market_buy_order_usdt": []
            }
        },
        "market_sell_order_usdt": {
            "name": "market_sell_order_usdt",
            "location": 2907,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,float]]"
            ],
            "arguments": {}
        },
        "limit_order": {
            "name": "limit_order",
            "location": 2924,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "limit_buy_order_usdt": [],
                "limit_sell_order_usdt": []
            }
        },
        "limit_order_open": {
            "name": "limit_order_open",
            "location": 2932,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "limit_buy_order_usdt_open": [],
                "limit_sell_order_usdt_open": []
            }
        },
        "mark_ohlcv": {
            "name": "mark_ohlcv",
            "location": 2940,
            "return": [
                "list[list[typing.Union[int,float]]]"
            ],
            "arguments": {}
        },
        "funding_rate_history_hourly": {
            "name": "funding_rate_history_hourly",
            "location": 2960,
            "return": [
                "list[dict[typing.Text, typing.Union[typing.Text,float,int]]]"
            ],
            "arguments": {}
        },
        "funding_rate_history_octohourly": {
            "name": "funding_rate_history_octohourly",
            "location": 3050,
            "return": [
                "list[dict[typing.Text, typing.Union[typing.Text,float,int]]]"
            ],
            "arguments": {}
        },
        "leverage_tiers": {
            "name": "leverage_tiers",
            "location": 3068,
            "return": [
                "dict[typing.Text, list[dict[typing.Text, typing.Union[int,float]]]]"
            ],
            "arguments": {}
        },
        "patch_get_signal.patched_get_entry_signal": {
            "name": "patched_get_entry_signal",
            "location": 240,
            "return": [
                "tuple[None]"
            ],
            "arguments": {}
        },
        "patch_get_signal.patched_get_exit_signal": {
            "name": "patched_get_exit_signal",
            "location": 251,
            "return": [
                "tuple"
            ],
            "arguments": {
                "pair": [],
                "timeframe": [],
                "dataframe": [],
                "is_short": []
            }
        },
        "create_mock_trades.add_trade": {
            "name": "add_trade",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "trade": []
            }
        },
        "create_mock_trades_with_leverage.add_trade": {
            "name": "add_trade",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "trade": []
            }
        },
        "create_mock_trades_usdt.add_trade": {
            "name": "add_trade",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "trade": []
            }
        },
        "import_fails.mockedimport": {
            "name": "mockedimport",
            "location": 2558,
            "return": [],
            "arguments": {
                "name": []
            }
        }
    },
    "freqtrade-develop/tests/conftest_trades.py": {
        "entry_side": {
            "name": "entry_side",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "is_short": [
                    "bool",
                    "str"
                ]
            }
        },
        "exit_side": {
            "name": "exit_side",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "is_short": [
                    "bool",
                    "str"
                ]
            }
        },
        "direc": {
            "name": "direc",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "is_short": [
                    "bool",
                    "str"
                ]
            }
        },
        "mock_order_1": {
            "name": "mock_order_1",
            "location": 21,
            "return": [
                "Dict[(str, Union[(float, str)])]"
            ],
            "arguments": {
                "is_short": [
                    "Callable[[recidiviz.persistence.database.session.Session], bool]",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "mock_trade_1": {
            "name": "mock_trade_1",
            "location": 37,
            "return": [
                "freqtrade.persistence.trade_model.Trade"
            ],
            "arguments": {
                "fee": [
                    "bool",
                    "zerver.models.UserProfile",
                    "int"
                ],
                "is_short": [
                    "bool",
                    "zerver.models.UserProfile",
                    "int"
                ]
            }
        },
        "mock_order_2": {
            "name": "mock_order_2",
            "location": 59,
            "return": [
                "Dict[(str, Union[(float, str)])]"
            ],
            "arguments": {
                "is_short": [
                    "Callable[[recidiviz.persistence.database.session.Session], bool]",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "mock_order_2_sell": {
            "name": "mock_order_2_sell",
            "location": 74,
            "return": [
                "Dict[(str, Union[(float, str)])]"
            ],
            "arguments": {
                "is_short": [
                    "Callable[[recidiviz.persistence.database.session.Session], bool]",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "mock_trade_2": {
            "name": "mock_trade_2",
            "location": 89,
            "return": [
                "freqtrade.persistence.trade_model.Trade"
            ],
            "arguments": {
                "fee": [
                    "bool",
                    "zerver.models.UserProfile"
                ],
                "is_short": [
                    "bool",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "mock_order_3": {
            "name": "mock_order_3",
            "location": 122,
            "return": [
                "Dict[(str, Union[(float, str)])]"
            ],
            "arguments": {
                "is_short": [
                    "Callable[[recidiviz.persistence.database.session.Session], bool]",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "mock_order_3_sell": {
            "name": "mock_order_3_sell",
            "location": 137,
            "return": [
                "Dict[(str, Union[(float, str)])]"
            ],
            "arguments": {
                "is_short": [
                    "Callable[[recidiviz.persistence.database.session.Session], bool]",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "mock_trade_3": {
            "name": "mock_trade_3",
            "location": 153,
            "return": [
                "freqtrade.persistence.trade_model.Trade"
            ],
            "arguments": {
                "fee": [
                    "bool",
                    "zerver.models.UserProfile"
                ],
                "is_short": [
                    "bool",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "mock_order_4": {
            "name": "mock_order_4",
            "location": 184,
            "return": [
                "Dict[(str, Union[(float, str)])]"
            ],
            "arguments": {
                "is_short": [
                    "Callable[[recidiviz.persistence.database.session.Session], bool]",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "mock_trade_4": {
            "name": "mock_trade_4",
            "location": 199,
            "return": [
                "freqtrade.persistence.trade_model.Trade"
            ],
            "arguments": {
                "fee": [
                    "bool",
                    "zerver.models.UserProfile",
                    "str"
                ],
                "is_short": [
                    "bool",
                    "zerver.models.UserProfile",
                    "str"
                ]
            }
        },
        "mock_order_5": {
            "name": "mock_order_5",
            "location": 224,
            "return": [
                "Dict[(str, Union[(float, str)])]"
            ],
            "arguments": {
                "is_short": [
                    "Callable[[recidiviz.persistence.database.session.Session], bool]",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "mock_order_5_stoploss": {
            "name": "mock_order_5_stoploss",
            "location": 239,
            "return": [
                "Dict[(str, Union[(float, str)])]"
            ],
            "arguments": {
                "is_short": [
                    "Callable[[recidiviz.persistence.database.session.Session], bool]",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "mock_trade_5": {
            "name": "mock_trade_5",
            "location": 254,
            "return": [
                "freqtrade.persistence.trade_model.Trade"
            ],
            "arguments": {
                "fee": [
                    "bool",
                    "zerver.models.UserProfile",
                    "str"
                ],
                "is_short": [
                    "bool",
                    "zerver.models.UserProfile",
                    "str"
                ]
            }
        },
        "mock_order_6": {
            "name": "mock_order_6",
            "location": 282,
            "return": [
                "Dict[(str, Union[(float, str)])]"
            ],
            "arguments": {
                "is_short": [
                    "Callable[[recidiviz.persistence.database.session.Session], bool]",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "mock_order_6_sell": {
            "name": "mock_order_6_sell",
            "location": 297,
            "return": [
                "Dict[(str, Union[(float, str)])]"
            ],
            "arguments": {
                "is_short": [
                    "Callable[[recidiviz.persistence.database.session.Session], bool]",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "mock_trade_6": {
            "name": "mock_trade_6",
            "location": 312,
            "return": [
                "freqtrade.persistence.trade_model.Trade"
            ],
            "arguments": {
                "fee": [
                    "datetime.datetime",
                    "Optional[int]",
                    "str",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                    "core.models.Subtask",
                    "models.Submission"
                ],
                "is_short": [
                    "datetime.datetime",
                    "Optional[int]",
                    "str",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                    "core.models.Subtask",
                    "models.Submission"
                ]
            }
        },
        "short_order": {
            "name": "short_order",
            "location": 340,
            "return": [
                "Dict[(str, Union[(float, str)])]"
            ],
            "arguments": {}
        },
        "exit_short_order": {
            "name": "exit_short_order",
            "location": 355,
            "return": [
                "Dict[(str, Union[(float, str)])]"
            ],
            "arguments": {}
        },
        "short_trade": {
            "name": "short_trade",
            "location": 370,
            "return": [
                "freqtrade.persistence.trade_model.Trade"
            ],
            "arguments": {
                "fee": [
                    "List[recidiviz.persistence.database.schema.state.schema.StatePerson]",
                    "bytes",
                    "django.db.models.Model",
                    "int"
                ]
            }
        },
        "leverage_order": {
            "name": "leverage_order",
            "location": 428,
            "return": [
                "Dict[(str, Union[(float, str)])]"
            ],
            "arguments": {}
        },
        "leverage_order_sell": {
            "name": "leverage_order_sell",
            "location": 444,
            "return": [
                "Dict[(str, Union[(float, str)])]"
            ],
            "arguments": {}
        },
        "leverage_trade": {
            "name": "leverage_trade",
            "location": 460,
            "return": [
                "freqtrade.persistence.trade_model.Trade"
            ],
            "arguments": {
                "fee": [
                    "List[recidiviz.persistence.database.schema.state.schema.StatePerson]",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "freqtrade-develop/tests/conftest_trades_usdt.py": {
        "entry_side": {
            "name": "entry_side",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "is_short": [
                    "bool",
                    "str"
                ]
            }
        },
        "exit_side": {
            "name": "exit_side",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "is_short": [
                    "bool",
                    "str"
                ]
            }
        },
        "direc": {
            "name": "direc",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "is_short": [
                    "bool",
                    "str"
                ]
            }
        },
        "mock_order_usdt_1": {
            "name": "mock_order_usdt_1",
            "location": 21,
            "return": [
                "Dict[(str, Union[(float, str)])]"
            ],
            "arguments": {
                "is_short": [
                    "Callable[[recidiviz.persistence.database.session.Session], bool]",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "mock_order_usdt_1_exit": {
            "name": "mock_order_usdt_1_exit",
            "location": 35,
            "return": [
                "Dict[(str, Union[(float, str)])]"
            ],
            "arguments": {
                "is_short": [
                    "Callable[[recidiviz.persistence.database.session.Session], bool]",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "mock_trade_usdt_1": {
            "name": "mock_trade_usdt_1",
            "location": 49,
            "return": [
                "freqtrade.persistence.trade_model.Trade"
            ],
            "arguments": {
                "fee": [
                    "datetime.datetime",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                    "Optional[int]",
                    "str",
                    "bool",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionContact]",
                    "List[recidiviz.persistence.entity.state.entities.StateIncarcerationSentence]"
                ],
                "is_short": [
                    "datetime.datetime",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                    "Optional[int]",
                    "str",
                    "bool",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionContact]",
                    "List[recidiviz.persistence.entity.state.entities.StateIncarcerationSentence]"
                ]
            }
        },
        "mock_order_usdt_2": {
            "name": "mock_order_usdt_2",
            "location": 81,
            "return": [
                "Dict[(str, Union[(float, str)])]"
            ],
            "arguments": {
                "is_short": [
                    "Callable[[recidiviz.persistence.database.session.Session], bool]",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "mock_order_usdt_2_exit": {
            "name": "mock_order_usdt_2_exit",
            "location": 95,
            "return": [
                "Dict[(str, Union[(float, str)])]"
            ],
            "arguments": {
                "is_short": [
                    "Callable[[recidiviz.persistence.database.session.Session], bool]",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "mock_trade_usdt_2": {
            "name": "mock_trade_usdt_2",
            "location": 109,
            "return": [
                "freqtrade.persistence.trade_model.Trade"
            ],
            "arguments": {
                "fee": [
                    "bool",
                    "zerver.models.UserProfile"
                ],
                "is_short": [
                    "bool",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "mock_order_usdt_3": {
            "name": "mock_order_usdt_3",
            "location": 143,
            "return": [
                "Dict[(str, Union[(float, str)])]"
            ],
            "arguments": {
                "is_short": [
                    "Callable[[recidiviz.persistence.database.session.Session], bool]",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "mock_order_usdt_3_exit": {
            "name": "mock_order_usdt_3_exit",
            "location": 157,
            "return": [
                "Dict[(str, Union[(float, str)])]"
            ],
            "arguments": {
                "is_short": [
                    "Callable[[recidiviz.persistence.database.session.Session], bool]",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "mock_trade_usdt_3": {
            "name": "mock_trade_usdt_3",
            "location": 172,
            "return": [
                "freqtrade.persistence.trade_model.Trade"
            ],
            "arguments": {
                "fee": [
                    "bool",
                    "zerver.models.UserProfile"
                ],
                "is_short": [
                    "bool",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "mock_order_usdt_4": {
            "name": "mock_order_usdt_4",
            "location": 205,
            "return": [
                "Dict[(str, Union[(float, str)])]"
            ],
            "arguments": {
                "is_short": [
                    "Callable[[recidiviz.persistence.database.session.Session], bool]",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "mock_trade_usdt_4": {
            "name": "mock_trade_usdt_4",
            "location": 219,
            "return": [
                "freqtrade.persistence.trade_model.Trade"
            ],
            "arguments": {
                "fee": [
                    "bool",
                    "zerver.models.UserProfile",
                    "str"
                ],
                "is_short": [
                    "bool",
                    "zerver.models.UserProfile",
                    "str"
                ]
            }
        },
        "mock_order_usdt_5": {
            "name": "mock_order_usdt_5",
            "location": 244,
            "return": [
                "Dict[(str, Union[(float, str)])]"
            ],
            "arguments": {
                "is_short": [
                    "Callable[[recidiviz.persistence.database.session.Session], bool]",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "mock_order_usdt_5_stoploss": {
            "name": "mock_order_usdt_5_stoploss",
            "location": 258,
            "return": [
                "Dict[(str, Union[(float, str)])]"
            ],
            "arguments": {
                "is_short": [
                    "Callable[[recidiviz.persistence.database.session.Session], bool]",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "mock_trade_usdt_5": {
            "name": "mock_trade_usdt_5",
            "location": 272,
            "return": [
                "freqtrade.persistence.trade_model.Trade"
            ],
            "arguments": {
                "fee": [
                    "bool",
                    "zerver.models.UserProfile",
                    "str"
                ],
                "is_short": [
                    "bool",
                    "zerver.models.UserProfile",
                    "str"
                ]
            }
        },
        "mock_order_usdt_6": {
            "name": "mock_order_usdt_6",
            "location": 299,
            "return": [
                "Dict[(str, Union[(float, str)])]"
            ],
            "arguments": {
                "is_short": [
                    "Callable[[recidiviz.persistence.database.session.Session], bool]",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "mock_order_usdt_6_exit": {
            "name": "mock_order_usdt_6_exit",
            "location": 313,
            "return": [
                "Dict[(str, Union[(float, str)])]"
            ],
            "arguments": {
                "is_short": [
                    "Callable[[recidiviz.persistence.database.session.Session], bool]",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "mock_trade_usdt_6": {
            "name": "mock_trade_usdt_6",
            "location": 327,
            "return": [
                "freqtrade.persistence.trade_model.Trade"
            ],
            "arguments": {
                "fee": [
                    "datetime.datetime",
                    "Optional[int]",
                    "str",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                    "core.models.Subtask",
                    "models.Submission"
                ],
                "is_short": [
                    "datetime.datetime",
                    "Optional[int]",
                    "str",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                    "core.models.Subtask",
                    "models.Submission"
                ]
            }
        },
        "mock_order_usdt_7": {
            "name": "mock_order_usdt_7",
            "location": 355,
            "return": [
                "Dict[(str, Union[(float, str)])]"
            ],
            "arguments": {
                "is_short": [
                    "Callable[[recidiviz.persistence.database.session.Session], bool]",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "mock_trade_usdt_7": {
            "name": "mock_trade_usdt_7",
            "location": 369,
            "return": [
                "freqtrade.persistence.trade_model.Trade"
            ],
            "arguments": {
                "fee": [
                    "bool",
                    "zerver.models.UserProfile",
                    "int"
                ],
                "is_short": [
                    "bool",
                    "zerver.models.UserProfile",
                    "int"
                ]
            }
        }
    },
    "freqtrade-develop/tests/test_arguments.py": {
        "test_parse_args_none": {
            "name": "test_parse_args_none",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_args_defaults": {
            "name": "test_parse_args_defaults",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_parse_args_default_userdatadir": {
            "name": "test_parse_args_default_userdatadir",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_parse_args_userdatadir": {
            "name": "test_parse_args_userdatadir",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_parse_args_config": {
            "name": "test_parse_args_config",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_args_db_url": {
            "name": "test_parse_args_db_url",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_args_verbose": {
            "name": "test_parse_args_verbose",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_common_scripts_options": {
            "name": "test_common_scripts_options",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_args_version": {
            "name": "test_parse_args_version",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_args_invalid": {
            "name": "test_parse_args_invalid",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_args_strategy": {
            "name": "test_parse_args_strategy",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_args_strategy_invalid": {
            "name": "test_parse_args_strategy_invalid",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_args_strategy_path": {
            "name": "test_parse_args_strategy_path",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_args_strategy_path_invalid": {
            "name": "test_parse_args_strategy_path_invalid",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_args_backtesting_invalid": {
            "name": "test_parse_args_backtesting_invalid",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_args_backtesting_custom": {
            "name": "test_parse_args_backtesting_custom",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_args_hyperopt_custom": {
            "name": "test_parse_args_hyperopt_custom",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_download_data_options": {
            "name": "test_download_data_options",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_plot_dataframe_options": {
            "name": "test_plot_dataframe_options",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_plot_profit_options": {
            "name": "test_plot_profit_options",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "auto_open_arg": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "int"
                ]
            }
        },
        "test_config_notallowed": {
            "name": "test_config_notallowed",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "tests.async_mock.MagicMock",
                    "pathlib.Path",
                    "str",
                    "int"
                ]
            }
        },
        "test_config_notrequired": {
            "name": "test_config_notrequired",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "str",
                    "tests.async_mock.MagicMock",
                    "pathlib.Path",
                    "int"
                ]
            }
        },
        "test_check_int_positive": {
            "name": "test_check_int_positive",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_check_int_nonzero": {
            "name": "test_check_int_nonzero",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "freqtrade-develop/tests/test_configuration.py": {
        "all_conf": {
            "name": "all_conf",
            "location": 32,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "test_load_config_missing_attributes": {
            "name": "test_load_config_missing_attributes",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int"
                ]
            }
        },
        "test_load_config_incorrect_stake_amount": {
            "name": "test_load_config_incorrect_stake_amount",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": []
            }
        },
        "test_load_config_file": {
            "name": "test_load_config_file",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [],
                "caplog": [
                    "str"
                ]
            }
        },
        "test_load_config_file_error": {
            "name": "test_load_config_file_error",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Dict[str, Any]",
                    "Callable",
                    "Optional[Dict[str, Any]]",
                    "bytes"
                ],
                "mocker": [
                    "dict",
                    "str",
                    "tuple"
                ],
                "caplog": [
                    "str",
                    "tests.testmodels.Signals",
                    "int",
                    "List[bool]"
                ]
            }
        },
        "test_load_config_file_error_range": {
            "name": "test_load_config_file_error_range",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Dict[str, Any]",
                    "bool",
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "mocker": [],
                "caplog": [
                    "str",
                    "bool",
                    "tests.testmodels.Signals",
                    "int"
                ]
            }
        },
        "test_load_file_error": {
            "name": "test_load_file_error",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "pathlib.Path",
                    "tests.fixtures.cloud_uploader.Uploader"
                ]
            }
        },
        "test__args_to_config": {
            "name": "test__args_to_config",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "logging.Logger",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        },
        "test_load_config_max_open_trades_zero": {
            "name": "test_load_config_max_open_trades_zero",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "dict",
                    "Optional[\"Game\"]"
                ],
                "mocker": [
                    "str",
                    "dict",
                    "Optional[\"Game\"]"
                ],
                "caplog": [
                    "Dict[str, Tuple[str, str]]",
                    "str",
                    "int",
                    "tests.testmodels.Signals"
                ]
            }
        },
        "test_load_config_combine_dicts": {
            "name": "test_load_config_combine_dicts",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int"
                ],
                "mocker": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int"
                ],
                "caplog": [
                    "int",
                    "str",
                    "Dict[str, Tuple[str, str]]"
                ]
            }
        },
        "test_from_config": {
            "name": "test_from_config",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Tuple[int, int]",
                    "int",
                    "str"
                ],
                "mocker": [
                    "float"
                ],
                "caplog": [
                    "List[str]",
                    "str",
                    "tests.testmodels.Signals",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_from_recursive_files": {
            "name": "test_from_recursive_files",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "testdatadir": [
                    "pathlib.Path",
                    "taskiinfrastructure.data.json.repositories.project_repository.JsonProjectRepository"
                ]
            }
        },
        "test_print_config": {
            "name": "test_print_config",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "tests.hints.RightAccumulatorCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.LeftAccumulatorCall"
                ],
                "mocker": [
                    "float",
                    "int"
                ],
                "caplog": [
                    "int",
                    "tests.testmodels.Signals"
                ]
            }
        },
        "test_load_config_max_open_trades_minus_one": {
            "name": "test_load_config_max_open_trades_minus_one",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "dict",
                    "Optional[\"Game\"]"
                ],
                "mocker": [
                    "str",
                    "dict",
                    "Optional[\"Game\"]"
                ],
                "caplog": [
                    "Dict[str, Tuple[str, str]]",
                    "str",
                    "int",
                    "tests.testmodels.Signals"
                ]
            }
        },
        "test_load_config_file_exception": {
            "name": "test_load_config_file_exception",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_load_config": {
            "name": "test_load_config",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "dict",
                    "Optional[\"Game\"]"
                ],
                "mocker": [
                    "str",
                    "dict",
                    "Optional[\"Game\"]"
                ]
            }
        },
        "test_load_config_with_params": {
            "name": "test_load_config_with_params",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "test_load_dry_run": {
            "name": "test_load_dry_run",
            "location": 385,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Callable",
                    "str",
                    "tests.e2e.Helper",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "mocker": [
                    "Callable",
                    "pathlib.Path",
                    "pypi2nix.path.Path"
                ],
                "config_value": [],
                "expected": [
                    "str",
                    "Dict[str, str]",
                    "pathlib.Path"
                ],
                "arglist": [
                    "str",
                    "Iterable"
                ]
            }
        },
        "test_load_custom_strategy": {
            "name": "test_load_custom_strategy",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Dict[str, Any]",
                    "bool"
                ],
                "mocker": [
                    "str",
                    "raiden.constants.Environment"
                ]
            }
        },
        "test_show_info": {
            "name": "test_show_info",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str"
                ],
                "mocker": [
                    "str"
                ],
                "caplog": [
                    "str",
                    "int",
                    "logging.Logger"
                ]
            }
        },
        "test_setup_configuration_without_arguments": {
            "name": "test_setup_configuration_without_arguments",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "bool",
                    "pypi2nix.path.Path"
                ],
                "default_conf": [
                    "str",
                    "bool",
                    "pypi2nix.path.Path"
                ],
                "caplog": [
                    "List[Dict[str, float]]",
                    "logging.Logger",
                    "int",
                    "bool",
                    "Callable",
                    "dict"
                ]
            }
        },
        "test_setup_configuration_with_arguments": {
            "name": "test_setup_configuration_with_arguments",
            "location": 459,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Callable",
                    "gtmcore.configuration.Configuration"
                ],
                "default_conf": [
                    "str",
                    "bool",
                    "pypi2nix.path.Path"
                ],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "Collection[str]",
                    "bool",
                    "Tuple[Tuple[str, ...]]"
                ]
            }
        },
        "test_setup_configuration_with_stratlist": {
            "name": "test_setup_configuration_with_stratlist",
            "location": 517,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "bool",
                    "pypi2nix.path.Path"
                ],
                "default_conf": [
                    "str",
                    "bool",
                    "pypi2nix.path.Path"
                ],
                "caplog": [
                    "logging.Logger",
                    "bool",
                    "Collection[str]",
                    "Callable",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        },
        "test_hyperopt_with_arguments": {
            "name": "test_hyperopt_with_arguments",
            "location": 562,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "bool",
                    "pypi2nix.path.Path"
                ],
                "default_conf": [
                    "str",
                    "bool",
                    "pypi2nix.path.Path"
                ],
                "caplog": [
                    "logging.Logger",
                    "str",
                    "int",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        },
        "test_check_exchange": {
            "name": "test_check_exchange",
            "location": 587,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Dict[str, Tuple[str, str]]",
                    "bool"
                ],
                "caplog": [
                    "Dict[str, Any]",
                    "logging.Logger",
                    "str"
                ]
            }
        },
        "test_cli_verbose_with_params": {
            "name": "test_cli_verbose_with_params",
            "location": 648,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str"
                ],
                "mocker": [],
                "caplog": [
                    "dict",
                    "Exception",
                    "List[str]"
                ]
            }
        },
        "test_set_loggers": {
            "name": "test_set_loggers",
            "location": 663,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_loggers_syslog": {
            "name": "test_set_loggers_syslog",
            "location": 704,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_loggers_Filehandler": {
            "name": "test_set_loggers_Filehandler",
            "location": 727,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path"
                ]
            }
        },
        "test_set_loggers_journald": {
            "name": "test_set_loggers_journald",
            "location": 752,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.basilisp.helpers.CompileFn",
                    "cli_ui.tests.MessageRecorder"
                ]
            }
        },
        "test_set_loggers_journald_importerror": {
            "name": "test_set_loggers_journald_importerror",
            "location": 769,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.basilisp.helpers.CompileFn",
                    "cli_ui.tests.MessageRecorder"
                ],
                "import_fails": [
                    "tests.basilisp.helpers.CompileFn",
                    "cli_ui.tests.MessageRecorder"
                ]
            }
        },
        "test_set_logfile": {
            "name": "test_set_logfile",
            "location": 783,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "Optional[\"Game\"]"
                ],
                "mocker": [
                    "str",
                    "Optional[\"Game\"]"
                ],
                "tmpdir": [
                    "str",
                    "int"
                ]
            }
        },
        "test_load_config_warn_forcebuy": {
            "name": "test_load_config_warn_forcebuy",
            "location": 802,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "dict",
                    "pathlib.Path"
                ],
                "mocker": [
                    "str",
                    "dict",
                    "Optional[\"Game\"]"
                ],
                "caplog": [
                    "Exception",
                    "dict",
                    "logging.Logger",
                    "Callable",
                    "enums.Environment"
                ]
            }
        },
        "test_validate_default_conf": {
            "name": "test_validate_default_conf",
            "location": 814,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_validate_max_open_trades": {
            "name": "test_validate_max_open_trades",
            "location": 819,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_validate_price_side": {
            "name": "test_validate_price_side",
            "location": 827,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str"
                ]
            }
        },
        "test_validate_tsl": {
            "name": "test_validate_tsl",
            "location": 859,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "tests.basilisp.helpers.CompileFn",
                    "dict"
                ]
            }
        },
        "test_validate_edge2": {
            "name": "test_validate_edge2",
            "location": 897,
            "return": [
                "None"
            ],
            "arguments": {
                "edge_conf": [
                    "str",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_validate_whitelist": {
            "name": "test_validate_whitelist",
            "location": 912,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "bytes",
                    "Optional[Mapping]"
                ]
            }
        },
        "test_validate_protections": {
            "name": "test_validate_protections",
            "location": 945,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "bytes",
                    "float",
                    "bool"
                ],
                "protconf": [
                    "int",
                    "bytes",
                    "float",
                    "bool"
                ],
                "expected": [
                    "str",
                    "Optional[str]",
                    "float",
                    "set"
                ]
            }
        },
        "test_validate_ask_orderbook": {
            "name": "test_validate_ask_orderbook",
            "location": 955,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "caplog": [
                    "dict",
                    "Exception",
                    "List[str]"
                ]
            }
        },
        "test_validate_time_in_force": {
            "name": "test_validate_time_in_force",
            "location": 972,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "caplog": [
                    "Exception",
                    "logging.Logger",
                    "dict",
                    "Callable",
                    "str"
                ]
            }
        },
        "test__validate_order_types": {
            "name": "test__validate_order_types",
            "location": 994,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightAccumulatorCall"
                ],
                "caplog": [
                    "dict",
                    "Exception",
                    "List[str]"
                ]
            }
        },
        "test__validate_unfilledtimeout": {
            "name": "test__validate_unfilledtimeout",
            "location": 1029,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "caplog": [
                    "dict",
                    "Exception",
                    "List[str]"
                ]
            }
        },
        "test__validate_pricing_rules": {
            "name": "test__validate_pricing_rules",
            "location": 1054,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "caplog": [
                    "dict",
                    "Exception",
                    "List[str]"
                ]
            }
        },
        "test_load_config_test_comments": {
            "name": "test_load_config_test_comments",
            "location": 1092,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_config_default_exchange": {
            "name": "test_load_config_default_exchange",
            "location": 1102,
            "return": [
                "None"
            ],
            "arguments": {
                "all_conf": [
                    "int",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "test_load_config_default_exchange_name": {
            "name": "test_load_config_default_exchange_name",
            "location": 1116,
            "return": [
                "None"
            ],
            "arguments": {
                "all_conf": []
            }
        },
        "test_load_config_stoploss_exchange_limit_ratio": {
            "name": "test_load_config_stoploss_exchange_limit_ratio",
            "location": 1130,
            "return": [
                "None"
            ],
            "arguments": {
                "all_conf": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "test_load_config_default_subkeys": {
            "name": "test_load_config_default_subkeys",
            "location": 1143,
            "return": [
                "None"
            ],
            "arguments": {
                "all_conf": [
                    "dict",
                    "str"
                ],
                "keys": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "test_pairlist_resolving": {
            "name": "test_pairlist_resolving",
            "location": 1163,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pairlist_resolving_with_config": {
            "name": "test_pairlist_resolving_with_config",
            "location": 1180,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "bool",
                    "pypi2nix.path.Path"
                ],
                "default_conf": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_pairlist_resolving_with_config_pl": {
            "name": "test_pairlist_resolving_with_config_pl",
            "location": 1211,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "bool",
                    "pypi2nix.path.Path"
                ],
                "default_conf": [
                    "str",
                    "raiden.constants.Environment",
                    "bool"
                ]
            }
        },
        "test_pairlist_resolving_with_config_pl_not_exists": {
            "name": "test_pairlist_resolving_with_config_pl_not_exists",
            "location": 1230,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "bool",
                    "pypi2nix.path.Path"
                ],
                "default_conf": [
                    "str",
                    "bool",
                    "pypi2nix.path.Path"
                ]
            }
        },
        "test_pairlist_resolving_fallback": {
            "name": "test_pairlist_resolving_fallback",
            "location": 1246,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "tests.async_mock.MagicMock",
                    "str"
                ]
            }
        },
        "test_process_temporary_deprecated_settings": {
            "name": "test_process_temporary_deprecated_settings",
            "location": 1274,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Callable",
                    "pypi2nix.path.Path",
                    "pathlib.Path"
                ],
                "default_conf": [
                    "Set[int]",
                    "str"
                ],
                "setting": [
                    "Dict[int, Set[int]]",
                    "Optional[List[str]]",
                    "bool"
                ],
                "caplog": [
                    "Callable",
                    "Callable[..., None]",
                    "int",
                    "List[List[int]]",
                    "Collection[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "test_process_removed_settings": {
            "name": "test_process_removed_settings",
            "location": 1317,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Callable",
                    "pypi2nix.path.Path",
                    "pathlib.Path"
                ],
                "default_conf": [
                    "str",
                    "int",
                    "dict",
                    "List[str]",
                    "Callable"
                ],
                "setting": [
                    "list"
                ]
            }
        },
        "test_process_deprecated_setting_edge": {
            "name": "test_process_deprecated_setting_edge",
            "location": 1332,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "edge_conf": [
                    "pathlib.Path",
                    "dict"
                ]
            }
        },
        "test_check_conflicting_settings": {
            "name": "test_check_conflicting_settings",
            "location": 1344,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "bool",
                    "pypi2nix.path.Path"
                ],
                "default_conf": [
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]",
                    "Optional[\"Game\"]",
                    "pypi2nix.path.Path",
                    "int"
                ],
                "caplog": [
                    "logging.Logger",
                    "str",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        },
        "test_process_deprecated_setting": {
            "name": "test_process_deprecated_setting",
            "location": 1385,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "pypi2nix.path.Path",
                    "str",
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]"
                ],
                "default_conf": [
                    "Optional[\"Game\"]",
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]"
                ],
                "caplog": [
                    "int",
                    "str",
                    "logging.Logger",
                    "bool"
                ]
            }
        },
        "test_process_removed_setting": {
            "name": "test_process_removed_setting",
            "location": 1442,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "pypi2nix.path.Path",
                    "str",
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]"
                ],
                "default_conf": [
                    "Optional[\"Game\"]",
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]"
                ],
                "caplog": [
                    "List[str]",
                    "int",
                    "bool",
                    "List[Tuple[str, Any]]",
                    "Callable[..., None]",
                    "Callable[[int, int], None]"
                ]
            }
        },
        "test_process_deprecated_ticker_interval": {
            "name": "test_process_deprecated_ticker_interval",
            "location": 1466,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "caplog": [
                    "str",
                    "int",
                    "type"
                ]
            }
        },
        "test_process_deprecated_protections": {
            "name": "test_process_deprecated_protections",
            "location": 1480,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "caplog": [
                    "dict",
                    "Collection[str]",
                    "bool",
                    "Callable"
                ]
            }
        },
        "test_flat_vars_to_nested_dict": {
            "name": "test_flat_vars_to_nested_dict",
            "location": 1491,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "logging.Logger"
                ]
            }
        }
    },
    "freqtrade-develop/tests/test_directory_operations.py": {
        "test_create_datadir": {
            "name": "test_create_datadir",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "tests.hints.CleavageCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.LeftAccumulatorCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int"
                ],
                "caplog": [
                    "str"
                ]
            }
        },
        "test_create_userdata_dir": {
            "name": "test_create_userdata_dir",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "List[str]",
                    "str"
                ],
                "caplog": [
                    "str"
                ]
            }
        },
        "test_create_userdata_dir_and_chown": {
            "name": "test_create_userdata_dir_and_chown",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "unittesmock.MagicMock"
                ],
                "tmpdir": [
                    "pathlib.Path"
                ],
                "caplog": [
                    "pathlib.Path",
                    "bytes",
                    "str"
                ]
            }
        },
        "test_create_userdata_dir_exists": {
            "name": "test_create_userdata_dir_exists",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "List[str]",
                    "str"
                ],
                "caplog": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "test_create_userdata_dir_exists_exception": {
            "name": "test_create_userdata_dir_exists_exception",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "bool",
                    "List[str]",
                    "int",
                    "List[Tuple[str, Any]]"
                ],
                "caplog": [
                    "bool",
                    "List[str]",
                    "int",
                    "List[Tuple[str, Any]]"
                ]
            }
        },
        "test_copy_sample_files": {
            "name": "test_copy_sample_files",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "str",
                    "int"
                ],
                "default_conf": [
                    "str",
                    "int",
                    "bool"
                ],
                "caplog": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_copy_sample_files_errors": {
            "name": "test_copy_sample_files_errors",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "List[bool]",
                    "int",
                    "str",
                    "Type[Any]"
                ],
                "caplog": [
                    "str"
                ]
            }
        }
    },
    "freqtrade-develop/tests/test_freqtradebot.py": {
        "patch_RPCManager": {
            "name": "patch_RPCManager",
            "location": 34,
            "return": [
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "str",
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_freqtradebot_state": {
            "name": "test_freqtradebot_state",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf_usdt": [
                    "str",
                    "Callable"
                ],
                "markets": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_process_stopped": {
            "name": "test_process_stopped",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "List[str]",
                    "int"
                ],
                "default_conf_usdt": [
                    "pandas.DataFrame",
                    "dict",
                    "str"
                ]
            }
        },
        "test_bot_cleanup": {
            "name": "test_bot_cleanup",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf_usdt": [
                    "str",
                    "int",
                    "Optional[str]",
                    "salon.models.Stylist",
                    "Callable"
                ],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "Optional[float]"
                ]
            }
        },
        "test_order_dict": {
            "name": "test_order_dict",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "int"
                ],
                "mocker": [
                    "relay.exchange.order.Order",
                    "Sequence[relay.exchange.order.Order]"
                ],
                "runmode": [
                    "int",
                    "str",
                    "Callable",
                    "bool",
                    "Optional[int]",
                    "float"
                ],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "int",
                    "deeplearning.ml4pl.models.log_database.Database",
                    "List[str]"
                ]
            }
        },
        "test_get_trade_stake_amount": {
            "name": "test_get_trade_stake_amount",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "Iterable[Tuple[int, int]]"
                ],
                "mocker": [
                    "Sequence[relay.exchange.order.Order]",
                    "relay.exchange.order.Order",
                    "Optional[str]"
                ]
            }
        },
        "test_check_available_stake_amount": {
            "name": "test_check_available_stake_amount",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int"
                ],
                "ticker_usdt": [
                    "tests.components.withings.common.ComponentFactory"
                ],
                "mocker": [],
                "fee": [
                    "tests.components.withings.common.ComponentFactory"
                ],
                "limit_buy_order_usdt_open": [
                    "tests.components.withings.common.ComponentFactory"
                ],
                "amend_last": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int"
                ],
                "wallet": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int"
                ],
                "max_open": [
                    "int",
                    "float"
                ],
                "lsamr": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int"
                ],
                "expected": [
                    "Optional[Type[Exception]]",
                    "str",
                    "List[recidiviz.persistence.database.schema.state.schema.StatePerson]",
                    "Callable"
                ]
            }
        },
        "test_edge_called_in_process": {
            "name": "test_edge_called_in_process",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "edge_conf": [
                    "tests.async_mock.Mock",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_edge_overrides_stake_amount": {
            "name": "test_edge_overrides_stake_amount",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Dict[str, Sequence[str]]"
                ],
                "edge_conf": [
                    "Callable",
                    "tests.basilisp.helpers.CompileFn",
                    "str"
                ]
            }
        },
        "test_edge_overrides_stoploss": {
            "name": "test_edge_overrides_stoploss",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "limit_order": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "fee": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "caplog": [
                    "logging.LogRecord",
                    "core.models.Grouping",
                    "str",
                    "int"
                ],
                "mocker": [
                    "tests.e2e.Helper"
                ],
                "buy_price_mult": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "salon.models.Stylist"
                ],
                "ignore_strat_sl": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "edge_conf": [
                    "float",
                    "bool",
                    "Mapping[str, Any]",
                    "Union[int, float]"
                ]
            }
        },
        "test_total_open_trades_stakes": {
            "name": "test_total_open_trades_stakes",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf_usdt": [
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int"
                ],
                "ticker_usdt": [],
                "fee": []
            }
        },
        "test_create_trade": {
            "name": "test_create_trade",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "str",
                    "int",
                    "bool"
                ],
                "ticker_usdt": [
                    "bool"
                ],
                "limit_order": [
                    "bool",
                    "Optional[str]",
                    "recidiviz.persistence.database.database_entity.DatabaseEntity"
                ],
                "fee": [
                    "bool"
                ],
                "mocker": [],
                "is_short": [
                    "bool",
                    "Dict[str, int]",
                    "str",
                    "Optional[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]",
                    "Optional[bool]"
                ],
                "open_rate": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_create_trade_no_stake_amount": {
            "name": "test_create_trade_no_stake_amount",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "int",
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "ticker_usdt": [
                    "str",
                    "int",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolationResponse]"
                ],
                "fee": [
                    "str",
                    "int",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolationResponse]"
                ],
                "mocker": [
                    "relay.exchange.order.Order",
                    "Sequence[relay.exchange.order.Order]"
                ]
            }
        },
        "test_create_trade_minimal_amount": {
            "name": "test_create_trade_minimal_amount",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "int",
                    "str",
                    "float",
                    "Optional[Set[str]]",
                    "List[Dict[str, str]]"
                ],
                "ticker_usdt": [],
                "limit_order_open": [
                    "unittesmock.MagicMock",
                    "str",
                    "bool"
                ],
                "fee": [],
                "mocker": [],
                "stake_amount": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]",
                    "bool"
                ],
                "create": [
                    "int",
                    "Literal",
                    "Callable[..., None]",
                    "Callable[[int, int], None]",
                    "bool"
                ],
                "amount_enough": [
                    "int",
                    "Literal",
                    "Callable[..., None]",
                    "Callable[[int, int], None]",
                    "bool"
                ],
                "max_open_trades": [
                    "int",
                    "bool",
                    "Tuple[bytes, bytes]"
                ],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "Optional[float]"
                ],
                "is_short": [
                    "unittesmock.MagicMock",
                    "bool",
                    "str"
                ]
            }
        },
        "test_enter_positions_no_pairs_left": {
            "name": "test_enter_positions_no_pairs_left",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "int",
                    "bool",
                    "str",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "ticker_usdt": [
                    "tests.components.withings.common.ComponentFactory"
                ],
                "limit_buy_order_usdt_open": [
                    "tests.components.withings.common.ComponentFactory"
                ],
                "fee": [
                    "tests.components.withings.common.ComponentFactory"
                ],
                "whitelist": [
                    "int",
                    "bool",
                    "str",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "positions": [
                    "int",
                    "bool",
                    "str",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mocker": [],
                "caplog": [
                    "List[Dict[str, float]]",
                    "logging.Logger",
                    "Collection[str]",
                    "bool",
                    "str",
                    "Optional[logging.Logger]"
                ]
            }
        },
        "test_enter_positions_global_pairlock": {
            "name": "test_enter_positions_global_pairlock",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [],
                "ticker_usdt": [],
                "limit_buy_order_usdt": [],
                "fee": [],
                "mocker": [],
                "caplog": [
                    "str",
                    "tests.mock_vws.utils.Endpoint"
                ]
            }
        },
        "test_handle_protections": {
            "name": "test_handle_protections",
            "location": 435,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "bool",
                    "str"
                ],
                "default_conf_usdt": [
                    "bool",
                    "Optional[\"Game\"]",
                    "app.models.Question",
                    "str"
                ],
                "fee": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "is_short": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_create_trade_no_signal": {
            "name": "test_create_trade_no_signal",
            "location": 458,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "Dict[str, Any]",
                    "Callable[[Dict], None]",
                    "Optional[List[str]]"
                ],
                "fee": [
                    "int",
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "mocker": [
                    "tests.setup.SetupTest"
                ]
            }
        },
        "test_create_trades_multiple_trades": {
            "name": "test_create_trades_multiple_trades",
            "location": 478,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "int",
                    "float",
                    "Callable",
                    "List[int]"
                ],
                "ticker_usdt": [],
                "fee": [],
                "mocker": [],
                "limit_buy_order_usdt_open": [],
                "max_open": [
                    "int",
                    "list"
                ],
                "tradable_balance_ratio": [
                    "str"
                ],
                "modifier": []
            }
        },
        "test_create_trades_preopen": {
            "name": "test_create_trades_preopen",
            "location": 505,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "int",
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "ticker_usdt": [],
                "fee": [],
                "mocker": [],
                "limit_buy_order_usdt_open": []
            }
        },
        "test_process_trade_creation": {
            "name": "test_process_trade_creation",
            "location": 536,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "tests.hints.CleavageCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.LeftAccumulatorCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int"
                ],
                "ticker_usdt": [
                    "tests.components.withings.common.ComponentFactory"
                ],
                "limit_order": [
                    "tests.components.withings.common.ComponentFactory"
                ],
                "limit_order_open": [
                    "tests.components.withings.common.ComponentFactory"
                ],
                "is_short": [],
                "fee": [
                    "tests.components.withings.common.ComponentFactory"
                ],
                "mocker": [],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "Collection[str]",
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "test_process_exchange_failures": {
            "name": "test_process_exchange_failures",
            "location": 575,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "List[str]",
                    "bool",
                    "str",
                    "Callable[[Any], bool]",
                    "dict",
                    "Dict[str, Any]"
                ],
                "ticker_usdt": [],
                "mocker": []
            }
        },
        "test_process_operational_exception": {
            "name": "test_process_operational_exception",
            "location": 592,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "str",
                    "Callable[[Any], bool]",
                    "dict",
                    "abilian.core.models.subjects.User",
                    "Callable"
                ],
                "ticker_usdt": [],
                "mocker": [
                    "core_lib.core.models.Venue",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_process_trade_handling": {
            "name": "test_process_trade_handling",
            "location": 610,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "tests.hints.CleavageCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.LeftAccumulatorCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int"
                ],
                "ticker_usdt": [],
                "limit_buy_order_usdt_open": [],
                "fee": [],
                "mocker": []
            }
        },
        "test_process_trade_no_whitelist_pair": {
            "name": "test_process_trade_no_whitelist_pair",
            "location": 636,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "int",
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "ticker_usdt": [
                    "str"
                ],
                "limit_buy_order_usdt": [
                    "str"
                ],
                "fee": [
                    "str"
                ],
                "mocker": []
            }
        },
        "test_process_informative_pairs_added": {
            "name": "test_process_informative_pairs_added",
            "location": 683,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "int",
                    "bool"
                ],
                "ticker_usdt": [
                    "Sequence[relay.exchange.order.Order]"
                ],
                "mocker": []
            }
        },
        "test_execute_entry": {
            "name": "test_execute_entry",
            "location": 736,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Optional[List[Any]]",
                    "logging.Logger",
                    "bool"
                ],
                "default_conf_usdt": [
                    "Type",
                    "bool",
                    "float",
                    "str",
                    "int"
                ],
                "fee": [
                    "unittesmock.MagicMock",
                    "accounts.models.User"
                ],
                "limit_order": [
                    "bool",
                    "str"
                ],
                "limit_order_open": [
                    "bool",
                    "str"
                ],
                "is_short": [
                    "bool",
                    "str"
                ],
                "trading_mode": [
                    "bool",
                    "int",
                    "Optional[Set[str]]",
                    "List[Dict[str, str]]"
                ],
                "exchange_name": [
                    "bool",
                    "Optional[str]",
                    "abilian.core.models.subjects.User",
                    "float",
                    "logging.Logger",
                    "Dict[str, str]"
                ],
                "margin_mode": [
                    "bool",
                    "str"
                ],
                "liq_buffer": [
                    "bool",
                    "str"
                ],
                "liq_price": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_execute_entry_confirm_error": {
            "name": "test_execute_entry_confirm_error",
            "location": 972,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf_usdt": [
                    "str",
                    "bool"
                ],
                "fee": [],
                "limit_order": [],
                "is_short": []
            }
        },
        "test_execute_entry_min_leverage": {
            "name": "test_execute_entry_min_leverage",
            "location": 1005,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf_usdt": [],
                "fee": [
                    "unittesmock.MagicMock"
                ],
                "limit_order": [
                    "unittesmock.MagicMock"
                ],
                "is_short": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_add_stoploss_on_exchange": {
            "name": "test_add_stoploss_on_exchange",
            "location": 1035,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf_usdt": [
                    "bool",
                    "str",
                    "bytes"
                ],
                "limit_order": [
                    "bool",
                    "str",
                    "bytes"
                ],
                "is_short": [
                    "bool",
                    "str",
                    "bytes"
                ]
            }
        },
        "test_handle_stoploss_on_exchange": {
            "name": "test_handle_stoploss_on_exchange",
            "location": 1065,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf_usdt": [
                    "bool"
                ],
                "fee": [],
                "caplog": [
                    "int",
                    "Callable",
                    "Optional[int]",
                    "Mapping[str, Tuple[float, float, float]]"
                ],
                "is_short": [
                    "bool",
                    "Iterable[str]"
                ],
                "limit_order": [
                    "bool"
                ]
            }
        },
        "test_handle_sle_cancel_cant_recreate": {
            "name": "test_handle_sle_cancel_cant_recreate",
            "location": 1220,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf_usdt": [
                    "bool"
                ],
                "fee": [],
                "caplog": [
                    "str",
                    "Optional[float]",
                    "logging.Logger"
                ],
                "is_short": [
                    "bool",
                    "Iterable[str]"
                ],
                "limit_order": [
                    "bool"
                ]
            }
        },
        "test_create_stoploss_order_invalid_order": {
            "name": "test_create_stoploss_order_invalid_order",
            "location": 1263,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf_usdt": [
                    "bool",
                    "str"
                ],
                "caplog": [
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "str",
                    "List[Dict[str, float]]"
                ],
                "fee": [
                    "unittesmock.MagicMock",
                    "bool"
                ],
                "is_short": [],
                "limit_order": [
                    "bool",
                    "str"
                ],
                "limit_order_open": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_create_stoploss_order_insufficient_funds": {
            "name": "test_create_stoploss_order_insufficient_funds",
            "location": 1316,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "models.user.User",
                    "unittesmock.MagicMock"
                ],
                "default_conf_usdt": [
                    "str",
                    "bool"
                ],
                "caplog": [
                    "bool",
                    "tests.conftesWorker"
                ],
                "fee": [
                    "unittesmock.MagicMock"
                ],
                "limit_order": [
                    "bool"
                ],
                "is_short": [
                    "bool"
                ]
            }
        },
        "test_handle_stoploss_on_exchange_trailing": {
            "name": "test_handle_stoploss_on_exchange_trailing",
            "location": 1366,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf_usdt": [
                    "int",
                    "bool"
                ],
                "fee": [
                    "unittesmock.MagicMock"
                ],
                "is_short": [
                    "bool",
                    "Iterable[str]"
                ],
                "bid": [
                    "unittesmock.MagicMock"
                ],
                "ask": [
                    "unittesmock.MagicMock"
                ],
                "limit_order": [
                    "bool"
                ],
                "stop_price": [
                    "unittesmock.MagicMock"
                ],
                "amt": [
                    "List[str]",
                    "app.models.dto.NewUserRequest",
                    "int",
                    "unittesmock.MagicMock",
                    "tests.components.withings.common.ComponentFactory"
                ],
                "hang_price": []
            }
        },
        "test_handle_stoploss_on_exchange_trailing_error": {
            "name": "test_handle_stoploss_on_exchange_trailing_error",
            "location": 1488,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf_usdt": [
                    "bool",
                    "int",
                    "str",
                    "Callable"
                ],
                "fee": [
                    "unittesmock.MagicMock"
                ],
                "caplog": [
                    "bool",
                    "str",
                    "starfish.core.util.logging.Log",
                    "Union[int, float]"
                ],
                "limit_order": [
                    "str",
                    "bool"
                ],
                "is_short": [
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "test_stoploss_on_exchange_price_rounding": {
            "name": "test_stoploss_on_exchange_price_rounding",
            "location": 1568,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf_usdt": [
                    "str",
                    "int",
                    "Optional[str]",
                    "salon.models.Stylist",
                    "float"
                ],
                "fee": [
                    "bool",
                    "str",
                    "TextIO",
                    "gardnr.models.Grow",
                    "int"
                ],
                "open_trade_usdt": [
                    "Optional[int]",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_handle_stoploss_on_exchange_custom_stop": {
            "name": "test_handle_stoploss_on_exchange_custom_stop",
            "location": 1596,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf_usdt": [
                    "int",
                    "bool"
                ],
                "fee": [
                    "unittesmock.MagicMock"
                ],
                "is_short": [
                    "bool",
                    "Iterable[str]"
                ],
                "limit_order": [
                    "bool"
                ]
            }
        },
        "test_tsl_on_exchange_compatible_with_edge": {
            "name": "test_tsl_on_exchange_compatible_with_edge",
            "location": 1718,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.e2e.Helper"
                ],
                "edge_conf": [
                    "bool",
                    "float",
                    "Union[int, float]",
                    "Mapping[str, Any]"
                ],
                "fee": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "caplog": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "limit_order": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "test_enter_positions": {
            "name": "test_enter_positions",
            "location": 1839,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "int"
                ],
                "default_conf_usdt": [
                    "int",
                    "List[zerver.models.UserProfile]",
                    "Set[str]"
                ],
                "return_value": [
                    "unittesmock.MagicMock"
                ],
                "side_effect": [
                    "unittesmock.MagicMock"
                ],
                "log_message": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Dict[Tuple[int, int], str]"
                ],
                "caplog": [
                    "str",
                    "List[Dict[str, float]]",
                    "logging.Logger",
                    "Collection[str]",
                    "bool"
                ]
            }
        },
        "test_exit_positions": {
            "name": "test_exit_positions",
            "location": 1859,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "core.models.MyUser",
                    "str"
                ],
                "default_conf_usdt": [
                    "str",
                    "bool"
                ],
                "limit_order": [
                    "zerver.models.UserProfile",
                    "int",
                    "List[src.main.core.models.window.Window]",
                    "str"
                ],
                "is_short": [
                    "zerver.models.UserProfile",
                    "int",
                    "List[src.main.core.models.window.Window]",
                    "str"
                ],
                "caplog": [
                    "Exception",
                    "List[str]",
                    "str"
                ]
            }
        },
        "test_exit_positions_exception": {
            "name": "test_exit_positions_exception",
            "location": 1888,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Optional[bool]",
                    "List[str]",
                    "str"
                ],
                "default_conf_usdt": [],
                "limit_order": [
                    "bool"
                ],
                "caplog": [
                    "bool",
                    "starfish.core.util.logging.Log",
                    "Callable[..., None]",
                    "int",
                    "Callable",
                    "str"
                ],
                "is_short": [
                    "bool"
                ]
            }
        },
        "test_update_trade_state": {
            "name": "test_update_trade_state",
            "location": 1911,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf_usdt": [
                    "str"
                ],
                "limit_order": [
                    "bool",
                    "str",
                    "boggle.models.board.Board"
                ],
                "is_short": [
                    "Optional[bool]",
                    "str",
                    "List[str]",
                    "Callable",
                    "bool"
                ],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "int",
                    "bool",
                    "deeplearning.ml4pl.models.logger.Logger"
                ]
            }
        },
        "test_update_trade_state_withorderdict": {
            "name": "test_update_trade_state_withorderdict",
            "location": 1980,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "int",
                    "str"
                ],
                "trades_for_order": [
                    "str"
                ],
                "limit_order": [
                    "int",
                    "str",
                    "bytes",
                    "tests.conftesWorker"
                ],
                "fee": [
                    "int",
                    "recidiviz.persistence.entity.state.entities.StatePerson",
                    "models.Payment",
                    "str"
                ],
                "mocker": [
                    "str",
                    "bool",
                    "int",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "initial_amount": [
                    "int",
                    "str",
                    "bytes",
                    "tests.conftesWorker"
                ],
                "has_rounding_fee": [
                    "bool",
                    "float",
                    "int",
                    "List[str]"
                ],
                "is_short": [
                    "str",
                    "recidiviz.common.constants.state.state_case_type.StateSupervisionCaseType",
                    "recidiviz.persistence.entity.state.entities.StatePerson"
                ],
                "caplog": [
                    "logging.Logger"
                ]
            }
        },
        "test_update_trade_state_exception": {
            "name": "test_update_trade_state_exception",
            "location": 2028,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Optional[bool]",
                    "int",
                    "List[str]",
                    "Optional[str]",
                    "Optional[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]",
                    "models.User"
                ],
                "default_conf_usdt": [
                    "tuple"
                ],
                "is_short": [
                    "bool",
                    "str",
                    "Callable",
                    "int"
                ],
                "limit_order": [
                    "bool",
                    "str",
                    "Callable",
                    "int"
                ],
                "caplog": [
                    "str",
                    "float",
                    "Optional[float]"
                ]
            }
        },
        "test_update_trade_state_orderexception": {
            "name": "test_update_trade_state_orderexception",
            "location": 2046,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf_usdt": [
                    "str",
                    "zam_repondeur.models.Dossier"
                ],
                "caplog": [
                    "dict",
                    "str",
                    "Callable",
                    "logging.Logger"
                ]
            }
        },
        "test_update_trade_state_sell": {
            "name": "test_update_trade_state_sell",
            "location": 2062,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "int",
                    "str"
                ],
                "trades_for_order": [
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "Optional[int]"
                ],
                "limit_order_open": [
                    "int",
                    "str"
                ],
                "limit_order": [
                    "int",
                    "str"
                ],
                "is_short": [
                    "float",
                    "str",
                    "bool",
                    "pandas.DataFrame"
                ],
                "mocker": [
                    "str",
                    "bool",
                    "int",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_handle_trade": {
            "name": "test_handle_trade",
            "location": 2107,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int"
                ],
                "limit_order_open": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int"
                ],
                "limit_order": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int"
                ],
                "fee": [],
                "mocker": [],
                "is_short": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int"
                ],
                "close_profit": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int"
                ]
            }
        },
        "test_handle_overlapping_signals": {
            "name": "test_handle_overlapping_signals",
            "location": 2160,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightAccumulatorCall"
                ],
                "ticker_usdt": [],
                "limit_order_open": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightAccumulatorCall"
                ],
                "fee": [],
                "mocker": [],
                "is_short": [
                    "int",
                    "bool"
                ]
            }
        },
        "test_handle_trade_roi": {
            "name": "test_handle_trade_roi",
            "location": 2236,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "str",
                    "int"
                ],
                "ticker_usdt": [],
                "limit_order_open": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightAccumulatorCall"
                ],
                "fee": [],
                "mocker": [],
                "caplog": [
                    "List[Dict[str, float]]",
                    "logging.Logger",
                    "logging.LogRecord",
                    "Collection[str]",
                    "bool"
                ],
                "is_short": [
                    "int",
                    "bool"
                ]
            }
        },
        "test_handle_trade_use_exit_signal": {
            "name": "test_handle_trade_use_exit_signal",
            "location": 2277,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "ticker_usdt": [],
                "limit_order_open": [
                    "tests.hints.RightAccumulatorCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.CleavageCall"
                ],
                "fee": [],
                "mocker": [],
                "caplog": [
                    "logging.Logger",
                    "List[Dict[str, float]]",
                    "Optional[logging.Logger]",
                    "Collection[str]",
                    "bool"
                ],
                "is_short": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_close_trade": {
            "name": "test_close_trade",
            "location": 2319,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightAccumulatorCall"
                ],
                "ticker_usdt": [],
                "limit_order_open": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightAccumulatorCall"
                ],
                "limit_order": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightAccumulatorCall"
                ],
                "fee": [],
                "mocker": [],
                "is_short": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightAccumulatorCall"
                ]
            }
        },
        "test_bot_loop_start_called_once": {
            "name": "test_bot_loop_start_called_once",
            "location": 2353,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "str"
                ],
                "default_conf_usdt": [
                    "int",
                    "str"
                ],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "dict"
                ]
            }
        },
        "test_manage_open_orders_entry_usercustom": {
            "name": "test_manage_open_orders_entry_usercustom",
            "location": 2367,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "bool",
                    "tests.conftesWorker"
                ],
                "ticker_usdt": [],
                "limit_buy_order_old": [
                    "bool",
                    "tests.conftesWorker"
                ],
                "open_trade": [
                    "Callable",
                    "str",
                    "int"
                ],
                "limit_sell_order_old": [
                    "bool",
                    "tests.conftesWorker"
                ],
                "fee": [],
                "mocker": [
                    "int"
                ],
                "is_short": [
                    "bool",
                    "tests.conftesWorker"
                ]
            }
        },
        "test_manage_open_orders_entry": {
            "name": "test_manage_open_orders_entry",
            "location": 2431,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "bool",
                    "tests.conftesWorker"
                ],
                "ticker_usdt": [],
                "limit_buy_order_old": [
                    "bool",
                    "tests.conftesWorker"
                ],
                "open_trade": [
                    "Optional[Union[float, str]]",
                    "Dict[str, str]",
                    "Union[None, str, homeassistancore.State]",
                    "server.models.User"
                ],
                "limit_sell_order_old": [
                    "bool",
                    "tests.conftesWorker"
                ],
                "fee": [],
                "mocker": [
                    "int"
                ],
                "is_short": [
                    "bool",
                    "tests.conftesWorker"
                ]
            }
        },
        "test_adjust_entry_cancel": {
            "name": "test_adjust_entry_cancel",
            "location": 2470,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "Callable",
                    "bool"
                ],
                "ticker_usdt": [],
                "limit_buy_order_old": [
                    "bool",
                    "tests.conftesWorker"
                ],
                "open_trade": [
                    "Callable",
                    "Dict[str, str]",
                    "zerver.models.Realm",
                    "Sequence[str]",
                    "str",
                    "server.models.User"
                ],
                "limit_sell_order_old": [
                    "bool",
                    "tests.conftesWorker"
                ],
                "fee": [],
                "mocker": [
                    "core.models.MyUser",
                    "core.models.Recipe",
                    "unittesmock.MagicMock",
                    "zerver.models.UserProfile"
                ],
                "caplog": [
                    "str",
                    "bool",
                    "int",
                    "logging.Logger"
                ],
                "is_short": [
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "test_adjust_entry_maintain_replace": {
            "name": "test_adjust_entry_maintain_replace",
            "location": 2510,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "Callable",
                    "bool"
                ],
                "ticker_usdt": [],
                "limit_buy_order_old": [
                    "bool",
                    "tests.conftesWorker"
                ],
                "open_trade": [
                    "Callable",
                    "Dict[str, str]",
                    "zerver.models.Realm",
                    "Sequence[str]",
                    "str",
                    "server.models.User"
                ],
                "limit_sell_order_old": [
                    "bool",
                    "tests.conftesWorker"
                ],
                "fee": [],
                "mocker": [
                    "core.models.MyUser",
                    "core.models.Recipe",
                    "unittesmock.MagicMock",
                    "zerver.models.UserProfile"
                ],
                "caplog": [
                    "bool",
                    "float",
                    "str",
                    "Optional[bool]",
                    "Callable",
                    "int"
                ],
                "is_short": []
            }
        },
        "test_check_handle_cancelled_buy": {
            "name": "test_check_handle_cancelled_buy",
            "location": 2561,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "bool",
                    "tests.conftesWorker"
                ],
                "ticker_usdt": [
                    "models.user.User"
                ],
                "limit_buy_order_old": [
                    "bool",
                    "tests.conftesWorker"
                ],
                "open_trade": [
                    "int",
                    "Callable"
                ],
                "limit_sell_order_old": [
                    "bool",
                    "tests.conftesWorker"
                ],
                "fee": [
                    "models.user.User"
                ],
                "mocker": [
                    "int"
                ],
                "caplog": [
                    "bool",
                    "float",
                    "str",
                    "Optional[bool]",
                    "Callable",
                    "int"
                ],
                "is_short": []
            }
        },
        "test_manage_open_orders_buy_exception": {
            "name": "test_manage_open_orders_buy_exception",
            "location": 2594,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "bool",
                    "tests.conftesWorker"
                ],
                "ticker_usdt": [
                    "models.user.User"
                ],
                "open_trade": [],
                "is_short": [
                    "bool",
                    "tests.conftesWorker"
                ],
                "fee": [
                    "models.user.User"
                ],
                "mocker": [
                    "int",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_manage_open_orders_exit_usercustom": {
            "name": "test_manage_open_orders_exit_usercustom",
            "location": 2623,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "bool",
                    "tests.conftesWorker"
                ],
                "ticker_usdt": [],
                "limit_sell_order_old": [
                    "int"
                ],
                "mocker": [
                    "unittesmock.MagicMock",
                    "int"
                ],
                "is_short": [
                    "bool",
                    "tests.conftesWorker"
                ],
                "open_trade_usdt": [
                    "int",
                    "Optional[recidiviz.common.constants.state.state_incarceration_period.StateIncarcerationPeriodAdmissionReason]",
                    "Optional[bool]",
                    "List[str]"
                ],
                "caplog": [
                    "bool",
                    "str",
                    "int",
                    "logging.Logger",
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "test_manage_open_orders_exit": {
            "name": "test_manage_open_orders_exit",
            "location": 2710,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "bool",
                    "tests.conftesWorker"
                ],
                "ticker_usdt": [],
                "limit_sell_order_old": [
                    "int",
                    "Optional[recidiviz.common.constants.state.state_incarceration_period.StateIncarcerationPeriodAdmissionReason]",
                    "bool",
                    "Optional[bool]"
                ],
                "mocker": [
                    "int"
                ],
                "is_short": [
                    "bool",
                    "tests.conftesWorker"
                ],
                "open_trade_usdt": [
                    "pandas.DataFrame",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "test_check_handle_cancelled_exit": {
            "name": "test_check_handle_cancelled_exit",
            "location": 2747,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "bool",
                    "tests.conftesWorker"
                ],
                "ticker_usdt": [],
                "limit_sell_order_old": [
                    "logging.Logger"
                ],
                "open_trade_usdt": [
                    "bool",
                    "int",
                    "List[recidiviz.persistence.database.schema.state.schema.StateIncarcerationPeriod]",
                    "pandas.DataFrame"
                ],
                "is_short": [
                    "bool",
                    "int"
                ],
                "mocker": [
                    "int"
                ],
                "caplog": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "test_manage_open_orders_partial": {
            "name": "test_manage_open_orders_partial",
            "location": 2783,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "bool",
                    "tests.conftesWorker"
                ],
                "ticker_usdt": [],
                "limit_buy_order_old_partial": [],
                "is_short": [
                    "Callable",
                    "int"
                ],
                "leverage": [
                    "Callable",
                    "Optional[recidiviz.common.constants.state.state_incarceration_period.StateIncarcerationPeriodAdmissionReason]",
                    "models.transaction.EndorsedTX"
                ],
                "open_trade": [
                    "Callable",
                    "Optional[recidiviz.common.constants.state.state_incarceration_period.StateIncarcerationPeriodAdmissionReason]",
                    "models.transaction.EndorsedTX"
                ],
                "mocker": [
                    "int"
                ]
            }
        },
        "test_manage_open_orders_partial_fee": {
            "name": "test_manage_open_orders_partial_fee",
            "location": 2820,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "bool",
                    "tests.conftesWorker"
                ],
                "ticker_usdt": [],
                "open_trade": [
                    "int",
                    "Optional[recidiviz.common.constants.state.state_incarceration_period.StateIncarcerationPeriodAdmissionReason]",
                    "models.transaction.EndorsedTX",
                    "Callable"
                ],
                "caplog": [
                    "str",
                    "float",
                    "bool"
                ],
                "fee": [
                    "bool",
                    "tests.conftesWorker"
                ],
                "is_short": [
                    "bool",
                    "Optional[recidiviz.common.constants.state.state_incarceration_period.StateIncarcerationPeriodAdmissionReason]",
                    "str"
                ],
                "limit_buy_order_old_partial": [
                    "int"
                ],
                "trades_for_order": [],
                "limit_buy_order_old_partial_canceled": [
                    "zerver.models.UserProfile",
                    "bool"
                ],
                "mocker": [
                    "int",
                    "unittesmock.MagicMock",
                    "mock.MagicMock"
                ]
            }
        },
        "test_manage_open_orders_partial_except": {
            "name": "test_manage_open_orders_partial_except",
            "location": 2869,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "bool",
                    "tests.conftesWorker"
                ],
                "ticker_usdt": [],
                "open_trade": [
                    "Callable",
                    "Optional[recidiviz.common.constants.state.state_incarceration_period.StateIncarcerationPeriodAdmissionReason]",
                    "int"
                ],
                "caplog": [
                    "str",
                    "float",
                    "bool"
                ],
                "fee": [
                    "bool",
                    "tests.conftesWorker"
                ],
                "is_short": [
                    "bool",
                    "tests.conftesWorker"
                ],
                "limit_buy_order_old_partial": [
                    "int",
                    "Callable[[str], None]"
                ],
                "trades_for_order": [],
                "limit_buy_order_old_partial_canceled": [
                    "models.user.User"
                ],
                "mocker": [
                    "int"
                ]
            }
        },
        "test_manage_open_orders_exception": {
            "name": "test_manage_open_orders_exception",
            "location": 2916,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.LeftAccumulatorCall"
                ],
                "ticker_usdt": [],
                "open_trade_usdt": [
                    "models.Station",
                    "User.models.User",
                    "authentication.session.models.current_user.CurrentUser",
                    "int"
                ],
                "mocker": [],
                "caplog": [
                    "int",
                    "Callable"
                ]
            }
        },
        "test_handle_cancel_enter": {
            "name": "test_handle_cancel_enter",
            "location": 2948,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "caplog": [
                    "bool",
                    "str",
                    "starfish.core.util.logging.Log",
                    "logging.Logger",
                    "Callable"
                ],
                "default_conf_usdt": [
                    "bool"
                ],
                "limit_order": [
                    "bool"
                ],
                "is_short": [
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "test_handle_cancel_enter_exchanges": {
            "name": "test_handle_cancel_enter_exchanges",
            "location": 3002,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "accounts.models.User"
                ],
                "caplog": [
                    "str",
                    "float",
                    "Optional[float]"
                ],
                "default_conf_usdt": [
                    "bool"
                ],
                "is_short": [
                    "bool"
                ],
                "limit_buy_order_canceled_empty": [
                    "unittesmock.MagicMock",
                    "Dict[str, int]"
                ]
            }
        },
        "test_handle_cancel_enter_corder_empty": {
            "name": "test_handle_cancel_enter_corder_empty",
            "location": 3035,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "Iterable[Iterable[Any]]"
                ],
                "default_conf_usdt": [
                    "bool"
                ],
                "limit_order": [
                    "bool"
                ],
                "is_short": [
                    "bool"
                ],
                "cancelorder": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_handle_cancel_exit_limit": {
            "name": "test_handle_cancel_exit_limit",
            "location": 3068,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "int"
                ],
                "default_conf_usdt": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ],
                "fee": [
                    "pandas.DataFrame",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]",
                    "List[recidiviz.persistence.database.schema.state.schema.StateIncarcerationPeriod]",
                    "int"
                ]
            }
        },
        "test_handle_cancel_exit_cancel_exception": {
            "name": "test_handle_cancel_exit_cancel_exception",
            "location": 3122,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Sequence[relay.exchange.order.Order]",
                    "bool",
                    "relay.exchange.order.Order"
                ],
                "default_conf_usdt": [
                    "str",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "dict"
                ]
            }
        },
        "test_execute_trade_exit_up": {
            "name": "test_execute_trade_exit_up",
            "location": 3142,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [],
                "ticker_usdt": [
                    "Callable[[list], None]"
                ],
                "fee": [
                    "Callable[[list], None]"
                ],
                "ticker_usdt_sell_up": [],
                "mocker": [],
                "ticker_usdt_sell_down": [],
                "is_short": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "open_rate": [
                    "Callable",
                    "dict",
                    "Type[T]"
                ],
                "amt": [
                    "Callable",
                    "dict",
                    "Type[T]"
                ]
            }
        },
        "test_execute_trade_exit_down": {
            "name": "test_execute_trade_exit_down",
            "location": 3221,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [],
                "ticker_usdt": [
                    "Callable[[list], None]"
                ],
                "fee": [
                    "Callable[[list], None]"
                ],
                "ticker_usdt_sell_down": [],
                "ticker_usdt_sell_up": [],
                "mocker": [],
                "is_short": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "test_execute_trade_exit_custom_exit_price": {
            "name": "test_execute_trade_exit_custom_exit_price",
            "location": 3285,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "projects.models.Project"
                ],
                "ticker_usdt": [
                    "Callable[[list], None]"
                ],
                "fee": [
                    "Callable[[list], None]"
                ],
                "ticker_usdt_sell_up": [],
                "is_short": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "amount": [
                    "Callable",
                    "Sequence[Hashable]",
                    "Dict[str, Any]"
                ],
                "open_rate": [
                    "Callable",
                    "Sequence[Hashable]",
                    "Dict[str, Any]"
                ],
                "current_rate": [
                    "Callable",
                    "Sequence[Hashable]",
                    "Dict[str, Any]"
                ],
                "limit": [
                    "NamedTuple",
                    "Iterable[str]",
                    "Sequence['cirq.Qid']"
                ],
                "profit_amount": [
                    "Callable",
                    "Sequence[Hashable]",
                    "Dict[str, Any]"
                ],
                "profit_ratio": [
                    "Callable",
                    "Sequence[Hashable]",
                    "Dict[str, Any]"
                ],
                "profit_or_loss": [
                    "Callable",
                    "Sequence[Hashable]",
                    "Dict[str, Any]"
                ],
                "mocker": []
            }
        },
        "test_execute_trade_exit_down_stoploss_on_exchange_dry_run": {
            "name": "test_execute_trade_exit_down_stoploss_on_exchange_dry_run",
            "location": 3362,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "bool",
                    "Iterable[str]"
                ],
                "ticker_usdt": [
                    "bool"
                ],
                "fee": [
                    "bool"
                ],
                "is_short": [
                    "bool",
                    "str",
                    "int",
                    "list"
                ],
                "ticker_usdt_sell_down": [
                    "tests.conftesWorker",
                    "str"
                ],
                "ticker_usdt_sell_up": [
                    "tests.conftesWorker",
                    "str"
                ],
                "mocker": [
                    "unittesmock.MagicMock",
                    "int",
                    "mock.MagicMock"
                ]
            }
        },
        "test_execute_trade_exit_sloe_cancel_exception": {
            "name": "test_execute_trade_exit_sloe_cancel_exception",
            "location": 3429,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf_usdt": [
                    "int",
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "ticker_usdt": [],
                "fee": [],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "Optional[float]"
                ]
            }
        },
        "test_execute_trade_exit_with_stoploss_on_exchange": {
            "name": "test_execute_trade_exit_with_stoploss_on_exchange",
            "location": 3464,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [],
                "ticker_usdt": [
                    "int",
                    "slice"
                ],
                "fee": [
                    "int",
                    "slice"
                ],
                "ticker_usdt_sell_up": [],
                "is_short": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "mocker": []
            }
        },
        "test_may_execute_trade_exit_after_stoploss_on_exchange_hit": {
            "name": "test_may_execute_trade_exit_after_stoploss_on_exchange_hit",
            "location": 3524,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "bool",
                    "str"
                ],
                "ticker_usdt": [],
                "fee": [],
                "mocker": [
                    "int",
                    "unittesmock.MagicMock",
                    "mock.MagicMock"
                ],
                "is_short": [
                    "bool",
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_execute_trade_exit_market_order": {
            "name": "test_execute_trade_exit_market_order",
            "location": 3601,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "str",
                    "bool"
                ],
                "ticker_usdt": [
                    "bool",
                    "zerver.models.UserProfile"
                ],
                "fee": [
                    "bool"
                ],
                "is_short": [
                    "bool",
                    "zerver.models.UserProfile"
                ],
                "current_rate": [
                    "bool",
                    "databricks.koalas.frame.DataFrame",
                    "dict",
                    "type"
                ],
                "amount": [
                    "bool",
                    "databricks.koalas.frame.DataFrame",
                    "dict",
                    "type"
                ],
                "limit": [
                    "bool",
                    "Iterable[str]"
                ],
                "profit_amount": [
                    "bool",
                    "databricks.koalas.frame.DataFrame",
                    "dict",
                    "type"
                ],
                "profit_ratio": [
                    "int",
                    "List[recidiviz.persistence.entity.state.entities.StateAssessment]"
                ],
                "profit_or_loss": [
                    "bool",
                    "databricks.koalas.frame.DataFrame",
                    "dict",
                    "type"
                ],
                "ticker_usdt_sell_up": [
                    "str",
                    "bool"
                ],
                "mocker": [
                    "int",
                    "unittesmock.MagicMock",
                    "mock.MagicMock"
                ]
            }
        },
        "test_execute_trade_exit_insufficient_funds_error": {
            "name": "test_execute_trade_exit_insufficient_funds_error",
            "location": 3689,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "str",
                    "Callable"
                ],
                "ticker_usdt": [
                    "Callable"
                ],
                "fee": [
                    "Callable"
                ],
                "is_short": [
                    "bool",
                    "str"
                ],
                "ticker_usdt_sell_up": [
                    "bool",
                    "tests.conftesWorker",
                    "List[str]",
                    "int"
                ],
                "mocker": []
            }
        },
        "test_exit_profit_only": {
            "name": "test_exit_profit_only",
            "location": 3741,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "Callable",
                    "str",
                    "logging.Logger"
                ],
                "limit_order": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "bool"
                ],
                "limit_order_open": [],
                "is_short": [
                    "Optional[recidiviz.common.constants.state.state_incarceration_period.StateIncarcerationPeriodAdmissionReason]",
                    "models.transaction.EndorsedTX",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionSentence]",
                    "List[recidiviz.persistence.entity.state.entities.StateIncarcerationSentence]"
                ],
                "fee": [],
                "mocker": [
                    "accounts.models.User"
                ],
                "profit_only": [
                    "Callable",
                    "str",
                    "logging.Logger"
                ],
                "bid": [],
                "ask": [],
                "handle_first": [
                    "tests.conftesWorker",
                    "bool"
                ],
                "handle_second": [
                    "bool",
                    "django.db.models.QuerySet",
                    "Literal",
                    "str",
                    "int"
                ],
                "exit_type": [
                    "float",
                    "str",
                    "models.Channel",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_sell_not_enough_balance": {
            "name": "test_sell_not_enough_balance",
            "location": 3794,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "tests.hints.CleavageCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.LeftAccumulatorCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int"
                ],
                "limit_order": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ],
                "limit_order_open": [
                    "unittesmock.MagicMock"
                ],
                "fee": [
                    "unittesmock.MagicMock"
                ],
                "mocker": [],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "Collection[str]",
                    "bool"
                ]
            }
        },
        "test__safe_exit_amount": {
            "name": "test__safe_exit_amount",
            "location": 3835,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "fee": [
                    "excars.models.user.User",
                    "str"
                ],
                "caplog": [
                    "logging.Logger",
                    "str",
                    "int",
                    "List[recidiviz.persistence.database.schema.state.schema.StatePerson]",
                    "deeplearning.ml4pl.models.logger.Logger"
                ],
                "mocker": [],
                "amount_wallet": [
                    "unittesmock.MagicMock"
                ],
                "has_err": [
                    "List[str]",
                    "Callable[[], None]",
                    "str",
                    "Callable[..., None]",
                    "Exception"
                ]
            }
        },
        "test_locked_pairs": {
            "name": "test_locked_pairs",
            "location": 3869,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [],
                "ticker_usdt": [
                    "str"
                ],
                "fee": [
                    "str"
                ],
                "ticker_usdt_sell_down": [],
                "mocker": [],
                "caplog": [
                    "int",
                    "bool",
                    "float",
                    "Collection[str]",
                    "List[src.scrape.models.ProductSearchResult]"
                ],
                "is_short": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "test_ignore_roi_if_entry_signal": {
            "name": "test_ignore_roi_if_entry_signal",
            "location": 3913,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "dict",
                    "type",
                    "Callable",
                    "str"
                ],
                "limit_order": [
                    "Callable",
                    "Optional[List[str]]",
                    "str",
                    "Optional[str]",
                    "Dict[str, str]"
                ],
                "limit_order_open": [],
                "is_short": [
                    "int",
                    "Callable",
                    "float"
                ],
                "fee": [],
                "mocker": [
                    "str"
                ]
            }
        },
        "test_trailing_stop_loss": {
            "name": "test_trailing_stop_loss",
            "location": 3965,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "bool",
                    "str",
                    "Optional[Callable]",
                    "Callable",
                    "type"
                ],
                "limit_order_open": [],
                "is_short": [],
                "val1": [],
                "val2": [],
                "fee": [],
                "caplog": [
                    "logging.Logger",
                    "bool",
                    "str",
                    "Optional[Mapping[str, Any]]"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "test_trailing_stop_loss_positive": {
            "name": "test_trailing_stop_loss_positive",
            "location": 4031,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "str",
                    "Callable[[List, bool], None]"
                ],
                "limit_order": [],
                "limit_order_open": [],
                "offset": [
                    "logging.Logger",
                    "Collection[str]",
                    "bool"
                ],
                "fee": [],
                "caplog": [
                    "logging.Logger",
                    "logging.FileHandler"
                ],
                "mocker": [],
                "trail_if_reached": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightAccumulatorCall"
                ],
                "second_sl": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightAccumulatorCall"
                ],
                "is_short": [
                    "Iterable[str]"
                ]
            }
        },
        "test_disable_ignore_roi_if_entry_signal": {
            "name": "test_disable_ignore_roi_if_entry_signal",
            "location": 4131,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "bool",
                    "float",
                    "Dict[str, Any]",
                    "int"
                ],
                "limit_order": [
                    "Callable",
                    "Optional[List[str]]",
                    "str",
                    "Optional[str]",
                    "Dict[str, str]"
                ],
                "limit_order_open": [],
                "is_short": [
                    "Optional[recidiviz.common.constants.state.state_incarceration_period.StateIncarcerationPeriodAdmissionReason]",
                    "models.transaction.EndorsedTX",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionSentence]",
                    "List[recidiviz.persistence.entity.state.entities.StateIncarcerationSentence]"
                ],
                "fee": [],
                "mocker": [
                    "str"
                ]
            }
        },
        "test_get_real_amount_quote": {
            "name": "test_get_real_amount_quote",
            "location": 4176,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "str",
                    "int",
                    "bool"
                ],
                "trades_for_order": [
                    "str",
                    "pandas.DataFrame",
                    "dict",
                    "int",
                    "Dict[str, str]",
                    "Union[float, str]",
                    "float"
                ],
                "buy_order_fee": [
                    "pandas.DataFrame",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ],
                "fee": [
                    "int",
                    "Dict[str, List[float]]",
                    "excars.models.profiles.Profile",
                    "dict",
                    "Optional[int]"
                ],
                "caplog": [
                    "int",
                    "str",
                    "bool"
                ],
                "mocker": [
                    "str",
                    "asgard.models.accounAccount",
                    "asgard.models.user.User"
                ]
            }
        },
        "test_get_real_amount_quote_dust": {
            "name": "test_get_real_amount_quote_dust",
            "location": 4202,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "str",
                    "int",
                    "bool"
                ],
                "trades_for_order": [
                    "str",
                    "pandas.DataFrame",
                    "dict",
                    "int",
                    "Dict[str, str]",
                    "Union[float, str]",
                    "float"
                ],
                "buy_order_fee": [
                    "Iterable[str]",
                    "pandas.DataFrame",
                    "paradigm.models.Base",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "fee": [
                    "int",
                    "Dict[str, List[float]]",
                    "excars.models.profiles.Profile",
                    "dict",
                    "Optional[int]"
                ],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "List[str]",
                    "Optional[Match[str]]"
                ],
                "mocker": [
                    "int",
                    "Dict[str, Any]",
                    "str",
                    "bool"
                ]
            }
        },
        "test_get_real_amount_no_trade": {
            "name": "test_get_real_amount_no_trade",
            "location": 4228,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "int",
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "buy_order_fee": [],
                "caplog": [
                    "Exception",
                    "str",
                    "logging.Logger",
                    "dict"
                ],
                "mocker": [
                    "unittesmock.MagicMock",
                    "mock.Mock"
                ],
                "fee": [
                    "jinete.models.planned_trips.PlannedTrip",
                    "str",
                    "list",
                    "float",
                    "fastapi.openapi.models.OAuthFlows"
                ]
            }
        },
        "test_get_real_amount": {
            "name": "test_get_real_amount",
            "location": 4275,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "str",
                    "int",
                    "bool"
                ],
                "trades_for_order": [
                    "str",
                    "Dict[str, Any]"
                ],
                "buy_order_fee": [
                    "databricks.koalas.frame.DataFrame",
                    "int",
                    "Callable"
                ],
                "fee": [
                    "byceps.services.board.models.posting.Posting",
                    "str",
                    "int",
                    "Dict[str, List[float]]",
                    "excars.models.profiles.Profile",
                    "float"
                ],
                "mocker": [
                    "str",
                    "asgard.models.accounAccount",
                    "asgard.models.user.User"
                ],
                "caplog": [
                    "str",
                    "bytes",
                    "List[str]",
                    "Callable[[str], None]",
                    "int"
                ],
                "fee_par": [
                    "str",
                    "bytes",
                    "int",
                    "bool",
                    "tests.conftesWorker"
                ],
                "fee_reduction_amount": [
                    "str",
                    "Callable",
                    "core.models.User",
                    "app.models.SpamResult",
                    "server.models.User"
                ],
                "use_ticker_usdt_rate": [
                    "bool",
                    "int",
                    "Optional[int]",
                    "type"
                ],
                "expected_log": [
                    "str"
                ]
            }
        },
        "test_get_real_amount_multi": {
            "name": "test_get_real_amount_multi",
            "location": 4315,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "str",
                    "int",
                    "bool"
                ],
                "trades_for_order2": [
                    "str",
                    "bytes",
                    "int",
                    "bool",
                    "tests.conftesWorker"
                ],
                "buy_order_fee": [
                    "Dict[str, Any]",
                    "pandas.DataFrame",
                    "List[cmk.gui.plugins.visuals.utils.Filter]",
                    "paradigm.models.Base",
                    "bool",
                    "str"
                ],
                "caplog": [
                    "str"
                ],
                "fee": [
                    "byceps.services.board.models.posting.Posting",
                    "str",
                    "int",
                    "Dict[str, List[float]]",
                    "excars.models.profiles.Profile",
                    "float"
                ],
                "mocker": [
                    "str",
                    "unittesmock.MagicMock"
                ],
                "markets": [],
                "fee_cost": [
                    "str",
                    "bytes",
                    "int",
                    "bool",
                    "tests.conftesWorker"
                ],
                "fee_currency": [
                    "str",
                    "bytes",
                    "int",
                    "bool",
                    "tests.conftesWorker"
                ],
                "fee_reduction_amount": [
                    "str",
                    "Optional[str]",
                    "zerver.models.UserProfile",
                    "float"
                ],
                "expected_fee": [
                    "str",
                    "int",
                    "bool",
                    "Sequence[int]",
                    "float"
                ],
                "expected_log_amount": [
                    "str"
                ]
            }
        },
        "test_get_real_amount_invalid_order": {
            "name": "test_get_real_amount_invalid_order",
            "location": 4368,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "str",
                    "int",
                    "bool"
                ],
                "trades_for_order": [
                    "int",
                    "float",
                    "bool",
                    "str"
                ],
                "buy_order_fee": [
                    "int",
                    "databricks.koalas.frame.DataFrame",
                    "Dict[str, Any]"
                ],
                "fee": [
                    "byceps.services.board.models.posting.Posting",
                    "str",
                    "int",
                    "Dict[str, List[float]]",
                    "excars.models.profiles.Profile",
                    "float"
                ],
                "mocker": [
                    "str",
                    "int",
                    "unittesmock.MagicMock",
                    "List[str]"
                ]
            }
        },
        "test_get_real_amount_fees_order": {
            "name": "test_get_real_amount_fees_order",
            "location": 4391,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "int",
                    "Optional[str]",
                    "str",
                    "List[str]"
                ],
                "market_buy_order_usdt_doublefee": [
                    "Optional[str]",
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "fee": [
                    "int",
                    "Sequence[Hashable]",
                    "str",
                    "Dict[str, Any]"
                ],
                "mocker": [
                    "core.models.Recipe",
                    "core.models.MyUser",
                    "int"
                ]
            }
        },
        "test_get_real_amount_wrong_amount": {
            "name": "test_get_real_amount_wrong_amount",
            "location": 4417,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "str",
                    "bool",
                    "limbic.emotion.models.LexiconLimbicModel"
                ],
                "trades_for_order": [
                    "str",
                    "int",
                    "Callable"
                ],
                "buy_order_fee": [
                    "int"
                ],
                "fee": [
                    "float"
                ],
                "mocker": [
                    "str",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_get_real_amount_wrong_amount_rounding": {
            "name": "test_get_real_amount_wrong_amount_rounding",
            "location": 4441,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "str",
                    "bool",
                    "limbic.emotion.models.LexiconLimbicModel"
                ],
                "trades_for_order": [
                    "str",
                    "int"
                ],
                "buy_order_fee": [
                    "int"
                ],
                "fee": [
                    "byceps.services.board.models.posting.Posting",
                    "str",
                    "Dict[str, List[float]]",
                    "excars.models.profiles.Profile",
                    "Optional[hpaction.models.HPActionDocuments]"
                ],
                "mocker": [
                    "str",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_get_real_amount_open_trade_usdt": {
            "name": "test_get_real_amount_open_trade_usdt",
            "location": 4469,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "int",
                    "Optional[str]",
                    "str",
                    "List[str]"
                ],
                "fee": [
                    "str",
                    "list",
                    "float",
                    "models.confirmation.ConfirmationModel",
                    "jinete.models.planned_trips.PlannedTrip"
                ],
                "mocker": [
                    "int",
                    "Optional[str]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_apply_fee_conditional": {
            "name": "test_apply_fee_conditional",
            "location": 4499,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "bool",
                    "str",
                    "Callable",
                    "int"
                ],
                "fee": [
                    "str",
                    "list"
                ],
                "mocker": [
                    "zerver.models.UserProfile"
                ],
                "amount": [
                    "str"
                ],
                "fee_abs": [
                    "int",
                    "server.models.bike.Bike"
                ],
                "wallet": [
                    "unittesmock.MagicMock",
                    "accounts.models.User"
                ],
                "amount_exp": [
                    "int",
                    "server.models.bike.Bike"
                ]
            }
        },
        "test_order_book_depth_of_market": {
            "name": "test_order_book_depth_of_market",
            "location": 4525,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "logging.handlers.QueueListener",
                    "float"
                ],
                "ticker_usdt": [
                    "tests.components.withings.common.ComponentFactory"
                ],
                "limit_order_open": [
                    "tests.components.withings.common.ComponentFactory"
                ],
                "fee": [
                    "tests.components.withings.common.ComponentFactory"
                ],
                "mocker": [
                    "bool",
                    "Sequence[relay.exchange.order.Order]"
                ],
                "order_book_l2": [
                    "tests.hints.CleavageCall",
                    "int",
                    "tests.hints.RightAccumulatorCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.hints.LeftAccumulatorCall"
                ],
                "delta": [
                    "tests.hints.CleavageCall",
                    "int",
                    "tests.hints.RightAccumulatorCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.hints.LeftAccumulatorCall"
                ],
                "is_high_delta": [
                    "str",
                    "bool",
                    "List[bool]",
                    "Exception"
                ],
                "is_short": [
                    "tests.components.withings.common.ComponentFactory"
                ]
            }
        },
        "test_order_book_entry_pricing1": {
            "name": "test_order_book_entry_pricing1",
            "location": 4575,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf_usdt": [],
                "order_book_l2": [
                    "unittesmock.MagicMock"
                ],
                "exception_thrown": [
                    "List[str]",
                    "bool",
                    "List[Tuple[str, Any]]",
                    "Callable[[], None]",
                    "Literal",
                    "Iterable[str]"
                ],
                "ask": [
                    "bool",
                    "unittesmock.MagicMock",
                    "str"
                ],
                "last": [
                    "bool",
                    "unittesmock.MagicMock",
                    "str"
                ],
                "order_book_top": [
                    "bool",
                    "str"
                ],
                "order_book": [
                    "unittesmock.MagicMock"
                ],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "Optional[float]"
                ]
            }
        },
        "test_check_depth_of_market": {
            "name": "test_check_depth_of_market",
            "location": 4605,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "str",
                    "accounts.models.User"
                ],
                "mocker": [],
                "order_book_l2": [
                    "Callable",
                    "str"
                ]
            }
        },
        "test_order_book_exit_pricing": {
            "name": "test_order_book_exit_pricing",
            "location": 4626,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "str",
                    "Dict[str, Any]",
                    "tuple"
                ],
                "limit_buy_order_usdt_open": [],
                "limit_buy_order_usdt": [
                    "int",
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ],
                "fee": [],
                "is_short": [
                    "str",
                    "List[bool]",
                    "List[str]",
                    "Set[str]",
                    "bool",
                    "Exception"
                ],
                "limit_sell_order_usdt_open": [],
                "mocker": [],
                "order_book_l2": [
                    "core.models.MyUser",
                    "zerver.models.UserProfile"
                ],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "Collection[str]",
                    "bool"
                ]
            }
        },
        "test_startup_state": {
            "name": "test_startup_state",
            "location": 4681,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "int",
                    "str"
                ],
                "mocker": [
                    "unittesmock.MagicMock",
                    "mock.MagicMock"
                ]
            }
        },
        "test_startup_trade_reinit": {
            "name": "test_startup_trade_reinit",
            "location": 4690,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "int"
                ],
                "edge_conf": [
                    "int"
                ],
                "mocker": [
                    "mock.MagicMock",
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_sync_wallet_dry_run": {
            "name": "test_sync_wallet_dry_run",
            "location": 4708,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf_usdt": [
                    "Optional[int]",
                    "Dict[int, dict]",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionSentence]",
                    "Optional[\"Game\"]",
                    "dict",
                    "str"
                ],
                "ticker_usdt": [
                    "tests.components.withings.common.ComponentFactory"
                ],
                "fee": [
                    "tests.components.withings.common.ComponentFactory"
                ],
                "limit_buy_order_usdt_open": [
                    "tests.components.withings.common.ComponentFactory"
                ],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "Optional[float]"
                ]
            }
        },
        "test_cancel_all_open_orders": {
            "name": "test_cancel_all_open_orders",
            "location": 4745,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str"
                ],
                "default_conf_usdt": [
                    "Optional[\"Game\"]",
                    "str",
                    "float",
                    "Dict[int, dict]",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionSentence]",
                    "Optional[int]"
                ],
                "fee": [
                    "tests.basilisp.helpers.CompileFn",
                    "Dict[str, Sequence[str]]"
                ],
                "limit_order": [
                    "str"
                ],
                "limit_order_open": [
                    "str"
                ],
                "is_short": [
                    "str"
                ],
                "buy_calls": [
                    "unittesmock.MagicMock",
                    "int"
                ],
                "sell_calls": [
                    "unittesmock.MagicMock",
                    "int"
                ]
            }
        },
        "test_check_for_open_trades": {
            "name": "test_check_for_open_trades",
            "location": 4771,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int"
                ],
                "default_conf_usdt": [
                    "str",
                    "int"
                ],
                "fee": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "is_short": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_startup_update_open_orders": {
            "name": "test_startup_update_open_orders",
            "location": 4789,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "List[src.main.core.models.area.Area]"
                ],
                "default_conf_usdt": [
                    "str"
                ],
                "fee": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "caplog": [
                    "str",
                    "starfish.core.util.logging.Log",
                    "Optional[Dict]",
                    "Union[int, str]"
                ],
                "is_short": []
            }
        },
        "test_update_closed_trades_without_assigned_fees": {
            "name": "test_update_closed_trades_without_assigned_fees",
            "location": 4827,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf_usdt": [
                    "bool",
                    "List[str]",
                    "int",
                    "List[Tuple[str, Any]]",
                    "Literal"
                ],
                "fee": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "is_short": []
            }
        },
        "test_reupdate_enter_order_fees": {
            "name": "test_reupdate_enter_order_fees",
            "location": 4891,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "List[str]"
                ],
                "default_conf_usdt": [
                    "str",
                    "bool"
                ],
                "fee": [
                    "tests.setup.SetupTest"
                ],
                "caplog": [
                    "str",
                    "Optional[float]",
                    "logging.Logger"
                ],
                "is_short": [
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "test_handle_insufficient_funds": {
            "name": "test_handle_insufficient_funds",
            "location": 4931,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str"
                ],
                "default_conf_usdt": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "Literal",
                    "bool",
                    "django.db.models.QuerySet",
                    "List[str]",
                    "Optional[Iterable[str]]"
                ],
                "fee": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "is_short": [],
                "caplog": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_get_valid_price": {
            "name": "test_get_valid_price",
            "location": 5030,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "relay.exchange.order.Order",
                    "Sequence[relay.exchange.order.Order]"
                ],
                "default_conf_usdt": [
                    "int",
                    "bool",
                    "str",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_update_funding_fees_schedule": {
            "name": "test_update_funding_fees_schedule",
            "location": 5084,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Optional[List[Any]]",
                    "int",
                    "tests.basilisp.helpers.CompileFn",
                    "Optional[Callable]"
                ],
                "default_conf": [
                    "Callable",
                    "Literal"
                ],
                "trading_mode": [
                    "int",
                    "List[str]",
                    "Set[str]",
                    "pandas.DataFrame",
                    "str"
                ],
                "calls": [
                    "Callable",
                    "Tuple[str]"
                ],
                "time_machine": [
                    "Callable",
                    "str",
                    "Callable[[Any], bool]"
                ],
                "t1": [
                    "int",
                    "list",
                    "str",
                    "Type[django.db.models.Model]",
                    "Collection",
                    "pandas.DataFrame"
                ],
                "t2": [
                    "int",
                    "list",
                    "str",
                    "Type[django.db.models.Model]",
                    "Collection",
                    "pandas.DataFrame"
                ]
            }
        },
        "test_update_funding_fees": {
            "name": "test_update_funding_fees",
            "location": 5104,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "bool"
                ],
                "default_conf": [
                    "str"
                ],
                "time_machine": [
                    "bool"
                ],
                "fee": [
                    "tests.components.withings.common.ComponentFactory",
                    "accounts.models.User",
                    "mock.MagicMock"
                ],
                "ticker_usdt_sell_up": [
                    "bool",
                    "Iterable[str]"
                ],
                "is_short": [
                    "bool"
                ],
                "limit_order_open": [
                    "str",
                    "bool",
                    "django.db.models.QuerySet"
                ],
                "schedule_off": [
                    "str",
                    "bool",
                    "django.db.models.QuerySet"
                ]
            }
        },
        "test_position_adjust": {
            "name": "test_position_adjust",
            "location": 5259,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Iterable[str]"
                ],
                "default_conf_usdt": [
                    "bool",
                    "int",
                    "str",
                    "Callable[..., None]"
                ],
                "fee": [
                    "bool",
                    "int",
                    "str",
                    "Callable[..., None]"
                ]
            }
        },
        "test_process_open_trade_positions_exception": {
            "name": "test_process_open_trade_positions_exception",
            "location": 5501,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "default_conf_usdt": [
                    "Optional[\"Frame\"]",
                    "esm.models.dashboard_clienDashboardClient",
                    "bool",
                    "str"
                ],
                "fee": [
                    "Dict[str, Sequence[str]]"
                ],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "Optional[float]"
                ]
            }
        },
        "test_check_and_call_adjust_trade_position": {
            "name": "test_check_and_call_adjust_trade_position",
            "location": 5516,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "Callable"
                ],
                "default_conf_usdt": [
                    "str",
                    "projects.models.Project",
                    "Dict[str, Any]"
                ],
                "fee": [
                    "Dict[str, Sequence[str]]"
                ],
                "caplog": [
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "logging.LogRecord"
                ]
            }
        },
        "test_update_closed_trades_without_assigned_fees.patch_with_fee": {
            "name": "patch_with_fee",
            "location": 4830,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "order": [
                    "bytes",
                    "dict",
                    "str",
                    "Sequence['cirq.Qid']"
                ]
            }
        },
        "test_handle_insufficient_funds.reset_open_orders": {
            "name": "reset_open_orders",
            "location": 4939,
            "return": [
                "None"
            ],
            "arguments": {
                "trade": [
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "test_update_funding_fees.refresh_latest_ohlcv_mock": {
            "name": "refresh_latest_ohlcv_mock",
            "location": 5192,
            "return": [
                "Dict[tuple,]",
                "str",
                "Sequence[str]",
                "Dict"
            ],
            "arguments": {
                "pairlist": [
                    "Callable[[], bytes]",
                    "bool"
                ]
            }
        },
        "test_position_adjust.make_sure_its_651": {
            "name": "make_sure_its_651",
            "location": 5380,
            "return": [
                "str",
                "None"
            ],
            "arguments": {}
        }
    },
    "freqtrade-develop/tests/test_indicators.py": {
        "test_crossed_numpy_types": {
            "name": "test_crossed_numpy_types",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "freqtrade-develop/tests/test_integration.py": {
        "test_may_execute_exit_stoploss_on_exchange_multi": {
            "name": "test_may_execute_exit_stoploss_on_exchange_multi",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int"
                ],
                "ticker": [
                    "int"
                ],
                "fee": [
                    "int"
                ],
                "limit_buy_order": [
                    "List[str]",
                    "Set[str]",
                    "str",
                    "List[bool]",
                    "bool"
                ],
                "mocker": [
                    "int"
                ]
            }
        },
        "test_forcebuy_last_unlimited": {
            "name": "test_forcebuy_last_unlimited",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "bool"
                ],
                "ticker": [],
                "fee": [],
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "balance_ratio": [
                    "bool"
                ],
                "result1": []
            }
        },
        "test_dca_buying": {
            "name": "test_dca_buying",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [],
                "ticker_usdt": [
                    "int",
                    "slice"
                ],
                "fee": [
                    "int",
                    "slice"
                ],
                "mocker": [
                    "int"
                ]
            }
        },
        "test_dca_short": {
            "name": "test_dca_short",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [],
                "ticker_usdt": [
                    "int",
                    "slice"
                ],
                "fee": [
                    "int",
                    "slice"
                ],
                "mocker": [
                    "int"
                ]
            }
        },
        "test_dca_order_adjust": {
            "name": "test_dca_order_adjust",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [],
                "ticker_usdt": [
                    "int",
                    "slice"
                ],
                "fee": [
                    "int",
                    "slice"
                ],
                "mocker": [
                    "int"
                ]
            }
        }
    },
    "freqtrade-develop/tests/test_main.py": {
        "test_parse_args_None": {
            "name": "test_parse_args_None",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": []
            }
        },
        "test_parse_args_backtesting": {
            "name": "test_parse_args_backtesting",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_main_start_hyperopt": {
            "name": "test_main_start_hyperopt",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_main_fatal_exception": {
            "name": "test_main_fatal_exception",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "str",
                    "pypi2nix.path.Path",
                    "bool"
                ],
                "caplog": [
                    "str",
                    "int"
                ]
            }
        },
        "test_main_keyboard_interrupt": {
            "name": "test_main_keyboard_interrupt",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "str",
                    "pypi2nix.path.Path",
                    "bool"
                ],
                "caplog": [
                    "str",
                    "int"
                ]
            }
        },
        "test_main_operational_exception": {
            "name": "test_main_operational_exception",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "str",
                    "pypi2nix.path.Path",
                    "bool"
                ],
                "caplog": [
                    "str",
                    "int"
                ]
            }
        },
        "test_main_operational_exception1": {
            "name": "test_main_operational_exception1",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "str",
                    "pypi2nix.path.Path",
                    "bool"
                ],
                "caplog": [
                    "List[Dict[str, float]]",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        },
        "test_main_reload_config": {
            "name": "test_main_reload_config",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Dict[str, Any]",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "default_conf": [
                    "Tuple[paradigm.models.Base, tests.utils.Args]",
                    "dict"
                ],
                "caplog": [
                    "str",
                    "Optional[float]"
                ]
            }
        },
        "test_reconfigure": {
            "name": "test_reconfigure",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "dict"
                ]
            }
        }
    },
    "freqtrade-develop/tests/test_misc.py": {
        "test_decimals_per_coin": {
            "name": "test_decimals_per_coin",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_round_coin_value": {
            "name": "test_round_coin_value",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_shorten_date": {
            "name": "test_shorten_date",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_file_dump_json": {
            "name": "test_file_dump_json",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_file_load_json": {
            "name": "test_file_load_json",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "testdatadir": [
                    "pathlib.Path",
                    "bytes",
                    "Callable"
                ]
            }
        },
        "test_pair_to_filename": {
            "name": "test_pair_to_filename",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "pair": [
                    "str",
                    "pathlib.Path",
                    "bytes",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "expected_result": [
                    "int",
                    "bool",
                    "Callable[[], str]"
                ]
            }
        },
        "test_format_ms_time": {
            "name": "test_format_ms_time",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_safe_value_fallback": {
            "name": "test_safe_value_fallback",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_safe_value_fallback2": {
            "name": "test_safe_value_fallback2",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_plural": {
            "name": "test_plural",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_render_template_fallback": {
            "name": "test_render_template_fallback",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Type"
                ]
            }
        },
        "test_parse_db_uri_for_logging": {
            "name": "test_parse_db_uri_for_logging",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "conn_url": [
                    "str",
                    "dict",
                    "bool"
                ],
                "expected": [
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_deep_merge_dicts": {
            "name": "test_deep_merge_dicts",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "freqtrade-develop/tests/test_periodiccache.py": {
        "test_ttl_cache": {
            "name": "test_ttl_cache",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "freqtrade-develop/tests/test_persistence.py": {
        "test_init_create_session": {
            "name": "test_init_create_session",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": []
            }
        },
        "test_init_custom_db_url": {
            "name": "test_init_custom_db_url",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "tmpdir": []
            }
        },
        "test_init_invalid_db_url": {
            "name": "test_init_invalid_db_url",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_init_prod_db": {
            "name": "test_init_prod_db",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": []
            }
        },
        "test_init_dryrun_db": {
            "name": "test_init_dryrun_db",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "tmpdir": []
            }
        },
        "test_enter_exit_side": {
            "name": "test_enter_exit_side",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "fee": [],
                "is_short": []
            }
        },
        "test_set_stop_loss_isolated_liq": {
            "name": "test_set_stop_loss_isolated_liq",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "fee": []
            }
        },
        "test_interest": {
            "name": "test_interest",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "fee": [],
                "exchange": [],
                "is_short": [],
                "lev": [],
                "minutes": [],
                "rate": [],
                "interest": [],
                "trading_mode": []
            }
        },
        "test_borrowed": {
            "name": "test_borrowed",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "limit_buy_order_usdt": [],
                "limit_sell_order_usdt": [],
                "fee": [],
                "caplog": [],
                "is_short": [],
                "lev": [],
                "borrowed": [],
                "trading_mode": []
            }
        },
        "test_update_limit_order": {
            "name": "test_update_limit_order",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {
                "fee": [],
                "caplog": [],
                "limit_buy_order_usdt": [],
                "limit_sell_order_usdt": [],
                "time_machine": [],
                "is_short": [],
                "open_rate": [],
                "close_rate": [],
                "lev": [],
                "profit": [],
                "trading_mode": []
            }
        },
        "test_update_market_order": {
            "name": "test_update_market_order",
            "location": 514,
            "return": [
                "None"
            ],
            "arguments": {
                "market_buy_order_usdt": [],
                "market_sell_order_usdt": [],
                "fee": [],
                "caplog": []
            }
        },
        "test_calc_open_close_trade_price": {
            "name": "test_calc_open_close_trade_price",
            "location": 577,
            "return": [
                "None"
            ],
            "arguments": {
                "limit_buy_order_usdt": [],
                "limit_sell_order_usdt": [],
                "fee": [],
                "exchange": [],
                "is_short": [],
                "lev": [],
                "open_value": [],
                "close_value": [],
                "profit": [],
                "profit_ratio": [],
                "trading_mode": [],
                "funding_fees": []
            }
        },
        "test_trade_close": {
            "name": "test_trade_close",
            "location": 615,
            "return": [
                "None"
            ],
            "arguments": {
                "limit_buy_order_usdt": [],
                "limit_sell_order_usdt": [],
                "fee": []
            }
        },
        "test_calc_close_trade_price_exception": {
            "name": "test_calc_close_trade_price_exception",
            "location": 647,
            "return": [
                "None"
            ],
            "arguments": {
                "limit_buy_order_usdt": [],
                "fee": []
            }
        },
        "test_update_open_order": {
            "name": "test_update_open_order",
            "location": 667,
            "return": [
                "None"
            ],
            "arguments": {
                "limit_buy_order_usdt": []
            }
        },
        "test_update_invalid_order": {
            "name": "test_update_invalid_order",
            "location": 693,
            "return": [
                "None"
            ],
            "arguments": {
                "limit_buy_order_usdt": []
            }
        },
        "test_calc_open_trade_value": {
            "name": "test_calc_open_trade_value",
            "location": 724,
            "return": [
                "None"
            ],
            "arguments": {
                "limit_buy_order_usdt": [],
                "exchange": [],
                "lev": [],
                "is_short": [],
                "fee_rate": [],
                "result": [],
                "trading_mode": []
            }
        },
        "test_calc_close_trade_price": {
            "name": "test_calc_close_trade_price",
            "location": 796,
            "return": [
                "None"
            ],
            "arguments": {
                "open_rate": [],
                "exchange": [],
                "is_short": [],
                "lev": [],
                "close_rate": [],
                "fee_rate": [],
                "result": [],
                "trading_mode": [],
                "funding_fees": []
            }
        },
        "test_calc_profit": {
            "name": "test_calc_profit",
            "location": 900,
            "return": [
                "None"
            ],
            "arguments": {
                "exchange": [],
                "is_short": [],
                "lev": [],
                "close_rate": [],
                "fee_close": [],
                "profit": [],
                "profit_ratio": [],
                "trading_mode": [],
                "funding_fees": []
            }
        },
        "test_migrate_new": {
            "name": "test_migrate_new",
            "location": 1143,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [],
                "fee": [],
                "caplog": []
            }
        },
        "test_migrate_too_old": {
            "name": "test_migrate_too_old",
            "location": 1354,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [],
                "fee": [],
                "caplog": []
            }
        },
        "test_migrate_get_last_sequence_ids": {
            "name": "test_migrate_get_last_sequence_ids",
            "location": 1401,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_migrate_set_sequence_ids": {
            "name": "test_migrate_set_sequence_ids",
            "location": 1417,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_migrate_pairlocks": {
            "name": "test_migrate_pairlocks",
            "location": 1433,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [],
                "fee": [],
                "caplog": []
            }
        },
        "test_adjust_stop_loss": {
            "name": "test_adjust_stop_loss",
            "location": 1482,
            "return": [
                "None"
            ],
            "arguments": {
                "fee": []
            }
        },
        "test_adjust_stop_loss_short": {
            "name": "test_adjust_stop_loss_short",
            "location": 1534,
            "return": [
                "None"
            ],
            "arguments": {
                "fee": []
            }
        },
        "test_adjust_min_max_rates": {
            "name": "test_adjust_min_max_rates",
            "location": 1587,
            "return": [
                "None"
            ],
            "arguments": {
                "fee": []
            }
        },
        "test_get_open": {
            "name": "test_get_open",
            "location": 1626,
            "return": [
                "None"
            ],
            "arguments": {
                "fee": [],
                "is_short": [],
                "use_db": []
            }
        },
        "test_get_open_lev": {
            "name": "test_get_open_lev",
            "location": 1638,
            "return": [
                "None"
            ],
            "arguments": {
                "fee": [],
                "use_db": []
            }
        },
        "test_to_json": {
            "name": "test_to_json",
            "location": 1649,
            "return": [
                "None"
            ],
            "arguments": {
                "fee": []
            }
        },
        "test_stoploss_reinitialization": {
            "name": "test_stoploss_reinitialization",
            "location": 1807,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "fee": []
            }
        },
        "test_stoploss_reinitialization_leverage": {
            "name": "test_stoploss_reinitialization_leverage",
            "location": 1867,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "fee": []
            }
        },
        "test_stoploss_reinitialization_short": {
            "name": "test_stoploss_reinitialization_short",
            "location": 1928,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "fee": []
            }
        },
        "test_update_fee": {
            "name": "test_update_fee",
            "location": 1987,
            "return": [
                "None"
            ],
            "arguments": {
                "fee": []
            }
        },
        "test_fee_updated": {
            "name": "test_fee_updated",
            "location": 2026,
            "return": [
                "None"
            ],
            "arguments": {
                "fee": []
            }
        },
        "test_total_open_trades_stakes": {
            "name": "test_total_open_trades_stakes",
            "location": 2059,
            "return": [
                "None"
            ],
            "arguments": {
                "fee": [],
                "is_short": [],
                "use_db": []
            }
        },
        "test_get_total_closed_profit": {
            "name": "test_get_total_closed_profit",
            "location": 2079,
            "return": [
                "None"
            ],
            "arguments": {
                "fee": [],
                "use_db": [],
                "is_short": [],
                "result": []
            }
        },
        "test_get_trades_proxy": {
            "name": "test_get_trades_proxy",
            "location": 2095,
            "return": [
                "None"
            ],
            "arguments": {
                "fee": [],
                "use_db": [],
                "is_short": []
            }
        },
        "test_get_trades__query": {
            "name": "test_get_trades__query",
            "location": 2121,
            "return": [
                "None"
            ],
            "arguments": {
                "fee": [],
                "is_short": []
            }
        },
        "test_get_trades_backtest": {
            "name": "test_get_trades_backtest",
            "location": 2137,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_overall_performance": {
            "name": "test_get_overall_performance",
            "location": 2146,
            "return": [
                "None"
            ],
            "arguments": {
                "fee": []
            }
        },
        "test_get_best_pair": {
            "name": "test_get_best_pair",
            "location": 2163,
            "return": [
                "None"
            ],
            "arguments": {
                "fee": [],
                "is_short": [],
                "pair": [],
                "profit": []
            }
        },
        "test_get_best_pair_lev": {
            "name": "test_get_best_pair_lev",
            "location": 2176,
            "return": [
                "None"
            ],
            "arguments": {
                "fee": []
            }
        },
        "test_get_exit_order_count": {
            "name": "test_get_exit_order_count",
            "location": 2190,
            "return": [
                "None"
            ],
            "arguments": {
                "fee": [],
                "is_short": []
            }
        },
        "test_update_order_from_ccxt": {
            "name": "test_update_order_from_ccxt",
            "location": 2198,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": []
            }
        },
        "test_select_order": {
            "name": "test_select_order",
            "location": 2260,
            "return": [
                "None"
            ],
            "arguments": {
                "fee": [],
                "is_short": []
            }
        },
        "test_Trade_object_idem": {
            "name": "test_Trade_object_idem",
            "location": 2307,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_recalc_trade_from_orders": {
            "name": "test_recalc_trade_from_orders",
            "location": 2349,
            "return": [
                "None"
            ],
            "arguments": {
                "fee": []
            }
        },
        "test_recalc_trade_from_orders_ignores_bad_orders": {
            "name": "test_recalc_trade_from_orders_ignores_bad_orders",
            "location": 2511,
            "return": [
                "None"
            ],
            "arguments": {
                "fee": [],
                "is_short": []
            }
        },
        "test_select_filled_orders": {
            "name": "test_select_filled_orders",
            "location": 2702,
            "return": [
                "None"
            ],
            "arguments": {
                "fee": []
            }
        },
        "test_order_to_ccxt": {
            "name": "test_order_to_ccxt",
            "location": 2748,
            "return": [
                "None"
            ],
            "arguments": {
                "limit_buy_order_open": []
            }
        }
    },
    "freqtrade-develop/tests/test_plotting.py": {
        "fig_generating_mock": {
            "name": "fig_generating_mock",
            "location": 24,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "fig": [
                    "Callable",
                    "Optional",
                    "str",
                    "Callable[[], bytes]",
                    "bool"
                ]
            }
        },
        "find_trace_in_fig_data": {
            "name": "find_trace_in_fig_data",
            "location": 29,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "data": [
                    "str",
                    "int",
                    "Callable[[str], Any]"
                ],
                "search_string": [
                    "str",
                    "int",
                    "Callable[[str], Any]"
                ]
            }
        },
        "generate_empty_figure": {
            "name": "generate_empty_figure",
            "location": 34,
            "return": [
                "int",
                "str",
                "commands.CommandMessage"
            ],
            "arguments": {}
        },
        "test_init_plotscript": {
            "name": "test_init_plotscript",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [
                    "List[str]",
                    "Set[str]",
                    "str",
                    "List[bool]",
                    "bool",
                    "Dict[str, Tuple[str, str]]",
                    "tests.testmodels.Signals"
                ],
                "testdatadir": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_add_indicators": {
            "name": "test_add_indicators",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "dict",
                    "Sequence"
                ],
                "testdatadir": [
                    "str",
                    "IO[bytes]",
                    "list"
                ],
                "caplog": [
                    "Exception",
                    "dict",
                    "Dict[str, List[bytes]]",
                    "str"
                ]
            }
        },
        "test_add_areas": {
            "name": "test_add_areas",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "dict",
                    "Sequence"
                ],
                "testdatadir": [
                    "str",
                    "IO[bytes]",
                    "list"
                ],
                "caplog": [
                    "BaseException",
                    "Exception",
                    "werkzeug.exceptions.InternalServerError",
                    "str",
                    "pandas.DataFrame"
                ]
            }
        },
        "test_plot_trades": {
            "name": "test_plot_trades",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "testdatadir": [
                    "pathlib.Path",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "caplog": [
                    "str"
                ]
            }
        },
        "test_generate_candlestick_graph_no_signals_no_trades": {
            "name": "test_generate_candlestick_graph_no_signals_no_trades",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "List[bool]",
                    "bool",
                    "dict"
                ],
                "mocker": [
                    "unittesmock.MagicMock",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "testdatadir": [
                    "List[str]"
                ],
                "caplog": [
                    "List[Dict[str, float]]",
                    "Collection[str]",
                    "bool"
                ]
            }
        },
        "test_generate_candlestick_graph_no_trades": {
            "name": "test_generate_candlestick_graph_no_trades",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int"
                ],
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "testdatadir": []
            }
        },
        "test_generate_Plot_filename": {
            "name": "test_generate_Plot_filename",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_generate_plot_file": {
            "name": "test_generate_plot_file",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "mock.MagicMock"
                ],
                "caplog": [
                    "str",
                    "tests.fixtures.cloud_uploader.Uploader"
                ]
            }
        },
        "test_add_profit": {
            "name": "test_add_profit",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "testdatadir": [
                    "pathlib.Path",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_generate_profit_graph": {
            "name": "test_generate_profit_graph",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "testdatadir": []
            }
        },
        "test_start_plot_dataframe": {
            "name": "test_start_plot_dataframe",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Dict[str, Any]",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_load_and_plot_trades": {
            "name": "test_load_and_plot_trades",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightAccumulatorCall"
                ],
                "mocker": [],
                "caplog": [
                    "str"
                ],
                "testdatadir": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightAccumulatorCall"
                ]
            }
        },
        "test_start_plot_profit": {
            "name": "test_start_plot_profit",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Dict[str, Any]",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_start_plot_profit_error": {
            "name": "test_start_plot_profit_error",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "jsonlog.tests.capture.Capture"
                ]
            }
        },
        "test_plot_profit": {
            "name": "test_plot_profit",
            "location": 451,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Iterable[str]"
                ],
                "mocker": [],
                "testdatadir": []
            }
        },
        "test_create_plotconfig": {
            "name": "test_create_plotconfig",
            "location": 518,
            "return": [
                "None"
            ],
            "arguments": {
                "ind1": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "ind2": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "plot_conf": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "exp": [
                    "int"
                ]
            }
        }
    },
    "freqtrade-develop/tests/test_talib.py": {
        "test_talib_bollingerbands_near_zero_values": {
            "name": "test_talib_bollingerbands_near_zero_values",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "freqtrade-develop/tests/test_timerange.py": {
        "test_parse_timerange_incorrect": {
            "name": "test_parse_timerange_incorrect",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_subtract_start": {
            "name": "test_subtract_start",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_adjust_start_if_necessary": {
            "name": "test_adjust_start_if_necessary",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "freqtrade-develop/tests/test_wallets.py": {
        "test_sync_wallet_at_boot": {
            "name": "test_sync_wallet_at_boot",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "int"
                ]
            }
        },
        "test_sync_wallet_missing_data": {
            "name": "test_sync_wallet_missing_data",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "Optional[\"Game\"]",
                    "int"
                ]
            }
        },
        "test_get_trade_stake_amount_no_stake_amount": {
            "name": "test_get_trade_stake_amount_no_stake_amount",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "test_get_trade_stake_amount_unlimited_amount": {
            "name": "test_get_trade_stake_amount_unlimited_amount",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "bool",
                    "tests.conftesWorker"
                ],
                "ticker": [
                    "bool"
                ],
                "balance_ratio": [
                    "bool",
                    "tests.conftesWorker"
                ],
                "capital": [
                    "bool",
                    "Optional[int]",
                    "Optional[List[str]]",
                    "Optional[Iterable[str]]",
                    "float",
                    "Optional[tuple]"
                ],
                "result1": [
                    "dict",
                    "bool",
                    "Optional[tuple]"
                ],
                "result2": [
                    "bool",
                    "Union[int, slice]"
                ],
                "limit_buy_order_open": [
                    "bool"
                ],
                "fee": [
                    "bool"
                ],
                "mocker": [
                    "bool"
                ]
            }
        },
        "test_validate_stake_amount": {
            "name": "test_validate_stake_amount",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "Callable",
                    "Optional[bool]"
                ],
                "default_conf": [
                    "str"
                ],
                "stake_amount": [
                    "int",
                    "Optional[str]"
                ],
                "min_stake": [
                    "int",
                    "Optional[str]"
                ],
                "stake_available": [
                    "tests.async_mock.Mock",
                    "bytes"
                ],
                "max_stake": [
                    "int",
                    "Optional[str]"
                ],
                "expected": [
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "test_get_starting_balance": {
            "name": "test_get_starting_balance",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "dict",
                    "Optional[List[str]]"
                ],
                "default_conf": [
                    "int",
                    "bool"
                ],
                "available_capital": [
                    "bool",
                    "str",
                    "dict",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "closed_profit": [
                    "unittesmock.MagicMock",
                    "str",
                    "int"
                ],
                "open_stakes": [
                    "unittesmock.MagicMock",
                    "str",
                    "int"
                ],
                "free": [
                    "unittesmock.MagicMock",
                    "str",
                    "int"
                ],
                "expected": [
                    "Optional[str]",
                    "dict",
                    "str",
                    "int"
                ]
            }
        },
        "test_sync_wallet_futures_live": {
            "name": "test_sync_wallet_futures_live",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "default_conf": [
                    "int"
                ]
            }
        },
        "test_sync_wallet_futures_dry": {
            "name": "test_sync_wallet_futures_dry",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable"
                ],
                "default_conf": [
                    "Optional[\"Game\"]",
                    "Optional[int]",
                    "float",
                    "str"
                ],
                "fee": []
            }
        }
    },
    "freqtrade-develop/tests/test_worker.py": {
        "test_worker_state": {
            "name": "test_worker_state",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "logging.Logger",
                    "Dict[str, Any]",
                    "str",
                    "Callable[[List, bool], None]"
                ],
                "markets": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_worker_running": {
            "name": "test_worker_running",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "str",
                    "Callable"
                ],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "Optional[float]"
                ]
            }
        },
        "test_worker_stopped": {
            "name": "test_worker_stopped",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "dict"
                ],
                "default_conf": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable"
                ],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "Optional[float]"
                ]
            }
        },
        "test_throttle": {
            "name": "test_throttle",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable"
                ],
                "default_conf": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable"
                ],
                "caplog": [
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "logging.LogRecord"
                ]
            }
        },
        "test_throttle_with_assets": {
            "name": "test_throttle_with_assets",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable"
                ],
                "default_conf": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "test_worker_heartbeat_running": {
            "name": "test_worker_heartbeat_running",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "str"
                ],
                "mocker": [
                    "str"
                ],
                "caplog": [
                    "str"
                ]
            }
        },
        "test_worker_heartbeat_stopped": {
            "name": "test_worker_heartbeat_stopped",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int"
                ],
                "mocker": [
                    "str"
                ],
                "caplog": [
                    "str",
                    "dict"
                ]
            }
        },
        "test_throttle.throttled_func": {
            "name": "throttled_func",
            "location": 51,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "test_throttle_with_assets.throttled_func": {
            "name": "throttled_func",
            "location": 70,
            "return": [
                "int",
                "float",
                "Callable[[T],bool]"
            ],
            "arguments": {
                "nb_assets": [
                    "List[Dict[str, Any]]",
                    "str",
                    "int"
                ]
            }
        }
    },
    "freqtrade-develop/tests/__init__.py": {},
    "freqtrade-develop/tests/commands/test_build_config.py": {
        "test_validate_is_float": {
            "name": "test_validate_is_float",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_is_int": {
            "name": "test_validate_is_int",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_start_new_config": {
            "name": "test_start_new_config",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "mock.Mock"
                ],
                "caplog": [
                    "str"
                ],
                "exchange": [
                    "Callable[..., None]"
                ]
            }
        },
        "test_start_new_config_exists": {
            "name": "test_start_new_config_exists",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests.async_mock.MagicMock",
                    "str",
                    "int"
                ],
                "caplog": [
                    "str",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "test_ask_user_overwrite": {
            "name": "test_ask_user_overwrite",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "mock.MagicMock"
                ]
            }
        },
        "test_ask_user_config": {
            "name": "test_ask_user_config",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "mock.MagicMock"
                ]
            }
        }
    },
    "freqtrade-develop/tests/commands/test_commands.py": {
        "test_setup_utils_configuration": {
            "name": "test_setup_utils_configuration",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_start_trading_fail": {
            "name": "test_start_trading_fail",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "caplog": [
                    "core.models.Grouping",
                    "str",
                    "int"
                ]
            }
        },
        "test_start_webserver": {
            "name": "test_start_webserver",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.e2e.Helper",
                    "unittesmock.MagicMock"
                ],
                "caplog": []
            }
        },
        "test_list_exchanges": {
            "name": "test_list_exchanges",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "int",
                    "Tuple[float, float, float, float, float]",
                    "float",
                    "str"
                ]
            }
        },
        "test_list_timeframes": {
            "name": "test_list_timeframes",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "capsys": [
                    "int",
                    "Tuple[float, float, float, float, float]",
                    "float",
                    "str"
                ]
            }
        },
        "test_list_markets": {
            "name": "test_list_markets",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "markets_static": [],
                "capsys": [
                    "int",
                    "Tuple[float, float, float, float, float]",
                    "float",
                    "str"
                ]
            }
        },
        "test_create_datadir_failed": {
            "name": "test_create_datadir_failed",
            "location": 467,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": []
            }
        },
        "test_create_datadir": {
            "name": "test_create_datadir",
            "location": 477,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "tests.basilisp.helpers.CompileFn",
                    "jsonlog.tests.capture.Capture",
                    "cli_ui.tests.MessageRecorder"
                ],
                "mocker": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_start_new_strategy": {
            "name": "test_start_new_strategy",
            "location": 492,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "caplog": [
                    "str"
                ]
            }
        },
        "test_start_new_strategy_no_arg": {
            "name": "test_start_new_strategy_no_arg",
            "location": 514,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "List[str]",
                    "tests.basilisp.helpers.CompileFn",
                    "bool"
                ],
                "caplog": [
                    "str",
                    "List[str]",
                    "tests.basilisp.helpers.CompileFn",
                    "bool"
                ]
            }
        },
        "test_start_install_ui": {
            "name": "test_start_install_ui",
            "location": 523,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_clean_ui_subdir": {
            "name": "test_clean_ui_subdir",
            "location": 551,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "tmpdir": [
                    "pathlib.Path",
                    "bytes",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "caplog": [
                    "str"
                ]
            }
        },
        "test_download_and_install_ui": {
            "name": "test_download_and_install_ui",
            "location": 568,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.async_mock.Mock",
                    "unittesmock.MagicMock",
                    "tests.async_mock.MagicMock"
                ],
                "tmpdir": [
                    "pathlib.Path",
                    "bytes",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_get_ui_download_url": {
            "name": "test_get_ui_download_url",
            "location": 596,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "mock.MagicMock",
                    "tests.async_mock.MagicMock",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_get_ui_download_url_direct": {
            "name": "test_get_ui_download_url_direct",
            "location": 609,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "mock.MagicMock",
                    "tests.async_mock.MagicMock",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_download_data_keyboardInterrupt": {
            "name": "test_download_data_keyboardInterrupt",
            "location": 641,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "caplog": [
                    "tests.async_mock.MagicMock",
                    "str"
                ],
                "markets": [
                    "tests.async_mock.MagicMock",
                    "unittesmock.MagicMock",
                    "tests.async_mock.Mock"
                ]
            }
        },
        "test_download_data_timerange": {
            "name": "test_download_data_timerange",
            "location": 659,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "caplog": [
                    "tests.async_mock.MagicMock",
                    "str"
                ],
                "markets": [
                    "tests.async_mock.MagicMock",
                    "unittesmock.MagicMock",
                    "tests.async_mock.Mock"
                ]
            }
        },
        "test_download_data_no_markets": {
            "name": "test_download_data_no_markets",
            "location": 704,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "caplog": []
            }
        },
        "test_download_data_no_exchange": {
            "name": "test_download_data_no_exchange",
            "location": 722,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "caplog": [
                    "tests.basilisp.helpers.CompileFn",
                    "str"
                ]
            }
        },
        "test_download_data_no_pairs": {
            "name": "test_download_data_no_pairs",
            "location": 739,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "tests.async_mock.MagicMock",
                    "str"
                ],
                "caplog": [
                    "tests.basilisp.helpers.CompileFn",
                    "str"
                ]
            }
        },
        "test_download_data_all_pairs": {
            "name": "test_download_data_all_pairs",
            "location": 761,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "tests.async_mock.MagicMock"
                ],
                "markets": [
                    "unittesmock.MagicMock",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "test_download_data_trades": {
            "name": "test_download_data_trades",
            "location": 801,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "caplog": [
                    "tests.async_mock.MagicMock",
                    "str"
                ]
            }
        },
        "test_download_data_data_invalid": {
            "name": "test_download_data_data_invalid",
            "location": 838,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_start_convert_trades": {
            "name": "test_start_convert_trades",
            "location": 855,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "caplog": [
                    "str"
                ]
            }
        },
        "test_start_list_strategies": {
            "name": "test_start_list_strategies",
            "location": 871,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "Dict[str, float]"
                ]
            }
        },
        "test_start_test_pairlist": {
            "name": "test_start_test_pairlist",
            "location": 938,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "caplog": [],
                "tickers": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "Optional[str]",
                    "pathlib.Path",
                    "str"
                ],
                "capsys": [
                    "tests.hints.RightFolderCall"
                ]
            }
        },
        "test_hyperopt_list": {
            "name": "test_hyperopt_list",
            "location": 997,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "List[int]"
                ],
                "capsys": [
                    "List[int]"
                ],
                "caplog": [
                    "str"
                ],
                "saved_hyperopt_results": [
                    "bool"
                ],
                "tmpdir": [
                    "bool"
                ]
            }
        },
        "test_hyperopt_show": {
            "name": "test_hyperopt_show",
            "location": 1240,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Union[str, float]",
                    "raiden.tests.integration.fixtures.raiden_network.RestartNode",
                    "int",
                    "List[int]",
                    "bool"
                ],
                "capsys": [
                    "Union[str, float]",
                    "raiden.tests.integration.fixtures.raiden_network.RestartNode",
                    "int",
                    "List[int]",
                    "bool"
                ],
                "saved_hyperopt_results": []
            }
        },
        "test_convert_data": {
            "name": "test_convert_data",
            "location": 1329,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "testdatadir": [
                    "pathlib.Path",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_convert_data_trades": {
            "name": "test_convert_data_trades",
            "location": 1351,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "testdatadir": [
                    "pathlib.Path",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_start_list_data": {
            "name": "test_start_list_data",
            "location": 1373,
            "return": [
                "None"
            ],
            "arguments": {
                "testdatadir": [
                    "str"
                ],
                "capsys": [
                    "str",
                    "int"
                ]
            }
        },
        "test_show_trades": {
            "name": "test_show_trades",
            "location": 1426,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "fee": [
                    "Dict[str, Sequence[str]]"
                ],
                "capsys": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "caplog": [
                    "str",
                    "int"
                ]
            }
        },
        "test_backtesting_show": {
            "name": "test_backtesting_show",
            "location": 1468,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "testdatadir": [
                    "List[str]"
                ],
                "capsys": [
                    "int",
                    "Dict[scripts.node_integration_tests.playbooks.test_config_base.NodeId, pathlib.Path]",
                    "BaseException"
                ]
            }
        },
        "test_start_convert_db": {
            "name": "test_start_convert_db",
            "location": 1484,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.basilisp.helpers.CompileFn",
                    "bool",
                    "tests.async_mock.MagicMock",
                    "str",
                    "core.models.Recipe"
                ],
                "fee": [
                    "tests._TestServerFactory"
                ],
                "tmpdir": [
                    "pathlib.Path",
                    "tests.e2e.Helper"
                ],
                "caplog": [
                    "tests.basilisp.helpers.CompileFn",
                    "bool",
                    "tests.async_mock.MagicMock",
                    "str",
                    "core.models.Recipe"
                ]
            }
        },
        "test_hyperopt_list.fake_iterator": {
            "name": "fake_iterator",
            "location": 1004,
            "return": [
                "typing.Generator[list]"
            ],
            "arguments": {}
        },
        "test_hyperopt_show.fake_iterator": {
            "name": "fake_iterator",
            "location": 1246,
            "return": [
                "typing.Generator[list]"
            ],
            "arguments": {}
        }
    },
    "freqtrade-develop/tests/commands/__init__.py": {},
    "freqtrade-develop/tests/data/test_btanalysis.py": {
        "test_get_latest_backtest_filename": {
            "name": "test_get_latest_backtest_filename",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "testdatadir": [],
                "mocker": []
            }
        },
        "test_get_latest_hyperopt_file": {
            "name": "test_get_latest_hyperopt_file",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "testdatadir": [
                    "str",
                    "tests.e2e.Helper",
                    "bool",
                    "Tuple[str, str, str]"
                ]
            }
        },
        "test_load_backtest_metadata": {
            "name": "test_load_backtest_metadata",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "Tuple[float, float, float, float, float]",
                    "float"
                ],
                "testdatadir": [
                    "int"
                ]
            }
        },
        "test_load_backtest_data_old_format": {
            "name": "test_load_backtest_data_old_format",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "testdatadir": [
                    "pathlib.Path"
                ],
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_load_backtest_data_new_format": {
            "name": "test_load_backtest_data_new_format",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "testdatadir": []
            }
        },
        "test_load_backtest_data_multi": {
            "name": "test_load_backtest_data_multi",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "testdatadir": [
                    "pathlib.Path"
                ]
            }
        },
        "test_load_trades_from_db": {
            "name": "test_load_trades_from_db",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "Tuple[int, int]",
                    "Optional[str]"
                ],
                "fee": [
                    "str"
                ],
                "is_short": [
                    "str"
                ],
                "mocker": [
                    "unittesmock.MagicMock",
                    "int"
                ]
            }
        },
        "test_extract_trades_of_period": {
            "name": "test_extract_trades_of_period",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "testdatadir": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_analyze_trade_parallelism": {
            "name": "test_analyze_trade_parallelism",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "testdatadir": [
                    "pathlib.Path",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_load_trades": {
            "name": "test_load_trades",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [
                    "unittesmock.MagicMock",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_calculate_market_change": {
            "name": "test_calculate_market_change",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "testdatadir": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_combine_dataframes_with_mean": {
            "name": "test_combine_dataframes_with_mean",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "testdatadir": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_combine_dataframes_with_mean_no_data": {
            "name": "test_combine_dataframes_with_mean_no_data",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "testdatadir": []
            }
        },
        "test_create_cum_profit": {
            "name": "test_create_cum_profit",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "testdatadir": [
                    "pathlib.Path",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_create_cum_profit1": {
            "name": "test_create_cum_profit1",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "testdatadir": [
                    "pathlib.Path",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_calculate_max_drawdown": {
            "name": "test_calculate_max_drawdown",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "testdatadir": [
                    "pathlib.Path",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_calculate_csum": {
            "name": "test_calculate_csum",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "testdatadir": [
                    "pathlib.Path",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_calculate_cagr": {
            "name": "test_calculate_cagr",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "start": [
                    "int",
                    "Optional[int]"
                ],
                "end": [
                    "int",
                    "Optional[int]"
                ],
                "days": [
                    "int",
                    "Optional[int]"
                ],
                "expected": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "test_calculate_max_drawdown2": {
            "name": "test_calculate_max_drawdown2",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_calculate_max_drawdown_abs": {
            "name": "test_calculate_max_drawdown_abs",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {
                "profits": [
                    "int",
                    "Tuple[str, int]",
                    "Iterable[allennlp.data.instance.Instance]"
                ],
                "relative": [
                    "Optional[bool]",
                    "Optional[recidiviz.common.constants.state.state_incarceration_period.StateIncarcerationPeriodAdmissionReason]",
                    "List[str]"
                ],
                "highd": [
                    "str",
                    "Callable"
                ],
                "lowd": [
                    "str",
                    "Callable"
                ],
                "result": [
                    "str",
                    "bool"
                ],
                "result_rel": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "freqtrade-develop/tests/data/test_converter.py": {
        "test_dataframe_correct_columns": {
            "name": "test_dataframe_correct_columns",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "result": [
                    "bool",
                    "pathlib.Path"
                ]
            }
        },
        "test_ohlcv_to_dataframe": {
            "name": "test_ohlcv_to_dataframe",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "ohlcv_history_list": [
                    "str"
                ],
                "caplog": [
                    "logging.Logger",
                    "Optional[logging.Logger]"
                ]
            }
        },
        "test_trades_to_ohlcv": {
            "name": "test_trades_to_ohlcv",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "ohlcv_history_list": [
                    "Exception",
                    "str"
                ],
                "caplog": [
                    "logging.Logger",
                    "Optional[logging.Logger]"
                ]
            }
        },
        "test_ohlcv_fill_up_missing_data": {
            "name": "test_ohlcv_fill_up_missing_data",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "testdatadir": [
                    "tests.async_mock.Mock"
                ],
                "caplog": []
            }
        },
        "test_ohlcv_fill_up_missing_data2": {
            "name": "test_ohlcv_fill_up_missing_data2",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": []
            }
        },
        "test_ohlcv_drop_incomplete": {
            "name": "test_ohlcv_drop_incomplete",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "logging.Logger"
                ]
            }
        },
        "test_trim_dataframe": {
            "name": "test_trim_dataframe",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "testdatadir": []
            }
        },
        "test_trades_remove_duplicates": {
            "name": "test_trades_remove_duplicates",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "trades_history": [
                    "str",
                    "int"
                ]
            }
        },
        "test_trades_dict_to_list": {
            "name": "test_trades_dict_to_list",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "fetch_trades_result": [
                    "Sequence[Union[int, float]]",
                    "cli_ui.tests.MessageRecorder"
                ]
            }
        },
        "test_convert_trades_format": {
            "name": "test_convert_trades_format",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Callable"
                ],
                "testdatadir": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ],
                "tmpdir": [
                    "str",
                    "Callable"
                ]
            }
        },
        "test_convert_ohlcv_format": {
            "name": "test_convert_ohlcv_format",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "bytes"
                ],
                "testdatadir": [
                    "str",
                    "Optional[str]",
                    "int",
                    "List[str]"
                ],
                "tmpdir": [
                    "str",
                    "List[str]",
                    "pypi2nix.path.Path",
                    "List[pypi2nix.path.Path]",
                    "Iterable[Any]",
                    "dict",
                    "bytes"
                ],
                "file_base": [
                    "str",
                    "Callable",
                    "int",
                    "dict"
                ],
                "candletype": [
                    "str"
                ]
            }
        }
    },
    "freqtrade-develop/tests/data/test_dataprovider.py": {
        "test_dp_ohlcv": {
            "name": "test_dp_ohlcv",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "bool",
                    "Callable",
                    "str",
                    "int"
                ],
                "default_conf": [
                    "float",
                    "int",
                    "bool",
                    "Iterable[Any]"
                ],
                "ohlcv_history": [
                    "bool"
                ],
                "candle_type": [
                    "dict",
                    "str"
                ]
            }
        },
        "test_historic_ohlcv": {
            "name": "test_historic_ohlcv",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ],
                "default_conf": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "ohlcv_history": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_historic_ohlcv_dataformat": {
            "name": "test_historic_ohlcv_dataformat",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "bool"
                ],
                "default_conf": [
                    "Optional[List[str]]",
                    "Callable"
                ],
                "ohlcv_history": [
                    "unittesmock.MagicMock",
                    "str",
                    "mock.MagicMock",
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_get_pair_dataframe": {
            "name": "test_get_pair_dataframe",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Callable",
                    "str",
                    "bool"
                ],
                "default_conf": [
                    "float",
                    "int",
                    "bool",
                    "Iterable[Any]"
                ],
                "ohlcv_history": [
                    "bool"
                ],
                "candle_type": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "test_available_pairs": {
            "name": "test_available_pairs",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable"
                ],
                "default_conf": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable"
                ],
                "ohlcv_history": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ]
            }
        },
        "test_refresh": {
            "name": "test_refresh",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Dict[str, Any]"
                ],
                "default_conf": [
                    "str"
                ],
                "ohlcv_history": [
                    "bool",
                    "int",
                    "str",
                    "Callable[..., None]"
                ]
            }
        },
        "test_orderbook": {
            "name": "test_orderbook",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "List[str]",
                    "int",
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "unittesmock.MagicMock",
                    "int"
                ],
                "order_book_l2": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_market": {
            "name": "test_market",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "List[str]",
                    "int",
                    "str"
                ],
                "default_conf": [
                    "unittesmock.MagicMock",
                    "int",
                    "Iterable"
                ],
                "markets": [
                    "int",
                    "str"
                ]
            }
        },
        "test_ticker": {
            "name": "test_ticker",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Dict[str, Any]",
                    "str"
                ],
                "default_conf": [
                    "int",
                    "bool"
                ],
                "tickers": [
                    "bool",
                    "str",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_current_whitelist": {
            "name": "test_current_whitelist",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "bool"
                ],
                "tickers": []
            }
        },
        "test_get_analyzed_dataframe": {
            "name": "test_get_analyzed_dataframe",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "str"
                ],
                "default_conf": [
                    "Callable",
                    "Optional[int]",
                    "Optional[Exception]"
                ],
                "ohlcv_history": [
                    "List[str]",
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "test_no_exchange_mode": {
            "name": "test_no_exchange_mode",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "str",
                    "Optional[str]",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        }
    },
    "freqtrade-develop/tests/data/test_entryexitanalysis.py": {
        "entryexitanalysis_cleanup": {
            "name": "entryexitanalysis_cleanup",
            "location": 15,
            "return": [
                "None",
                "Generator[None]"
            ],
            "arguments": {}
        },
        "test_backtest_analysis_nomock": {
            "name": "test_backtest_analysis_nomock",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [],
                "caplog": [
                    "List[Dict[str, float]]",
                    "logging.Logger",
                    "Collection[str]"
                ],
                "testdatadir": [
                    "int",
                    "Callable",
                    "str",
                    "bool"
                ],
                "tmpdir": [
                    "int",
                    "Callable",
                    "str",
                    "bool"
                ],
                "capsys": []
            }
        }
    },
    "freqtrade-develop/tests/data/test_history.py": {
        "_backup_file": {
            "name": "_backup_file",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "file": [
                    "pathlib.Path",
                    "bool",
                    "Union[str, pathlib.Path]",
                    "path.Path",
                    "str"
                ],
                "copy_file": [
                    "bool",
                    "Optional[BinaryIO]"
                ]
            }
        },
        "_clean_test_file": {
            "name": "_clean_test_file",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "file": [
                    "pathlib.Path",
                    "Union[str, pathlib.Path]",
                    "Union[pathlib.Path, str]",
                    "Optional[pathlib.Path]"
                ]
            }
        },
        "test_load_data_30min_timeframe": {
            "name": "test_load_data_30min_timeframe",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "bool",
                    "Exception"
                ],
                "caplog": [
                    "str"
                ],
                "default_conf": [
                    "bool",
                    "Exception"
                ],
                "testdatadir": [
                    "tests.hints.RightFolderCall",
                    "tests.conftesWorker"
                ]
            }
        },
        "test_load_data_7min_timeframe": {
            "name": "test_load_data_7min_timeframe",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "bool",
                    "Exception"
                ],
                "caplog": [
                    "str"
                ],
                "default_conf": [
                    "bool",
                    "Exception"
                ],
                "testdatadir": [
                    "tests.hints.RightFolderCall",
                    "tests.conftesWorker"
                ]
            }
        },
        "test_load_data_1min_timeframe": {
            "name": "test_load_data_1min_timeframe",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "ohlcv_history": [
                    "tests.async_mock.Mock",
                    "tests.async_mock.MagicMock"
                ],
                "mocker": [
                    "tests.async_mock.Mock",
                    "tests.async_mock.MagicMock"
                ],
                "caplog": [],
                "testdatadir": []
            }
        },
        "test_load_data_mark": {
            "name": "test_load_data_mark",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "ohlcv_history": [
                    "tests.async_mock.Mock",
                    "tests.async_mock.MagicMock"
                ],
                "mocker": [
                    "tests.async_mock.Mock",
                    "tests.async_mock.MagicMock"
                ],
                "caplog": [],
                "testdatadir": [
                    "tests.async_mock.Mock"
                ]
            }
        },
        "test_load_data_startup_candles": {
            "name": "test_load_data_startup_candles",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "caplog": [
                    "bool",
                    "Exception"
                ],
                "default_conf": [
                    "bool",
                    "Exception"
                ],
                "testdatadir": [
                    "tests.hints.RightFolderCall",
                    "tests.conftesWorker"
                ]
            }
        },
        "test_load_data_with_new_pair_1min": {
            "name": "test_load_data_with_new_pair_1min",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "ohlcv_history_list": [
                    "bool",
                    "int"
                ],
                "mocker": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "caplog": [
                    "str",
                    "bool",
                    "int",
                    "Dict[Tuple[str, str], Exception]",
                    "Tuple[str, int]"
                ],
                "default_conf": [
                    "Optional[int]",
                    "Callable",
                    "str"
                ],
                "tmpdir": [
                    "str",
                    "bool",
                    "pathlib.Path"
                ],
                "candle_type": [
                    "Type",
                    "bool"
                ]
            }
        },
        "test_testdata_path": {
            "name": "test_testdata_path",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "testdatadir": [
                    "pathlib.Path"
                ]
            }
        },
        "test_json_pair_data_filename": {
            "name": "test_json_pair_data_filename",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "pair": [
                    "str",
                    "pathlib.Path",
                    "tests.fixtures.cloud_uploader.Uploader",
                    "Dict[str, Any]"
                ],
                "timeframe": [
                    "str",
                    "pathlib.Path",
                    "tests.fixtures.cloud_uploader.Uploader",
                    "Dict[str, Any]"
                ],
                "expected_result": [
                    "str",
                    "pandas._FileOrBuffer[AnyStr]",
                    "Union[dict, list]"
                ],
                "candle_type": [
                    "str",
                    "pathlib.Path",
                    "tests.fixtures.cloud_uploader.Uploader",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_json_pair_trades_filename": {
            "name": "test_json_pair_trades_filename",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "pair": [
                    "pathlib.Path",
                    "Optional[str]",
                    "str",
                    "bool"
                ],
                "expected_result": [
                    "str"
                ]
            }
        },
        "test_load_cached_data_for_updating": {
            "name": "test_load_cached_data_for_updating",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.async_mock.MagicMock",
                    "unittesmock.MagicMock"
                ],
                "testdatadir": [
                    "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository"
                ]
            }
        },
        "test_download_pair_history": {
            "name": "test_download_pair_history",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "ohlcv_history_list": [],
                "mocker": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "default_conf": [
                    "bool",
                    "Callable"
                ],
                "tmpdir": [
                    "str",
                    "pathlib.Path",
                    "bool"
                ],
                "candle_type": [
                    "bytes",
                    "int",
                    "uuid.UUID",
                    "str"
                ],
                "subdir": [
                    "Callable",
                    "str",
                    "int"
                ],
                "file_tail": [
                    "Callable",
                    "str",
                    "int"
                ]
            }
        },
        "test_download_pair_history2": {
            "name": "test_download_pair_history2",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable"
                ],
                "testdatadir": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_download_backtesting_data_exception": {
            "name": "test_download_backtesting_data_exception",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "relay.exchange.exchange_db.OrderBookDB"
                ],
                "caplog": [
                    "str",
                    "int"
                ],
                "default_conf": [
                    "pathlib.Path",
                    "str"
                ],
                "tmpdir": [
                    "tests.fixtures.cloud_uploader.Uploader"
                ]
            }
        },
        "test_load_partial_missing": {
            "name": "test_load_partial_missing",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "testdatadir": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "caplog": [
                    "int",
                    "str"
                ]
            }
        },
        "test_init": {
            "name": "test_init",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "List[str]",
                    "str",
                    "raiden.constants.Environment"
                ],
                "mocker": [
                    "List[str]",
                    "Set[str]",
                    "str",
                    "List[bool]",
                    "bool",
                    "Dict[str, Tuple[str, str]]",
                    "tests.testmodels.Signals"
                ]
            }
        },
        "test_init_with_refresh": {
            "name": "test_init_with_refresh",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ],
                "mocker": [
                    "int"
                ]
            }
        },
        "test_file_dump_json_tofile": {
            "name": "test_file_dump_json_tofile",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "testdatadir": [
                    "pathlib.Path",
                    "bool",
                    "int",
                    "pypi2nix.path.Path",
                    "str"
                ]
            }
        },
        "test_get_timerange": {
            "name": "test_get_timerange",
            "location": 456,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Dict[str, Any]",
                    "bool"
                ],
                "mocker": [
                    "int",
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "testdatadir": [
                    "dict",
                    "Callable"
                ]
            }
        },
        "test_validate_backtest_data_warn": {
            "name": "test_validate_backtest_data_warn",
            "location": 474,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]"
                ],
                "mocker": [
                    "int",
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "caplog": [
                    "float",
                    "Optional[int]",
                    "int"
                ],
                "testdatadir": [
                    "Union[int, str]",
                    "List[List[int]]",
                    "Optional[Sequence['cirq.Qid']]"
                ]
            }
        },
        "test_validate_backtest_data": {
            "name": "test_validate_backtest_data",
            "location": 498,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]"
                ],
                "mocker": [
                    "int",
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "caplog": [
                    "List[int]",
                    "List[str]",
                    "str",
                    "int"
                ],
                "testdatadir": [
                    "dict",
                    "int"
                ]
            }
        },
        "test_refresh_backtest_ohlcv_data": {
            "name": "test_refresh_backtest_ohlcv_data",
            "location": 526,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "str",
                    "int",
                    "bool"
                ],
                "markets": [
                    "unittesmock.MagicMock"
                ],
                "caplog": [
                    "str",
                    "Optional[float]"
                ],
                "testdatadir": [
                    "List[str]",
                    "tuple"
                ],
                "trademode": [
                    "List[str]",
                    "tuple"
                ],
                "callcount": [
                    "unittesmock.MagicMock",
                    "int",
                    "mock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "test_download_data_no_markets": {
            "name": "test_download_data_no_markets",
            "location": 550,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "mock.Mock"
                ],
                "default_conf": [
                    "str",
                    "pathlib.Path",
                    "bool"
                ],
                "caplog": [
                    "str",
                    "Optional[float]"
                ],
                "testdatadir": [
                    "Tuple[str]",
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_refresh_backtest_trades_data": {
            "name": "test_refresh_backtest_trades_data",
            "location": 572,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "str",
                    "int",
                    "bool"
                ],
                "markets": [
                    "unittesmock.MagicMock"
                ],
                "caplog": [
                    "str",
                    "int",
                    "bool"
                ],
                "testdatadir": [
                    "Tuple[str]",
                    "List[str]",
                    "int",
                    "str"
                ]
            }
        },
        "test_download_trades_history": {
            "name": "test_download_trades_history",
            "location": 597,
            "return": [
                "None"
            ],
            "arguments": {
                "trades_history": [
                    "unittesmock.MagicMock",
                    "Dict[str, Any]"
                ],
                "mocker": [],
                "default_conf": [
                    "pathlib.Path",
                    "str"
                ],
                "testdatadir": [
                    "pathlib.Path"
                ],
                "caplog": [],
                "tmpdir": [
                    "tests.fixtures.cloud_uploader.Uploader",
                    "pathlib.Path"
                ]
            }
        },
        "test_convert_trades_to_ohlcv": {
            "name": "test_convert_trades_to_ohlcv",
            "location": 656,
            "return": [
                "None"
            ],
            "arguments": {
                "testdatadir": [
                    "pathlib.Path"
                ],
                "tmpdir": [
                    "pathlib.Path",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "caplog": []
            }
        },
        "test_datahandler_ohlcv_get_pairs": {
            "name": "test_datahandler_ohlcv_get_pairs",
            "location": 690,
            "return": [
                "None"
            ],
            "arguments": {
                "testdatadir": []
            }
        },
        "test_datahandler_ohlcv_regex": {
            "name": "test_datahandler_ohlcv_regex",
            "location": 724,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "pathlib.Path"
                ],
                "pair": [
                    "cli_ui.tests.MessageRecorder",
                    "pathlib.Path"
                ],
                "timeframe": [
                    "cli_ui.tests.MessageRecorder",
                    "pathlib.Path"
                ],
                "candletype": [
                    "cli_ui.tests.MessageRecorder",
                    "pathlib.Path"
                ]
            }
        },
        "test_rebuild_pair_from_filename": {
            "name": "test_rebuild_pair_from_filename",
            "location": 744,
            "return": [
                "None"
            ],
            "arguments": {
                "input": [
                    "str",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "expected": [
                    "str",
                    "Dict[str, str]",
                    "List[str]"
                ]
            }
        },
        "test_datahandler_ohlcv_get_available_data": {
            "name": "test_datahandler_ohlcv_get_available_data",
            "location": 749,
            "return": [
                "None"
            ],
            "arguments": {
                "testdatadir": []
            }
        },
        "test_jsondatahandler_trades_get_pairs": {
            "name": "test_jsondatahandler_trades_get_pairs",
            "location": 788,
            "return": [
                "None"
            ],
            "arguments": {
                "testdatadir": [
                    "tests.setup.SetupTest"
                ]
            }
        },
        "test_jsondatahandler_ohlcv_purge": {
            "name": "test_jsondatahandler_ohlcv_purge",
            "location": 794,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "pathlib.Path"
                ],
                "testdatadir": []
            }
        },
        "test_jsondatahandler_ohlcv_load": {
            "name": "test_jsondatahandler_ohlcv_load",
            "location": 808,
            "return": [
                "None"
            ],
            "arguments": {
                "testdatadir": [
                    "str"
                ],
                "caplog": []
            }
        },
        "test_jsondatahandler_trades_load": {
            "name": "test_jsondatahandler_trades_load",
            "location": 826,
            "return": [
                "None"
            ],
            "arguments": {
                "testdatadir": [],
                "caplog": []
            }
        },
        "test_jsondatahandler_trades_purge": {
            "name": "test_jsondatahandler_trades_purge",
            "location": 837,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "pathlib.Path"
                ],
                "testdatadir": []
            }
        },
        "test_datahandler_ohlcv_append": {
            "name": "test_datahandler_ohlcv_append",
            "location": 850,
            "return": [
                "None"
            ],
            "arguments": {
                "datahandler": [
                    "pathlib.Path",
                    "str"
                ],
                "testdatadir": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "test_datahandler_trades_append": {
            "name": "test_datahandler_trades_append",
            "location": 859,
            "return": [
                "None"
            ],
            "arguments": {
                "datahandler": [
                    "pathlib.Path",
                    "str"
                ],
                "testdatadir": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "test_hdf5datahandler_trades_get_pairs": {
            "name": "test_hdf5datahandler_trades_get_pairs",
            "location": 865,
            "return": [
                "None"
            ],
            "arguments": {
                "testdatadir": []
            }
        },
        "test_hdf5datahandler_trades_load": {
            "name": "test_hdf5datahandler_trades_load",
            "location": 871,
            "return": [
                "None"
            ],
            "arguments": {
                "testdatadir": [
                    "str"
                ]
            }
        },
        "test_hdf5datahandler_trades_store": {
            "name": "test_hdf5datahandler_trades_store",
            "location": 896,
            "return": [
                "None"
            ],
            "arguments": {
                "testdatadir": [
                    "str"
                ],
                "tmpdir": [
                    "pathlib.Path",
                    "bytes",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_hdf5datahandler_trades_purge": {
            "name": "test_hdf5datahandler_trades_purge",
            "location": 925,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "pathlib.Path"
                ],
                "testdatadir": [
                    "str",
                    "pypi2nix.path.Path"
                ]
            }
        },
        "test_hdf5datahandler_ohlcv_load_and_resave": {
            "name": "test_hdf5datahandler_ohlcv_load_and_resave",
            "location": 943,
            "return": [
                "None"
            ],
            "arguments": {
                "testdatadir": [
                    "pathlib.Path",
                    "pypi2nix.path.Path"
                ],
                "tmpdir": [
                    "tests.fixtures.cloud_uploader.Uploader",
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "pathlib.Path"
                ],
                "pair": [
                    "str"
                ],
                "timeframe": [
                    "Dict[str, Any]",
                    "pathlib.Path",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "candle_type": [
                    "str",
                    "int"
                ],
                "candle_append": [
                    "cli_ui.tests.MessageRecorder",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "startdt": [
                    "pathlib.Path",
                    "tests.e2e.Helper",
                    "int"
                ],
                "enddt": [
                    "str",
                    "pathlib.Path",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "test_hdf5datahandler_ohlcv_purge": {
            "name": "test_hdf5datahandler_ohlcv_purge",
            "location": 986,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "pathlib.Path"
                ],
                "testdatadir": [
                    "str",
                    "pypi2nix.path.Path"
                ]
            }
        },
        "test_gethandlerclass": {
            "name": "test_gethandlerclass",
            "location": 1000,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_datahandler": {
            "name": "test_get_datahandler",
            "location": 1015,
            "return": [
                "None"
            ],
            "arguments": {
                "testdatadir": [
                    "pandas.DataFrame"
                ]
            }
        }
    },
    "freqtrade-develop/tests/data/__init__.py": {},
    "freqtrade-develop/tests/edge/test_edge.py": {
        "test_edge_results": {
            "name": "test_edge_results",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "edge_conf": [],
                "mocker": [],
                "caplog": [
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "str"
                ],
                "data": [
                    "pandas.DataFrame",
                    "Callable[[bytes], bytes]"
                ]
            }
        },
        "test_adjust": {
            "name": "test_adjust",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int"
                ],
                "edge_conf": [
                    "str"
                ]
            }
        },
        "test_stoploss": {
            "name": "test_stoploss",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int"
                ],
                "edge_conf": [
                    "str"
                ]
            }
        },
        "test_nonexisting_stoploss": {
            "name": "test_nonexisting_stoploss",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "edge_conf": [
                    "str"
                ]
            }
        },
        "test_edge_stake_amount": {
            "name": "test_edge_stake_amount",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "edge_conf": [
                    "str"
                ]
            }
        },
        "test_nonexisting_stake_amount": {
            "name": "test_nonexisting_stake_amount",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "edge_conf": [
                    "str"
                ]
            }
        },
        "test_edge_heartbeat_calculate": {
            "name": "test_edge_heartbeat_calculate",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str"
                ],
                "edge_conf": [
                    "str"
                ]
            }
        },
        "mocked_load_data": {
            "name": "mocked_load_data",
            "location": 228,
            "return": [
                "Dict[Text,]",
                "str",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "datadir": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "bool"
                ],
                "pairs": [
                    "List",
                    "str",
                    "Dict[str,Any]",
                    "int",
                    "bool"
                ],
                "timeframe": [
                    "Text",
                    "str",
                    "Dict[str,Any]",
                    "int",
                    "bool"
                ],
                "timerange": [
                    "None",
                    "str",
                    "Dict[str,Any]",
                    "int",
                    "bool"
                ]
            }
        },
        "test_edge_process_downloaded_data": {
            "name": "test_edge_process_downloaded_data",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "tests.async_mock.MagicMock",
                    "str"
                ],
                "edge_conf": [
                    "str"
                ]
            }
        },
        "test_edge_process_no_data": {
            "name": "test_edge_process_no_data",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "tests.async_mock.MagicMock",
                    "str"
                ],
                "edge_conf": [
                    "str"
                ],
                "caplog": []
            }
        },
        "test_edge_process_no_trades": {
            "name": "test_edge_process_no_trades",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "tests.async_mock.MagicMock"
                ],
                "edge_conf": [
                    "str"
                ],
                "caplog": []
            }
        },
        "test_edge_process_no_pairs": {
            "name": "test_edge_process_no_pairs",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "edge_conf": [
                    "str"
                ],
                "caplog": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_edge_init_error": {
            "name": "test_edge_init_error",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "edge_conf": [
                    "str",
                    "cli_ui.tests.MessageRecorder",
                    "int",
                    "tests.conftesWorker"
                ]
            }
        },
        "test_process_expectancy": {
            "name": "test_process_expectancy",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "edge_conf": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "fee": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "risk_reward_ratio": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "expectancy": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "test_process_expectancy_remove_pumps": {
            "name": "test_process_expectancy_remove_pumps",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str"
                ],
                "edge_conf": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "fee": [
                    "str"
                ]
            }
        },
        "test_process_expectancy_only_wins": {
            "name": "test_process_expectancy_only_wins",
            "location": 492,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str"
                ],
                "edge_conf": [
                    "str"
                ],
                "fee": [
                    "str"
                ]
            }
        },
        "test_process_expectancy.get_fee": {
            "name": "get_fee",
            "location": 335,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "freqtrade-develop/tests/edge/__init__.py": {},
    "freqtrade-develop/tests/exchange/test_binance.py": {
        "test_stoploss_order_binance": {
            "name": "test_stoploss_order_binance",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Dict[str, Any]",
                    "str"
                ],
                "mocker": [
                    "Sequence[relay.exchange.order.Order]",
                    "Optional[int]",
                    "int",
                    "List[List[float]]",
                    "List[int]"
                ],
                "limitratio": [
                    "bool",
                    "Optional[Type[Exception]]",
                    "Optional[\"Game\"]",
                    "Optional[str]"
                ],
                "expected": [
                    "str"
                ],
                "side": [
                    "List[int]",
                    "int"
                ],
                "trademode": [
                    "str",
                    "int"
                ]
            }
        },
        "test_stoploss_order_dry_run_binance": {
            "name": "test_stoploss_order_dry_run_binance",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Optional[int]",
                    "Callable"
                ],
                "mocker": [
                    "float",
                    "int"
                ]
            }
        },
        "test_stoploss_adjust_binance": {
            "name": "test_stoploss_adjust_binance",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "Dict[str, Any]"
                ],
                "default_conf": [
                    "str",
                    "Dict[str, Any]"
                ],
                "sl1": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ],
                "sl2": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ],
                "sl3": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ],
                "side": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ]
            }
        },
        "test_fill_leverage_tiers_binance": {
            "name": "test_fill_leverage_tiers_binance",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": []
            }
        },
        "test_fill_leverage_tiers_binance_dryrun": {
            "name": "test_fill_leverage_tiers_binance_dryrun",
            "location": 488,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [
                    "Sequence[relay.exchange.order.Order]"
                ],
                "leverage_tiers": [
                    "dict",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "test__set_leverage_binance": {
            "name": "test__set_leverage_binance",
            "location": 501,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "int"
                ],
                "default_conf": []
            }
        },
        "test__ccxt_config": {
            "name": "test__ccxt_config",
            "location": 565,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Callable"
                ],
                "mocker": [
                    "dict"
                ],
                "trading_mode": [
                    "str"
                ],
                "margin_mode": [
                    "str"
                ],
                "config": [
                    "str",
                    "list",
                    "int"
                ]
            }
        },
        "test_get_maintenance_ratio_and_amt_binance": {
            "name": "test_get_maintenance_ratio_and_amt_binance",
            "location": 580,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "int",
                    "Optional[Callable[[Dict], bool]]",
                    "dict",
                    "bool"
                ],
                "mocker": [
                    "str",
                    "int",
                    "list",
                    "bool"
                ],
                "leverage_tiers": [
                    "Optional[str]",
                    "bool",
                    "int",
                    "str"
                ],
                "pair": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[Callable[[Dict], bool]]",
                    "dict"
                ],
                "nominal_value": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[Callable[[Dict], bool]]",
                    "dict"
                ],
                "mm_ratio": [
                    "Optional[str]",
                    "bool",
                    "int",
                    "str"
                ],
                "amt": [
                    "Optional[str]",
                    "bool",
                    "int",
                    "str"
                ]
            }
        }
    },
    "freqtrade-develop/tests/exchange/test_bitpanda.py": {
        "test_get_trades_for_order": {
            "name": "test_get_trades_for_order",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str"
                ],
                "mocker": [
                    "int"
                ]
            }
        }
    },
    "freqtrade-develop/tests/exchange/test_ccxt_compat.py": {
        "exchange_conf": {
            "name": "exchange_conf",
            "location": 105,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "exchange": {
            "name": "exchange",
            "location": 117,
            "return": [
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "request": [],
                "exchange_conf": []
            }
        },
        "exchange_futures": {
            "name": "exchange_futures",
            "location": 126,
            "return": [
                "typing.Generator[tuple[None]]",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "request": [
                    "int"
                ],
                "exchange_conf": [
                    "str"
                ],
                "class_mocker": [
                    "int",
                    "str"
                ]
            }
        },
        "TestCCXTExchange.test_load_markets": {
            "name": "test_load_markets",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange": [
                    "int",
                    "Tuple[float, float, float, float, float]",
                    "float"
                ]
            }
        },
        "TestCCXTExchange.test_load_markets_futures": {
            "name": "test_load_markets_futures",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange_futures": [
                    "int",
                    "Tuple[float, float, float, float, float]",
                    "float"
                ]
            }
        },
        "TestCCXTExchange.test_ccxt_fetch_tickers": {
            "name": "test_ccxt_fetch_tickers",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange": []
            }
        },
        "TestCCXTExchange.test_ccxt_fetch_ticker": {
            "name": "test_ccxt_fetch_ticker",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "TestCCXTExchange.test_ccxt_fetch_l2_orderbook": {
            "name": "test_ccxt_fetch_l2_orderbook",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange": [
                    "bool"
                ]
            }
        },
        "TestCCXTExchange.test_ccxt_fetch_ohlcv": {
            "name": "test_ccxt_fetch_ohlcv",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange": [
                    "bool",
                    "str"
                ]
            }
        },
        "TestCCXTExchange.test_ccxt__async_get_candle_history": {
            "name": "test_ccxt__async_get_candle_history",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange": []
            }
        },
        "TestCCXTExchange.test_ccxt_fetch_funding_rate_history": {
            "name": "test_ccxt_fetch_funding_rate_history",
            "location": 278,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange_futures": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "TestCCXTExchange.test_ccxt_fetch_mark_price_history": {
            "name": "test_ccxt_fetch_mark_price_history",
            "location": 316,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange_futures": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "TestCCXTExchange.test_ccxt__calculate_funding_fees": {
            "name": "test_ccxt__calculate_funding_fees",
            "location": 340,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange_futures": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "TestCCXTExchange.test_ccxt_get_fee": {
            "name": "test_ccxt_get_fee",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange": []
            }
        },
        "TestCCXTExchange.test_ccxt_get_max_leverage_spot": {
            "name": "test_ccxt_get_max_leverage_spot",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange": [
                    "str",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "TestCCXTExchange.test_ccxt_get_max_leverage_futures": {
            "name": "test_ccxt_get_max_leverage_futures",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange_futures": [
                    "str",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "TestCCXTExchange.test_ccxt__get_contract_size": {
            "name": "test_ccxt__get_contract_size",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange_futures": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "Iterable[int]"
                ]
            }
        },
        "TestCCXTExchange.test_ccxt_load_leverage_tiers": {
            "name": "test_ccxt_load_leverage_tiers",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange_futures": [
                    "tests.basilisp.helpers.CompileFn",
                    "str"
                ]
            }
        },
        "TestCCXTExchange.test_ccxt_dry_run_liquidation_price": {
            "name": "test_ccxt_dry_run_liquidation_price",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange_futures": [
                    "tests.basilisp.helpers.CompileFn",
                    "str"
                ]
            }
        },
        "TestCCXTExchange.test_ccxt_get_max_pair_stake_amount": {
            "name": "test_ccxt_get_max_pair_stake_amount",
            "location": 461,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange_futures": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "Iterable[int]"
                ]
            }
        }
    },
    "freqtrade-develop/tests/exchange/test_ccxt_precise.py": {
        "test_precise": {
            "name": "test_precise",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "freqtrade-develop/tests/exchange/test_exchange.py": {
        "ccxt_exceptionhandlers": {
            "name": "ccxt_exceptionhandlers",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "dict"
                ],
                "default_conf": [
                    "str",
                    "dict"
                ],
                "api_mock": [
                    "unittesmock.MagicMock",
                    "str",
                    "dict"
                ],
                "exchange_name": [
                    "str",
                    "dict"
                ],
                "fun": [
                    "str",
                    "bool",
                    "int",
                    "Optional[Sequence[str]]",
                    "List[str]",
                    "List[Tuple[int, int]]"
                ],
                "mock_ccxt_fun": [
                    "dict",
                    "Dict[str, str]",
                    "str",
                    "unittesmock.Mock",
                    "int"
                ],
                "retries": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "test_init": {
            "name": "test_init",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mocker": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "caplog": [
                    "logging.Logger",
                    "Exception",
                    "logging.LogRecord",
                    "Collection[str]",
                    "bool"
                ]
            }
        },
        "test_remove_credentials": {
            "name": "test_remove_credentials",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "caplog": [
                    "List[str]",
                    "Set[str]",
                    "str",
                    "List[bool]",
                    "bool"
                ]
            }
        },
        "test_init_ccxt_kwargs": {
            "name": "test_init_ccxt_kwargs",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Callable"
                ],
                "mocker": [
                    "mock.MagicMock",
                    "unittesmock.Mock",
                    "unittesmock.MagicMock"
                ],
                "caplog": [
                    "Exception",
                    "logging.FileHandler"
                ]
            }
        },
        "test_destroy": {
            "name": "test_destroy",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [],
                "caplog": [
                    "logging.Logger",
                    "logging.LogRecord",
                    "Exception",
                    "Collection[str]",
                    "bool"
                ]
            }
        },
        "test_init_exception": {
            "name": "test_init_exception",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "set"
                ],
                "mocker": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_exchange_resolver": {
            "name": "test_exchange_resolver",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "caplog": [
                    "Exception",
                    "logging.Logger",
                    "str",
                    "Optional[logging.Logger]"
                ]
            }
        },
        "test_validate_order_time_in_force": {
            "name": "test_validate_order_time_in_force",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "Callable",
                    "dict",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mocker": [
                    "str",
                    "Callable",
                    "dict",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "caplog": [
                    "List[Dict[str, float]]",
                    "logging.Logger",
                    "str",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        },
        "test_amount_to_precision": {
            "name": "test_amount_to_precision",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "Callable",
                    "Optional[str]"
                ],
                "mocker": [],
                "amount": [
                    "Callable"
                ],
                "precision_mode": [
                    "unittesmock.MagicMock"
                ],
                "precision": [
                    "bool",
                    "int",
                    "Optional[int]"
                ],
                "contract_size": [
                    "bool",
                    "int",
                    "Optional[int]"
                ],
                "expected": [
                    "Callable"
                ],
                "trading_mode": [
                    "bool"
                ]
            }
        },
        "test_price_to_precision": {
            "name": "test_price_to_precision",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "Dict[str, Any]"
                ],
                "mocker": [],
                "price": [
                    "bool",
                    "List[str]"
                ],
                "precision_mode": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock"
                ],
                "precision": [
                    "unittesmock.Mock"
                ],
                "expected": [
                    "bool",
                    "List[str]"
                ]
            }
        },
        "test_price_get_one_pip": {
            "name": "test_price_get_one_pip",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "Dict[str, Any]"
                ],
                "mocker": [],
                "price": [
                    "common.ScanLoadFn",
                    "str"
                ],
                "precision_mode": [
                    "unittesmock.Mock",
                    "unittesmock.MagicMock"
                ],
                "precision": [
                    "unittesmock.Mock"
                ],
                "expected": [
                    "common.ScanLoadFn",
                    "str"
                ]
            }
        },
        "test__get_stake_amount_limit": {
            "name": "test__get_stake_amount_limit",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.Mock"
                ],
                "default_conf": [
                    "Callable"
                ]
            }
        },
        "test_get_min_pair_stake_amount_real_data": {
            "name": "test_get_min_pair_stake_amount_real_data",
            "location": 506,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "test_set_sandbox": {
            "name": "test_set_sandbox",
            "location": 541,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Sequence[relay.exchange.order.Order]",
                    "unittesmock.Mock",
                    "int",
                    "unittesmock.MagicMock"
                ],
                "mocker": [
                    "int"
                ]
            }
        },
        "test_set_sandbox_exception": {
            "name": "test_set_sandbox_exception",
            "location": 559,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "unittesmock.Mock",
                    "Sequence[relay.exchange.order.Order]",
                    "int"
                ],
                "mocker": [
                    "int"
                ]
            }
        },
        "test__load_async_markets": {
            "name": "test__load_async_markets",
            "location": 576,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightAccumulatorCall"
                ],
                "mocker": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightAccumulatorCall"
                ],
                "caplog": [
                    "List[Dict[str, float]]",
                    "logging.Logger",
                    "logging.LogRecord",
                    "Exception"
                ]
            }
        },
        "test__load_markets": {
            "name": "test__load_markets",
            "location": 595,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightAccumulatorCall"
                ],
                "mocker": [
                    "mock.MagicMock"
                ],
                "caplog": [
                    "List[Dict[str, float]]",
                    "logging.Logger",
                    "Exception",
                    "logging.LogRecord"
                ]
            }
        },
        "test_reload_markets": {
            "name": "test_reload_markets",
            "location": 618,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "unittesmock.MagicMock",
                    "int"
                ],
                "mocker": [
                    "unittesmock.MagicMock",
                    "int"
                ],
                "caplog": [
                    "logging.Logger",
                    "logging.LogRecord",
                    "Exception",
                    "Collection[str]",
                    "bool"
                ]
            }
        },
        "test_reload_markets_exception": {
            "name": "test_reload_markets_exception",
            "location": 647,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Sequence[relay.exchange.order.Order]",
                    "unittesmock.Mock"
                ],
                "mocker": [
                    "Sequence[relay.exchange.order.Order]",
                    "unittesmock.Mock"
                ],
                "caplog": [
                    "List[Dict[str, float]]",
                    "logging.Logger",
                    "Collection[str]",
                    "bool",
                    "logging.LogRecord",
                    "Exception"
                ]
            }
        },
        "test_validate_stakecurrency": {
            "name": "test_validate_stakecurrency",
            "location": 662,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "stake_currency": [],
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "caplog": [
                    "List[str]",
                    "Set[str]",
                    "str",
                    "List[bool]",
                    "bool"
                ]
            }
        },
        "test_validate_stakecurrency_error": {
            "name": "test_validate_stakecurrency_error",
            "location": 677,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int"
                ],
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "caplog": [
                    "str",
                    "tests.testmodels.Signals",
                    "list",
                    "bool",
                    "Dict[str, Tuple[str, str]]",
                    "List[bool]"
                ]
            }
        },
        "test_get_quote_currencies": {
            "name": "test_get_quote_currencies",
            "location": 701,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "Optional[str]",
                    "str"
                ],
                "mocker": [
                    "int",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "test_get_pair_quote_currency": {
            "name": "test_get_pair_quote_currency",
            "location": 714,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "bool"
                ],
                "mocker": [
                    "bool"
                ],
                "pair": [
                    "bool"
                ],
                "expected": [
                    "bool"
                ]
            }
        },
        "test_get_pair_base_currency": {
            "name": "test_get_pair_base_currency",
            "location": 726,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "bool"
                ],
                "mocker": [
                    "bool"
                ],
                "pair": [
                    "bool",
                    "str",
                    "dict"
                ],
                "expected": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "test_validate_pairs": {
            "name": "test_validate_pairs",
            "location": 731,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_validate_pairs_not_available": {
            "name": "test_validate_pairs_not_available",
            "location": 750,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_validate_pairs_exception": {
            "name": "test_validate_pairs_exception",
            "location": 764,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ],
                "caplog": [
                    "logging.Logger",
                    "Exception",
                    "logging.LogRecord",
                    "Collection[str]",
                    "bool",
                    "List[Dict[str, float]]"
                ]
            }
        },
        "test_validate_pairs_restricted": {
            "name": "test_validate_pairs_restricted",
            "location": 784,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "caplog": [
                    "dict",
                    "Exception",
                    "List[str]"
                ]
            }
        },
        "test_validate_pairs_stakecompatibility": {
            "name": "test_validate_pairs_stakecompatibility",
            "location": 803,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "caplog": [
                    "List[str]",
                    "Set[str]",
                    "str",
                    "List[bool]",
                    "bool"
                ]
            }
        },
        "test_validate_pairs_stakecompatibility_downloaddata": {
            "name": "test_validate_pairs_stakecompatibility_downloaddata",
            "location": 819,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "caplog": [
                    "List[str]",
                    "Set[str]",
                    "str",
                    "List[bool]",
                    "bool"
                ]
            }
        },
        "test_validate_pairs_stakecompatibility_fail": {
            "name": "test_validate_pairs_stakecompatibility_fail",
            "location": 837,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "List[str]",
                    "pandas.DataFrame",
                    "str",
                    "List[Dict[str, str]]",
                    "int"
                ],
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "caplog": [
                    "List[str]",
                    "Set[str]",
                    "str",
                    "List[bool]",
                    "bool"
                ]
            }
        },
        "test_validate_timeframes": {
            "name": "test_validate_timeframes",
            "location": 857,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "timeframe": []
            }
        },
        "test_validate_timeframes_failed": {
            "name": "test_validate_timeframes_failed",
            "location": 876,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_validate_timeframes_emulated_ohlcv_1": {
            "name": "test_validate_timeframes_emulated_ohlcv_1",
            "location": 901,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_validate_timeframes_emulated_ohlcvi_2": {
            "name": "test_validate_timeframes_emulated_ohlcvi_2",
            "location": 921,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_validate_timeframes_not_in_config": {
            "name": "test_validate_timeframes_not_in_config",
            "location": 942,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int"
                ],
                "mocker": [
                    "unittesmock.MagicMock",
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_validate_pricing": {
            "name": "test_validate_pricing",
            "location": 963,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Iterable[str]"
                ],
                "mocker": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_validate_ordertypes": {
            "name": "test_validate_ordertypes",
            "location": 1001,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str"
                ],
                "mocker": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_validate_order_types_not_in_config": {
            "name": "test_validate_order_types_not_in_config",
            "location": 1045,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Callable",
                    "bytes",
                    "instark.application.domain.common.Tenant"
                ],
                "mocker": []
            }
        },
        "test_validate_required_startup_candles": {
            "name": "test_validate_required_startup_candles",
            "location": 1058,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ],
                "caplog": [
                    "dict",
                    "Exception",
                    "List[str]"
                ]
            }
        },
        "test_exchange_has": {
            "name": "test_exchange_has",
            "location": 1098,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": []
            }
        },
        "test_create_dry_run_order": {
            "name": "test_create_dry_run_order",
            "location": 1119,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str"
                ],
                "mocker": [
                    "str"
                ],
                "side": [
                    "str",
                    "Callable",
                    "int"
                ],
                "exchange_name": [
                    "str"
                ],
                "leverage": [
                    "str",
                    "Callable",
                    "int"
                ]
            }
        },
        "test_create_dry_run_order_limit_fill": {
            "name": "test_create_dry_run_order_limit_fill",
            "location": 1146,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "recidiviz.common.ingest_metadata.IngestMetadata"
                ],
                "mocker": [
                    "Dict[str, Any]",
                    "str"
                ],
                "side": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "startprice": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "endprice": [
                    "str",
                    "Callable",
                    "pandas.DataFrame"
                ],
                "exchange_name": [
                    "str",
                    "dict",
                    "List[Tuple[str, str]]"
                ],
                "order_book_l2_usd": []
            }
        },
        "test_create_dry_run_order_market_fill": {
            "name": "test_create_dry_run_order_market_fill",
            "location": 1207,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "int",
                    "bool"
                ],
                "mocker": [
                    "str",
                    "Dict[str, Any]"
                ],
                "side": [
                    "Callable",
                    "Optional[str]",
                    "str",
                    "Optional[bool]"
                ],
                "rate": [
                    "Callable",
                    "Optional[str]",
                    "str",
                    "Optional[bool]"
                ],
                "amount": [
                    "Callable",
                    "Optional[str]",
                    "str",
                    "Optional[bool]"
                ],
                "endprice": [
                    "str",
                    "int",
                    "Set[str]",
                    "Optional[str]",
                    "bytes"
                ],
                "exchange_name": [
                    "str"
                ],
                "order_book_l2_usd": [
                    "str",
                    "unittesmock.Mock"
                ]
            }
        },
        "test_create_order": {
            "name": "test_create_order",
            "location": 1242,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Callable",
                    "Callable[[List, bool], None]"
                ],
                "mocker": [
                    "Callable",
                    "Optional[dict]"
                ],
                "side": [
                    "str"
                ],
                "ordertype": [
                    "Sequence[int]",
                    "Callable",
                    "Optional[str]",
                    "Iterable"
                ],
                "rate": [
                    "Sequence[int]",
                    "Callable",
                    "Optional[str]",
                    "Iterable"
                ],
                "marketprice": [
                    "unittesmock.MagicMock",
                    "Dict[str, Any]",
                    "int"
                ],
                "exchange_name": [
                    "Dict[str, Any]",
                    "pandas.DataFrame",
                    "List[str]",
                    "str",
                    "Callable"
                ]
            }
        },
        "test_buy_dry_run": {
            "name": "test_buy_dry_run",
            "location": 1309,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Optional[int]",
                    "Callable"
                ],
                "mocker": [
                    "int",
                    "str"
                ]
            }
        },
        "test_buy_prod": {
            "name": "test_buy_prod",
            "location": 1321,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str"
                ],
                "mocker": [
                    "int",
                    "str",
                    "Optional[dict]"
                ],
                "exchange_name": [
                    "str"
                ]
            }
        },
        "test_buy_considers_time_in_force": {
            "name": "test_buy_considers_time_in_force",
            "location": 1407,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Dict[str, Any]"
                ],
                "mocker": [
                    "Callable",
                    "str"
                ],
                "exchange_name": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_sell_dry_run": {
            "name": "test_sell_dry_run",
            "location": 1460,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Optional[int]",
                    "Callable"
                ],
                "mocker": [
                    "int",
                    "str"
                ]
            }
        },
        "test_sell_prod": {
            "name": "test_sell_prod",
            "location": 1471,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str"
                ],
                "mocker": [
                    "int",
                    "str",
                    "Optional[dict]"
                ],
                "exchange_name": [
                    "str"
                ]
            }
        },
        "test_sell_considers_time_in_force": {
            "name": "test_sell_considers_time_in_force",
            "location": 1546,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Dict[str, Any]"
                ],
                "mocker": [
                    "Callable",
                    "str"
                ],
                "exchange_name": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_get_balances_prod": {
            "name": "test_get_balances_prod",
            "location": 1599,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str"
                ],
                "mocker": [
                    "str",
                    "bool"
                ],
                "exchange_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_fetch_positions": {
            "name": "test_fetch_positions",
            "location": 1624,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "dict"
                ],
                "mocker": [
                    "str",
                    "pandas.DataFrame",
                    "Dict[str, Any]"
                ],
                "exchange_name": [
                    "str"
                ]
            }
        },
        "test_fetch_trading_fees": {
            "name": "test_fetch_trading_fees",
            "location": 1644,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": []
            }
        },
        "test_fetch_bids_asks": {
            "name": "test_fetch_bids_asks",
            "location": 1700,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Callable"
                ],
                "mocker": []
            }
        },
        "test_get_tickers": {
            "name": "test_get_tickers",
            "location": 1754,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "bool"
                ],
                "mocker": [
                    "str",
                    "bool"
                ],
                "exchange_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_fetch_ticker": {
            "name": "test_fetch_ticker",
            "location": 1819,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str"
                ],
                "mocker": [
                    "str"
                ],
                "exchange_name": [
                    "str"
                ]
            }
        },
        "test_get_historic_ohlcv": {
            "name": "test_get_historic_ohlcv",
            "location": 1868,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "Literal"
                ],
                "mocker": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "Literal"
                ],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "werkzeug.exceptions.BadRequest"
                ],
                "exchange_name": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "Literal"
                ],
                "candle_type": [
                    "int",
                    "str",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "test_get_historic_ohlcv_as_df": {
            "name": "test_get_historic_ohlcv_as_df",
            "location": 1918,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "bool",
                    "int"
                ],
                "mocker": [
                    "str",
                    "bool",
                    "int"
                ],
                "exchange_name": [
                    "str",
                    "bool",
                    "int"
                ],
                "candle_type": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[Callable[..., Any]]"
                ]
            }
        },
        "test_refresh_latest_ohlcv": {
            "name": "test_refresh_latest_ohlcv",
            "location": 2015,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Callable",
                    "str",
                    "bool",
                    "int"
                ],
                "default_conf": [
                    "Callable",
                    "str",
                    "bool",
                    "int"
                ],
                "caplog": [
                    "List[Dict[str, float]]",
                    "int"
                ],
                "candle_type": [
                    "str",
                    "tildes.enums.LogEventType",
                    "bool"
                ]
            }
        },
        "test_refresh_latest_ohlcv_inv_result": {
            "name": "test_refresh_latest_ohlcv_inv_result",
            "location": 2219,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "int"
                ],
                "mocker": [
                    "str",
                    "int"
                ],
                "caplog": [
                    "str",
                    "int",
                    "logging.Logger",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "test_get_next_limit_in_list": {
            "name": "test_get_next_limit_in_list",
            "location": 2244,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fetch_l2_order_book": {
            "name": "test_fetch_l2_order_book",
            "location": 2269,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Iterable[str]",
                    "List[Dict[str, Any]]",
                    "int",
                    "str"
                ],
                "mocker": [
                    "str",
                    "Dict[str, Any]"
                ],
                "order_book_l2": [
                    "unittesmock.MagicMock",
                    "str",
                    "int",
                    "Callable"
                ],
                "exchange_name": [
                    "Iterable[str]",
                    "List[Dict[str, Any]]",
                    "int",
                    "str"
                ]
            }
        },
        "test_fetch_l2_order_book_exception": {
            "name": "test_fetch_l2_order_book_exception",
            "location": 2296,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str"
                ],
                "mocker": [
                    "str"
                ],
                "exchange_name": [
                    "str"
                ]
            }
        },
        "test_get_entry_rate": {
            "name": "test_get_entry_rate",
            "location": 2340,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Optional[bool]",
                    "List[str]",
                    "bool",
                    "str",
                    "Callable",
                    "int",
                    "Optional[str]"
                ],
                "default_conf": [
                    "bool",
                    "Iterable[str]"
                ],
                "caplog": [
                    "logging.Logger",
                    "logging.Formatter",
                    "Optional[logging.Logger]"
                ],
                "side": [
                    "Dict[str, Any]",
                    "pandas.DataFrame",
                    "bool"
                ],
                "ask": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "datetime.datetime",
                    "str"
                ],
                "bid": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "datetime.datetime",
                    "str"
                ],
                "last": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "datetime.datetime",
                    "str"
                ],
                "last_ab": [
                    "bool",
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[bool]",
                    "float",
                    "Optional[float]"
                ],
                "expected": [
                    "bool"
                ]
            }
        },
        "test_get_exit_rate": {
            "name": "test_get_exit_rate",
            "location": 2384,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Optional[recidiviz.common.constants.state.state_incarceration_period.StateIncarcerationPeriodAdmissionReason]",
                    "Union[Tuple[int], Tuple[int, int]]",
                    "int",
                    "str",
                    "allennlp.common.util.JsonDict"
                ],
                "mocker": [
                    "str",
                    "int"
                ],
                "caplog": [
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "logging.Formatter",
                    "str"
                ],
                "side": [
                    "int"
                ],
                "bid": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "datetime.datetime"
                ],
                "ask": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "datetime.datetime"
                ],
                "last": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "datetime.datetime"
                ],
                "last_ab": [
                    "bool",
                    "Optional[int]",
                    "Optional[bool]",
                    "float"
                ],
                "expected": [
                    "bytes",
                    "str",
                    "List[Dict[str, Any]]",
                    "Tuple[float, float]",
                    "int",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "test_get_ticker_rate_error": {
            "name": "test_get_ticker_rate_error",
            "location": 2417,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int",
                    "Callable"
                ],
                "entry": [
                    "str",
                    "Callable[[List, bool], None]",
                    "Optional[Iterable[Any]]",
                    "Callable"
                ],
                "default_conf": [
                    "bool"
                ],
                "caplog": [
                    "logging.Logger",
                    "Optional[logging.Logger]"
                ],
                "side": [
                    "bool"
                ],
                "is_short": [
                    "str",
                    "Callable[[List, bool], None]",
                    "Optional[Iterable[Any]]",
                    "Callable"
                ],
                "ask": [
                    "tests.async_mock.Mock"
                ],
                "bid": [
                    "tests.async_mock.Mock"
                ],
                "last": [
                    "tests.async_mock.Mock"
                ],
                "last_ab": [
                    "bool"
                ],
                "expected": [
                    "bool",
                    "List[str]",
                    "List[Tuple[str, Any]]",
                    "int"
                ]
            }
        },
        "test_get_exit_rate_orderbook": {
            "name": "test_get_exit_rate_orderbook",
            "location": 2442,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "Optional[str]",
                    "Optional[Callable[[Dict], bool]]",
                    "dict",
                    "bool",
                    "Optional[int]"
                ],
                "mocker": [
                    "Dict[str, Any]",
                    "pandas.DataFrame"
                ],
                "caplog": [
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "logging.Formatter"
                ],
                "is_short": [
                    "pandas.DataFrame",
                    "str",
                    "bool"
                ],
                "side": [
                    "int",
                    "str",
                    "Optional[bool]"
                ],
                "expected": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "Callable",
                    "pandas.DataFrame"
                ],
                "order_book_l2": [
                    "bool",
                    "Iterable['adi.Instance']",
                    "Optional[str]"
                ]
            }
        },
        "test_get_exit_rate_orderbook_exception": {
            "name": "test_get_exit_rate_orderbook_exception",
            "location": 2461,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Optional[\"Game\"]",
                    "float",
                    "str",
                    "Optional[int]"
                ],
                "mocker": [
                    "unittesmock.Mock",
                    "unittesmock.MagicMock",
                    "str"
                ],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "Optional[bool]"
                ]
            }
        },
        "test_get_exit_rate_exception": {
            "name": "test_get_exit_rate_exception",
            "location": 2478,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "tuple"
                ],
                "mocker": [
                    "Optional[str]",
                    "Dict[str, datetime.datetime]",
                    "Callable[[], Any]"
                ],
                "is_short": []
            }
        },
        "test_get_historic_trades": {
            "name": "test_get_historic_trades",
            "location": 2779,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "Union[str, int]"
                ],
                "mocker": [
                    "str",
                    "bool",
                    "List[str]",
                    "geoapi.common.json_models.RealPropertyOut",
                    "application.domain.common.QueryParser"
                ],
                "caplog": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "int",
                    "List[Dict[str, int]]"
                ],
                "exchange_name": [
                    "str",
                    "Union[str, int]"
                ],
                "trades_history": [
                    "str"
                ]
            }
        },
        "test_get_historic_trades_notsupported": {
            "name": "test_get_historic_trades_notsupported",
            "location": 2800,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "Union[str, int]"
                ],
                "mocker": [
                    "str"
                ],
                "caplog": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "int",
                    "List[Dict[str, int]]"
                ],
                "exchange_name": [
                    "str",
                    "Union[str, int]"
                ],
                "trades_history": [
                    "Callable",
                    "Optional[\"Cell\"]"
                ]
            }
        },
        "test_cancel_order_dry_run": {
            "name": "test_cancel_order_dry_run",
            "location": 2815,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "int",
                    "Union[str, int]",
                    "bool"
                ],
                "mocker": [
                    "str",
                    "Union[str, int]",
                    "dict"
                ],
                "exchange_name": [
                    "str"
                ]
            }
        },
        "test_check_order_canceled_empty": {
            "name": "test_check_order_canceled_empty",
            "location": 2848,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str"
                ],
                "default_conf": [
                    "str"
                ],
                "exchange_name": [
                    "str"
                ],
                "order": [
                    "str",
                    "int",
                    "type"
                ],
                "result": [
                    "str",
                    "int",
                    "type"
                ]
            }
        },
        "test_is_cancel_order_result_suitable": {
            "name": "test_is_cancel_order_result_suitable",
            "location": 2863,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str"
                ],
                "default_conf": [
                    "str"
                ],
                "exchange_name": [
                    "str"
                ],
                "order": [
                    "List[Callable]",
                    "Callable"
                ],
                "result": [
                    "List[Callable]",
                    "Callable"
                ]
            }
        },
        "test_cancel_order_with_result": {
            "name": "test_cancel_order_with_result",
            "location": 2873,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Optional[\"Frame\"]"
                ],
                "mocker": [
                    "Callable",
                    "List[Dict[str, Any]]"
                ],
                "exchange_name": [
                    "Callable",
                    "List[Dict[str, Any]]"
                ],
                "corder": [
                    "unittesmock.MagicMock",
                    "mock.MagicMock",
                    "unittesmock.Mock"
                ],
                "call_corder": [
                    "int",
                    "List[Tuple[str, Any]]",
                    "float",
                    "bool",
                    "Optional[str]"
                ],
                "call_forder": [
                    "int",
                    "List[Tuple[str, Any]]",
                    "float",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "test_cancel_order_with_result_error": {
            "name": "test_cancel_order_with_result_error",
            "location": 2887,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "Dict[str, Any]"
                ],
                "mocker": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "exchange_name": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "test_cancel_order": {
            "name": "test_cancel_order",
            "location": 2903,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str"
                ],
                "mocker": [
                    "str"
                ],
                "exchange_name": [
                    "str"
                ]
            }
        },
        "test_cancel_stoploss_order": {
            "name": "test_cancel_stoploss_order",
            "location": 2922,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str"
                ],
                "mocker": [
                    "str"
                ],
                "exchange_name": [
                    "str"
                ]
            }
        },
        "test_cancel_stoploss_order_with_result": {
            "name": "test_cancel_stoploss_order_with_result",
            "location": 2941,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "dict",
                    "bool",
                    "Union[str, int]",
                    "Optional[str]"
                ],
                "mocker": [
                    "int",
                    "Optional[bool]",
                    "List[str]",
                    "Optional[List[str]]",
                    "bool",
                    "Optional[Callable[..., Any]]",
                    "str"
                ],
                "exchange_name": [
                    "Optional[str]",
                    "str",
                    "dict"
                ]
            }
        },
        "test_fetch_order": {
            "name": "test_fetch_order",
            "location": 2981,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "Union[str, int]",
                    "dict"
                ],
                "mocker": [
                    "str"
                ],
                "exchange_name": [
                    "str"
                ],
                "caplog": [
                    "str",
                    "logging.Logger"
                ]
            }
        },
        "test_fetch_stoploss_order": {
            "name": "test_fetch_stoploss_order",
            "location": 3034,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "Optional[str]"
                ],
                "mocker": [
                    "str"
                ],
                "exchange_name": [
                    "str"
                ]
            }
        },
        "test_fetch_order_or_stoploss_order": {
            "name": "test_fetch_order_or_stoploss_order",
            "location": 3066,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "tests.basilisp.helpers.CompileFn",
                    "dict"
                ],
                "mocker": []
            }
        },
        "test_name": {
            "name": "test_name",
            "location": 3092,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "Callable"
                ],
                "mocker": [
                    "str",
                    "Callable"
                ],
                "exchange_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_get_trades_for_order": {
            "name": "test_get_trades_for_order",
            "location": 3104,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "Optional[str]"
                ],
                "mocker": [
                    "str"
                ],
                "exchange_name": [
                    "str"
                ],
                "trading_mode": [
                    "str",
                    "Sequence[Dict[str, str]]",
                    "Set[str]"
                ],
                "amount": [
                    "str",
                    "Sequence[Dict[str, str]]",
                    "Set[str]"
                ]
            }
        },
        "test_get_fee": {
            "name": "test_get_fee",
            "location": 3158,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "bool"
                ],
                "mocker": [
                    "str",
                    "bool"
                ],
                "exchange_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_stoploss_order_unsupported_exchange": {
            "name": "test_stoploss_order_unsupported_exchange",
            "location": 3182,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "tests.basilisp.helpers.CompileFn",
                    "dict"
                ],
                "mocker": [
                    "tests.basilisp.helpers.CompileFn",
                    "dict"
                ]
            }
        },
        "test_merge_ft_has_dict": {
            "name": "test_merge_ft_has_dict",
            "location": 3198,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "List[dict]"
                ],
                "mocker": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_get_valid_pair_combination": {
            "name": "test_get_valid_pair_combination",
            "location": 3233,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "Tuple[int, int]",
                    "List[str]"
                ],
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "markets": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_get_markets": {
            "name": "test_get_markets",
            "location": 3321,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "Optional[str]",
                    "str",
                    "bool"
                ],
                "mocker": [
                    "dict"
                ],
                "markets_static": [
                    "dict"
                ],
                "base_currencies": [
                    "bool",
                    "str",
                    "float"
                ],
                "quote_currencies": [
                    "bool",
                    "str",
                    "float"
                ],
                "tradable_only": [
                    "bool",
                    "str",
                    "float"
                ],
                "active_only": [
                    "bool",
                    "str",
                    "float"
                ],
                "spot_only": [
                    "bool",
                    "str",
                    "float"
                ],
                "futures_only": [
                    "bool",
                    "str",
                    "float"
                ],
                "expected_keys": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "test_comment": [
                    "bool",
                    "Optional[int]",
                    "Container[\"Taxon\"]"
                ]
            }
        },
        "test_get_markets_error": {
            "name": "test_get_markets_error",
            "location": 3343,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "Optional[str]",
                    "str"
                ],
                "mocker": [
                    "unittesmock.Mock"
                ]
            }
        },
        "test_ohlcv_candle_limit": {
            "name": "test_ohlcv_candle_limit",
            "location": 3351,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str"
                ],
                "mocker": [
                    "str"
                ],
                "exchange_name": [
                    "str"
                ]
            }
        },
        "test_timeframe_to_minutes": {
            "name": "test_timeframe_to_minutes",
            "location": 3363,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_timeframe_to_seconds": {
            "name": "test_timeframe_to_seconds",
            "location": 3370,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_timeframe_to_msecs": {
            "name": "test_timeframe_to_msecs",
            "location": 3377,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_timeframe_to_prev_date": {
            "name": "test_timeframe_to_prev_date",
            "location": 3384,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_timeframe_to_next_date": {
            "name": "test_timeframe_to_next_date",
            "location": 3414,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_date_minus_candles": {
            "name": "test_date_minus_candles",
            "location": 3442,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_market_is_tradable": {
            "name": "test_market_is_tradable",
            "location": 3495,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [],
                "market_symbol": [
                    "bool",
                    "str"
                ],
                "base": [
                    "bool",
                    "str"
                ],
                "quote": [
                    "bool",
                    "str"
                ],
                "spot": [
                    "bool",
                    "str"
                ],
                "margin": [
                    "bool",
                    "str"
                ],
                "futures": [
                    "bool",
                    "str"
                ],
                "trademode": [
                    "int",
                    "Optional[Collection[int]]",
                    "Optional[int]"
                ],
                "add_dict": [
                    "bool",
                    "str"
                ],
                "exchange": [],
                "expected_result": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_market_is_active": {
            "name": "test_market_is_active",
            "location": 3521,
            "return": [
                "None"
            ],
            "arguments": {
                "market": [
                    "dict",
                    "str",
                    "Union[str, IO]",
                    "float",
                    "tuple"
                ],
                "expected_result": [
                    "dict",
                    "str",
                    "Union[str, IO]",
                    "float",
                    "tuple"
                ]
            }
        },
        "test_order_has_fee": {
            "name": "test_order_has_fee",
            "location": 3532,
            "return": [
                "None"
            ],
            "arguments": {
                "order": [
                    "str",
                    "Dict[str, Any]"
                ],
                "expected": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_extract_cost_curr_rate": {
            "name": "test_extract_cost_curr_rate",
            "location": 3544,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "default_conf": [
                    "str",
                    "bool"
                ],
                "order": [
                    "bool",
                    "str"
                ],
                "expected": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_calculate_fee_rate": {
            "name": "test_calculate_fee_rate",
            "location": 3586,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.Mock",
                    "unittesmock.MagicMock",
                    "str"
                ],
                "default_conf": [
                    "bool"
                ],
                "order": [
                    "bool",
                    "str"
                ],
                "expected": [
                    "bool",
                    "str"
                ],
                "unknown_fee_rate": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_calculate_backoff": {
            "name": "test_calculate_backoff",
            "location": 3615,
            "return": [
                "None"
            ],
            "arguments": {
                "retrycount": [
                    "int"
                ],
                "max_retries": [
                    "int"
                ],
                "expected": [
                    "int"
                ]
            }
        },
        "test__get_funding_fees_from_exchange": {
            "name": "test__get_funding_fees_from_exchange",
            "location": 3620,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str"
                ],
                "mocker": [
                    "str"
                ],
                "exchange_name": [
                    "str"
                ]
            }
        },
        "test_get_stake_amount_considering_leverage": {
            "name": "test_get_stake_amount_considering_leverage",
            "location": 3693,
            "return": [
                "None"
            ],
            "arguments": {
                "exchange": [
                    "int",
                    "bool"
                ],
                "stake_amount": [
                    "int",
                    "str"
                ],
                "leverage": [
                    "int",
                    "str"
                ],
                "min_stake_with_lev": [
                    "int",
                    "str"
                ],
                "mocker": [
                    "int"
                ],
                "default_conf": [
                    "int"
                ]
            }
        },
        "test__set_leverage": {
            "name": "test__set_leverage",
            "location": 3711,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "pandas.DataFrame",
                    "dict"
                ],
                "default_conf": [],
                "exchange_name": [
                    "str",
                    "pandas.DataFrame",
                    "dict"
                ],
                "trading_mode": [
                    "str",
                    "pandas.DataFrame",
                    "dict"
                ]
            }
        },
        "test_set_margin_mode": {
            "name": "test_set_margin_mode",
            "location": 3735,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "str",
                    "Callable"
                ],
                "default_conf": [
                    "str",
                    "int"
                ],
                "margin_mode": [
                    "int",
                    "str",
                    "Callable"
                ]
            }
        },
        "test_validate_trading_mode_and_margin_mode": {
            "name": "test_validate_trading_mode_and_margin_mode",
            "location": 3798,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "Callable",
                    "dict"
                ],
                "mocker": [
                    "str",
                    "Callable",
                    "dict"
                ],
                "exchange_name": [
                    "str",
                    "Callable",
                    "dict"
                ],
                "trading_mode": [
                    "str",
                    "int"
                ],
                "margin_mode": [
                    "str",
                    "int"
                ],
                "exception_thrown": [
                    "str",
                    "bool",
                    "List[Dict]",
                    "Dict[str, Any]",
                    "List[int]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "test__ccxt_config": {
            "name": "test__ccxt_config",
            "location": 3831,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str"
                ],
                "mocker": [
                    "str"
                ],
                "exchange_name": [
                    "str"
                ],
                "trading_mode": [
                    "str"
                ],
                "ccxt_config": [
                    "dict",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "test_get_max_leverage_from_margin": {
            "name": "test_get_max_leverage_from_margin",
            "location": 3851,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "Optional[int]"
                ],
                "mocker": [
                    "str",
                    "Optional[int]"
                ],
                "pair": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Tuple[int, int]"
                ],
                "nominal_value": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Tuple[int, int]"
                ],
                "max_lev": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Tuple[int, int]"
                ]
            }
        },
        "test_calculate_funding_fees": {
            "name": "test_calculate_funding_fees",
            "location": 3866,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "str",
                    "Union[str, datetime.datetime, None]",
                    "List[int]"
                ],
                "mocker": [
                    "int",
                    "str",
                    "Union[str, datetime.datetime, None]",
                    "List[int]"
                ],
                "size": [
                    "pandas.DataFrame"
                ],
                "funding_rate": [
                    "Optional[datetime.datetime]",
                    "int"
                ],
                "mark_price": [
                    "Optional[datetime.datetime]",
                    "int"
                ],
                "funding_fee": [
                    "pandas.DataFrame"
                ],
                "kraken_fee": [
                    "Optional[int]",
                    "Optional[datetime.datetime]"
                ],
                "time_in_ratio": [
                    "pandas.DataFrame"
                ]
            }
        },
        "test_combine_funding_and_mark": {
            "name": "test_combine_funding_and_mark",
            "location": 3928,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int"
                ],
                "mocker": [
                    "int"
                ],
                "funding_rate": [
                    "pandas.DataFrame"
                ],
                "mark_price": [
                    "pandas.DataFrame"
                ],
                "futures_funding_rate": []
            }
        },
        "test_get_or_calculate_liquidation_price": {
            "name": "test_get_or_calculate_liquidation_price",
            "location": 3985,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": []
            }
        },
        "test__fetch_and_calculate_funding_fees": {
            "name": "test__fetch_and_calculate_funding_fees",
            "location": 4088,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.Mock"
                ],
                "default_conf": [
                    "str",
                    "Callable"
                ],
                "funding_rate_history_hourly": [
                    "bool"
                ],
                "funding_rate_history_octohourly": [
                    "bool"
                ],
                "rate_start": [
                    "bool"
                ],
                "rate_end": [
                    "bool"
                ],
                "mark_ohlcv": [
                    "int",
                    "unittesmock.MagicMock"
                ],
                "exchange": [
                    "bool"
                ],
                "d1": [
                    "datetime.datetime",
                    "int",
                    "dict",
                    "Optional[str]",
                    "float",
                    "datetime.date"
                ],
                "d2": [
                    "datetime.datetime",
                    "int",
                    "dict",
                    "Optional[str]",
                    "float",
                    "datetime.date"
                ],
                "amount": [
                    "int"
                ],
                "expected_fees": [
                    "bool"
                ]
            }
        },
        "test__fetch_and_calculate_funding_fees_datetime_called": {
            "name": "test__fetch_and_calculate_funding_fees_datetime_called",
            "location": 4166,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [],
                "funding_rate_history_octohourly": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "int"
                ],
                "mark_ohlcv": [
                    "unittesmock.MagicMock",
                    "int",
                    "unittesmock.Mock"
                ],
                "exchange": [
                    "int",
                    "bool"
                ],
                "time_machine": [
                    "tests.hints.CleavageCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.LeftAccumulatorCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int"
                ],
                "expected_fees": [
                    "Optional[int]",
                    "str",
                    "float"
                ]
            }
        },
        "test__get_contract_size": {
            "name": "test__get_contract_size",
            "location": 4198,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "List[str]",
                    "int",
                    "str",
                    "float",
                    "unittesmock.Mock"
                ],
                "default_conf": [],
                "pair": [
                    "float",
                    "int",
                    "List[float]",
                    "Optional[int]"
                ],
                "expected_size": [
                    "bytes",
                    "gluonts.model.common.Tensor",
                    "int",
                    "dict",
                    "bool",
                    "Union[int, float]"
                ],
                "trading_mode": [
                    "bool",
                    "str"
                ]
            }
        },
        "test__order_contracts_to_amount": {
            "name": "test__order_contracts_to_amount",
            "location": 4228,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Optional[recidiviz.common.constants.state.state_incarceration_period.StateIncarcerationPeriodAdmissionReason]",
                    "bool",
                    "int",
                    "str"
                ],
                "default_conf": [
                    "Optional[str]"
                ],
                "markets": [
                    "bool",
                    "tests.conftesWorker"
                ],
                "pair": [
                    "Union[List[str], List[int]]",
                    "List[Dict[str, Any]]",
                    "List[Dict[int, str]]",
                    "List[str]"
                ],
                "contract_size": [
                    "int",
                    "float",
                    "bool"
                ],
                "trading_mode": [
                    "bool",
                    "tests.conftesWorker"
                ]
            }
        },
        "test__trades_contracts_to_amount": {
            "name": "test__trades_contracts_to_amount",
            "location": 4350,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Optional[recidiviz.common.constants.state.state_incarceration_period.StateIncarcerationPeriodAdmissionReason]",
                    "bool",
                    "int",
                    "str"
                ],
                "default_conf": [
                    "Optional[str]"
                ],
                "markets": [
                    "bool",
                    "tests.conftesWorker"
                ],
                "pair": [
                    "bool",
                    "tests.conftesWorker"
                ],
                "contract_size": [
                    "str",
                    "bool",
                    "Tuple[int]",
                    "Optional[Any]",
                    "int",
                    "List[str]",
                    "Optional[str]"
                ],
                "trading_mode": [
                    "bool",
                    "tests.conftesWorker"
                ]
            }
        },
        "test__amount_to_contracts": {
            "name": "test__amount_to_contracts",
            "location": 4386,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "unittesmock.Mock",
                    "Sequence[relay.exchange.order.Order]",
                    "int",
                    "List[str]",
                    "relay.exchange.order.Order"
                ],
                "pair": [
                    "Sequence[str]",
                    "float",
                    "int",
                    "List[float]"
                ],
                "param_amount": [
                    "Callable",
                    "Optional[float]",
                    "Optional[int]",
                    "bool"
                ],
                "param_size": [
                    "int",
                    "float"
                ]
            }
        },
        "test_liquidation_price_is_none": {
            "name": "test_liquidation_price_is_none",
            "location": 4437,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str"
                ],
                "default_conf": [
                    "str"
                ],
                "exchange_name": [
                    "str"
                ],
                "open_rate": [
                    "str",
                    "bool",
                    "int",
                    "Callable"
                ],
                "is_short": [
                    "str",
                    "bool",
                    "int",
                    "Callable"
                ],
                "trading_mode": [
                    "bool",
                    "str",
                    "int"
                ],
                "margin_mode": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "test_liquidation_price": {
            "name": "test_liquidation_price",
            "location": 4474,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str"
                ],
                "default_conf": [
                    "str",
                    "Dict[str, Any]"
                ],
                "exchange_name": [
                    "str"
                ],
                "open_rate": [
                    "bool",
                    "int"
                ],
                "is_short": [
                    "bool",
                    "int"
                ],
                "trading_mode": [
                    "str",
                    "bool",
                    "int",
                    "Dict[str, Any]",
                    "Callable"
                ],
                "margin_mode": [
                    "str",
                    "bool",
                    "int",
                    "Dict[str, Any]",
                    "Callable"
                ],
                "wallet_balance": [
                    "bool",
                    "int"
                ],
                "mm_ex_1": [
                    "bool",
                    "int"
                ],
                "upnl_ex_1": [
                    "bool",
                    "int"
                ],
                "maintenance_amt": [
                    "mock.MagicMock",
                    "int"
                ],
                "position": [
                    "bool",
                    "int"
                ],
                "mm_ratio": [
                    "mock.MagicMock",
                    "int"
                ],
                "expected": [
                    "bool",
                    "int"
                ]
            }
        },
        "test_get_max_pair_stake_amount": {
            "name": "test_get_max_pair_stake_amount",
            "location": 4494,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "unittesmock.MagicMock",
                    "relay.exchange.order.Order"
                ],
                "default_conf": [
                    "int",
                    "unittesmock.Mock",
                    "List[str]",
                    "relay.exchange.order.Order",
                    "Sequence[relay.exchange.order.Order]"
                ]
            }
        },
        "test_load_leverage_tiers": {
            "name": "test_load_leverage_tiers",
            "location": 4619,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Callable"
                ],
                "default_conf": [
                    "Callable[[List, bool], None]",
                    "Callable"
                ],
                "leverage_tiers": [
                    "bool",
                    "int",
                    "tests.testmodels.Signals"
                ],
                "exchange_name": [
                    "Callable",
                    "Dict[str, Any]",
                    "pandas.DataFrame"
                ]
            }
        },
        "test_parse_leverage_tier": {
            "name": "test_parse_leverage_tier",
            "location": 4702,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable"
                ],
                "default_conf": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "test_get_maintenance_ratio_and_amt_exceptions": {
            "name": "test_get_maintenance_ratio_and_amt_exceptions",
            "location": 4759,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.Mock",
                    "int"
                ],
                "default_conf": [
                    "int",
                    "str"
                ],
                "leverage_tiers": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.LeftAccumulatorCall"
                ]
            }
        },
        "test_get_maintenance_ratio_and_amt": {
            "name": "test_get_maintenance_ratio_and_amt",
            "location": 4788,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Callable",
                    "tests.conftesWorker",
                    "unittesmock.Mock"
                ],
                "default_conf": [
                    "Callable"
                ],
                "leverage_tiers": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "Tuple[List[str], Optional[str]]",
                    "Sequence[str]"
                ],
                "pair": [
                    "str"
                ],
                "value": [
                    "str"
                ],
                "mmr": [
                    "str"
                ],
                "maintAmt": [
                    "str"
                ]
            }
        },
        "test_get_max_leverage_futures": {
            "name": "test_get_max_leverage_futures",
            "location": 4806,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str"
                ],
                "mocker": [
                    "str"
                ],
                "leverage_tiers": [
                    "int",
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test__get_params": {
            "name": "test__get_params",
            "location": 4837,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "unittesmock.Mock"
                ],
                "default_conf": [
                    "Callable",
                    "Dict[str, Any]",
                    "str"
                ],
                "exchange_name": [
                    "Callable",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "test_get_liquidation_price": {
            "name": "test_get_liquidation_price",
            "location": 4926,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "bool",
                    "str",
                    "dict",
                    "Optional[str]"
                ],
                "default_conf_usdt": [
                    "str",
                    "bool",
                    "int"
                ],
                "is_short": [
                    "int",
                    "str",
                    "datetime.datetime",
                    "bool",
                    "Optional[str]"
                ],
                "trading_mode": [
                    "Optional[str]",
                    "int",
                    "Sequence",
                    "bool",
                    "str"
                ],
                "exchange_name": [
                    "str",
                    "Callable",
                    "float"
                ],
                "margin_mode": [
                    "Optional[str]",
                    "int",
                    "Sequence",
                    "bool",
                    "str"
                ],
                "leverage": [
                    "str",
                    "int",
                    "datetime.datetime"
                ],
                "open_rate": [
                    "int",
                    "Union[str, int]",
                    "str",
                    "bool"
                ],
                "amount": [
                    "str",
                    "int",
                    "datetime.datetime"
                ],
                "expected_liq": [
                    "Optional[float]",
                    "Optional[str]",
                    "int",
                    "Optional[Iterable[str]]",
                    "Optional[int]",
                    "List[str]"
                ],
                "liquidation_buffer": [
                    "pandas.core.generic.NDFrame",
                    "str",
                    "Optional[str]",
                    "bool",
                    "bytes"
                ]
            }
        },
        "test_stoploss_contract_size": {
            "name": "test_stoploss_contract_size",
            "location": 5022,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Callable",
                    "float",
                    "Optional[int]",
                    "List[float]",
                    "gluonts.model.common.Tensor"
                ],
                "default_conf": [
                    "int"
                ],
                "contract_size": [
                    "tests.async_mock.Mock",
                    "unittesmock.MagicMock",
                    "mock.MagicMock"
                ],
                "order_amount": [
                    "unittesmock.MagicMock",
                    "mock.MagicMock"
                ]
            }
        },
        "test___async_get_candle_history_sort.sort_data": {
            "name": "sort_data",
            "location": 2503,
            "return": [
                "List",
                "Dict",
                "Dict[str,str]",
                "Mapping",
                "str",
                "List[Callable]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict",
                    "bytes"
                ],
                "key": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict",
                    "bytes"
                ]
            }
        }
    },
    "freqtrade-develop/tests/exchange/test_ftx.py": {
        "test_stoploss_order_ftx": {
            "name": "test_stoploss_order_ftx",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [
                    "int"
                ],
                "order_price": [],
                "exchangelimitratio": [
                    "str",
                    "List[int]",
                    "int"
                ],
                "side": []
            }
        },
        "test_stoploss_order_dry_run_ftx": {
            "name": "test_stoploss_order_dry_run_ftx",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Optional[int]",
                    "Callable"
                ],
                "mocker": [
                    "float",
                    "int"
                ],
                "side": []
            }
        },
        "test_stoploss_adjust_ftx": {
            "name": "test_stoploss_adjust_ftx",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "Dict[str, Any]"
                ],
                "default_conf": [
                    "str",
                    "Dict[str, Any]"
                ],
                "sl1": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ],
                "sl2": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ],
                "sl3": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ],
                "side": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ]
            }
        },
        "test_fetch_stoploss_order_ftx": {
            "name": "test_fetch_stoploss_order_ftx",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [],
                "limit_sell_order": [
                    "mock.MagicMock",
                    "mock.Mock",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "limit_buy_order": [
                    "List[str]",
                    "Set[str]",
                    "str",
                    "List[bool]",
                    "bool"
                ]
            }
        },
        "test_get_order_id": {
            "name": "test_get_order_id",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "Dict[str, Any]"
                ],
                "default_conf": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "freqtrade-develop/tests/exchange/test_gateio.py": {
        "test_validate_order_types_gateio": {
            "name": "test_validate_order_types_gateio",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": []
            }
        },
        "test_fetch_stoploss_order_gateio": {
            "name": "test_fetch_stoploss_order_gateio",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "tests.basilisp.helpers.CompileFn",
                    "dict"
                ],
                "mocker": [
                    "tests.basilisp.helpers.CompileFn",
                    "dict"
                ]
            }
        },
        "test_cancel_stoploss_order_gateio": {
            "name": "test_cancel_stoploss_order_gateio",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "tests.basilisp.helpers.CompileFn",
                    "dict"
                ],
                "mocker": [
                    "tests.basilisp.helpers.CompileFn",
                    "dict"
                ]
            }
        },
        "test_stoploss_adjust_gateio": {
            "name": "test_stoploss_adjust_gateio",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "Dict[str, Any]"
                ],
                "default_conf": [
                    "str",
                    "Dict[str, Any]"
                ],
                "sl1": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ],
                "sl2": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ],
                "sl3": [
                    "bool",
                    "int",
                    "str",
                    "Callable[..., None]"
                ],
                "side": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ]
            }
        },
        "test_fetch_my_trades_gateio": {
            "name": "test_fetch_my_trades_gateio",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "int"
                ],
                "default_conf": [],
                "takerormaker": [
                    "unittesmock.MagicMock",
                    "bool"
                ],
                "rate": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ],
                "cost": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ]
            }
        }
    },
    "freqtrade-develop/tests/exchange/test_huobi.py": {
        "test_stoploss_order_huobi": {
            "name": "test_stoploss_order_huobi",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [
                    "Sequence[relay.exchange.order.Order]",
                    "Optional[int]",
                    "int",
                    "List[List[float]]",
                    "List[int]"
                ],
                "limitratio": [
                    "bool",
                    "Optional[Type[Exception]]",
                    "Optional[\"Game\"]",
                    "Optional[str]"
                ],
                "expected": [
                    "str"
                ],
                "side": [
                    "int",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "test_stoploss_order_dry_run_huobi": {
            "name": "test_stoploss_order_dry_run_huobi",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Optional[int]",
                    "Callable"
                ],
                "mocker": [
                    "float",
                    "int"
                ]
            }
        },
        "test_stoploss_adjust_huobi": {
            "name": "test_stoploss_adjust_huobi",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "Dict[str, Any]"
                ],
                "default_conf": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "freqtrade-develop/tests/exchange/test_kraken.py": {
        "test_buy_kraken_trading_agreement": {
            "name": "test_buy_kraken_trading_agreement",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Callable[[list], None]"
                ],
                "mocker": [
                    "int"
                ]
            }
        },
        "test_sell_kraken_trading_agreement": {
            "name": "test_sell_kraken_trading_agreement",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Callable[[list], None]"
                ],
                "mocker": [
                    "int"
                ]
            }
        },
        "test_get_balances_prod": {
            "name": "test_get_balances_prod",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_stoploss_order_kraken": {
            "name": "test_stoploss_order_kraken",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [
                    "int"
                ],
                "ordertype": [
                    "str",
                    "List[int]",
                    "int"
                ],
                "side": [],
                "adjustedprice": []
            }
        },
        "test_stoploss_order_dry_run_kraken": {
            "name": "test_stoploss_order_dry_run_kraken",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Optional[int]",
                    "Callable"
                ],
                "mocker": [
                    "float",
                    "int"
                ],
                "side": []
            }
        },
        "test_stoploss_adjust_kraken": {
            "name": "test_stoploss_adjust_kraken",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "Dict[str, Any]"
                ],
                "default_conf": [
                    "str",
                    "Dict[str, Any]"
                ],
                "sl1": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ],
                "sl2": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ],
                "sl3": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ],
                "side": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ]
            }
        }
    },
    "freqtrade-develop/tests/exchange/test_kucoin.py": {
        "test_stoploss_order_kucoin": {
            "name": "test_stoploss_order_kucoin",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [
                    "Callable",
                    "List[List[float]]",
                    "List[int]",
                    "Optional[int]",
                    "int"
                ],
                "limitratio": [
                    "int",
                    "bytes",
                    "Optional[str]",
                    "Mapping[str, Any]"
                ],
                "expected": [
                    "str"
                ],
                "side": [
                    "int",
                    "Callable"
                ],
                "order_type": [
                    "Callable",
                    "float"
                ]
            }
        },
        "test_stoploss_order_dry_run_kucoin": {
            "name": "test_stoploss_order_dry_run_kucoin",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Optional[int]",
                    "Callable"
                ],
                "mocker": [
                    "float",
                    "int"
                ]
            }
        },
        "test_stoploss_adjust_kucoin": {
            "name": "test_stoploss_adjust_kucoin",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "Dict[str, Any]"
                ],
                "default_conf": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "freqtrade-develop/tests/exchange/test_okx.py": {
        "test_okx_ohlcv_candle_limit": {
            "name": "test_okx_ohlcv_candle_limit",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "tests.basilisp.helpers.CompileFn",
                    "dict"
                ],
                "mocker": [
                    "tests.basilisp.helpers.CompileFn",
                    "dict"
                ]
            }
        },
        "test_get_maintenance_ratio_and_amt_okx": {
            "name": "test_get_maintenance_ratio_and_amt_okx",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Callable[[list], None]"
                ],
                "mocker": []
            }
        },
        "test_get_max_pair_stake_amount_okx": {
            "name": "test_get_max_pair_stake_amount_okx",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str"
                ],
                "mocker": [
                    "str"
                ],
                "leverage_tiers": [
                    "int",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "str"
                ]
            }
        },
        "test__get_posSide": {
            "name": "test__get_posSide",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "Callable"
                ],
                "mocker": [
                    "str",
                    "Callable"
                ],
                "mode": [
                    "int",
                    "str"
                ],
                "side": [
                    "bool",
                    "int"
                ],
                "reduceonly": [
                    "bool",
                    "int"
                ],
                "result": [
                    "bool",
                    "int"
                ]
            }
        },
        "test_additional_exchange_init_okx": {
            "name": "test_additional_exchange_init_okx",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_load_leverage_tiers_okx": {
            "name": "test_load_leverage_tiers_okx",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Sequence[relay.exchange.order.Order]"
                ],
                "mocker": [
                    "Sequence[relay.exchange.order.Order]"
                ],
                "markets": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightAccumulatorCall"
                ]
            }
        }
    },
    "freqtrade-develop/tests/exchange/__init__.py": {},
    "freqtrade-develop/tests/leverage/test_candletype.py": {
        "test_CandleType_from_string": {
            "name": "test_CandleType_from_string",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "input": [
                    "str",
                    "dict",
                    "Callable[..., Awaitable]"
                ],
                "expected": [
                    "str",
                    "dict",
                    "Callable[..., Awaitable]"
                ]
            }
        },
        "test_CandleType_get_default": {
            "name": "test_CandleType_get_default",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "input": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        }
    },
    "freqtrade-develop/tests/leverage/test_interest.py": {
        "test_interest": {
            "name": "test_interest",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "exchange": [
                    "bool",
                    "str"
                ],
                "interest_rate": [
                    "bool",
                    "str"
                ],
                "hours": [
                    "bool",
                    "str"
                ],
                "expected": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "freqtrade-develop/tests/optimize/conftest.py": {
        "hyperopt_conf": {
            "name": "hyperopt_conf",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "list",
                    "bool",
                    "int"
                ]
            }
        },
        "hyperopt": {
            "name": "hyperopt",
            "location": 32,
            "return": [
                "Hyperopt",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "hyperopt_conf": [
                    "int",
                    "Callable",
                    "str"
                ],
                "mocker": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "hyperopt_results": {
            "name": "hyperopt_results",
            "location": 39,
            "return": [
                "str",
                "Optional[float]",
                "dict",
                "pandas.DataFrame"
            ],
            "arguments": {}
        }
    },
    "freqtrade-develop/tests/optimize/test_backtesting.py": {
        "trim_dictlist": {
            "name": "trim_dictlist",
            "location": 48,
            "return": [
                "Dict",
                "Iterable[str]",
                "int",
                "Callable",
                "numpy.ndarray",
                "str",
                "allennlp.data.vocabulary.Vocabulary"
            ],
            "arguments": {
                "dict_list": [
                    "List[str]",
                    "int",
                    "bytes",
                    "float",
                    "dict",
                    "Tuple[int]"
                ],
                "num": [
                    "int",
                    "bool",
                    "Set[int]",
                    "List[str]"
                ]
            }
        },
        "backtesting_cleanup": {
            "name": "backtesting_cleanup",
            "location": 56,
            "return": [
                "None",
                "Generator[None]"
            ],
            "arguments": {}
        },
        "load_data_test": {
            "name": "load_data_test",
            "location": 62,
            "return": [
                "Dict[Text,]",
                "int",
                "str",
                "recidiviz.persistence.database.schema_entity_converter.base_schema_entity_converter.DstBaseType"
            ],
            "arguments": {
                "what": [
                    "str",
                    "List[str]",
                    "bool",
                    "dict",
                    "pandas.DataFrame"
                ],
                "testdatadir": [
                    "pandas.DataFrame",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "simple_backtest": {
            "name": "simple_backtest",
            "location": 93,
            "return": [
                "bool",
                "pandas.DataFrame",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "config": [
                    "Optional[Dict[str, Any]]",
                    "dict",
                    "Dict[str, Any]"
                ],
                "contour": [
                    "dict",
                    "Dict[str, Union[int, bool]]",
                    "Mapping",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ],
                "mocker": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ],
                "testdatadir": [
                    "dict",
                    "Dict[str, Union[int, bool]]",
                    "Mapping",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "_make_backtest_conf": {
            "name": "_make_backtest_conf",
            "location": 116,
            "return": [
                "Dict[Text,int]",
                "List[recidiviz.persistence.entity.state.entities.StateIncarcerationPeriod]",
                "Iterable[numpy.dtype]",
                "recidiviz.persistence.entity.state.entities.StateIncarcerationPeriod",
                "recidiviz.persistence.entity.county.entities.Person"
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "Callable",
                    "str"
                ],
                "datadir": [
                    "int",
                    "bytes",
                    "Dict[str, str]",
                    "dict"
                ],
                "conf": [
                    "None",
                    "int",
                    "Callable",
                    "str"
                ],
                "pair": [
                    "Text",
                    "int",
                    "bytes",
                    "Dict[str,str]",
                    "Dict"
                ]
            }
        },
        "_trend": {
            "name": "_trend",
            "location": 133,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "signals": [
                    "bool",
                    "int",
                    "float",
                    "Callable",
                    "List[str]",
                    "bytes"
                ],
                "buy_value": [
                    "int",
                    "bool",
                    "float",
                    "str",
                    "tuple"
                ],
                "sell_value": [
                    "int",
                    "bool",
                    "float",
                    "str",
                    "tuple"
                ]
            }
        },
        "_trend_alternate": {
            "name": "_trend_alternate",
            "location": 148,
            "return": [
                "None",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "dataframe": [
                    "int",
                    "Callable",
                    "str"
                ],
                "metadata": [
                    "None",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "test_setup_optimize_configuration_without_arguments": {
            "name": "test_setup_optimize_configuration_without_arguments",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "bool",
                    "pypi2nix.path.Path"
                ],
                "default_conf": [
                    "str",
                    "bool",
                    "pypi2nix.path.Path"
                ],
                "caplog": [
                    "List[Dict[str, float]]",
                    "int",
                    "bool",
                    "Callable",
                    "dict"
                ]
            }
        },
        "test_setup_bt_configuration_with_arguments": {
            "name": "test_setup_bt_configuration_with_arguments",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "bool",
                    "str"
                ],
                "default_conf": [
                    "str",
                    "bool",
                    "pypi2nix.path.Path"
                ],
                "caplog": [
                    "Collection[str]",
                    "bool",
                    "dict",
                    "Optional[Mapping[str, Any]]",
                    "str",
                    "List[Dict[str, float]]"
                ]
            }
        },
        "test_setup_optimize_configuration_stake_amount": {
            "name": "test_setup_optimize_configuration_stake_amount",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "pypi2nix.path.Path",
                    "str",
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]",
                    "Callable"
                ],
                "default_conf": [
                    "pypi2nix.path.Path",
                    "str",
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]",
                    "Callable"
                ],
                "caplog": [
                    "List[str]",
                    "int",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "Literal",
                    "Callable[..., None]"
                ]
            }
        },
        "test_start": {
            "name": "test_start",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "fee": [
                    "tests.hints.RightFolderCall",
                    "tests.hints.CleavageCall",
                    "tests.hints.RightAccumulatorCall"
                ],
                "default_conf": [],
                "caplog": [
                    "str"
                ]
            }
        },
        "test_backtesting_init": {
            "name": "test_backtesting_init",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "dict"
                ],
                "order_types": [
                    "str",
                    "List[Callable]",
                    "Callable[[KT], VT]"
                ]
            }
        },
        "test_backtesting_init_no_timeframe": {
            "name": "test_backtesting_init_no_timeframe",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "Callable",
                    "dict"
                ],
                "caplog": [
                    "bool",
                    "List[str]",
                    "List[Tuple[str, Any]]",
                    "int"
                ]
            }
        },
        "test_data_with_fee": {
            "name": "test_data_with_fee",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "Tuple[int, int]",
                    "dict"
                ],
                "mocker": []
            }
        },
        "test_data_to_dataframe_bt": {
            "name": "test_data_to_dataframe_bt",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "Tuple[int, int]",
                    "dict",
                    "Sequence",
                    "bool",
                    "Dict[str, Any]"
                ],
                "mocker": [
                    "int",
                    "Tuple[int, int]",
                    "dict",
                    "Sequence",
                    "bool",
                    "Dict[str, Any]"
                ],
                "testdatadir": [
                    "int",
                    "bool"
                ]
            }
        },
        "test_backtest_abort": {
            "name": "test_backtest_abort",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [],
                "testdatadir": [
                    "List[str]",
                    "Set[str]",
                    "str",
                    "List[bool]",
                    "bool"
                ]
            }
        },
        "test_backtesting_start": {
            "name": "test_backtesting_start",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int"
                ],
                "mocker": [
                    "int"
                ],
                "testdatadir": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "caplog": [
                    "dict",
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "test_backtesting_start_no_data": {
            "name": "test_backtesting_start_no_data",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mocker": [
                    "unittesmock.MagicMock",
                    "mock.MagicMock"
                ],
                "caplog": [
                    "str",
                    "bool",
                    "List[bool]",
                    "recidiviz.persistence.database.database_entity.DatabaseEntity",
                    "dict"
                ],
                "testdatadir": [
                    "int",
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_backtesting_no_pair_left": {
            "name": "test_backtesting_no_pair_left",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "dict"
                ],
                "mocker": [
                    "tests.async_mock.MagicMock",
                    "mock.MagicMock",
                    "unittesmock.MagicMock"
                ],
                "caplog": [
                    "str",
                    "List[str]",
                    "Set[str]",
                    "List[bool]",
                    "bool"
                ],
                "testdatadir": [
                    "int",
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_backtesting_pairlist_list": {
            "name": "test_backtesting_pairlist_list",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Sequence['cirq.Qid']",
                    "str",
                    "bool"
                ],
                "mocker": [
                    "unittesmock.MagicMock",
                    "tests.async_mock.MagicMock"
                ],
                "caplog": [
                    "str",
                    "List[str]",
                    "Set[str]",
                    "List[bool]",
                    "bool",
                    "pathlib.Path"
                ],
                "testdatadir": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int"
                ],
                "tickers": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int"
                ]
            }
        },
        "test_backtest__enter_trade": {
            "name": "test_backtest__enter_trade",
            "location": 510,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "fee": [],
                "mocker": []
            }
        },
        "test_backtest__enter_trade_futures": {
            "name": "test_backtest__enter_trade_futures",
            "location": 569,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [],
                "fee": [],
                "mocker": []
            }
        },
        "test_backtest__get_sell_trade_entry": {
            "name": "test_backtest__get_sell_trade_entry",
            "location": 651,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "fee": [
                    "int",
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mocker": [
                    "int",
                    "Callable",
                    "float",
                    "bool"
                ]
            }
        },
        "test_backtest_one": {
            "name": "test_backtest_one",
            "location": 746,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "fee": [],
                "mocker": [],
                "testdatadir": [
                    "int",
                    "Callable"
                ]
            }
        },
        "test_backtest_1min_timeframe": {
            "name": "test_backtest_1min_timeframe",
            "location": 830,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "fee": [],
                "mocker": [],
                "testdatadir": [
                    "int",
                    "Callable"
                ]
            }
        },
        "test_backtest_trim_no_data_left": {
            "name": "test_backtest_trim_no_data_left",
            "location": 856,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "fee": [
                    "int",
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mocker": [
                    "int",
                    "float"
                ],
                "testdatadir": [
                    "int",
                    "dict",
                    "float"
                ]
            }
        },
        "test_processed": {
            "name": "test_processed",
            "location": 886,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [],
                "testdatadir": [
                    "dict"
                ]
            }
        },
        "test_backtest_dataprovider_analyzed_df": {
            "name": "test_backtest_dataprovider_analyzed_df",
            "location": 901,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "List[str]",
                    "Set[str]",
                    "str",
                    "List[bool]",
                    "bool"
                ],
                "fee": [
                    "List[str]",
                    "Set[str]",
                    "str",
                    "List[bool]",
                    "bool"
                ],
                "mocker": [
                    "List[str]",
                    "Set[str]",
                    "str",
                    "List[bool]",
                    "bool"
                ],
                "testdatadir": [
                    "List[str]",
                    "Set[str]",
                    "str",
                    "List[bool]",
                    "bool"
                ]
            }
        },
        "test_backtest_pricecontours_protections": {
            "name": "test_backtest_pricecontours_protections",
            "location": 942,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "List[int]",
                    "Optional[int]",
                    "list"
                ],
                "fee": [],
                "mocker": [
                    "Dict[type, Any]"
                ],
                "testdatadir": []
            }
        },
        "test_backtest_pricecontours": {
            "name": "test_backtest_pricecontours",
            "location": 982,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "bool",
                    "Iterable[Any]"
                ],
                "fee": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "mocker": [
                    "str"
                ],
                "testdatadir": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "protections": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "contour": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "expected": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "test_backtest_clash_buy_sell": {
            "name": "test_backtest_clash_buy_sell",
            "location": 996,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ],
                "default_conf": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ],
                "testdatadir": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ]
            }
        },
        "test_backtest_only_sell": {
            "name": "test_backtest_only_sell",
            "location": 1012,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ],
                "default_conf": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ],
                "testdatadir": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ]
            }
        },
        "test_backtest_alternate_buy_sell": {
            "name": "test_backtest_alternate_buy_sell",
            "location": 1028,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "fee": [],
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "testdatadir": []
            }
        },
        "test_backtest_multi_pair": {
            "name": "test_backtest_multi_pair",
            "location": 1060,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "fee": [],
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "tres": [
                    "Callable",
                    "bytes"
                ],
                "pair": [
                    "tests.basilisp.helpers.CompileFn",
                    "bool",
                    "tests.async_mock.Mock"
                ],
                "testdatadir": [
                    "int",
                    "Callable"
                ]
            }
        },
        "test_backtest_start_timerange": {
            "name": "test_backtest_start_timerange",
            "location": 1132,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str"
                ],
                "mocker": [
                    "dict"
                ],
                "caplog": [
                    "dict",
                    "str",
                    "int",
                    "Callable"
                ],
                "testdatadir": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "test_backtest_start_multi_strat": {
            "name": "test_backtest_start_multi_strat",
            "location": 1172,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [],
                "caplog": [
                    "dict",
                    "str",
                    "int",
                    "Callable"
                ],
                "testdatadir": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "test_backtest_start_multi_strat_nomock": {
            "name": "test_backtest_start_multi_strat_nomock",
            "location": 1252,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [],
                "caplog": [
                    "dict",
                    "str",
                    "int",
                    "Callable"
                ],
                "testdatadir": [
                    "pathlib.Path",
                    "str"
                ],
                "capsys": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_backtest_start_futures_noliq": {
            "name": "test_backtest_start_futures_noliq",
            "location": 1372,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "str",
                    "Optional[Mapping]",
                    "Dict[str, str]",
                    "dict",
                    "bool"
                ],
                "mocker": [],
                "caplog": [
                    "List[str]",
                    "Set[str]",
                    "str",
                    "List[bool]",
                    "bool",
                    "tests.testmodels.Signals"
                ],
                "testdatadir": [
                    "pathlib.Path",
                    "taskiinfrastructure.data.json.repositories.project_repository.JsonProjectRepository",
                    "int"
                ],
                "capsys": [
                    "List[str]",
                    "Set[str]",
                    "str",
                    "List[bool]",
                    "bool",
                    "tests.testmodels.Signals"
                ]
            }
        },
        "test_backtest_start_nomock_futures": {
            "name": "test_backtest_start_nomock_futures",
            "location": 1405,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "unittesmock.MagicMock"
                ],
                "mocker": [],
                "caplog": [
                    "dict",
                    "str",
                    "int",
                    "Callable"
                ],
                "testdatadir": [
                    "pathlib.Path",
                    "taskiinfrastructure.data.json.repositories.project_repository.JsonProjectRepository",
                    "str"
                ],
                "capsys": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_backtest_start_multi_strat_nomock_detail": {
            "name": "test_backtest_start_multi_strat_nomock_detail",
            "location": 1517,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [],
                "caplog": [
                    "dict",
                    "str",
                    "int",
                    "Callable"
                ],
                "testdatadir": [
                    "pathlib.Path",
                    "str"
                ],
                "capsys": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_backtest_start_multi_strat_caching": {
            "name": "test_backtest_start_multi_strat_caching",
            "location": 1631,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "unittesmock.MagicMock"
                ],
                "mocker": [
                    "bool"
                ],
                "caplog": [
                    "int",
                    "str"
                ],
                "testdatadir": [
                    "pathlib.Path",
                    "str"
                ],
                "run_id": [
                    "unittesmock.MagicMock"
                ],
                "start_delta": [
                    "int",
                    "str",
                    "datetime.datetime",
                    "Optional[str]",
                    "bool",
                    "float"
                ],
                "cache": [
                    "pathlib.Path",
                    "str",
                    "Union[str, pathlib.Path]",
                    "Optional[pathlib.Path]"
                ]
            }
        },
        "test_get_strategy_run_id": {
            "name": "test_get_strategy_run_id",
            "location": 1749,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "set",
                    "str",
                    "List[Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "test_backtesting_start.get_timerange": {
            "name": "get_timerange",
            "location": 379,
            "return": [
                "tuple[Arrow]"
            ],
            "arguments": {
                "input1": []
            }
        },
        "test_backtesting_start_no_data.get_timerange": {
            "name": "get_timerange",
            "location": 417,
            "return": [
                "Tuple[Arrow]",
                "str",
                "bool"
            ],
            "arguments": {
                "input1": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "test_backtest_dataprovider_analyzed_df.tmp_confirm_entry": {
            "name": "tmp_confirm_entry",
            "location": 918,
            "return": [
                "None"
            ],
            "arguments": {
                "pair": [
                    "str",
                    "datetime.datetime",
                    "datetime",
                    "int",
                    "pandas.DataFrame"
                ],
                "current_time": [
                    "int",
                    "datetime.date",
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_backtest_clash_buy_sell.fun": {
            "name": "fun",
            "location": 998,
            "return": [],
            "arguments": {
                "dataframe": [
                    "None"
                ],
                "pair": [
                    "None"
                ]
            }
        },
        "test_backtest_only_sell.fun": {
            "name": "fun",
            "location": 1014,
            "return": [
                "int",
                "Optional[int]",
                "pathlib.Path",
                "float",
                "List[int]",
                "str",
                "tuple"
            ],
            "arguments": {
                "dataframe": [
                    "None",
                    "str",
                    "Generator",
                    "Optional[bool]",
                    "Optional[int]",
                    "float",
                    "pandas._ArrayLike"
                ],
                "pair": [
                    "None",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "test_backtest_multi_pair._trend_alternate_hold": {
            "name": "_trend_alternate_hold",
            "location": 1062,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "dataframe": [
                    "None",
                    "numpy.ndarray",
                    "int",
                    "str",
                    "bool"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "freqtrade-develop/tests/optimize/test_backtesting_adjust_position.py": {
        "test_backtest_position_adjustment": {
            "name": "test_backtest_position_adjustment",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "fee": [],
                "mocker": [],
                "testdatadir": [
                    "int",
                    "Callable"
                ]
            }
        }
    },
    "freqtrade-develop/tests/optimize/test_backtest_detail.py": {
        "test_backtest_results": {
            "name": "test_backtest_results",
            "location": 903,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "fee": [],
                "mocker": [],
                "caplog": [],
                "data": []
            }
        }
    },
    "freqtrade-develop/tests/optimize/test_edge_cli.py": {
        "test_setup_optimize_configuration_without_arguments": {
            "name": "test_setup_optimize_configuration_without_arguments",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "bool"
                ],
                "default_conf": [
                    "str",
                    "bool"
                ],
                "caplog": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_setup_edge_configuration_with_arguments": {
            "name": "test_setup_edge_configuration_with_arguments",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "bool"
                ],
                "edge_conf": [
                    "Optional[str]"
                ],
                "caplog": []
            }
        },
        "test_start": {
            "name": "test_start",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "bool"
                ],
                "fee": [
                    "str",
                    "cli_ui.tests.MessageRecorder"
                ],
                "edge_conf": [
                    "tests.e2e.Helper",
                    "Optional[str]"
                ],
                "caplog": []
            }
        },
        "test_edge_init": {
            "name": "test_edge_init",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.async_mock.Mock"
                ],
                "edge_conf": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_edge_init_fee": {
            "name": "test_edge_init_fee",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "edge_conf": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.async_mock.Mock"
                ]
            }
        },
        "test_edge_start": {
            "name": "test_edge_start",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.async_mock.Mock",
                    "tests.async_mock.MagicMock"
                ],
                "edge_conf": [
                    "str",
                    "cli_ui.tests.MessageRecorder",
                    "int",
                    "tests.async_mock.Mock"
                ]
            }
        }
    },
    "freqtrade-develop/tests/optimize/test_hyperopt.py": {
        "generate_result_metrics": {
            "name": "generate_result_metrics",
            "location": 25,
            "return": [
                "Dict[Text,Union[int,float]]",
                "int",
                "Type",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "test_setup_hyperopt_configuration_without_arguments": {
            "name": "test_setup_hyperopt_configuration_without_arguments",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "bool",
                    "pypi2nix.path.Path"
                ],
                "default_conf": [
                    "str",
                    "bool",
                    "pypi2nix.path.Path"
                ],
                "caplog": [
                    "int",
                    "Callable",
                    "Callable[..., None]",
                    "Collection[str]",
                    "bool",
                    "List[List[int]]"
                ]
            }
        },
        "test_setup_hyperopt_configuration_with_arguments": {
            "name": "test_setup_hyperopt_configuration_with_arguments",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "bool",
                    "str"
                ],
                "default_conf": [
                    "str",
                    "bool",
                    "pypi2nix.path.Path"
                ],
                "caplog": [
                    "bool",
                    "Collection[str]",
                    "Optional[Mapping[str, Any]]",
                    "str"
                ]
            }
        },
        "test_setup_hyperopt_configuration_stake_amount": {
            "name": "test_setup_hyperopt_configuration_stake_amount",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "pypi2nix.path.Path",
                    "str",
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]",
                    "Callable"
                ],
                "default_conf": [
                    "pypi2nix.path.Path",
                    "str",
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]",
                    "Callable"
                ]
            }
        },
        "test_start_not_installed": {
            "name": "test_start_not_installed",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "str",
                    "bool"
                ],
                "import_fails": [
                    "str",
                    "int",
                    "pathlib.Path",
                    "Dict[str, Tuple[str, str]]"
                ]
            }
        },
        "test_start_no_hyperopt_allowed": {
            "name": "test_start_no_hyperopt_allowed",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "hyperopt_conf": [
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "caplog": [
                    "str",
                    "List[str]",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_start_no_data": {
            "name": "test_start_no_data",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "hyperopt_conf": [
                    "pathlib.Path",
                    "Dict[str, Any]"
                ],
                "tmpdir": []
            }
        },
        "test_start_filelock": {
            "name": "test_start_filelock",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.e2e.Helper"
                ],
                "hyperopt_conf": [
                    "unittesmock.MagicMock"
                ],
                "caplog": []
            }
        },
        "test_log_results_if_loss_improves": {
            "name": "test_log_results_if_loss_improves",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "hyperopt": [],
                "capsys": [
                    "int"
                ]
            }
        },
        "test_no_log_if_loss_does_not_improve": {
            "name": "test_no_log_if_loss_does_not_improve",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "hyperopt": [
                    "Dict[str, Any]",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "caplog": [
                    "tests.async_mock.Mock",
                    "dict"
                ]
            }
        },
        "test_roi_table_generation": {
            "name": "test_roi_table_generation",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "hyperopt": [
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "test_params_no_optimize_details": {
            "name": "test_params_no_optimize_details",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "hyperopt": [
                    "str"
                ]
            }
        },
        "test_start_calls_optimizer": {
            "name": "test_start_calls_optimizer",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "hyperopt_conf": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "capsys": [
                    "int",
                    "Dict[scripts.node_integration_tests.playbooks.test_config_base.NodeId, pathlib.Path]",
                    "BaseException"
                ]
            }
        },
        "test_hyperopt_format_results": {
            "name": "test_hyperopt_format_results",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "hyperopt": [
                    "datetime.date.time",
                    "pandas.Series",
                    "str"
                ]
            }
        },
        "test_populate_indicators": {
            "name": "test_populate_indicators",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "hyperopt": [
                    "int",
                    "str",
                    "pathlib.Path"
                ],
                "testdatadir": []
            }
        },
        "test_generate_optimizer": {
            "name": "test_generate_optimizer",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "pathlib.Path",
                    "tests.async_mock.MagicMock"
                ],
                "hyperopt_conf": [
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_clean_hyperopt": {
            "name": "test_clean_hyperopt",
            "location": 516,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "hyperopt_conf": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "caplog": [
                    "str"
                ]
            }
        },
        "test_print_json_spaces_all": {
            "name": "test_print_json_spaces_all",
            "location": 529,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "hyperopt_conf": [
                    "unittesmock.MagicMock"
                ],
                "capsys": [
                    "int"
                ]
            }
        },
        "test_print_json_spaces_default": {
            "name": "test_print_json_spaces_default",
            "location": 580,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "hyperopt_conf": [
                    "unittesmock.MagicMock"
                ],
                "capsys": [
                    "int"
                ]
            }
        },
        "test_print_json_spaces_roi_stoploss": {
            "name": "test_print_json_spaces_roi_stoploss",
            "location": 622,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "hyperopt_conf": [],
                "capsys": [
                    "int",
                    "Dict[scripts.node_integration_tests.playbooks.test_config_base.NodeId, pathlib.Path]",
                    "BaseException"
                ]
            }
        },
        "test_simplified_interface_roi_stoploss": {
            "name": "test_simplified_interface_roi_stoploss",
            "location": 663,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "hyperopt_conf": [
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "capsys": [
                    "int",
                    "Dict[scripts.node_integration_tests.playbooks.test_config_base.NodeId, pathlib.Path]",
                    "BaseException"
                ]
            }
        },
        "test_simplified_interface_all_failed": {
            "name": "test_simplified_interface_all_failed",
            "location": 705,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "hyperopt_conf": [
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "caplog": [
                    "str"
                ]
            }
        },
        "test_simplified_interface_buy": {
            "name": "test_simplified_interface_buy",
            "location": 736,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "hyperopt_conf": [
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "capsys": [
                    "int",
                    "Dict[scripts.node_integration_tests.playbooks.test_config_base.NodeId, pathlib.Path]",
                    "BaseException"
                ]
            }
        },
        "test_simplified_interface_sell": {
            "name": "test_simplified_interface_sell",
            "location": 778,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "hyperopt_conf": [
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "capsys": [
                    "int",
                    "Dict[scripts.node_integration_tests.playbooks.test_config_base.NodeId, pathlib.Path]",
                    "BaseException"
                ]
            }
        },
        "test_simplified_interface_failed": {
            "name": "test_simplified_interface_failed",
            "location": 825,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "hyperopt_conf": [
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "space": [
                    "bool",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "test_in_strategy_auto_hyperopt": {
            "name": "test_in_strategy_auto_hyperopt",
            "location": 849,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "bool",
                    "str",
                    "Iterable[Any]",
                    "Dict[str, float]"
                ],
                "hyperopt_conf": [
                    "pathlib.Path",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "tmpdir": [
                    "pathlib.Path",
                    "Callable"
                ],
                "fee": [
                    "bool",
                    "str",
                    "Iterable[Any]",
                    "Dict[str, float]"
                ]
            }
        },
        "test_SKDecimal": {
            "name": "test_SKDecimal",
            "location": 886,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "freqtrade-develop/tests/optimize/test_hyperoptloss.py": {
        "test_hyperoptlossresolver_noname": {
            "name": "test_hyperoptlossresolver_noname",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": []
            }
        },
        "test_hyperoptlossresolver": {
            "name": "test_hyperoptlossresolver",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "int",
                    "float",
                    "Callable"
                ]
            }
        },
        "test_hyperoptlossresolver_wrongname": {
            "name": "test_hyperoptlossresolver_wrongname",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Dict[str, Tuple[str, str]]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "test_loss_calculation_prefer_correct_trade_count": {
            "name": "test_loss_calculation_prefer_correct_trade_count",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "hyperopt_conf": [
                    "List[Dict[str, Any]]"
                ],
                "hyperopt_results": [
                    "datetime.date.time",
                    "datetime.datetime",
                    "Optional[str]"
                ]
            }
        },
        "test_loss_calculation_prefer_shorter_trades": {
            "name": "test_loss_calculation_prefer_shorter_trades",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "hyperopt_conf": [
                    "List[Dict[str, Any]]"
                ],
                "hyperopt_results": [
                    "datetime.date.time"
                ]
            }
        },
        "test_loss_calculation_has_limited_profit": {
            "name": "test_loss_calculation_has_limited_profit",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "hyperopt_conf": [
                    "List[Dict[str, Any]]"
                ],
                "hyperopt_results": [
                    "str",
                    "Callable[[Any, Any], Any]"
                ]
            }
        },
        "test_loss_functions_better_profits": {
            "name": "test_loss_functions_better_profits",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "List[Dict[str, Any]]"
                ],
                "hyperopt_results": [
                    "Callable[[Any, Any], Any]",
                    "str"
                ],
                "lossfunction": [
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, str]",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "dict",
                    "Dict[str, Tuple[str, str]]"
                ]
            }
        }
    },
    "freqtrade-develop/tests/optimize/test_hyperopt_tools.py": {
        "create_results": {
            "name": "create_results",
            "location": 17,
            "return": [
                "List[dict[Text,Union[int,Text,dict]]]",
                "bool",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "test_save_results_saves_epochs": {
            "name": "test_save_results_saves_epochs",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "hyperopt": [
                    "pathlib.Path",
                    "dict"
                ],
                "tmpdir": [
                    "pathlib.Path",
                    "str"
                ],
                "caplog": [
                    "logging.Logger"
                ]
            }
        },
        "test_load_previous_results2": {
            "name": "test_load_previous_results2",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "testdatadir": [],
                "caplog": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_has_space": {
            "name": "test_has_space",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "hyperopt_conf": [
                    "Optional[Dict]",
                    "numpy.ndarray",
                    "List[Dict[str, Any]]"
                ],
                "spaces": [
                    "numpy.ndarray"
                ],
                "expected_results": [
                    "str",
                    "int",
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]",
                    "Callable[[], str]"
                ]
            }
        },
        "test_show_epoch_details": {
            "name": "test_show_epoch_details",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "test__pprint_dict": {
            "name": "test__pprint_dict",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_strategy_filename": {
            "name": "test_get_strategy_filename",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": []
            }
        },
        "test_export_params": {
            "name": "test_export_params",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "Callable",
                    "pathlib.Path"
                ]
            }
        },
        "test_try_export_params": {
            "name": "test_try_export_params",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "tmpdir": [],
                "caplog": [
                    "dict",
                    "Exception",
                    "List[str]"
                ],
                "mocker": [
                    "int"
                ]
            }
        },
        "test_params_print": {
            "name": "test_params_print",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "test_hyperopt_serializer": {
            "name": "test_hyperopt_serializer",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "freqtrade-develop/tests/optimize/test_optimize_reports.py": {
        "test_text_table_bt_results": {
            "name": "test_text_table_bt_results",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_generate_backtest_stats": {
            "name": "test_generate_backtest_stats",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Dict[str, Tuple[str, str]]",
                    "bytes",
                    "dict"
                ],
                "testdatadir": [
                    "dict",
                    "Callable"
                ],
                "tmpdir": [
                    "str",
                    "List[pathlib.Path]",
                    "bool"
                ]
            }
        },
        "test_store_backtest_stats": {
            "name": "test_store_backtest_stats",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "testdatadir": [
                    "dict",
                    "pathlib.Path"
                ],
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_store_backtest_candles": {
            "name": "test_store_backtest_candles",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "testdatadir": [
                    "pathlib.Path"
                ],
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_write_read_backtest_candles": {
            "name": "test_write_read_backtest_candles",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path",
                    "bytes",
                    "taskiinfrastructure.data.json.repositories.project_repository.JsonProjectRepository"
                ]
            }
        },
        "test_generate_pair_metrics": {
            "name": "test_generate_pair_metrics",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_generate_daily_stats": {
            "name": "test_generate_daily_stats",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "testdatadir": [
                    "pathlib.Path",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_generate_trading_stats": {
            "name": "test_generate_trading_stats",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "testdatadir": [
                    "pathlib.Path",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_text_table_exit_reason": {
            "name": "test_text_table_exit_reason",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_generate_sell_reason_stats": {
            "name": "test_generate_sell_reason_stats",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_text_table_strategy": {
            "name": "test_text_table_strategy",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {
                "testdatadir": [
                    "tests.basilisp.helpers.CompileFn",
                    "pathlib.Path"
                ]
            }
        },
        "test_generate_edge_table": {
            "name": "test_generate_edge_table",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_generate_periodic_breakdown_stats": {
            "name": "test_generate_periodic_breakdown_stats",
            "location": 430,
            "return": [
                "None"
            ],
            "arguments": {
                "testdatadir": [
                    "pathlib.Path",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test__get_resample_from_period": {
            "name": "test__get_resample_from_period",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_show_sorted_pairlist": {
            "name": "test_show_sorted_pairlist",
            "location": 458,
            "return": [
                "None"
            ],
            "arguments": {
                "testdatadir": [
                    "str",
                    "bool"
                ],
                "default_conf": [
                    "str",
                    "pathlib.Path"
                ],
                "capsys": [
                    "float",
                    "bool"
                ]
            }
        }
    },
    "freqtrade-develop/tests/optimize/__init__.py": {
        "_get_frame_time_from_offset": {
            "name": "_get_frame_time_from_offset",
            "location": 47,
            "return": [
                "str",
                "Tuple[str, str]",
                "Union[dict, list]",
                "dict"
            ],
            "arguments": {
                "offset": [
                    "int",
                    "str"
                ]
            }
        },
        "_build_backtest_dataframe": {
            "name": "_build_backtest_dataframe",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "data": [
                    "Dict[str, Any]",
                    "dict",
                    "List[List[Any]]",
                    "pandas.DataFrame",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "freqtrade-develop/tests/plugins/test_pairlist.py": {
        "whitelist_conf": {
            "name": "whitelist_conf",
            "location": 23,
            "return": [
                "list",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "default_conf": [
                    "bytes",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "whitelist_conf_2": {
            "name": "whitelist_conf_2",
            "location": 47,
            "return": [
                "list",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "default_conf": [
                    "bytes",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "whitelist_conf_agefilter": {
            "name": "whitelist_conf_agefilter",
            "location": 69,
            "return": [
                "list",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "default_conf": [
                    "bytes",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "static_pl_conf": {
            "name": "static_pl_conf",
            "location": 95,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "whitelist_conf": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_log_cached": {
            "name": "test_log_cached",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "static_pl_conf": [],
                "markets": [
                    "unittesmock.MagicMock"
                ],
                "tickers": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_load_pairlist_noexist": {
            "name": "test_load_pairlist_noexist",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "markets": [
                    "unittesmock.MagicMock",
                    "tests.async_mock.MagicMock",
                    "mock.MagicMock"
                ],
                "default_conf": []
            }
        },
        "test_load_pairlist_verify_multi": {
            "name": "test_load_pairlist_verify_multi",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "markets_static": [
                    "unittesmock.MagicMock",
                    "tests.async_mock.MagicMock",
                    "mock.MagicMock"
                ],
                "default_conf": []
            }
        },
        "test_refresh_market_pair_not_in_whitelist": {
            "name": "test_refresh_market_pair_not_in_whitelist",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "markets": [
                    "unittesmock.MagicMock",
                    "tests.async_mock.Mock",
                    "mock.MagicMock",
                    "tests.async_mock.MagicMock"
                ],
                "static_pl_conf": []
            }
        },
        "test_refresh_static_pairlist": {
            "name": "test_refresh_static_pairlist",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str"
                ],
                "markets": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "static_pl_conf": []
            }
        },
        "test_refresh_static_pairlist_noexist": {
            "name": "test_refresh_static_pairlist_noexist",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "str",
                    "int"
                ],
                "markets": [
                    "str",
                    "unittesmock.MagicMock"
                ],
                "static_pl_conf": [
                    "Union[str, List[str], Tuple[str, ...]]",
                    "str",
                    "IO"
                ],
                "pairs": [
                    "str",
                    "Union[str, float]",
                    "int",
                    "bool",
                    "List[int]"
                ],
                "expected": [
                    "Tuple[int, int]",
                    "int",
                    "Callable",
                    "List[str]",
                    "bool",
                    "str"
                ],
                "caplog": [
                    "str",
                    "Optional[float]",
                    "bool"
                ]
            }
        },
        "test_invalid_blacklist": {
            "name": "test_invalid_blacklist",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str"
                ],
                "markets": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "static_pl_conf": [],
                "caplog": [
                    "str"
                ]
            }
        },
        "test_remove_logs_for_pairs_already_in_blacklist": {
            "name": "test_remove_logs_for_pairs_already_in_blacklist",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.async_mock.MagicMock"
                ],
                "markets": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "static_pl_conf": [],
                "caplog": [
                    "logging.Logger",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_refresh_pairlist_dynamic": {
            "name": "test_refresh_pairlist_dynamic",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "shitcoinmarkets": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "tickers": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "whitelist_conf": []
            }
        },
        "test_refresh_pairlist_dynamic_2": {
            "name": "test_refresh_pairlist_dynamic_2",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "shitcoinmarkets": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "tickers": [
                    "tests.basilisp.helpers.CompileFn",
                    "Dict[str, Any]"
                ],
                "whitelist_conf_2": [
                    "str"
                ]
            }
        },
        "test_VolumePairList_refresh_empty": {
            "name": "test_VolumePairList_refresh_empty",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "markets_empty": [
                    "tests.async_mock.Mock",
                    "tests.async_mock.MagicMock",
                    "unittesmock.MagicMock"
                ],
                "whitelist_conf": [
                    "str"
                ]
            }
        },
        "test_VolumePairList_whitelist_gen": {
            "name": "test_VolumePairList_whitelist_gen",
            "location": 488,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "whitelist_conf": [
                    "float",
                    "bool"
                ],
                "shitcoinmarkets": [
                    "tests.async_mock.Mock",
                    "unittesmock.MagicMock"
                ],
                "tickers": [
                    "tests.async_mock.Mock",
                    "unittesmock.MagicMock"
                ],
                "ohlcv_history": [
                    "int",
                    "bool"
                ],
                "pairlists": [
                    "str",
                    "int",
                    "List[int]",
                    "bool"
                ],
                "base_currency": [
                    "bool",
                    "str",
                    "int",
                    "raiden.tests.integration.fixtures.raiden_network.RestartNode",
                    "unittesmock.MagicMock"
                ],
                "whitelist_result": [
                    "Iterable[Any]"
                ],
                "caplog": [
                    "Optional[logging.Logger]",
                    "logging.Logger",
                    "Collection[str]",
                    "bool"
                ]
            }
        },
        "test_VolumePairList_range": {
            "name": "test_VolumePairList_range",
            "location": 603,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.async_mock.Mock"
                ],
                "whitelist_conf": [
                    "float"
                ],
                "shitcoinmarkets": [
                    "tests.async_mock.Mock",
                    "unittesmock.MagicMock"
                ],
                "tickers": [
                    "tests.async_mock.Mock",
                    "unittesmock.MagicMock"
                ],
                "ohlcv_history": [
                    "bool",
                    "str"
                ],
                "pairlists": [
                    "str"
                ],
                "base_currency": [
                    "bool",
                    "str",
                    "int",
                    "raiden.tests.integration.fixtures.raiden_network.RestartNode",
                    "Dict[str, Sequence[Any]]"
                ],
                "exchange": [
                    "str"
                ],
                "volumefilter_result": [
                    "str"
                ]
            }
        },
        "test_PrecisionFilter_error": {
            "name": "test_PrecisionFilter_error",
            "location": 682,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "whitelist_conf": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_PerformanceFilter_error": {
            "name": "test_PerformanceFilter_error",
            "location": 693,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "whitelist_conf": [
                    "int"
                ],
                "caplog": []
            }
        },
        "test_ShuffleFilter_init": {
            "name": "test_ShuffleFilter_init",
            "location": 705,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str"
                ],
                "whitelist_conf": [],
                "caplog": []
            }
        },
        "test_PerformanceFilter_lookback": {
            "name": "test_PerformanceFilter_lookback",
            "location": 722,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "default_conf_usdt": [],
                "fee": [
                    "Dict[str, Sequence[str]]"
                ],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "Optional[float]"
                ]
            }
        },
        "test_PerformanceFilter_keep_mid_order": {
            "name": "test_PerformanceFilter_keep_mid_order",
            "location": 748,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "int"
                ],
                "default_conf_usdt": [
                    "Dict[str, str]",
                    "str",
                    "dict"
                ],
                "fee": [
                    "Dict[str, Sequence[str]]"
                ],
                "caplog": [
                    "int",
                    "List[str]",
                    "List[Tuple[str, Any]]",
                    "Literal",
                    "Callable[..., None]",
                    "Callable[[int, int], None]"
                ]
            }
        },
        "test_gen_pair_whitelist_not_supported": {
            "name": "test_gen_pair_whitelist_not_supported",
            "location": 776,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ],
                "tickers": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_pair_whitelist_not_supported_Spread": {
            "name": "test_pair_whitelist_not_supported_Spread",
            "location": 789,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ],
                "tickers": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_pairlist_class": {
            "name": "test_pairlist_class",
            "location": 803,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "whitelist_conf": [
                    "str"
                ],
                "markets": [
                    "unittesmock.MagicMock"
                ],
                "pairlist": [
                    "tests.basilisp.helpers.CompileFn",
                    "Set[int]"
                ]
            }
        },
        "test__whitelist_for_active_markets": {
            "name": "test__whitelist_for_active_markets",
            "location": 831,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "whitelist_conf": [
                    "Union[Tuple[int], Tuple[int, int]]"
                ],
                "markets": [
                    "unittesmock.MagicMock"
                ],
                "pairlist": [
                    "bool",
                    "str"
                ],
                "whitelist": [
                    "pandas.Series",
                    "bool"
                ],
                "caplog": [
                    "List[float]",
                    "bool",
                    "float",
                    "int"
                ],
                "log_message": [
                    "tests.fixtures.cloud_uploader.Uploader",
                    "str"
                ],
                "tickers": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test__whitelist_for_active_markets_empty": {
            "name": "test__whitelist_for_active_markets_empty",
            "location": 851,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "whitelist_conf": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "pairlist": [
                    "Type",
                    "str",
                    "cli_ui.tests.MessageRecorder",
                    "int",
                    "tests.conftesWorker"
                ],
                "tickers": [
                    "tests.setup.SetupTest"
                ]
            }
        },
        "test_volumepairlist_invalid_sortvalue": {
            "name": "test_volumepairlist_invalid_sortvalue",
            "location": 867,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "whitelist_conf": [
                    "tests.e2e.Helper"
                ]
            }
        },
        "test_volumepairlist_caching": {
            "name": "test_volumepairlist_caching",
            "location": 876,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "markets": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "whitelist_conf": [
                    "str"
                ],
                "tickers": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_agefilter_min_days_listed_too_small": {
            "name": "test_agefilter_min_days_listed_too_small",
            "location": 894,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "bool",
                    "str"
                ],
                "markets": [],
                "tickers": []
            }
        },
        "test_agefilter_max_days_lower_than_min_days": {
            "name": "test_agefilter_max_days_lower_than_min_days",
            "location": 909,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "str",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int"
                ],
                "markets": [],
                "tickers": []
            }
        },
        "test_agefilter_min_days_listed_too_large": {
            "name": "test_agefilter_min_days_listed_too_large",
            "location": 925,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "bool",
                    "str"
                ],
                "markets": [],
                "tickers": []
            }
        },
        "test_agefilter_caching": {
            "name": "test_agefilter_caching",
            "location": 941,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "markets": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "whitelist_conf_agefilter": [
                    "str"
                ],
                "tickers": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "ohlcv_history": []
            }
        },
        "test_OffsetFilter_error": {
            "name": "test_OffsetFilter_error",
            "location": 1001,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "whitelist_conf": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_rangestabilityfilter_checks": {
            "name": "test_rangestabilityfilter_checks",
            "location": 1013,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "bool"
                ],
                "markets": [],
                "tickers": []
            }
        },
        "test_rangestabilityfilter_caching": {
            "name": "test_rangestabilityfilter_caching",
            "location": 1040,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "markets": [],
                "default_conf": [
                    "bool",
                    "int",
                    "Optional[Set[str]]",
                    "List[Dict[str, str]]",
                    "float"
                ],
                "tickers": [],
                "ohlcv_history": [],
                "min_rate_of_change": [
                    "int",
                    "Optional[int]",
                    "bool",
                    "Optional[Union[int, float]]"
                ],
                "max_rate_of_change": [
                    "int",
                    "Optional[int]",
                    "bool",
                    "Optional[Union[int, float]]"
                ],
                "expected_length": [
                    "Union[int, slice]",
                    "bool",
                    "float"
                ]
            }
        },
        "test_spreadfilter_invalid_data": {
            "name": "test_spreadfilter_invalid_data",
            "location": 1078,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "str",
                    "int"
                ],
                "markets": [],
                "tickers": [
                    "unittesmock.MagicMock"
                ],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "Optional[float]"
                ]
            }
        },
        "test_pricefilter_desc": {
            "name": "test_pricefilter_desc",
            "location": 1164,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "whitelist_conf": [
                    "Optional[recidiviz.common.constants.state.state_incarceration_period.StateIncarcerationPeriodAdmissionReason]"
                ],
                "markets": [],
                "pairlistconfig": [
                    "str",
                    "Union[str, float]",
                    "bool",
                    "int"
                ],
                "desc_expected": [
                    "Optional[float]",
                    "Sequence[Callable]",
                    "Optional[int]",
                    "bool",
                    "float",
                    "int",
                    "Optional[str]"
                ],
                "exception_expected": [
                    "str",
                    "bytes",
                    "dict"
                ]
            }
        },
        "test_pairlistmanager_no_pairlist": {
            "name": "test_pairlistmanager_no_pairlist",
            "location": 1182,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "whitelist_conf": []
            }
        },
        "test_performance_filter": {
            "name": "test_performance_filter",
            "location": 1229,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "whitelist_conf": [
                    "bool",
                    "str",
                    "int"
                ],
                "pairlists": [
                    "bool",
                    "str",
                    "int"
                ],
                "pair_allowlist": [
                    "bool",
                    "str",
                    "int"
                ],
                "overall_performance": [
                    "tests.async_mock.Mock"
                ],
                "allowlist_result": [
                    "bool",
                    "str",
                    "int"
                ],
                "tickers": [
                    "tests.async_mock.Mock"
                ],
                "markets": [
                    "tests.async_mock.Mock"
                ],
                "ohlcv_history_list": [
                    "tests.async_mock.Mock"
                ]
            }
        },
        "test_expand_pairlist": {
            "name": "test_expand_pairlist",
            "location": 1279,
            "return": [
                "None"
            ],
            "arguments": {
                "wildcardlist": [
                    "int",
                    "str",
                    "float",
                    "logging.LogRecord"
                ],
                "pairs": [
                    "int",
                    "str",
                    "float",
                    "logging.LogRecord"
                ],
                "expected": [
                    "bool",
                    "Optional[Type[Exception]]",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Optional[\"Game\"]"
                ]
            }
        },
        "test_expand_pairlist_keep_invalid": {
            "name": "test_expand_pairlist_keep_invalid",
            "location": 1315,
            "return": [
                "None"
            ],
            "arguments": {
                "wildcardlist": [
                    "str",
                    "set",
                    "Optional[str]"
                ],
                "pairs": [
                    "str",
                    "set",
                    "Optional[str]"
                ],
                "expected": [
                    "bool",
                    "Optional[Type[Exception]]",
                    "Optional[\"Game\"]",
                    "Optional[str]"
                ]
            }
        }
    },
    "freqtrade-develop/tests/plugins/test_pairlocks.py": {
        "test_PairLocks": {
            "name": "test_PairLocks",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "use_db": [
                    "Dict[str, Any]",
                    "tuple",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "test_PairLocks_getlongestlock": {
            "name": "test_PairLocks_getlongestlock",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "use_db": [
                    "Dict[str, Any]",
                    "tuple",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "test_PairLocks_reason": {
            "name": "test_PairLocks_reason",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "use_db": [
                    "Dict[str, Any]",
                    "tuple",
                    "List[Tuple[int, int]]"
                ]
            }
        }
    },
    "freqtrade-develop/tests/plugins/test_protections.py": {
        "generate_mock_trade": {
            "name": "generate_mock_trade",
            "location": 13,
            "return": [
                "Trade",
                "Callable[[bytes],None]",
                "float",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "pair": [
                    "int",
                    "Optional[float]"
                ],
                "fee": [
                    "int",
                    "Optional[float]"
                ],
                "is_open": [
                    "int",
                    "Optional[float]"
                ],
                "exit_reason": [
                    "int",
                    "bool",
                    "List[str]"
                ],
                "min_ago_open": [
                    "None",
                    "int",
                    "Optional[float]"
                ],
                "min_ago_close": [
                    "None",
                    "int",
                    "Optional[float]"
                ],
                "profit_rate": [
                    "float",
                    "bool",
                    "Dict[str,Any]"
                ],
                "is_short": [
                    "bool",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "test_protectionmanager": {
            "name": "test_protectionmanager",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable"
                ],
                "default_conf": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_protections_init": {
            "name": "test_protections_init",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "bool"
                ],
                "timeframe": [
                    "int",
                    "bytes",
                    "float",
                    "bool"
                ],
                "expected": [
                    "BaseException",
                    "Exception",
                    "freqtrade.data.history.idatahandler.IDataHandler"
                ],
                "protconf": [
                    "bytes",
                    "bool"
                ]
            }
        },
        "test_stoploss_guard": {
            "name": "test_stoploss_guard",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "bool",
                    "str"
                ],
                "default_conf": [
                    "bool",
                    "str"
                ],
                "fee": [
                    "Dict[int, dict]"
                ],
                "caplog": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Sequence[str]"
                ],
                "is_short": [
                    "Dict[int, dict]"
                ]
            }
        },
        "test_stoploss_guard_perpair": {
            "name": "test_stoploss_guard_perpair",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable"
                ],
                "default_conf": [
                    "str",
                    "bool"
                ],
                "fee": [
                    "Dict[str, Any]",
                    "Dict[int, dict]"
                ],
                "caplog": [
                    "str",
                    "raiden.constants.Environment",
                    "Optional[Union[str, Any]]",
                    "List[str]",
                    "Callable[[str], None]",
                    "FrozenSet[str]"
                ],
                "only_per_pair": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ],
                "only_per_side": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_CooldownPeriod": {
            "name": "test_CooldownPeriod",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable"
                ],
                "default_conf": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable"
                ],
                "fee": [
                    "recidiviz.persistence.database.session.Session"
                ],
                "caplog": [
                    "str",
                    "int"
                ]
            }
        },
        "test_LowProfitPairs": {
            "name": "test_LowProfitPairs",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable"
                ],
                "default_conf": [
                    "int",
                    "bool"
                ],
                "fee": [
                    "recidiviz.persistence.database.session.Session"
                ],
                "caplog": [
                    "str",
                    "int"
                ],
                "only_per_side": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ]
            }
        },
        "test_MaxDrawdown": {
            "name": "test_MaxDrawdown",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable"
                ],
                "default_conf": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable"
                ],
                "fee": [
                    "recidiviz.persistence.database.session.Session"
                ],
                "caplog": [
                    "List[Dict[str, float]]"
                ]
            }
        },
        "test_protection_manager_desc": {
            "name": "test_protection_manager_desc",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "str"
                ],
                "default_conf": [
                    "str",
                    "Callable"
                ],
                "protectionconf": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "desc_expected": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "exception_expected": [
                    "Callable[..., None]",
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "freqtrade-develop/tests/plugins/__init__.py": {},
    "freqtrade-develop/tests/rpc/test_fiat_convert.py": {
        "test_fiat_convert_is_supported": {
            "name": "test_fiat_convert_is_supported",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_fiat_convert_find_price": {
            "name": "test_fiat_convert_find_price",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_fiat_convert_unsupported_crypto": {
            "name": "test_fiat_convert_unsupported_crypto",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "caplog": []
            }
        },
        "test_fiat_convert_get_price": {
            "name": "test_fiat_convert_get_price",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_fiat_convert_same_currencies": {
            "name": "test_fiat_convert_same_currencies",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.basilisp.helpers.CompileFn",
                    "tests.setup.SetupTest",
                    "cli_ui.tests.MessageRecorder"
                ]
            }
        },
        "test_fiat_convert_two_FIAT": {
            "name": "test_fiat_convert_two_FIAT",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.basilisp.helpers.CompileFn",
                    "tests.setup.SetupTest",
                    "cli_ui.tests.MessageRecorder"
                ]
            }
        },
        "test_loadcryptomap": {
            "name": "test_loadcryptomap",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_fiat_init_network_exception": {
            "name": "test_fiat_init_network_exception",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_fiat_convert_without_network": {
            "name": "test_fiat_convert_without_network",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.basilisp.helpers.CompileFn",
                    "tests.setup.SetupTest",
                    "cli_ui.tests.MessageRecorder"
                ]
            }
        },
        "test_fiat_too_many_requests_response": {
            "name": "test_fiat_too_many_requests_response",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "caplog": []
            }
        },
        "test_fiat_multiple_coins": {
            "name": "test_fiat_multiple_coins",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "caplog": [
                    "str"
                ]
            }
        },
        "test_fiat_invalid_response": {
            "name": "test_fiat_invalid_response",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "caplog": []
            }
        },
        "test_convert_amount": {
            "name": "test_convert_amount",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        }
    },
    "freqtrade-develop/tests/rpc/test_rpc.py": {
        "prec_satoshi": {
            "name": "prec_satoshi",
            "location": 22,
            "return": [
                "bool",
                "int",
                "bytes",
                "bytearray",
                "str"
            ],
            "arguments": {
                "a": [
                    "str",
                    "Iterable",
                    "Iterable[str]",
                    "Sequence[T]",
                    "bool",
                    "numpy.ndarray"
                ],
                "b": [
                    "str",
                    "Iterable",
                    "Iterable[str]",
                    "Sequence[T]",
                    "bool",
                    "numpy.ndarray"
                ]
            }
        },
        "test_rpc_trade_status": {
            "name": "test_rpc_trade_status",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "str"
                ],
                "ticker": [
                    "str",
                    "bool"
                ],
                "fee": [
                    "NamedTuple",
                    "int",
                    "float"
                ],
                "mocker": []
            }
        },
        "test_rpc_status_table": {
            "name": "test_rpc_status_table",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]",
                    "int"
                ],
                "ticker": [
                    "str",
                    "bool"
                ],
                "fee": [
                    "str",
                    "bool"
                ],
                "mocker": []
            }
        },
        "test__rpc_timeunit_profit": {
            "name": "test__rpc_timeunit_profit",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "int"
                ],
                "ticker": [
                    "tests.hints.CompositionCall"
                ],
                "fee": [
                    "tests.hints.CompositionCall"
                ],
                "limit_buy_order": [
                    "List[str]",
                    "Set[str]",
                    "str",
                    "List[bool]",
                    "bool"
                ],
                "limit_sell_order": [
                    "List[str]",
                    "Set[str]",
                    "str",
                    "List[bool]",
                    "bool"
                ],
                "markets": [
                    "tests.hints.CompositionCall"
                ],
                "mocker": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_rpc_trade_history": {
            "name": "test_rpc_trade_history",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "bool"
                ],
                "default_conf": [
                    "bool",
                    "str"
                ],
                "markets": [
                    "unittesmock.MagicMock"
                ],
                "fee": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "is_short": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_rpc_delete_trade": {
            "name": "test_rpc_delete_trade",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "bool"
                ],
                "default_conf": [
                    "str"
                ],
                "fee": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "markets": [
                    "unittesmock.MagicMock"
                ],
                "caplog": [
                    "bool",
                    "List[str]",
                    "List[Tuple[str, Any]]",
                    "int"
                ],
                "is_short": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_rpc_trade_statistics": {
            "name": "test_rpc_trade_statistics",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "int"
                ],
                "ticker": [
                    "str"
                ],
                "fee": [],
                "mocker": [
                    "mock.MagicMock"
                ]
            }
        },
        "test_rpc_trade_statistics_closed": {
            "name": "test_rpc_trade_statistics_closed",
            "location": 464,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.async_mock.Mock",
                    "tests.async_mock.MagicMock"
                ],
                "default_conf_usdt": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable"
                ],
                "ticker": [
                    "bool"
                ],
                "fee": []
            }
        },
        "test_rpc_balance_handle_error": {
            "name": "test_rpc_balance_handle_error",
            "location": 502,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "str"
                ],
                "mocker": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_rpc_balance_handle": {
            "name": "test_rpc_balance_handle",
            "location": 537,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [
                    "mock.MagicMock",
                    "unittesmock.MagicMock"
                ],
                "tickers": []
            }
        },
        "test_rpc_start": {
            "name": "test_rpc_start",
            "location": 661,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "str"
                ]
            }
        },
        "test_rpc_stop": {
            "name": "test_rpc_stop",
            "location": 682,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "bool"
                ],
                "default_conf": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "test_rpc_stopbuy": {
            "name": "test_rpc_stopbuy",
            "location": 704,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "bool"
                ],
                "default_conf": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "test_rpc_force_exit": {
            "name": "test_rpc_force_exit",
            "location": 722,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int"
                ],
                "ticker": [],
                "fee": [],
                "mocker": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_performance_handle": {
            "name": "test_performance_handle",
            "location": 851,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "int"
                ],
                "ticker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "fee": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "mocker": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_enter_tag_performance_handle": {
            "name": "test_enter_tag_performance_handle",
            "location": 873,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "str"
                ],
                "ticker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "fee": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "mocker": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_enter_tag_performance_handle_2": {
            "name": "test_enter_tag_performance_handle_2",
            "location": 906,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "str",
                    "Callable",
                    "int",
                    "Optional[str]"
                ],
                "markets": [],
                "fee": [
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "test_exit_reason_performance_handle": {
            "name": "test_exit_reason_performance_handle",
            "location": 935,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [
                    "int"
                ],
                "ticker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "fee": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "mocker": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_exit_reason_performance_handle_2": {
            "name": "test_exit_reason_performance_handle_2",
            "location": 962,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "bool"
                ],
                "default_conf": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable"
                ],
                "markets": [],
                "fee": [
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "test_mix_tag_performance_handle": {
            "name": "test_mix_tag_performance_handle",
            "location": 991,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "str"
                ],
                "ticker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "fee": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "mocker": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_mix_tag_performance_handle_2": {
            "name": "test_mix_tag_performance_handle_2",
            "location": 1015,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "str",
                    "Callable",
                    "int",
                    "Optional[str]"
                ],
                "markets": [],
                "fee": [
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "test_rpc_count": {
            "name": "test_rpc_count",
            "location": 1045,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable"
                ],
                "ticker": [
                    "unittesmock.MagicMock",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "fee": [
                    "unittesmock.MagicMock",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_rpc_force_entry": {
            "name": "test_rpc_force_entry",
            "location": 1067,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "bool",
                    "str"
                ],
                "default_conf": [
                    "bool",
                    "Optional[\"Game\"]",
                    "str",
                    "float"
                ],
                "ticker": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "fee": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "limit_buy_order_open": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_rpc_force_entry_stopped": {
            "name": "test_rpc_force_entry_stopped",
            "location": 1119,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "Optional[\"Game\"]",
                    "Optional[int]",
                    "float",
                    "str"
                ]
            }
        },
        "test_rpc_force_entry_disabled": {
            "name": "test_rpc_force_entry_disabled",
            "location": 1132,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "test_rpc_force_entry_wrong_mode": {
            "name": "test_rpc_force_entry_wrong_mode",
            "location": 1143,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "str",
                    "Optional[\"Game\"]",
                    "bool"
                ]
            }
        },
        "test_rpc_delete_lock": {
            "name": "test_rpc_delete_lock",
            "location": 1156,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int"
                ],
                "default_conf": [
                    "str",
                    "int"
                ]
            }
        },
        "test_rpc_whitelist": {
            "name": "test_rpc_whitelist",
            "location": 1173,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "str",
                    "Optional[str]",
                    "IO[str]",
                    "int"
                ]
            }
        },
        "test_rpc_whitelist_dynamic": {
            "name": "test_rpc_whitelist_dynamic",
            "location": 1184,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "str",
                    "bool"
                ],
                "default_conf": [
                    "str",
                    "Optional[str]",
                    "IO[str]",
                    "int"
                ]
            }
        },
        "test_rpc_blacklist": {
            "name": "test_rpc_blacklist",
            "location": 1200,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "str",
                    "Callable"
                ]
            }
        },
        "test_rpc_edge_disabled": {
            "name": "test_rpc_edge_disabled",
            "location": 1253,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "test_rpc_edge_enabled": {
            "name": "test_rpc_edge_enabled",
            "location": 1261,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "edge_conf": [
                    "str"
                ]
            }
        },
        "test_rpc_health": {
            "name": "test_rpc_health",
            "location": 1280,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable"
                ]
            }
        }
    },
    "freqtrade-develop/tests/rpc/test_rpc_apiserver.py": {
        "botclient": {
            "name": "botclient",
            "location": 37,
            "return": [
                "typing.Generator[tuple[TestClient]]"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "pandas.DataFrame",
                    "bytearray",
                    "float"
                ],
                "mocker": [
                    "int",
                    "list",
                    "bool"
                ]
            }
        },
        "client_post": {
            "name": "client_post",
            "location": 61,
            "return": [],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient",
                    "dict"
                ],
                "url": [
                    "fastapi.testclienTestClient",
                    "dict"
                ],
                "data": [
                    "Dict",
                    "fastapi.testclienTestClient"
                ]
            }
        },
        "client_get": {
            "name": "client_get",
            "location": 70,
            "return": [
                "str",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "client": [
                    "str",
                    "fastapi.FastAPI"
                ],
                "url": [
                    "str",
                    "fastapi.FastAPI"
                ]
            }
        },
        "client_delete": {
            "name": "client_delete",
            "location": 76,
            "return": [
                "tracim.models.auth.User",
                "dict"
            ],
            "arguments": {
                "client": [
                    "str",
                    "fastapi.FastAPI",
                    "bool",
                    "dict",
                    "int",
                    "list"
                ],
                "url": [
                    "str",
                    "fastapi.FastAPI",
                    "bool",
                    "dict",
                    "int",
                    "list"
                ]
            }
        },
        "assert_response": {
            "name": "assert_response",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "bytes",
                    "dict",
                    "Optional[str]"
                ],
                "expected_code": [
                    "int",
                    "Tuple",
                    "Dict",
                    "List[int]",
                    "bytes",
                    "Optional[Dict[str,Any]]"
                ],
                "needs_cors": [
                    "bool",
                    "Dict",
                    "AbstractSet[int]",
                    "float",
                    "AbstractSet[str]"
                ]
            }
        },
        "test_api_not_found": {
            "name": "test_api_not_found",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_api_ui_fallback": {
            "name": "test_api_ui_fallback",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mocker": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_api_ui_version": {
            "name": "test_api_ui_version",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mocker": []
            }
        },
        "test_api_auth": {
            "name": "test_api_auth",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_api_unauthorized": {
            "name": "test_api_unauthorized",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_api_token_login": {
            "name": "test_api_token_login",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_api_token_refresh": {
            "name": "test_api_token_refresh",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_api_stop_workflow": {
            "name": "test_api_stop_workflow",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_api__init__": {
            "name": "test_api__init__",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_api_UvicornServer": {
            "name": "test_api_UvicornServer",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "unittesmock.MagicMock",
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_api_UvicornServer_run": {
            "name": "test_api_UvicornServer_run",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_api_UvicornServer_run_no_uvloop": {
            "name": "test_api_UvicornServer_run_no_uvloop",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "import_fails": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_api_run": {
            "name": "test_api_run",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "caplog": [
                    "Exception",
                    "str",
                    "Collection[str]",
                    "bool"
                ]
            }
        },
        "test_api_cleanup": {
            "name": "test_api_cleanup",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "caplog": [
                    "dict",
                    "Exception",
                    "List[str]"
                ]
            }
        },
        "test_api_reloadconf": {
            "name": "test_api_reloadconf",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_api_stopbuy": {
            "name": "test_api_stopbuy",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_api_balance": {
            "name": "test_api_balance",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [],
                "mocker": [
                    "tests.async_mock.Mock",
                    "unittesmock.MagicMock",
                    "tests.async_mock.MagicMock"
                ],
                "rpc_balance": [
                    "tests.async_mock.Mock",
                    "unittesmock.MagicMock",
                    "tests.async_mock.MagicMock"
                ],
                "tickers": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_api_count": {
            "name": "test_api_count",
            "location": 466,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "str"
                ],
                "mocker": [
                    "unittesmock.MagicMock",
                    "Iterable"
                ],
                "ticker": [
                    "unittesmock.MagicMock",
                    "Iterable"
                ],
                "fee": [
                    "unittesmock.MagicMock",
                    "Iterable"
                ],
                "markets": [
                    "unittesmock.MagicMock",
                    "Iterable"
                ],
                "is_short": [
                    "tests.basilisp.helpers.CompileFn",
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "test_api_locks": {
            "name": "test_api_locks",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_api_show_config": {
            "name": "test_api_show_config",
            "location": 528,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_api_daily": {
            "name": "test_api_daily",
            "location": 553,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mocker": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "ticker": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "fee": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "markets": [
                    "unittesmock.MagicMock",
                    "str"
                ]
            }
        },
        "test_api_trades": {
            "name": "test_api_trades",
            "location": 572,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "raiden.network.rpc.clienJSONRPCClient"
                ],
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "fee": [
                    "tests.basilisp.helpers.CompileFn",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "markets": [
                    "unittesmock.MagicMock"
                ],
                "is_short": []
            }
        },
        "test_api_trade_single": {
            "name": "test_api_trade_single",
            "location": 603,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "str"
                ],
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "fee": [
                    "tests.basilisp.helpers.CompileFn",
                    "Dict[str, Sequence[str]]"
                ],
                "ticker": [
                    "unittesmock.MagicMock"
                ],
                "markets": [
                    "unittesmock.MagicMock"
                ],
                "is_short": []
            }
        },
        "test_api_delete_trade": {
            "name": "test_api_delete_trade",
            "location": 625,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "raiden.network.rpc.clienJSONRPCClient"
                ],
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "fee": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "markets": [
                    "unittesmock.MagicMock"
                ],
                "is_short": []
            }
        },
        "test_api_logs": {
            "name": "test_api_logs",
            "location": 669,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_api_edge_disabled": {
            "name": "test_api_edge_disabled",
            "location": 701,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mocker": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "ticker": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "fee": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "markets": [
                    "unittesmock.MagicMock",
                    "str"
                ]
            }
        },
        "test_api_profit": {
            "name": "test_api_profit",
            "location": 763,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "str"
                ],
                "mocker": [
                    "unittesmock.MagicMock",
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "ticker": [
                    "unittesmock.MagicMock",
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "fee": [
                    "unittesmock.MagicMock",
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "markets": [
                    "unittesmock.MagicMock",
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "is_short": [
                    "tests.basilisp.helpers.CompileFn",
                    "Dict[str, Sequence[str]]"
                ],
                "expected": [
                    "int",
                    "Exception",
                    "str"
                ]
            }
        },
        "test_api_stats": {
            "name": "test_api_stats",
            "location": 821,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "str"
                ],
                "mocker": [
                    "unittesmock.MagicMock",
                    "Iterable"
                ],
                "ticker": [
                    "unittesmock.MagicMock",
                    "Iterable"
                ],
                "fee": [
                    "unittesmock.MagicMock",
                    "Iterable"
                ],
                "markets": [
                    "unittesmock.MagicMock",
                    "Iterable"
                ],
                "is_short": []
            }
        },
        "test_api_performance": {
            "name": "test_api_performance",
            "location": 849,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "fee": []
            }
        },
        "test_api_status": {
            "name": "test_api_status",
            "location": 901,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "str"
                ],
                "mocker": [
                    "unittesmock.MagicMock",
                    "Iterable"
                ],
                "ticker": [
                    "unittesmock.MagicMock",
                    "Iterable"
                ],
                "fee": [
                    "unittesmock.MagicMock",
                    "Iterable"
                ],
                "markets": [
                    "unittesmock.MagicMock",
                    "Iterable"
                ],
                "is_short": [
                    "Sequence[Union[int, float]]",
                    "Tuple[int, int]",
                    "int"
                ],
                "current_rate": [
                    "bool",
                    "Callable",
                    "Optional[\"Game\"]"
                ],
                "open_order_id": [
                    "bool",
                    "Callable",
                    "Optional[\"Game\"]"
                ],
                "open_trade_value": [
                    "bool",
                    "Callable",
                    "Optional[\"Game\"]"
                ]
            }
        },
        "test_api_version": {
            "name": "test_api_version",
            "location": 1002,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_api_blacklist": {
            "name": "test_api_blacklist",
            "location": 1010,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mocker": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_api_whitelist": {
            "name": "test_api_whitelist",
            "location": 1077,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_api_force_entry": {
            "name": "test_api_force_entry",
            "location": 1093,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mocker": [
                    "Dict[str, Any]"
                ],
                "fee": [
                    "unittesmock.MagicMock",
                    "str",
                    "Dict[str, Any]"
                ],
                "endpoint": [
                    "str"
                ]
            }
        },
        "test_api_forceexit": {
            "name": "test_api_forceexit",
            "location": 1197,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mocker": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "ticker": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "fee": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "markets": [
                    "unittesmock.MagicMock",
                    "str"
                ]
            }
        },
        "test_api_pair_candles": {
            "name": "test_api_pair_candles",
            "location": 1223,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "ohlcv_history": []
            }
        },
        "test_api_pair_history": {
            "name": "test_api_pair_history",
            "location": 1314,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "ohlcv_history": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_api_plot_config": {
            "name": "test_api_plot_config",
            "location": 1367,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_api_strategies": {
            "name": "test_api_strategies",
            "location": 1392,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_api_strategy": {
            "name": "test_api_strategy",
            "location": 1409,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_list_available_pairs": {
            "name": "test_list_available_pairs",
            "location": 1424,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_sysinfo": {
            "name": "test_sysinfo",
            "location": 1464,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_api_backtesting": {
            "name": "test_api_backtesting",
            "location": 1474,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mocker": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "fee": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "caplog": [],
                "tmpdir": [
                    "str",
                    "pathlib.Path",
                    "bytes",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_api_backtest_history": {
            "name": "test_api_backtest_history",
            "location": 1597,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mocker": [
                    "tests.async_mock.Mock",
                    "tests.async_mock.MagicMock"
                ],
                "testdatadir": [
                    "tests.async_mock.MagicMock",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_health": {
            "name": "test_health",
            "location": 1629,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        }
    },
    "freqtrade-develop/tests/rpc/test_rpc_manager.py": {
        "test__init__": {
            "name": "test__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "logging.Logger"
                ],
                "default_conf": [
                    "tests.setup.SetupTest"
                ]
            }
        },
        "test_init_telegram_disabled": {
            "name": "test_init_telegram_disabled",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "logging.Logger"
                ],
                "default_conf": [
                    "tests.setup.SetupTest"
                ],
                "caplog": [
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "logging.LogRecord"
                ]
            }
        },
        "test_init_telegram_enabled": {
            "name": "test_init_telegram_enabled",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "logging.Logger"
                ],
                "caplog": [
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "logging.LogRecord"
                ]
            }
        },
        "test_cleanup_telegram_disabled": {
            "name": "test_cleanup_telegram_disabled",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "mock.Mock",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "default_conf": [
                    "int"
                ],
                "caplog": [
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "logging.LogRecord"
                ]
            }
        },
        "test_cleanup_telegram_enabled": {
            "name": "test_cleanup_telegram_enabled",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "bool",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "default_conf": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable"
                ],
                "caplog": [
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "logging.LogRecord"
                ]
            }
        },
        "test_send_msg_telegram_disabled": {
            "name": "test_send_msg_telegram_disabled",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "mock.Mock",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "default_conf": [
                    "int"
                ],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "Optional[float]"
                ]
            }
        },
        "test_send_msg_telegram_enabled": {
            "name": "test_send_msg_telegram_enabled",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "mock.Mock",
                    "unittesmock.MagicMock",
                    "mock.MagicMock"
                ],
                "default_conf": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable"
                ],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "Optional[float]"
                ]
            }
        },
        "test_init_webhook_disabled": {
            "name": "test_init_webhook_disabled",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "logging.Logger"
                ],
                "default_conf": [],
                "caplog": [
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "logging.LogRecord"
                ]
            }
        },
        "test_init_webhook_enabled": {
            "name": "test_init_webhook_enabled",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "logging.Logger"
                ],
                "default_conf": [
                    "tests.setup.SetupTest",
                    "Dict[str, str]"
                ],
                "caplog": [
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "logging.LogRecord"
                ]
            }
        },
        "test_send_msg_webhook_CustomMessagetype": {
            "name": "test_send_msg_webhook_CustomMessagetype",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "bool",
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "tests.setup.SetupTest",
                    "Dict[str, str]"
                ],
                "caplog": [
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "logging.LogRecord"
                ]
            }
        },
        "test_startupmessages_telegram_enabled": {
            "name": "test_startupmessages_telegram_enabled",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "mock.Mock"
                ],
                "default_conf": [
                    "str",
                    "bool"
                ],
                "caplog": [
                    "bool",
                    "int",
                    "str",
                    "Callable[..., None]"
                ]
            }
        },
        "test_init_apiserver_disabled": {
            "name": "test_init_apiserver_disabled",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "tests.setup.SetupTest"
                ],
                "caplog": [
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "logging.LogRecord"
                ]
            }
        },
        "test_init_apiserver_enabled": {
            "name": "test_init_apiserver_enabled",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "tests.setup.SetupTest",
                    "Dict[str, str]"
                ],
                "caplog": [
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "logging.LogRecord"
                ]
            }
        }
    },
    "freqtrade-develop/tests/rpc/test_rpc_telegram.py": {
        "get_telegram_testobject": {
            "name": "get_telegram_testobject",
            "location": 62,
            "return": [
                "tuple[typing.Union[Telegram,None,MagicMock]]"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [],
                "mock": [
                    "bool"
                ],
                "ftbot": [
                    "None"
                ]
            }
        },
        "test_telegram__init__": {
            "name": "test_telegram__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": []
            }
        },
        "test_telegram_init": {
            "name": "test_telegram_init",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [],
                "caplog": []
            }
        },
        "test_cleanup": {
            "name": "test_cleanup",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": []
            }
        },
        "test_authorized_only": {
            "name": "test_authorized_only",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [],
                "caplog": [],
                "update": []
            }
        },
        "test_authorized_only_unauthorized": {
            "name": "test_authorized_only_unauthorized",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [],
                "caplog": []
            }
        },
        "test_authorized_only_exception": {
            "name": "test_authorized_only_exception",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [],
                "caplog": [],
                "update": []
            }
        },
        "test_telegram_status": {
            "name": "test_telegram_status",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": []
            }
        },
        "test_telegram_status_multi_entry": {
            "name": "test_telegram_status_multi_entry",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": [],
                "fee": []
            }
        },
        "test_telegram_status_closed_trade": {
            "name": "test_telegram_status_closed_trade",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": [],
                "fee": []
            }
        },
        "test_status_handle": {
            "name": "test_status_handle",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "ticker": [],
                "fee": [],
                "mocker": []
            }
        },
        "test_status_table_handle": {
            "name": "test_status_table_handle",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "ticker": [],
                "fee": [],
                "mocker": []
            }
        },
        "test_daily_handle": {
            "name": "test_daily_handle",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [],
                "update": [],
                "ticker": [],
                "fee": [],
                "mocker": [],
                "time_machine": []
            }
        },
        "test_daily_wrong_input": {
            "name": "test_daily_wrong_input",
            "location": 467,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "ticker": [],
                "mocker": []
            }
        },
        "test_weekly_handle": {
            "name": "test_weekly_handle",
            "location": 496,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [],
                "update": [],
                "ticker": [],
                "fee": [],
                "mocker": [],
                "time_machine": []
            }
        },
        "test_monthly_handle": {
            "name": "test_monthly_handle",
            "location": 566,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [],
                "update": [],
                "ticker": [],
                "fee": [],
                "mocker": [],
                "time_machine": []
            }
        },
        "test_profit_handle": {
            "name": "test_profit_handle",
            "location": 650,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [],
                "update": [],
                "ticker_usdt": [],
                "ticker_sell_up": [],
                "fee": [],
                "limit_sell_order_usdt": [],
                "mocker": []
            }
        },
        "test_telegram_stats": {
            "name": "test_telegram_stats",
            "location": 713,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "ticker": [],
                "fee": [],
                "mocker": [],
                "is_short": []
            }
        },
        "test_telegram_balance_handle": {
            "name": "test_telegram_balance_handle",
            "location": 739,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": [],
                "rpc_balance": [],
                "tickers": []
            }
        },
        "test_balance_handle_empty_response": {
            "name": "test_balance_handle_empty_response",
            "location": 765,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": []
            }
        },
        "test_balance_handle_empty_response_dry": {
            "name": "test_balance_handle_empty_response_dry",
            "location": 779,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": []
            }
        },
        "test_balance_handle_too_large_response": {
            "name": "test_balance_handle_too_large_response",
            "location": 792,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": []
            }
        },
        "test_start_handle": {
            "name": "test_start_handle",
            "location": 829,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": []
            }
        },
        "test_start_handle_already_running": {
            "name": "test_start_handle_already_running",
            "location": 840,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": []
            }
        },
        "test_stop_handle": {
            "name": "test_stop_handle",
            "location": 852,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": []
            }
        },
        "test_stop_handle_already_stopped": {
            "name": "test_stop_handle_already_stopped",
            "location": 864,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": []
            }
        },
        "test_stopbuy_handle": {
            "name": "test_stopbuy_handle",
            "location": 876,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": []
            }
        },
        "test_reload_config_handle": {
            "name": "test_reload_config_handle",
            "location": 888,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": []
            }
        },
        "test_telegram_forceexit_handle": {
            "name": "test_telegram_forceexit_handle",
            "location": 900,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "ticker": [],
                "fee": [],
                "ticker_sell_up": [],
                "mocker": []
            }
        },
        "test_telegram_force_exit_down_handle": {
            "name": "test_telegram_force_exit_down_handle",
            "location": 963,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "ticker": [],
                "fee": [],
                "ticker_sell_down": [],
                "mocker": []
            }
        },
        "test_forceexit_all_handle": {
            "name": "test_forceexit_all_handle",
            "location": 1032,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "ticker": [],
                "fee": [],
                "mocker": []
            }
        },
        "test_forceexit_handle_invalid": {
            "name": "test_forceexit_handle_invalid",
            "location": 1091,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": []
            }
        },
        "test_force_exit_no_pair": {
            "name": "test_force_exit_no_pair",
            "location": 1118,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "ticker": [],
                "fee": [],
                "mocker": []
            }
        },
        "test_force_enter_handle": {
            "name": "test_force_enter_handle",
            "location": 1171,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": []
            }
        },
        "test_force_enter_handle_exception": {
            "name": "test_force_enter_handle_exception",
            "location": 1204,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": []
            }
        },
        "test_force_enter_no_pair": {
            "name": "test_force_enter_no_pair",
            "location": 1217,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": []
            }
        },
        "test_telegram_performance_handle": {
            "name": "test_telegram_performance_handle",
            "location": 1245,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [],
                "update": [],
                "ticker": [],
                "fee": [],
                "mocker": []
            }
        },
        "test_telegram_entry_tag_performance_handle": {
            "name": "test_telegram_entry_tag_performance_handle",
            "location": 1263,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [],
                "update": [],
                "ticker": [],
                "fee": [],
                "mocker": []
            }
        },
        "test_telegram_exit_reason_performance_handle": {
            "name": "test_telegram_exit_reason_performance_handle",
            "location": 1294,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [],
                "update": [],
                "ticker": [],
                "fee": [],
                "mocker": []
            }
        },
        "test_telegram_mix_tag_performance_handle": {
            "name": "test_telegram_mix_tag_performance_handle",
            "location": 1325,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf_usdt": [],
                "update": [],
                "ticker": [],
                "fee": [],
                "mocker": []
            }
        },
        "test_count_handle": {
            "name": "test_count_handle",
            "location": 1358,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "ticker": [],
                "fee": [],
                "mocker": []
            }
        },
        "test_telegram_lock_handle": {
            "name": "test_telegram_lock_handle",
            "location": 1387,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "ticker": [],
                "fee": [],
                "mocker": []
            }
        },
        "test_whitelist_static": {
            "name": "test_whitelist_static",
            "location": 1425,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": []
            }
        },
        "test_whitelist_dynamic": {
            "name": "test_whitelist_dynamic",
            "location": 1435,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": []
            }
        },
        "test_blacklist_static": {
            "name": "test_blacklist_static",
            "location": 1448,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": []
            }
        },
        "test_telegram_logs": {
            "name": "test_telegram_logs",
            "location": 1486,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": []
            }
        },
        "test_edge_disabled": {
            "name": "test_edge_disabled",
            "location": 1517,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": []
            }
        },
        "test_edge_enabled": {
            "name": "test_edge_enabled",
            "location": 1526,
            "return": [
                "None"
            ],
            "arguments": {
                "edge_conf": [],
                "update": [],
                "mocker": []
            }
        },
        "test_telegram_trades": {
            "name": "test_telegram_trades",
            "location": 1553,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "update": [],
                "default_conf": [],
                "fee": [],
                "is_short": [],
                "regex_pattern": []
            }
        },
        "test_telegram_delete_trade": {
            "name": "test_telegram_delete_trade",
            "location": 1585,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "update": [],
                "default_conf": [],
                "fee": [],
                "is_short": []
            }
        },
        "test_help_handle": {
            "name": "test_help_handle",
            "location": 1605,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": []
            }
        },
        "test_version_handle": {
            "name": "test_version_handle",
            "location": 1613,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": []
            }
        },
        "test_show_config_handle": {
            "name": "test_show_config_handle",
            "location": 1630,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": []
            }
        },
        "test_send_msg_buy_notification": {
            "name": "test_send_msg_buy_notification",
            "location": 1658,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [],
                "caplog": [],
                "message_type": [],
                "enter": [],
                "enter_signal": [],
                "leverage": []
            }
        },
        "test_send_msg_buy_cancel_notification": {
            "name": "test_send_msg_buy_cancel_notification",
            "location": 1713,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [],
                "message_type": [],
                "enter_signal": []
            }
        },
        "test_send_msg_protection_notification": {
            "name": "test_send_msg_protection_notification",
            "location": 1730,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [],
                "time_machine": []
            }
        },
        "test_send_msg_entry_fill_notification": {
            "name": "test_send_msg_entry_fill_notification",
            "location": 1763,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [],
                "message_type": [],
                "entered": [],
                "enter_signal": [],
                "leverage": []
            }
        },
        "test_send_msg_sell_notification": {
            "name": "test_send_msg_sell_notification",
            "location": 1796,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": []
            }
        },
        "test_send_msg_sell_cancel_notification": {
            "name": "test_send_msg_sell_cancel_notification",
            "location": 1874,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": []
            }
        },
        "test_send_msg_sell_fill_notification": {
            "name": "test_send_msg_sell_fill_notification",
            "location": 1912,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [],
                "direction": [],
                "enter_signal": [],
                "leverage": []
            }
        },
        "test_send_msg_status_notification": {
            "name": "test_send_msg_status_notification",
            "location": 1955,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": []
            }
        },
        "test_warning_notification": {
            "name": "test_warning_notification",
            "location": 1965,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": []
            }
        },
        "test_startup_notification": {
            "name": "test_startup_notification",
            "location": 1974,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": []
            }
        },
        "test_send_msg_unknown_type": {
            "name": "test_send_msg_unknown_type",
            "location": 1983,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": []
            }
        },
        "test_send_msg_buy_notification_no_fiat": {
            "name": "test_send_msg_buy_notification_no_fiat",
            "location": 1995,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [],
                "message_type": [],
                "enter": [],
                "enter_signal": [],
                "leverage": []
            }
        },
        "test_send_msg_sell_notification_no_fiat": {
            "name": "test_send_msg_sell_notification_no_fiat",
            "location": 2038,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [],
                "direction": [],
                "enter_signal": [],
                "leverage": []
            }
        },
        "test__sell_emoji": {
            "name": "test__sell_emoji",
            "location": 2091,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [],
                "msg": [],
                "expected": []
            }
        },
        "test_telegram__send_msg": {
            "name": "test_telegram__send_msg",
            "location": 2099,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [],
                "caplog": []
            }
        },
        "test__send_msg_network_error": {
            "name": "test__send_msg_network_error",
            "location": 2133,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [],
                "caplog": []
            }
        },
        "test__send_msg_keyboard": {
            "name": "test__send_msg_keyboard",
            "location": 2149,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [],
                "caplog": []
            }
        },
        "DummyCls.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rpc": [],
                "config": []
            }
        },
        "DummyCls._init": {
            "name": "_init",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyCls.dummy_handler": {
            "name": "dummy_handler",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyCls.dummy_exception": {
            "name": "dummy_exception",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test__send_msg_keyboard.init_telegram": {
            "name": "init_telegram",
            "location": 2166,
            "return": [
                "Telegram"
            ],
            "arguments": {
                "freqtradebot": []
            }
        }
    },
    "freqtrade-develop/tests/rpc/test_rpc_webhook.py": {
        "get_webhook_dict": {
            "name": "get_webhook_dict",
            "location": 16,
            "return": [
                "bool",
                "Dict[Text,Union[bool,Text,dict[Text,Text]]]"
            ],
            "arguments": {}
        },
        "test__init__": {
            "name": "test__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "bool",
                    "TextIO",
                    "str"
                ],
                "default_conf": [
                    "Optional[int]",
                    "bool",
                    "Callable[..., None]",
                    "int"
                ]
            }
        },
        "test_send_msg_webhook": {
            "name": "test_send_msg_webhook",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": []
            }
        },
        "test_exception_send_msg": {
            "name": "test_exception_send_msg",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [
                    "float"
                ],
                "caplog": [
                    "str",
                    "int",
                    "Exception"
                ]
            }
        },
        "test__send_msg": {
            "name": "test__send_msg",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [],
                "caplog": [
                    "dict",
                    "Exception",
                    "List[str]"
                ]
            }
        },
        "test__send_msg_with_json_format": {
            "name": "test__send_msg_with_json_format",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [
                    "str",
                    "int",
                    "bool"
                ],
                "caplog": [
                    "str",
                    "bool",
                    "List[bool]"
                ]
            }
        },
        "test__send_msg_with_raw_format": {
            "name": "test__send_msg_with_raw_format",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [
                    "str",
                    "int",
                    "bool"
                ],
                "caplog": [
                    "str",
                    "bool",
                    "List[bool]"
                ]
            }
        },
        "test_send_msg_discord": {
            "name": "test_send_msg_discord",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "float"
                ],
                "mocker": []
            }
        }
    },
    "freqtrade-develop/tests/rpc/__init__.py": {},
    "freqtrade-develop/tests/strategy/test_default_strategy.py": {
        "test_strategy_test_v3_structure": {
            "name": "test_strategy_test_v3_structure",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_strategy_test_v3": {
            "name": "test_strategy_test_v3",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "result": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "fee": [
                    "int"
                ],
                "is_short": [
                    "int"
                ],
                "side": [
                    "Optional[Union[float, str]]",
                    "Dict[str, Any]",
                    "zerver.models.UserProfile",
                    "int"
                ]
            }
        }
    },
    "freqtrade-develop/tests/strategy/test_interface.py": {
        "test_returns_latest_signal": {
            "name": "test_returns_latest_signal",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "ohlcv_history": [
                    "bool",
                    "str",
                    "Iterable[Any]",
                    "int"
                ]
            }
        },
        "test_analyze_pair_empty": {
            "name": "test_analyze_pair_empty",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "List[str]",
                    "Set[str]",
                    "str",
                    "List[bool]",
                    "bool"
                ],
                "mocker": [],
                "caplog": [
                    "dict",
                    "Exception",
                    "List[str]"
                ],
                "ohlcv_history": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_get_signal_empty": {
            "name": "test_get_signal_empty",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "dict"
                ],
                "caplog": [
                    "logging.Logger",
                    "Dict[str, Any]",
                    "List[recidiviz.persistence.database.schema.state.schema.StatePerson]",
                    "BaseException",
                    "Exception",
                    "str",
                    "werkzeug.exceptions.InternalServerError"
                ]
            }
        },
        "test_get_signal_exception_valueerror": {
            "name": "test_get_signal_exception_valueerror",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "caplog": [
                    "logging.Logger",
                    "Optional[logging.Logger]"
                ],
                "ohlcv_history": []
            }
        },
        "test_get_signal_old_dataframe": {
            "name": "test_get_signal_old_dataframe",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "Optional[Type[Exception]]",
                    "Callable"
                ],
                "mocker": [
                    "type",
                    "Tuple[str, Any]"
                ],
                "caplog": [
                    "List[Dict[str, float]]",
                    "logging.LogRecord",
                    "logging.Logger",
                    "Collection[str]",
                    "bool",
                    "str"
                ],
                "ohlcv_history": [
                    "int",
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_get_signal_no_sell_column": {
            "name": "test_get_signal_no_sell_column",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Optional[\"Game\"]",
                    "int",
                    "float"
                ],
                "mocker": [
                    "type",
                    "Tuple[str, Any]"
                ],
                "caplog": [
                    "logging.Logger",
                    "List[Dict[str, float]]",
                    "Optional[Mapping[str, Any]]"
                ],
                "ohlcv_history": [
                    "int",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "str"
                ]
            }
        },
        "test_ignore_expired_candle": {
            "name": "test_ignore_expired_candle",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": []
            }
        },
        "test_assert_df_raise": {
            "name": "test_assert_df_raise",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "caplog": [
                    "logging.Logger",
                    "Optional[logging.Logger]"
                ],
                "ohlcv_history": [
                    "str"
                ]
            }
        },
        "test_assert_df": {
            "name": "test_assert_df",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "ohlcv_history": [
                    "int"
                ],
                "caplog": [
                    "logging.LogRecord",
                    "str",
                    "int"
                ]
            }
        },
        "test_advise_all_indicators": {
            "name": "test_advise_all_indicators",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "bool"
                ],
                "testdatadir": [
                    "Callable"
                ]
            }
        },
        "test_advise_all_indicators_copy": {
            "name": "test_advise_all_indicators_copy",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.LeftAccumulatorCall"
                ],
                "default_conf": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.LeftAccumulatorCall"
                ],
                "testdatadir": []
            }
        },
        "test_min_roi_reached": {
            "name": "test_min_roi_reached",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "fee": [
                    "pandas.DataFrame",
                    "List[recidiviz.persistence.database.schema.state.schema.StateIncarcerationPeriod]",
                    "str",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]"
                ]
            }
        },
        "test_min_roi_reached2": {
            "name": "test_min_roi_reached2",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "fee": [
                    "pandas.DataFrame",
                    "List[recidiviz.persistence.database.schema.state.schema.StateIncarcerationPeriod]",
                    "str",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]"
                ]
            }
        },
        "test_min_roi_reached3": {
            "name": "test_min_roi_reached3",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "fee": [
                    "pandas.DataFrame",
                    "List[recidiviz.persistence.database.schema.state.schema.StateIncarcerationPeriod]",
                    "str",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]"
                ]
            }
        },
        "test_stop_loss_reached": {
            "name": "test_stop_loss_reached",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "tests.hints.CleavageCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.LeftAccumulatorCall"
                ],
                "fee": [
                    "pandas.DataFrame",
                    "Optional[datetime.datetime]",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]"
                ],
                "profit": [
                    "int",
                    "str"
                ],
                "adjusted": [
                    "tests.hints.CleavageCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.LeftAccumulatorCall"
                ],
                "expected": [
                    "Callable",
                    "Optional[int]",
                    "List[str]"
                ],
                "trailing": [
                    "tests.hints.CleavageCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.LeftAccumulatorCall"
                ],
                "custom": [
                    "Type",
                    "Dict[str, Any]"
                ],
                "profit2": [
                    "int",
                    "str"
                ],
                "adjusted2": [
                    "tests.hints.CleavageCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.LeftAccumulatorCall"
                ],
                "expected2": [
                    "Callable",
                    "Optional[int]",
                    "List[str]"
                ],
                "custom_stop": [
                    "bool",
                    "dict",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_custom_exit": {
            "name": "test_custom_exit",
            "location": 481,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "fee": [
                    "pandas.DataFrame",
                    "List[recidiviz.persistence.database.schema.state.schema.StateIncarcerationPeriod]",
                    "str",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]"
                ],
                "caplog": [
                    "int",
                    "bool",
                    "float",
                    "Collection[str]"
                ]
            }
        },
        "test_should_sell": {
            "name": "test_should_sell",
            "location": 530,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "fee": [
                    "pandas.DataFrame",
                    "List[recidiviz.persistence.database.schema.state.schema.StateIncarcerationPeriod]",
                    "str",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]"
                ]
            }
        },
        "test_leverage_callback": {
            "name": "test_leverage_callback",
            "location": 608,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "Iterable[str]"
                ],
                "side": [
                    "Callable",
                    "float"
                ]
            }
        },
        "test_analyze_ticker_default": {
            "name": "test_analyze_ticker_default",
            "location": 635,
            "return": [
                "None"
            ],
            "arguments": {
                "ohlcv_history": [],
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "caplog": [
                    "logging.StreamHandler",
                    "logging.Logger",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test__analyze_ticker_internal_skip_analyze": {
            "name": "test__analyze_ticker_internal_skip_analyze",
            "location": 666,
            "return": [
                "None"
            ],
            "arguments": {
                "ohlcv_history": [
                    "Sequence[Any]",
                    "Iterable[Any]"
                ],
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "caplog": [
                    "logging.Logger",
                    "Optional[logging.Logger]"
                ]
            }
        },
        "test_is_pair_locked": {
            "name": "test_is_pair_locked",
            "location": 709,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "dict",
                    "Sequence",
                    "bool",
                    "type"
                ]
            }
        },
        "test_is_informative_pairs_callback": {
            "name": "test_is_informative_pairs_callback",
            "location": 768,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "bool",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "test_strategy_safe_wrapper_error": {
            "name": "test_strategy_safe_wrapper_error",
            "location": 779,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "str",
                    "Exception",
                    "logging.Logger",
                    "dict"
                ],
                "error": [
                    "Type[Any]",
                    "bool",
                    "Type",
                    "bytes",
                    "Union[str, pathlib.Path]",
                    "Dict[str, bool]"
                ]
            }
        },
        "test_strategy_safe_wrapper": {
            "name": "test_strategy_safe_wrapper",
            "location": 805,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "Union[str, int]",
                    "Callable",
                    "dict"
                ]
            }
        },
        "test_strategy_safe_wrapper_trade_copy": {
            "name": "test_strategy_safe_wrapper_trade_copy",
            "location": 817,
            "return": [
                "None"
            ],
            "arguments": {
                "fee": [
                    "Dict[str, Sequence[str]]",
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_hyperopt_parameters": {
            "name": "test_hyperopt_parameters",
            "location": 838,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_auto_hyperopt_interface": {
            "name": "test_auto_hyperopt_interface",
            "location": 918,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Dict[str, Tuple[str, str]]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "test_auto_hyperopt_interface_loadparams": {
            "name": "test_auto_hyperopt_interface_loadparams",
            "location": 951,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Dict[str, Tuple[str, str]]",
                    "Dict[str, Any]",
                    "dict"
                ],
                "mocker": [],
                "caplog": [
                    "dict",
                    "Exception",
                    "List[str]"
                ]
            }
        },
        "test_strategy_safe_wrapper_error.failing_method": {
            "name": "failing_method",
            "location": 780,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_strategy_safe_wrapper_error.working_method": {
            "name": "working_method",
            "location": 783,
            "return": [],
            "arguments": {
                "argumentpassedin": []
            }
        },
        "test_strategy_safe_wrapper.working_method": {
            "name": "working_method",
            "location": 807,
            "return": [],
            "arguments": {
                "argumentpassedin": []
            }
        },
        "test_strategy_safe_wrapper_trade_copy.working_method": {
            "name": "working_method",
            "location": 820,
            "return": [
                "int",
                "str",
                "float",
                "Union[int, float]"
            ],
            "arguments": {
                "trade": [
                    "str",
                    "int",
                    "float"
                ]
            }
        }
    },
    "freqtrade-develop/tests/strategy/test_strategy_helpers.py": {
        "generate_test_data": {
            "name": "generate_test_data",
            "location": 15,
            "return": [
                "int",
                "str",
                "Tuple[int, int, int, int]"
            ],
            "arguments": {
                "timeframe": [
                    "int",
                    "dict",
                    "bool",
                    "str",
                    "List[int]",
                    "Optional[\"Node\"]"
                ],
                "size": [
                    "int"
                ],
                "start": [
                    "Text",
                    "int",
                    "float",
                    "bool",
                    "numpy.ndarray"
                ]
            }
        },
        "test_merge_informative_pair": {
            "name": "test_merge_informative_pair",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_merge_informative_pair_same": {
            "name": "test_merge_informative_pair_same",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_merge_informative_pair_lower": {
            "name": "test_merge_informative_pair_lower",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_stoploss_from_open": {
            "name": "test_stoploss_from_open",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_stoploss_from_absolute": {
            "name": "test_stoploss_from_absolute",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_informative_decorator": {
            "name": "test_informative_decorator",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "default_conf_usdt": [
                    "str",
                    "bool",
                    "List[Tuple[str, Any]]",
                    "List[str]"
                ],
                "trading_mode": [
                    "str",
                    "bool",
                    "List[Tuple[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "test_informative_decorator.test_historic_ohlcv": {
            "name": "test_historic_ohlcv",
            "location": 236,
            "return": [],
            "arguments": {
                "pair": [
                    "pandas.DataFrame",
                    "str"
                ],
                "timeframe": [
                    "pandas.DataFrame",
                    "str"
                ],
                "candle_type": [
                    "pandas.DataFrame",
                    "str"
                ]
            }
        }
    },
    "freqtrade-develop/tests/strategy/test_strategy_loading.py": {
        "test_search_strategy": {
            "name": "test_search_strategy",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_search_all_strategies_no_failed": {
            "name": "test_search_all_strategies_no_failed",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_search_all_strategies_with_failed": {
            "name": "test_search_all_strategies_with_failed",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_strategy": {
            "name": "test_load_strategy",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Optional[str]",
                    "str",
                    "pathlib.Path",
                    "Callable",
                    "pypi2nix.path.Path"
                ],
                "result": [
                    "bool"
                ]
            }
        },
        "test_load_strategy_base64": {
            "name": "test_load_strategy_base64",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "result": [
                    "raiden.tests.integration.fixtures.raiden_network.RestartNode",
                    "List[int]",
                    "int",
                    "Union[str, float]",
                    "bool"
                ],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "List[str]",
                    "Optional[float]"
                ],
                "default_conf": [
                    "str",
                    "bool",
                    "tests.clienMDMClient"
                ]
            }
        },
        "test_load_strategy_invalid_directory": {
            "name": "test_load_strategy_invalid_directory",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "result": [
                    "bool",
                    "str",
                    "int",
                    "List[str]"
                ],
                "caplog": [
                    "str",
                    "Optional[float]",
                    "float"
                ],
                "default_conf": [
                    "str",
                    "int",
                    "Optional[Callable[..., Any]]"
                ]
            }
        },
        "test_load_not_found_strategy": {
            "name": "test_load_not_found_strategy",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int"
                ]
            }
        },
        "test_load_strategy_noname": {
            "name": "test_load_strategy_noname",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightAccumulatorCall"
                ]
            }
        },
        "test_strategy_pre_v3": {
            "name": "test_strategy_pre_v3",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "result": [
                    "int",
                    "str",
                    "pandas.DataFrame",
                    "List[str]",
                    "List[int]"
                ],
                "default_conf": [
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict",
                    "Optional[Dict]",
                    "Dict[str, type]"
                ],
                "strategy_name": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_strategy_can_short": {
            "name": "test_strategy_can_short",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "logging.Logger",
                    "List[Dict[str, float]]",
                    "Optional[logging.Logger]"
                ],
                "default_conf": [
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "test_strategy_override_minimal_roi": {
            "name": "test_strategy_override_minimal_roi",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "logging.Logger",
                    "logging.LogRecord",
                    "Optional[logging.Logger]",
                    "List[Dict[str, float]]"
                ],
                "default_conf": [
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "test_strategy_override_stoploss": {
            "name": "test_strategy_override_stoploss",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "logging.Logger",
                    "logging.LogRecord",
                    "Optional[logging.Logger]",
                    "List[Dict[str, float]]"
                ],
                "default_conf": [
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "test_strategy_override_trailing_stop": {
            "name": "test_strategy_override_trailing_stop",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "logging.Logger",
                    "logging.LogRecord",
                    "Optional[logging.Logger]",
                    "List[Dict[str, float]]"
                ],
                "default_conf": [
                    "str"
                ]
            }
        },
        "test_strategy_override_trailing_stop_positive": {
            "name": "test_strategy_override_trailing_stop_positive",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "logging.Logger",
                    "logging.LogRecord",
                    "Optional[logging.Logger]"
                ],
                "default_conf": [
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "test_strategy_override_timeframe": {
            "name": "test_strategy_override_timeframe",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "logging.Logger",
                    "logging.LogRecord",
                    "Optional[logging.Logger]",
                    "List[Dict[str, float]]"
                ],
                "default_conf": [
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "test_strategy_override_process_only_new_candles": {
            "name": "test_strategy_override_process_only_new_candles",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "str"
                ],
                "default_conf": [
                    "bool",
                    "int",
                    "Exception",
                    "dict",
                    "pandas.DataFrame"
                ]
            }
        },
        "test_strategy_override_order_types": {
            "name": "test_strategy_override_order_types",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "logging.LogRecord"
                ],
                "default_conf": [
                    "str",
                    "dict",
                    "TextIO"
                ]
            }
        },
        "test_strategy_override_order_tif": {
            "name": "test_strategy_override_order_tif",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "logging.Logger",
                    "logging.LogRecord",
                    "Optional[logging.Logger]",
                    "List[Dict[str, float]]"
                ],
                "default_conf": [
                    "dict",
                    "bool",
                    "Dict[str, Any]",
                    "Dict[str, Tuple[Any, Any, Any]]"
                ]
            }
        },
        "test_strategy_override_use_exit_signal": {
            "name": "test_strategy_override_use_exit_signal",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "str"
                ],
                "default_conf": [
                    "List[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "test_strategy_override_use_exit_profit_only": {
            "name": "test_strategy_override_use_exit_profit_only",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "str"
                ],
                "default_conf": [
                    "List[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "test_missing_implements": {
            "name": "test_missing_implements",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Dict[str, Tuple[str, str]]",
                    "Dict[Hashable, Iterable[Hashable]]",
                    "Dict[str, Any]",
                    "dict"
                ],
                "caplog": [
                    "dict",
                    "Exception",
                    "List[str]"
                ]
            }
        },
        "test_call_deprecated_function": {
            "name": "test_call_deprecated_function",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Dict[str, Any]",
                    "Dict[str, Tuple[str, str]]",
                    "Dict[str, Dict[str, Any]]",
                    "str",
                    "bool",
                    "Dict[str, Optional[Any]]"
                ]
            }
        },
        "test_strategy_interface_versioning": {
            "name": "test_strategy_interface_versioning",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {
                "result": [
                    "str",
                    "Dict[int, Dict[int, Any]]",
                    "int",
                    "Sequence[Union[int, float]]",
                    "pandas.DataFrame"
                ],
                "default_conf": [
                    "dict",
                    "Optional[str]",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        }
    },
    "freqtrade-develop/tests/strategy/__init__.py": {},
    "freqtrade-develop/tests/strategy/strats/failing_strategy.py": {},
    "freqtrade-develop/tests/strategy/strats/hyperoptable_strategy.py": {
        "HyperoptableStrategy.protections": {
            "name": "protections",
            "location": 38,
            "return": [
                "List[dict[Text,Text]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HyperoptableStrategy.bot_loop_start": {
            "name": "bot_loop_start",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HyperoptableStrategy.bot_start": {
            "name": "bot_start",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HyperoptableStrategy.informative_pairs": {
            "name": "informative_pairs",
            "location": 58,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HyperoptableStrategy.populate_buy_trend": {
            "name": "populate_buy_trend",
            "location": 71,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "str",
                    "dict",
                    "bool"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "HyperoptableStrategy.populate_sell_trend": {
            "name": "populate_sell_trend",
            "location": 93,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "float",
                    "str",
                    "Iterable[str]",
                    "pandas.DataFrame"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "freqtrade-develop/tests/strategy/strats/informative_decorator_strategy.py": {
        "InformativeDecoratorTest.informative_pairs": {
            "name": "informative_pairs",
            "location": 21,
            "return": [
                "List[tuple[Text]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InformativeDecoratorTest.populate_buy_trend": {
            "name": "populate_buy_trend",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "InformativeDecoratorTest.populate_sell_trend": {
            "name": "populate_sell_trend",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "InformativeDecoratorTest.populate_indicators_1h": {
            "name": "populate_indicators_1h",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "InformativeDecoratorTest.populate_indicators_neo_1h": {
            "name": "populate_indicators_neo_1h",
            "location": 46,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "InformativeDecoratorTest.populate_indicators_eth_btc_1h": {
            "name": "populate_indicators_eth_btc_1h",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "InformativeDecoratorTest.populate_indicators_btc_1h_2": {
            "name": "populate_indicators_btc_1h_2",
            "location": 58,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "InformativeDecoratorTest.populate_indicators_eth_30m": {
            "name": "populate_indicators_eth_30m",
            "location": 64,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "InformativeDecoratorTest.populate_indicators": {
            "name": "populate_indicators",
            "location": 68,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "Callable",
                    "int",
                    "str",
                    "pandas.DataFrame"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "freqtrade-develop/tests/strategy/strats/strategy_test_v2.py": {
        "StrategyTestV2.populate_indicators": {
            "name": "populate_indicators",
            "location": 56,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "Callable",
                    "str"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "StrategyTestV2.populate_buy_trend": {
            "name": "populate_buy_trend",
            "location": 105,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "Callable",
                    "str"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "StrategyTestV2.populate_sell_trend": {
            "name": "populate_sell_trend",
            "location": 127,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "Callable",
                    "str"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "freqtrade-develop/tests/strategy/strats/strategy_test_v3.py": {
        "StrategyTestV3.bot_start": {
            "name": "bot_start",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StrategyTestV3.informative_pairs": {
            "name": "informative_pairs",
            "location": 91,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StrategyTestV3.populate_indicators": {
            "name": "populate_indicators",
            "location": 95,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "Callable",
                    "str"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "StrategyTestV3.populate_entry_trend": {
            "name": "populate_entry_trend",
            "location": 134,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "dict",
                    "str",
                    "bool"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "StrategyTestV3.populate_exit_trend": {
            "name": "populate_exit_trend",
            "location": 156,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "float",
                    "str",
                    "Iterable[str]"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "StrategyTestV3.leverage": {
            "name": "leverage",
            "location": 180,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "float",
                    "Optional[datetime.datetime]",
                    "Callable[[], Any]",
                    "int",
                    "List[int]",
                    "bool"
                ],
                "current_time": [
                    "float",
                    "Optional[datetime.datetime]",
                    "Callable[[], Any]",
                    "int",
                    "List[int]",
                    "bool"
                ],
                "current_rate": [
                    "float",
                    "Optional[datetime.datetime]",
                    "Callable[[], Any]",
                    "int",
                    "List[int]",
                    "bool"
                ],
                "proposed_leverage": [
                    "float",
                    "Optional[datetime.datetime]",
                    "Callable[[], Any]",
                    "int",
                    "List[int]",
                    "bool"
                ],
                "max_leverage": [
                    "float",
                    "Optional[datetime.datetime]",
                    "Callable[[], Any]",
                    "int",
                    "List[int]",
                    "bool"
                ],
                "entry_tag": [
                    "float",
                    "Optional[datetime.datetime]",
                    "Callable[[], Any]",
                    "int",
                    "List[int]",
                    "bool"
                ],
                "side": [
                    "float",
                    "Optional[datetime.datetime]",
                    "Callable[[], Any]",
                    "int",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "StrategyTestV3.adjust_trade_position": {
            "name": "adjust_trade_position",
            "location": 188,
            "return": [
                "float",
                "str",
                "None",
                "List",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "int",
                    "float"
                ],
                "current_time": [
                    "float",
                    "Optional[datetime.datetime]",
                    "Callable[[], Any]",
                    "int",
                    "List[int]",
                    "bool"
                ],
                "current_rate": [
                    "float",
                    "Optional[datetime.datetime]",
                    "Callable[[], Any]",
                    "int",
                    "List[int]",
                    "bool"
                ],
                "current_profit": [
                    "float",
                    "Optional[datetime.datetime]",
                    "Callable[[], Any]",
                    "int",
                    "List[int]",
                    "bool"
                ],
                "min_stake": [
                    "float",
                    "Optional[datetime.datetime]",
                    "Callable[[], Any]",
                    "int",
                    "List[int]",
                    "bool"
                ],
                "max_stake": [
                    "float",
                    "Optional[datetime.datetime]",
                    "Callable[[], Any]",
                    "int",
                    "List[int]",
                    "bool"
                ]
            }
        }
    },
    "freqtrade-develop/tests/strategy/strats/strategy_test_v3_analysis.py": {
        "StrategyTestV3Analysis.bot_start": {
            "name": "bot_start",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StrategyTestV3Analysis.informative_pairs": {
            "name": "informative_pairs",
            "location": 87,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StrategyTestV3Analysis.populate_indicators": {
            "name": "populate_indicators",
            "location": 91,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "Callable",
                    "str"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "StrategyTestV3Analysis.populate_entry_trend": {
            "name": "populate_entry_trend",
            "location": 130,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "dict",
                    "str",
                    "bool"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "StrategyTestV3Analysis.populate_exit_trend": {
            "name": "populate_exit_trend",
            "location": 153,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "float",
                    "str",
                    "Iterable[str]"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "freqtrade-develop/tests/strategy/strats/broken_strats/broken_futures_strategies.py": {
        "TestStrategyNoImplements.populate_indicators": {
            "name": "populate_indicators",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "Callable",
                    "str"
                ],
                "metadata": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestStrategyNoImplementSell.populate_entry_trend": {
            "name": "populate_entry_trend",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "Callable",
                    "str"
                ],
                "metadata": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestStrategyImplementCustomSell.populate_exit_trend": {
            "name": "populate_exit_trend",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "Callable",
                    "str"
                ],
                "metadata": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestStrategyImplementCustomSell.custom_sell": {
            "name": "custom_sell",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "int",
                    "float",
                    "bool"
                ],
                "trade": [
                    "int",
                    "float",
                    "bool"
                ],
                "current_time": [
                    "int",
                    "float",
                    "bool"
                ],
                "current_rate": [
                    "int",
                    "float",
                    "bool"
                ],
                "current_profit": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "TestStrategyImplementBuyTimeout.populate_exit_trend": {
            "name": "populate_exit_trend",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "Callable",
                    "str"
                ],
                "metadata": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestStrategyImplementBuyTimeout.check_buy_timeout": {
            "name": "check_buy_timeout",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "datetime.datetime",
                    "int",
                    "float",
                    "bool"
                ],
                "trade": [
                    "datetime.datetime",
                    "int",
                    "float",
                    "bool"
                ],
                "order": [
                    "datetime.datetime",
                    "int",
                    "float",
                    "bool"
                ],
                "current_time": [
                    "datetime.datetime",
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "TestStrategyImplementSellTimeout.populate_exit_trend": {
            "name": "populate_exit_trend",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "Callable",
                    "str"
                ],
                "metadata": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestStrategyImplementSellTimeout.check_sell_timeout": {
            "name": "check_sell_timeout",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "datetime.datetime",
                    "int",
                    "float",
                    "bool"
                ],
                "trade": [
                    "datetime.datetime",
                    "int",
                    "float",
                    "bool"
                ],
                "order": [
                    "datetime.datetime",
                    "int",
                    "float",
                    "bool"
                ],
                "current_time": [
                    "datetime.datetime",
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "freqtrade-develop/tests/strategy/strats/broken_strats/legacy_strategy_v1.py": {
        "TestStrategyLegacyV1.populate_indicators": {
            "name": "populate_indicators",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestStrategyLegacyV1.populate_buy_trend": {
            "name": "populate_buy_trend",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestStrategyLegacyV1.populate_sell_trend": {
            "name": "populate_sell_trend",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    }
}
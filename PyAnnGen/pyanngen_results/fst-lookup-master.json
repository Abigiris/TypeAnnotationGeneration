{
    "fst-lookup-master/setup.py": {},
    "fst-lookup-master/fst_lookup/data.py": {
        "Arc.__str__": {
            "name": "__str__",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fst-lookup-master/fst_lookup/flags.py": {
        "FlagDiacritic.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "feature": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "FlagDiacritic.__eq__": {
            "name": "__eq__",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[T]",
                    "AbstractSet",
                    "int",
                    "SupportsFloat",
                    "Union[Iterable[int],int]",
                    "AbstractSet[Any]"
                ]
            }
        },
        "FlagDiacritic.__hash__": {
            "name": "__hash__",
            "location": 50,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlagDiacritic.__repr__": {
            "name": "__repr__",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlagDiacritic.__str__": {
            "name": "__str__",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlagDiacritic.test": {
            "name": "test",
            "location": 59,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "flags": [
                    "Dict[str,str]",
                    "Dict",
                    "int"
                ]
            }
        },
        "FlagDiacritic.apply": {
            "name": "apply",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flags": [
                    "Dict[str,str]",
                    "str",
                    "memoryview",
                    "Iterable[Tuple[int,int]]",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "FlagDiacriticWithValue.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "feature": [
                    "str",
                    "Dict",
                    "Sequence",
                    "Dict[str,Any]",
                    "Type",
                    "int"
                ],
                "value": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Hashable",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "List",
                    "Optional[List]",
                    "Iterable"
                ]
            }
        },
        "FlagDiacriticWithValue.__eq__": {
            "name": "__eq__",
            "location": 79,
            "return": [
                "bool",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[T]"
                ]
            }
        },
        "FlagDiacriticWithValue.__hash__": {
            "name": "__hash__",
            "location": 82,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlagDiacriticWithValue.__repr__": {
            "name": "__repr__",
            "location": 85,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlagDiacriticWithValue.__str__": {
            "name": "__str__",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unify.test": {
            "name": "test",
            "location": 102,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "flags": [
                    "int",
                    "float"
                ]
            }
        },
        "Unify.apply": {
            "name": "apply",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flags": [
                    "Dict",
                    "Dict[str,Any]",
                    "List",
                    "str",
                    "Iterable"
                ]
            }
        },
        "Clear.test": {
            "name": "test",
            "location": 116,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "flags": [
                    "Dict[str,str]",
                    "Dict",
                    "int"
                ]
            }
        },
        "Clear.apply": {
            "name": "apply",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flags": [
                    "bool",
                    "str"
                ]
            }
        },
        "DisallowFeature.test": {
            "name": "test",
            "location": 129,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "flags": [
                    "float",
                    "str",
                    "bool",
                    "Dict",
                    "int"
                ]
            }
        },
        "DisallowValue.test": {
            "name": "test",
            "location": 140,
            "return": [
                "bool",
                "Optional[Iterable[Any]]",
                "Mapping[str,Any]"
            ],
            "arguments": {
                "self": [],
                "flags": [
                    "str",
                    "Dict[str,str]",
                    "Dict",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Positive.test": {
            "name": "test",
            "location": 147,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "flags": [
                    "Dict[str,str]",
                    "Dict",
                    "int"
                ]
            }
        },
        "Positive.apply": {
            "name": "apply",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flags": []
            }
        },
        "RequireValue.test": {
            "name": "test",
            "location": 160,
            "return": [
                "bool",
                "Optional[Iterable[Any]]",
                "Mapping[str,Any]"
            ],
            "arguments": {
                "self": [],
                "flags": [
                    "str",
                    "Dict[str,str]",
                    "Dict",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "RequireFeature.test": {
            "name": "test",
            "location": 170,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "flags": [
                    "float",
                    "str",
                    "bool",
                    "Dict",
                    "int"
                ]
            }
        }
    },
    "fst-lookup-master/fst_lookup/fst.py": {
        "FST.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parse": [
                    "None"
                ],
                "hfstol_file_path": [
                    "None"
                ],
                "hfstol_exe_path": [
                    "None"
                ]
            }
        },
        "FST.analyze": {
            "name": "analyze",
            "location": 89,
            "return": [
                "None",
                "typing.Generator[tuple[]]",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "surface_form": []
            }
        },
        "FST._call_hfstol": {
            "name": "_call_hfstol",
            "location": 107,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "FST.analyze_in_bulk": {
            "name": "analyze_in_bulk",
            "location": 156,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "surface_forms": []
            }
        },
        "FST.generate": {
            "name": "generate",
            "location": 166,
            "return": [
                "None",
                "typing.Generator[str]",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "analysis": []
            }
        },
        "FST.generate_in_bulk": {
            "name": "generate_in_bulk",
            "location": 184,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "analyses": []
            }
        },
        "FST.to_symbols": {
            "name": "to_symbols",
            "location": 194,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "surface_form": []
            }
        },
        "FST.from_file": {
            "name": "from_file",
            "location": 208,
            "return": [
                "FST"
            ],
            "arguments": {
                "cls": [],
                "fst_file_path": [],
                "labels": [
                    "typing.Text"
                ]
            }
        },
        "FST.from_text": {
            "name": "from_text",
            "location": 239,
            "return": [
                "FST"
            ],
            "arguments": {
                "cls": [],
                "att_text": [],
                "labels": [
                    "typing.Text"
                ]
            }
        },
        "FST._transduce": {
            "name": "_transduce",
            "location": 246,
            "return": [
                "typing.Generator[Transducer]"
            ],
            "arguments": {
                "self": [],
                "symbols": [],
                "get_input_label": [],
                "get_output_label": []
            }
        },
        "FST._format_transduction": {
            "name": "_format_transduction",
            "location": 254,
            "return": [
                "typing.Generator[typing.Text]",
                "typing.Generator[str]"
            ],
            "arguments": {
                "self": [],
                "transduction": []
            }
        },
        "Transducer.__init__": {
            "name": "__init__",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial_state": [],
                "symbols": [],
                "get_input_label": [],
                "get_output_label": [],
                "accepting_states": [],
                "arcs_from": []
            }
        },
        "Transducer.__iter__": {
            "name": "__iter__",
            "location": 306,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transducer._accept": {
            "name": "_accept",
            "location": 309,
            "return": [
                "None",
                "typing.Generator[tuple[]]",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "state": [],
                "transduction": [],
                "flag_stack": []
            }
        }
    },
    "fst-lookup-master/fst_lookup/parse.py": {
        "parse_text": {
            "name": "parse_text",
            "location": 255,
            "return": [
                "Optional[str]",
                "str",
                "list",
                "int"
            ],
            "arguments": {
                "att_text": [
                    "str",
                    "bool",
                    "Tuple[str]"
                ],
                "invert_labels": [
                    "bool",
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "parse_symbol": {
            "name": "parse_symbol",
            "location": 265,
            "return": [
                "MultiCharacterSymbol",
                "str",
                "Grapheme",
                "bool",
                "int"
            ],
            "arguments": {
                "symbol": [
                    "str"
                ]
            }
        },
        "parse_flag": {
            "name": "parse_flag",
            "location": 283,
            "return": [
                "Union[(fst_lookup.flags.Clear, fst_lookup.flags.DisallowFeature, fst_lookup.flags.DisallowValue, fst_lookup.flags.Positive, fst_lookup.flags.RequireFeature, fst_lookup.flags.RequireValue, fst_lookup.flags.Unify)]"
            ],
            "arguments": {
                "flag_diacritic": [
                    "str"
                ]
            }
        },
        "SymbolTable.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SymbolTable.__getitem__": {
            "name": "__getitem__",
            "location": 53,
            "return": [
                "bool",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "Type",
                    "Type[T]",
                    "bool",
                    "Tuple[Union[Any,list[str]]]",
                    "str",
                    "Tuple[Any,List[str]]",
                    "List[tuple[Union[bytes,bytes]]]",
                    "List[Tuple[bytes,bytes]]",
                    "int"
                ]
            }
        },
        "SymbolTable.add": {
            "name": "add",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "symbol_id": [
                    "int",
                    "str",
                    "bytes",
                    "bool",
                    "None",
                    "Optional[str]"
                ],
                "symbol": [
                    "str",
                    "int",
                    "symbol.Symbol"
                ]
            }
        },
        "SymbolTable.sigma": {
            "name": "sigma",
            "location": 68,
            "return": [
                "Dict",
                "Set[str]",
                "Dict[int,symbol.Symbol]",
                "Dict[int,Dict[int,Any]]",
                "Type[T]",
                "Dict[str,Any]",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SymbolTable.has_epsilon": {
            "name": "has_epsilon",
            "location": 74,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FSTParse.multichar_symbols": {
            "name": "multichar_symbols",
            "location": 87,
            "return": [
                "Dict",
                "str",
                "List",
                "Set",
                "Union[int,None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FSTParse.flag_diacritics": {
            "name": "flag_diacritics",
            "location": 92,
            "return": [
                "Dict",
                "List[str]",
                "Dict[int,int]",
                "int",
                "List[int]",
                "Optional[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FSTParse.graphemes": {
            "name": "graphemes",
            "location": 97,
            "return": [
                "Dict",
                "str",
                "Optional[int]",
                "Set",
                "int",
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "FSTParse.sigma": {
            "name": "sigma",
            "location": 102,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "FSTParse.states": {
            "name": "states",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FSTParse.has_epsilon": {
            "name": "has_epsilon",
            "location": 110,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "FomaParser.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "invert_labels": [
                    "str",
                    "Dict"
                ]
            }
        },
        "FomaParser.handle_header": {
            "name": "handle_header",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str",
                    "Union[str,bytes]",
                    "bytes",
                    "Awaitable",
                    "collections.abc.Awaitable"
                ]
            }
        },
        "FomaParser.handle_props": {
            "name": "handle_props",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "List[AnyStr]",
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "Iterable[Sequence[str]]"
                ]
            }
        },
        "FomaParser.handle_sigma": {
            "name": "handle_sigma",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ]
            }
        },
        "FomaParser.handle_states": {
            "name": "handle_states",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str",
                    "List",
                    "Sequence[Any]",
                    "List[allennlp.data.tokenizers.Token]",
                    "int",
                    "Dict"
                ]
            }
        },
        "FomaParser.handle_end": {
            "name": "handle_end",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "List[AnyStr]",
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "Iterable[Sequence[str]]"
                ]
            }
        },
        "FomaParser.parse_line": {
            "name": "parse_line",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ]
            }
        },
        "FomaParser.finalize": {
            "name": "finalize",
            "location": 238,
            "return": [
                "FSTParse"
            ],
            "arguments": {
                "self": []
            }
        },
        "FomaParser.parse_text": {
            "name": "parse_text",
            "location": 248,
            "return": [
                "FSTParse"
            ],
            "arguments": {
                "self": [],
                "fst_text": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "fst-lookup-master/fst_lookup/symbol.py": {
        "EpsilonType.__repr__": {
            "name": "__repr__",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EpsilonType.__str__": {
            "name": "__str__",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphicalSymbol.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "GraphicalSymbol.__eq__": {
            "name": "__eq__",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "GraphicalSymbol.__hash__": {
            "name": "__hash__",
            "location": 81,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphicalSymbol.__str__": {
            "name": "__str__",
            "location": 84,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphicalSymbol.__repr__": {
            "name": "__repr__",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grapheme.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "char": []
            }
        },
        "MultiCharacterSymbol.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": []
            }
        }
    },
    "fst-lookup-master/fst_lookup/__init__.py": {},
    "fst-lookup-master/fst_lookup/__version__.py": {},
    "fst-lookup-master/tests/conftest.py": {
        "cree_hfstol_analyzer": {
            "name": "cree_hfstol_analyzer",
            "location": 21,
            "return": [
                "str",
                "List[List[int]]",
                "bool"
            ],
            "arguments": {
                "shared_datadir": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "cree_foma_analyzer": {
            "name": "cree_foma_analyzer",
            "location": 29,
            "return": [
                "str",
                "List[List[int]]",
                "bool"
            ],
            "arguments": {
                "shared_datadir": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "cree_foma_generator": {
            "name": "cree_foma_generator",
            "location": 37,
            "return": [
                "str",
                "List[List[int]]",
                "bool"
            ],
            "arguments": {
                "shared_datadir": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "cree_hfstol_generator": {
            "name": "cree_hfstol_generator",
            "location": 45,
            "return": [
                "str",
                "List[List[int]]",
                "bool"
            ],
            "arguments": {
                "shared_datadir": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "eat_fst": {
            "name": "eat_fst",
            "location": 53,
            "return": [
                "str",
                "float",
                "dict",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "eat_fst_txt": [
                    "str",
                    "int",
                    "Callable[[str],T]",
                    "Callable[str,T]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "english_flags_fst": {
            "name": "english_flags_fst",
            "location": 61,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "english_flags_fst_txt": [
                    "str",
                    "AnyStr",
                    "None",
                    "T",
                    "Optional[str]"
                ]
            }
        },
        "english_ipa_fst": {
            "name": "english_ipa_fst",
            "location": 70,
            "return": [
                "str",
                "List[List[int]]",
                "bool"
            ],
            "arguments": {
                "shared_datadir": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "eat_fst_txt": {
            "name": "eat_fst_txt",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "shared_datadir": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "english_flags_fst_txt": {
            "name": "english_flags_fst_txt",
            "location": 94,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "shared_datadir": [
                    "bool",
                    "pathlib.Path",
                    "str",
                    "Iterable[str]"
                ]
            }
        }
    },
    "fst-lookup-master/tests/test_apply.py": {
        "test_analyze_eat_fst": {
            "name": "test_analyze_eat_fst",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "surface_form": [],
                "analyses": [],
                "eat_fst": []
            }
        },
        "test_generate_eat_fst": {
            "name": "test_generate_eat_fst",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "analysis": [],
                "surface_form": [],
                "eat_fst": []
            }
        },
        "test_flag_fst": {
            "name": "test_flag_fst",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "surface_form": [],
                "analysis": [],
                "english_flags_fst": []
            }
        },
        "test_unacceptable_forms_in_flag_fst": {
            "name": "test_unacceptable_forms_in_flag_fst",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "unacceptable_form": [],
                "english_flags_fst": []
            }
        },
        "test_analyze_form_outside_of_alphabet": {
            "name": "test_analyze_form_outside_of_alphabet",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "eat_fst": []
            }
        },
        "test_generate_form_outside_of_alphabet": {
            "name": "test_generate_form_outside_of_alphabet",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "eat_fst": []
            }
        },
        "test_analyze_concatenation": {
            "name": "test_analyze_concatenation",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "english_ipa_fst": []
            }
        },
        "test_cree_foma_analysis": {
            "name": "test_cree_foma_analysis",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "cree_foma_analyzer": [],
                "surface_form": [],
                "analyses": []
            }
        },
        "test_cree_foma_generation": {
            "name": "test_cree_foma_generation",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "cree_foma_generator": [],
                "word": [],
                "analysis": []
            }
        },
        "test_cree_foma_analysis_in_bulk": {
            "name": "test_cree_foma_analysis_in_bulk",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "cree_foma_analyzer": [],
                "surface_forms": [],
                "analyses": []
            }
        },
        "test_cree_foma_generation_in_bulk": {
            "name": "test_cree_foma_generation_in_bulk",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "cree_foma_generator": [],
                "surface_forms": [],
                "analyses": []
            }
        },
        "test_cree_hfstol_analysis": {
            "name": "test_cree_hfstol_analysis",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "cree_hfstol_analyzer": [],
                "surface_form": [],
                "analyses": []
            }
        },
        "test_cree_hfstol_generation": {
            "name": "test_cree_hfstol_generation",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "cree_hfstol_generator": [],
                "word": [],
                "analysis": []
            }
        },
        "test_cree_hfstol_analysis_in_bulk": {
            "name": "test_cree_hfstol_analysis_in_bulk",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "cree_hfstol_analyzer": [],
                "surface_forms": [],
                "analyses": []
            }
        },
        "test_cree_hfstol_generation_in_bulk": {
            "name": "test_cree_hfstol_generation_in_bulk",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "cree_hfstol_generator": [],
                "surface_forms": [],
                "analyses": []
            }
        }
    },
    "fst-lookup-master/tests/test_flag.py": {
        "test_disallow_value": {
            "name": "test_disallow_value",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_require_value": {
            "name": "test_require_value",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_disallow_value_with_unify": {
            "name": "test_disallow_value_with_unify",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_require_value_with_unify": {
            "name": "test_require_value_with_unify",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unify_twice": {
            "name": "test_unify_twice",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_disallow_feature": {
            "name": "test_disallow_feature",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_require_feature": {
            "name": "test_require_feature",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "make_fst": {
            "name": "make_fst",
            "location": 221,
            "return": [
                "Any"
            ],
            "arguments": {}
        }
    },
    "fst-lookup-master/tests/test_parse.py": {
        "test_parse_simple": {
            "name": "test_parse_simple",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "eat_fst_txt": []
            }
        },
        "test_parse_multiple": {
            "name": "test_parse_multiple",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "eat_fst_txt": []
            }
        },
        "test_parse_fst_with_flag_diacritics": {
            "name": "test_parse_fst_with_flag_diacritics",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "english_flags_fst_txt": []
            }
        },
        "test_parse_flag_diacritics": {
            "name": "test_parse_flag_diacritics",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "raw": [],
                "parsed": []
            }
        },
        "test_parse_whitespace_in_sigma": {
            "name": "test_parse_whitespace_in_sigma",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_symbols": {
            "name": "test_parse_symbols",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_bad_symbols": {
            "name": "test_parse_bad_symbols",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "stringified_set": {
            "name": "stringified_set",
            "location": 142,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "symbols": []
            }
        }
    },
    "fst-lookup-master/tests/test_performance.py": {
        "test_hfstol_analysis_performance": {
            "name": "test_hfstol_analysis_performance",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "cree_hfstol_analyzer": [],
                "cree_foma_analyzer": []
            }
        },
        "test_hfstol_generation_performance": {
            "name": "test_hfstol_generation_performance",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "cree_hfstol_generator": [],
                "cree_foma_generator": []
            }
        }
    },
    "fst-lookup-master/tests/test_str.py": {
        "test_string_arc_special": {
            "name": "test_string_arc_special",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "arc": [],
                "expected": []
            }
        }
    },
    "fst-lookup-master/tests/test_usage.py": {
        "test_load_from_file": {
            "name": "test_load_from_file",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "shared_datadir": [
                    "str"
                ]
            }
        },
        "test_load_from_file_flipped": {
            "name": "test_load_from_file_flipped",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "shared_datadir": [
                    "str"
                ]
            }
        }
    },
    "fst-lookup-master/tests/regressions/test_gh004_concatenate_lemma.py": {
        "test_concatenate_lemma": {
            "name": "test_concatenate_lemma",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "shared_datadir": []
            }
        }
    }
}
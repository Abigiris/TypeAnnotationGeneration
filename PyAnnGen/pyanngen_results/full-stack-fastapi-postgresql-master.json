{
    "full-stack-fastapi-postgresql-master/hooks/post_gen_project.py": {},
    "full-stack-fastapi-postgresql-master/scripts/generate_cookiecutter_config.py": {},
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/alembic/env.py": {
        "get_url": {
            "name": "get_url",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/alembic/versions/d4867f3a4c0a_first_revision.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/backend_pre_start.py": {
        "init": {
            "name": "init",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/celeryworker_pre_start.py": {
        "init": {
            "name": "init",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/initial_data.py": {
        "init": {
            "name": "init",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/main.py": {},
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/tests_pre_start.py": {
        "init": {
            "name": "init",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/utils.py": {
        "send_email": {
            "name": "send_email",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "email_to": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Union[int, str, bool]",
                    "int",
                    "Type[object]",
                    "typing.Type",
                    "List[str]",
                    "list[str]"
                ],
                "subject_template": [
                    "typing.Text",
                    "str",
                    "bool",
                    "BinaryIO"
                ],
                "html_template": [
                    "typing.Text",
                    "str",
                    "bool",
                    "BinaryIO"
                ],
                "environment": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "Union[int, str, bool]",
                    "Type[object]",
                    "List[str]"
                ]
            }
        },
        "send_test_email": {
            "name": "send_test_email",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "email_to": [
                    "str"
                ]
            }
        },
        "send_reset_password_email": {
            "name": "send_reset_password_email",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "email_to": [
                    "str"
                ],
                "email": [
                    "str"
                ],
                "token": [
                    "str"
                ]
            }
        },
        "send_new_account_email": {
            "name": "send_new_account_email",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "email_to": [
                    "str"
                ],
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "generate_password_reset_token": {
            "name": "generate_password_reset_token",
            "location": 90,
            "return": [
                "float",
                "logging.LogRecord",
                "bool",
                "Callable[[None], bool]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "email": [
                    "str"
                ]
            }
        },
        "verify_password_reset_token": {
            "name": "verify_password_reset_token",
            "location": 101,
            "return": [
                "None",
                "bool",
                "str",
                "Optional[str]",
                "float"
            ],
            "arguments": {
                "token": [
                    "str",
                    "Union[str, int]",
                    "int"
                ]
            }
        }
    },
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/worker.py": {
        "test_celery": {
            "name": "test_celery",
            "location": 10,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "word": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        }
    },
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/__init__.py": {},
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/api/deps.py": {
        "get_db": {
            "name": "get_db",
            "location": 19,
            "return": [
                "generator"
            ],
            "arguments": {}
        },
        "get_current_user": {
            "name": "get_current_user",
            "location": 27,
            "return": [
                "models.user.User"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.session.Session"
                ],
                "token": [
                    "str"
                ]
            }
        },
        "get_current_active_user": {
            "name": "get_current_active_user",
            "location": 46,
            "return": [
                "models.user.User"
            ],
            "arguments": {
                "current_user": [
                    "models.user.User"
                ]
            }
        },
        "get_current_active_superuser": {
            "name": "get_current_active_superuser",
            "location": 54,
            "return": [
                "models.user.User"
            ],
            "arguments": {
                "current_user": [
                    "models.user.User"
                ]
            }
        }
    },
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/api/__init__.py": {},
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/api/api_v1/api.py": {},
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/api/api_v1/__init__.py": {},
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/api/api_v1/endpoints/items.py": {
        "read_items": {
            "name": "read_items",
            "location": 13,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Union[Sequence, 'SweepFixedValues']",
                "Dict[str, Any]",
                "Iterable[str]"
            ],
            "arguments": {
                "db": [
                    "Depends",
                    "sqlalchemy.orm.Session",
                    "recidiviz.persistence.database.session.Session",
                    "str"
                ],
                "skip": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "recidiviz.persistence.database.session.Session",
                    "str"
                ],
                "limit": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "recidiviz.persistence.database.session.Session",
                    "str"
                ],
                "current_user": [
                    "Depends",
                    "sqlalchemy.orm.Session",
                    "app.models.User",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "create_item": {
            "name": "create_item",
            "location": 32,
            "return": [
                "list[]",
                "Dict[str, Dict[str, int]]",
                "Union[Sequence, 'SweepFixedValues']",
                "Iterable[str]",
                "bool"
            ],
            "arguments": {}
        },
        "update_item": {
            "name": "update_item",
            "location": 46,
            "return": [
                "list[]",
                "List[Dict]",
                "int",
                "dict[int, str]",
                "dict[str, typing.Literal]",
                "list",
                "List[object]",
                "models.Dominion"
            ],
            "arguments": {}
        },
        "read_item": {
            "name": "read_item",
            "location": 66,
            "return": [
                "Dict[str, Dict[str, int]]",
                "list[]",
                "Union[Sequence, 'SweepFixedValues']",
                "dict[, ]",
                "Dict[str, Any]",
                "dict[int, str]",
                "Iterable[str]",
                "int",
                "dict[str, typing.Literal]"
            ],
            "arguments": {}
        },
        "delete_item": {
            "name": "delete_item",
            "location": 84,
            "return": [
                "Dict[str, Dict[str, int]]",
                "list[]",
                "str",
                "dict[int, str]",
                "Iterable[str]",
                "dict[str, typing.Literal]",
                "int"
            ],
            "arguments": {}
        }
    },
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/api/api_v1/endpoints/login.py": {
        "login_access_token": {
            "name": "login_access_token",
            "location": 23,
            "return": [
                "dict[typing.Text, typing.Text]",
                "str",
                "dict"
            ],
            "arguments": {
                "db": [
                    "Depends",
                    "salon.models.Stylist",
                    "bytes",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]"
                ],
                "form_data": [
                    "Depends",
                    "salon.models.Stylist",
                    "bytes",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "test_token": {
            "name": "test_token",
            "location": 46,
            "return": [
                "Callable",
                "Depends"
            ],
            "arguments": {
                "current_user": [
                    "Depends",
                    "app.db_models.user.User",
                    "ultron8.api.db_models.user.User",
                    "core.models.Recipe",
                    "str"
                ]
            }
        },
        "recover_password": {
            "name": "recover_password",
            "location": 54,
            "return": [
                "dict[typing.Text, typing.Text]",
                "str",
                "audiopyle.lib.models.file_meta.CompressedAudioFileMeta",
                "type"
            ],
            "arguments": {
                "email": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]"
                ],
                "db": [
                    "Depends",
                    "str",
                    "int",
                    "django.db.models.Model",
                    "raiden.utils.List[raiden.utils.Tuple[str, raiden.utils.Any]]",
                    "bool",
                    "limbic.emotion.models.LexiconLimbicModel"
                ]
            }
        },
        "reset_password": {
            "name": "reset_password",
            "location": 73,
            "return": [
                "dict[typing.Text, typing.Text]",
                "str",
                "List[zerver.models.Stream]",
                "dict",
                "int"
            ],
            "arguments": {
                "token": [
                    "Body",
                    "str",
                    "bool"
                ],
                "new_password": [
                    "str",
                    "Body"
                ],
                "db": [
                    "Depends",
                    "str",
                    "dict",
                    "Optional[float]"
                ]
            }
        }
    },
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/api/api_v1/endpoints/users.py": {
        "read_users": {
            "name": "read_users",
            "location": 17,
            "return": [
                "lms.lmsdb.models.User",
                "str",
                "lms.lmsdb.models.Solution",
                "tuple[typing.Union[typing.Literal,typing.Literal]]",
                "zam_repondeur.models.Lecture",
                "set[]",
                "asgard.models.user.User",
                "dict[str, int]"
            ],
            "arguments": {
                "db": [
                    "Depends",
                    "str",
                    "zerver.models.UserProfile",
                    "Iterable[zerver.models.Stream]"
                ],
                "skip": [
                    "int",
                    "str",
                    "zerver.models.UserProfile",
                    "Iterable[zerver.models.Stream]"
                ],
                "limit": [
                    "int",
                    "str",
                    "zerver.models.UserProfile",
                    "Iterable[zerver.models.Stream]"
                ],
                "current_user": [
                    "Depends",
                    "mediaarchiver.models.TypeVarAccount",
                    "app.db_models.user.User",
                    "Callable",
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "sqlalchemy.orm.unitofwork.UOWTransaction",
                    "bool"
                ]
            }
        },
        "create_user": {
            "name": "create_user",
            "location": 31,
            "return": [
                "str",
                "zam_repondeur.models.Lecture",
                "core.models.UserPreferences",
                "set",
                "int",
                "bool",
                "django.db.models.QuerySet"
            ],
            "arguments": {}
        },
        "update_user_me": {
            "name": "update_user_me",
            "location": 55,
            "return": [
                "dict[str, str]",
                "int",
                "zam_repondeur.models.Lecture",
                "dict[typing.Any, dict[str, typing.Any]]",
                "set",
                "dict[str, None]",
                "bool",
                "dict[str, typing.Union[bytes,str]]",
                "django.db.models.QuerySet",
                "typing.Type",
                "core.models.UserPreferences",
                "bob_emploi.frontend.api.user_pb2.EmailSent"
            ],
            "arguments": {}
        },
        "read_user_me": {
            "name": "read_user_me",
            "location": 79,
            "return": [
                "Depends",
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "db": [
                    "Depends",
                    "app.db_models.user.User",
                    "bool",
                    "Optional[zerver.models.UserProfile]",
                    "str",
                    "zerver.models.Client"
                ],
                "current_user": [
                    "Depends",
                    "app.db_models.user.User",
                    "bool",
                    "Optional[zerver.models.UserProfile]",
                    "str",
                    "zerver.models.Client"
                ]
            }
        },
        "create_user_open": {
            "name": "create_user_open",
            "location": 90,
            "return": [
                "zam_repondeur.models.Lecture",
                "set",
                "bool",
                "django.db.models.QuerySet",
                "core.models.UserPreferences",
                "bob_emploi.frontend.api.user_pb2.EmailSent",
                "int"
            ],
            "arguments": {}
        },
        "read_user_by_id": {
            "name": "read_user_by_id",
            "location": 117,
            "return": [
                "str",
                "zerver.models.Realm",
                "None",
                "dict[, ]",
                "abilian.core.models.subjects.User",
                "models.User",
                "zerver.models.UserProfile",
                "core.models.UserPreferences"
            ],
            "arguments": {
                "user_id": [
                    "bool",
                    "int",
                    "app.db_models.user.User",
                    "zerver.models.UserProfile",
                    "sqlalchemy.orm.Session"
                ],
                "current_user": [
                    "Depends",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "int"
                ],
                "db": [
                    "Depends",
                    "bool",
                    "int",
                    "app.db_models.user.User",
                    "zerver.models.UserProfile",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "update_user": {
            "name": "update_user",
            "location": 136,
            "return": [
                "str",
                "zam_repondeur.models.Lecture",
                "int",
                "set",
                "bool",
                "django.db.models.QuerySet",
                "core.models.UserPreferences",
                "bob_emploi.frontend.api.user_pb2.EmailSent"
            ],
            "arguments": {}
        }
    },
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/api/api_v1/endpoints/utils.py": {
        "test_celery": {
            "name": "test_celery",
            "location": 15,
            "return": [
                "dict[typing.Text, typing.Text]",
                "str",
                "float"
            ],
            "arguments": {
                "msg": [
                    "routemaster.app.App"
                ],
                "current_user": [
                    "Depends",
                    "app.models.user.UserInDB",
                    "ultron8.api.models.user.UserInDB"
                ]
            }
        },
        "test_email": {
            "name": "test_email",
            "location": 27,
            "return": [
                "dict[typing.Text, typing.Text]",
                "Mapping[str, Any]",
                "core.models.Recipe"
            ],
            "arguments": {
                "email_to": [
                    "str",
                    "pydantic.EmailStr",
                    "list[cmk.gui.plugins.visuals.utils.Filter]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "List[cmk.gui.plugins.visuals.utils.Filter]"
                ],
                "current_user": [
                    "Depends",
                    "app.models.user.UserInDB",
                    "ultron8.api.models.user.UserInDB",
                    "str",
                    "pathfinding_service.api.PFSApi",
                    "bool",
                    "List[str]"
                ]
            }
        }
    },
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/api/api_v1/endpoints/__init__.py": {},
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/core/celery_app.py": {},
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/core/config.py": {
        "Settings.assemble_cors_origins": {
            "name": "assemble_cors_origins",
            "location": 20,
            "return": [
                "list[str]",
                "str",
                "List[str]",
                "Set[str]",
                "Optional[dict]",
                "int",
                "List[int]",
                "list",
                "Dict[int, int]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "typing.Type",
                    "Type['DataclassT']",
                    "typing.Callable[, ]",
                    "typing.Iterable[T]",
                    "Callable",
                    "T",
                    "bool",
                    "Iterable[T]"
                ],
                "v": [
                    "str",
                    "Union[str, List[str]]",
                    "int"
                ]
            }
        },
        "Settings.sentry_dsn_can_be_blank": {
            "name": "sentry_dsn_can_be_blank",
            "location": 31,
            "return": [
                "None",
                "Optional[int]",
                "type",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "dict",
                    "int",
                    "typing.Type",
                    "Iterable[T]",
                    "Type['DataclassT']",
                    "typing.Callable[, ]",
                    "Callable"
                ],
                "v": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "List[float]"
                ]
            }
        },
        "Settings.assemble_db_connection": {
            "name": "assemble_db_connection",
            "location": 43,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "List[str]",
                    "str",
                    "list[str]",
                    "Union[Type[Exception], Tuple[Any, ...]]",
                    "typing.Type",
                    "tuple[typing.Union[typing.Any,...]]"
                ],
                "v": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Callable",
                    "typing.Callable[, ]",
                    "dict",
                    "dict[, ]"
                ],
                "values": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict[str, typing.Union[str,bool]]",
                    "dict",
                    "bool",
                    "str",
                    "Dict[str, Union[str, bool]]"
                ]
            }
        },
        "Settings.get_project_name": {
            "name": "get_project_name",
            "location": 63,
            "return": [
                "str",
                "Optional[str]",
                "None",
                "dict[str, typing.Any]",
                "dict[, ]",
                "typing.Callable[, ]",
                "int",
                "typing.Sequence[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "int",
                    "dict[, ]",
                    "Iterable",
                    "typing.Callable[, ]",
                    "Callable",
                    "typing.Sequence[str]",
                    "Sequence[str]"
                ],
                "v": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "int",
                    "dict[, ]",
                    "Iterable",
                    "typing.Callable[, ]",
                    "Callable",
                    "typing.Sequence[str]",
                    "Sequence[str]"
                ],
                "values": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "dict",
                    "Iterable",
                    "Callable",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "Settings.get_emails_enabled": {
            "name": "get_emails_enabled",
            "location": 73,
            "return": [
                "bool",
                "Union[int, float]",
                "str",
                "Optional[Mapping[str, Any]]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "float",
                    "typing.Type",
                    "int",
                    "typing.Sequence[str]",
                    "Type[Exception]",
                    "Sequence[str]",
                    "T"
                ],
                "v": [
                    "bool",
                    "float",
                    "typing.Type",
                    "int",
                    "typing.Sequence[str]",
                    "Type[Exception]",
                    "Sequence[str]",
                    "T"
                ],
                "values": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "List[Tuple[str, str, str]]",
                    "str",
                    "list",
                    "dict"
                ]
            }
        }
    },
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/core/security.py": {
        "create_access_token": {
            "name": "create_access_token",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "subject": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ],
                "expires_delta": [
                    "_datetime.timedelta"
                ]
            }
        },
        "verify_password": {
            "name": "verify_password",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "plain_password": [
                    "str"
                ],
                "hashed_password": [
                    "str"
                ]
            }
        },
        "get_password_hash": {
            "name": "get_password_hash",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "password": [
                    "str"
                ]
            }
        }
    },
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/core/__init__.py": {},
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/crud/base.py": {
        "CRUDBase.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "None",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ]
            }
        },
        "CRUDBase.get": {
            "name": "get",
            "location": 26,
            "return": [
                "str",
                "tuple",
                "Callable[[Dict], None]",
                "int",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "id": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "CRUDBase.get_multi": {
            "name": "get_multi",
            "location": 29,
            "return": [
                "Sequence[str]",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "int",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "CRUDBase.create": {
            "name": "create",
            "location": 34,
            "return": [
                "Optional[str]",
                "Callable[[list], None]",
                "list",
                "app.models.GameMember",
                "app.models.course.Course"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "CRUDBase.update": {
            "name": "update",
            "location": 42,
            "return": [
                "Optional[str]",
                "Tuple[int, int]",
                "list",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "str",
                    "sqlalchemy.orm.Session",
                    "None",
                    "sqlalchemy.orm.session.Session",
                    "Optional[str]"
                ]
            }
        },
        "CRUDBase.remove": {
            "name": "remove",
            "location": 62,
            "return": [
                "int",
                "dict[, ]",
                "Callable",
                "set[str]",
                "str",
                "dict[typing.Hashable, dict[typing.Hashable, typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "Dict[str, Any]",
                    "sqlalchemy.orm.Query"
                ]
            }
        }
    },
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/crud/crud_item.py": {
        "CRUDItem.create_with_owner": {
            "name": "create_with_owner",
            "location": 12,
            "return": [
                "app.models.item.Item"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "CRUDItem.get_multi_by_owner": {
            "name": "get_multi_by_owner",
            "location": 22,
            "return": [
                "List[app.models.item.Item]"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        }
    },
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/crud/crud_user.py": {
        "CRUDUser.get_by_email": {
            "name": "get_by_email",
            "location": 12,
            "return": [
                "Optional[app.models.user.User]"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "CRUDUser.create": {
            "name": "create",
            "location": 15,
            "return": [
                "app.models.user.User"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "CRUDUser.update": {
            "name": "update",
            "location": 27,
            "return": [
                "app.models.user.User"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "CRUDUser.authenticate": {
            "name": "authenticate",
            "location": 40,
            "return": [
                "Optional[app.models.user.User]"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "CRUDUser.is_active": {
            "name": "is_active",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "app.models.user.User"
                ]
            }
        },
        "CRUDUser.is_superuser": {
            "name": "is_superuser",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "app.models.user.User"
                ]
            }
        }
    },
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/crud/__init__.py": {},
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/db/base.py": {},
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/db/base_class.py": {
        "Base.__tablename__": {
            "name": "__tablename__",
            "location": 12,
            "return": [
                "str",
                "Tuple[str]",
                "Sequence[str]",
                "Union[str, None]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        }
    },
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/db/init_db.py": {
        "init_db": {
            "name": "init_db",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        }
    },
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/db/session.py": {},
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/db/__init__.py": {},
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/models/item.py": {},
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/models/user.py": {},
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/models/__init__.py": {},
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/schemas/item.py": {},
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/schemas/msg.py": {},
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/schemas/token.py": {},
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/schemas/user.py": {},
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/schemas/__init__.py": {},
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/tests/conftest.py": {
        "db": {
            "name": "db",
            "location": 15,
            "return": [
                "typing.Generator",
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "client": {
            "name": "client",
            "location": 20,
            "return": [
                "typing.Generator",
                "typing.Generator[TestClient]"
            ],
            "arguments": {}
        },
        "superuser_token_headers": {
            "name": "superuser_token_headers",
            "location": 26,
            "return": [
                "Dict[str, Any]",
                "str",
                "Dict[str, List[str]]",
                "int",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "client": [
                    "dict[, ]",
                    "fastapi.testclienTestClient",
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "normal_user_token_headers": {
            "name": "normal_user_token_headers",
            "location": 31,
            "return": [
                "dict",
                "str",
                "Dict[str, Any]",
                "purplship.core.utils.Element"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient",
                    "sqlalchemy.orm.Session",
                    "utils.clienClient"
                ],
                "db": [
                    "fastapi.testclienTestClient",
                    "sqlalchemy.orm.Session",
                    "utils.clienClient"
                ]
            }
        }
    },
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/tests/__init__.py": {},
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/tests/api/__init__.py": {},
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/tests/api/api_v1/test_celery.py": {
        "test_celery_worker_test": {
            "name": "test_celery_worker_test",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient"
                ],
                "superuser_token_headers": [
                    "Dict[(str, str)]"
                ]
            }
        }
    },
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/tests/api/api_v1/test_items.py": {
        "test_create_item": {
            "name": "test_create_item",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient",
                    "Dict[str, str]"
                ],
                "superuser_token_headers": [
                    "dict"
                ],
                "db": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "test_read_item": {
            "name": "test_read_item",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "dict[str, str]",
                    "fastapi.testclienTestClient",
                    "aiohttp.test_utils.TestClient",
                    "Dict[str, str]"
                ],
                "superuser_token_headers": [
                    "dict"
                ],
                "db": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        }
    },
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/tests/api/api_v1/test_login.py": {
        "test_get_access_token": {
            "name": "test_get_access_token",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient",
                    "Dict[str, str]",
                    "aiohttp.test_utils.TestClient"
                ]
            }
        },
        "test_use_access_token": {
            "name": "test_use_access_token",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient"
                ],
                "superuser_token_headers": [
                    "Dict[(str, str)]"
                ]
            }
        }
    },
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/tests/api/api_v1/test_users.py": {
        "test_get_users_superuser_me": {
            "name": "test_get_users_superuser_me",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "dict[str, str]",
                    "fastapi.testclienTestClient",
                    "Dict[str, str]",
                    "aiohttp.test_utils.TestClient"
                ],
                "superuser_token_headers": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "test_get_users_normal_user_me": {
            "name": "test_get_users_normal_user_me",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient",
                    "aiohttp.test_utils.TestClient"
                ],
                "normal_user_token_headers": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "test_create_user_new_email": {
            "name": "test_create_user_new_email",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient"
                ],
                "superuser_token_headers": [
                    "dict"
                ],
                "db": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "test_get_existing_user": {
            "name": "test_get_existing_user",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "dict[str, str]",
                    "fastapi.testclienTestClient",
                    "Dict[str, str]"
                ],
                "superuser_token_headers": [
                    "dict"
                ],
                "db": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "test_create_user_existing_username": {
            "name": "test_create_user_existing_username",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "aiohttp.test_utils.TestClient",
                    "fastapi.testclienTestClient"
                ],
                "superuser_token_headers": [
                    "dict"
                ],
                "db": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "test_create_user_by_normal_user": {
            "name": "test_create_user_by_normal_user",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient",
                    "aiohttp.test_utils.TestClient",
                    "dict"
                ],
                "normal_user_token_headers": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "test_retrieve_users": {
            "name": "test_retrieve_users",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "dict[str, str]",
                    "fastapi.testclienTestClient",
                    "Dict[str, str]"
                ],
                "superuser_token_headers": [
                    "dict"
                ],
                "db": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        }
    },
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/tests/api/api_v1/__init__.py": {},
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/tests/crud/test_item.py": {
        "test_create_item": {
            "name": "test_create_item",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "test_get_item": {
            "name": "test_get_item",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "test_update_item": {
            "name": "test_update_item",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "test_delete_item": {
            "name": "test_delete_item",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        }
    },
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/tests/crud/test_user.py": {
        "test_create_user": {
            "name": "test_create_user",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "test_authenticate_user": {
            "name": "test_authenticate_user",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "test_not_authenticate_user": {
            "name": "test_not_authenticate_user",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "test_check_if_user_is_active": {
            "name": "test_check_if_user_is_active",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "test_check_if_user_is_active_inactive": {
            "name": "test_check_if_user_is_active_inactive",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "test_check_if_user_is_superuser": {
            "name": "test_check_if_user_is_superuser",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "test_check_if_user_is_superuser_normal_user": {
            "name": "test_check_if_user_is_superuser_normal_user",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "test_get_user": {
            "name": "test_get_user",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "test_update_user": {
            "name": "test_update_user",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        }
    },
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/tests/crud/__init__.py": {},
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/tests/utils/item.py": {
        "create_random_item": {
            "name": "create_random_item",
            "location": 11,
            "return": [
                "str",
                "int",
                "models.User",
                "Dict[str, Any]"
            ],
            "arguments": {
                "db": [
                    "int",
                    "str",
                    "list[int]",
                    "List[int]",
                    "sqlalchemy.orm.Session"
                ]
            }
        }
    },
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/tests/utils/user.py": {
        "user_authentication_headers": {
            "name": "user_authentication_headers",
            "location": 13,
            "return": [
                "dict[typing.Text, typing.Text]",
                "tests.mock_vws.utils.Endpoint",
                "dict"
            ],
            "arguments": {}
        },
        "create_random_user": {
            "name": "create_random_user",
            "location": 25,
            "return": [
                "str",
                "list[typing.Union[typing.Any,typing.Any]]",
                "zam_repondeur.models.Lecture",
                "list[tuple[typing.Union[int,str,str]]]",
                "user_models.User",
                "app.models.user.User",
                "lms.lmsdb.models.User",
                "lms.lmsdb.models.Solution",
                "discord.User",
                "core.models.UserPreferences"
            ],
            "arguments": {
                "db": [
                    "abilian.core.sqlalchemy.SQLAlchemy",
                    "sqlalchemy.engine.base.Engine"
                ]
            }
        },
        "authentication_token_from_email": {
            "name": "authentication_token_from_email",
            "location": 33,
            "return": [
                "str",
                "Union[bool, str]",
                "Optional[cmk.utils.type_defs.SectionName]"
            ],
            "arguments": {}
        }
    },
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/tests/utils/utils.py": {
        "random_lower_string": {
            "name": "random_lower_string",
            "location": 10,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]",
                "dict"
            ],
            "arguments": {}
        },
        "random_email": {
            "name": "random_email",
            "location": 14,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {}
        },
        "get_superuser_token_headers": {
            "name": "get_superuser_token_headers",
            "location": 18,
            "return": [
                "dict[typing.Text, typing.Text]",
                "str",
                "List[dict]",
                "Dict[str, Any]",
                "Dict[str, Union[str, int]]"
            ],
            "arguments": {
                "client": [
                    "fastapi.testclienTestClient",
                    "List[str]",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "full-stack-fastapi-postgresql-master/{{cookiecutter.project_slug}}/backend/app/app/tests/utils/__init__.py": {}
}
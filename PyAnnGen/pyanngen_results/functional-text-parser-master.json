{
    "functional-text-parser-master/app.py": {},
    "functional-text-parser-master/app/routes.py": {
        "encode": {
            "name": "encode",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str",
                    "bool",
                    "Type[str]",
                    "Type",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ]
            }
        }
    },
    "functional-text-parser-master/app/__init__.py": {},
    "functional-text-parser-master/app/functions/rle.py": {
        "listify_string": {
            "name": "listify_string",
            "location": 7,
            "return": [
                "list"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Collection[int]",
                    "Callable",
                    "Collection",
                    "FrozenSet[int]",
                    "frozenset"
                ]
            }
        },
        "group_consecutive_elements": {
            "name": "group_consecutive_elements",
            "location": 13,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "l": [
                    "List",
                    "numpy.ndarray",
                    "Callable",
                    "Optional[Callable]",
                    "int",
                    "float"
                ]
            }
        },
        "compare_tuples": {
            "name": "compare_tuples",
            "location": 19,
            "return": [
                "list"
            ],
            "arguments": {
                "t": [
                    "List[tuple]",
                    "int",
                    "Dict[str,list[str]]",
                    "Union[pandas.DataFrame,numpy.ndarray]",
                    "Dict[str,List[str]]"
                ]
            }
        },
        "get_break_points": {
            "name": "get_break_points",
            "location": 25,
            "return": [
                "list"
            ],
            "arguments": {
                "pair_comparison": [
                    "list",
                    "str",
                    "Sequence[T]",
                    "tuple",
                    "List[int]"
                ]
            }
        },
        "break_list": {
            "name": "break_list",
            "location": 35,
            "return": [
                "list"
            ],
            "arguments": {
                "list": [
                    "List",
                    "List[dict]",
                    "List[str]",
                    "Optional[List[T]]",
                    "List[T]",
                    "None"
                ],
                "break_points": [
                    "List[str]",
                    "Dict",
                    "Dict[str,Any]",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "aggregate_broken_list": {
            "name": "aggregate_broken_list",
            "location": 45,
            "return": [
                "str",
                "Dict[str,Any]",
                "int",
                "Dict[str,float]",
                "Tuple[Union[str,str,str]]",
                "Dict[str,set[str]]"
            ],
            "arguments": {
                "broken_list": [
                    "List",
                    "int",
                    "List[int]",
                    "List[str]",
                    "List[OrderedDict]",
                    "numpy.ndarray"
                ]
            }
        },
        "rle": {
            "name": "rle",
            "location": 51,
            "return": [
                "bool",
                "Optional[List[int]]",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "string": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "functional-text-parser-master/app/functions/__init__.py": {},
    "functional-text-parser-master/app/tests/test_rle.py": {
        "test_listify_string": {
            "name": "test_listify_string",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_pairs": {
            "name": "test_get_pairs",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compare_pairs": {
            "name": "test_compare_pairs",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_break_points": {
            "name": "test_get_break_points",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_break_list": {
            "name": "test_break_list",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_aggregate_broken_list": {
            "name": "test_aggregate_broken_list",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rle": {
            "name": "test_rle",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "functional-text-parser-master/app/tests/__init__.py": {}
}
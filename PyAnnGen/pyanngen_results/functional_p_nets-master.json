{
    "functional_p_nets-master/arc.py": {},
    "functional_p_nets-master/arc_type.py": {},
    "functional_p_nets-master/des_tracking.py": {
        "DesTracking.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transitions_fired_list": [
                    "List",
                    "str",
                    "List[str]",
                    "bytes",
                    "int"
                ],
                "transitions_fired_cost": [
                    "List",
                    "List[str]",
                    "int",
                    "Iterable",
                    "Optional[Sequence[Any]]",
                    "Tuple[int,int]",
                    "bool"
                ]
            }
        },
        "DesTracking.add_to_transitions_fired_list": {
            "name": "add_to_transitions_fired_list",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transition_name": [
                    "List[str]",
                    "str",
                    "int"
                ],
                "transitions_fired_cost": [
                    "List[str]",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "functional_p_nets-master/net.py": {
        "get_round_limit": {
            "name": "get_round_limit",
            "location": 174,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "new_marking_value": {
            "name": "new_marking_value",
            "location": 189,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "arc_type": [
                    "str",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "marking": [
                    "int",
                    "str",
                    "Type"
                ],
                "weight": [
                    "int",
                    "str",
                    "Type"
                ]
            }
        },
        "Net.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transitions": [
                    "bool",
                    "float",
                    "str"
                ],
                "arcs": [
                    "bool",
                    "float",
                    "str"
                ],
                "places": [
                    "bool",
                    "float",
                    "str"
                ],
                "determine_transition_to_fire": [
                    "bool",
                    "float",
                    "str"
                ],
                "des_tracking": [
                    "bool",
                    "float",
                    "str"
                ],
                "cost": [
                    "List",
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "Net.run": {
            "name": "run",
            "location": 25,
            "return": [
                "Awaitable",
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "Net.run_with_net_list": {
            "name": "run_with_net_list",
            "location": 34,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Net.handle_empty_inputs": {
            "name": "handle_empty_inputs",
            "location": 49,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Net.handle_empty_inputs_list": {
            "name": "handle_empty_inputs_list",
            "location": 56,
            "return": [
                "Dict[str,Any]",
                "bool",
                "List[str]",
                "str",
                "Sequence[Sequence[str]]",
                "int",
                "bytes",
                "List[Dict[Any,Any]]",
                "Callable[,bool]"
            ],
            "arguments": {
                "self": [],
                "running_list": [
                    "Dict[str,Any]",
                    "bool",
                    "str"
                ]
            }
        },
        "Net.step": {
            "name": "step",
            "location": 65,
            "return": [
                "Net"
            ],
            "arguments": {
                "self": [
                    "_TNet@@Net@@"
                ]
            }
        },
        "Net.enabled_transitions": {
            "name": "enabled_transitions",
            "location": 77,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Net.all_input_arcs_enabled": {
            "name": "all_input_arcs_enabled",
            "location": 87,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "int",
                    "Union[int,float]",
                    "float"
                ]
            }
        },
        "Net.fire": {
            "name": "fire",
            "location": 97,
            "return": [
                "Net"
            ],
            "arguments": {
                "self": [
                    "_TNet@@Net@@"
                ],
                "transition": [
                    "float",
                    "str"
                ]
            }
        },
        "Net.new_place_after_firing": {
            "name": "new_place_after_firing",
            "location": 115,
            "return": [
                "Dict",
                "Dict[str,place.Place]",
                "int",
                "Dict[str,float]"
            ],
            "arguments": {
                "self": [],
                "arc_list": [
                    "List",
                    "bool",
                    "List[dict[str,Any]]",
                    "List[list[str]]",
                    "List[Dict[str,Any]]",
                    "List[List[str]]"
                ],
                "places_dict": [
                    "Dict[str,place.Place]",
                    "Dict",
                    "Dict[str,Any]",
                    "Union[AbstractSetIntStr,MappingIntStrAny]"
                ]
            }
        },
        "Net.generate_list_of_places": {
            "name": "generate_list_of_places",
            "location": 134,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Net.marked_places": {
            "name": "marked_places",
            "location": 137,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Net.is_transition_inihibited": {
            "name": "is_transition_inihibited",
            "location": 141,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "str",
                    "int"
                ]
            }
        },
        "Net.visited_places": {
            "name": "visited_places",
            "location": 150,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Net.empty_inputs": {
            "name": "empty_inputs",
            "location": 154,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Net.track_transitions_fired": {
            "name": "track_transitions_fired",
            "location": 157,
            "return": [
                "Callable",
                "str",
                "Tuple[Any, Any, Any]",
                "list"
            ],
            "arguments": {
                "self": [],
                "transition_name": [
                    "str",
                    "List[str]"
                ],
                "transitions_fired_cost": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Net.current_transition_cost": {
            "name": "current_transition_cost",
            "location": 164,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "float",
                    "str",
                    "Iterable[str]",
                    "Callable",
                    "List[cirq.Qid]"
                ]
            }
        }
    },
    "functional_p_nets-master/place.py": {},
    "functional_p_nets-master/transition.py": {
        "Transition.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]"
                ],
                "rate": [
                    "int",
                    "List[list[str]]",
                    "Sequence",
                    "bool",
                    "MutableMapping",
                    "List[List[str]]",
                    "MutableMapping[str,Any]"
                ],
                "input": [
                    "int",
                    "List[list[str]]",
                    "Sequence",
                    "bool",
                    "MutableMapping",
                    "List[List[str]]",
                    "MutableMapping[str,Any]"
                ],
                "output": [
                    "str",
                    "bytes",
                    "Dict",
                    "List[int]",
                    "Container[str]",
                    "int"
                ],
                "inhibit": [
                    "str",
                    "bytes",
                    "Dict",
                    "List[int]",
                    "Container[str]",
                    "int"
                ],
                "control_rate": [
                    "int",
                    "List[list[str]]",
                    "Sequence",
                    "bool",
                    "MutableMapping",
                    "List[List[str]]",
                    "MutableMapping[str,Any]"
                ],
                "player_control": [
                    "int",
                    "List[list[str]]",
                    "Sequence",
                    "bool",
                    "MutableMapping",
                    "List[List[str]]",
                    "MutableMapping[str,Any]"
                ],
                "fire_cost": [
                    "int",
                    "bool",
                    "List[List[str]]",
                    "MutableMapping[str,Any]",
                    "Sequence"
                ]
            }
        }
    },
    "functional_p_nets-master/tests/test_net.py": {
        "pick_first": {
            "name": "pick_first",
            "location": 51,
            "return": [
                "transition.Transition",
                "str",
                "Dict[str,Dict[str,int]]",
                "Set",
                "Dict[str,Any]",
                "List"
            ],
            "arguments": {
                "list_of_enabled": [
                    "List[transition.Transition]",
                    "Type[DataFrame]",
                    "bool",
                    "T",
                    "Type"
                ]
            }
        }
    },
    "functional_p_nets-master/tests/__init__.py": {}
}
{
    "funky-master/setup.py": {
        "long_description": {
            "name": "long_description",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "install_requires": {
            "name": "install_requires",
            "location": 17,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "tests_require": {
            "name": "tests_require",
            "location": 21,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "_requires": {
            "name": "_requires",
            "location": 25,
            "return": [
                "Generator[(str, Any, None)]"
            ],
            "arguments": {
                "reqtxt_basename": [
                    "bool",
                    "pathlib.Path",
                    "Callable[pathlib.Path,int]",
                    "Optional[Callable[[pathlib.Path],int]]",
                    "None"
                ]
            }
        }
    },
    "funky-master/funky/app.py": {
        "main": {
            "name": "main",
            "location": 21,
            "return": [
                "int",
                "str",
                "bool",
                "Set[str]",
                "Optional[int]",
                "Optional[str]"
            ],
            "arguments": {
                "argv": [
                    "List[str]",
                    "None",
                    "List[int]",
                    "argparse.Namespace"
                ]
            }
        },
        "run_init": {
            "name": "run_init",
            "location": 58,
            "return": [
                "int"
            ],
            "arguments": {
                "shell": [
                    "bool",
                    "List[T]",
                    "Sequence[dict]",
                    "Optional[List[str]]",
                    "List",
                    "List[str]",
                    "List[Tuple[str,str]]",
                    "None",
                    "List[tuple[Union[str,str]]]"
                ]
            }
        },
        "run_setup_shell": {
            "name": "run_setup_shell",
            "location": 67,
            "return": [
                "int"
            ],
            "arguments": {
                "shell": [
                    "int",
                    "List[str]",
                    "float",
                    "Type",
                    "Type[SerializationDialect]",
                    "Union[int,float]"
                ]
            }
        },
        "_get_argparser": {
            "name": "_get_argparser",
            "location": 93,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {
                "verbose": [
                    "bool",
                    "str",
                    "T",
                    "Dict"
                ]
            }
        },
        "_get_argparser.format_docstring": {
            "name": "format_docstring",
            "location": 143,
            "return": [
                "str",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "doc": [
                    "str",
                    "Optional[Any]",
                    "Optional[int]",
                    "Any",
                    "Optional[str]",
                    "Union[str, pathlib.Path, None]"
                ]
            }
        },
        "_CmdAction.__call__": {
            "name": "__call__",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "str",
                    "argparse.ArgumentParser",
                    "None",
                    "Optional[str]"
                ],
                "namespace": [
                    "argparse.ArgumentParser",
                    "argparse._SubParsersAction"
                ],
                "values": [
                    "str",
                    "Dict[str,Any]",
                    "argparse.Namespace",
                    "Optional[str]"
                ],
                "option_string": [
                    "str",
                    "None",
                    "argparse.Namespace",
                    "argparse.ArgumentParser"
                ]
            }
        },
        "_CmdAction.command": {
            "name": "command",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Callable[...,str]",
                    "Iterable[T]",
                    "List",
                    "Dict"
                ],
                "args": []
            }
        }
    },
    "funky-master/funky/commands.py": {
        "Command.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "color": [
                    "bool",
                    "int",
                    "float"
                ],
                "global_": [
                    "bool",
                    "int",
                    "float"
                ],
                "verbose": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "Command.abort": {
            "name": "abort",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Command.purge_db": {
            "name": "purge_db",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.commit": {
            "name": "commit",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.read_db_file": {
            "name": "read_db_file",
            "location": 110,
            "return": [
                "Dict",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "db_fname": [
                    "str",
                    "bool"
                ]
            }
        },
        "Command.__call__": {
            "name": "__call__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Show.show": {
            "name": "show",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "funk": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Show.show_search": {
            "name": "show_search",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "Dict",
                    "List[str]",
                    "Tuple[Tuple[int,int]]",
                    "bytes",
                    "Tuple[tuple[Union[int,int]]]"
                ]
            }
        },
        "Show.__call__": {
            "name": "__call__",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rename.__call__": {
            "name": "__call__",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Edit.remove_funk": {
            "name": "remove_funk",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Edit.edit_funk": {
            "name": "edit_funk",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "startinsert": [
                    "bool",
                    "str",
                    "Optional[List[Dict]]",
                    "List[int]"
                ]
            }
        },
        "Edit._editor_cmd_list": {
            "name": "_editor_cmd_list",
            "location": 280,
            "return": [
                "List[builtins.str]"
            ],
            "arguments": {
                "startinsert": [
                    "bool"
                ]
            }
        },
        "Edit._apply_shortcuts": {
            "name": "_apply_shortcuts",
            "location": 300,
            "return": [
                "Union[(builtins.str, _T0)]"
            ],
            "arguments": {
                "cmd_string": [
                    "str",
                    "int"
                ]
            }
        },
        "Edit.__call__": {
            "name": "__call__",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Remove.__call__": {
            "name": "__call__",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Add.__call__": {
            "name": "__call__",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "funky-master/funky/errors.py": {
        "FunkyError.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunkNotDefinedError.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "funky-master/funky/__init__.py": {},
    "funky-master/funky/__main__.py": {},
    "funky-master/funky/utils/log.py": {
        "init_logger": {
            "name": "init_logger",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "debug": [
                    "List[str]",
                    "str",
                    "bool",
                    "list",
                    "dict",
                    "bytes"
                ],
                "verbose": [
                    "raiden.utils.Address",
                    "bool",
                    "int"
                ]
            }
        },
        "_add_vdebug_level": {
            "name": "_add_vdebug_level",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "logging_": [
                    "List[Dict[str, float]]",
                    "logging.Logger",
                    "Exception",
                    "str"
                ]
            }
        },
        "_getFormatter": {
            "name": "_getFormatter",
            "location": 71,
            "return": [
                "logging.Formatter"
            ],
            "arguments": {
                "verbose": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "_add_vdebug_level.vdebug": {
            "name": "vdebug",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        }
    },
    "funky-master/funky/utils/xdg.py": {
        "getdir": {
            "name": "getdir",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "userdir": [
                    "str",
                    "Set[str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "_getter_factory": {
            "name": "_getter_factory",
            "location": 40,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "envvar": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "dirfmt": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "_create_dir": {
            "name": "_create_dir",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "bool"
                ]
            }
        },
        "_getter_factory._getter": {
            "name": "_getter",
            "location": 56,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {}
        }
    },
    "funky-master/funky/utils/__init__.py": {
        "getch": {
            "name": "getch",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "prompt": [
                    "str",
                    "None",
                    "bool",
                    "IO[bytes]",
                    "IO"
                ]
            }
        }
    },
    "funky-master/scripts/__init__.py": {},
    "funky-master/scripts/shell/__init__.py": {},
    "funky-master/tests/conftest.py": {
        "xdg_data_home": {
            "name": "xdg_data_home",
            "location": 15,
            "return": [
                "Iterator[pathlib.Path]",
                "Generator"
            ],
            "arguments": {
                "tmp_path_factory": [
                    "pathlib.Path",
                    "path.Path",
                    "str"
                ]
            }
        }
    },
    "funky-master/tests/test_app.py": {
        "test_main": {
            "name": "test_main",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "commands": [
                    "mock.MagicMock"
                ],
                "argv": [],
                "cmd_cls_string": [
                    "mock.MagicMock"
                ]
            }
        },
        "test_main_validate_args": {
            "name": "test_main_validate_args",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "logger": [],
                "argv": []
            }
        },
        "test_main_exceptions": {
            "name": "test_main_exceptions",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "_get_argparser": [
                    "bool"
                ]
            }
        },
        "test_main_exceptions.raise_error": {
            "name": "raise_error",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "opt": [
                    "List[str]",
                    "bool",
                    "Exception"
                ],
                "verbose": [
                    "bool",
                    "List[str]",
                    "Exception"
                ]
            }
        }
    },
    "funky-master/tests/test_commands.py": {
        "cleandir": {
            "name": "cleandir",
            "location": 28,
            "return": [
                "Iterator[None]",
                "Generator"
            ],
            "arguments": {}
        },
        "fake_db": {
            "name": "fake_db",
            "location": 377,
            "return": [
                "Iterator[Dict[str,str]]",
                "Generator"
            ],
            "arguments": {
                "funk_dict": [
                    "str",
                    "Dict[str,str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "_fake_db_factory": {
            "name": "_fake_db_factory",
            "location": 384,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "DB_FILENAME": [
                    "bool"
                ],
                "funk_dict_builder": [
                    "bool"
                ]
            }
        },
        "funk_dict": {
            "name": "funk_dict",
            "location": 403,
            "return": [
                "Dict[Text,Text]",
                "Dict[str,Any]",
                "Dict",
                "int",
                "Dict[int,List[str]]"
            ],
            "arguments": {}
        },
        "args": {
            "name": "args",
            "location": 421,
            "return": [
                "Args",
                "Dict[str,Any]",
                "Dict",
                "Dict[str,float]",
                "Dict[str,Dict[str,Any]]"
            ],
            "arguments": {
                "request": []
            }
        },
        "load_funks": {
            "name": "load_funks",
            "location": 429,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "Test_Add_and_Edit.setup": {
            "name": "setup",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Test_Add_and_Edit.test_add": {
            "name": "test_add",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patch_tempfile": [
                    "bool",
                    "str",
                    "List[int]",
                    "Optional[str]",
                    "None"
                ],
                "add_cmd": [
                    "Optional[NetworkManager]",
                    "Dict",
                    "None",
                    "bool"
                ],
                "funk_dict": [
                    "bool"
                ]
            }
        },
        "Test_Add_and_Edit.test_add_empty": {
            "name": "test_add_empty",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patch_tempfile": [
                    "bool",
                    "str",
                    "Iterable[Any]",
                    "Dict[str,float]"
                ]
            }
        },
        "Test_Add_and_Edit.test_edit": {
            "name": "test_edit",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patch_tempfile": [
                    "str",
                    "float"
                ],
                "edit_cmd": [
                    "Optional[Game]",
                    "int",
                    "None"
                ]
            }
        },
        "Test_Add_and_Edit.test_edit_empty": {
            "name": "test_edit_empty",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patch_tempfile": [
                    "bool",
                    "List[int]",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "funk_dict": [
                    "str",
                    "Iterable[str]",
                    "float",
                    "List",
                    "int"
                ]
            }
        },
        "Test_Add_and_Edit.test_edit_format": {
            "name": "test_edit_format",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patch_tempfile": [
                    "str"
                ],
                "funk_dict": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "Test_Add_and_Edit.test_edit_funk_not_defined": {
            "name": "test_edit_funk_not_defined",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test_Add_and_Edit.add_cmd": {
            "name": "add_cmd",
            "location": 135,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "Test_Add_and_Edit.edit_cmd": {
            "name": "edit_cmd",
            "location": 141,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "Test_Add_and_Edit.patch_tempfile": {
            "name": "patch_tempfile",
            "location": 147,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestRename.test_rename": {
            "name": "test_rename",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rename_cmd": [
                    "Optional[dict]",
                    "Dict",
                    "Optional[Page]",
                    "None"
                ],
                "funk_dict": [
                    "bool",
                    "Dict[str,Any]",
                    "TextIO"
                ]
            }
        },
        "TestRename.test_rename_fail": {
            "name": "test_rename_fail",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRename.test_rename_overwrite": {
            "name": "test_rename_overwrite",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "getch": [
                    "Sequence",
                    "float",
                    "Optional[float]",
                    "None",
                    "Optional[int]",
                    "int"
                ],
                "y_or_n": [
                    "Sequence",
                    "float",
                    "Optional[float]",
                    "None",
                    "Optional[int]",
                    "int"
                ],
                "funk_dict": [
                    "str",
                    "Dict",
                    "Dict[int,dict]",
                    "float"
                ]
            }
        },
        "TestRename.rename_cmd": {
            "name": "rename_cmd",
            "location": 208,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "TestShow.test_show": {
            "name": "test_show",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capsys": [
                    "str",
                    "float"
                ],
                "show_cmd": [
                    "bool",
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "TestShow.test_show_prefix": {
            "name": "test_show_prefix",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capsys": [
                    "int",
                    "str",
                    "List[int]",
                    "Union[str, float]",
                    "bool",
                    "raiden.tests.integration.fixtures.raiden_network.RestartNode"
                ],
                "show_expected": [
                    "Optional[BaseException]",
                    "BaseException",
                    "Type",
                    "Callable",
                    "None",
                    "mypy.plugin.CheckerPluginInterface",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "TestShow.test_show_verbose": {
            "name": "test_show_verbose",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capsys": [
                    "nanaimo.fixtures.Fixture"
                ],
                "funk_dict": [
                    "str",
                    "int",
                    "List[List[int]]",
                    "List[int]"
                ]
            }
        },
        "TestShow.test_show_all": {
            "name": "test_show_all",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capsys": [
                    "str",
                    "nanaimo.fixtures.Fixture",
                    "List[str]"
                ],
                "show_expected": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "TestShow.test_show_failure__NOT_DEFINED": {
            "name": "test_show_failure__NOT_DEFINED",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShow.test_show_failure__NONE_ARE_DEFINED": {
            "name": "test_show_failure__NONE_ARE_DEFINED",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShow.test_show_failure__NO_DB": {
            "name": "test_show_failure__NO_DB",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "show_cmd": []
            }
        },
        "TestShow.show_cmd": {
            "name": "show_cmd",
            "location": 291,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "show_expected": [
                    "float",
                    "bool",
                    "Callable[...,collections.abc.Awaitable]",
                    "Callable[...,Awaitable]",
                    "int",
                    "Callable[...,None]"
                ]
            }
        },
        "TestShow.show_expected": {
            "name": "show_expected",
            "location": 300,
            "return": [
                "Dict[Text,str]",
                "bool",
                "List",
                "List[object]"
            ],
            "arguments": {
                "self": [],
                "funk_dict": [
                    "str",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        },
        "TestRemove.test_remove": {
            "name": "test_remove",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "remove_cmd": [
                    "str",
                    "float"
                ]
            }
        },
        "TestRemove.test_remove_last": {
            "name": "test_remove_last",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "funk_dict": [
                    "str",
                    "List[str]",
                    "List[list[int]]",
                    "int",
                    "List[List[int]]"
                ]
            }
        },
        "TestRemove.test_remove_all": {
            "name": "test_remove_all",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "getch": [
                    "int",
                    "float"
                ],
                "y_or_n": [
                    "int",
                    "float"
                ]
            }
        },
        "TestRemove.test_remove_funk_not_exist": {
            "name": "test_remove_funk_not_exist",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemove.remove_cmd": {
            "name": "remove_cmd",
            "location": 367,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "_fake_db_factory._fake_db": {
            "name": "_fake_db",
            "location": 389,
            "return": [
                "Iterator[Dict[str,str]]",
                "Generator"
            ],
            "arguments": {}
        },
        "Test_Add_and_Edit.patch_tempfile._patch_tempfile": {
            "name": "_patch_tempfile",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd_string": [
                    "str",
                    "Union[None, bytes]"
                ]
            }
        }
    },
    "funky-master/tests/test_shell.py": {
        "tmp_home": {
            "name": "tmp_home",
            "location": 27,
            "return": [
                "Iterator[pathlib.Path]",
                "Generator[Union[str,None,dict[str,pathlib.Path]]]"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "None",
                    "Dict[str,pathlib.Path]",
                    "pathlib.Path",
                    "Optional[str]",
                    "pathlib2.Path",
                    "norfs.fs.base.Path"
                ]
            }
        },
        "test_init": {
            "name": "test_init",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "shell": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "pathlib2.Path"
                ],
                "snapshot": [
                    "str",
                    "List[str]",
                    "Dict[str,Any]",
                    "int",
                    "bytes",
                    "float",
                    "Optional[int]",
                    "None"
                ],
                "capsys": [
                    "str",
                    "app.wikipedia.Wikipedia",
                    "bool"
                ]
            }
        },
        "test_setup_shell": {
            "name": "test_setup_shell",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "shell": [],
                "contents": [],
                "tmp_home": [
                    "str",
                    "pathlib.Path"
                ],
                "snapshot": [
                    "str",
                    "pathlib.Path"
                ]
            }
        }
    },
    "funky-master/tests/utils/test_log.py": {
        "test_init_logger": {
            "name": "test_init_logger",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "debug": [
                    "logging.Logger"
                ]
            }
        },
        "test_logfile": {
            "name": "test_logfile",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "xdg_data_home": [
                    "Dict",
                    "List[str]",
                    "str",
                    "Dict[str,Dict[str,str]]",
                    "Dict[str,dict[str,str]]"
                ]
            }
        }
    },
    "funky-master/tests/utils/test_utils.py": {
        "test_getch": {
            "name": "test_getch",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "read": [],
                "fileno": [],
                "_": [
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "__": [
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "capsys": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "funky-master/tests/utils/test_xdg.py": {
        "test_getdir": {
            "name": "test_getdir",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "str",
                    "int",
                    "Dict[str,str]"
                ],
                "expected": [
                    "str",
                    "int",
                    "Dict[str,str]"
                ]
            }
        },
        "test_getdir_failure": {
            "name": "test_getdir_failure",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
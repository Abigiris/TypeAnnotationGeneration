{
    "fuzzy-tribble-master/setup.py": {},
    "fuzzy-tribble-master/src/tribble/cli.py": {
        "main": {
            "name": "main",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "click.core.Context",
                    "click.Context"
                ],
                "host": [
                    "str",
                    "bool"
                ],
                "user": [
                    "str",
                    "bool"
                ],
                "password": [
                    "str",
                    "bool"
                ],
                "schema": [
                    "str",
                    "bool"
                ]
            }
        },
        "create_db": {
            "name": "create_db",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "dict[str, typing.Any]",
                    "bool",
                    "Dict[str, Any]",
                    "click.Context"
                ],
                "runtime_user": [
                    "str",
                    "bool",
                    "int"
                ],
                "runtime_host": [
                    "str",
                    "bool",
                    "int"
                ],
                "force": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "init_db": {
            "name": "init_db",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "click.core.Context",
                    "click.Context"
                ],
                "force": [
                    "bool",
                    "click.Context"
                ]
            }
        },
        "load": {
            "name": "load",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "input_dir": [
                    "str"
                ]
            }
        }
    },
    "fuzzy-tribble-master/src/tribble/contract.py": {
        "Contract.__repr__": {
            "name": "__repr__",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Contract.__eq__": {
            "name": "__eq__",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, float]",
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "fuzzy-tribble-master/src/tribble/database.py": {
        "connect_db": {
            "name": "connect_db",
            "location": 12,
            "return": [
                "engine.base.Engine"
            ],
            "arguments": {
                "creds": [
                    "Creds"
                ]
            }
        },
        "create_db": {
            "name": "create_db",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "engine": [
                    "engine.base.Engine"
                ],
                "database_name": [
                    "str"
                ],
                "runtime_user": [
                    "str"
                ],
                "runtime_host": [
                    "str"
                ],
                "force": [
                    "bool"
                ]
            }
        }
    },
    "fuzzy-tribble-master/src/tribble/loader.py": {
        "load_dataframe": {
            "name": "load_dataframe",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "str",
                    "List[Dict[str, Any]]",
                    "Union[str, bytes]"
                ],
                "model": [
                    "sqlalchemy.orm.decl_api._DeclarativeBase"
                ]
            }
        }
    },
    "fuzzy-tribble-master/src/tribble/log.py": {
        "get_logger": {
            "name": "get_logger",
            "location": 8,
            "return": [
                "logging.Logger"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "fuzzy-tribble-master/src/tribble/reader.py": {
        "_json_blobs": {
            "name": "_json_blobs",
            "location": 11,
            "return": [
                "Iterator[Dict[(str, Any)]]"
            ],
            "arguments": {
                "input_dir": [
                    "str"
                ]
            }
        },
        "_grouper": {
            "name": "_grouper",
            "location": 19,
            "return": [
                "Iterable[T]"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[T]"
                ],
                "group_length": [
                    "int"
                ]
            }
        },
        "read_dir": {
            "name": "read_dir",
            "location": 26,
            "return": [
                "bool",
                "Optional[str]",
                "Union[str, Pattern]"
            ],
            "arguments": {
                "input_dir": [
                    "str"
                ],
                "grouping_length": [
                    "int"
                ]
            }
        }
    },
    "fuzzy-tribble-master/src/tribble/transform.py": {
        "transform": {
            "name": "transform",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "df": [
                    "pandas.DataFrame"
                ]
            }
        },
        "_apply_transform_list": {
            "name": "_apply_transform_list",
            "location": 38,
            "return": [
                "List[int]",
                "int",
                "List[str]",
                "tuple[]",
                "str",
                "bytes",
                "dict[, ]",
                "bool",
                "Sequence[int]",
                "list['Book']",
                "None"
            ],
            "arguments": {
                "df": [
                    "int",
                    "str",
                    "pandas.DataFrame",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "transformer_classes": [
                    "List[Type[base.BaseTransform]]"
                ]
            }
        },
        "_group_transform_df": {
            "name": "_group_transform_df",
            "location": 46,
            "return": [
                "str",
                "List[Dict]",
                "list",
                "List[List[Any]]"
            ],
            "arguments": {
                "df": [
                    "pandas.DataFrame",
                    "bool",
                    "Callable",
                    "Mapping[str, Any]",
                    "dict"
                ]
            }
        }
    },
    "fuzzy-tribble-master/src/tribble/__init__.py": {},
    "fuzzy-tribble-master/src/tribble/transformers/base.py": {
        "BaseTransform.apply": {
            "name": "apply",
            "location": 7,
            "return": [
                "pandas.DataFrame",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "dict[, ]",
                    "bool",
                    "dict"
                ]
            }
        }
    },
    "fuzzy-tribble-master/src/tribble/transformers/clear_blanks.py": {
        "ClearBlanks.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClearBlanks._clear_blank": {
            "name": "_clear_blank",
            "location": 14,
            "return": [
                "Optional[_T0]"
            ],
            "arguments": {
                "data": [
                    "_T0"
                ]
            }
        },
        "ClearBlanks.apply": {
            "name": "apply",
            "location": 17,
            "return": [
                "dict[, ]",
                "str",
                "bytes",
                "Optional[float]",
                "dict[str, typing.Any]",
                "int",
                "list[]",
                "List[Dict[str, Any]]",
                "typing.Mapping",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "bytes",
                    "dict",
                    "dict[str, typing.Any]",
                    "T",
                    "list[]",
                    "Dict[str, Any]",
                    "typing.Mapping",
                    "Union[Dict, List]",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "fuzzy-tribble-master/src/tribble/transformers/contract_date_cleaner.py": {
        "ContractDateCleaner._set_null_contract_dates": {
            "name": "_set_null_contract_dates",
            "location": 13,
            "return": [
                "str",
                "pandas.DataFrame",
                "Tuple[int, int]",
                "Sequence[str]",
                "int"
            ],
            "arguments": {
                "row": [
                    "pandas.Series",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "int",
                    "Dict[str, Any]",
                    "Optional[float]"
                ]
            }
        },
        "ContractDateCleaner._clear_invalid_dates": {
            "name": "_clear_invalid_dates",
            "location": 19,
            "return": [
                "Tuple[int, int]",
                "float",
                "bool",
                "pandas.DataFrame",
                "int"
            ],
            "arguments": {
                "row": [
                    "typing.Any",
                    "pandas.Series",
                    "float",
                    "dict[, ]",
                    "bool",
                    "Any",
                    "dict"
                ]
            }
        },
        "ContractDateCleaner._clean_row": {
            "name": "_clean_row",
            "location": 27,
            "return": [
                "Tuple[int, int]",
                "bool",
                "float",
                "pandas.DataFrame"
            ],
            "arguments": {
                "row": [
                    "pandas.Series",
                    "dict",
                    "Dict[int, Dict[str, str]]",
                    "Optional[\"Response\"]",
                    "Optional[Tuple[int, int]]",
                    "int"
                ]
            }
        },
        "ContractDateCleaner._end_not_before_start": {
            "name": "_end_not_before_start",
            "location": 45,
            "return": [
                "int",
                "float",
                "base.Connection",
                "bool"
            ],
            "arguments": {
                "row": [
                    "pandas.Series",
                    "List[int]",
                    "bool",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "ContractDateCleaner.apply": {
            "name": "apply",
            "location": 49,
            "return": [
                "str",
                "int",
                "dict",
                "float"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "list[]",
                    "list",
                    "dict[str, typing.Any]",
                    "base.JSONDict",
                    "int",
                    "Dict[str, Any]",
                    "None",
                    "\"GraphTuple\"",
                    "Optional[int]"
                ]
            }
        }
    },
    "fuzzy-tribble-master/src/tribble/transformers/contract_start_normalizer.py": {
        "ContractStartNormalizer.apply": {
            "name": "apply",
            "location": 10,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "pandas.DataFrame",
                    "dict",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "fuzzy-tribble-master/src/tribble/transformers/date_parser.py": {
        "DateParser.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateParser._parse_date": {
            "name": "_parse_date",
            "location": 20,
            "return": [
                "Optional[datetime.date]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]",
                    "int",
                    "bytes",
                    "List[str]",
                    "list[str]"
                ],
                "data": [
                    "str"
                ]
            }
        },
        "DateParser.apply": {
            "name": "apply",
            "location": 35,
            "return": [
                "dict[str, typing.Any]",
                "str",
                "dict[, ]",
                "Optional[float]",
                "typing.Callable[, ]",
                "typing.AnyStr",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "pandas.DataFrame",
                    "typing.Callable[, ]",
                    "dict",
                    "typing.AnyStr",
                    "Callable",
                    "AnyStr"
                ]
            }
        }
    },
    "fuzzy-tribble-master/src/tribble/transformers/fiscal_date_converter.py": {
        "FiscalDateConverter.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fiscal_date_column": [
                    "Optional[str]"
                ]
            }
        },
        "FiscalDateConverter._convert_date": {
            "name": "_convert_date",
            "location": 23,
            "return": [
                "Optional[datetime.date]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ],
                "data": [
                    "str"
                ]
            }
        },
        "FiscalDateConverter.apply": {
            "name": "apply",
            "location": 41,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "float",
                    "tuple",
                    "tuple[]"
                ]
            }
        },
        "BlankFiscalDateFilter.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fiscal_date_column": [
                    "Optional[str]"
                ]
            }
        },
        "BlankFiscalDateFilter.apply": {
            "name": "apply",
            "location": 52,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "pandas.DataFrame",
                    "Optional[float]",
                    "dict",
                    "List[int]",
                    "tuple",
                    "datetime.datetime",
                    "T",
                    "Tuple[bool]",
                    "Optional[datetime.date]"
                ]
            }
        }
    },
    "fuzzy-tribble-master/src/tribble/transformers/reporting_periodizer.py": {
        "ReportingPeriodizer._least": {
            "name": "_least",
            "location": 13,
            "return": [
                "str",
                "int",
                "None",
                "Callable"
            ],
            "arguments": {}
        },
        "ReportingPeriodizer._greatest": {
            "name": "_greatest",
            "location": 21,
            "return": [
                "str",
                "int",
                "None",
                "Callable"
            ],
            "arguments": {}
        },
        "ReportingPeriodizer._period_starts": {
            "name": "_period_starts",
            "location": 29,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "float",
                    "Iterable[int]",
                    "bool"
                ],
                "source_fiscal": [
                    "bool",
                    "float",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "contract_date": [
                    "bool",
                    "float",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "contract_period_start": [
                    "bool",
                    "float",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "contract_period_end": [
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray",
                    "str"
                ]
            }
        },
        "ReportingPeriodizer._period_ends": {
            "name": "_period_ends",
            "location": 42,
            "return": [
                "Optional[bool]",
                "Optional[int]",
                "float",
                "Tuple[Tuple[int, Any]]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "float",
                    "Optional[str]",
                    "None",
                    "int"
                ],
                "period_start": [
                    "int"
                ],
                "contract_period_end": [
                    "bool",
                    "str",
                    "pandas.Series",
                    "float",
                    "tuple[typing.Union[int,int]]",
                    "typing.Iterator",
                    "Tuple[int, int]",
                    "datetime.datetime",
                    "Iterator[int]"
                ]
            }
        },
        "ReportingPeriodizer.apply": {
            "name": "apply",
            "location": 49,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "pandas.core.frame.DataFrame",
                    "bytes",
                    "pandas.DataFrame"
                ]
            }
        }
    },
    "fuzzy-tribble-master/src/tribble/transformers/reporting_period_value.py": {
        "ReportingPeriodValue.days_in_range": {
            "name": "days_in_range",
            "location": 11,
            "return": [
                "float"
            ],
            "arguments": {
                "start": [
                    "int",
                    "pandas.Series",
                    "datetime.datetime",
                    "datetime.timedelta"
                ],
                "end": [
                    "int",
                    "pandas.Series",
                    "datetime.datetime",
                    "datetime.timedelta"
                ]
            }
        },
        "ReportingPeriodValue.apply": {
            "name": "apply",
            "location": 14,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "pandas.core.frame.DataFrame",
                    "Dict[str, str]",
                    "pandas.DataFrame",
                    "List[str]"
                ]
            }
        }
    },
    "fuzzy-tribble-master/src/tribble/transformers/schema_conformer.py": {
        "SchemaConformer.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "renames": [
                    "Optional[Dict[(str, str)]]"
                ]
            }
        },
        "SchemaConformer.apply": {
            "name": "apply",
            "location": 26,
            "return": [
                "str",
                "Optional[float]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "pandas.DataFrame",
                    "list[list[typing.Any]]",
                    "float",
                    "list[str]",
                    "List[List[Any]]",
                    "List[str]",
                    "typing.Mapping",
                    "list[]",
                    "Mapping[str, Any]",
                    "list"
                ]
            }
        }
    },
    "fuzzy-tribble-master/src/tribble/transformers/vendor_name_normalizer.py": {
        "VendorNameNormalizer._uppercase": {
            "name": "_uppercase",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "vendor_name": [
                    "str"
                ]
            }
        },
        "VendorNameNormalizer._remove_punctuation": {
            "name": "_remove_punctuation",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "vendor_name": [
                    "str"
                ]
            }
        },
        "VendorNameNormalizer._organization_identifiers": {
            "name": "_organization_identifiers",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "vendor_name": [
                    "str"
                ]
            }
        },
        "VendorNameNormalizer._whitespace_clean_up": {
            "name": "_whitespace_clean_up",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "vendor_name": [
                    "str"
                ]
            }
        },
        "VendorNameNormalizer.apply": {
            "name": "apply",
            "location": 32,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "list[str]",
                    "bytes",
                    "List[str]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        }
    },
    "fuzzy-tribble-master/src/tribble/transformers/__init__.py": {},
    "fuzzy-tribble-master/tests/conftest.py": {
        "db_host": {
            "name": "db_host",
            "location": 13,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "db_user": {
            "name": "db_user",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "db_password": {
            "name": "db_password",
            "location": 23,
            "return": [
                "str",
                "Optional[str]",
                "dict"
            ],
            "arguments": {}
        },
        "db_name": {
            "name": "db_name",
            "location": 28,
            "return": [
                "typing.Iterable[builtins.str]",
                "typing.Generator[str]"
            ],
            "arguments": {
                "db_host": [
                    "str",
                    "bool"
                ],
                "db_user": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "sqlalchemy.orm.scoping.scoped_session"
                ]
            }
        },
        "db_engine": {
            "name": "db_engine",
            "location": 65,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "db_host": [
                    "str",
                    "bool"
                ],
                "db_user": [
                    "str",
                    "bool"
                ],
                "db_password": [
                    "str",
                    "bool"
                ],
                "db_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "db": {
            "name": "db",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "db_engine": [
                    "sqlalchemy.engine.base.Engine",
                    "abilian.core.sqlalchemy.SQLAlchemy",
                    "anki_timelapse.database.Database"
                ]
            }
        }
    },
    "fuzzy-tribble-master/tests/test_cli.py": {
        "input_dir": {
            "name": "input_dir",
            "location": 11,
            "return": [
                "str",
                "Type[Any]",
                "List[str]"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "Type[Any]",
                    "List[str]"
                ]
            }
        },
        "data_file": {
            "name": "data_file",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "input_dir": [
                    "str"
                ]
            }
        },
        "test_load": {
            "name": "test_load",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "input_dir": []
            }
        },
        "test_init_db": {
            "name": "test_init_db",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "db_engine": [
                    "engine.base.Engine"
                ]
            }
        },
        "test_init_db_with_force": {
            "name": "test_init_db_with_force",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "db_engine": [
                    "engine.base.Engine"
                ]
            }
        }
    },
    "fuzzy-tribble-master/tests/test_database.py": {
        "test_connection": {
            "name": "test_connection",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "db_engine": [
                    "engine.base.Engine"
                ]
            }
        }
    },
    "fuzzy-tribble-master/tests/test_loader.py": {
        "test_load_dataframe": {
            "name": "test_load_dataframe",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fuzzy-tribble-master/tests/test_reader.py": {
        "test_chunking": {
            "name": "test_chunking",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "py._path.local.LocalPath"
                ]
            }
        },
        "test_blank_dir": {
            "name": "test_blank_dir",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "py._path.local.LocalPath",
                    "py.path.LocalPath"
                ]
            }
        }
    },
    "fuzzy-tribble-master/tests/test_transform.py": {
        "input_template": {
            "name": "input_template",
            "location": 33,
            "return": [
                "DataTemplate",
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {}
        },
        "output_template": {
            "name": "output_template",
            "location": 67,
            "return": [
                "DataTemplate",
                "str",
                "Union[int, str]"
            ],
            "arguments": {}
        },
        "test_transform": {
            "name": "test_transform",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "input_template": [
                    "DataTemplate"
                ],
                "output_template": [
                    "DataTemplate"
                ]
            }
        },
        "test_fiscal_date_converter": {
            "name": "test_fiscal_date_converter",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "input_template": [
                    "DataTemplate"
                ],
                "output_template": [
                    "DataTemplate"
                ]
            }
        },
        "test_fiscal_date_converting_bad_data": {
            "name": "test_fiscal_date_converting_bad_data",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "input_template": [
                    "DataTemplate"
                ]
            }
        },
        "test_bad_contract_dates": {
            "name": "test_bad_contract_dates",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "input_template": [
                    "DataTemplate"
                ],
                "output_template": [
                    "DataTemplate"
                ]
            }
        },
        "test_reporting_periods_broken_up": {
            "name": "test_reporting_periods_broken_up",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "input_template": [
                    "DataTemplate"
                ],
                "output_template": [
                    "DataTemplate"
                ]
            }
        },
        "test_contract_starts_that_go_backwards_in_time": {
            "name": "test_contract_starts_that_go_backwards_in_time",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "input_template": [
                    "DataTemplate"
                ],
                "output_template": [
                    "DataTemplate"
                ]
            }
        },
        "test_blank_fiscal_rows_dropped": {
            "name": "test_blank_fiscal_rows_dropped",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "input_template": [
                    "DataTemplate"
                ]
            }
        },
        "DataTemplate.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "DataTemplate._generate_rows": {
            "name": "_generate_rows",
            "location": 13,
            "return": [
                "Iterable[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "overrides": [
                    "List[Dict[(str, Any)]]"
                ]
            }
        },
        "DataTemplate.to_df": {
            "name": "to_df",
            "location": 23,
            "return": [
                "int",
                "str",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "overrides": [
                    "List[Dict[(str, Any)]]"
                ]
            }
        },
        "DataTemplate.to_dicts": {
            "name": "to_dicts",
            "location": 26,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "overrides": [
                    "List[Dict[(str, Any)]]"
                ]
            }
        }
    },
    "fuzzy-tribble-master/tests/__init__.py": {},
    "fuzzy-tribble-master/tests/transformers/test_clear_blanks.py": {
        "test_apply": {
            "name": "test_apply",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_multiple_columns": {
            "name": "test_multiple_columns",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fuzzy-tribble-master/tests/transformers/test_contract_date_cleaner.py": {
        "template": {
            "name": "template",
            "location": 9,
            "return": [
                "dict[typing.Text, None]",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "test_good_data": {
            "name": "test_good_data",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "template": [
                    "dict"
                ]
            }
        },
        "test_missing_end_date": {
            "name": "test_missing_end_date",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "template": [
                    "dict"
                ]
            }
        },
        "test_delivery_date": {
            "name": "test_delivery_date",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "template": [
                    "dict"
                ]
            }
        },
        "test_contract_date": {
            "name": "test_contract_date",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "template": [
                    "dict"
                ]
            }
        },
        "test_no_dates": {
            "name": "test_no_dates",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "template": [
                    "dict"
                ]
            }
        },
        "test_contract_date_and_contract_period_end": {
            "name": "test_contract_date_and_contract_period_end",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "template": [
                    "dict"
                ]
            }
        },
        "test_contract_end_before_start": {
            "name": "test_contract_end_before_start",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "template": [
                    "dict"
                ]
            }
        }
    },
    "fuzzy-tribble-master/tests/transformers/test_date_parser.py": {
        "test_apply": {
            "name": "test_apply",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_reversed_month_day": {
            "name": "test_reversed_month_day",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_non_date": {
            "name": "test_non_date",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bad_date": {
            "name": "test_bad_date",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fuzzy-tribble-master/tests/transformers/test_fiscal_date_converter.py": {
        "test_conversion": {
            "name": "test_conversion",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bad_data": {
            "name": "test_bad_data",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_removes_blank_fiscal_date": {
            "name": "test_removes_blank_fiscal_date",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fuzzy-tribble-master/tests/transformers/test_reporting_periodizer.py": {
        "test_apply": {
            "name": "test_apply",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_single_item": {
            "name": "test_single_item",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_single_item_with_later_contract_date": {
            "name": "test_single_item_with_later_contract_date",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_multiple_amendments_in_one_source_fiscal": {
            "name": "test_multiple_amendments_in_one_source_fiscal",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_contract_date_after_contract_end": {
            "name": "test_contract_date_after_contract_end",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fuzzy-tribble-master/tests/transformers/test_reporting_period_value.py": {
        "test_apply": {
            "name": "test_apply",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_apply_when_contract_ends_later": {
            "name": "test_apply_when_contract_ends_later",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_apply_when_reporting_value_goes_negative": {
            "name": "test_apply_when_reporting_value_goes_negative",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fuzzy-tribble-master/tests/transformers/test_schema_conformer.py": {
        "test_column_rename": {
            "name": "test_column_rename",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_column_drop": {
            "name": "test_column_drop",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fuzzy-tribble-master/tests/transformers/test_vendor_name_normalizer.py": {
        "test_upcase": {
            "name": "test_upcase",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_punctuation_removal": {
            "name": "test_punctuation_removal",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_organization_designation_removal": {
            "name": "test_organization_designation_removal",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_whitespace_cleanup": {
            "name": "test_whitespace_cleanup",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fuzzy-tribble-master/tests/transformers/__init__.py": {}
}
{
    "gaussian-process-master/setup.py": {},
    "gaussian-process-master/gp/__init__.py": {},
    "gaussian-process-master/gp/__version__.py": {},
    "gaussian-process-master/gp/examples/plot_gp.py": {},
    "gaussian-process-master/gp/examples/plot_gplvm.py": {},
    "gaussian-process-master/gp/kernel/exponential.py": {
        "Exponential.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log_sigma": [
                    "float"
                ],
                "log_gamma": [
                    "float"
                ]
            }
        },
        "Exponential.__call__": {
            "name": "__call__",
            "location": 17,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "x1": [
                    "np.ndarray"
                ],
                "x2": [
                    "np.ndarray"
                ]
            }
        },
        "Exponential.params": {
            "name": "params",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Exponential.true_params": {
            "name": "true_params",
            "location": 39,
            "return": [
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exponential.gradients": {
            "name": "gradients",
            "location": 42,
            "return": [
                "List[np.ndarray]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "np.ndarray"
                ]
            }
        },
        "Exponential.gradients_wrt_data": {
            "name": "gradients_wrt_data",
            "location": 56,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "np.ndarray"
                ],
                "n": [
                    "int"
                ],
                "dim": [
                    "int"
                ]
            }
        }
    },
    "gaussian-process-master/gp/kernel/kernel.py": {
        "Kernel.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_params": [
                    "int"
                ]
            }
        },
        "Kernel.__call__": {
            "name": "__call__",
            "location": 16,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "x1": [
                    "np.ndarray"
                ],
                "x2": [
                    "np.ndarray"
                ]
            }
        },
        "Kernel._check_input_is_valid": {
            "name": "_check_input_is_valid",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "x1": [
                    "np.ndarray"
                ],
                "x2": [
                    "np.ndarray"
                ]
            }
        },
        "Kernel._check_params_are_valid": {
            "name": "_check_params_are_valid",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "np.ndarray"
                ]
            }
        },
        "Kernel.params": {
            "name": "params",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Kernel.true_params": {
            "name": "true_params",
            "location": 41,
            "return": [
                "numpy.ndarray",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Kernel.gradients": {
            "name": "gradients",
            "location": 45,
            "return": [
                "List[np.ndarray]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "np.ndarray"
                ]
            }
        },
        "Kernel.gradients_wrt_data": {
            "name": "gradients_wrt_data",
            "location": 49,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "np.ndarray"
                ],
                "n": [
                    "int"
                ],
                "dim": [
                    "int"
                ]
            }
        },
        "Kernel.num_params": {
            "name": "num_params",
            "location": 53,
            "return": [
                "int",
                "Optional[Dict[str, int]]",
                "List[List[int]]",
                "bool",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gaussian-process-master/gp/kernel/linear.py": {
        "Linear.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log_sigma": [
                    "float"
                ]
            }
        },
        "Linear.__call__": {
            "name": "__call__",
            "location": 15,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "x1": [
                    "np.ndarray"
                ],
                "x2": [
                    "np.ndarray"
                ]
            }
        },
        "Linear.params": {
            "name": "params",
            "location": 27,
            "return": [
                "None",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "Linear.true_params": {
            "name": "true_params",
            "location": 33,
            "return": [
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Linear.gradients": {
            "name": "gradients",
            "location": 36,
            "return": [
                "List[np.ndarray]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "np.ndarray"
                ]
            }
        },
        "Linear.gradients_wrt_data": {
            "name": "gradients_wrt_data",
            "location": 44,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "np.ndarray"
                ],
                "n": [
                    "int"
                ],
                "dim": [
                    "int"
                ]
            }
        }
    },
    "gaussian-process-master/gp/kernel/periodic.py": {
        "Periodic.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log_sigma": [
                    "float"
                ],
                "log_gamma": [
                    "float"
                ],
                "log_period": [
                    "float"
                ]
            }
        },
        "Periodic.__call__": {
            "name": "__call__",
            "location": 19,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "x1": [
                    "np.ndarray"
                ],
                "x2": [
                    "np.ndarray"
                ]
            }
        },
        "Periodic.params": {
            "name": "params",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "str",
                    "Exception"
                ]
            }
        },
        "Periodic.true_params": {
            "name": "true_params",
            "location": 43,
            "return": [
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Periodic.gradients": {
            "name": "gradients",
            "location": 46,
            "return": [
                "List[np.ndarray]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "np.ndarray"
                ]
            }
        },
        "Periodic.gradients_wrt_data": {
            "name": "gradients_wrt_data",
            "location": 67,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "np.ndarray"
                ],
                "n": [
                    "int"
                ],
                "dim": [
                    "int"
                ]
            }
        }
    },
    "gaussian-process-master/gp/kernel/rbf.py": {
        "RBF.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log_sigma": [
                    "int",
                    "float",
                    "bytes",
                    "numpy.ndarray",
                    "tuple[typing.Union[int,int]]",
                    "Tuple[int, int]",
                    "str",
                    "Optional[str]",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "log_gamma": [
                    "int",
                    "float",
                    "bytes",
                    "numpy.ndarray",
                    "tuple[typing.Union[int,int]]",
                    "Tuple[int, int]",
                    "str",
                    "Optional[str]",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "RBF.__call__": {
            "name": "__call__",
            "location": 17,
            "return": [
                "numpy.ndarray",
                "str"
            ],
            "arguments": {
                "self": [],
                "x1": [],
                "x2": []
            }
        },
        "RBF.params": {
            "name": "params",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "RBF.true_params": {
            "name": "true_params",
            "location": 39,
            "return": [
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RBF.gradients": {
            "name": "gradients",
            "location": 42,
            "return": [
                "list[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int",
                    "numpy.ndarray",
                    "numpy.array"
                ]
            }
        },
        "RBF.gradients_wrt_data": {
            "name": "gradients_wrt_data",
            "location": 56,
            "return": [
                "str",
                "int",
                "bytes",
                "Generator"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray"
                ],
                "n": [
                    "int"
                ],
                "dim": [
                    "tuple[typing.Union[int,int]]",
                    "int",
                    "Tuple[int, int]",
                    "str",
                    "bool",
                    "numpy.array"
                ]
            }
        }
    },
    "gaussian-process-master/gp/kernel/__init__.py": {},
    "gaussian-process-master/gp/model/gp.py": {
        "GP.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "np.ndarray"
                ],
                "y": [
                    "np.ndarray"
                ],
                "kernel": [
                    "None",
                    "numpy.ndarray",
                    "bool",
                    "dict[, ]",
                    "Optional[dict]",
                    "str",
                    "float",
                    "Optional[float]",
                    "int"
                ]
            }
        },
        "GP._compute_k_xx": {
            "name": "_compute_k_xx",
            "location": 21,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "GP._compute_chol_xx": {
            "name": "_compute_chol_xx",
            "location": 25,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "GP._compute_a": {
            "name": "_compute_a",
            "location": 32,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "GP._compute_aa_k_inv": {
            "name": "_compute_aa_k_inv",
            "location": 36,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "GP.update": {
            "name": "update",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GP.update_grad": {
            "name": "update_grad",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GP.params": {
            "name": "params",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "int",
                    "str"
                ]
            }
        },
        "GP.true_params": {
            "name": "true_params",
            "location": 63,
            "return": [
                "bool",
                "Optional[int]",
                "int",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GP.posterior": {
            "name": "posterior",
            "location": 66,
            "return": [
                "Tuple[(np.ndarray, np.ndarray, float)]"
            ],
            "arguments": {
                "self": [],
                "xs": [
                    "np.ndarray"
                ]
            }
        },
        "GP.log_likelihood": {
            "name": "log_likelihood",
            "location": 75,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "np.ndarray"
                ]
            }
        },
        "GP.log_likelihood_grad": {
            "name": "log_likelihood_grad",
            "location": 84,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "np.ndarray"
                ]
            }
        },
        "GP.loss": {
            "name": "loss",
            "location": 94,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "np.ndarray"
                ]
            }
        },
        "GP.loss_grad": {
            "name": "loss_grad",
            "location": 97,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "np.ndarray"
                ]
            }
        },
        "GP.optimise_hyperparameters": {
            "name": "optimise_hyperparameters",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GP.add_point": {
            "name": "add_point",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "np.ndarray"
                ],
                "y": [
                    "np.ndarray"
                ]
            }
        },
        "GP.initialise_data": {
            "name": "initialise_data",
            "location": 119,
            "return": [
                "Tuple[(np.ndarray, np.ndarray)]"
            ],
            "arguments": {
                "x": [
                    "np.ndarray"
                ],
                "y": [
                    "np.ndarray"
                ]
            }
        },
        "GP.x_dim": {
            "name": "x_dim",
            "location": 133,
            "return": [
                "float",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GP.y_dim": {
            "name": "y_dim",
            "location": 137,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GP.num_data": {
            "name": "num_data",
            "location": 141,
            "return": [
                "int",
                "str",
                "numpy.core.multiarray.ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "GP.num_params": {
            "name": "num_params",
            "location": 145,
            "return": [
                "int",
                "Callable[[T], List[T]]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GP.half_ln2pi": {
            "name": "half_ln2pi",
            "location": 149,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gaussian-process-master/gp/model/gplvm.py": {
        "GPLVM.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "y": [
                    "np.ndarray"
                ],
                "kernel": [
                    "float",
                    "int",
                    "None",
                    "str"
                ]
            }
        },
        "GPLVM.log_joint": {
            "name": "log_joint",
            "location": 22,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "xx": [
                    "np.ndarray"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "GPLVM.log_joint_grad": {
            "name": "log_joint_grad",
            "location": 33,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "xx": [
                    "np.ndarray"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "GPLVM.joint_loss": {
            "name": "joint_loss",
            "location": 42,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "xx": [
                    "np.ndarray"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "GPLVM.joint_loss_grad": {
            "name": "joint_loss_grad",
            "location": 45,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "xx": [
                    "np.ndarray"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "GPLVM.optimise": {
            "name": "optimise",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_iter": [
                    "int"
                ]
            }
        },
        "GPLVM.optimise_latents": {
            "name": "optimise_latents",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_iter": [
                    "int"
                ]
            }
        },
        "GPLVM.latent_dim": {
            "name": "latent_dim",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gaussian-process-master/gp/model/__init__.py": {},
    "gaussian-process-master/gp/visualisation/gplvm_plotter.py": {
        "GPLVM_Plotter.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gaussian-process-master/gp/visualisation/gp_plotter.py": {
        "GPPlotter.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gp": [
                    "gp.model.gp.GP"
                ],
                "func": [
                    "Callable[([np.ndarray], np.ndarray)]"
                ]
            }
        },
        "GPPlotter.plot_prior_sample": {
            "name": "plot_prior_sample",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nsamples": [
                    "int"
                ]
            }
        },
        "GPPlotter.plot_posterior": {
            "name": "plot_posterior",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GPPlotter.plot_posterior_sample": {
            "name": "plot_posterior_sample",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nsamples": [
                    "int"
                ]
            }
        },
        "GPPlotter.onclick": {
            "name": "onclick",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "dict",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "GPPlotter.add_point": {
            "name": "add_point",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "np.ndarray"
                ],
                "y": [
                    "np.ndarray"
                ]
            }
        }
    },
    "gaussian-process-master/gp/visualisation/util.py": {
        "sin": {
            "name": "sin",
            "location": 4,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "x": [
                    "np.ndarray"
                ]
            }
        },
        "cos": {
            "name": "cos",
            "location": 8,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "x": [
                    "np.ndarray"
                ]
            }
        },
        "sin2": {
            "name": "sin2",
            "location": 12,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "x": [
                    "np.ndarray"
                ]
            }
        },
        "sincos": {
            "name": "sincos",
            "location": 16,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "x": [
                    "np.ndarray"
                ]
            }
        },
        "lin": {
            "name": "lin",
            "location": 20,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "x": [
                    "np.ndarray"
                ]
            }
        },
        "expsin": {
            "name": "expsin",
            "location": 24,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "x": [
                    "np.ndarray"
                ]
            }
        },
        "step": {
            "name": "step",
            "location": 28,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "x": [
                    "np.ndarray"
                ]
            }
        },
        "relu": {
            "name": "relu",
            "location": 32,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "x": [
                    "np.ndarray"
                ]
            }
        }
    },
    "gaussian-process-master/gp/visualisation/__init__.py": {}
}
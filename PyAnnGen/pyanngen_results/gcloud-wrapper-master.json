{
    "gcloud-wrapper-master/setup.py": {},
    "gcloud-wrapper-master/docs/conf.py": {},
    "gcloud-wrapper-master/gcloud/bigquery.py": {
        "load_from_cloud_storage_uri": {
            "name": "load_from_cloud_storage_uri",
            "location": 8,
            "return": [
                "bool",
                "str",
                "List[Dict]",
                "Optional[Callable[[dict], None]]",
                "bytes",
                "OrderedDict",
                "int",
                "dict"
            ],
            "arguments": {
                "source_uri": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None"
                ],
                "project": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "dataset": [
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "table": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None"
                ],
                "credential": [
                    "str",
                    "None",
                    "Union[pathlib.Path,str]",
                    "Optional[str]"
                ],
                "auto_detect": [
                    "bool",
                    "List[google.cloud.bigquery.SchemaField]",
                    "str",
                    "Optional[str]"
                ],
                "skip_leading_rows": [
                    "int",
                    "str",
                    "Set[Tuple[str,str]]"
                ]
            }
        },
        "BigQuery.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "str",
                    "Dict",
                    "pathlib.Path",
                    "path.Path"
                ],
                "dataset": [
                    "Callable"
                ],
                "credential": [
                    "str",
                    "None",
                    "pathlib.Path"
                ]
            }
        },
        "BigQuery.create_table_from_gcs_uri": {
            "name": "create_table_from_gcs_uri",
            "location": 66,
            "return": [
                "dict",
                "tuple",
                "Dict[str, List[dict]]"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "str",
                    "Dict[str,Any]"
                ],
                "uri": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "gcloud-wrapper-master/gcloud/cloud_language.py": {
        "CloudLanguage.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "credentials": [
                    "str",
                    "None",
                    "List[str]",
                    "bool",
                    "Optional[Union[str,pathlib.Path]]",
                    "pathlib.Path"
                ]
            }
        },
        "CloudLanguage.annotate_text_from_string": {
            "name": "annotate_text_from_string",
            "location": 17,
            "return": [
                "int",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "Type",
                    "Optional[str]",
                    "None"
                ],
                "encoding_type": [
                    "str",
                    "Optional[Sequence[Any]]",
                    "Optional[google.api_core.retry.Retry]",
                    "Optional[float]"
                ],
                "retry": [
                    "str",
                    "None",
                    "Optional[Sequence[Any]]",
                    "Optional[google.api_core.retry.Retry]",
                    "Sequence[Any]",
                    "Optional[float]",
                    "float"
                ],
                "timeout": [
                    "str",
                    "None",
                    "Optional[Sequence[Any]]",
                    "Optional[google.api_core.retry.Retry]",
                    "Sequence[Any]",
                    "Optional[float]",
                    "float"
                ],
                "metadata": [
                    "str",
                    "None",
                    "Optional[Sequence[Any]]",
                    "Optional[google.api_core.retry.Retry]",
                    "Sequence[Any]",
                    "Optional[float]",
                    "float"
                ],
                "language": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "Type"
                ],
                "document_type": [
                    "str",
                    "Optional[str]",
                    "type"
                ],
                "syntax": [
                    "bool",
                    "str",
                    "Tuple[int]"
                ],
                "entities": [
                    "bool",
                    "str",
                    "Tuple[int]"
                ],
                "document_sentiment": [
                    "bool",
                    "str",
                    "Tuple[int]"
                ],
                "entity_sentiment": [
                    "bool",
                    "str",
                    "Tuple[int]"
                ],
                "classify": [
                    "bool",
                    "str",
                    "Tuple[int]"
                ]
            }
        },
        "CloudLanguage.parse": {
            "name": "parse",
            "location": 66,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "response": []
            }
        },
        "CloudLanguage.parse_sentences": {
            "name": "parse_sentences",
            "location": 76,
            "return": [
                "Dict[(str, list)]"
            ],
            "arguments": {
                "response": []
            }
        },
        "CloudLanguage.parse_tokens": {
            "name": "parse_tokens",
            "location": 97,
            "return": [
                "Dict[(str, list)]"
            ],
            "arguments": {
                "response": [
                    "List",
                    "Dict"
                ]
            }
        },
        "CloudLanguage.parse_entity": {
            "name": "parse_entity",
            "location": 128,
            "return": [
                "Dict[(str, list)]"
            ],
            "arguments": {
                "response": [
                    "dict"
                ]
            }
        },
        "CloudLanguage.parse_document_sentiment": {
            "name": "parse_document_sentiment",
            "location": 167,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "response": [
                    "dict",
                    "Mapping[str, object]"
                ]
            }
        },
        "CloudLanguage.parse_categories": {
            "name": "parse_categories",
            "location": 176,
            "return": [
                "Dict[(str, list)]"
            ],
            "arguments": {
                "response": []
            }
        }
    },
    "gcloud-wrapper-master/gcloud/cloud_storage.py": {
        "_get_client": {
            "name": "_get_client",
            "location": 8,
            "return": [
                "Client",
                "str",
                "Dict",
                "Optional[Dict[str,Any]]"
            ],
            "arguments": {
                "project": [
                    "str",
                    "pathlib.Path"
                ],
                "credential": [
                    "None"
                ]
            }
        },
        "upload_from_filename": {
            "name": "upload_from_filename",
            "location": 26,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Optional[str]",
                    "IO",
                    "None",
                    "Union[str,pathlib.Path]",
                    "Pattern",
                    "Optional[Pattern[str]]"
                ],
                "project": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[Union[str,pathlib.Path]]"
                ],
                "bucket": [
                    "str",
                    "pathlib.Path"
                ],
                "blob": [
                    "str",
                    "bool"
                ],
                "credential": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[Union[str,pathlib.Path]]"
                ],
                "content_type": [
                    "None",
                    "Optional[str]",
                    "str",
                    "IO",
                    "Union[str,pathlib.Path]",
                    "Pattern",
                    "Optional[Pattern[str]]"
                ]
            }
        },
        "download_from_blob": {
            "name": "download_from_blob",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "pathlib.Path"
                ],
                "project": [
                    "str",
                    "Optional[Union[str,pathlib.Path]]",
                    "None"
                ],
                "bucket": [
                    "str",
                    "Union[pathlib.Path,str]"
                ],
                "blob": [
                    "str",
                    "pathlib.Path"
                ],
                "credential": [
                    "str",
                    "None",
                    "Optional[Union[str,pathlib.Path]]"
                ]
            }
        },
        "CloudStorage.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "str",
                    "Optional[Union[str,pathlib.Path]]",
                    "None"
                ],
                "bucket": [
                    "str",
                    "pathlib.Path"
                ],
                "credential": [
                    "Optional[Union[str,pathlib.Path]]",
                    "str",
                    "None"
                ]
            }
        },
        "CloudStorage.bucket_exist": {
            "name": "bucket_exist",
            "location": 87,
            "return": [
                "List[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloudStorage.get_blob_list": {
            "name": "get_blob_list",
            "location": 94,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloudStorage.get_blob_url": {
            "name": "get_blob_url",
            "location": 102,
            "return": [
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "blob": [
                    "str",
                    "bool"
                ]
            }
        },
        "CloudStorage.upload_from_filename": {
            "name": "upload_from_filename",
            "location": 113,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "bool",
                    "None",
                    "bytes",
                    "Optional[str]",
                    "Union[str,pathlib.Path]",
                    "pathlib.Path"
                ],
                "blob": [
                    "str",
                    "Optional[Dict]",
                    "Dict",
                    "None"
                ],
                "content_type": [
                    "str",
                    "None",
                    "bool",
                    "bytes",
                    "Optional[str]",
                    "Union[str,pathlib.Path]",
                    "pathlib.Path"
                ]
            }
        },
        "CloudStorage.download_from_blob": {
            "name": "download_from_blob",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "blob": [
                    "str"
                ]
            }
        }
    },
    "gcloud-wrapper-master/gcloud/speech_to_text.py": {
        "parse_response": {
            "name": "parse_response",
            "location": 10,
            "return": [
                "Tuple[(list, list)]"
            ],
            "arguments": {
                "response": [
                    "List[dict[str,Any]]",
                    "Dict",
                    "google.cloud.speech.types.RecognizeResponse",
                    "List[Dict[str,Any]]"
                ]
            }
        },
        "recognize_audio_from_uri": {
            "name": "recognize_audio_from_uri",
            "location": 28,
            "return": [
                "bool",
                "Match",
                "Tuple[int, Dict[str, Any]]"
            ],
            "arguments": {
                "uri": [
                    "str",
                    "int",
                    "mypy.types.Instance"
                ],
                "credential": [
                    "Optional[str]",
                    "None",
                    "Optional[float]",
                    "Callable[,Any]",
                    "str",
                    "Optional[Union[Any,Any]]",
                    "float",
                    "Any"
                ],
                "language_code": [
                    "Text",
                    "str",
                    "bytes",
                    "types.Serializable",
                    "Optional[str]"
                ],
                "encoding": [
                    "str",
                    "bytes",
                    "types.Serializable",
                    "Optional[str]"
                ],
                "sampling_rate_hertz": [
                    "int",
                    "str",
                    "bytes",
                    "types.Serializable",
                    "Optional[str]"
                ]
            }
        },
        "recognize_audio_from_file": {
            "name": "recognize_audio_from_file",
            "location": 71,
            "return": [
                "Callable",
                "bool"
            ],
            "arguments": {
                "file": [
                    "str",
                    "Union[str,os.PathLike]"
                ],
                "credential": [
                    "bool",
                    "None",
                    "Optional[str]",
                    "Optional[Dict[str,Any]]",
                    "str",
                    "Dict[str,Any]"
                ],
                "language_code": [
                    "Text",
                    "Iterator[str]",
                    "float",
                    "int",
                    "Union[int,str]",
                    "Counter[str]",
                    "bytes",
                    "Union[bytearray,bytes]",
                    "Tuple[int,int]"
                ],
                "encoding": [
                    "Iterator[str]",
                    "float",
                    "int",
                    "Union[int, str]",
                    "Counter[str]",
                    "bytes",
                    "Union[bytearray, bytes]",
                    "Tuple[int, int]"
                ],
                "sampling_rate_hertz": [
                    "int",
                    "Iterator[str]",
                    "float",
                    "Union[int,str]",
                    "Counter[str]",
                    "bytes",
                    "Union[bytearray,bytes]",
                    "Tuple[int,int]"
                ]
            }
        },
        "SpeechToText.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "credential": [
                    "Optional[bool]",
                    "None",
                    "Optional[float]",
                    "bool",
                    "List[str]",
                    "Optional[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "SpeechToText.recognize_from_uri": {
            "name": "recognize_from_uri",
            "location": 122,
            "return": [
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "uri": [
                    "str",
                    "mypy.types.Instance"
                ],
                "encoding": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "types.Serializable"
                ],
                "language_code": [
                    "Text",
                    "str",
                    "bytes",
                    "Optional[str]",
                    "types.Serializable"
                ],
                "sampling_rate_hertz": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]",
                    "types.Serializable"
                ]
            }
        },
        "SpeechToText.recognize_from_file": {
            "name": "recognize_from_file",
            "location": 147,
            "return": [
                "str",
                "Callable",
                "bool"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "bytes",
                    "Union[str,os.PathLike]"
                ],
                "encoding": [
                    "Sequence[str]",
                    "Iterator[str]",
                    "float",
                    "int"
                ],
                "language_code": [
                    "Text",
                    "Sequence[str]",
                    "Iterator[str]",
                    "float",
                    "int"
                ],
                "sampling_rate_hertz": [
                    "int",
                    "Sequence[str]",
                    "Iterator[str]",
                    "float"
                ]
            }
        }
    },
    "gcloud-wrapper-master/gcloud/text_to_speech.py": {
        "TextToSpeech.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "credential": [
                    "str",
                    "None",
                    "Optional[Union[str,pathlib.Path]]",
                    "IO",
                    "int",
                    "Optional[str]",
                    "Optional[IO[str]]",
                    "Optional[int]",
                    "pathlib.Path"
                ]
            }
        },
        "TextToSpeech.synthesize": {
            "name": "synthesize",
            "location": 14,
            "return": [
                "Callable",
                "bool",
                "Callable[[str], None]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "bytes"
                ],
                "language": [
                    "Text",
                    "str",
                    "Mapping[str,Any]"
                ],
                "gender": [
                    "int",
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ],
                "encoding": [
                    "str",
                    "Optional[bytes]",
                    "bool"
                ]
            }
        },
        "TextToSpeech.save": {
            "name": "save",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "str",
                    "bool",
                    "Dict"
                ],
                "filename": [
                    "str",
                    "Union[str,pathlib.Path]"
                ]
            }
        }
    },
    "gcloud-wrapper-master/gcloud/__init__.py": {}
}
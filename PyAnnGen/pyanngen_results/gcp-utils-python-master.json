{
    "gcp-utils-python-master/setup.py": {
        "get_version": {
            "name": "get_version",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "gcp-utils-python-master/fd_gcp/auth.py": {
        "get_env_default_credentials": {
            "name": "get_env_default_credentials",
            "location": 27,
            "return": [
                "bool",
                "str",
                "int",
                "Dict[str,Any]",
                "List[str]",
                "Tuple[int,int,int]",
                "bytes",
                "Mapping[str,Any]",
                "Tuple[Union[int,int]]"
            ],
            "arguments": {}
        },
        "get_env_project_id": {
            "name": "get_env_project_id",
            "location": 42,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "get_gce_credentials": {
            "name": "get_gce_credentials",
            "location": 60,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "service_account_email": [
                    "str",
                    "None"
                ]
            }
        },
        "load_credentials_from_file": {
            "name": "load_credentials_from_file",
            "location": 84,
            "return": [
                "str",
                "List[str]",
                "List[tuple[Union[str,str,str]]]",
                "Type",
                "Tuple[Union[str,str]]",
                "int",
                "List"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "gcp-utils-python-master/fd_gcp/common.py": {},
    "gcp-utils-python-master/fd_gcp/constants.py": {},
    "gcp-utils-python-master/fd_gcp/exceptions.py": {
        "process_googleapiclient_http_error": {
            "name": "process_googleapiclient_http_error",
            "location": 141,
            "return": [
                "Union[(AlreadyExists, ResourceNotFound, ResourcePermissionDenied, UnrecognizedApiHttpError)]"
            ],
            "arguments": {
                "exc": [
                    "Dict[str,Any]"
                ]
            }
        },
        "_detect_resource_permission_denied": {
            "name": "_detect_resource_permission_denied",
            "location": 158,
            "return": [
                "Optional[ResourcePermissionDenied]"
            ],
            "arguments": {
                "exc": [
                    "bool",
                    "str",
                    "Type"
                ]
            }
        },
        "_detect_resource_not_found": {
            "name": "_detect_resource_not_found",
            "location": 188,
            "return": [
                "Optional[ResourceNotFound]"
            ],
            "arguments": {
                "exc": [
                    "List[str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "_detect_already_exists": {
            "name": "_detect_already_exists",
            "location": 210,
            "return": [
                "Optional[AlreadyExists]"
            ],
            "arguments": {
                "exc": [
                    "Dict[str,str]",
                    "List[str]",
                    "int",
                    "str"
                ]
            }
        },
        "Error.__repr__": {
            "name": "__repr__",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourcePermissionDenied.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "List[str]",
                    "None",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "permission": [
                    "str",
                    "List[str]",
                    "None",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "ResourcePermissionDenied.__str__": {
            "name": "__str__",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceNotFound.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "ResourceNotFound.__str__": {
            "name": "__str__",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlreadyExists.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "what": [
                    "float",
                    "int"
                ]
            }
        },
        "AlreadyExists.__str__": {
            "name": "__str__",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnrecognizedApiError.__str__": {
            "name": "__str__",
            "location": 114,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnrecognizedApiHttpError.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "bytes",
                    "str"
                ]
            }
        },
        "UnrecognizedApiHttpError.__str__": {
            "name": "__str__",
            "location": 136,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gcp-utils-python-master/fd_gcp/gcp_kms.py": {
        "compose_project_grn": {
            "name": "compose_project_grn",
            "location": 113,
            "return": [
                "str"
            ],
            "arguments": {
                "project_id": []
            }
        },
        "compose_location_grn": {
            "name": "compose_location_grn",
            "location": 122,
            "return": [
                "str"
            ],
            "arguments": {
                "project_id": [],
                "location_id": []
            }
        },
        "compose_key_ring_grn": {
            "name": "compose_key_ring_grn",
            "location": 133,
            "return": [
                "str"
            ],
            "arguments": {
                "project_id": [],
                "location_id": [],
                "key_ring_id": []
            }
        },
        "compose_crypto_key_grn": {
            "name": "compose_crypto_key_grn",
            "location": 146,
            "return": [
                "str"
            ],
            "arguments": {
                "project_id": [],
                "location_id": [],
                "key_ring_id": [],
                "crypto_key_id": []
            }
        },
        "compose_crypto_key_version_grn": {
            "name": "compose_crypto_key_version_grn",
            "location": 161,
            "return": [
                "str"
            ],
            "arguments": {
                "project_id": [],
                "location_id": [],
                "key_ring_id": [],
                "crypto_key_id": [],
                "crypto_key_version_id": []
            }
        },
        "create_api_client": {
            "name": "create_api_client",
            "location": 182,
            "return": [
                "Any"
            ],
            "arguments": {
                "credentials": []
            }
        },
        "create_key_ring": {
            "name": "create_key_ring",
            "location": 200,
            "return": [
                "Any"
            ],
            "arguments": {
                "api_client": [],
                "location_grn": [],
                "key_ring_id": []
            }
        },
        "create_crypto_key": {
            "name": "create_crypto_key",
            "location": 234,
            "return": [
                "Any"
            ],
            "arguments": {
                "api_client": [],
                "key_ring_grn": [],
                "crypto_key_id": [
                    "None"
                ]
            }
        },
        "encrypt": {
            "name": "encrypt",
            "location": 266,
            "return": [
                "bytes"
            ],
            "arguments": {
                "api_client": [],
                "crypto_key_grn": [],
                "plain_data": []
            }
        },
        "decrypt": {
            "name": "decrypt",
            "location": 302,
            "return": [
                "bytes"
            ],
            "arguments": {
                "api_client": [],
                "crypto_key_grn": [],
                "encrypted_data": []
            }
        },
        "add_member_to_crypto_key_iam_policy": {
            "name": "add_member_to_crypto_key_iam_policy",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "api_client": [],
                "crypto_key_grn": [],
                "member": [],
                "role": []
            }
        },
        "get_key_ring_iam_policy": {
            "name": "get_key_ring_iam_policy",
            "location": 401,
            "return": [
                "list[]"
            ],
            "arguments": {
                "api_client": [],
                "key_ring_grn": []
            }
        }
    },
    "gcp-utils-python-master/fd_gcp/gcp_kms_mock.py": {
        "create_crypto_key": {
            "name": "create_crypto_key",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "api_client": [
                    "str",
                    "bool",
                    "bytes",
                    "Dict",
                    "int"
                ],
                "key_ring_grn": [
                    "str",
                    "int"
                ],
                "crypto_key_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "encrypt": {
            "name": "encrypt",
            "location": 58,
            "return": [
                "bytes"
            ],
            "arguments": {
                "api_client": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "int"
                ],
                "crypto_key_grn": [
                    "bytes",
                    "bool"
                ],
                "plain_data": [
                    "bytes",
                    "int",
                    "str"
                ]
            }
        },
        "decrypt": {
            "name": "decrypt",
            "location": 83,
            "return": [
                "bytes"
            ],
            "arguments": {
                "api_client": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "int"
                ],
                "crypto_key_grn": [
                    "bytes",
                    "bool"
                ],
                "encrypted_data": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "_generate_fernet_key": {
            "name": "_generate_fernet_key",
            "location": 107,
            "return": [
                "bytes"
            ],
            "arguments": {
                "value": [
                    "bytes",
                    "str",
                    "Union[str, bytes]"
                ]
            }
        }
    },
    "gcp-utils-python-master/fd_gcp/_http.py": {
        "execute_google_api_client_request": {
            "name": "execute_google_api_client_request",
            "location": 14,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Optional[str]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "request": []
            }
        }
    },
    "gcp-utils-python-master/fd_gcp/__init__.py": {},
    "gcp-utils-python-master/tests/test_auth.py": {
        "FunctionsTestCase.test_get_env_default_credentials": {
            "name": "test_get_env_default_credentials",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTestCase.test_get_env_project_id": {
            "name": "test_get_env_project_id",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTestCase.test_get_gce_credentials": {
            "name": "test_get_gce_credentials",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTestCase.test_load_credentials_from_file": {
            "name": "test_load_credentials_from_file",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gcp-utils-python-master/tests/test_exceptions.py": {
        "FunctionsTestCase.test__detect_already_exists": {
            "name": "test__detect_already_exists",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTestCase.test__detect_resource_permission_denied": {
            "name": "test__detect_resource_permission_denied",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTestCase.test__detect_resource_not_found": {
            "name": "test__detect_resource_not_found",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTestCase.test_process_googleapiclient_http_error": {
            "name": "test_process_googleapiclient_http_error",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExceptionsTestCase.test_error": {
            "name": "test_error",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExceptionsTestCase.test_auth_error": {
            "name": "test_auth_error",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExceptionsTestCase.test_already_exists": {
            "name": "test_already_exists",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExceptionsTestCase.test_resource_not_found": {
            "name": "test_resource_not_found",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExceptionsTestCase.test_resource_permission_denied": {
            "name": "test_resource_permission_denied",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExceptionsTestCase.test_unrecognized_api_error": {
            "name": "test_unrecognized_api_error",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExceptionsTestCase.test_unrecognized_api_http_error": {
            "name": "test_unrecognized_api_http_error",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gcp-utils-python-master/tests/test_gcp_kms.py": {
        "ResourceGrnFunctionsTestCase.test_compose_project_grn": {
            "name": "test_compose_project_grn",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceGrnFunctionsTestCase.test_compose_location_grn": {
            "name": "test_compose_location_grn",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceGrnFunctionsTestCase.test_compose_key_ring_grn": {
            "name": "test_compose_key_ring_grn",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceGrnFunctionsTestCase.test_compose_crypto_key_grn": {
            "name": "test_compose_crypto_key_grn",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceGrnFunctionsTestCase.test_compose_crypto_key_version_grn": {
            "name": "test_compose_crypto_key_version_grn",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OtherFunctionsTestCase.test_create_api_client": {
            "name": "test_create_api_client",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiOperationsFunctionsTestCase.test_create_key_ring": {
            "name": "test_create_key_ring",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiOperationsFunctionsTestCase.test_create_crypto_key": {
            "name": "test_create_crypto_key",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiOperationsFunctionsTestCase.test_encrypt": {
            "name": "test_encrypt",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiOperationsFunctionsTestCase.test_decrypt": {
            "name": "test_decrypt",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiOperationsFunctionsTestCase.test_add_member_to_crypto_key_iam_policy": {
            "name": "test_add_member_to_crypto_key_iam_policy",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiOperationsFunctionsTestCase.test_get_key_ring_iam_policy": {
            "name": "test_get_key_ring_iam_policy",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gcp-utils-python-master/tests/test_gcp_kms_mock.py": {
        "ApiOperationsFunctionsTestCase.test_create_crypto_key": {
            "name": "test_create_crypto_key",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiOperationsFunctionsTestCase.test_encrypt_decrypt": {
            "name": "test_encrypt_decrypt",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiOperationsFunctionsTestCase.test_encrypt_fail_input_size": {
            "name": "test_encrypt_fail_input_size",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiOperationsFunctionsTestCase.test_encrypt_fail_type": {
            "name": "test_encrypt_fail_type",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiOperationsFunctionsTestCase.test__generate_fernet_key_fail_length": {
            "name": "test__generate_fernet_key_fail_length",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiOperationsFunctionsTestCase.test__generate_fernet_key_fail_type": {
            "name": "test__generate_fernet_key_fail_type",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gcp-utils-python-master/tests/test__http.py": {
        "FunctionsTestCase.test_execute_google_api_client_request": {
            "name": "test_execute_google_api_client_request",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gcp-utils-python-master/tests/__init__.py": {}
}
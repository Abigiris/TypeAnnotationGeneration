{
    "geoapi-master/dist/geoapi/api.py": {
        "create_api": {
            "name": "create_api",
            "location": 20,
            "return": [
                "None",
                "FastAPI",
                "Optional[bool]",
                "Optional[int]",
                "Optional[str]",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "database_url": [
                    "str",
                    "int"
                ],
                "api_version": [
                    "str"
                ]
            }
        }
    },
    "geoapi-master/dist/geoapi/main.py": {
        "main": {
            "name": "main",
            "location": 20,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "geoapi-master/dist/geoapi/routes.py": {
        "create_routes": {
            "name": "create_routes",
            "location": 21,
            "return": [
                "APIRouter"
            ],
            "arguments": {
                "api_db": [
                    "bool"
                ]
            }
        }
    },
    "geoapi-master/dist/geoapi/test_routes.py": {
        "IntegrationTestsRoutes.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTestsRoutes.test_root": {
            "name": "test_root",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTestsRoutes.test_create_property": {
            "name": "test_create_property",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTestsRoutes.test_create_property_twice": {
            "name": "test_create_property_twice",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "geoapi-master/dist/geoapi/__init__.py": {},
    "geoapi-master/dist/geoapi/common/decorators.py": {
        "logtime": {
            "name": "logtime",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "repeat": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "logtime_async": {
            "name": "logtime_async",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "repeat": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "logprofile": {
            "name": "logprofile",
            "location": 83,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "logtime.actual_decorator": {
            "name": "actual_decorator",
            "location": 27,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "logtime_async.actual_decorator": {
            "name": "actual_decorator",
            "location": 60,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "logprofile.wrapper": {
            "name": "wrapper",
            "location": 95,
            "return": [
                "Optional[Any]",
                "bool",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "logtime.actual_decorator.wrapper": {
            "name": "wrapper",
            "location": 29,
            "return": [],
            "arguments": {}
        }
    },
    "geoapi-master/dist/geoapi/common/exceptions.py": {},
    "geoapi-master/dist/geoapi/common/json_models.py": {
        "RealPropertyOut.from_db": {
            "name": "from_db",
            "location": 42,
            "return": [
                "bool",
                "Dict[str, Tuple[Any, Any]]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[Dict]",
                    "dict[, ]",
                    "None"
                ],
                "db_row": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "geoapi-master/dist/geoapi/common/spatial_utils.py": {
        "to_geo_json": {
            "name": "to_geo_json",
            "location": 21,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "list",
                "bool"
            ],
            "arguments": {
                "geoalchemy_geometry": [
                    "Optional[str]",
                    "str",
                    "Optional[float]",
                    "None",
                    "Optional[int]",
                    "float",
                    "int"
                ]
            }
        },
        "to_geoalchemy_element": {
            "name": "to_geoalchemy_element",
            "location": 33,
            "return": [
                "Optional[str]",
                "set[]",
                "Optional[int]",
                "dict[str, typing.Any]",
                "bool",
                "dict[, ]",
                "str",
                "None"
            ],
            "arguments": {
                "geo_json": [
                    "dict",
                    "dict[, ]",
                    "str",
                    "Callable[[str], T]",
                    "typing.Callable[str, T]",
                    "list",
                    "list[]",
                    "OrderedDict[str, Any]",
                    "typing.OrderedDict"
                ]
            }
        },
        "from_lon_lat": {
            "name": "from_lon_lat",
            "location": 45,
            "return": [
                "set[]",
                "str",
                "dict[str, typing.Any]",
                "Iterable[T]",
                "dict[, ]",
                "None",
                "Optional[Dict[str, Any]]",
                "List[\"InlineContent\"]",
                "Optional[str]",
                "Optional[dict]"
            ],
            "arguments": {
                "lon": [
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[[None, None], bool]",
                    "cirq.ops.pauli_gates.Pauli"
                ],
                "lat": [
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[[None, None], bool]",
                    "cirq.ops.pauli_gates.Pauli"
                ]
            }
        },
        "from_bbox_array": {
            "name": "from_bbox_array",
            "location": 55,
            "return": [
                "None",
                "Optional[bool]",
                "bool",
                "Optional[str]",
                "str",
                "list",
                "Optional[float]"
            ],
            "arguments": {
                "bbox_array": [
                    "str",
                    "Callable",
                    "Callable[[None, None], bool]",
                    "cirq.ops.pauli_gates.Pauli"
                ]
            }
        },
        "to_bbox_array": {
            "name": "to_bbox_array",
            "location": 70,
            "return": [
                "list[]",
                "Optional[str]",
                "None",
                "Optional[int]",
                "bool",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "geo_json": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Callable[[str], T]",
                    "typing.Callable[str, T]",
                    "list",
                    "list[]"
                ]
            }
        },
        "_buffer": {
            "name": "_buffer",
            "location": 91,
            "return": [
                "str",
                "set[]",
                "Set[str]",
                "dict[str, typing.Any]",
                "bool",
                "dict[, ]"
            ],
            "arguments": {
                "json_geometry": [
                    "bool",
                    "int"
                ],
                "distance": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "buffer": {
            "name": "buffer",
            "location": 118,
            "return": [
                "None",
                "Optional[str]",
                "list",
                "bool",
                "str"
            ],
            "arguments": {
                "geo_json": [],
                "distance": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "area_distance": {
            "name": "area_distance",
            "location": 131,
            "return": [
                "dict[typing.Text, int]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "geoalchemy_polygon": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "geocode_geo_json": [
                    "str",
                    "None",
                    "Dict[str, Any]",
                    "Callable[[str], T]",
                    "dict[str, typing.Any]",
                    "typing.Callable[str, T]"
                ]
            }
        }
    },
    "geoapi-master/dist/geoapi/common/__init__.py": {},
    "geoapi-master/dist/geoapi/config/api_configurator.py": {
        "init": {
            "name": "init",
            "location": 16,
            "return": [
                "tuple[typing.Union[dict[, ],bool]]",
                "dict",
                "float",
                "str"
            ],
            "arguments": {
                "default_config_ini_filepath": [
                    "str",
                    "bool"
                ],
                "config_ini_env_key": [
                    "str",
                    "bool",
                    "pathlib.Path"
                ]
            }
        }
    },
    "geoapi-master/dist/geoapi/config/__init__.py": {},
    "geoapi-master/dist/geoapi/data/commands.py": {
        "RealPropertyDB.from_real_property_in": {
            "name": "from_real_property_in",
            "location": 29,
            "return": [
                "bool",
                "str",
                "int",
                "dict",
                "Optional[Any]"
            ],
            "arguments": {
                "cls": [
                    "Optional[Dict]",
                    "bool",
                    "dict[, ]",
                    "None",
                    "Optional[str]",
                    "str"
                ],
                "real_property_in": [
                    "float",
                    "str"
                ]
            }
        },
        "RealPropertyCommands.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "set[str]",
                    "Set[str]",
                    "abilian.core.sqlalchemy.SQLAlchemy",
                    "sqlalchemy.orm.session.Session"
                ],
                "real_property_table": [
                    "str",
                    "sqlalchemy.Table"
                ]
            }
        }
    },
    "geoapi-master/dist/geoapi/data/db.py": {
        "DB.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "database_url": [
                    "str",
                    "dict",
                    "float",
                    "dict[, ]",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "DB.connection": {
            "name": "connection",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DB.real_property_queries": {
            "name": "real_property_queries",
            "location": 57,
            "return": [
                "Optional[str]",
                "str",
                "Sequence[str]",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DB.real_property_commands": {
            "name": "real_property_commands",
            "location": 67,
            "return": [
                "set",
                "List[Dict[str, str]]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "geoapi-master/dist/geoapi/data/queries.py": {
        "RealPropertyQueries.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "set[str]"
                ],
                "real_property_table": [
                    "str"
                ]
            }
        }
    },
    "geoapi-master/dist/geoapi/data/__init__.py": {},
    "geoapi-master/dist/geoapi/log/api_logger.py": {
        "_setup_logging_queue": {
            "name": "_setup_logging_queue",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "init": {
            "name": "init",
            "location": 89,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "level": [
                    "int",
                    "Optional[str]",
                    "str",
                    "bytes",
                    "Dict[str, int]",
                    "None",
                    "dict[str, int]",
                    "Union[None, int]"
                ],
                "use_yml": [
                    "bool",
                    "str"
                ]
            }
        },
        "LocalQueueHandler.emit": {
            "name": "emit",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "dict",
                    "dict[, ]",
                    "IO",
                    "typing.IO"
                ]
            }
        },
        "APIFormatter.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "APIFormatter.format": {
            "name": "format",
            "location": 53,
            "return": [
                "bool",
                "str",
                "Tuple[int, Dict[str, Any]]",
                "None",
                "float",
                "typing.Iterator",
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "int",
                    "str",
                    "Exception",
                    "logging.Logger"
                ]
            }
        }
    },
    "geoapi-master/dist/geoapi/log/__init__.py": {},
    "geoapi-master/src/geoapi/api.py": {
        "create_api": {
            "name": "create_api",
            "location": 20,
            "return": [
                "None",
                "FastAPI",
                "Optional[bool]",
                "Optional[int]",
                "Optional[str]",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "database_url": [
                    "str",
                    "int"
                ],
                "api_version": [
                    "str"
                ]
            }
        }
    },
    "geoapi-master/src/geoapi/main.py": {
        "main": {
            "name": "main",
            "location": 20,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "geoapi-master/src/geoapi/routes.py": {
        "create_routes": {
            "name": "create_routes",
            "location": 21,
            "return": [
                "APIRouter"
            ],
            "arguments": {
                "api_db": [
                    "bool"
                ]
            }
        }
    },
    "geoapi-master/src/geoapi/rundev.py": {},
    "geoapi-master/src/geoapi/test_routes.py": {
        "IntegrationTestsRoutes.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTestsRoutes.test_root": {
            "name": "test_root",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTestsRoutes.test_create_property": {
            "name": "test_create_property",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTestsRoutes.test_create_property_twice": {
            "name": "test_create_property_twice",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "geoapi-master/src/geoapi/__init__.py": {},
    "geoapi-master/src/geoapi/common/decorators.py": {
        "logtime": {
            "name": "logtime",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "repeat": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "logtime_async": {
            "name": "logtime_async",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "repeat": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "logprofile": {
            "name": "logprofile",
            "location": 83,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "logtime.actual_decorator": {
            "name": "actual_decorator",
            "location": 27,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "logtime_async.actual_decorator": {
            "name": "actual_decorator",
            "location": 60,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "logprofile.wrapper": {
            "name": "wrapper",
            "location": 95,
            "return": [
                "Optional[Any]",
                "bool",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "logtime.actual_decorator.wrapper": {
            "name": "wrapper",
            "location": 29,
            "return": [],
            "arguments": {}
        }
    },
    "geoapi-master/src/geoapi/common/exceptions.py": {},
    "geoapi-master/src/geoapi/common/json_models.py": {
        "RealPropertyOut.from_db": {
            "name": "from_db",
            "location": 42,
            "return": [
                "bool",
                "Dict[str, Tuple[Any, Any]]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[Dict]",
                    "dict[, ]",
                    "None"
                ],
                "db_row": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "geoapi-master/src/geoapi/common/spatial_utils.py": {
        "to_geo_json": {
            "name": "to_geo_json",
            "location": 21,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "list",
                "bool"
            ],
            "arguments": {
                "geoalchemy_geometry": [
                    "Optional[str]",
                    "str",
                    "Optional[float]",
                    "None",
                    "Optional[int]",
                    "float",
                    "int"
                ]
            }
        },
        "to_geoalchemy_element": {
            "name": "to_geoalchemy_element",
            "location": 33,
            "return": [
                "Optional[str]",
                "set[]",
                "Optional[int]",
                "dict[str, typing.Any]",
                "bool",
                "dict[, ]",
                "str",
                "None"
            ],
            "arguments": {
                "geo_json": [
                    "dict",
                    "dict[, ]",
                    "str",
                    "Callable[[str], T]",
                    "typing.Callable[str, T]",
                    "list",
                    "list[]",
                    "OrderedDict[str, Any]",
                    "typing.OrderedDict"
                ]
            }
        },
        "from_lon_lat": {
            "name": "from_lon_lat",
            "location": 45,
            "return": [
                "set[]",
                "str",
                "dict[str, typing.Any]",
                "Iterable[T]",
                "dict[, ]",
                "None",
                "Optional[Dict[str, Any]]",
                "List[\"InlineContent\"]",
                "Optional[str]",
                "Optional[dict]"
            ],
            "arguments": {
                "lon": [
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[[None, None], bool]",
                    "cirq.ops.pauli_gates.Pauli"
                ],
                "lat": [
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[[None, None], bool]",
                    "cirq.ops.pauli_gates.Pauli"
                ]
            }
        },
        "from_bbox_array": {
            "name": "from_bbox_array",
            "location": 55,
            "return": [
                "None",
                "Optional[bool]",
                "bool",
                "Optional[str]",
                "str",
                "list",
                "Optional[float]"
            ],
            "arguments": {
                "bbox_array": [
                    "str",
                    "Callable",
                    "Callable[[None, None], bool]",
                    "cirq.ops.pauli_gates.Pauli"
                ]
            }
        },
        "to_bbox_array": {
            "name": "to_bbox_array",
            "location": 70,
            "return": [
                "list[]",
                "Optional[str]",
                "None",
                "Optional[int]",
                "bool",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "geo_json": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Callable[[str], T]",
                    "typing.Callable[str, T]",
                    "list",
                    "list[]"
                ]
            }
        },
        "_buffer": {
            "name": "_buffer",
            "location": 91,
            "return": [
                "str",
                "set[]",
                "Set[str]",
                "dict[str, typing.Any]",
                "bool",
                "dict[, ]"
            ],
            "arguments": {
                "json_geometry": [
                    "bool",
                    "int"
                ],
                "distance": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "buffer": {
            "name": "buffer",
            "location": 118,
            "return": [
                "None",
                "Optional[str]",
                "list",
                "bool",
                "str"
            ],
            "arguments": {
                "geo_json": [],
                "distance": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "area_distance": {
            "name": "area_distance",
            "location": 131,
            "return": [
                "dict[typing.Text, int]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "geoalchemy_polygon": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "geocode_geo_json": [
                    "str",
                    "None",
                    "Dict[str, Any]",
                    "Callable[[str], T]",
                    "dict[str, typing.Any]",
                    "typing.Callable[str, T]"
                ]
            }
        }
    },
    "geoapi-master/src/geoapi/common/__init__.py": {},
    "geoapi-master/src/geoapi/config/api_configurator.py": {
        "init": {
            "name": "init",
            "location": 16,
            "return": [
                "tuple[typing.Union[dict[, ],bool]]",
                "dict",
                "float",
                "str"
            ],
            "arguments": {
                "default_config_ini_filepath": [
                    "str",
                    "bool"
                ],
                "config_ini_env_key": [
                    "str",
                    "bool",
                    "pathlib.Path"
                ]
            }
        }
    },
    "geoapi-master/src/geoapi/config/__init__.py": {},
    "geoapi-master/src/geoapi/data/commands.py": {
        "RealPropertyDB.from_real_property_in": {
            "name": "from_real_property_in",
            "location": 29,
            "return": [
                "bool",
                "str",
                "int",
                "dict",
                "Optional[Any]"
            ],
            "arguments": {
                "cls": [
                    "Optional[Dict]",
                    "bool",
                    "dict[, ]",
                    "None",
                    "Optional[str]",
                    "str"
                ],
                "real_property_in": [
                    "float",
                    "str"
                ]
            }
        },
        "RealPropertyCommands.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "set[str]",
                    "Set[str]",
                    "abilian.core.sqlalchemy.SQLAlchemy",
                    "sqlalchemy.orm.session.Session"
                ],
                "real_property_table": [
                    "str",
                    "sqlalchemy.Table"
                ]
            }
        }
    },
    "geoapi-master/src/geoapi/data/db.py": {
        "DB.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "database_url": [
                    "str",
                    "dict",
                    "float",
                    "dict[, ]",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "DB.connection": {
            "name": "connection",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DB.real_property_queries": {
            "name": "real_property_queries",
            "location": 57,
            "return": [
                "Optional[str]",
                "str",
                "Sequence[str]",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DB.real_property_commands": {
            "name": "real_property_commands",
            "location": 67,
            "return": [
                "set",
                "List[Dict[str, str]]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "geoapi-master/src/geoapi/data/queries.py": {
        "RealPropertyQueries.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "set[str]"
                ],
                "real_property_table": [
                    "str"
                ]
            }
        }
    },
    "geoapi-master/src/geoapi/data/__init__.py": {},
    "geoapi-master/src/geoapi/log/api_logger.py": {
        "_setup_logging_queue": {
            "name": "_setup_logging_queue",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "init": {
            "name": "init",
            "location": 89,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "level": [
                    "int",
                    "Optional[str]",
                    "str",
                    "bytes",
                    "Dict[str, int]",
                    "None",
                    "dict[str, int]",
                    "Union[None, int]"
                ],
                "use_yml": [
                    "bool",
                    "str"
                ]
            }
        },
        "LocalQueueHandler.emit": {
            "name": "emit",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "dict",
                    "dict[, ]",
                    "IO",
                    "typing.IO"
                ]
            }
        },
        "APIFormatter.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "APIFormatter.format": {
            "name": "format",
            "location": 53,
            "return": [
                "bool",
                "str",
                "Tuple[int, Dict[str, Any]]",
                "None",
                "float",
                "typing.Iterator",
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "int",
                    "str",
                    "Exception",
                    "logging.Logger"
                ]
            }
        }
    },
    "geoapi-master/src/geoapi/log/__init__.py": {}
}
{
    "geoportailv3-master/compare_packages.py": {},
    "geoportailv3-master/CONST_create_template/geoportal/setup.py": {},
    "geoportailv3-master/CONST_create_template/geoportal/geoportailv3_geoportal/models.py": {},
    "geoportailv3-master/CONST_create_template/geoportal/geoportailv3_geoportal/resources.py": {
        "Root.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "pyramid.requesRequest"
                ]
            }
        }
    },
    "geoportailv3-master/CONST_create_template/geoportal/geoportailv3_geoportal/subscribers.py": {
        "add_localizer": {
            "name": "add_localizer",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "add_renderer_globals": {
            "name": "add_renderer_globals",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "add_localizer.auto_translate": {
            "name": "auto_translate",
            "location": 20,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        }
    },
    "geoportailv3-master/CONST_create_template/geoportal/geoportailv3_geoportal/__init__.py": {
        "main": {
            "name": "main",
            "location": 10,
            "return": [
                "dict",
                "str",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "global_config": [
                    "bool",
                    "float"
                ]
            }
        }
    },
    "geoportailv3-master/CONST_create_template/geoportal/geoportailv3_geoportal/views/__init__.py": {},
    "geoportailv3-master/geoportal/setup.py": {},
    "geoportailv3-master/geoportal/geoportailv3_geoportal/adapters.py": {
        "datetime_adapter": {
            "name": "datetime_adapter",
            "location": 1,
            "return": [
                "str",
                "int",
                "float",
                "List[int]"
            ],
            "arguments": {
                "obj": [],
                "request": [
                    "int"
                ]
            }
        },
        "decimal_adapter": {
            "name": "decimal_adapter",
            "location": 5,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "Set[str]"
                ],
                "request": []
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/geocode.py": {
        "WKPOI.dump": {
            "name": "dump",
            "location": 50,
            "return": [
                "Dict[Text,]",
                "Dict",
                "Dict[str,Any]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neighbourhood.dump": {
            "name": "dump",
            "location": 68,
            "return": [
                "Dict[Text,]",
                "bool",
                "Dict",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/models.py": {
        "LuxLayerInternalWMS.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Text",
                    "str",
                    "float",
                    "Optional[str]"
                ],
                "layer": [
                    "Text",
                    "str",
                    "float",
                    "Optional[str]"
                ],
                "public": [
                    "bool",
                    "str",
                    "float",
                    "Optional[str]"
                ],
                "time_mode": [
                    "Text",
                    "str",
                    "float",
                    "Optional[str]"
                ],
                "time_widget": [
                    "Text",
                    "str",
                    "float",
                    "Optional[str]"
                ],
                "url": [
                    "Text",
                    "bool",
                    "int",
                    "Optional[zerver.models.Stream]",
                    "Optional[str]",
                    "Iterable[str]"
                ],
                "layers": [
                    "Text",
                    "bool",
                    "int",
                    "Optional[zerver.models.Stream]",
                    "Optional[str]",
                    "Iterable[str]"
                ],
                "is_poi": [
                    "bool",
                    "int",
                    "Optional[zerver.models.Stream]",
                    "Optional[str]",
                    "Iterable[str]"
                ],
                "collection_id": [
                    "int",
                    "str",
                    "medtagger.types.ScanID",
                    "Dict[str,str]",
                    "Optional[str]",
                    "bool"
                ],
                "rest_url": [
                    "Text",
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[List[str]]"
                ]
            }
        },
        "LuxLayerInternalWMS.get_default": {
            "name": "get_default",
            "location": 131,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "Mapping[str, Any]",
                "int",
                "apistar.types.WSGIEnviron"
            ],
            "arguments": {
                "dbsession": [
                    "str",
                    "Dict[str,collections.abc.AsyncGenerator]",
                    "sqlalchemy.orm.Session",
                    "bool",
                    "zerver.models.Realm",
                    "sqlalchemy.orm.query.Query",
                    "article.transfer.models.ArticleNumber",
                    "Dict[str,AsyncGenerator]"
                ]
            }
        },
        "LuxLayerExternalWMS.__init__": {
            "name": "__init__",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Text",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[float]",
                    "bool",
                    "float"
                ],
                "layer": [
                    "Text",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[float]",
                    "bool",
                    "float"
                ],
                "public": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[float]",
                    "float"
                ],
                "time_mode": [
                    "Text",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[float]",
                    "bool",
                    "float"
                ],
                "time_widget": [
                    "Text",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[float]",
                    "bool",
                    "float"
                ],
                "category_id": [
                    "int",
                    "str",
                    "medtagger.types.ScanID",
                    "bytes"
                ]
            }
        },
        "LuxLayerExternalWMS.get_default": {
            "name": "get_default",
            "location": 165,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "Mapping[str, Any]",
                "int",
                "apistar.types.WSGIEnviron"
            ],
            "arguments": {
                "dbsession": [
                    "str",
                    "Dict[str,collections.abc.AsyncGenerator]",
                    "sqlalchemy.orm.Session",
                    "bool",
                    "zerver.models.Realm",
                    "sqlalchemy.orm.query.Query",
                    "article.transfer.models.ArticleNumber",
                    "Dict[str,AsyncGenerator]"
                ]
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/mymaps.py": {
        "Map.get_title": {
            "name": "get_title",
            "location": 53,
            "return": [
                "None",
                "str",
                "Optional[int]",
                "bool",
                "Optional[mypy.types.Type]",
                "Optional[str]",
                "int",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Map.todict": {
            "name": "todict",
            "location": 58,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Map.__iter__": {
            "name": "__iter__",
            "location": 72,
            "return": [
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Map.get": {
            "name": "get",
            "location": 79,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "dict",
                "Callable",
                "List[str]"
            ],
            "arguments": {
                "id": [
                    "int",
                    "sqlalchemy.orm.session.Session",
                    "None",
                    "str",
                    "types.Optional[int]",
                    "types.Optional[types.UUID]",
                    "Optional[str]",
                    "types.Optional[types.Timestamp]"
                ],
                "session": [
                    "int",
                    "sqlalchemy.orm.session.Session",
                    "None",
                    "str",
                    "types.Optional[int]",
                    "types.Optional[types.UUID]",
                    "Optional[str]",
                    "types.Optional[types.Timestamp]"
                ]
            }
        },
        "Map.belonging_to": {
            "name": "belonging_to",
            "location": 84,
            "return": [
                "List[dict[Text,None]]",
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "user": [
                    "bool"
                ],
                "session": [
                    "bool"
                ]
            }
        },
        "Feature.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "feature": [
                    "int",
                    "None",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ]
            }
        },
        "Feature.__update__": {
            "name": "__update__",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "feature": [
                    "Dict[str,Any]",
                    "Dict",
                    "str",
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "Feature.__geo_interface__": {
            "name": "__geo_interface__",
            "location": 227,
            "return": [
                "Feature",
                "Iterable[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Feature.geom": {
            "name": "geom",
            "location": 258,
            "return": [
                "None",
                "Union[str,List[str]]",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Category.__init__": {
            "name": "__init__",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "Dict"
                ]
            }
        },
        "Category.todict": {
            "name": "todict",
            "location": 288,
            "return": [
                "Dict[Text,]",
                "Dict",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Category.belonging_to": {
            "name": "belonging_to",
            "location": 294,
            "return": [
                "List",
                "List[str]",
                "int",
                "Iterable[T]"
            ],
            "arguments": {
                "user": [
                    "sqlalchemy.orm.Session"
                ],
                "session": [
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "Category.all": {
            "name": "all",
            "location": 305,
            "return": [
                "List",
                "bool",
                "int",
                "Iterable[T]"
            ],
            "arguments": {
                "session": [
                    "abilian.core.sqlalchemy.SQLAlchemy",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.scoping.scoped_session"
                ]
            }
        },
        "Role.__init__": {
            "name": "__init__",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "Dict"
                ]
            }
        },
        "Map.todict.convert_datetime": {
            "name": "convert_datetime",
            "location": 59,
            "return": [
                "None",
                "str",
                "Optional[bool]",
                "Sequence[util.datetime.range.DateTimeRange]",
                "Optional[str]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Optional[str]",
                    "T",
                    "bytes",
                    "float",
                    "Union[int, None]"
                ]
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/PF.py": {},
    "geoportailv3-master/geoportal/geoportailv3_geoportal/portail.py": {},
    "geoportailv3-master/geoportal/geoportailv3_geoportal/resources.py": {
        "Root.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "pyramid.requesRequest"
                ]
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/routing.py": {},
    "geoportailv3-master/geoportal/geoportailv3_geoportal/subscribers.py": {
        "add_localizer": {
            "name": "add_localizer",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "add_renderer_globals": {
            "name": "add_renderer_globals",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "add_localizer.auto_translate": {
            "name": "auto_translate",
            "location": 20,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/userconfig.py": {},
    "geoportailv3-master/geoportal/geoportailv3_geoportal/version.py": {},
    "geoportailv3-master/geoportal/geoportailv3_geoportal/__init__.py": {
        "add_cors_headers_response_callback": {
            "name": "add_cors_headers_response_callback",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "Optional[pyramid.requesRequest]",
                    "None",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "locale_negotiator": {
            "name": "locale_negotiator",
            "location": 47,
            "return": [
                "str",
                "List[str]",
                "Dict[str,dict[str,Any]]",
                "int",
                "None",
                "Dict[str,Any]",
                "bytes"
            ],
            "arguments": {
                "request": [
                    "pyramid.requesRequest",
                    "models.Workspace"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 66,
            "return": [
                "dict",
                "str",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "global_config": [
                    "bool",
                    "float"
                ]
            }
        },
        "add_cors_headers_response_callback.cors_headers": {
            "name": "cors_headers",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [],
                "response": [
                    "Dict[str, List[str]]",
                    "pyramid.requesRequest",
                    "Dict[str, str]",
                    "str"
                ]
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/admin/admin.py": {},
    "geoportailv3-master/geoportal/geoportailv3_geoportal/admin/__init__.py": {},
    "geoportailv3-master/geoportal/geoportailv3_geoportal/admin/view/lux_download_url.py": {
        "LuxDownloadUrlViews.index": {
            "name": "index",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxDownloadUrlViews.grid": {
            "name": "grid",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxDownloadUrlViews.view": {
            "name": "view",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxDownloadUrlViews.save": {
            "name": "save",
            "location": 45,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxDownloadUrlViews.delete": {
            "name": "delete",
            "location": 51,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxDownloadUrlViews.duplicate": {
            "name": "duplicate",
            "location": 57,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/admin/view/lux_getfeature_definition.py": {
        "LuxGetfeatureDefinitionViews.index": {
            "name": "index",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxGetfeatureDefinitionViews.grid": {
            "name": "grid",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxGetfeatureDefinitionViews.view": {
            "name": "view",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxGetfeatureDefinitionViews.save": {
            "name": "save",
            "location": 49,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxGetfeatureDefinitionViews.delete": {
            "name": "delete",
            "location": 55,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxGetfeatureDefinitionViews.duplicate": {
            "name": "duplicate",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/admin/view/lux_layer_external_wms.py": {
        "LuxLayerExternalWMSViews._base_query": {
            "name": "_base_query",
            "location": 59,
            "return": [
                "str",
                "dict",
                "Optional[List[str]]",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxLayerExternalWMSViews.index": {
            "name": "index",
            "location": 66,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxLayerExternalWMSViews.grid": {
            "name": "grid",
            "location": 71,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxLayerExternalWMSViews._item_actions": {
            "name": "_item_actions",
            "location": 74,
            "return": [
                "T",
                "Tuple[Union[Type,Type]]",
                "Dict",
                "Optional[basilisp.lang.interfaces.IPersistentMap]",
                "float",
                "Set",
                "List[ItemAction]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Callable[...,str]",
                    "Dict",
                    "Callable"
                ],
                "readonly": [
                    "bool",
                    "float",
                    "Callable",
                    "Sequence[Any]"
                ]
            }
        },
        "LuxLayerExternalWMSViews.view": {
            "name": "view",
            "location": 91,
            "return": [
                "str",
                "db.models.Name"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxLayerExternalWMSViews.save": {
            "name": "save",
            "location": 102,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxLayerExternalWMSViews.delete": {
            "name": "delete",
            "location": 108,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxLayerExternalWMSViews.duplicate": {
            "name": "duplicate",
            "location": 114,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxLayerExternalWMSViews.convert_to_wmts": {
            "name": "convert_to_wmts",
            "location": 120,
            "return": [
                "bool",
                "Dict[Text,bool]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/admin/view/lux_layer_internal_wms.py": {
        "LuxLayerInternalWMSViews._base_query": {
            "name": "_base_query",
            "location": 64,
            "return": [
                "str",
                "dict",
                "Optional[List[str]]",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxLayerInternalWMSViews.index": {
            "name": "index",
            "location": 71,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxLayerInternalWMSViews.grid": {
            "name": "grid",
            "location": 76,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxLayerInternalWMSViews._item_actions": {
            "name": "_item_actions",
            "location": 79,
            "return": [
                "T",
                "Tuple[Union[Type,Type]]",
                "Dict",
                "Optional[basilisp.lang.interfaces.IPersistentMap]",
                "float",
                "Set",
                "List[ItemAction]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Callable[...,str]",
                    "Dict",
                    "Callable"
                ],
                "readonly": [
                    "bool",
                    "float",
                    "Callable",
                    "Sequence[Any]"
                ]
            }
        },
        "LuxLayerInternalWMSViews.view": {
            "name": "view",
            "location": 96,
            "return": [
                "str",
                "db.models.Name"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxLayerInternalWMSViews.save": {
            "name": "save",
            "location": 107,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxLayerInternalWMSViews.delete": {
            "name": "delete",
            "location": 113,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxLayerInternalWMSViews.duplicate": {
            "name": "duplicate",
            "location": 119,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxLayerInternalWMSViews.convert_to_wmts": {
            "name": "convert_to_wmts",
            "location": 125,
            "return": [
                "bool",
                "Dict[Text,bool]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/admin/view/lux_measurement_directory.py": {
        "LuxMeasurementDirectoryViews.index": {
            "name": "index",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxMeasurementDirectoryViews.grid": {
            "name": "grid",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxMeasurementDirectoryViews.view": {
            "name": "view",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxMeasurementDirectoryViews.save": {
            "name": "save",
            "location": 46,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxMeasurementDirectoryViews.delete": {
            "name": "delete",
            "location": 52,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxMeasurementDirectoryViews.duplicate": {
            "name": "duplicate",
            "location": 58,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/admin/view/lux_measurement_login_commune.py": {
        "LuxMeasurementLoginCommuneViews.index": {
            "name": "index",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxMeasurementLoginCommuneViews.grid": {
            "name": "grid",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxMeasurementLoginCommuneViews.view": {
            "name": "view",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxMeasurementLoginCommuneViews.save": {
            "name": "save",
            "location": 44,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxMeasurementLoginCommuneViews.delete": {
            "name": "delete",
            "location": 50,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxMeasurementLoginCommuneViews.duplicate": {
            "name": "duplicate",
            "location": 56,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/admin/view/lux_predefined_wms.py": {
        "ListFieldLux.id": {
            "name": "id",
            "location": 16,
            "return": [
                "str",
                "Optional[str]",
                "bytes",
                "int",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxPredefinedWmsViews.index": {
            "name": "index",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxPredefinedWmsViews.grid": {
            "name": "grid",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxPredefinedWmsViews.view": {
            "name": "view",
            "location": 47,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxPredefinedWmsViews.save": {
            "name": "save",
            "location": 53,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxPredefinedWmsViews.delete": {
            "name": "delete",
            "location": 59,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxPredefinedWmsViews.duplicate": {
            "name": "duplicate",
            "location": 65,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/admin/view/lux_print_servers.py": {
        "LuxPrintServersViews.index": {
            "name": "index",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxPrintServersViews.grid": {
            "name": "grid",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxPrintServersViews.view": {
            "name": "view",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxPrintServersViews.save": {
            "name": "save",
            "location": 45,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxPrintServersViews.delete": {
            "name": "delete",
            "location": 51,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxPrintServersViews.duplicate": {
            "name": "duplicate",
            "location": 57,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/admin/view/__init__.py": {},
    "geoportailv3-master/geoportal/geoportailv3_geoportal/lib/esri_authentication.py": {
        "read_request_with_token": {
            "name": "read_request_with_token",
            "location": 16,
            "return": [
                "ResultTuple",
                "str",
                "Dict",
                "Dict[str,Any]",
                "Callable"
            ],
            "arguments": {
                "url_request": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "parent_request": [
                    "str",
                    "Dict",
                    "Callable",
                    "List[Tuple[str,str]]",
                    "List[tuple[Union[str,str]]]"
                ],
                "log": [
                    "str"
                ],
                "timeout": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "renew_token": [
                    "bool",
                    "bytes",
                    "Mapping[str,Optional[float]]",
                    "List[Tuple[bytes,bytes]]",
                    "List[str]"
                ]
            }
        },
        "get_arcgis_token": {
            "name": "get_arcgis_token",
            "location": 52,
            "return": [
                "Union[str, IO]",
                "IO[str]",
                "str",
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request": [
                    "str",
                    "bool",
                    "requests.models.PreparedRequest",
                    "Union[bool,str]"
                ],
                "log": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "force_renew": [
                    "bool",
                    "str",
                    "int",
                    "Iterable[Tuple[str,int]]"
                ],
                "token_check_url": [
                    "str",
                    "None",
                    "bool",
                    "Dict[str,str]",
                    "Optional[str]"
                ]
            }
        },
        "_renew_arcgis_token": {
            "name": "_renew_arcgis_token",
            "location": 97,
            "return": [
                "Dict",
                "Union[str,IO]",
                "Dict[str,Any]",
                "IO[str]"
            ],
            "arguments": {
                "session": [
                    "Optional[str]",
                    "bool"
                ],
                "config": [
                    "Dict[str, Any]",
                    "dict",
                    "bool"
                ],
                "log": [
                    "bool",
                    "str",
                    "Optional[Exception]",
                    "int",
                    "Optional[str]"
                ]
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/lib/lingua_extractor.py": {
        "add_url_params": {
            "name": "add_url_params",
            "location": 55,
            "return": [
                "bytes",
                "str",
                "httplib2.Http",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "url": [
                    "str",
                    "float",
                    "int",
                    "bool",
                    "T"
                ],
                "params": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "add_spliturl_params": {
            "name": "add_spliturl_params",
            "location": 59,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "spliturl": [
                    "dict",
                    "Dict[str, Any]",
                    "projects.models.Project"
                ],
                "params": [
                    "Dict[str, float]",
                    "Mapping[str, Any]",
                    "Dict[str, str]",
                    "Dict[str, int]",
                    "models.Question"
                ]
            }
        },
        "get_url2": {
            "name": "get_url2",
            "location": 68,
            "return": [
                "Optional[str]",
                "str",
                "bool",
                "Sequence[int]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "url": [
                    "str",
                    "List[str]"
                ],
                "request": [
                    "str",
                    "Optional[Mapping[str, str]]",
                    "int",
                    "bool"
                ],
                "errors": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "_Registry.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "settings": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "_Request.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "settings": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "_Request.static_url": {
            "name": "static_url",
            "location": 137,
            "return": [
                "str",
                "float",
                "zulipterminal.helper.Message",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]"
            ],
            "arguments": {}
        },
        "_Request.static_path": {
            "name": "static_path",
            "location": 143,
            "return": [
                "int",
                "str",
                "apistar.types.WSGIEnviron",
                "bool",
                "List[str]"
            ],
            "arguments": {}
        },
        "_Request.route_url": {
            "name": "route_url",
            "location": 149,
            "return": [
                "str",
                "float",
                "zulipterminal.helper.Message",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]"
            ],
            "arguments": {}
        },
        "_Request.current_route_url": {
            "name": "current_route_url",
            "location": 155,
            "return": [
                "str",
                "float",
                "zulipterminal.helper.Message"
            ],
            "arguments": {}
        },
        "GeomapfishAngularExtractor.__init__": {
            "name": "__init__",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeomapfishAngularExtractor.__call__": {
            "name": "__call__",
            "location": 177,
            "return": [
                "starlette.types.Receive",
                "Callable",
                "starlette.types.Send",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Union[str, BinaryIO]"
                ],
                "options": [
                    "bool",
                    "Sequence[str]",
                    "str"
                ],
                "fileobj": [
                    "bool",
                    "Sequence[str]",
                    "str"
                ],
                "lineno": [
                    "bool",
                    "Sequence[str]",
                    "str"
                ]
            }
        },
        "GeomapfishConfigExtractor.__call__": {
            "name": "__call__",
            "location": 264,
            "return": [
                "bool",
                "int",
                "dict",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "options": [
                    "bool",
                    "Sequence[str]",
                    "str"
                ],
                "fileobj": [
                    "str",
                    "bool",
                    "List[app.models.Question]",
                    "float",
                    "zerver.models.Realm"
                ],
                "lineno": [
                    "str",
                    "bool",
                    "List[app.models.Question]",
                    "float",
                    "zerver.models.Realm"
                ]
            }
        },
        "GeomapfishConfigExtractor._collect_app_config": {
            "name": "_collect_app_config",
            "location": 279,
            "return": [
                "logging.LogRecord",
                "bool",
                "str",
                "Dict[Optional[str], Set[abilian.services.security.models.Role]]",
                "abilian.core.models.subjects.Principal"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[List[str]]",
                    "List[Message]",
                    "tuple",
                    "Optional[List]"
                ]
            }
        },
        "GeomapfishConfigExtractor._enumerate_attributes_values": {
            "name": "_enumerate_attributes_values",
            "location": 379,
            "return": [
                "zerver.models.Realm",
                "Iterable[int]"
            ],
            "arguments": {
                "dbsessions": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "dict"
                ],
                "layers": [
                    "str",
                    "Generator",
                    "int",
                    "float"
                ],
                "layerinfos": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ],
                "fieldname": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "GeomapfishConfigExtractor._collect_print_config": {
            "name": "_collect_print_config",
            "location": 401,
            "return": [
                "Dict[str, Any]",
                "dict",
                "list",
                "set"
            ],
            "arguments": {
                "print_config": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Optional[str]]"
                ],
                "filename": [
                    "Dict[str, str]",
                    "bool",
                    "Optional[str]",
                    "List[str]",
                    "Optional[Mapping[str, str]]",
                    "str"
                ]
            }
        },
        "GeomapfishThemeExtractor.__init__": {
            "name": "__init__",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeomapfishThemeExtractor.__call__": {
            "name": "__call__",
            "location": 447,
            "return": [
                "starlette.types.Receive",
                "Callable",
                "starlette.types.Send",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "options": [
                    "bool",
                    "Sequence[str]",
                    "str"
                ],
                "fileobj": [
                    "str",
                    "bool",
                    "List[app.models.Question]",
                    "float",
                    "zerver.models.Realm"
                ],
                "lineno": [
                    "str",
                    "bool",
                    "List[app.models.Question]",
                    "float",
                    "zerver.models.Realm"
                ]
            }
        },
        "GeomapfishThemeExtractor._import": {
            "name": "_import",
            "location": 540,
            "return": [],
            "arguments": {
                "object_type": [
                    "str",
                    "Optional[str]",
                    "Optional[gdpr.models.LegalReason]",
                    "gardnr.models.Driver",
                    "Type"
                ],
                "messages": [
                    "Optional[List[Any]]",
                    "markdown.util.etree.Element",
                    "Union[None, str, List[str], Dict[str, str]]",
                    "str",
                    "int"
                ],
                "callback": [
                    "str",
                    "src.evalg.encoding.BinaryTree.Node",
                    "Dict[str, Any]",
                    "Optional[List[str]]",
                    "Optional[Any]",
                    "Union[str, Node[T]]"
                ]
            }
        },
        "GeomapfishThemeExtractor._import_layer_wms": {
            "name": "_import_layer_wms",
            "location": 561,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "layer": [
                    "raiden.messages.Message",
                    "int",
                    "bool"
                ],
                "messages": [
                    "str",
                    "List[str]",
                    "List[int]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "GeomapfishThemeExtractor._import_layer_wmts": {
            "name": "_import_layer_wmts",
            "location": 607,
            "return": [],
            "arguments": {
                "self": [],
                "layer": [
                    "int",
                    "dict",
                    "bool"
                ],
                "messages": [
                    "dict",
                    "bool",
                    "email.message.Message",
                    "telebotypes.Message"
                ]
            }
        },
        "GeomapfishThemeExtractor._import_layer_attributes": {
            "name": "_import_layer_attributes",
            "location": 640,
            "return": [],
            "arguments": {
                "self": [],
                "url": [
                    "List[str]",
                    "int",
                    "str",
                    "bool"
                ],
                "layer": [
                    "Optional[str]",
                    "str",
                    "Dict[str, str]",
                    "List[\"Source\"]"
                ],
                "item_type": [
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "messages": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "GeomapfishThemeExtractor._build_url": {
            "name": "_build_url",
            "location": 669,
            "return": [
                "str",
                "bool",
                "Optional[List[str]]",
                "Dict[str, Any]",
                "dict",
                "djmoney.contrib.exchange.models.Rate",
                "zerver.models.Realm",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bool",
                    "Callable",
                    "float"
                ]
            }
        },
        "GeomapfishThemeExtractor._layer_attributes": {
            "name": "_layer_attributes",
            "location": 683,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Union[bytes, bytearray]",
                    "Optional[dict]",
                    "Dict[str, Any]"
                ],
                "layer": [
                    "Optional[str]",
                    "Optional[abilian.core.models.Model]",
                    "static_frame.core.util.IndexInitializer",
                    "Dict[str, List[str]]",
                    "Set[str]",
                    "Iterable[Type[fonduer.candidates.models.Candidate]]",
                    "List[Dict]"
                ]
            }
        },
        "LuxembourgExtractor._get_missing_keys": {
            "name": "_get_missing_keys",
            "location": 861,
            "return": [
                "str",
                "bytes",
                "List[bytes]"
            ],
            "arguments": {
                "self": [],
                "po_name": [
                    "str"
                ]
            }
        },
        "LuxembourgExtractor.__init__": {
            "name": "__init__",
            "location": 882,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LuxembourgExtractor.__call__": {
            "name": "__call__",
            "location": 900,
            "return": [
                "starlette.types.Receive",
                "Callable",
                "starlette.types.Send",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "bool",
                    "Sequence[str]",
                    "str"
                ],
                "options": [
                    "bool",
                    "Sequence[str]",
                    "str"
                ],
                "fileobj": [
                    "str",
                    "bool",
                    "List[app.models.Question]",
                    "float",
                    "zerver.models.Realm"
                ],
                "lineno": [
                    "str",
                    "bool",
                    "List[app.models.Question]",
                    "float",
                    "zerver.models.Realm"
                ]
            }
        },
        "LuxembourgExtractor._insert_attribute": {
            "name": "_insert_attribute",
            "location": 966,
            "return": [],
            "arguments": {
                "self": [],
                "attribute": [
                    "str",
                    "Sequence[str]",
                    "core.models.Grouping",
                    "Optional[Iterable[str]]",
                    "Sequence[object]",
                    "Callable"
                ],
                "location": [
                    "static_frame.core.util.NameType",
                    "bool",
                    "List[Dict]",
                    "Optional[Set[str]]",
                    "Dict[str, str]"
                ]
            }
        },
        "LuxembourgExtractor._extract_messages": {
            "name": "_extract_messages",
            "location": 983,
            "return": [],
            "arguments": {
                "self": [],
                "db_session": [
                    "bytes",
                    "str",
                    "Optional[sqlalchemy.orm.session.Session]",
                    "list",
                    "sqlalchemy.orm.unitofwork.UOWTransaction",
                    "Iterable"
                ]
            }
        },
        "LuxembourgESRILegendExtractor._extract_messages": {
            "name": "_extract_messages",
            "location": 993,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LuxembourgESRILegendExtractor._load_result": {
            "name": "_load_result",
            "location": 1007,
            "return": [],
            "arguments": {
                "self": [],
                "result": [
                    "Dict[str, Any]",
                    "Type",
                    "Optional[str]",
                    "requests.Response",
                    "dict",
                    "Iterable[contests.models.User]",
                    "List[tracim.models.data.Content]"
                ]
            }
        },
        "LuxembourgTooltipsExtractor._get_url_with_token": {
            "name": "_get_url_with_token",
            "location": 1039,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "LuxembourgTooltipsExtractor._get_external_data": {
            "name": "_get_external_data",
            "location": 1055,
            "return": [
                "Optional[bool]",
                "Optional[str]",
                "Optional[float]",
                "Optional[Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "dict",
                    "bool",
                    "bytes"
                ],
                "bbox": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "layer": [
                    "str",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "LuxembourgTooltipsExtractor.remove_attributes": {
            "name": "remove_attributes",
            "location": 1106,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "attributes": [
                    "float",
                    "Optional[str]",
                    "int",
                    "static_frame.core.util.IndexConstructor",
                    "bool",
                    "Optional[float]"
                ],
                "attributes_to_remove": [
                    "float",
                    "Optional[int]",
                    "str",
                    "Optional[Tuple[str, int]]"
                ],
                "geometry_column": [
                    "float",
                    "list",
                    "tuple"
                ]
            }
        },
        "LuxembourgTooltipsExtractor._ogc_getfeatureinfo": {
            "name": "_ogc_getfeatureinfo",
            "location": 1120,
            "return": [
                "Mapping",
                "Dict[str, List[Any]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "str",
                    "List[int]"
                ],
                "url": [
                    "str",
                    "bytes",
                    "Mapping[str, Any]",
                    "medtagger.database.models.User"
                ],
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ],
                "width": [
                    "int",
                    "float"
                ],
                "height": [
                    "int",
                    "float"
                ],
                "layer": [
                    "int",
                    "float"
                ],
                "bbox": [
                    "int",
                    "float"
                ],
                "srs": [
                    "int",
                    "float"
                ],
                "layer_id": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "str",
                    "List[int]"
                ]
            }
        },
        "LuxembourgTooltipsExtractor._extract_messages": {
            "name": "_extract_messages",
            "location": 1186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GeomapfishConfigExtractor._collect_app_config.C.get_settings": {
            "name": "get_settings",
            "location": 299,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeomapfishConfigExtractor._collect_app_config.C.add_tween": {
            "name": "add_tween",
            "location": 302,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GeomapfishAngularExtractor.__call__.Lookup.get_template": {
            "name": "get_template",
            "location": 190,
            "return": [
                "str"
            ],
            "arguments": {
                "uri": [
                    "bool",
                    "List[str]",
                    "Iterable[T]",
                    "Callable[[], bytes]",
                    "BaseException"
                ]
            }
        },
        "GeomapfishAngularExtractor.__call__.MyTemplate.prepare": {
            "name": "prepare",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/lib/lux_authentication.py": {
        "create_authentication": {
            "name": "create_authentication",
            "location": 13,
            "return": [
                "MultiAuthenticationPolicy",
                "bool",
                "float"
            ],
            "arguments": {
                "settings": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "int",
                    "Exception"
                ]
            }
        },
        "c2cgeoportal_check": {
            "name": "c2cgeoportal_check",
            "location": 49,
            "return": [
                "None",
                "Dict[str,Any]",
                "bytes",
                "Optional[str]",
                "str",
                "Tuple[bool,str]",
                "bool"
            ],
            "arguments": {
                "username": [
                    "str",
                    "IO[bytes]",
                    "IO",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "int"
                ],
                "password": [
                    "str",
                    "IO[bytes]",
                    "IO",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "int"
                ],
                "request": [
                    "str",
                    "IO[bytes]",
                    "IO",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "ConditionalAuthTktAuthenticationPolicy.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionalAuthTktAuthenticationPolicy.remember": {
            "name": "remember",
            "location": 62,
            "return": [
                "List",
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Callable"
                ],
                "userid": [
                    "pyramid.requesRequest"
                ]
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/lib/search.py": {
        "get_host": {
            "name": "get_host",
            "location": 10,
            "return": [
                "Text",
                "str",
                "IO",
                "List[str]"
            ],
            "arguments": {}
        },
        "get_elasticsearch": {
            "name": "get_elasticsearch",
            "location": 14,
            "return": [
                "Elasticsearch",
                "str",
                "Optional[str]",
                "int",
                "bool",
                "Dict[str,Dict[str,Any]]"
            ],
            "arguments": {
                "request": [
                    "Dict[str,str]",
                    "Dict"
                ]
            }
        },
        "get_index": {
            "name": "get_index",
            "location": 18,
            "return": [
                "Text",
                "str",
                "IO",
                "List[str]"
            ],
            "arguments": {
                "request": [
                    "Dict[str,str]",
                    "Dict"
                ]
            }
        },
        "ensure_index": {
            "name": "ensure_index",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "Dict"
                ],
                "index": [
                    "str",
                    "Dict"
                ],
                "recreate": [
                    "bool",
                    "float",
                    "str"
                ]
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/lib/sw_helper.py": {
        "get_built_filenames": {
            "name": "get_built_filenames",
            "location": 9,
            "return": [
                "List",
                "List[str]",
                "bool",
                "str"
            ],
            "arguments": {
                "pattern": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_urls": {
            "name": "get_urls",
            "location": 15,
            "return": [
                "str",
                "List[Union[Text,dict,dict[str,str]]]"
            ],
            "arguments": {
                "request": []
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/lib/__init__.py": {},
    "geoportailv3-master/geoportal/geoportailv3_geoportal/routing/graphhopperrouter.py": {},
    "geoportailv3-master/geoportal/geoportailv3_geoportal/routing/mapquestrouter.py": {},
    "geoportailv3-master/geoportal/geoportailv3_geoportal/routing/__init__.py": {},
    "geoportailv3-master/geoportal/geoportailv3_geoportal/scripts/db2es.py": {
        "get_cursor": {
            "name": "get_cursor",
            "location": 20,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "update_document": {
            "name": "update_document",
            "location": 36,
            "return": [
                "int",
                "str",
                "float",
                "Dict[str,dict[str,Any]]",
                "bool"
            ],
            "arguments": {
                "index": [
                    "str"
                ],
                "type": [
                    "bool",
                    "str",
                    "Dict[str,str]",
                    "Tuple",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]",
                    "int"
                ],
                "obj_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "obj": [
                    "str",
                    "int"
                ]
            }
        },
        "statuslog": {
            "name": "statuslog",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/scripts/finalize_c2c_23_data_adaptations.py": {
        "main": {
            "name": "main",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/scripts/layers2es.py": {
        "statuslog": {
            "name": "statuslog",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Import.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "options": [
                    "Dict",
                    "str",
                    "argparse.Namespace",
                    "Dict[str,float]",
                    "None",
                    "django.db.models.QuerySet",
                    "T",
                    "Optional[Dict[str,float]]"
                ]
            }
        },
        "Import._update_document": {
            "name": "_update_document",
            "location": 201,
            "return": [
                "Dict[Text,Text]",
                "float",
                "zam_repondeur.models.Amendement",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Import._add_fts": {
            "name": "_add_fts",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Dict",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Set",
                    "None",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,dict[str,Any]]"
                ],
                "interface": [
                    "Dict",
                    "bool",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,dict[str,Any]]",
                    "Optional[Dict[str,Any]]",
                    "None"
                ],
                "action": [
                    "int",
                    "Dict",
                    "Union[int,slice]",
                    "Dict[str,Any]",
                    "T"
                ],
                "role": [
                    "Callable[...,str]",
                    "Dict",
                    "Callable"
                ]
            }
        },
        "Import._add_theme": {
            "name": "_add_theme",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "theme": [
                    "Type",
                    "lib.applications.TodoRequest",
                    "dep_check.use_cases.interfaces.Configuration"
                ],
                "role": [
                    "int",
                    "None",
                    "annofabapi.models.Inspection",
                    "Optional[dict]",
                    "Dict"
                ]
            }
        },
        "Import._add_block": {
            "name": "_add_block",
            "location": 301,
            "return": [
                "bool",
                "Optional[bytes]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "Optional[abilian.core.models.Model]",
                    "int",
                    "None"
                ],
                "interface": [
                    "Optional[abilian.core.models.Model]",
                    "int",
                    "None"
                ],
                "role": [
                    "Optional[abilian.core.models.Model]",
                    "int",
                    "None"
                ]
            }
        },
        "Import._add_folder": {
            "name": "_add_folder",
            "location": 304,
            "return": [
                "bool",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "int",
                    "float",
                    "zam_repondeur.services.fetch.an.dossiers.models.DossierRef"
                ],
                "interface": [
                    "int",
                    "float",
                    "zam_repondeur.services.fetch.an.dossiers.models.DossierRef"
                ],
                "role": [
                    "int",
                    "float",
                    "zam_repondeur.services.fetch.an.dossiers.models.DossierRef"
                ]
            }
        },
        "Import._add_group": {
            "name": "_add_group",
            "location": 307,
            "return": [
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "bytes",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "interface": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None"
                ],
                "export": [
                    "int",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "role": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None"
                ]
            }
        },
        "Import._layer_visible": {
            "name": "_layer_visible",
            "location": 329,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "layer": [
                    "int",
                    "Callable",
                    "str",
                    "models.Question"
                ],
                "role": [
                    "int",
                    "Callable",
                    "str",
                    "models.Question"
                ]
            }
        },
        "Import._add_layer": {
            "name": "_add_layer",
            "location": 335,
            "return": [
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "layer": [
                    "Type"
                ],
                "interface": [
                    "Type"
                ],
                "role": [
                    "int",
                    "Type"
                ]
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/scripts/lux_gunicorn.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/scripts/__init__.py": {
        "escape_variables": {
            "name": "escape_variables",
            "location": 6,
            "return": [
                "Dict",
                "Dict[str,str]",
                "List[Mapping[str,str]]",
                "models.Match",
                "Dict[str,Set[str]]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "environ": [
                    "Mapping[str, str]",
                    "Dict[str, Type]",
                    "dict",
                    "Dict[str, Any]",
                    "logging.LogRecord"
                ]
            }
        },
        "lux_get_app": {
            "name": "lux_get_app",
            "location": 13,
            "return": [
                "str",
                "bool",
                "Tuple[str]",
                "Iterator[dep_check.models.SourceFile]"
            ],
            "arguments": {
                "app_config": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None"
                ],
                "app_name": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "get_session": {
            "name": "get_session",
            "location": 18,
            "return": [
                "DBSession",
                "str",
                "List[str]",
                "daylighdb.models.User",
                "Optional[Dict[str,str]]"
            ],
            "arguments": {
                "app_config": [
                    "str",
                    "Dict[str,str]"
                ],
                "app_name": [
                    "str",
                    "Dict"
                ]
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/static-ngeo/ngeo/buildtools/cleanup-ghpages.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/static-ngeo/ngeo/buildtools/combine-examples.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "List[str]",
                    "bool",
                    "Optional[Sequence[str]]",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/static-ngeo/ngeo/buildtools/generate-examples-index.py": {},
    "geoportailv3-master/geoportal/geoportailv3_geoportal/static-ngeo/ngeo/buildtools/test_examples.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check": {
            "name": "check",
            "location": 24,
            "return": [
                "Tuple[Union[int,int]]",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "folder": [
                    "str",
                    "bool"
                ],
                "file_postfix": [
                    "str",
                    "bool"
                ],
                "make_prefix": [
                    "str",
                    "List[int]",
                    "List[str]",
                    "bool",
                    "Tuple[str,int]",
                    "Tuple[Union[str,int]]"
                ],
                "split_current": [
                    "bool",
                    "int"
                ],
                "split_number": [
                    "bool",
                    "List[str]",
                    "List[Dict[str,Any]]",
                    "int"
                ]
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/tests/test_mymaps.py": {
        "TestMymaps.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMymaps.tearDown": {
            "name": "tearDown",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMymaps.test_maps": {
            "name": "test_maps",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/views/appcache.py": {
        "appcache": {
            "name": "appcache",
            "location": 9,
            "return": [
                "Dict",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "request": [
                    "str",
                    "pyramid.requesRequest"
                ]
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/views/authentication.py": {
        "ldap_user_validator": {
            "name": "ldap_user_validator",
            "location": 19,
            "return": [
                "str",
                "Optional[int]",
                "None",
                "Optional[bool]",
                "Optional[str]"
            ],
            "arguments": {
                "request": [
                    "str",
                    "zerver.models.UserProfile",
                    "pyramid.requesRequest"
                ],
                "username": [
                    "str"
                ],
                "password": [
                    "str",
                    "bool",
                    "bytes",
                    "Optional[Mapping[str,Any]]",
                    "Mapping",
                    "None"
                ]
            }
        },
        "get_user_from_request": {
            "name": "get_user_from_request",
            "location": 69,
            "return": [
                "dict",
                "models.User",
                "Dict[str, str]"
            ],
            "arguments": {
                "request": [
                    "pyramid.requesRequest"
                ]
            }
        },
        "get_compte_pere": {
            "name": "get_compte_pere",
            "location": 74,
            "return": [
                "str",
                "bool",
                "Callable[[Dict], None]",
                "zerver.models.UserProfile",
                "int"
            ],
            "arguments": {
                "username": [
                    "str",
                    "int"
                ]
            }
        },
        "get_user": {
            "name": "get_user",
            "location": 77,
            "return": [
                "O",
                "zam_repondeur.models.Lecture",
                "zerver.models.UserProfile",
                "Iterable[str]",
                "metaswitch_tinder.database.models.User",
                "Dict[str,Any]",
                "user.transfer.models.User",
                "List[zerver.models.UserProfile]",
                "contests.models.User"
            ],
            "arguments": {
                "request": [
                    "Dict",
                    "pyramid.requesRequest",
                    "models.WalletRequest"
                ],
                "username": []
            }
        },
        "Authentication.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "pyramid.requesRequest"
                ]
            }
        },
        "Authentication.get_user_info": {
            "name": "get_user_info",
            "location": 160,
            "return": [
                "Dict[Text,]",
                "Dict",
                "bool",
                "Dict[str,str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Authentication.login": {
            "name": "login",
            "location": 181,
            "return": [
                "HTTPFound",
                "str",
                "models.scenes.inventory_scene.InventoryScene"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/views/casipo.py": {},
    "geoportailv3-master/geoportal/geoportailv3_geoportal/views/download.py": {
        "Download.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "pyramid.requesRequest"
                ]
            }
        },
        "Download.download_generic": {
            "name": "download_generic",
            "location": 29,
            "return": [
                "Optional[str]",
                "Dict[str, Any]",
                "str",
                "guillotina.response.Response",
                "Tuple[str, int, Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Download.download_sketch_by_id": {
            "name": "download_sketch_by_id",
            "location": 58,
            "return": [
                "List[str]",
                "Optional[str]",
                "int",
                "Dict[str, str]",
                "dict",
                "OrderedDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Download.download_sketch": {
            "name": "download_sketch",
            "location": 95,
            "return": [
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Download.download_measurement": {
            "name": "download_measurement",
            "location": 132,
            "return": [
                "dict",
                "bool",
                "db.models.taxon.FillDataLevel"
            ],
            "arguments": {
                "self": []
            }
        },
        "Download.preview_measurement": {
            "name": "preview_measurement",
            "location": 165,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Download._log_download_sketch_stats": {
            "name": "_log_download_sketch_stats",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[str]"
                ],
                "town": [
                    "str",
                    "int"
                ]
            }
        },
        "Download._log_download_measurement_stats": {
            "name": "_log_download_measurement_stats",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[str]"
                ],
                "town": [
                    "str",
                    "int"
                ],
                "parcel": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/views/feedback.py": {
        "Feedback.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Feedback.__send_mail": {
            "name": "__send_mail",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "to": [],
                "mail_from": [],
                "subject": [],
                "mailtext": []
            }
        },
        "Feedback.feedback": {
            "name": "feedback",
            "location": 42,
            "return": [
                "HTTPNotFound",
                "dict[typing.Text, bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Feedback.feedbackanf": {
            "name": "feedbackanf",
            "location": 66,
            "return": [
                "HTTPNotFound",
                "dict[typing.Text, bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Feedback.feedbackage": {
            "name": "feedbackage",
            "location": 127,
            "return": [
                "HTTPNotFound",
                "dict[typing.Text, bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Feedback.feedbackcrues": {
            "name": "feedbackcrues",
            "location": 191,
            "return": [
                "HTTPNotFound",
                "dict[typing.Text, bool]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/views/fulltextsearch.py": {
        "FullTextSearchView.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "FullTextSearchView.fulltextsearch": {
            "name": "fulltextsearch",
            "location": 31,
            "return": [
                "HTTPBadRequest",
                "HTTPInternalServerError"
            ],
            "arguments": {
                "self": []
            }
        },
        "FullTextSearchView.layersearch": {
            "name": "layersearch",
            "location": 183,
            "return": [
                "HTTPBadRequest",
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FullTextSearchView.cmssearch": {
            "name": "cmssearch",
            "location": 264,
            "return": [
                "HTTPBadRequest",
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FullTextSearchView.featuresearch": {
            "name": "featuresearch",
            "location": 334,
            "return": [
                "HTTPBadRequest",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "layers": [
                    "None"
                ]
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/views/geocode.py": {},
    "geoportailv3-master/geoportal/geoportailv3_geoportal/views/getfeatureinfo.py": {
        "Getfeatureinfo.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Getfeatureinfo.download_resource": {
            "name": "download_resource",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Getfeatureinfo.download_pdf_arcgis": {
            "name": "download_pdf_arcgis",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Getfeatureinfo.get_remote_template": {
            "name": "get_remote_template",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Getfeatureinfo.get_poi_template": {
            "name": "get_poi_template",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Getfeatureinfo.unescape_html": {
            "name": "unescape_html",
            "location": 245,
            "return": [],
            "arguments": {
                "self": [],
                "features": [],
                "key": []
            }
        },
        "Getfeatureinfo.get_feature_info": {
            "name": "get_feature_info",
            "location": 259,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Getfeatureinfo.get_info": {
            "name": "get_info",
            "location": 320,
            "return": [],
            "arguments": {
                "self": [],
                "fid": [],
                "coordinates_big_box": [],
                "coordinates_small_box": [],
                "results": [],
                "layers": [],
                "big_box": [],
                "p_geometry": []
            }
        },
        "Getfeatureinfo.transform_": {
            "name": "transform_",
            "location": 1522,
            "return": [],
            "arguments": {
                "self": [],
                "geometry": [],
                "source": [],
                "dest": []
            }
        },
        "Getfeatureinfo.pixel2meter": {
            "name": "pixel2meter",
            "location": 657,
            "return": [],
            "arguments": {
                "self": [],
                "width": [],
                "height": [],
                "bbox": [],
                "epsg_source": [],
                "epsg_dest": [],
                "pixels": []
            }
        },
        "Getfeatureinfo.remove_features_outside_tolerance": {
            "name": "remove_features_outside_tolerance",
            "location": 669,
            "return": [],
            "arguments": {
                "self": [],
                "features": [],
                "coords": []
            }
        },
        "Getfeatureinfo.to_feature": {
            "name": "to_feature",
            "location": 697,
            "return": [],
            "arguments": {
                "self": [],
                "layer_id": [],
                "fid": [],
                "geometry": [],
                "attributes": [],
                "attributes_to_remove": [],
                "columns_order": [],
                "geometry_column": [],
                "alias": []
            }
        },
        "Getfeatureinfo.to_featureinfo": {
            "name": "to_featureinfo",
            "location": 728,
            "return": [],
            "arguments": {
                "self": [],
                "features": [],
                "layer": [],
                "template": [],
                "ordered": [],
                "has_profile": [],
                "remote_template": [],
                "total_count": []
            }
        },
        "Getfeatureinfo.get_lux_feature_definition": {
            "name": "get_lux_feature_definition",
            "location": 741,
            "return": [],
            "arguments": {
                "self": [],
                "layers": [],
                "bypass_public": []
            }
        },
        "Getfeatureinfo.remove_attributes_from_features": {
            "name": "remove_attributes_from_features",
            "location": 794,
            "return": [],
            "arguments": {
                "self": [],
                "features": [],
                "attributes_to_remove": []
            }
        },
        "Getfeatureinfo.remove_attributes": {
            "name": "remove_attributes",
            "location": 799,
            "return": [],
            "arguments": {
                "self": [],
                "attributes": [],
                "attributes_to_remove": [],
                "geometry_column": []
            }
        },
        "Getfeatureinfo.add_area_field": {
            "name": "add_area_field",
            "location": 814,
            "return": [],
            "arguments": {
                "self": [],
                "features": []
            }
        },
        "Getfeatureinfo.add_length_field": {
            "name": "add_length_field",
            "location": 830,
            "return": [],
            "arguments": {
                "self": [],
                "features": []
            }
        },
        "Getfeatureinfo.add_proxy": {
            "name": "add_proxy",
            "location": 844,
            "return": [],
            "arguments": {
                "self": [],
                "features": [],
                "field": []
            }
        },
        "Getfeatureinfo.replace_url_by_proxy": {
            "name": "replace_url_by_proxy",
            "location": 849,
            "return": [],
            "arguments": {
                "self": [],
                "features": [],
                "attributes": []
            }
        },
        "Getfeatureinfo.format_date": {
            "name": "format_date",
            "location": 876,
            "return": [],
            "arguments": {
                "self": [],
                "features": [],
                "attributes": [],
                "format": []
            }
        },
        "Getfeatureinfo.format_esridate": {
            "name": "format_esridate",
            "location": 897,
            "return": [],
            "arguments": {
                "self": [],
                "features": [],
                "attributes": [],
                "format": [],
                "use_local_time": [],
                "delta_hours": []
            }
        },
        "Getfeatureinfo.replace_resource_by_html_link": {
            "name": "replace_resource_by_html_link",
            "location": 927,
            "return": [],
            "arguments": {
                "self": [],
                "features": [],
                "attributes_to_remove": []
            }
        },
        "Getfeatureinfo.get_percentage_for_uhd_field": {
            "name": "get_percentage_for_uhd_field",
            "location": 953,
            "return": [],
            "arguments": {
                "self": [],
                "features": [],
                "field_to_use": []
            }
        },
        "Getfeatureinfo.get_commune_from_code": {
            "name": "get_commune_from_code",
            "location": 966,
            "return": [],
            "arguments": {
                "self": [],
                "features": [],
                "key_commune": [],
                "key_section": []
            }
        },
        "Getfeatureinfo.get_commune_from_shortname": {
            "name": "get_commune_from_shortname",
            "location": 984,
            "return": [],
            "arguments": {
                "self": [],
                "features": [],
                "key_commune": [],
                "key_section": []
            }
        },
        "Getfeatureinfo.get_additional_pdf": {
            "name": "get_additional_pdf",
            "location": 1002,
            "return": [],
            "arguments": {
                "self": [],
                "features": [],
                "url": [],
                "id_attr": []
            }
        },
        "Getfeatureinfo.get_additional_info_for_ng95": {
            "name": "get_additional_info_for_ng95",
            "location": 1030,
            "return": [],
            "arguments": {
                "self": [],
                "layer_id": [],
                "rows": []
            }
        },
        "Getfeatureinfo.chargy_attributes": {
            "name": "chargy_attributes",
            "location": 1062,
            "return": [],
            "arguments": {
                "self": [],
                "features": []
            }
        },
        "Getfeatureinfo.get_info_from_pf": {
            "name": "get_info_from_pf",
            "location": 1082,
            "return": [],
            "arguments": {
                "self": [],
                "layer_id": [],
                "rows": [],
                "measurements": [],
                "attributes_to_remove": []
            }
        },
        "Getfeatureinfo.get_info_from_mymaps": {
            "name": "get_info_from_mymaps",
            "location": 1117,
            "return": [],
            "arguments": {
                "self": [],
                "layer_id": [],
                "rows": [],
                "attributes_to_remove": []
            }
        },
        "Getfeatureinfo._ogc_getfeatureinfo": {
            "name": "_ogc_getfeatureinfo",
            "location": 1179,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "x": [],
                "y": [],
                "width": [],
                "height": [],
                "layer": [],
                "bbox": [],
                "srs": [],
                "layer_id": [],
                "attributes_to_remove": [],
                "columns_order": []
            }
        },
        "Getfeatureinfo.get_additional_external_data": {
            "name": "get_additional_external_data",
            "location": 1265,
            "return": [],
            "arguments": {
                "self": [],
                "features": [],
                "geometry_name": [],
                "layer_id": [],
                "url": [],
                "id_column": [],
                "attributes_to_remove": [],
                "columns_order": [],
                "where_key": [],
                "use_auth": []
            }
        },
        "Getfeatureinfo._get_external_data": {
            "name": "_get_external_data",
            "location": 1296,
            "return": [],
            "arguments": {
                "self": [],
                "layer_id": [],
                "url": [],
                "id_column": [],
                "bbox": [],
                "featureid": [],
                "cfg": [],
                "attributes_to_remove": [],
                "columns_order": [],
                "where_clause": [],
                "use_auth": [],
                "p_geometry": [],
                "srs_geometry": []
            }
        },
        "Getfeatureinfo._get_url_with_token": {
            "name": "_get_url_with_token",
            "location": 1504,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "Getfeatureinfo._get_session": {
            "name": "_get_session",
            "location": 1519,
            "return": [],
            "arguments": {
                "self": [],
                "engine_name": []
            }
        },
        "Getfeatureinfo.getbuswidget": {
            "name": "getbuswidget",
            "location": 1533,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/views/helpers.py": {
        "Helpers.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "pyramid.requesRequest"
                ]
            }
        },
        "Helpers.convert_geojson": {
            "name": "convert_geojson",
            "location": 22,
            "return": [
                "HTTPBadRequest",
                "int",
                "List[str]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Helpers._transform": {
            "name": "_transform",
            "location": 44,
            "return": [
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "geometry": [
                    "str",
                    "int",
                    "bytes"
                ],
                "source": [
                    "str",
                    "List[str]",
                    "Dict",
                    "int",
                    "Callable[,None]",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "dest": [
                    "str",
                    "List[str]",
                    "Dict",
                    "int",
                    "Callable[,None]",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/views/jsapi.py": {
        "JsapiEntry.apithemes_full": {
            "name": "apithemes_full",
            "location": 26,
            "return": [
                "List[dict[Text,]]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsapiEntry._wms_layers": {
            "name": "_wms_layers",
            "location": 50,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "ogc_server": [
                    "str",
                    "bytes",
                    "bool",
                    "IO",
                    "logging.LogRecord"
                ]
            }
        },
        "JsapiEntry.apilayers_full": {
            "name": "apilayers_full",
            "location": 58,
            "return": [
                "List[dict[Text,Union[None,str,list]]]",
                "str",
                "Dict[str,Any]",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsapiEntry.apilayers": {
            "name": "apilayers",
            "location": 118,
            "return": [
                "Dict",
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str,Any]]",
                "Dict[str,str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsapiEntry.apiloader": {
            "name": "apiloader",
            "location": 163,
            "return": [
                "Response",
                "bytes",
                "Dict",
                "flask.Response"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsapiEntry.apiexample": {
            "name": "apiexample",
            "location": 184,
            "return": [
                "Dict",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsapiEntry._extract_layers_with_path": {
            "name": "_extract_layers_with_path",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Tuple[str]"
                ],
                "layers": [
                    "str",
                    "bool",
                    "Any"
                ],
                "came_from": [
                    "List[str]",
                    "str",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]"
                ]
            }
        },
        "JsapiEntry._extract_layers": {
            "name": "_extract_layers",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Dict",
                    "Dict[str,Any]",
                    "Set[str]"
                ],
                "layers": [
                    "Dict[str,Any]"
                ],
                "bg": [
                    "List[int]",
                    "bool"
                ]
            }
        },
        "JsapiEntry._wms_layers_internal": {
            "name": "_wms_layers_internal",
            "location": 209,
            "return": [
                "Tuple[Union[dict[Text,dict[,dict[Text,Union[dict[Text,],list]]]],set]]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsapiEntry._fill_wms": {
            "name": "_fill_wms",
            "location": 222,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "layer_theme": [
                    "int",
                    "str",
                    "Iterable[object]"
                ],
                "layer": [
                    "bool",
                    "bytes",
                    "List[int]",
                    "int"
                ],
                "errors": [
                    "int",
                    "str",
                    "Optional[CustomerReference]",
                    "None"
                ],
                "mixed": [
                    "bool",
                    "Dict[str,tuple[Union[str,str,Any]]]",
                    "Dict[str,Tuple[str,str,Any]]",
                    "Dict[str,tuple[Union[str,int,int]]]",
                    "tracim.models.data.UserRoleInWorkspace",
                    "Dict[str,Tuple[str,int,int]]"
                ]
            }
        },
        "JsapiEntry.is_mixed": {
            "name": "is_mixed",
            "location": 253,
            "return": [
                "bool"
            ],
            "arguments": {
                "_": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/views/legends.py": {
        "Legends.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "pyramid.requesRequest"
                ]
            }
        },
        "Legends.get_png": {
            "name": "get_png",
            "location": 30,
            "return": [
                "Response",
                "int",
                "str",
                "Optional[str]",
                "List[str]",
                "Dict[str,str]",
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Legends.get_html": {
            "name": "get_html",
            "location": 61,
            "return": [
                "Response",
                "List",
                "Dict",
                "str",
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                "Dict[str,Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/views/luxprintproxy.py": {
        "LuxPrintProxy.lux_report_create_and_get": {
            "name": "lux_report_create_and_get",
            "location": 81,
            "return": [
                "bytes",
                "str",
                "Optional[str]",
                "django.db.models.Model"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxPrintProxy.lux_get_thumbnail": {
            "name": "lux_get_thumbnail",
            "location": 114,
            "return": [
                "HTTPNotFound",
                "str",
                "HTTPUnauthorized",
                "Iterable[str]",
                "Union[str,bytes]",
                "datetime.datetime"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxPrintProxy.lux_report_create": {
            "name": "lux_report_create",
            "location": 203,
            "return": [
                "HTTPUnauthorized",
                "Optional[zerver.models.Realm]",
                "Sequence[int]",
                "bytes",
                "BaseException"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxPrintProxy.lux_status": {
            "name": "lux_status",
            "location": 289,
            "return": [
                "HTTPInternalServerError",
                "str",
                "Response",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxPrintProxy._is_authorized": {
            "name": "_is_authorized",
            "location": 306,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "internal_wms": [
                    "transfer.models.Scope"
                ]
            }
        },
        "LuxPrintProxy.lux_cancel": {
            "name": "lux_cancel",
            "location": 325,
            "return": [
                "str",
                "Optional[str]",
                "guillotina.response.Response",
                "dict",
                "Iterable[Tuple[str, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxPrintProxy._create_legend_from_image": {
            "name": "_create_legend_from_image",
            "location": 340,
            "return": [
                "BytesIO",
                "str",
                "int",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "title": [
                    "str",
                    "bool"
                ],
                "access_constraints": [
                    "bytes",
                    "List[Tuple[str, bytes]]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Optional[dict]",
                    "str"
                ]
            }
        },
        "LuxPrintProxy._create_legend_from_url": {
            "name": "_create_legend_from_url",
            "location": 375,
            "return": [
                "BytesIO",
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "LuxPrintProxy._get_legend": {
            "name": "_get_legend",
            "location": 390,
            "return": [
                "BytesIO",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "lang": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "LuxPrintProxy.lux_report_get": {
            "name": "lux_report_get",
            "location": 409,
            "return": [
                "HTTPNotFound",
                "str",
                "HTTPInternalServerError",
                "IO[str]",
                "Optional[str]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/views/luxthemes.py": {
        "LuxThemes.themes": {
            "name": "themes",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxThemes.is_theme_private": {
            "name": "is_theme_private",
            "location": 24,
            "return": [
                "Dict[Text,Union[str,bool]]",
                "str",
                "Type",
                "bool",
                "Dict",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxThemes._wms_layers": {
            "name": "_wms_layers",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "ogc_server": [
                    "str",
                    "bytes",
                    "bool",
                    "IO",
                    "logging.LogRecord"
                ]
            }
        },
        "LuxThemes._wms_layers_internal": {
            "name": "_wms_layers_internal",
            "location": 43,
            "return": [
                "Tuple[Union[dict[Text,dict[,dict[Text,Union[dict[Text,],list]]]],set]]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxThemes._fill_wms": {
            "name": "_fill_wms",
            "location": 56,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "layer_theme": [
                    "int",
                    "str",
                    "Iterable[object]"
                ],
                "layer": [
                    "bool",
                    "bytes",
                    "List[int]",
                    "int"
                ],
                "errors": [
                    "int",
                    "str",
                    "Optional[CustomerReference]",
                    "None"
                ],
                "mixed": [
                    "bool",
                    "Dict[str,tuple[Union[str,str,Any]]]",
                    "Dict[str,Tuple[str,str,Any]]",
                    "Dict[str,tuple[Union[str,int,int]]]",
                    "tracim.models.data.UserRoleInWorkspace",
                    "Dict[str,Tuple[str,int,int]]"
                ]
            }
        },
        "LuxThemes.lux_themes": {
            "name": "lux_themes",
            "location": 86,
            "return": [
                "str",
                "int",
                "Callable",
                "models.Question"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxThemes.get_lux_3d_layers": {
            "name": "get_lux_3d_layers",
            "location": 93,
            "return": [
                "Dict[Text,]",
                "str",
                "djmoney.contrib.exchange.models.Rate"
            ],
            "arguments": {
                "self": []
            }
        },
        "LuxThemes.is_mixed": {
            "name": "is_mixed",
            "location": 112,
            "return": [
                "bool"
            ],
            "arguments": {
                "_": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/views/metadata.py": {
        "Metadata.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "pyramid.requesRequest"
                ]
            }
        },
        "Metadata.get_metadata": {
            "name": "get_metadata",
            "location": 20,
            "return": [
                "HTTPBadRequest",
                "str",
                "HTTPBadGateway",
                "bool",
                "Response",
                "bytes",
                "Sequence[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/views/mymaps.py": {},
    "geoportailv3-master/geoportal/geoportailv3_geoportal/views/pag.py": {},
    "geoportailv3-master/geoportal/geoportailv3_geoportal/views/pds.py": {},
    "geoportailv3-master/geoportal/geoportailv3_geoportal/views/ping.py": {},
    "geoportailv3-master/geoportal/geoportailv3_geoportal/views/profile.py": {
        "Profile.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Profile.echo_csv": {
            "name": "echo_csv",
            "location": 37,
            "return": [
                "HTTPBadRequest"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.json": {
            "name": "json",
            "location": 59,
            "return": [
                "dict[typing.Text, ]",
                "dict[typing.Text, list[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.csv": {
            "name": "csv",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Profile._create_geom": {
            "name": "_create_geom",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "request_geom": []
            }
        },
        "Profile.get_value": {
            "name": "get_value",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "coords": [],
                "index": [],
                "ref": []
            }
        },
        "Profile.moving_average": {
            "name": "moving_average",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "coords": [],
                "i": [],
                "n": [],
                "ref": []
            }
        },
        "Profile._compute_points": {
            "name": "_compute_points",
            "location": 227,
            "return": [
                "tuple[list[dict[typing.Text, dict[, ]]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile._dist": {
            "name": "_dist",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "coord1": [],
                "coord2": []
            }
        },
        "Profile._create_points": {
            "name": "_create_points",
            "location": 269,
            "return": [
                "list[list[]]"
            ],
            "arguments": {
                "self": [],
                "coords": [],
                "nb_points": []
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/views/qr.py": {
        "Qr.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "pyramid.requesRequest"
                ]
            }
        },
        "Qr.getqrcode": {
            "name": "getqrcode",
            "location": 22,
            "return": [
                "str",
                "HTTPBadRequest",
                "bytes",
                "HTTPNotAcceptable",
                "int",
                "Response"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/views/routing.py": {},
    "geoportailv3-master/geoportal/geoportailv3_geoportal/views/sw.py": {
        "appcache": {
            "name": "appcache",
            "location": 8,
            "return": [
                "Dict",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "request": [
                    "str",
                    "pyramid.requesRequest"
                ]
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/views/upload.py": {
        "Upload.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "pyramid.requesRequest"
                ]
            }
        },
        "Upload.upload_vt_style": {
            "name": "upload_vt_style",
            "location": 15,
            "return": [
                "Dict[Text,Text]",
                "str",
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "Upload.get_vt_style": {
            "name": "get_vt_style",
            "location": 45,
            "return": [
                "HTTPBadRequest",
                "str",
                "int",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Upload.delete_vt_style": {
            "name": "delete_vt_style",
            "location": 62,
            "return": [
                "Dict[Text,Text]",
                "str",
                "uuid.UUID",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/views/userconfig.py": {
        "Config.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Callable[...,collections.abc.Awaitable[dict]]",
                    "Callable[...,Awaitable[dict]]",
                    "Callable[...,Awaitable]"
                ]
            }
        },
        "Config.get_userconfig": {
            "name": "get_userconfig",
            "location": 23,
            "return": [
                "str",
                "HTTPUnauthorized",
                "List[dict[Text,]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.save_userconfig": {
            "name": "save_userconfig",
            "location": 38,
            "return": [
                "HTTPUnauthorized",
                "Optional[str]",
                "Dict[str,Any]",
                "jumeaux.models.Request",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.delete_userconfig": {
            "name": "delete_userconfig",
            "location": 59,
            "return": [
                "HTTPUnauthorized",
                "str",
                "bool",
                "Dict[str,Any]",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.delete_if_existing": {
            "name": "delete_if_existing",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "Set[str]",
                    "Optional[str]",
                    "None"
                ],
                "key": [
                    "str",
                    "bool",
                    "Dict[str,str]",
                    "Type"
                ]
            }
        },
        "Config.apply_mvt_config": {
            "name": "apply_mvt_config",
            "location": 83,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/views/views.py": {},
    "geoportailv3-master/geoportal/geoportailv3_geoportal/views/wms.py": {
        "Wms.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "pyramid.requesRequest"
                ]
            }
        },
        "Wms._check_token": {
            "name": "_check_token",
            "location": 29,
            "return": [
                "bool",
                "str",
                "Dict[str,Dict[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "Dict",
                    "ByteString",
                    "bytes"
                ]
            }
        },
        "Wms._check_ip": {
            "name": "_check_ip",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "client_ip": [
                    "float",
                    "str"
                ]
            }
        },
        "Wms._check_ip_for_httpsproxy": {
            "name": "_check_ip_for_httpsproxy",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "Wms._process_arcgis_server": {
            "name": "_process_arcgis_server",
            "location": 72,
            "return": [
                "Dict[Text,Text]",
                "bool",
                "Dict[str,Set[str]]",
                "Type",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "internal_wms": [
                    "bool",
                    "str",
                    "models.data_frames.data_frame.GUIInterface",
                    "Tuple[Union[float,float]]",
                    "purplship.core.models.RateRequest",
                    "Tuple[float,float]",
                    "models.scenes.scenes_base.Scene",
                    "purplship.core.models.ShipmentRequest"
                ]
            }
        },
        "Wms.wmspoi": {
            "name": "wmspoi",
            "location": 113,
            "return": [
                "Response",
                "int",
                "Dict",
                "List[str]",
                "Optional[str]",
                "bool",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wms.internal_proxy_wms": {
            "name": "internal_proxy_wms",
            "location": 143,
            "return": [
                "str",
                "Response",
                "Optional[str]",
                "HTTPBadRequest",
                "Dict[str,dict]",
                "HTTPNotFound",
                "Tuple[str,Optional[int]]",
                "HTTPUnauthorized",
                "Dict[str,Any]",
                "HTTPBadGateway"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wms.predefined_wms": {
            "name": "predefined_wms",
            "location": 268,
            "return": [
                "List[dict[Text,]]",
                "str",
                "salon.models.Stylist",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wms.proxy": {
            "name": "proxy",
            "location": 274,
            "return": [
                "int",
                "HTTPBadGateway",
                "List[float]",
                "HTTPUnauthorized",
                "str",
                "Response"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "geoportailv3-master/geoportal/geoportailv3_geoportal/views/__init__.py": {},
    "geoportailv3-master/geoportal/LUX_alembic/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "geoportailv3-master/geoportal/LUX_alembic/versions/17fb1559a5cd_create_table_for_hierarchy_of_accounts.py": {
        "downgrade": {
            "name": "downgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "upgrade": {
            "name": "upgrade",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "geoportailv3-master/geoportal/LUX_alembic/versions/19e97a222003_add_vector_style_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "geoportailv3-master/geoportal/LUX_alembic/versions/1b9b2d6fb6e_add_luxembourg_tables.py": {
        "downgrade": {
            "name": "downgrade",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "upgrade": {
            "name": "upgrade",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "geoportailv3-master/geoportal/LUX_alembic/versions/1cb8168b89d8_finalize_c2c_23_upgrade.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "geoportailv3-master/geoportal/LUX_alembic/versions/34e77893d2fa_add_print_spec_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "geoportailv3-master/geoportal/LUX_alembic/versions/3852cd2f413d_added_print_server_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "geoportailv3-master/geoportal/LUX_alembic/versions/3b7de32aebed_create_measurement_restriction_table.py": {
        "downgrade": {
            "name": "downgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "upgrade": {
            "name": "upgrade",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "geoportailv3-master/geoportal/LUX_alembic/versions/3e50ad660e39_missing_table_definition.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "geoportailv3-master/geoportal/LUX_alembic/versions/42b291c446cd_survey_config.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "geoportailv3-master/geoportal/LUX_alembic/versions/44d0e2c403b0_routing_stats.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "geoportailv3-master/geoportal/LUX_alembic/versions/46cb4ef6fd45_rest_url_has_to_be_hidden_move_it_from_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "geoportailv3-master/geoportal/LUX_alembic/versions/47b7c7fcc245_create_generic_proxy_config_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "geoportailv3-master/geoportal/LUX_alembic/versions/4ae372fbc6fc_feature_search_attribute.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "geoportailv3-master/geoportal/LUX_alembic/versions/6143111b020b_add_auth_for_arcgis_layers.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "geoportailv3-master/geoportal/LUX_alembic/versions/6f66f0579702_set_url_to_config_wmsproxy_in_ogcserver_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "geoportailv3-master/geoportal/LUX_alembic/versions/84b558deac2_query_limit_in_getfeatureinfo.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "geoportailv3-master/geoportal/LUX_alembic/versions/8764d58e895_getfeatureinfo_definition_table.py": {
        "downgrade": {
            "name": "downgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "upgrade": {
            "name": "upgrade",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "geoportailv3-master/LUX_alembic/versions/84b558deac2_query_limit_in_getfeatureinfo.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
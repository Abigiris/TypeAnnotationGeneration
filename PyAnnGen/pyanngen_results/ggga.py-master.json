{
    "ggga.py-master/setup.py": {
        "parse_requirements": {
            "name": "parse_requirements",
            "location": 4,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "List[str]",
                    "List[Tuple[int, int]]"
                ]
            }
        }
    },
    "ggga.py-master/doc/source/conf.py": {},
    "ggga.py-master/ggga/acquisition.py": {
        "expected_improvement": {
            "name": "expected_improvement",
            "location": 412,
            "return": [
                "int",
                "str",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "vec_mean": [
                    "int",
                    "str"
                ],
                "vec_std": [
                    "int",
                    "str"
                ],
                "fmin": [
                    "int",
                    "str"
                ]
            }
        },
        "metropolis_select": {
            "name": "metropolis_select",
            "location": 421,
            "return": [
                "bool"
            ],
            "arguments": {
                "rng": [
                    "str",
                    "bool",
                    "IO[str]",
                    "int",
                    "dict",
                    "set"
                ],
                "option": [
                    "Callable",
                    "Optional[Dict]",
                    "Mapping[str, Any]"
                ],
                "benchmark": [
                    "Callable",
                    "Optional[Dict]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "AcquisitionStrategy.acquire": {
            "name": "acquire",
            "location": 33,
            "return": [
                "typing.Iterator[individual.Individual]",
                "None"
            ],
            "arguments": {
                "self": [],
                "population": [
                    "int"
                ]
            }
        },
        "ChainedAcquisition.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChainedAcquisition.from_yaml": {
            "name": "from_yaml",
            "location": 82,
            "return": [
                "ChainedAcquisition",
                "Callable",
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "loader": [
                    "numpy.matrix",
                    "Callable[[T], T]",
                    "str",
                    "dict",
                    "Optional[Callable]"
                ],
                "node": [
                    "typing.Callable[T, T]",
                    "numpy.matrix",
                    "str",
                    "Callable[[T], T]",
                    "dict[, ]",
                    "None",
                    "dict",
                    "Optional[Callable]"
                ]
            }
        },
        "ChainedAcquisition.acquire": {
            "name": "acquire",
            "location": 85,
            "return": [
                "int",
                "Callable",
                "typing.IO",
                "str",
                "dict[, ]",
                "set[]",
                "bool",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "population": [
                    "IO[str]",
                    "typing.IO",
                    "dict",
                    "bool",
                    "dict[, ]",
                    "set",
                    "str",
                    "set[]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "HedgedAcquisition.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HedgedAcquisition.from_yaml": {
            "name": "from_yaml",
            "location": 116,
            "return": [
                "HedgedAcquisition",
                "Callable",
                "dict",
                "str",
                "numpy.ndarray"
            ],
            "arguments": {
                "loader": [
                    "numpy.matrix",
                    "Callable[[T], T]",
                    "str",
                    "dict",
                    "Optional[Callable]"
                ],
                "node": [
                    "typing.Callable[T, T]",
                    "numpy.matrix",
                    "str",
                    "Callable[[T], T]",
                    "dict[, ]",
                    "None",
                    "dict",
                    "Optional[Callable]"
                ]
            }
        },
        "HedgedAcquisition.acquire": {
            "name": "acquire",
            "location": 119,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "population": [
                    "int"
                ]
            }
        },
        "RandomReplacementAcquisition.from_yaml": {
            "name": "from_yaml",
            "location": 161,
            "return": [
                "RandomReplacementAcquisition",
                "str",
                "Optional[str]",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "loader": [
                    "T",
                    "Set[str]",
                    "bool",
                    "float"
                ],
                "node": [
                    "bool",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "RandomReplacementAcquisition._subacquisition_default": {
            "name": "_subacquisition_default",
            "location": 170,
            "return": [
                "RandomWalkAcquisition",
                "str",
                "int",
                "float",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomReplacementAcquisition.acquire": {
            "name": "acquire",
            "location": 176,
            "return": [
                "",
                "typing.Generator[typing.Union[int,str]]",
                "typing.Generator[str]"
            ],
            "arguments": {
                "self": [],
                "population": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "MutationAcquisition.from_yaml": {
            "name": "from_yaml",
            "location": 257,
            "return": [
                "MutationAcquisition",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "loader": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "node": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "MutationAcquisition.acquire": {
            "name": "acquire",
            "location": 260,
            "return": [
                "",
                "typing.Generator[Individual]"
            ],
            "arguments": {
                "self": [],
                "population": [
                    "int"
                ]
            }
        },
        "RandomWalkAcquisition.from_yaml": {
            "name": "from_yaml",
            "location": 301,
            "return": [
                "RandomWalkAcquisition",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "loader": [
                    "Dict[str, Any]",
                    "dict",
                    "int",
                    "bytes"
                ],
                "node": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "int",
                    "dict",
                    "bytes",
                    "dict[, ]"
                ]
            }
        },
        "RandomWalkAcquisition.acquire": {
            "name": "acquire",
            "location": 304,
            "return": [
                "int",
                "Callable",
                "list[]",
                "str",
                "typing.IO",
                "dict[, ]",
                "set[]",
                "bool",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "population": [
                    "IO[str]",
                    "typing.IO",
                    "dict",
                    "bool",
                    "dict[, ]",
                    "set",
                    "str",
                    "set[]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "GradientAcquisition.from_yaml": {
            "name": "from_yaml",
            "location": 341,
            "return": [
                "GradientAcquisition",
                "Dict[str, Any]",
                "int",
                "bytes"
            ],
            "arguments": {
                "loader": [
                    "dict",
                    "Set[str]",
                    "Optional[List[str]]"
                ],
                "node": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "GradientAcquisition.acquire": {
            "name": "acquire",
            "location": 347,
            "return": [
                "",
                "typing.Generator[Individual]"
            ],
            "arguments": {
                "self": [],
                "population": [
                    "int"
                ]
            }
        },
        "GradientAcquisition._optimize_sample_with_restart": {
            "name": "_optimize_sample_with_restart",
            "location": 391,
            "return": [
                "int",
                "Callable",
                "str",
                "dict[, ]",
                "list[int]",
                "list[list[int]]",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "parent_sample_transformed": [
                    "str",
                    "int",
                    "markdown.util.etree.Element"
                ]
            }
        },
        "RandomReplacementAcquisition.acquire.key_expected_improvement": {
            "name": "key_expected_improvement",
            "location": 194,
            "return": [
                "str",
                "Callable[[], Any]"
            ],
            "arguments": {
                "ind": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "GradientAcquisition.acquire.suggest_neighbor": {
            "name": "suggest_neighbor",
            "location": 353,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "transformed": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "GradientAcquisition.acquire.objective": {
            "name": "objective",
            "location": 357,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "transformed": [
                    "int",
                    "individual.Individual"
                ]
            }
        },
        "GradientAcquisition.acquire.optimize_via_gradient": {
            "name": "optimize_via_gradient",
            "location": 362,
            "return": [
                "tuple[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "transformed": [
                    "bytes",
                    "str",
                    "int",
                    "bytearray",
                    "Tuple[int, int]"
                ]
            }
        }
    },
    "ggga.py-master/ggga/benchmark_functions.py": {
        "goldstein_price": {
            "name": "goldstein_price",
            "location": 4,
            "return": [],
            "arguments": {
                "x_1": [],
                "x_2": []
            }
        },
        "easom": {
            "name": "easom",
            "location": 25,
            "return": [
                "float"
            ],
            "arguments": {
                "x_1": [],
                "x_2": []
            }
        },
        "himmelblau": {
            "name": "himmelblau",
            "location": 50,
            "return": [
                "int"
            ],
            "arguments": {
                "x_1": [],
                "x_2": []
            }
        },
        "rastrigin": {
            "name": "rastrigin",
            "location": 70,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "rosenbrock": {
            "name": "rosenbrock",
            "location": 102,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "sphere": {
            "name": "sphere",
            "location": 124,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "onemax": {
            "name": "onemax",
            "location": 145,
            "return": [
                "float"
            ],
            "arguments": {}
        },
        "trap": {
            "name": "trap",
            "location": 171,
            "return": [
                "float"
            ],
            "arguments": {}
        },
        "_irwin_hall_cdf": {
            "name": "_irwin_hall_cdf",
            "location": 203,
            "return": [
                "float"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "n": [
                    "int"
                ]
            }
        }
    },
    "ggga.py-master/ggga/gpr.py": {
        "fit_kernel": {
            "name": "fit_kernel",
            "location": 289,
            "return": [
                "Tuple[(float, Tuple[(float, float)], Any, Any, float)]"
            ],
            "arguments": {
                "kernel": [],
                "mat_x_train": [],
                "vec_y_train": []
            }
        },
        "_get_kernel_or_default": {
            "name": "_get_kernel_or_default",
            "location": 423,
            "return": [
                "Tuple[(Any, float, Tuple[(float, float)])]"
            ],
            "arguments": {}
        },
        "SurrogateModelGPR._all_config_items": {
            "name": "_all_config_items",
            "location": 66,
            "return": [
                "Iterator[Tuple[(str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SurrogateModelGPR.__repr__": {
            "name": "__repr__",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SurrogateModelGPR.to_jsonish": {
            "name": "to_jsonish",
            "location": 83,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "SurrogateModelGPR.as_csv_row": {
            "name": "as_csv_row",
            "location": 95,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "SurrogateModelGPR._normalized_from_ys": {
            "name": "_normalized_from_ys",
            "location": 99,
            "return": [
                "Tuple[(Any, float, float)]"
            ],
            "arguments": {
                "vec_y": []
            }
        },
        "SurrogateModelGPR._ys_from_normalized": {
            "name": "_ys_from_normalized",
            "location": 141,
            "return": [],
            "arguments": {
                "vec_y_normalized": []
            }
        },
        "SurrogateModelGPR.estimate": {
            "name": "estimate",
            "location": 151,
            "return": [
                "SurrogateModelGPR"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSurrogateModelGPR]"
                ],
                "mat_x": [],
                "vec_y": []
            }
        },
        "SurrogateModelGPR.predict_transformed_a": {
            "name": "predict_transformed_a",
            "location": 220,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "mat_x_transformed": []
            }
        },
        "SurrogateModelGPR.__str__": {
            "name": "__str__",
            "location": 261,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SurrogateModelGPR.length_scales": {
            "name": "length_scales",
            "location": 264,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClosedInterval.__contains__": {
            "name": "__contains__",
            "location": 285,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ]
            }
        },
        "fit_kernel.obj_func": {
            "name": "obj_func",
            "location": 330,
            "return": [
                "tuple[]",
                "tuple[float]",
                "float"
            ],
            "arguments": {
                "theta": [],
                "eval_gradient": [
                    "bool"
                ]
            }
        }
    },
    "ggga.py-master/ggga/hierarchical.py": {
        "SurrogateModelHierarchical.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_model": [
                    "ggga.surrogate_model.SurrogateModel"
                ],
                "detail_model": [
                    "ggga.surrogate_model.SurrogateModel"
                ],
                "space": [
                    "ggga.space.Space"
                ]
            }
        },
        "SurrogateModelHierarchical.to_jsonish": {
            "name": "to_jsonish",
            "location": 23,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SurrogateModelHierarchical.estimate": {
            "name": "estimate",
            "location": 31,
            "return": [
                "SurrogateModelHierarchical"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSurrogateModelHierarchical]"
                ],
                "mat_x": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]"
                ],
                "vec_y": [
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Any]",
                    "None",
                    "bool",
                    "Optional[str]",
                    "list[typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "Optional[bool]",
                    "int",
                    "Optional[List[Any]]"
                ]
            }
        },
        "SurrogateModelHierarchical.predict_transformed_a": {
            "name": "predict_transformed_a",
            "location": 66,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "mat_x_transformed": [
                    "numpy.array"
                ]
            }
        },
        "SurrogateModelHierarchical.length_scales": {
            "name": "length_scales",
            "location": 92,
            "return": [
                "Callable",
                "Tuple[numpy.ndarray]",
                "str",
                "numpy.ndarray",
                "list",
                "busboy.util.Maybe[psycopg2.extensions.connection]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ggga.py-master/ggga/individual.py": {
        "Individual.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample": [
                    "list"
                ]
            }
        },
        "Individual.__repr__": {
            "name": "__repr__",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Individual.sample": {
            "name": "sample",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Individual.observation": {
            "name": "observation",
            "location": 62,
            "return": [
                "None",
                "int",
                "dict[, ]",
                "str",
                "typing.Type"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "numpy.ndarray",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "Individual.cost": {
            "name": "cost",
            "location": 73,
            "return": [
                "None",
                "int",
                "dict[, ]",
                "str",
                "typing.Type"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "numpy.ndarray",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "Individual.gen": {
            "name": "gen",
            "location": 84,
            "return": [
                "None",
                "int",
                "dict[, ]",
                "str",
                "typing.Type"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "numpy.ndarray",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "Individual.expected_improvement": {
            "name": "expected_improvement",
            "location": 97,
            "return": [
                "None",
                "list[typing.Any]",
                "list[str]",
                "tuple[typing.Union[str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str]]",
                "dict[str, dict[str, str]]",
                "typing.Pattern",
                "typing.Type",
                "set[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[str]",
                    "List[float]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Individual.prediction": {
            "name": "prediction",
            "location": 108,
            "return": [
                "None",
                "int",
                "dict[, ]",
                "str",
                "typing.Type"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "numpy.ndarray",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "Individual.is_fully_initialized": {
            "name": "is_fully_initialized",
            "location": 112,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Individual.__repr__.default": {
            "name": "default",
            "location": 33,
            "return": [
                "int",
                "float",
                "bool",
                "List[int]",
                "tuple"
            ],
            "arguments": {
                "optional_value": [
                    "Optional[int]",
                    "bool",
                    "float",
                    "int",
                    "Optional[str]",
                    "Callable",
                    "Optional[Iterable[int]]"
                ],
                "the_default": [
                    "Iterable[Any]",
                    "bytes",
                    "Optional[BaseException]"
                ]
            }
        }
    },
    "ggga.py-master/ggga/knn.py": {
        "weights": {
            "name": "weights",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "distances": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_std_from_loocv": {
            "name": "_std_from_loocv",
            "location": 111,
            "return": [
                "float",
                "Sequence[float]",
                "Tuple[int, int]",
                "tuple"
            ],
            "arguments": {
                "mat_x": [
                    "int",
                    "numpy.ndarray",
                    "numpy.array"
                ],
                "mat_y_neighbor": [
                    "str",
                    "numpy.ndarray",
                    "Dict[str, Union[str, int, bool]]",
                    "int",
                    "Callable"
                ],
                "mat_weights_neighbor": [
                    "str",
                    "numpy.ndarray",
                    "int",
                    "Callable"
                ]
            }
        },
        "_std_from_data": {
            "name": "_std_from_data",
            "location": 161,
            "return": [
                "Dict[str, Any]",
                "str",
                "numpy.ndarray",
                "int",
                "List[str]"
            ],
            "arguments": {
                "vec_y": [
                    "int",
                    "dict",
                    "str",
                    "dict[, ]",
                    "Dict[str, float]",
                    "dict[str, float]"
                ],
                "mat_y_neighbor": [
                    "str",
                    "numpy.ndarray",
                    "list[str]",
                    "Optional[List[str]]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ],
                "mat_weights_neighbor": [
                    "Any",
                    "float",
                    "typing.Any"
                ]
            }
        },
        "SurrogateModelKNN.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "estimator": [
                    "int",
                    "float",
                    "bytes",
                    "tuple",
                    "tuple[]"
                ]
            }
        },
        "SurrogateModelKNN.to_jsonish": {
            "name": "to_jsonish",
            "location": 35,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "SurrogateModelKNN.estimate": {
            "name": "estimate",
            "location": 42,
            "return": [
                "SurrogateModelKNN"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSurrogateModelKNN]"
                ],
                "mat_x": [
                    "tuple[typing.Union[float,float,int]]",
                    "numpy.ndarray",
                    "Tuple[float, float, int]",
                    "sklearn.base.BaseEstimator",
                    "float",
                    "int"
                ],
                "vec_y": [
                    "tuple[typing.Union[numpy.ndarray,numpy.ndarray]]",
                    "numpy.ndarray",
                    "tuple[typing.Union[int,int]]",
                    "numpy.array",
                    "Tuple[numpy.ndarray, numpy.ndarray]",
                    "Tuple[int, int]"
                ]
            }
        },
        "SurrogateModelKNN.predict_transformed_a": {
            "name": "predict_transformed_a",
            "location": 78,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "mat_x_transformed": [
                    "str",
                    "list[T]",
                    "list[str]",
                    "List[T]",
                    "numpy.ndarray",
                    "List[str]",
                    "Callable"
                ]
            }
        }
    },
    "ggga.py-master/ggga/minimize.py": {
        "select_next_population": {
            "name": "select_next_population",
            "location": 455,
            "return": [
                "Tuple[(List[ggga.individual.Individual], List[ggga.individual.Individual])]"
            ],
            "arguments": {}
        },
        "replace_worst_n_individuals": {
            "name": "replace_worst_n_individuals",
            "location": 486,
            "return": [
                "List[ggga.individual.Individual]"
            ],
            "arguments": {
                "replace_worst_n": [
                    "int"
                ]
            }
        },
        "OptimizationResult.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OptimizationResult.best_n": {
            "name": "best_n",
            "location": 49,
            "return": [
                "List[ggga.individual.Individual]"
            ],
            "arguments": {
                "self": [],
                "how_many": [
                    "int"
                ]
            }
        },
        "OptimizationResult.model": {
            "name": "model",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OptimizationResult.xs": {
            "name": "xs",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OptimizationResult.ys": {
            "name": "ys",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OptimizationResult.fmin": {
            "name": "fmin",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Minimizer.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Minimizer.with_setting": {
            "name": "with_setting",
            "location": 142,
            "return": [
                "Minimizer"
            ],
            "arguments": {
                "self": [
                    "_TMinimizer"
                ]
            }
        },
        "_MinimizationInstance._make_initial_population": {
            "name": "_make_initial_population",
            "location": 327,
            "return": [
                "List[ggga.individual.Individual]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MinimizationInstance._make_fitness_operator": {
            "name": "_make_fitness_operator",
            "location": 336,
            "return": [
                "Callable[([ggga.individual.Individual], float)]"
            ],
            "arguments": {}
        },
        "_MinimizationInstance._fit_next_model": {
            "name": "_fit_next_model",
            "location": 371,
            "return": [
                "ggga.surrogate_model.SurrogateModel"
            ],
            "arguments": {
                "self": [],
                "all_evaluations": [
                    "List[ggga.individual.Individual]"
                ]
            }
        },
        "_MinimizationInstance._relscale_at_gen": {
            "name": "_relscale_at_gen",
            "location": 390,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "gen": [
                    "int"
                ]
            }
        },
        "_MinimizationInstance._acquire": {
            "name": "_acquire",
            "location": 395,
            "return": [
                "List[ggga.individual.Individual]"
            ],
            "arguments": {
                "self": [],
                "population": [
                    "List[ggga.individual.Individual]"
                ]
            }
        },
        "_MinimizationInstance._select": {
            "name": "_select",
            "location": 412,
            "return": [
                "List[ggga.individual.Individual]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MinimizationInstance._resize_population": {
            "name": "_resize_population",
            "location": 432,
            "return": [
                "List[ggga.individual.Individual]"
            ],
            "arguments": {
                "self": [],
                "population": [
                    "List[ggga.individual.Individual]"
                ],
                "newsize": [
                    "int"
                ]
            }
        },
        "Minimizer.with_setting.default": {
            "name": "default",
            "location": 161,
            "return": [],
            "arguments": {
                "maybe": [],
                "default": []
            }
        },
        "_MinimizationInstance.run.find_fmin": {
            "name": "find_fmin",
            "location": 283,
            "return": [],
            "arguments": {
                "individuals": []
            }
        },
        "_MinimizationInstance._make_fitness_operator.fitness": {
            "name": "fitness",
            "location": 345,
            "return": [],
            "arguments": {
                "ind": []
            }
        }
    },
    "ggga.py-master/ggga/outputs.py": {
        "IndividualsToTable.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "space": [
                    "ggga.space.Space"
                ]
            }
        },
        "IndividualsToTable.individual_to_row": {
            "name": "individual_to_row",
            "location": 31,
            "return": [
                "Iterable"
            ],
            "arguments": {
                "ind": [
                    "ggga.individual.Individual"
                ]
            }
        },
        "IndividualsToTable.observation_to_row": {
            "name": "observation_to_row",
            "location": 40,
            "return": [
                "Iterable"
            ],
            "arguments": {}
        },
        "IndividualsToTable.row_to_individual": {
            "name": "row_to_individual",
            "location": 51,
            "return": [
                "ggga.individual.Individual"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "Iterable[str]"
                ],
                "gen": [
                    "int"
                ]
            }
        },
        "OutputEventHandler.event_new_generation": {
            "name": "event_new_generation",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gen": [
                    "int"
                ]
            }
        },
        "OutputEventHandler.event_evaluations_completed": {
            "name": "event_evaluations_completed",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "individuals": [
                    "Iterable[ggga.individual.Individual]"
                ]
            }
        },
        "OutputEventHandler.event_model_trained": {
            "name": "event_model_trained",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "generation": [
                    "int"
                ],
                "model": [
                    "ggga.surrogate_model.SurrogateModel"
                ]
            }
        },
        "OutputEventHandler.event_acquisition_completed": {
            "name": "event_acquisition_completed",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositeOutputEventHandler.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositeOutputEventHandler.add": {
            "name": "add",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "OutputEventHandler"
                ]
            }
        },
        "CompositeOutputEventHandler.event_new_generation": {
            "name": "event_new_generation",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gen": [
                    "int"
                ]
            }
        },
        "CompositeOutputEventHandler.event_evaluations_completed": {
            "name": "event_evaluations_completed",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "individuals": [
                    "Iterable[ggga.individual.Individual]"
                ]
            }
        },
        "CompositeOutputEventHandler.event_model_trained": {
            "name": "event_model_trained",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "generation": [
                    "int"
                ],
                "model": [
                    "ggga.surrogate_model.SurrogateModel"
                ]
            }
        },
        "CompositeOutputEventHandler.event_acquisition_completed": {
            "name": "event_acquisition_completed",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecordTrainedModels.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_file": [
                    "TextIO"
                ]
            }
        },
        "RecordTrainedModels.event_model_trained": {
            "name": "event_model_trained",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "generation": [
                    "int"
                ],
                "model": [
                    "ggga.surrogate_model.SurrogateModel"
                ]
            }
        },
        "RecordTrainedModels._coerce_to_jsonish": {
            "name": "_coerce_to_jsonish",
            "location": 151,
            "return": [
                "list"
            ],
            "arguments": {
                "some_object": [
                    "Dict[str, Any]",
                    "bool",
                    "str"
                ]
            }
        },
        "WriteHumanReadableOutput.__init__": {
            "name": "__init__",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WriteHumanReadableOutput.log": {
            "name": "log",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "WriteHumanReadableOutput.event_new_generation": {
            "name": "event_new_generation",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gen": [
                    "int"
                ]
            }
        },
        "WriteHumanReadableOutput.event_evaluations_completed": {
            "name": "event_evaluations_completed",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "individuals": [
                    "Iterable[ggga.individual.Individual]"
                ]
            }
        },
        "WriteHumanReadableOutput.event_model_trained": {
            "name": "event_model_trained",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "generation": [
                    "int"
                ],
                "model": [
                    "ggga.surrogate_model.SurrogateModel"
                ]
            }
        },
        "RecordCompletedEvaluations.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "csv_file": [
                    "TextIO"
                ]
            }
        },
        "RecordCompletedEvaluations.new": {
            "name": "new",
            "location": 218,
            "return": [
                "RecordCompletedEvaluations"
            ],
            "arguments": {
                "cls": [
                    "Type[_TRecordCompletedEvaluations]"
                ],
                "csv_file": [
                    "TextIO"
                ]
            }
        },
        "RecordCompletedEvaluations.load_individuals": {
            "name": "load_individuals",
            "location": 228,
            "return": [
                "Iterable[ggga.individual.Individual]"
            ],
            "arguments": {
                "csv_file": [
                    "TextIO"
                ]
            }
        },
        "RecordCompletedEvaluations.write_result": {
            "name": "write_result",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecordCompletedEvaluations.write_individual": {
            "name": "write_individual",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ind": [
                    "ggga.individual.Individual"
                ]
            }
        },
        "RecordCompletedEvaluations.event_evaluations_completed": {
            "name": "event_evaluations_completed",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "individuals": [
                    "Iterable[ggga.individual.Individual]"
                ]
            }
        },
        "Output.__init__": {
            "name": "__init__",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Output.event_evaluations_completed": {
            "name": "event_evaluations_completed",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "individuals": [
                    "Iterable[ggga.individual.Individual]"
                ]
            }
        },
        "Output.event_model_trained": {
            "name": "event_model_trained",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "generation": [
                    "int"
                ],
                "model": [
                    "ggga.surrogate_model.SurrogateModel"
                ]
            }
        },
        "Output.event_acquisition_completed": {
            "name": "event_acquisition_completed",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ggga.py-master/ggga/space.py": {
        "Param.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Param.sample": {
            "name": "sample",
            "location": 18,
            "return": [
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "Param.size": {
            "name": "size",
            "location": 24,
            "return": [
                "T",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Param.is_valid": {
            "name": "is_valid",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T"
                ]
            }
        },
        "Param.is_valid_transformed": {
            "name": "is_valid_transformed",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "Param.into_transformed": {
            "name": "into_transformed",
            "location": 36,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T"
                ]
            }
        },
        "Param.from_transformed": {
            "name": "from_transformed",
            "location": 40,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "Param.into_transformed_a": {
            "name": "into_transformed_a",
            "location": 43,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "List[T]"
                ]
            }
        },
        "Param.from_transformed_a": {
            "name": "from_transformed_a",
            "location": 46,
            "return": [
                "List[T]"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "List[float]"
                ]
            }
        },
        "Param.transformed_bounds": {
            "name": "transformed_bounds",
            "location": 50,
            "return": [
                "Tuple[(float, float)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Param.bounds": {
            "name": "bounds",
            "location": 53,
            "return": [
                "Tuple[(T, T)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Integer.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "lo": [
                    "int"
                ],
                "hi": [
                    "int"
                ]
            }
        },
        "Integer.__repr__": {
            "name": "__repr__",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Integer.sample": {
            "name": "sample",
            "location": 72,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Integer.size": {
            "name": "size",
            "location": 89,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Integer.is_valid": {
            "name": "is_valid",
            "location": 92,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "Integer.is_valid_transformed": {
            "name": "is_valid_transformed",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "float"
                ]
            }
        },
        "Integer.into_transformed": {
            "name": "into_transformed",
            "location": 99,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "Integer.from_transformed": {
            "name": "from_transformed",
            "location": 102,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "Integer.transformed_bounds": {
            "name": "transformed_bounds",
            "location": 106,
            "return": [
                "Tuple[(float, float)]"
            ],
            "arguments": {}
        },
        "Integer.bounds": {
            "name": "bounds",
            "location": 109,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scale.transform": {
            "name": "transform",
            "location": 115,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ]
            }
        },
        "Scale.reverse": {
            "name": "reverse",
            "location": 119,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ]
            }
        },
        "Real.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "lo": [
                    "float"
                ],
                "hi": [
                    "float"
                ]
            }
        },
        "Real.__repr__": {
            "name": "__repr__",
            "location": 140,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Real.sample": {
            "name": "sample",
            "location": 144,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Real.sample_transformed": {
            "name": "sample_transformed",
            "location": 165,
            "return": [
                "float"
            ],
            "arguments": {}
        },
        "Real.size": {
            "name": "size",
            "location": 174,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Real.is_valid": {
            "name": "is_valid",
            "location": 177,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "Real.is_valid_transformed": {
            "name": "is_valid_transformed",
            "location": 181,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "float"
                ]
            }
        },
        "Real.into_transformed": {
            "name": "into_transformed",
            "location": 184,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "Real.from_transformed": {
            "name": "from_transformed",
            "location": 194,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "Real.transformed_bounds": {
            "name": "transformed_bounds",
            "location": 205,
            "return": [
                "Tuple[(float, float)]"
            ],
            "arguments": {}
        },
        "Real.bounds": {
            "name": "bounds",
            "location": 208,
            "return": [
                "Tuple[(float, float)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Log1pScale.__init__": {
            "name": "__init__",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scale": [
                    "float"
                ]
            }
        },
        "Log1pScale.transform": {
            "name": "transform",
            "location": 217,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ]
            }
        },
        "Log1pScale.reverse": {
            "name": "reverse",
            "location": 221,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ]
            }
        },
        "Space.__init__": {
            "name": "__init__",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Space.__repr__": {
            "name": "__repr__",
            "location": 267,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Space.n_dims": {
            "name": "n_dims",
            "location": 283,
            "return": [
                "int",
                "float",
                "numpy.ndarray",
                "str",
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "Space.sample": {
            "name": "sample",
            "location": 286,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Space.mutate": {
            "name": "mutate",
            "location": 320,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "sample": [
                    "list"
                ]
            }
        },
        "Space.mutate_transformed": {
            "name": "mutate_transformed",
            "location": 330,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "sample_transformed": [
                    "list"
                ]
            }
        },
        "Space.is_valid": {
            "name": "is_valid",
            "location": 349,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "sample": [
                    "Set[str]",
                    "Dict[str, float]",
                    "bool",
                    "int",
                    "list",
                    "Hashable"
                ]
            }
        },
        "Space.is_valid_transformed": {
            "name": "is_valid_transformed",
            "location": 353,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "sample": [
                    "list"
                ]
            }
        },
        "Space.into_transformed": {
            "name": "into_transformed",
            "location": 357,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "sample": [
                    "list"
                ]
            }
        },
        "Space.from_transformed": {
            "name": "from_transformed",
            "location": 360,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "sample": [
                    "list"
                ]
            }
        },
        "Space.param_names": {
            "name": "param_names",
            "location": 364,
            "return": [
                "list[]",
                "List[str]",
                "bool",
                "Iterable[str]",
                "str",
                "List[Tuple[str, Any]]",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Space.sample.merge_intervals": {
            "name": "merge_intervals",
            "location": 290,
            "return": [
                "tuple[int]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "ggga.py-master/ggga/surrogate_model.py": {
        "SurrogateModel.estimate": {
            "name": "estimate",
            "location": 30,
            "return": [
                "SurrogateModel"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSurrogateModel]"
                ],
                "mat_x": [
                    "List[Dict[str, str]]",
                    "str",
                    "list[dict[str, str]]",
                    "List[T]",
                    "list[T]"
                ],
                "vec_y": [
                    "List[Dict[str, str]]",
                    "str",
                    "list[dict[str, str]]",
                    "List[T]",
                    "list[T]"
                ]
            }
        },
        "SurrogateModel.predict": {
            "name": "predict",
            "location": 51,
            "return": [
                "Tuple[(float, Optional[float])]"
            ],
            "arguments": {
                "self": [],
                "vec_x": [
                    "int",
                    "float",
                    "Optional[float]",
                    "None",
                    "Iterable[dict]",
                    "typing.Iterable[dict[, ]]",
                    "List[Tuple[Any, str]]",
                    "bool"
                ]
            }
        },
        "SurrogateModel.predict_a": {
            "name": "predict_a",
            "location": 67,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "mat_x": [
                    "str",
                    "int"
                ]
            }
        },
        "SurrogateModel.predict_transformed_a": {
            "name": "predict_transformed_a",
            "location": 84,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "mat_x_transformed": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "typing.Callable[, ]",
                    "Callable"
                ]
            }
        },
        "SurrogateModel.length_scales": {
            "name": "length_scales",
            "location": 97,
            "return": [
                "str",
                "bool",
                "List[float]",
                "float",
                "Union[int, float]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ggga.py-master/ggga/util.py": {
        "fork_random_state": {
            "name": "fork_random_state",
            "location": 13,
            "return": [
                "RandomState",
                "int",
                "Sequence[str]",
                "Callable"
            ],
            "arguments": {
                "rng": [
                    "dict"
                ]
            }
        },
        "tabularize": {
            "name": "tabularize",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "header": [
                    "List[str]"
                ],
                "formats": [
                    "List[str]"
                ],
                "data": [
                    "Iterable[list]"
                ]
            }
        },
        "minimize_by_gradient": {
            "name": "minimize_by_gradient",
            "location": 40,
            "return": [
                "Tuple[(Any, float)]"
            ],
            "arguments": {
                "obj_func": [
                    "Callable"
                ],
                "start": [
                    "bool",
                    "typing.Callable[, ]",
                    "Callable",
                    "str",
                    "list[]",
                    "numpy.ndarray",
                    "tuple[int]",
                    "list",
                    "Tuple[int]"
                ]
            }
        },
        "timer": {
            "name": "timer",
            "location": 70,
            "return": [
                "Callable[([], float)]"
            ],
            "arguments": {
                "time_source": [
                    "bool"
                ]
            }
        },
        "coerce_array": {
            "name": "coerce_array",
            "location": 85,
            "return": [
                "np_@_ndarray",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "arrayish": [
                    "list[]",
                    "float",
                    "numpy.ndarray",
                    "list"
                ]
            }
        },
        "yaml_constructor": {
            "name": "yaml_constructor",
            "location": 93,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "tag": [
                    "str"
                ],
                "safe": [
                    "str",
                    "bool"
                ]
            }
        },
        "timer.duration": {
            "name": "duration",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "ToJsonish.to_jsonish": {
            "name": "to_jsonish",
            "location": 81,
            "return": [
                "builtins.object",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "yaml_constructor.decorator": {
            "name": "decorator",
            "location": 94,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "constructor": [
                    "str",
                    "Union[int, slice]",
                    "int"
                ]
            }
        },
        "Validator.is_instance": {
            "name": "is_instance",
            "location": 107,
            "return": [
                "Callable[([Any, Any, Any], Any)]"
            ],
            "arguments": {
                "expected_type": [
                    "str",
                    "None",
                    "bool",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "Sequence[str]",
                    "type",
                    "typing.Sequence[str]",
                    "typing.Type"
                ]
            }
        },
        "Validator.is_posint": {
            "name": "is_posint",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "_obj": [
                    "str",
                    "bool",
                    "list[str]",
                    "List[str]",
                    "set[str]",
                    "List[Union[Any, Any]]",
                    "Set[str]"
                ],
                "attr": [
                    "str"
                ],
                "value": [
                    "int",
                    "str",
                    "Callable"
                ]
            }
        },
        "Validator.is_percentage": {
            "name": "is_percentage",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "_obj": [
                    "str",
                    "bool",
                    "list[str]",
                    "List[str]",
                    "set[str]",
                    "List[Union[Any, Any]]",
                    "Set[str]"
                ],
                "attr": [
                    "str"
                ],
                "value": [
                    "float",
                    "int",
                    "Dict[str, str]",
                    "str",
                    "Callable"
                ]
            }
        },
        "Validator.is_instance.validate": {
            "name": "validate",
            "location": 108,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "_obj": [
                    "str",
                    "list",
                    "Dict[str, Any]"
                ],
                "attr": [
                    "str"
                ],
                "value": [
                    "int",
                    "list",
                    "List[str]",
                    "Mapping[str, Any]",
                    "str",
                    "T"
                ]
            }
        }
    },
    "ggga.py-master/ggga/visualization.py": {
        "_default_progress_cb": {
            "name": "_default_progress_cb",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "_param_1": [
                    "str"
                ],
                "_param_2": [
                    "Optional[str]"
                ]
            }
        },
        "plot_single_variable_dependence": {
            "name": "plot_single_variable_dependence",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "ax": [],
                "dim": []
            }
        },
        "plot_dual_variable_dependence": {
            "name": "plot_dual_variable_dependence",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "ax": [],
                "dim_1": [],
                "dim_2": []
            }
        },
        "plot_convergence": {
            "name": "plot_convergence",
            "location": 444,
            "return": [
                "Tuple[(Any, Tuple[(Any, Any)])]"
            ],
            "arguments": {
                "all_evaluations": [
                    "List[ggga.individual.Individual]"
                ]
            }
        },
        "plot_observations_against_model": {
            "name": "plot_observations_against_model",
            "location": 492,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "ggga.surrogate_model.SurrogateModel"
                ],
                "all_evaluations": [
                    "List[ggga.individual.Individual]"
                ]
            }
        },
        "_merge_dicts": {
            "name": "_merge_dicts",
            "location": 523,
            "return": [
                "dict"
            ],
            "arguments": {}
        },
        "DualDependenceStyle.get_contour_filled_args": {
            "name": "get_contour_filled_args",
            "location": 70,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "DualDependenceStyle.get_contour_line_args": {
            "name": "get_contour_line_args",
            "location": 83,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "DualDependenceStyle.get_scatter_args": {
            "name": "get_scatter_args",
            "location": 96,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "DualDependenceStyle.get_xmin_scatter_args": {
            "name": "get_xmin_scatter_args",
            "location": 107,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "PartialDependence.__init__": {
            "name": "__init__",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PartialDependence.along_one_dimension": {
            "name": "along_one_dimension",
            "location": 180,
            "return": [
                "Tuple[(Any, Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "dim": [
                    "int"
                ]
            }
        },
        "PartialDependence.along_two_dimensions": {
            "name": "along_two_dimensions",
            "location": 225,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "dim_1": [
                    "int"
                ],
                "dim_2": [
                    "int"
                ]
            }
        },
        "PartialDependence.plot_grid": {
            "name": "plot_grid",
            "location": 256,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "x_observed": [],
                "y_observed": []
            }
        }
    },
    "ggga.py-master/ggga/__init__.py": {},
    "ggga.py-master/ggga/__main__.py": {
        "irace_from_yaml": {
            "name": "irace_from_yaml",
            "location": 24,
            "return": [
                "IraceStrategy"
            ],
            "arguments": {
                "loader": [],
                "node": []
            }
        },
        "ggga_from_yaml": {
            "name": "ggga_from_yaml",
            "location": 30,
            "return": [
                "GGGAStrategy"
            ],
            "arguments": {
                "loader": [],
                "node": []
            }
        },
        "compare_model_with_minima_io": {
            "name": "compare_model_with_minima_io",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "ggga.surrogate_model.SurrogateModel"
                ],
                "minima": [
                    "List[Tuple[(list, float)]]"
                ]
            }
        },
        "run_example": {
            "name": "run_example",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "example_name": [
                    "str"
                ]
            }
        },
        "click_common_example_options": {
            "name": "click_common_example_options",
            "location": 204,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "provide_defaults": [
                    "bool"
                ]
            }
        },
        "cli": {
            "name": "cli",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "StrategyParam.convert": {
            "name": "convert",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "spec": [
                    "str"
                ],
                "param": [],
                "ctx": []
            }
        },
        "click_common_example_options.option": {
            "name": "option",
            "location": 206,
            "return": [],
            "arguments": {}
        },
        "click_common_example_options.decorator": {
            "name": "decorator",
            "location": 260,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "run_example_wrapper": {
            "name": "run_example_wrapper",
            "location": 295,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "run_example_with_strategies.on_evaluation": {
            "name": "on_evaluation",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "sample": [],
                "value": []
            }
        },
        "maybe_dim_option": {
            "name": "maybe_dim_option",
            "location": 288,
            "return": [],
            "arguments": {
                "fn": []
            }
        }
    },
    "ggga.py-master/ggga/examples/examples.py": {
        "_get_doc": {
            "name": "_get_doc",
            "location": 14,
            "return": [
                "str",
                "List[str]",
                "Sequence[str]"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "bool"
                ]
            }
        },
        "Example.fix_dimension": {
            "name": "fix_dimension",
            "location": 32,
            "return": [
                "Example",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "n_dim": [
                    "int",
                    "Optional[str]",
                    "Type[Tuple[Any, Any]]",
                    "Dict[str, float]",
                    "bool"
                ]
            }
        },
        "Example.make_objective": {
            "name": "make_objective",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExampleWithVariableDimensions.fix_dimension": {
            "name": "fix_dimension",
            "location": 80,
            "return": [
                "Optional[Dict[str, Any]]",
                "Example"
            ],
            "arguments": {
                "self": [],
                "n_dim": [
                    "int",
                    "Optional[bool]",
                    "Optional[int]",
                    "Optional[float]"
                ]
            }
        }
    },
    "ggga.py-master/ggga/examples/ggga_strategy.py": {
        "GGGAStrategy.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ggga.py-master/ggga/examples/irace_strategy.py": {},
    "ggga.py-master/ggga/examples/strategy.py": {
        "Strategy.name": {
            "name": "name",
            "location": 25,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ggga.py-master/ggga/examples/__init__.py": {},
    "ggga.py-master/ggga/tests/test_ggga.py": {
        "test_expected_improvement": {
            "name": "test_expected_improvement",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe_gpr": {
            "name": "describe_gpr",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe_integer_params": {
            "name": "describe_integer_params",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe_gpr.describe_differing_sample_density": {
            "name": "describe_differing_sample_density",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "describe_gpr.describe_unsampled_regions": {
            "name": "describe_unsampled_regions",
            "location": 82,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "describe_gpr.it_works_in_1d": {
            "name": "it_works_in_1d",
            "location": 109,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "describe_gpr.rng": {
            "name": "rng",
            "location": 148,
            "return": [
                "dict",
                "numpy.ndarray",
                "int"
            ],
            "arguments": {
                "request": []
            }
        },
        "describe_gpr.training_data": {
            "name": "training_data",
            "location": 152,
            "return": [
                "tuple[int]",
                "bool",
                "numpy.ndarray",
                "Callable[[None, None], bool]",
                "float"
            ],
            "arguments": {
                "request": [],
                "rng": [
                    "int"
                ],
                "noise_level": [
                    "int",
                    "str"
                ]
            }
        },
        "describe_gpr.noise_level": {
            "name": "noise_level",
            "location": 198,
            "return": [
                "str",
                "bool",
                "Callable[[str], T]",
                "dict",
                "Tuple[str, str]"
            ],
            "arguments": {
                "request": [
                    "Callable"
                ]
            }
        },
        "describe_gpr.case": {
            "name": "case",
            "location": 214,
            "return": [
                "Case",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "request": [],
                "training_data": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "noise_level": [
                    "int",
                    "bytes"
                ],
                "rng": [
                    "int",
                    "bytes"
                ]
            }
        },
        "describe_gpr.it_works_2d": {
            "name": "it_works_2d",
            "location": 246,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "training_data": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "list",
                    "Optional[str]",
                    "Optional[Any]"
                ],
                "case": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "list",
                    "Optional[str]",
                    "Optional[Any]"
                ],
                "noise_level": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "list",
                    "Optional[str]",
                    "Optional[Any]"
                ],
                "rng": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "list",
                    "Optional[str]",
                    "Optional[Any]"
                ]
            }
        },
        "describe_integer_params.it_transforms_variables_correctly": {
            "name": "it_transforms_variables_correctly",
            "location": 345,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "describe_gpr.SimpleModel.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "describe_gpr.SimpleModel.__repr__": {
            "name": "__repr__",
            "location": 33,
            "return": [
                "typing.Text",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "describe_gpr.SimpleModel.predict": {
            "name": "predict",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "describe_gpr.SimpleModel.uncertainty": {
            "name": "uncertainty",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "numpy.ndarray",
                    "Union[tensorflow.Tensor, numpy.ndarray]"
                ]
            }
        },
        "describe_gpr.describe_differing_sample_density.model": {
            "name": "model",
            "location": 48,
            "return": [
                "SimpleModel"
            ],
            "arguments": {}
        },
        "describe_gpr.describe_differing_sample_density.it_should_roughly_fit_the_data": {
            "name": "it_should_roughly_fit_the_data",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "model": [
                    "dict",
                    "str"
                ]
            }
        },
        "describe_gpr.describe_differing_sample_density.it_should_provide_a_reasonable_interpolation": {
            "name": "it_should_provide_a_reasonable_interpolation",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "model": [
                    "int"
                ]
            }
        },
        "describe_gpr.describe_differing_sample_density.it_should_prefer_a_conservative_extrapolation": {
            "name": "it_should_prefer_a_conservative_extrapolation",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "model": [
                    "int"
                ]
            }
        },
        "describe_gpr.describe_differing_sample_density.it_should_have_similar_uncertainty_for_single_observations": {
            "name": "it_should_have_similar_uncertainty_for_single_observations",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "model": [
                    "Type[T]",
                    "str",
                    "List[Tuple[int, int, float]]"
                ]
            }
        },
        "describe_gpr.describe_differing_sample_density.it_should_have_lower_uncertainty_for_more_observations": {
            "name": "it_should_have_lower_uncertainty_for_more_observations",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "model": [
                    "int"
                ]
            }
        },
        "describe_gpr.describe_unsampled_regions.model": {
            "name": "model",
            "location": 85,
            "return": [
                "SimpleModel",
                "numpy.ndarray",
                "int",
                "denite.util.UserContext"
            ],
            "arguments": {}
        },
        "describe_gpr.describe_unsampled_regions.it_has_low_uncertainty_at_samples": {
            "name": "it_has_low_uncertainty_at_samples",
            "location": 96,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "model": [
                    "int"
                ]
            }
        },
        "describe_gpr.describe_unsampled_regions.it_should_have_more_uncertainty_for_interpolation": {
            "name": "it_should_have_more_uncertainty_for_interpolation",
            "location": 101,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "model": [
                    "bool",
                    "int"
                ]
            }
        },
        "describe_gpr.describe_unsampled_regions.it_should_have_more_uncertainty_for_extrapolation": {
            "name": "it_should_have_more_uncertainty_for_extrapolation",
            "location": 105,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "model": [
                    "bool",
                    "int"
                ]
            }
        },
        "describe_gpr.it_works_in_1d.check_predictions": {
            "name": "check_predictions",
            "location": 124,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "xs": [
                    "numpy.ndarray",
                    "Union[pandas.Series, numpy.ndarray]"
                ],
                "extra_std": [
                    "int",
                    "numpy.ndarray",
                    "T",
                    "list"
                ]
            }
        },
        "describe_gpr.it_works_2d.loc_info": {
            "name": "loc_info",
            "location": 271,
            "return": [
                "",
                "typing.Generator[tuple[typing.Text]]",
                "typing.Generator[typing.Generator[tuple[typing.Text]]]"
            ],
            "arguments": {
                "locs": [
                    "str",
                    "int"
                ]
            }
        },
        "describe_gpr.it_works_2d.fmt_loc_info": {
            "name": "fmt_loc_info",
            "location": 297,
            "return": [
                "bool",
                "Optional[str]",
                "Dict[int, int]",
                "Iterable[str]"
            ],
            "arguments": {
                "msg": [
                    "Optional[str]",
                    "str"
                ],
                "locs": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "describe_gpr.it_works_2d.bound": {
            "name": "bound",
            "location": 303,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "zscore": [
                    "bytes",
                    "str",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "ggga.py-master/ggga/tests/__init__.py": {}
}
{
    "gift-recommender-master/test_recommender_api.py": {
        "TestApi.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApi._build_path": {
            "name": "_build_path",
            "location": 17,
            "return": [
                "Text",
                "str",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "num_recommendations": [
                    "int",
                    "bool"
                ]
            }
        },
        "TestApi._test_n_recommendations": {
            "name": "_test_n_recommendations",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "Dict[str,int]",
                    "List[str]",
                    "T"
                ]
            }
        },
        "TestApi.test_no_recommendation": {
            "name": "test_no_recommendation",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApi.test_single_recommendation": {
            "name": "test_single_recommendation",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApi.test_multiple_recommendations": {
            "name": "test_multiple_recommendations",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gift-recommender-master/recommender_api/recommender_api.py": {
        "recommend": {
            "name": "recommend",
            "location": 7,
            "return": [
                "Dict[Text,]",
                "str",
                "Dict",
                "bool"
            ],
            "arguments": {
                "receiver_id": [
                    "int"
                ],
                "num_recommendations": [
                    "int"
                ]
            }
        }
    },
    "gift-recommender-master/recommender_api/__init__.py": {
        "create_app": {
            "name": "create_app",
            "location": 7,
            "return": [
                "flask.Flask",
                "Flask"
            ],
            "arguments": {}
        }
    },
    "gift-recommender-master/recommender_api/models/active_storage_attachments.py": {
        "ActiveStorageAttachments.get_image_blob_from_product": {
            "name": "get_image_blob_from_product",
            "location": 14,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "product_id": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "gift-recommender-master/recommender_api/models/active_storage_blobs.py": {
        "ActiveStorageBlob.get": {
            "name": "get",
            "location": 17,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "blob_id": []
            }
        }
    },
    "gift-recommender-master/recommender_api/models/giver.py": {},
    "gift-recommender-master/recommender_api/models/product.py": {
        "Product.get_all": {
            "name": "get_all",
            "location": 37,
            "return": [
                "bool",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "Product.get": {
            "name": "get",
            "location": 41,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "product_id": [
                    "int",
                    "str"
                ]
            }
        },
        "Product.get_image_key": {
            "name": "get_image_key",
            "location": 44,
            "return": [
                "str",
                "bool",
                "Union[dict, list]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gift-recommender-master/recommender_api/models/product_action.py": {
        "ProductAction.get_displayed": {
            "name": "get_displayed",
            "location": 21,
            "return": [
                "Callable[[Dict], None]",
                "str",
                "Dict[int, dict]"
            ],
            "arguments": {
                "receiver_id": [
                    "str",
                    "int"
                ]
            }
        },
        "ProductAction.get_liked": {
            "name": "get_liked",
            "location": 28,
            "return": [
                "Callable[[Dict], None]",
                "str",
                "Dict[int, dict]"
            ],
            "arguments": {
                "receiver_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "gift-recommender-master/recommender_api/models/receiver.py": {},
    "gift-recommender-master/recommender_api/models/store.py": {
        "Store.get": {
            "name": "get",
            "location": 12,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "store_id": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "gift-recommender-master/recommender_api/models/__init__.py": {},
    "gift-recommender-master/recommender_api/recommender_model/compute_product_vectors.py": {},
    "gift-recommender-master/recommender_api/recommender_model/create_feature_extractor_model.py": {},
    "gift-recommender-master/recommender_api/recommender_model/image_autoencoder_model.py": {
        "VAE.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "zdims": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "VAE.encode": {
            "name": "encode",
            "location": 23,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "VAE.reparameterize": {
            "name": "reparameterize",
            "location": 27,
            "return": [
                "str",
                "Callable",
                "Optional[int]",
                "Dict[str,Any]",
                "Tuple",
                "List[List[str]]",
                "List"
            ],
            "arguments": {
                "self": [],
                "mu": [
                    "Callable",
                    "torch.Tensor",
                    "Dict[str,Any]",
                    "tensorflow.Tensor",
                    "str",
                    "Tuple",
                    "List",
                    "Union[tuple,list]"
                ],
                "logvar": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "VAE.decode": {
            "name": "decode",
            "location": 35,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "z": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "VAE.forward": {
            "name": "forward",
            "location": 39,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "gift-recommender-master/recommender_api/recommender_model/image_feature_extractor.py": {
        "ImageFeatureExtractor.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageFeatureExtractor.compute_vector": {
            "name": "compute_vector",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "image_tensor": [
                    "int",
                    "torch.Tensor",
                    "PIL.Image.Image"
                ]
            }
        },
        "ImageFeatureExtractor.tensor_from_image": {
            "name": "tensor_from_image",
            "location": 29,
            "return": [
                "Optional[str]",
                "float",
                "Callable"
            ],
            "arguments": {
                "image": [
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]",
                    "str",
                    "Union[str,IO[bytes]]",
                    "IO",
                    "PIL.Image.Image"
                ]
            }
        }
    },
    "gift-recommender-master/recommender_api/recommender_model/img_vae_train.py": {
        "loss_function": {
            "name": "loss_function",
            "location": 11,
            "return": [
                "Callable[[Union,Union],Tuple[Any,...],]",
                "str",
                "Union[int,float]",
                "int"
            ],
            "arguments": {
                "recon_x": [
                    "str",
                    "Exception",
                    "List[Tuple[str,Any]]",
                    "List[tuple[Union[str,Any]]]"
                ],
                "x": [
                    "str",
                    "Exception",
                    "List[Tuple[str,Any]]",
                    "List[tuple[Union[str,Any]]]"
                ],
                "mu": [
                    "AbstractSet",
                    "torch.Tensor",
                    "AbstractSet[Any]"
                ],
                "logvar": [
                    "AbstractSet",
                    "torch.Tensor",
                    "AbstractSet[Any]"
                ]
            }
        }
    },
    "gift-recommender-master/recommender_api/recommender_model/model.py": {
        "is_recommendable": {
            "name": "is_recommendable",
            "location": 129,
            "return": [
                "bool",
                "Type[numpy.number]",
                "Iterable[str]"
            ],
            "arguments": {
                "product": [
                    "float",
                    "Set",
                    "int",
                    "Product",
                    "bool"
                ],
                "displayed_products_ids": [
                    "float",
                    "Set",
                    "int",
                    "Product",
                    "bool"
                ],
                "min_price": [
                    "float",
                    "Set",
                    "int",
                    "Product",
                    "bool"
                ],
                "max_price": [
                    "float",
                    "Set",
                    "int",
                    "Product",
                    "bool"
                ]
            }
        },
        "split_promoted_products": {
            "name": "split_promoted_products",
            "location": 135,
            "return": [
                "Tuple[list]",
                "Dict[str,Any]",
                "Exception",
                "tartare.core.models.Job",
                "str"
            ],
            "arguments": {
                "candidate_products": [
                    "List",
                    "str",
                    "bytes",
                    "Optional[str]",
                    "List[aw_core.models.Event]",
                    "List[dict[str,str]]",
                    "List[Dict[str,str]]"
                ]
            }
        },
        "cosine_similarity": {
            "name": "cosine_similarity",
            "location": 146,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "vec1": [
                    "int",
                    "Callable",
                    "str",
                    "models.Question"
                ],
                "vec2": [
                    "int",
                    "Callable",
                    "str",
                    "models.Question"
                ]
            }
        },
        "is_product_promoted": {
            "name": "is_product_promoted",
            "location": 150,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "int",
                "Optional[bool]"
            ],
            "arguments": {
                "product": [
                    "str",
                    "Product",
                    "bytes",
                    "int",
                    "Dict",
                    "None",
                    "Optional[Union[str,int]]"
                ]
            }
        },
        "RecommenderModel.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecommenderModel.load_product_vectors": {
            "name": "load_product_vectors",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "BinaryIO",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "RecommenderModel.save_vectors": {
            "name": "save_vectors",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "RecommenderModel.load_products": {
            "name": "load_products",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecommenderModel.get_product_vector": {
            "name": "get_product_vector",
            "location": 42,
            "return": [
                "str",
                "bytes",
                "Pattern",
                "bool",
                "List",
                "Union[int,float,complex]"
            ],
            "arguments": {
                "self": [],
                "product": [
                    "str",
                    "Product",
                    "numpy.ndarray"
                ]
            }
        },
        "RecommenderModel.add_product_vector": {
            "name": "add_product_vector",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "product": [
                    "List[int]",
                    "numpy.ndarray",
                    "str",
                    "List",
                    "Sequence[T]",
                    "int",
                    "bytes"
                ]
            }
        },
        "RecommenderModel.recommend": {
            "name": "recommend",
            "location": 57,
            "return": [
                "bool",
                "float",
                "List[List[str]]"
            ],
            "arguments": {
                "self": [],
                "receiver_id": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "num_recommendations": [
                    "int",
                    "str"
                ],
                "min_promoted": [
                    "int",
                    "str"
                ],
                "min_price": [
                    "float",
                    "int",
                    "str"
                ],
                "max_price": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "RecommenderModel.top_products_with_promoted": {
            "name": "top_products_with_promoted",
            "location": 68,
            "return": [
                "List",
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "receiver_vector": [
                    "bytes",
                    "None",
                    "Callable",
                    "site.transfer.models.SiteID",
                    "transfer.models.User",
                    "Optional[NetworkManager]"
                ],
                "candidate_products": [
                    "List",
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[List[str]]"
                ],
                "num_recommendations": [
                    "int",
                    "List[int]",
                    "List[str]"
                ],
                "min_promoted": [
                    "int",
                    "numpy.ndarray",
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "RecommenderModel.compute_receiver_vector": {
            "name": "compute_receiver_vector",
            "location": 91,
            "return": [
                "dict",
                "ajapaik.ajapaik.models.Album"
            ],
            "arguments": {
                "self": [],
                "receiver_likes": [
                    "zerver.models.Realm",
                    "audiopyle.lib.models.compressed_feature.CompressedFeatureDTO",
                    "numpy.dtype",
                    "int"
                ]
            }
        },
        "RecommenderModel.compute_score": {
            "name": "compute_score",
            "location": 96,
            "return": [
                "float",
                "int",
                "str",
                "ajapaik.ajapaik.models.Album"
            ],
            "arguments": {
                "self": [],
                "receiver_vector": [
                    "float",
                    "int",
                    "numpy.array",
                    "List[str]",
                    "numpy.ndarray"
                ],
                "product": [
                    "int",
                    "float",
                    "numpy.array"
                ]
            }
        },
        "RecommenderModel.default_recommendation": {
            "name": "default_recommendation",
            "location": 103,
            "return": [
                "List",
                "int",
                "bool",
                "Dict[str,int]",
                "Optional[Union[str,Any]]"
            ],
            "arguments": {
                "num_recommendations": [
                    "int",
                    "numpy.ndarray"
                ],
                "min_promoted": [
                    "str",
                    "int",
                    "None",
                    "Optional[int]",
                    "shop.transfer.models.ShopID",
                    "transfer.models.ArticleNumber"
                ],
                "candidate_products": [
                    "List",
                    "Dict",
                    "List[dict[Any,Any]]",
                    "List[int]",
                    "List[Dict[Any,Any]]",
                    "List[dict]"
                ]
            }
        },
        "RecommenderModel.get_receiver_likes": {
            "name": "get_receiver_likes",
            "location": 116,
            "return": [
                "Set",
                "List[str]",
                "List[zerver.models.UserProfile]",
                "Dict[str,Dict[str,Any]]",
                "Set[str]",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "receiver_id": [
                    "int",
                    "str"
                ]
            }
        },
        "RecommenderModel.get_candidate_products": {
            "name": "get_candidate_products",
            "location": 120,
            "return": [
                "List",
                "List[str]",
                "Dict[str,Any]",
                "Dict[str,str]",
                "Set[str]",
                "Optional[Dict[str,Any]]",
                "str",
                "Dict[str,Set[str]]"
            ],
            "arguments": {
                "receiver_id": [
                    "str",
                    "int"
                ],
                "min_price": [
                    "float",
                    "int",
                    "str"
                ],
                "max_price": [
                    "float",
                    "int",
                    "str"
                ]
            }
        }
    },
    "gift-recommender-master/recommender_api/recommender_model/preprocessor.py": {
        "Preprocessor.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embeddings": [
                    "Text",
                    "str",
                    "int"
                ]
            }
        },
        "Preprocessor.compute_vector": {
            "name": "compute_vector",
            "location": 20,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "product": [
                    "Tuple[Dict[str, Any], int]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "Preprocessor.get_vector": {
            "name": "get_vector",
            "location": 29,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str",
                    "float",
                    "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]",
                    "salon.models.Stylist"
                ]
            }
        },
        "Preprocessor.compute_name_vector": {
            "name": "compute_name_vector",
            "location": 35,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Container[str]",
                "bool",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": [],
                "product": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Preprocessor.compute_image_vector": {
            "name": "compute_image_vector",
            "location": 40,
            "return": [
                "list",
                "Tuple[int, Dict[str, Any]]",
                "str",
                "set",
                "Optional[int]",
                "Optional[str]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "product": [
                    "str",
                    "Optional[Dict]",
                    "int"
                ]
            }
        },
        "Preprocessor.compute_price_vector": {
            "name": "compute_price_vector",
            "location": 47,
            "return": [
                "dict",
                "Sequence[str]",
                "int",
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "product": [
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Dict[str, Any]",
                    "bool",
                    "List[List[str]]",
                    "bytes"
                ]
            }
        },
        "Preprocessor.compute_gender_vector": {
            "name": "compute_gender_vector",
            "location": 53,
            "return": [
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "product": [
                    "bytes",
                    "Optional[str]",
                    "Optional[zerver.models.Realm]",
                    "Optional[int]"
                ]
            }
        },
        "Preprocessor.compute_age_vector": {
            "name": "compute_age_vector",
            "location": 63,
            "return": [
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "product": [
                    "str",
                    "float",
                    "Optional[int]",
                    "dict"
                ]
            }
        }
    },
    "gift-recommender-master/recommender_api/recommender_model/s3_manager.py": {
        "S3.ensure_file": {
            "name": "ensure_file",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "filepath": [
                    "str",
                    "int"
                ]
            }
        },
        "S3.fetch_image": {
            "name": "fetch_image",
            "location": 24,
            "return": [
                "Image.Image"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "image_key": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "gift-recommender-master/recommender_api/recommender_model/__init__.py": {}
}
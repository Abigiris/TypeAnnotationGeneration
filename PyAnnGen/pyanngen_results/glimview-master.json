{
    "glimview-master/app.py": {
        "get_entities": {
            "name": "get_entities",
            "location": 22,
            "return": [
                "Dict[str, Any]",
                "str",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "get_relations": {
            "name": "get_relations",
            "location": 27,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "query": {
            "name": "query",
            "location": 32,
            "return": [
                "int",
                "Dict[str, float]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "hello": {
            "name": "hello",
            "location": 48,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {}
        }
    },
    "glimview-master/glimview/ModelKB.py": {
        "Model.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "words": [
                    "str",
                    "List[str]"
                ],
                "roles": [
                    "str",
                    "List[Union[Any,Any]]",
                    "Optional[str]",
                    "None"
                ],
                "path": [
                    "str",
                    "Callable"
                ],
                "path_file": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Callable"
                ]
            }
        },
        "Model.get_word_vector": {
            "name": "get_word_vector",
            "location": 110,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "str"
                ],
                "backoff_to_zero_vector": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "Model.get_relation_matrix": {
            "name": "get_relation_matrix",
            "location": 116,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "role": [
                    "str"
                ],
                "backoff_to_identity_matrix": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "Model.trans": {
            "name": "trans",
            "location": 127,
            "return": [
                "str",
                "bool",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "str"
                ],
                "m": [
                    "int",
                    "Optional[T]",
                    "float",
                    "Type[Any]",
                    "T",
                    "str",
                    "numpy.ndarray",
                    "Optional[Type[BaseException]]"
                ]
            }
        },
        "Model.calc": {
            "name": "calc",
            "location": 132,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "expr": [],
                "addition_symbol": [
                    "typing.Text"
                ]
            }
        },
        "Model.show_v": {
            "name": "show_v",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "int",
                    "List",
                    "float",
                    "Optional[float]",
                    "None"
                ],
                "k": [
                    "Callable",
                    "int",
                    "Optional[int]",
                    "None",
                    "str",
                    "Optional[str]",
                    "Union[numpy.ndarray,None,cirq.type_workarounds.NotImplementedType]",
                    "Optional[static_frame.core.util.IndexConstructor]"
                ]
            }
        },
        "Model.show_m": {
            "name": "show_m",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "str",
                    "int",
                    "Tuple"
                ],
                "k": [
                    "Optional[int]",
                    "int",
                    "Mapping",
                    "str",
                    "bytes",
                    "None"
                ]
            }
        },
        "Model.get_score": {
            "name": "get_score",
            "location": 200,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "head": [
                    "str",
                    "bool"
                ],
                "relation": [
                    "str",
                    "bool"
                ],
                "direction": [
                    "str",
                    "bool"
                ]
            }
        },
        "Model.show_mm": {
            "name": "show_mm",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "r1": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "r2": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "k": [
                    "float",
                    "Callable",
                    "str"
                ]
            }
        },
        "Model.mm_rank": {
            "name": "mm_rank",
            "location": 213,
            "return": [
                "Dict[str, Any]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "r1": [
                    "Match",
                    "str",
                    "bool",
                    "Pattern[str]",
                    "Pattern"
                ],
                "r2": [
                    "Match",
                    "str",
                    "bool",
                    "Pattern[str]",
                    "Pattern"
                ],
                "r": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "Sequence[T]",
                    "Union[int,float]",
                    "float"
                ]
            }
        },
        "Model.code_of": {
            "name": "code_of",
            "location": 222,
            "return": [
                "str",
                "Union[str,List[str]]",
                "int",
                "Dict[str,str]",
                "frozenset",
                "List[Optional[str]]",
                "List"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "AsyncIterator[T]",
                    "collections.abc.AsyncIterator"
                ]
            }
        },
        "Model._get_word_vector_if_str": {
            "name": "_get_word_vector_if_str",
            "location": 233,
            "return": [
                "bool",
                "int",
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "word_or_vec": [
                    "int",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "backoff_to_zero_vector": [
                    "int",
                    "List[int]",
                    "str",
                    "float",
                    "None",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "Model.calc_phrase_from_path": {
            "name": "calc_phrase_from_path",
            "location": 243,
            "return": [
                "str",
                "bytes",
                "Iterable[str]",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "ignore_oov": [
                    "bool",
                    "str"
                ]
            }
        },
        "Model.calc_phrase_from_path_with_entities": {
            "name": "calc_phrase_from_path_with_entities",
            "location": 280,
            "return": [
                "int",
                "List[str]",
                "set",
                "bytes",
                "Iterable[str]",
                "...",
                "dict"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "ignore_oov": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "Model.calc_phrase_from_triples": {
            "name": "calc_phrase_from_triples",
            "location": 295,
            "return": [
                "Set[str]",
                "Tuple[str]",
                "Dict[str, Any]",
                "int",
                "Sequence[float]"
            ],
            "arguments": {
                "self": [],
                "triples": [
                    "str",
                    "bool",
                    "allennlp.common.util.JsonDict",
                    "Callable[,object]"
                ],
                "ignore_oov": [
                    "bool",
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "Model.get_average_word_vector": {
            "name": "get_average_word_vector",
            "location": 317,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "words": [
                    "List[str]",
                    "str",
                    "Dict[str,Any]"
                ],
                "skip_oov": [
                    "bool",
                    "str"
                ]
            }
        },
        "Model.show_m.calc_deform": {
            "name": "calc_deform",
            "location": 160,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray"
                ]
            }
        },
        "Model.show_m.code_relu": {
            "name": "code_relu",
            "location": 168,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "Model.code_of.code_relu": {
            "name": "code_relu",
            "location": 223,
            "return": [
                "str",
                "int",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "int",
                    "float",
                    "numpy.array"
                ]
            }
        }
    },
    "glimview-master/glimview/util.py": {
        "take": {
            "name": "take",
            "location": 6,
            "return": [
                "list"
            ],
            "arguments": {
                "n": [],
                "iterable": []
            }
        },
        "chunked": {
            "name": "chunked",
            "location": 10,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "iterable": [],
                "n": []
            }
        },
        "build_path_expr": {
            "name": "build_path_expr",
            "location": 13,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "path": []
            }
        }
    },
    "glimview-master/glimview/utilityFuncs.py": {
        "readerLine": {
            "name": "readerLine",
            "location": 9,
            "return": [
                "Generator[(str, Any, None)]"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "bool"
                ]
            }
        },
        "show_top": {
            "name": "show_top",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "k": [
                    "float",
                    "int",
                    "Tuple[int, int]",
                    "str"
                ],
                "scores": [
                    "float",
                    "int",
                    "Tuple[int, int]",
                    "str"
                ],
                "lst": [
                    "int",
                    "List[str]",
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "split_wrt_brackets": {
            "name": "split_wrt_brackets",
            "location": 27,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "str": [
                    "str",
                    "bool",
                    "list",
                    "Union[str, Pattern[str]]"
                ],
                "sp": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "glimview-master/glimview/__init__.py": {}
}
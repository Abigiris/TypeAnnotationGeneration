{
    "goodauldbooks-master/heroku_wsgi.py": {},
    "goodauldbooks-master/server/api/django/manage.py": {},
    "goodauldbooks-master/server/api/django/apps/api_public/admin.py": {},
    "goodauldbooks-master/server/api/django/apps/api_public/apps.py": {},
    "goodauldbooks-master/server/api/django/apps/api_public/graphql_schema.py": {},
    "goodauldbooks-master/server/api/django/apps/api_public/models.py": {
        "Book.get_genres_with_stats": {
            "name": "get_genres_with_stats",
            "location": 18,
            "return": [
                "list[]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Book.get_genres_with_stats.sort_genres_with_stats": {
            "name": "sort_genres_with_stats",
            "location": 29,
            "return": [
                "str",
                "Union[str, List[str]]"
            ],
            "arguments": {
                "genre_w_stats": [
                    "int",
                    "str",
                    "List[str]",
                    "Tuple[int]"
                ]
            }
        }
    },
    "goodauldbooks-master/server/api/django/apps/api_public/serializers.py": {},
    "goodauldbooks-master/server/api/django/apps/api_public/tests.py": {},
    "goodauldbooks-master/server/api/django/apps/api_public/urls.py": {},
    "goodauldbooks-master/server/api/django/apps/api_public/views.py": {},
    "goodauldbooks-master/server/api/django/apps/api_public/graphql/library/query.py": {
        "_get_books_metadata": {
            "name": "_get_books_metadata",
            "location": 177,
            "return": [
                "ItemsListMetadata",
                "str",
                "Optional[zerver.models.Realm]",
                "List[str]",
                "core.models.Recipe",
                "Iterable[int]"
            ],
            "arguments": {
                "author_id": [
                    "int",
                    "None",
                    "str",
                    "list[int]",
                    "transfer.models.StorefronID",
                    "transfer.models.ArticleID",
                    "transfer.models.ShopID",
                    "List[int]"
                ],
                "genre": [
                    "int",
                    "None",
                    "str",
                    "bool"
                ],
                "lang": [
                    "int",
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "_get_authors_metadata": {
            "name": "_get_authors_metadata",
            "location": 199,
            "return": [
                "ItemsListMetadata",
                "str",
                "Optional[zerver.models.Realm]",
                "List[str]",
                "core.models.Recipe",
                "Iterable[int]"
            ],
            "arguments": {
                "genre": [
                    "str",
                    "bool",
                    "None"
                ],
                "lang": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "_author_to_quick_autocompletion_result": {
            "name": "_author_to_quick_autocompletion_result",
            "location": 219,
            "return": [
                "QuickSearchResultAuthor",
                "int",
                "Dict[str, int]",
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "author": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "str",
                    "dict[, ]",
                    "bytes",
                    "dict",
                    "fal.models.Anime"
                ]
            }
        },
        "_book_to_quick_autocompletion_result": {
            "name": "_book_to_quick_autocompletion_result",
            "location": 230,
            "return": [
                "QuickSearchResultBook",
                "int",
                "Dict[str, int]",
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "book": [
                    "bytes"
                ]
            }
        },
        "Query.resolve_book": {
            "name": "resolve_book",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "bool",
                    "graphql.ResolveInfo",
                    "graphql.execution.base.ResolveInfo"
                ]
            }
        },
        "Query.resolve_author": {
            "name": "resolve_author",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "bool",
                    "graphql.ResolveInfo",
                    "graphql.execution.base.ResolveInfo"
                ]
            }
        },
        "Query.resolve_books": {
            "name": "resolve_books",
            "location": 68,
            "return": [
                "BooksList",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "bool",
                    "graphql.ResolveInfo",
                    "graphql.execution.base.ResolveInfo"
                ]
            }
        },
        "Query.resolve_authors": {
            "name": "resolve_authors",
            "location": 100,
            "return": [
                "AuthorsList",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "bool",
                    "graphql.ResolveInfo",
                    "graphql.execution.base.ResolveInfo"
                ]
            }
        },
        "Query.resolve_featured_books": {
            "name": "resolve_featured_books",
            "location": 124,
            "return": [
                "list[]",
                "List[str]",
                "List[Dict]",
                "list",
                "str",
                "tuple",
                "List[List[int]]"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "bool",
                    "graphql.ResolveInfo",
                    "graphql.execution.base.ResolveInfo"
                ]
            }
        },
        "Query.resolve_quick_search": {
            "name": "resolve_quick_search",
            "location": 134,
            "return": [
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "dict[, ]",
                    "dict",
                    "str",
                    "tuple[]",
                    "graphql.ResolveInfo",
                    "tuple",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "goodauldbooks-master/server/api/django/apps/api_public/graphql/library/schema.py": {
        "_genres_w_stats_to_graphql_equivalent": {
            "name": "_genres_w_stats_to_graphql_equivalent",
            "location": 185,
            "return": [
                "GenreWithStats"
            ],
            "arguments": {
                "genreWithStats": []
            }
        },
        "QuickSearchResultAuthor.resolve_type": {
            "name": "resolve_type",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "QuickSearchResultBook.resolve_type": {
            "name": "resolve_type",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "Book.resolve_book_id": {
            "name": "resolve_book_id",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "Book.resolve_genres": {
            "name": "resolve_genres",
            "location": 92,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "Book.resolve_nb_pages": {
            "name": "resolve_nb_pages",
            "location": 95,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "Book.resolve_genres_with_stats": {
            "name": "resolve_genres_with_stats",
            "location": 98,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "Book.resolve_slug": {
            "name": "resolve_slug",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "Book.resolve_has_intro": {
            "name": "resolve_has_intro",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "Book.resolve_cover_path": {
            "name": "resolve_cover_path",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "Book.resolve_epub_path": {
            "name": "resolve_epub_path",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "Book.resolve_epub_size": {
            "name": "resolve_epub_size",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "Book.resolve_mobi_path": {
            "name": "resolve_mobi_path",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "Book.resolve_mobi_size": {
            "name": "resolve_mobi_size",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "Book.resolve_intro": {
            "name": "resolve_intro",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "Author.resolve_author_id": {
            "name": "resolve_author_id",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "Author.resolve_full_name": {
            "name": "resolve_full_name",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "Author.resolve_slug": {
            "name": "resolve_slug",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "Author.resolve_nb_books": {
            "name": "resolve_nb_books",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "Author.resolve_highlight": {
            "name": "resolve_highlight",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "info": []
            }
        }
    },
    "goodauldbooks-master/server/api/django/apps/api_public/graphql/library/utils.py": {
        "get_public_book_id": {
            "name": "get_public_book_id",
            "location": 22,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "book": [
                    "List[deeplearning.ml4pl.models.log_database.Batch]",
                    "list[B]",
                    "List[str]",
                    "int",
                    "list[str]",
                    "tuple",
                    "tuple[]"
                ]
            }
        },
        "get_public_author_id": {
            "name": "get_public_author_id",
            "location": 26,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "author": [
                    "List[deeplearning.ml4pl.models.log_database.Batch]",
                    "list[B]",
                    "List[str]",
                    "int",
                    "list[str]",
                    "tuple",
                    "tuple[]"
                ]
            }
        },
        "get_book_id_criteria": {
            "name": "get_book_id_criteria",
            "location": 30,
            "return": [
                "BookIdCriteria",
                "Optional[str]",
                "str",
                "bool",
                "dict",
                "Callable"
            ],
            "arguments": {
                "public_book_id": [
                    "str",
                    "int",
                    "megatron.models.MegatronChannel",
                    "Optional[int]"
                ]
            }
        },
        "get_author_id_criteria": {
            "name": "get_author_id_criteria",
            "location": 42,
            "return": [
                "AuthorIdCriteria",
                "Optional[str]",
                "str",
                "bool",
                "dict",
                "Callable"
            ],
            "arguments": {
                "public_author_id": [
                    "str",
                    "int",
                    "megatron.models.MegatronChannel",
                    "Optional[int]"
                ]
            }
        },
        "get_books_base_queryset": {
            "name": "get_books_base_queryset",
            "location": 54,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {}
        },
        "get_authors_base_queryset": {
            "name": "get_authors_base_queryset",
            "location": 58,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {}
        },
        "get_single_book_by_public_id": {
            "name": "get_single_book_by_public_id",
            "location": 62,
            "return": [
                "str",
                "dict[str, str]",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "public_book_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "get_single_author_by_public_id": {
            "name": "get_single_author_by_public_id",
            "location": 75,
            "return": [
                "str",
                "dict[str, str]",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "public_author_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "goodauldbooks-master/server/api/django/apps/api_public/migrations/__init__.py": {},
    "goodauldbooks-master/server/api/django/project/settings.py": {},
    "goodauldbooks-master/server/api/django/project/settings_dev.py": {},
    "goodauldbooks-master/server/api/django/project/settings_heroku.py": {},
    "goodauldbooks-master/server/api/django/project/urls.py": {},
    "goodauldbooks-master/server/api/django/project/wsgi.py": {},
    "goodauldbooks-master/server/pg-rdfs-indexing/bin/import-books-data.py": {
        "find_and_process_pg_books": {
            "name": "find_and_process_pg_books",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path",
                    "Union[str, pathlib.Path]",
                    "Union[pathlib.Path, str]"
                ],
                "batch_size": [
                    "bool",
                    "int",
                    "type",
                    "Optional[str]",
                    "Dict[int, bool]",
                    "str"
                ]
            }
        }
    },
    "goodauldbooks-master/server/pg-rdfs-indexing/bin/rsync-and-import-book.py": {
        "rsync_and_process_pg_book": {
            "name": "rsync_and_process_pg_book",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "pg_book_id": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Tuple[str]",
                    "tuple[str]"
                ],
                "books_path": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Tuple[str]",
                    "tuple[str]"
                ],
                "pg_mirror": [
                    "str",
                    "int"
                ],
                "rsync_only": [
                    "bool",
                    "Dict[str, Tuple]",
                    "dict[str, tuple[]]",
                    "List[int]",
                    "list[int]",
                    "MutableSet[str]",
                    "typing.MutableSet",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "run_and_stream_cmd": {
            "name": "run_and_stream_cmd",
            "location": 48,
            "return": [
                "",
                "typing.Generator[typing.Union[int,list[]]]"
            ],
            "arguments": {
                "command": [
                    "str",
                    "bool",
                    "List[Union[str, pathlib.Path]]",
                    "list[typing.Union[str,pathlib.Path]]"
                ]
            }
        }
    },
    "goodauldbooks-master/server/pg-rdfs-indexing/src/pg_import/db.py": {
        "add_book_storage_params_to_current_batch": {
            "name": "add_book_storage_params_to_current_batch",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "books_to_store_cur_batch": [
                    "list[str]",
                    "bool",
                    "str",
                    "List[str]",
                    "int",
                    "Optional[str]",
                    "float"
                ],
                "books_root_path": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ],
                "book": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "execute_books_storage_in_db_batch": {
            "name": "execute_books_storage_in_db_batch",
            "location": 21,
            "return": [
                "None",
                "int",
                "str",
                "DefaultDict"
            ],
            "arguments": {
                "books_to_store_cur_batch": [
                    "str",
                    "T",
                    "int",
                    "float",
                    "bytes",
                    "Union[str, bytes]",
                    "Optional[Any]"
                ]
            }
        },
        "store_single_book_in_db": {
            "name": "store_single_book_in_db",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "books_root_path": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "book": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "commit": [
                    "bool",
                    "psycopg2.extensions.connection",
                    "dict",
                    "str",
                    "List[str]"
                ]
            }
        },
        "_book_to_dict_for_db": {
            "name": "_book_to_dict_for_db",
            "location": 49,
            "return": [
                "dict[typing.Text, ]",
                "str",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "books_root_path": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "book": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "DbConnection.get_db": {
            "name": "get_db",
            "location": 62,
            "return": [
                "bool",
                "list"
            ],
            "arguments": {}
        }
    },
    "goodauldbooks-master/server/pg-rdfs-indexing/src/pg_import/parsing.py": {
        "process_book_from_pg_rdf_file": {
            "name": "process_book_from_pg_rdf_file",
            "location": 45,
            "return": [
                "None",
                "Optional[str]",
                "BookProcessingResult",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "pg_book_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]"
                ],
                "rdf_file": [
                    "pathlib.Path",
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[List[str]]"
                ]
            }
        },
        "get_book_intro": {
            "name": "get_book_intro",
            "location": 67,
            "return": [
                "str",
                "Optional[str]",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "book_as_txt": [
                    "str"
                ],
                "intro_length": [
                    "int",
                    "List[int]",
                    "Optional[str]",
                    "Optional[int]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "get_pg_book_assets": {
            "name": "get_pg_book_assets",
            "location": 72,
            "return": [
                "dict[, BookAsset]",
                "str",
                "bool"
            ],
            "arguments": {
                "rdf_file_dir": [
                    "Tuple[str, str]",
                    "bool",
                    "pathlib.Path",
                    "str",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "BookProcessingResult.assets_as_json": {
            "name": "assets_as_json",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "books_root_path": [
                    "str",
                    "None",
                    "pathlib.Path",
                    "Optional[str]"
                ]
            }
        }
    },
    "goodauldbooks-master/server/pg-rdfs-indexing/src/pg_import/__init__.py": {}
}
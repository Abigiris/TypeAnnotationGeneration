{
    "governor-master/engine.py": {
        "Engine.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "str",
                    "List[str]",
                    "Tuple[Tuple[str,...]]",
                    "Tuple[tuple[Union[str,...]]]"
                ]
            }
        },
        "Engine.start": {
            "name": "start",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Dict"
                ]
            }
        },
        "Engine.over": {
            "name": "over",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "Mapping",
                    "IO",
                    "IO[bytes]",
                    "bytearray",
                    "bytes",
                    "T",
                    "Union[bytes,bytearray]"
                ]
            }
        },
        "Engine.log": {
            "name": "log",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "Union[str,List[str],None]",
                    "kingsburg.State",
                    "bool",
                    "List[str]",
                    "None"
                ],
                "message": [
                    "Union[str,List[str],None]",
                    "None",
                    "str",
                    "kingsburg.State",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "Engine.setupPlayers": {
            "name": "setupPlayers",
            "location": 33,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.pickFreeResource": {
            "name": "pickFreeResource",
            "location": 36,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "List[kingsburg.Reward]",
                    "kingsburg.State",
                    "kingsburg.AdvisorScore"
                ],
                "name": [
                    "str",
                    "List[kingsburg.Reward]",
                    "kingsburg.State",
                    "kingsburg.AdvisorScore"
                ]
            }
        },
        "Engine.rollDice": {
            "name": "rollDice",
            "location": 39,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "List[kingsburg.Reward]",
                    "kingsburg.State",
                    "kingsburg.AdvisorScore"
                ],
                "name": [
                    "str",
                    "List[kingsburg.Reward]",
                    "kingsburg.State",
                    "kingsburg.AdvisorScore"
                ]
            }
        },
        "Engine.chooseAdvisor": {
            "name": "chooseAdvisor",
            "location": 42,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "List[kingsburg.Reward]",
                    "kingsburg.State",
                    "kingsburg.AdvisorScore"
                ],
                "name": [
                    "str",
                    "List[kingsburg.Reward]",
                    "kingsburg.State",
                    "kingsburg.AdvisorScore"
                ]
            }
        },
        "Engine.chooseReward": {
            "name": "chooseReward",
            "location": 45,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "List[kingsburg.Reward]",
                    "kingsburg.State",
                    "kingsburg.AdvisorScore"
                ],
                "name": [
                    "str",
                    "List[kingsburg.Reward]",
                    "kingsburg.State",
                    "kingsburg.AdvisorScore"
                ],
                "advisorScore": [
                    "str",
                    "List[kingsburg.Reward]",
                    "kingsburg.State",
                    "kingsburg.AdvisorScore"
                ],
                "possible_rewards": [
                    "str",
                    "List[kingsburg.Reward]",
                    "kingsburg.State",
                    "kingsburg.AdvisorScore"
                ]
            }
        },
        "Engine.chooseBuilding": {
            "name": "chooseBuilding",
            "location": 48,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "bool",
                    "str",
                    "kingsburg.State"
                ],
                "name": [
                    "bool",
                    "str",
                    "kingsburg.State"
                ],
                "use_kings_envoy": [
                    "bool",
                    "str",
                    "kingsburg.State"
                ]
            }
        },
        "Engine.choices__buildings": {
            "name": "choices__buildings",
            "location": 51,
            "return": [
                "str",
                "bool",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "kingsburg.State"
                ],
                "name": [
                    "str",
                    "kingsburg.State"
                ]
            }
        },
        "PlayerEngine.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "bool",
                    "Dict[str,Any]"
                ]
            }
        },
        "PlayerEngine.pickFreeResource": {
            "name": "pickFreeResource",
            "location": 63,
            "return": [
                "str",
                "Type",
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "bool",
                    "Dict[str,str]"
                ],
                "name": [
                    "str",
                    "bool",
                    "Dict[str,str]"
                ]
            }
        },
        "PlayerEngine.rollDice": {
            "name": "rollDice",
            "location": 66,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "bool",
                    "Dict[str,str]"
                ],
                "name": [
                    "str",
                    "bool",
                    "Dict[str,str]"
                ]
            }
        },
        "PlayerEngine.chooseAdvisor": {
            "name": "chooseAdvisor",
            "location": 69,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "bool",
                    "Dict[str,str]"
                ],
                "name": [
                    "str",
                    "bool",
                    "Dict[str,str]"
                ]
            }
        },
        "PlayerEngine.chooseReward": {
            "name": "chooseReward",
            "location": 72,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "bool",
                    "Dict[str,str]"
                ],
                "name": [
                    "str",
                    "bool",
                    "Dict[str,str]"
                ],
                "advisorScore": [
                    "str",
                    "bool",
                    "Dict[str,str]"
                ],
                "possible_rewards": [
                    "str",
                    "bool",
                    "Dict[str,str]"
                ]
            }
        },
        "PlayerEngine.chooseBuilding": {
            "name": "chooseBuilding",
            "location": 75,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "List[str]",
                    "Dict[str,int]",
                    "Set[str]",
                    "bool",
                    "None",
                    "Optional[str]",
                    "Optional[Dict[str,Any]]"
                ],
                "name": [
                    "str",
                    "List[str]",
                    "Dict[str,int]",
                    "Set[str]",
                    "bool",
                    "None",
                    "Optional[str]",
                    "Optional[Dict[str,Any]]"
                ],
                "use_kings_envoy": [
                    "str",
                    "List[str]",
                    "Dict[str,int]",
                    "Set[str]",
                    "bool",
                    "None",
                    "Optional[str]",
                    "Optional[Dict[str,Any]]"
                ]
            }
        },
        "CliEngine.wait": {
            "name": "wait",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CliEngine.start": {
            "name": "start",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "bool",
                    "str",
                    "Dict[str,dict[str,bool]]",
                    "kingsburg.State",
                    "Dict[str,Dict[str,bool]]"
                ]
            }
        },
        "CliEngine.log": {
            "name": "log",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "bytes",
                    "TextIO",
                    "Dict"
                ],
                "message": [
                    "str",
                    "None",
                    "bytes",
                    "TextIO",
                    "Dict"
                ]
            }
        },
        "CliEngine.setupPlayers": {
            "name": "setupPlayers",
            "location": 97,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomEngine.setupPlayers": {
            "name": "setupPlayers",
            "location": 119,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainingDataEngine.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "str",
                    "bool",
                    "Union[str,dict]",
                    "Dict"
                ]
            }
        },
        "TrainingDataEngine.pickFreeResource": {
            "name": "pickFreeResource",
            "location": 133,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "int",
                    "Dict[str,Any]",
                    "bool"
                ],
                "name": [
                    "str",
                    "int",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        },
        "TrainingDataEngine.chooseAdvisor": {
            "name": "chooseAdvisor",
            "location": 140,
            "return": [
                "int",
                "List[float]",
                "Callable",
                "Literal",
                "str",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "Tuple[str]",
                    "Callable",
                    "kingsburg.State"
                ],
                "name": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None",
                    "Optional[str]",
                    "Optional[bool]"
                ]
            }
        },
        "TrainingDataEngine.chooseReward": {
            "name": "chooseReward",
            "location": 147,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "int",
                    "Dict[str,Any]"
                ],
                "name": [
                    "str",
                    "int",
                    "Dict[str,Any]"
                ],
                "advisorScore": [
                    "str",
                    "int",
                    "Dict[str,Any]"
                ],
                "possible_rewards": [
                    "str",
                    "int",
                    "Dict[str,Any]"
                ]
            }
        },
        "TrainingDataEngine.chooseBuilding": {
            "name": "chooseBuilding",
            "location": 154,
            "return": [
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "use_kings_envoy": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "TrainingDataEngine.won": {
            "name": "won",
            "location": 161,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Optional[Tuple[int, ...]]",
                    "List[List[Any]]"
                ]
            }
        }
    },
    "governor-master/game.py": {
        "Game.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "engine": [
                    "str",
                    "Dict"
                ],
                "state": [
                    "str",
                    "Dict"
                ]
            }
        },
        "Game.play": {
            "name": "play",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.setup": {
            "name": "setup",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.tick": {
            "name": "tick",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.kingsFavor": {
            "name": "kingsFavor",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.productiveSeason": {
            "name": "productiveSeason",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "phase": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "governor-master/game_test.py": {
        "test_random_game": {
            "name": "test_random_game",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "governor-master/kingsburg.py": {
        "Reward.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "victory_points": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "resources": [
                    "None",
                    "Optional[float]",
                    "float",
                    "int",
                    "Optional[int]"
                ],
                "soldiers": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "plustwos": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "receive_any_resource": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "view_enemy": [
                    "bool",
                    "int",
                    "Optional[bool]"
                ]
            }
        },
        "Reward.__eq__": {
            "name": "__eq__",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str,Date]",
                    "str",
                    "Type",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        },
        "Reward.fromDict": {
            "name": "fromDict",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "d": [
                    "List[Dict]",
                    "List[dict]",
                    "Dict",
                    "Optional[Exception]",
                    "Sequence[str]",
                    "Exception",
                    "Type",
                    "None"
                ]
            }
        },
        "Advisor.__init__": {
            "name": "__init__",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "rewards": [
                    "str",
                    "bool",
                    "List"
                ]
            }
        },
        "Advisor.choices__rewards": {
            "name": "choices__rewards",
            "location": 239,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "player_resources": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProductiveSeasonRoll.__init__": {
            "name": "__init__",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "player_dice": [
                    "int",
                    "float",
                    "bool"
                ],
                "bonus_dice": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ProductiveSeasonRoll.totalValue": {
            "name": "totalValue",
            "location": 307,
            "return": [
                "int",
                "str",
                "Tuple[int,int]",
                "Tuple[str,int]",
                "T",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdvisorInfluence.__init__": {
            "name": "__init__",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "player_dice": [
                    "Callable",
                    "int",
                    "Dict[str,Any]",
                    "float",
                    "Optional[List[Any]]",
                    "List[Any]",
                    "None"
                ],
                "bonus_dice": [
                    "Callable",
                    "int",
                    "Dict[str,Any]",
                    "float",
                    "Optional[List[Any]]",
                    "List[Any]",
                    "None"
                ],
                "plus_two": [
                    "bool",
                    "int"
                ],
                "market_modifier": [
                    "int",
                    "List"
                ],
                "reward": [
                    "Tuple[str,int]",
                    "None",
                    "Optional[int]",
                    "Tuple[Union[str,int]]",
                    "Optional[List[int]]",
                    "int",
                    "List[int]"
                ]
            }
        },
        "AdvisorInfluence.__eq__": {
            "name": "__eq__",
            "location": 340,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str,Date]",
                    "str",
                    "Type",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        },
        "AdvisorInfluence.toDict": {
            "name": "toDict",
            "location": 343,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdvisorInfluence.fromDict": {
            "name": "fromDict",
            "location": 347,
            "return": [
                "AdvisorInfluence"
            ],
            "arguments": {
                "d": []
            }
        },
        "AdvisorInfluence.advisorScore": {
            "name": "advisorScore",
            "location": 355,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.__init__": {
            "name": "__init__",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.toDict": {
            "name": "toDict",
            "location": 391,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.fromDict": {
            "name": "fromDict",
            "location": 398,
            "return": [
                "State"
            ],
            "arguments": {
                "self": [
                    "_TState@@State@@"
                ],
                "d": [
                    "dict",
                    "Sequence[Mapping]"
                ]
            }
        },
        "State.copy": {
            "name": "copy",
            "location": 412,
            "return": [
                "State"
            ],
            "arguments": {
                "self": [
                    "_TState@@State@@"
                ]
            }
        },
        "State.message": {
            "name": "message",
            "location": 415,
            "return": [
                "State"
            ],
            "arguments": {
                "self": [
                    "_TState@@State@@"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "State.clearMessages": {
            "name": "clearMessages",
            "location": 420,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.clearAdvisorInfluences": {
            "name": "clearAdvisorInfluences",
            "location": 425,
            "return": [
                "State"
            ],
            "arguments": {
                "self": [
                    "_TState@@State@@"
                ]
            }
        },
        "State.playerList": {
            "name": "playerList",
            "location": 431,
            "return": [
                "List[PlayerState]"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.updatePlayer": {
            "name": "updatePlayer",
            "location": 434,
            "return": [
                "str",
                "List[str]",
                "bool",
                "Dict[str,Union[Any,bool,str]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict"
                ],
                "player": [
                    "str",
                    "Tuple[str]",
                    "Optional[str]"
                ]
            }
        },
        "State.setPlayers": {
            "name": "setPlayers",
            "location": 442,
            "return": [
                "State"
            ],
            "arguments": {
                "self": [
                    "_TState@@State@@"
                ],
                "playerNames": [
                    "List[str]",
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "State.nextYear": {
            "name": "nextYear",
            "location": 456,
            "return": [
                "State"
            ],
            "arguments": {
                "self": [
                    "_TState@@State@@"
                ]
            }
        },
        "State.nextPhase": {
            "name": "nextPhase",
            "location": 464,
            "return": [
                "bool",
                "List[str]",
                "allennlp.common.util.JsonDict",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.phaseComplete": {
            "name": "phaseComplete",
            "location": 474,
            "return": [
                "State"
            ],
            "arguments": {
                "self": [
                    "_TState@@State@@"
                ],
                "phase": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "State.kingsFavor": {
            "name": "kingsFavor",
            "location": 481,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.takeFreeResource": {
            "name": "takeFreeResource",
            "location": 515,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict"
                ],
                "resource": [
                    "str",
                    "Dict"
                ]
            }
        },
        "State.giveResources": {
            "name": "giveResources",
            "location": 521,
            "return": [
                "List[str]",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "resources": [
                    "str"
                ]
            }
        },
        "State.giveBuilding": {
            "name": "giveBuilding",
            "location": 528,
            "return": [
                "Callable",
                "List[str]",
                "dict",
                "int",
                "allennlp.common.util.JsonDict"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "int",
                    "None",
                    "bool",
                    "Union[str,Callable]",
                    "Callable"
                ],
                "building": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Dict[str,Any]"
                ],
                "use_kings_envoy": [
                    "bool",
                    "Optional[str]",
                    "List[str]",
                    "str",
                    "Tuple",
                    "Optional[List[Any]]",
                    "None",
                    "List[Any]"
                ]
            }
        },
        "State.giveKingsFavorBonusDie": {
            "name": "giveKingsFavorBonusDie",
            "location": 542,
            "return": [
                "List[str]",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "State.getNumPlayerDice": {
            "name": "getNumPlayerDice",
            "location": 549,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Callable",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "State.getNumBonusDice": {
            "name": "getNumBonusDice",
            "location": 556,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Callable",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "State.getWinners": {
            "name": "getWinners",
            "location": 563,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.productiveSeasonRolls": {
            "name": "productiveSeasonRolls",
            "location": 594,
            "return": [
                "Callable",
                "List[str]",
                "dict",
                "int",
                "allennlp.common.util.JsonDict"
            ],
            "arguments": {
                "self": [],
                "rolls": [
                    "bytes",
                    "bool",
                    "str",
                    "Type",
                    "Dict[str,Set[str]]"
                ]
            }
        },
        "State.influenceAdvisor": {
            "name": "influenceAdvisor",
            "location": 637,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "Callable[[Any], bool]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[tuple[Union[str,int]]]",
                    "List[Tuple[str,int]]",
                    "bool"
                ],
                "influence": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "State.giveReward": {
            "name": "giveReward",
            "location": 648,
            "return": [
                "Callable",
                "List[str]",
                "dict",
                "int",
                "allennlp.common.util.JsonDict"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Callable",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "advisor_score": [
                    "str",
                    "Callable",
                    "Optional[str]",
                    "None"
                ],
                "reward": [
                    "str",
                    "int",
                    "Dict[str,LabwareDefinition]",
                    "List[str]",
                    "Dict[str,D]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "State.choices_freeResource": {
            "name": "choices_freeResource",
            "location": 655,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "State.choices__advisorInfluence": {
            "name": "choices__advisorInfluence",
            "location": 662,
            "return": [
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        },
        "State.choices__buildings": {
            "name": "choices__buildings",
            "location": 673,
            "return": [
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        },
        "PlayerState.__init__": {
            "name": "__init__",
            "location": 688,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "PlayerState.toDict": {
            "name": "toDict",
            "location": 709,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerState.fromDict": {
            "name": "fromDict",
            "location": 715,
            "return": [
                "PlayerState"
            ],
            "arguments": {
                "self": [
                    "_TPlayerState@@PlayerState@@"
                ],
                "d": [
                    "bool",
                    "dict",
                    "Optional[Iterable[T]]"
                ]
            }
        },
        "PlayerState.copy": {
            "name": "copy",
            "location": 733,
            "return": [
                "PlayerState"
            ],
            "arguments": {
                "self": [
                    "_TPlayerState@@PlayerState@@"
                ]
            }
        },
        "PlayerState.message": {
            "name": "message",
            "location": 736,
            "return": [
                "PlayerState"
            ],
            "arguments": {
                "self": [
                    "_TPlayerState@@PlayerState@@"
                ],
                "message": [
                    "str",
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        },
        "PlayerState.clearMessages": {
            "name": "clearMessages",
            "location": 741,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerState.addVictoryPoints": {
            "name": "addVictoryPoints",
            "location": 746,
            "return": [
                "str",
                "bool",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "victory_points": [
                    "int"
                ]
            }
        },
        "PlayerState.addSoldiers": {
            "name": "addSoldiers",
            "location": 758,
            "return": [
                "str",
                "bool",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "soldiers": [
                    "int",
                    "str",
                    "Optional[Iterable[Any]]"
                ]
            }
        },
        "PlayerState.addResources": {
            "name": "addResources",
            "location": 770,
            "return": [
                "str",
                "bool",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "PlayerState.addBuilding": {
            "name": "addBuilding",
            "location": 784,
            "return": [
                "str",
                "bool",
                "List[str]",
                "allennlp.common.util.JsonDict",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "building": [
                    "int"
                ],
                "player_advisors": [
                    "int",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "PlayerState.addKingsFavorBonusDie": {
            "name": "addKingsFavorBonusDie",
            "location": 809,
            "return": [
                "str",
                "bool",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerState.influenceAdvisor": {
            "name": "influenceAdvisor",
            "location": 818,
            "return": [
                "Callable",
                "List[str]",
                "dict",
                "int",
                "allennlp.common.util.JsonDict"
            ],
            "arguments": {
                "self": [],
                "influence": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "PlayerState.spendDice": {
            "name": "spendDice",
            "location": 826,
            "return": [
                "Callable",
                "List[str]",
                "dict",
                "int",
                "allennlp.common.util.JsonDict"
            ],
            "arguments": {
                "self": [],
                "influence": [
                    "str",
                    "bytes",
                    "denite.util.UserContext"
                ]
            }
        },
        "PlayerState.applyReward": {
            "name": "applyReward",
            "location": 842,
            "return": [
                "Callable",
                "List[str]",
                "dict",
                "int",
                "allennlp.common.util.JsonDict"
            ],
            "arguments": {
                "self": [],
                "reward": [
                    "Dict[str,Any]"
                ]
            }
        },
        "PlayerState.getNumPlayerDice": {
            "name": "getNumPlayerDice",
            "location": 860,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "phase": [
                    "bool",
                    "str"
                ]
            }
        },
        "PlayerState.getNumBonusDice": {
            "name": "getNumBonusDice",
            "location": 870,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "phase": [
                    "bool",
                    "str"
                ]
            }
        },
        "PlayerState.getTotalResources": {
            "name": "getTotalResources",
            "location": 882,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerState.roll": {
            "name": "roll",
            "location": 885,
            "return": [
                "Callable",
                "List[str]",
                "dict",
                "int",
                "allennlp.common.util.JsonDict"
            ],
            "arguments": {
                "self": [],
                "roll": [
                    "bytes",
                    "Iterable[str]"
                ]
            }
        },
        "PlayerState.useKingsEnvoy": {
            "name": "useKingsEnvoy",
            "location": 899,
            "return": [
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerState.choices__advisorInfluence": {
            "name": "choices__advisorInfluence",
            "location": 906,
            "return": [
                "List[AdvisorInfluence]"
            ],
            "arguments": {
                "self": [],
                "available": [
                    "bool",
                    "str",
                    "None",
                    "Optional[bool]",
                    "Optional[int]"
                ]
            }
        },
        "PlayerState.choices__buildings": {
            "name": "choices__buildings",
            "location": 961,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "governor-master/kingsburg_test.py": {
        "test_choices_rewards": {
            "name": "test_choices_rewards",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_productive_season_roll_total": {
            "name": "test_productive_season_roll_total",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_advisor_influence_score": {
            "name": "test_advisor_influence_score",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_players": {
            "name": "test_set_players",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_next_year": {
            "name": "test_next_year",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_next_phase": {
            "name": "test_next_phase",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_take_free_resource": {
            "name": "test_take_free_resource",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_kings_favor__tie": {
            "name": "test_kings_favor__tie",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_kings_favor__fewest_buildings": {
            "name": "test_kings_favor__fewest_buildings",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_productive_season_rolls__no_tie": {
            "name": "test_productive_season_rolls__no_tie",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_productive_season_rolls__tie": {
            "name": "test_productive_season_rolls__tie",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_productive_season_rolls__tie2": {
            "name": "test_productive_season_rolls__tie2",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_productive_season_rolls__tie_bonus_die": {
            "name": "test_productive_season_rolls__tie_bonus_die",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_winners__vp": {
            "name": "test_get_winners__vp",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_winners__resources": {
            "name": "test_get_winners__resources",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_winners__buildings": {
            "name": "test_get_winners__buildings",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_winners__buildings_tie": {
            "name": "test_get_winners__buildings_tie",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_resources": {
            "name": "test_add_resources",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_building": {
            "name": "test_add_building",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_building__stable": {
            "name": "test_add_building__stable",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_bonus_die": {
            "name": "test_add_bonus_die",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_num_player_dice": {
            "name": "test_get_num_player_dice",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_num_bonus_dice": {
            "name": "test_get_num_bonus_dice",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_roll": {
            "name": "test_roll",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_choices_advisor_influence__simple": {
            "name": "test_choices_advisor_influence__simple",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_choices_advisor_influence__simple_with_taken": {
            "name": "test_choices_advisor_influence__simple_with_taken",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_choices_advisor_influence__simple2": {
            "name": "test_choices_advisor_influence__simple2",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_choices_advisor_influence__simple2_with_taken": {
            "name": "test_choices_advisor_influence__simple2_with_taken",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_choices_advisor_influence__withbonus": {
            "name": "test_choices_advisor_influence__withbonus",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_choices_advisor_influence__insanebonus": {
            "name": "test_choices_advisor_influence__insanebonus",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_choices_advisor_influence__withbonus_withplustwo": {
            "name": "test_choices_advisor_influence__withbonus_withplustwo",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_choices_advisor_influence__withbonus_withplustwo_withmarket": {
            "name": "test_choices_advisor_influence__withbonus_withplustwo_withmarket",
            "location": 499,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_choices_advisor_influence__withbonus_withplustwo_withmarket_excluded": {
            "name": "test_choices_advisor_influence__withbonus_withplustwo_withmarket_excluded",
            "location": 717,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_choices_advisor_influence__withbonus_withplustwo_withmarket_excluded_withkingsenvoy": {
            "name": "test_choices_advisor_influence__withbonus_withplustwo_withmarket_excluded_withkingsenvoy",
            "location": 797,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_spenddice": {
            "name": "test_spenddice",
            "location": 1016,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_applyreward": {
            "name": "test_applyreward",
            "location": 1037,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_choices_buildings__rich": {
            "name": "test_choices_buildings__rich",
            "location": 1070,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_choices_buildings__broke": {
            "name": "test_choices_buildings__broke",
            "location": 1087,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_choices_buildings__limited": {
            "name": "test_choices_buildings__limited",
            "location": 1093,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "governor-master/logger.py": {
        "Logger.log": {
            "name": "log",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "kingsburg.State",
                    "str",
                    "bool",
                    "Union[str,List[str],None]",
                    "List[str]",
                    "None"
                ],
                "message": [
                    "kingsburg.State",
                    "None",
                    "bool",
                    "Union[str,List[str],None]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Logger.start": {
            "name": "start",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Dict[str,str]",
                    "kingsburg.State",
                    "str",
                    "Dict"
                ]
            }
        },
        "Logger.over": {
            "name": "over",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ]
            }
        },
        "StdoutLogger.startLog": {
            "name": "startLog",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StdoutLogger.endLog": {
            "name": "endLog",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StdoutLogger.divider": {
            "name": "divider",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StdoutLogger.log": {
            "name": "log",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "kingsburg.State",
                    "str",
                    "bool",
                    "Union[str,List[str],None]",
                    "List[str]",
                    "None"
                ],
                "message": [
                    "str",
                    "List[str]",
                    "None"
                ]
            }
        },
        "StdoutLogger.start": {
            "name": "start",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "StdoutLogger.over": {
            "name": "over",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "List[int]"
                ]
            }
        }
    },
    "governor-master/player.py": {
        "Player.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "Dict"
                ]
            }
        },
        "Player.pickFreeResource": {
            "name": "pickFreeResource",
            "location": 19,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "numpy.ndarray"
                ]
            }
        },
        "Player.rollDice": {
            "name": "rollDice",
            "location": 22,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "numpy.ndarray"
                ]
            }
        },
        "Player.chooseAdvisor": {
            "name": "chooseAdvisor",
            "location": 25,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "numpy.ndarray"
                ]
            }
        },
        "Player.chooseReward": {
            "name": "chooseReward",
            "location": 28,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "numpy.ndarray"
                ],
                "advisorScore": [
                    "str",
                    "numpy.ndarray"
                ],
                "possible_rewards": [
                    "str",
                    "numpy.ndarray"
                ]
            }
        },
        "Player.chooseBuilding": {
            "name": "chooseBuilding",
            "location": 31,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "List[kingsburg.Building]",
                    "bool",
                    "kingsburg.State",
                    "int"
                ],
                "choices": [
                    "List[kingsburg.Building]",
                    "bool",
                    "kingsburg.State",
                    "int"
                ],
                "use_kings_envoy": [
                    "List[kingsburg.Building]",
                    "bool",
                    "kingsburg.State",
                    "int"
                ]
            }
        },
        "CliPlayer.pickFreeResource": {
            "name": "pickFreeResource",
            "location": 39,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "int",
                    "numpy.ndarray",
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        },
        "CliPlayer.rollDice": {
            "name": "rollDice",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "CliPlayer.chooseAdvisor": {
            "name": "chooseAdvisor",
            "location": 62,
            "return": [
                "kingsburg.AdvisorInfluence"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "numpy.ndarray"
                ]
            }
        },
        "CliPlayer.chooseReward": {
            "name": "chooseReward",
            "location": 66,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "numpy.ndarray"
                ],
                "advisorScore": [
                    "str",
                    "numpy.ndarray"
                ],
                "possible_rewards": [
                    "str",
                    "numpy.ndarray"
                ]
            }
        },
        "CliPlayer.chooseBuilding": {
            "name": "chooseBuilding",
            "location": 70,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "List[kingsburg.Building]",
                    "bool",
                    "kingsburg.State",
                    "int"
                ],
                "choices": [
                    "List[kingsburg.Building]",
                    "bool",
                    "kingsburg.State",
                    "int"
                ],
                "use_kings_envoy": [
                    "List[kingsburg.Building]",
                    "bool",
                    "kingsburg.State",
                    "int"
                ]
            }
        },
        "RandomPlayer.pickFreeResource": {
            "name": "pickFreeResource",
            "location": 80,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Dict[str,dict[str,Any]]",
                    "numpy.ndarray",
                    "str",
                    "List[str]",
                    "List[kingsburg.Building]",
                    "Dict[str,Dict[str,Any]]",
                    "bool"
                ]
            }
        },
        "RandomPlayer.rollDice": {
            "name": "rollDice",
            "location": 83,
            "return": [
                "kingsburg.ProductiveSeasonRoll"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Callable",
                    "Dict[str,Any]",
                    "Union[int,Type[Exception]]",
                    "Dict[str,numpy.ndarray]",
                    "int",
                    "Type"
                ]
            }
        },
        "RandomPlayer.chooseAdvisor": {
            "name": "chooseAdvisor",
            "location": 95,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "int"
                ]
            }
        },
        "RandomPlayer.chooseReward": {
            "name": "chooseReward",
            "location": 106,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "numpy.ndarray"
                ],
                "advisorScore": [
                    "str",
                    "numpy.ndarray"
                ],
                "possible_rewards": [
                    "List[kingsburg.Reward]",
                    "Iterator[int]",
                    "Sequence[Sequence[int]]",
                    "List[int]",
                    "str"
                ]
            }
        },
        "RandomPlayer.chooseBuilding": {
            "name": "chooseBuilding",
            "location": 111,
            "return": [
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "numpy.ndarray",
                    "float",
                    "None",
                    "Optional[float]",
                    "static_frame.core.util.PathSpecifier"
                ],
                "choices": [
                    "str",
                    "Dict",
                    "bool",
                    "List[int]",
                    "FrozenSet[int]",
                    "frozenset"
                ],
                "use_kings_envoy": [
                    "List[kingsburg.Building]",
                    "bool",
                    "kingsburg.State",
                    "int"
                ]
            }
        },
        "GovAlphaPlayer.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "filename": [
                    "str",
                    "Dict",
                    "Dict[str,Dict[str,Any]]",
                    "bool",
                    "Dict[str,dict[str,Any]]"
                ]
            }
        },
        "GovAlphaPlayer.pickFreeResource": {
            "name": "pickFreeResource",
            "location": 132,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "int",
                    "None",
                    "numpy.array",
                    "numpy.ndarray",
                    "Union[numpy.ndarray,None,cirq.type_workarounds.NotImplementedType]"
                ]
            }
        },
        "GovAlphaPlayer.chooseAdvisor": {
            "name": "chooseAdvisor",
            "location": 145,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "int",
                    "None",
                    "numpy.ndarray",
                    "numpy.array",
                    "Union[numpy.ndarray,None,cirq.type_workarounds.NotImplementedType]"
                ]
            }
        },
        "GovAlphaPlayer.chooseReward": {
            "name": "chooseReward",
            "location": 158,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Tuple[Union[int,...]]",
                    "Optional[Tuple[int,...]]",
                    "None",
                    "numpy.ndarray",
                    "T"
                ],
                "advisorScore": [
                    "Tuple[Union[int,...]]",
                    "Optional[Tuple[int,...]]",
                    "None",
                    "numpy.ndarray",
                    "T"
                ],
                "possible_rewards": [
                    "str",
                    "numpy.ndarray"
                ]
            }
        },
        "GovAlphaPlayer.chooseBuilding": {
            "name": "chooseBuilding",
            "location": 170,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Sequence[T]",
                    "List[str]",
                    "List[List[str]]",
                    "Sequence[Sequence[str]]",
                    "List[list[str]]",
                    "Sequence[Tuple[str,int]]",
                    "Sequence[tuple[Union[str,int]]]"
                ],
                "choices": [
                    "List[kingsburg.Building]",
                    "bool",
                    "kingsburg.State",
                    "int"
                ],
                "use_kings_envoy": [
                    "Sequence[T]",
                    "List[str]",
                    "List[List[str]]",
                    "Sequence[Sequence[str]]",
                    "List[list[str]]",
                    "Sequence[Tuple[str,int]]",
                    "Sequence[tuple[Union[str,int]]]"
                ]
            }
        },
        "GovAlpha2Player.__init__": {
            "name": "__init__",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "filename": [
                    "str",
                    "bool",
                    "Dict",
                    "Optional[Any]",
                    "Dict[str,Dict[str,Any]]"
                ]
            }
        },
        "GovAlpha2Player.chooseAdvisor": {
            "name": "chooseAdvisor",
            "location": 195,
            "return": [
                "None",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Sequence[str]",
                    "str"
                ]
            }
        }
    },
    "governor-master/training.py": {
        "state_to_input": {
            "name": "state_to_input",
            "location": 5,
            "return": [
                "List[int]",
                "str",
                "bool",
                "Dict"
            ],
            "arguments": {
                "s": [
                    "kingsburg.State",
                    "str",
                    "int",
                    "Dict[str, float]",
                    "bool"
                ]
            }
        },
        "player_to_input": {
            "name": "player_to_input",
            "location": 38,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "p": [
                    "List",
                    "kingsburg.PlayerState",
                    "List[str]",
                    "str",
                    "List[int]"
                ]
            }
        },
        "advisor_choice_to_input": {
            "name": "advisor_choice_to_input",
            "location": 101,
            "return": [
                "List[int]",
                "float",
                "int",
                "Union[bool,None]",
                "str"
            ],
            "arguments": {
                "s": [
                    "kingsburg.State",
                    "str",
                    "List[str]",
                    "int"
                ],
                "influence": [
                    "str",
                    "int",
                    "bytes",
                    "list"
                ]
            }
        },
        "dice_to_input": {
            "name": "dice_to_input",
            "location": 184,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "die": [
                    "int",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        }
    },
    "governor-master/util.py": {
        "lowest": {
            "name": "lowest",
            "location": 5,
            "return": [
                "None",
                "Optional[str]",
                "Type",
                "Optional[List[Any]]",
                "List"
            ],
            "arguments": {
                "members": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "highest": {
            "name": "highest",
            "location": 33,
            "return": [
                "None",
                "Optional[str]",
                "Type",
                "Optional[List[Any]]",
                "List"
            ],
            "arguments": {
                "members": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "unique_combinations": {
            "name": "unique_combinations",
            "location": 61,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "nums": [
                    "str",
                    "dict",
                    "Optional[int]"
                ],
                "max_len": [
                    "int",
                    "None",
                    "float",
                    "str",
                    "Optional[int]",
                    "Optional[Tuple[int,...]]",
                    "Tuple[Union[int,...]]"
                ]
            }
        },
        "unique_list_pairs": {
            "name": "unique_list_pairs",
            "location": 76,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "lists1": [
                    "List[dict[str,Any]]",
                    "bool",
                    "List[Dict[str,Any]]"
                ],
                "lists2": [
                    "List[dict[str,Any]]",
                    "bool",
                    "List[Dict[str,Any]]"
                ]
            }
        },
        "tuplize": {
            "name": "tuplize",
            "location": 89,
            "return": [
                "tuple"
            ],
            "arguments": {
                "list": [
                    "List[T]",
                    "Callable",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]"
                ]
            }
        },
        "list_minus": {
            "name": "list_minus",
            "location": 98,
            "return": [
                "str",
                "List[Union[Text,Any,int]]",
                "Dict[str,Dict[str,int]]",
                "Tuple[Union[Any,Any]]",
                "bool",
                "Tuple[Union[int,str]]",
                "Dict[str,Any]",
                "int"
            ],
            "arguments": {
                "list1": [
                    "List[str]",
                    "List[tuple[Union[Any,Any]]]",
                    "List[Tuple[Any,Any]]",
                    "List[list[str]]",
                    "List[List[str]]",
                    "List[tuple[Union[int,str]]]",
                    "List[Tuple[int,str]]",
                    "Sequence[str]"
                ],
                "list2": [
                    "List[int]",
                    "list",
                    "List[str]"
                ]
            }
        },
        "pick_best": {
            "name": "pick_best",
            "location": 119,
            "return": [
                "bool",
                "None",
                "Text"
            ],
            "arguments": {
                "input": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "governor-master/util_test.py": {
        "test_lowest": {
            "name": "test_lowest",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_highest": {
            "name": "test_highest",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unique_combinations": {
            "name": "test_unique_combinations",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unique_combinations__allones": {
            "name": "test_unique_combinations__allones",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unique_list_pairs__withduplicate": {
            "name": "test_unique_list_pairs__withduplicate",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unique_list_pairs__onebonus": {
            "name": "test_unique_list_pairs__onebonus",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unique_list_pairs__twobonus": {
            "name": "test_unique_list_pairs__twobonus",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unique_list_pairs__onebonusandplustwo": {
            "name": "test_unique_list_pairs__onebonusandplustwo",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unique_list_pairs__onebonusandplustwoandmarket": {
            "name": "test_unique_list_pairs__onebonusandplustwoandmarket",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_list_minus": {
            "name": "test_list_minus",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pick_best": {
            "name": "test_pick_best",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "governor-master/bin/generate_random_games.py": {
        "mkdir_p": {
            "name": "mkdir_p",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "ident": {
            "name": "ident",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "governor-master/bin/play.py": {},
    "governor-master/bin/train.py": {}
}
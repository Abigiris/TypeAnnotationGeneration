{
    "graph-tests-master/src/calculations.py": {
        "bundle_size": {
            "name": "bundle_size",
            "location": 4,
            "return": [
                "float"
            ],
            "arguments": {
                "count": [
                    "int"
                ],
                "size": [
                    "float"
                ],
                "margin": [
                    "float"
                ]
            }
        }
    },
    "graph-tests-master/src/config.py": {},
    "graph-tests-master/src/flow.py": {
        "FlowAlgorithm.length": {
            "name": "length",
            "location": 12,
            "return": [
                "BoundFlowAlgorithm"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "int"
                ]
            }
        },
        "BoundFlowAlgorithm.__call__": {
            "name": "__call__",
            "location": 21,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ]
            }
        }
    },
    "graph-tests-master/src/grid.py": {
        "row_count": {
            "name": "row_count",
            "location": 10,
            "return": [
                "List[int]",
                "float",
                "tuple",
                "int",
                "str"
            ],
            "arguments": {
                "width": [
                    "int",
                    "float",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ],
                "margin_function": [
                    "int",
                    "float",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ],
                "radius_scale": [
                    "int",
                    "float",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ],
                "node_count": [
                    "int",
                    "float",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "node_count": {
            "name": "node_count",
            "location": 21,
            "return": [
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "width": [
                    "int",
                    "Optional[float]",
                    "float",
                    "List[str]",
                    "None",
                    "list[str]"
                ],
                "margin_function": [
                    "int",
                    "Optional[float]",
                    "float",
                    "List[str]",
                    "None",
                    "list[str]"
                ],
                "radius_scale": [
                    "int",
                    "Optional[float]",
                    "List[str]"
                ],
                "row_count": [
                    "int",
                    "Optional[float]",
                    "float",
                    "List[str]",
                    "None",
                    "list[str]"
                ]
            }
        },
        "Grid.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "int"
                ],
                "node_config": [
                    "int",
                    "str",
                    "float"
                ],
                "node_count": [
                    "int"
                ]
            }
        },
        "Grid.coordinates": {
            "name": "coordinates",
            "location": 65,
            "return": [
                "bool",
                "str",
                "dict",
                "Tuple[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        }
    },
    "graph-tests-master/src/mathtools.py": {
        "plus_minus": {
            "name": "plus_minus",
            "location": 1,
            "return": [
                "int"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "zero_two": {
            "name": "zero_two",
            "location": 15,
            "return": [
                "int"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "slow_count": {
            "name": "slow_count",
            "location": 29,
            "return": [
                "int"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "graph-tests-master/src/model.py": {},
    "graph-tests-master/src/node.py": {},
    "graph-tests-master/src/non_content_area.py": {
        "NonContentArea.create": {
            "name": "create",
            "location": 16,
            "return": [
                "N"
            ],
            "arguments": {
                "cls": [
                    "Type[N]"
                ]
            }
        }
    },
    "graph-tests-master/src/random.py": {
        "to_d3dict": {
            "name": "to_d3dict",
            "location": 24,
            "return": [
                "Dict[(str, List[Dict[(str, Any)]])]"
            ],
            "arguments": {
                "G": [
                    "FrozenSet[int]",
                    "frozenset",
                    "Optional[Iterable[T]]",
                    "None"
                ]
            }
        },
        "ego_json": {
            "name": "ego_json",
            "location": 31,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float",
                    "bool"
                ],
                "m": [
                    "int",
                    "float",
                    "bool"
                ],
                "radius": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Ego.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "list",
                    "list[]"
                ],
                "m": [
                    "int",
                    "List[int]",
                    "list[int]",
                    "Optional[int]",
                    "None",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ],
                "radius": [
                    "float",
                    "int",
                    "str",
                    "Union[int, float]"
                ]
            }
        },
        "Ego._ipython_display_": {
            "name": "_ipython_display_",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "graph-tests-master/src/relations.py": {
        "chart_width": {
            "name": "chart_width",
            "location": 4,
            "return": [
                "int",
                "str",
                "dict",
                "Mapping[Any, Any]"
            ],
            "arguments": {
                "main_area_width": [
                    "int"
                ],
                "side_area_width": [
                    "int"
                ]
            }
        },
        "chart_height": {
            "name": "chart_height",
            "location": 8,
            "return": [
                "_T0"
            ],
            "arguments": {
                "main_area_height": [
                    "_T0"
                ]
            }
        },
        "main_area_height": {
            "name": "main_area_height",
            "location": 12,
            "return": [
                "bool",
                "int",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "row_count": [
                    "int",
                    "Optional[int]",
                    "None",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "row_height": [
                    "int",
                    "Optional[int]",
                    "None",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "row_height": {
            "name": "row_height",
            "location": 16,
            "return": [
                "bool",
                "list[typing.Union[\"TaskNode\",\"TaskNode\"]]",
                "Dict[str, Dict[str, int]]",
                "float",
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "row_upper_area_height": [
                    "bool",
                    "list[\"TaskNode\"]",
                    "int",
                    "List[\"TaskNode\"]"
                ],
                "row_main_area_height": [
                    "bool",
                    "list[\"TaskNode\"]",
                    "int",
                    "List[\"TaskNode\"]"
                ]
            }
        },
        "row_main_area_height": {
            "name": "row_main_area_height",
            "location": 20,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "radius": [
                    "str",
                    "bool",
                    "int",
                    "dict",
                    "Optional[int]"
                ],
                "row_main_area_vertical_padding": [
                    "str",
                    "bool",
                    "int",
                    "dict",
                    "Optional[int]"
                ]
            }
        }
    },
    "graph-tests-master/src/row.py": {
        "column_count": {
            "name": "column_count",
            "location": 89,
            "return": [
                "bool",
                "int",
                "float"
            ],
            "arguments": {
                "width": [
                    "int",
                    "float"
                ],
                "node_margin": [
                    "int",
                    "float"
                ],
                "node_radius": [
                    "int",
                    "float"
                ]
            }
        },
        "fit_width": {
            "name": "fit_width",
            "location": 93,
            "return": [
                "str",
                "int",
                "tuple[typing.Union[int,int,int,int]]"
            ],
            "arguments": {
                "column_count": [
                    "int",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "node_margin": [
                    "int",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "node_radius": [
                    "int",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "horizontal_padding": {
            "name": "horizontal_padding",
            "location": 97,
            "return": [
                "float",
                "Optional[bool]",
                "int",
                "Optional[List[Any]]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "width": [
                    "int",
                    "list[str]",
                    "bool",
                    "List[str]"
                ],
                "node_margin": [
                    "int",
                    "list[str]",
                    "bool",
                    "List[str]"
                ],
                "node_radius": [
                    "int",
                    "list[str]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "Row.create": {
            "name": "create",
            "location": 24,
            "return": [
                "Row"
            ],
            "arguments": {
                "cls": [
                    "Type[_TRow]"
                ],
                "width": [
                    "float"
                ],
                "node_radius": [
                    "float"
                ],
                "node_margin": [
                    "float"
                ],
                "flow": [
                    "str"
                ]
            }
        },
        "Row.cx": {
            "name": "cx",
            "location": 41,
            "return": [
                "str",
                "Tuple[str, str]",
                "List[Tuple[str, str]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "float"
                ]
            }
        },
        "Row._ipython_display_": {
            "name": "_ipython_display_",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "graph-tests-master/src/scale.py": {
        "_": {
            "name": "_",
            "location": 50,
            "return": [
                "float"
            ],
            "arguments": {
                "domain": [
                    "Sequence[float]"
                ],
                "range": [
                    "Sequence[float]"
                ],
                "x": [
                    "float"
                ]
            }
        },
        "BoundScale.__call__": {
            "name": "__call__",
            "location": 16,
            "return": [
                "B"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "A"
                ]
            }
        },
        "UnboundScale.domain": {
            "name": "domain",
            "location": 25,
            "return": [
                "DomainBoundScale[(A, B)]"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "Sequence[A]"
                ]
            }
        },
        "UnboundScale.range": {
            "name": "range",
            "location": 28,
            "return": [
                "RangeBoundScale[(A, B)]"
            ],
            "arguments": {
                "self": [],
                "range": [
                    "Sequence[A]"
                ]
            }
        },
        "DomainBoundScale.range": {
            "name": "range",
            "location": 37,
            "return": [
                "BoundScale[(A, B)]"
            ],
            "arguments": {
                "self": [],
                "range": [
                    "Sequence[B]"
                ]
            }
        },
        "RangeBoundScale.domain": {
            "name": "domain",
            "location": 46,
            "return": [
                "BoundScale[(A, B)]"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "Sequence[A]"
                ]
            }
        }
    },
    "graph-tests-master/src/util.py": {},
    "graph-tests-master/src/vis.py": {
        "Element.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "Optional[Exception]",
                    "Exception",
                    "Optional[Callable]",
                    "None",
                    "Optional[int]",
                    "typing.Callable[, ]",
                    "Optional[Dict[str, str]]",
                    "int",
                    "Optional[str]",
                    "dict[str, str]"
                ]
            }
        },
        "Element.__str__": {
            "name": "__str__",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element._repr_html_": {
            "name": "_repr_html_",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "graph-tests-master/src/__init__.py": {}
}
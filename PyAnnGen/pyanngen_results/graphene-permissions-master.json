{
    "graphene-permissions-master/setup.py": {},
    "graphene-permissions-master/graphene_permissions/mixins.py": {
        "AuthNode.get_node": {
            "name": "get_node",
            "location": 21,
            "return": [
                "bool",
                "int",
                "Optional[str]",
                "Dict",
                "List[dict[str,Any]]",
                "Optional[Dict]",
                "Dict[str,str]",
                "Optional[Literal[only_clustered,include_clustered]]",
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "Callable"
                ],
                "info": [
                    "str",
                    "graphql.ResolveInfo"
                ],
                "id": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "AuthMutation.has_permission": {
            "name": "has_permission",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Dict",
                    "graphql.ResolveInfo"
                ],
                "root": [
                    "Dict",
                    "graphql.ResolveInfo"
                ],
                "info": [
                    "Dict",
                    "graphql.ResolveInfo"
                ],
                "input": [
                    "Dict",
                    "graphql.ResolveInfo"
                ]
            }
        },
        "AuthFilterPre270.has_permission": {
            "name": "has_permission",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Dict",
                    "graphql.ResolveInfo",
                    "Exception",
                    "Type"
                ],
                "info": [
                    "Dict",
                    "graphql.ResolveInfo",
                    "Exception",
                    "Type"
                ]
            }
        },
        "AuthFilterPre270.connection_resolver": {
            "name": "connection_resolver",
            "location": 63,
            "return": [
                "Optional[int]",
                "str",
                "esm.models.service_type.ServiceType",
                "float"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Union[str, int]",
                    "dict",
                    "bool"
                ],
                "resolver": [
                    "str",
                    "bool",
                    "Callable"
                ],
                "connection": [
                    "str",
                    "bool",
                    "Callable"
                ],
                "default_manager": [
                    "str",
                    "bool",
                    "Callable"
                ],
                "max_limit": [
                    "str",
                    "bool",
                    "Callable"
                ],
                "enforce_first_or_last": [
                    "str",
                    "bool",
                    "Callable"
                ],
                "filterset_class": [
                    "str",
                    "DefaultDict",
                    "defaultdict",
                    "salon.models.Stylist"
                ],
                "filtering_args": [
                    "bool",
                    "Dict[str,float]",
                    "Dict"
                ],
                "root": [
                    "str",
                    "bool",
                    "Callable",
                    "Optional[str]",
                    "None"
                ],
                "info": [
                    "str",
                    "Dict",
                    "int",
                    "Union[str,int]",
                    "bool"
                ]
            }
        },
        "AuthFilterPost270.has_permission": {
            "name": "has_permission",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Dict",
                    "graphql.ResolveInfo",
                    "Exception",
                    "Type"
                ],
                "info": [
                    "Dict",
                    "graphql.ResolveInfo",
                    "Exception",
                    "Type"
                ]
            }
        },
        "AuthFilterPost270.connection_resolver": {
            "name": "connection_resolver",
            "location": 114,
            "return": [
                "str",
                "Optional[int]",
                "esm.models.service_type.ServiceType",
                "float",
                "int"
            ],
            "arguments": {
                "cls": [
                    "Callable",
                    "bool",
                    "str"
                ],
                "resolver": [
                    "str"
                ],
                "connection": [
                    "str",
                    "Dict",
                    "List[alerta.models.enums.Scope]",
                    "Union[str,int]",
                    "int"
                ],
                "default_manager": [
                    "str"
                ],
                "queryset_resolver": [
                    "str"
                ],
                "max_limit": [
                    "str"
                ],
                "enforce_first_or_last": [
                    "str"
                ],
                "root": [
                    "str"
                ],
                "info": [
                    "str",
                    "Dict"
                ]
            }
        }
    },
    "graphene-permissions-master/graphene_permissions/permissions.py": {
        "BaseOperatorPerm.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "op1": [
                    "bool",
                    "List[float]",
                    "str",
                    "None",
                    "Optional[str]",
                    "int",
                    "Optional[List[Any]]"
                ],
                "op2": [
                    "bool",
                    "List[float]",
                    "str",
                    "None",
                    "Optional[str]",
                    "int",
                    "Optional[List[Any]]"
                ]
            }
        },
        "BaseOperatorPerm.__call__": {
            "name": "__call__",
            "location": 12,
            "return": [
                "BaseOperatorPerm"
            ],
            "arguments": {
                "self": [
                    "_TBaseOperatorPerm@@BaseOperatorPerm@@"
                ]
            }
        },
        "BaseOperatorPerm.has_permission": {
            "name": "has_permission",
            "location": 15,
            "return": [
                "Mapping[str, Any]",
                "type",
                "Type[T]"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "Mapping",
                    "graphql.ResolveInfo",
                    "str",
                    "Mapping[str,Any]",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "BaseOperatorPerm.has_node_permission": {
            "name": "has_node_permission",
            "location": 20,
            "return": [
                "Optional[Dict[str, str]]",
                "Dict[str, type]"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "str",
                    "Optional[str]",
                    "Sequence[Optional[str]]",
                    "None",
                    "Union[int,str]",
                    "int"
                ],
                "id": [
                    "str",
                    "Optional[str]",
                    "Sequence[Optional[str]]",
                    "None",
                    "Union[int,str]",
                    "int"
                ]
            }
        },
        "BaseOperatorPerm.has_mutation_permission": {
            "name": "has_mutation_permission",
            "location": 26,
            "return": [
                "Type",
                "Callable[[KT], VT]"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "Dict"
                ],
                "info": [
                    "Dict"
                ],
                "input": [
                    "Dict"
                ]
            }
        },
        "BaseOperatorPerm.has_filter_permission": {
            "name": "has_filter_permission",
            "location": 34,
            "return": [
                "bool",
                "Tuple[str]",
                "int",
                "Type",
                "type"
            ],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "BaseSingleOperatorPerm.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "op1": [
                    "Callable",
                    "str",
                    "bool",
                    "Sequence",
                    "Callable[[str],bool]"
                ]
            }
        },
        "BaseSingleOperatorPerm.has_permission": {
            "name": "has_permission",
            "location": 44,
            "return": [
                "Mapping[str, Any]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "BaseSingleOperatorPerm.has_node_permission": {
            "name": "has_node_permission",
            "location": 47,
            "return": [
                "Optional[Dict[str, str]]",
                "Dict[str, type]"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "str"
                ],
                "id": [
                    "str"
                ]
            }
        },
        "BaseSingleOperatorPerm.has_mutation_permission": {
            "name": "has_mutation_permission",
            "location": 50,
            "return": [
                "Type",
                "Callable[[KT], VT]"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "Dict",
                    "Sequence[str]",
                    "graphql.ResolveInfo"
                ],
                "info": [
                    "Dict",
                    "Sequence[str]",
                    "graphql.ResolveInfo"
                ],
                "input": [
                    "Dict",
                    "Sequence[str]",
                    "graphql.ResolveInfo"
                ]
            }
        },
        "BaseSingleOperatorPerm.has_filter_permission": {
            "name": "has_filter_permission",
            "location": 55,
            "return": [
                "bool",
                "Tuple[str]",
                "int",
                "Type",
                "type"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "Dict",
                    "Dict[str,Any]",
                    "Type",
                    "Optional[List[Any]]",
                    "List[Any]",
                    "None"
                ]
            }
        },
        "AND.__repr__": {
            "name": "__repr__",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OR.__repr__": {
            "name": "__repr__",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NOT.__repr__": {
            "name": "__repr__",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePermissionMetaclass.__and__": {
            "name": "__and__",
            "location": 81,
            "return": [
                "AND"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Tuple[Union[int,int]]",
                    "T",
                    "Tuple[int,int]"
                ]
            }
        },
        "BasePermissionMetaclass.__or__": {
            "name": "__or__",
            "location": 84,
            "return": [
                "OR"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Tuple[Union[int,int]]",
                    "T",
                    "Tuple[int,int]"
                ]
            }
        },
        "BasePermissionMetaclass.__rand__": {
            "name": "__rand__",
            "location": 87,
            "return": [
                "AND"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Tuple[Union[int,int]]",
                    "T",
                    "Tuple[int,int]"
                ]
            }
        },
        "BasePermissionMetaclass.__ror__": {
            "name": "__ror__",
            "location": 90,
            "return": [
                "OR"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Tuple[Union[int,int]]",
                    "T",
                    "Tuple[int,int]"
                ]
            }
        },
        "BasePermissionMetaclass.__invert__": {
            "name": "__invert__",
            "location": 93,
            "return": [
                "NOT"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePermission.has_permission": {
            "name": "has_permission",
            "location": 104,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "Dict",
                    "Optional[Dict[str,Any]]",
                    "Callable",
                    "Dict[str,Any]",
                    "None"
                ],
                "info": [
                    "List[str]",
                    "Dict",
                    "Optional[Dict[str,Any]]",
                    "Callable",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "BasePermission.has_node_permission": {
            "name": "has_node_permission",
            "location": 111,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "Iterable[int]",
                    "bool"
                ],
                "info": [
                    "int",
                    "str",
                    "Iterable[int]",
                    "bool"
                ],
                "id": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Iterable[str]",
                    "Dict[str,object]",
                    "Optional[int]"
                ]
            }
        },
        "BasePermission.has_mutation_permission": {
            "name": "has_mutation_permission",
            "location": 115,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str"
                ],
                "root": [
                    "Dict",
                    "graphene.ResolveInfo",
                    "Dict[str,Any]",
                    "graphql.ResolveInfo",
                    "None",
                    "Optional[Dict[str,Any]]"
                ],
                "info": [
                    "bool",
                    "str"
                ],
                "input": [
                    "Dict",
                    "graphene.ResolveInfo",
                    "Dict[str,Any]",
                    "graphql.ResolveInfo",
                    "None",
                    "Optional[Dict[str,Any]]"
                ]
            }
        },
        "BasePermission.has_filter_permission": {
            "name": "has_filter_permission",
            "location": 119,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "type",
                    "str",
                    "Callable"
                ],
                "info": [
                    "bool",
                    "Type",
                    "str",
                    "Callable"
                ]
            }
        },
        "AllowAny.has_permission": {
            "name": "has_permission",
            "location": 130,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "Dict",
                    "Optional[Dict[str,Any]]",
                    "Callable",
                    "Dict[str,Any]",
                    "None"
                ],
                "info": [
                    "List[str]",
                    "Dict",
                    "Optional[Dict[str,Any]]",
                    "Callable",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "AllowAuthenticated.has_permission": {
            "name": "has_permission",
            "location": 140,
            "return": [
                "str",
                "Type",
                "Tuple[str]"
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "Dict",
                    "Optional[Dict[str,Any]]",
                    "Callable",
                    "Dict[str,Any]",
                    "None"
                ],
                "info": [
                    "Type",
                    "Dict"
                ]
            }
        },
        "AllowStaff.has_permission": {
            "name": "has_permission",
            "location": 150,
            "return": [
                "str",
                "Type",
                "Tuple[str]"
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "Dict",
                    "Optional[Dict[str,Any]]",
                    "Callable",
                    "Dict[str,Any]",
                    "None"
                ],
                "info": [
                    "Type",
                    "Dict"
                ]
            }
        },
        "AllowSuperuser.has_permission": {
            "name": "has_permission",
            "location": 160,
            "return": [
                "str",
                "Type",
                "Tuple[str]"
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "Dict",
                    "Optional[Dict[str,Any]]",
                    "Callable",
                    "Dict[str,Any]",
                    "None"
                ],
                "info": [
                    "Type",
                    "Dict"
                ]
            }
        }
    },
    "graphene-permissions-master/graphene_permissions/__init__.py": {},
    "graphene-permissions-master/tests/conftest.py": {
        "client": {
            "name": "client",
            "location": 6,
            "return": [
                "django.tesClient",
                "Client"
            ],
            "arguments": {}
        },
        "test_kwargs": {
            "name": "test_kwargs",
            "location": 11,
            "return": [
                "bytes",
                "Dict[Text,Text]"
            ],
            "arguments": {}
        }
    },
    "graphene-permissions-master/tests/test_fake.py": {
        "test_fake": {
            "name": "test_fake",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "graphene-permissions-master/tests/test_mutation.py": {
        "test_mutation_superuser_required_permission": {
            "name": "test_mutation_superuser_required_permission",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "Optional[float]"
                ],
                "test_kwargs": [
                    "str"
                ],
                "login": [
                    "str",
                    "Tuple[Union[str,str]]",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "Tuple[str,str]"
                ],
                "password": [
                    "str",
                    "Tuple[Union[str,str]]",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "Tuple[str,str]"
                ]
            }
        },
        "test_mutation_staff_required_permission": {
            "name": "test_mutation_staff_required_permission",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "Optional[float]"
                ],
                "test_kwargs": [
                    "str"
                ],
                "login": [
                    "str",
                    "Tuple[Union[str,str]]",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "Tuple[str,str]"
                ],
                "password": [
                    "str",
                    "Tuple[Union[str,str]]",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "Tuple[str,str]"
                ]
            }
        },
        "test_mutation_allow_authenticated_permission": {
            "name": "test_mutation_allow_authenticated_permission",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "Optional[float]"
                ],
                "test_kwargs": [
                    "str"
                ],
                "login": [
                    "str",
                    "Tuple[Union[str,str]]",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "Tuple[str,str]"
                ],
                "password": [
                    "str",
                    "Tuple[Union[str,str]]",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "Tuple[str,str]"
                ]
            }
        },
        "test_mutation_allow_any_permission": {
            "name": "test_mutation_allow_any_permission",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "Optional[float]"
                ],
                "test_kwargs": [
                    "str"
                ],
                "login": [
                    "str",
                    "Tuple[Union[str,str]]",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "Tuple[str,str]"
                ],
                "password": [
                    "str",
                    "Tuple[Union[str,str]]",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "Tuple[str,str]"
                ]
            }
        }
    },
    "graphene-permissions-master/tests/test_query.py": {
        "test_node_superuser_required_permission": {
            "name": "test_node_superuser_required_permission",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "dict"
                ],
                "test_kwargs": [
                    "str"
                ],
                "login": [
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "password": [
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_filter_superuser_required_permission": {
            "name": "test_filter_superuser_required_permission",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "List[Dict[str, Any]]"
                ],
                "test_kwargs": [
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ],
                "login": [
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "password": [
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_node_staff_required_permission": {
            "name": "test_node_staff_required_permission",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "dict"
                ],
                "test_kwargs": [
                    "str"
                ],
                "login": [
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "password": [
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_filter_staff_required_permission": {
            "name": "test_filter_staff_required_permission",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "List[Dict[str, Any]]"
                ],
                "test_kwargs": [
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ],
                "login": [
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "password": [
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_node_allow_authenticated_permission": {
            "name": "test_node_allow_authenticated_permission",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "test_kwargs": [
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "raiden.utils.Address",
                    "None"
                ],
                "login": [
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "password": [
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_filter_allow_authenticated_permission": {
            "name": "test_filter_allow_authenticated_permission",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "test_kwargs": [
                    "str"
                ],
                "login": [
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "password": [
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_node_allow_any_permission": {
            "name": "test_node_allow_any_permission",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "test_kwargs": [
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "raiden.utils.Address",
                    "None"
                ],
                "login": [
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "password": [
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_filter_allow_any_permission": {
            "name": "test_filter_allow_any_permission",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "test_kwargs": [
                    "str"
                ],
                "login": [
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "password": [
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_node_non_existent_object": {
            "name": "test_node_non_existent_object",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "test_kwargs": [
                    "str"
                ],
                "login": [
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "password": [
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_permission_operator_composing": {
            "name": "test_permission_operator_composing",
            "location": 433,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "Dict[str, Any]"
                ],
                "test_kwargs": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "query_name": [
                    "str"
                ],
                "id": [
                    "str"
                ],
                "expected": [
                    "str",
                    "bool",
                    "int",
                    "Union[str,int]"
                ]
            }
        }
    },
    "graphene-permissions-master/tests/utils.py": {
        "load_fixtures": {
            "name": "load_fixtures",
            "location": 7,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "graphene-permissions-master/tests/__init__.py": {},
    "graphene-permissions-master/tests/test_app/manage.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "graphene-permissions-master/tests/test_app/settings.py": {},
    "graphene-permissions-master/tests/test_app/urls.py": {},
    "graphene-permissions-master/tests/test_app/__init__.py": {},
    "graphene-permissions-master/tests/test_app/demo_app/apps.py": {},
    "graphene-permissions-master/tests/test_app/demo_app/models.py": {},
    "graphene-permissions-master/tests/test_app/demo_app/schema.py": {
        "SuperUserAddPet.mutate_and_get_payload": {
            "name": "mutate_and_get_payload",
            "location": 136,
            "return": [
                "SuperUserAddPet"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSuperUserAddPet]"
                ],
                "root": [
                    "Dict",
                    "int",
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str,str]]",
                    "None",
                    "Dict[str,str]"
                ],
                "info": [
                    "Dict",
                    "int",
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str,str]]",
                    "None",
                    "Dict[str,str]"
                ]
            }
        },
        "StaffAddPet.mutate_and_get_payload": {
            "name": "mutate_and_get_payload",
            "location": 158,
            "return": [
                "StaffAddPet"
            ],
            "arguments": {
                "cls": [
                    "Type[_TStaffAddPet]"
                ],
                "root": [
                    "Dict",
                    "int",
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str,str]]",
                    "None",
                    "Dict[str,str]"
                ],
                "info": [
                    "Dict",
                    "int",
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str,str]]",
                    "None",
                    "Dict[str,str]"
                ]
            }
        },
        "AuthenticatedAddPet.mutate_and_get_payload": {
            "name": "mutate_and_get_payload",
            "location": 180,
            "return": [
                "AuthenticatedAddPet"
            ],
            "arguments": {
                "cls": [
                    "Type[_TAuthenticatedAddPet]"
                ],
                "root": [
                    "Dict",
                    "int",
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str,str]]",
                    "None",
                    "Dict[str,str]"
                ],
                "info": [
                    "Dict",
                    "int",
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str,str]]",
                    "None",
                    "Dict[str,str]"
                ]
            }
        },
        "AddPet.mutate_and_get_payload": {
            "name": "mutate_and_get_payload",
            "location": 202,
            "return": [
                "AddPet"
            ],
            "arguments": {
                "cls": [
                    "Type[_TAddPet]"
                ],
                "root": [
                    "Dict",
                    "int",
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str,str]]",
                    "None",
                    "Dict[str,str]"
                ],
                "info": [
                    "Dict",
                    "int",
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str,str]]",
                    "None",
                    "Dict[str,str]"
                ]
            }
        }
    },
    "graphene-permissions-master/tests/test_app/demo_app/__init__.py": {},
    "graphene-permissions-master/tests/test_app/demo_app/migrations/0001_initial.py": {},
    "graphene-permissions-master/tests/test_app/demo_app/migrations/__init__.py": {}
}
{
    "groovies-backend-master/wait_for_postgres.py": {
        "pg_is_ready": {
            "name": "pg_is_ready",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "user": [
                    "str",
                    "bool",
                    "Optional[list]",
                    "list[]",
                    "None"
                ],
                "password": [
                    "str",
                    "bool",
                    "Optional[list]",
                    "list[]",
                    "None"
                ],
                "host": [
                    "str",
                    "bool",
                    "Optional[list]",
                    "list[]",
                    "None"
                ],
                "port": [
                    "str",
                    "bool",
                    "Optional[list]",
                    "list[]",
                    "None"
                ],
                "dbname": [
                    "str",
                    "bool",
                    "Optional[list]",
                    "list[]",
                    "None"
                ]
            }
        }
    },
    "groovies-backend-master/backend/manage.py": {},
    "groovies-backend-master/backend/backend/routing.py": {
        "ChannelsMiddleware.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inner": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ChannelsMiddleware.query_params": {
            "name": "query_params",
            "location": 19,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChannelsMiddleware.__call__": {
            "name": "__call__",
            "location": 23,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "SupportsFloat"
                ]
            }
        },
        "ChannelsMiddleware.intercept": {
            "name": "intercept",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JWTAuthMiddleware.token": {
            "name": "token",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JWTAuthMiddleware.intercept": {
            "name": "intercept",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "groovies-backend-master/backend/backend/test.py": {
        "TestStatusApi.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatusApi.test_api": {
            "name": "test_api",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "groovies-backend-master/backend/backend/urls.py": {},
    "groovies-backend-master/backend/backend/views.py": {
        "StatusView.__calculate_up_time": {
            "name": "__calculate_up_time",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "StatusView.get": {
            "name": "get",
            "location": 24,
            "return": [
                "Response",
                "Dict[str, Any]",
                "str",
                "int",
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "rest_framework.requesRequest",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        }
    },
    "groovies-backend-master/backend/backend/wsgi.py": {},
    "groovies-backend-master/backend/backend/__init__.py": {},
    "groovies-backend-master/backend/backend/settings/base.py": {},
    "groovies-backend-master/backend/backend/settings/local.py": {},
    "groovies-backend-master/backend/backend/settings/production.py": {},
    "groovies-backend-master/backend/backend/settings/test.py": {
        "TestLocalSettings.test_settings": {
            "name": "test_settings",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProductionSettings.test_settings": {
            "name": "test_settings",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "groovies-backend-master/backend/backend/settings/__init__.py": {},
    "groovies-backend-master/backend/ml_proxy/dev.py": {
        "DevMLProxy.get_challenge": {
            "name": "get_challenge",
            "location": 14,
            "return": [
                "List[movies.models.Movie]"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "DevMLProxy.get_recommendation": {
            "name": "get_recommendation",
            "location": 19,
            "return": [
                "List[movies.models.Movie]"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "groovies-backend-master/backend/ml_proxy/interface.py": {
        "MLProxyInterface.get_challenge": {
            "name": "get_challenge",
            "location": 10,
            "return": [
                "List[movies.models.Movie]"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "MLProxyInterface.get_recommendation": {
            "name": "get_recommendation",
            "location": 15,
            "return": [
                "List[movies.models.Movie]"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "groovies-backend-master/backend/ml_proxy/prod.py": {
        "ProductionMLProxy.get_challenge": {
            "name": "get_challenge",
            "location": 13,
            "return": [
                "List[movies.models.Movie]"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "ProductionMLProxy.get_recommendation": {
            "name": "get_recommendation",
            "location": 17,
            "return": [
                "List[movies.models.Movie]"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "groovies-backend-master/backend/ml_proxy/__init__.py": {
        "get_proxy": {
            "name": "get_proxy",
            "location": 9,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "env_override": [
                    "Optional[bool]",
                    "None",
                    "bool",
                    "Optional[str]",
                    "str"
                ]
            }
        }
    },
    "groovies-backend-master/backend/movies/managers.py": {
        "MovieQuerySet.unrated": {
            "name": "unrated",
            "location": 5,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "asgard.models.user.User",
                    "lms.lmsdb.models.User",
                    "lms.lmsdb.models.Solution",
                    "core.models.User"
                ]
            }
        }
    },
    "groovies-backend-master/backend/movies/models.py": {},
    "groovies-backend-master/backend/movies/permissions.py": {},
    "groovies-backend-master/backend/movies/serializers.py": {},
    "groovies-backend-master/backend/movies/test.py": {
        "TestMovieModel.setUp": {
            "name": "setUp",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMovieModel.test_create_no_title_fail": {
            "name": "test_create_no_title_fail",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMovieModel.test_create_no_year_fail": {
            "name": "test_create_no_year_fail",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMovieModel.test_create_success": {
            "name": "test_create_success",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMovieManager.setUp": {
            "name": "setUp",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMovieManager.test_unrated": {
            "name": "test_unrated",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "groovies-backend-master/backend/movies/urls.py": {},
    "groovies-backend-master/backend/movies/views.py": {},
    "groovies-backend-master/backend/movies/__init__.py": {},
    "groovies-backend-master/backend/movies/migrations/0001_initial.py": {},
    "groovies-backend-master/backend/movies/migrations/__init__.py": {},
    "groovies-backend-master/backend/ratings/managers.py": {},
    "groovies-backend-master/backend/ratings/models.py": {},
    "groovies-backend-master/backend/ratings/permissions.py": {},
    "groovies-backend-master/backend/ratings/serializers.py": {
        "RatingSerializer.create": {
            "name": "create",
            "location": 9,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "validated_data": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "groovies-backend-master/backend/ratings/test.py": {
        "TestRatingModel.setUp": {
            "name": "setUp",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRatingModel.test_create_no_user_fail": {
            "name": "test_create_no_user_fail",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRatingModel.test_create_no_movie_fail": {
            "name": "test_create_no_movie_fail",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRatingModel.test_create_success": {
            "name": "test_create_success",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRatingModel.test_unique_together": {
            "name": "test_unique_together",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRatingsApi.setUp": {
            "name": "setUp",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRatingsApi.test_create_401": {
            "name": "test_create_401",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRatingsApi.test_create_400": {
            "name": "test_create_400",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRatingsApi.test_create_201": {
            "name": "test_create_201",
            "location": 100,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "groovies-backend-master/backend/ratings/urls.py": {},
    "groovies-backend-master/backend/ratings/views.py": {},
    "groovies-backend-master/backend/ratings/__init__.py": {},
    "groovies-backend-master/backend/ratings/migrations/0001_initial.py": {},
    "groovies-backend-master/backend/ratings/migrations/__init__.py": {},
    "groovies-backend-master/backend/rooms/constants.py": {
        "moods": {
            "name": "moods",
            "location": 19,
            "return": [
                "List[Dict[(str, str)]]"
            ],
            "arguments": {}
        }
    },
    "groovies-backend-master/backend/rooms/consumers.py": {
        "RoomConsumer.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoomConsumer._get_room": {
            "name": "_get_room",
            "location": 34,
            "return": [
                "Optional[rooms.models.Room]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoomConsumer.group_id": {
            "name": "group_id",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoomConsumer.user": {
            "name": "user",
            "location": 43,
            "return": [
                "str",
                "int",
                "app.models.GameMember",
                "app.models.course.Course",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoomConsumer.user_ratings_count": {
            "name": "user_ratings_count",
            "location": 46,
            "return": [
                "str",
                "int",
                "app.models.GameMember",
                "app.models.course.Course",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoomConsumer.room_get_or_create_results": {
            "name": "room_get_or_create_results",
            "location": 91,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "groovies-backend-master/backend/rooms/exceptions.py": {},
    "groovies-backend-master/backend/rooms/managers.py": {
        "RoomManager.create_room": {
            "name": "create_room",
            "location": 9,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "admin": [
                    "int",
                    "List[str]",
                    "bool",
                    "float",
                    "Set[models.Route]",
                    "str",
                    "Iterator[T]"
                ]
            }
        }
    },
    "groovies-backend-master/backend/rooms/models.py": {
        "Room.sync_user": {
            "name": "sync_user",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "Room.users_are_ready": {
            "name": "users_are_ready",
            "location": 59,
            "return": [
                "models.User",
                "Callable",
                "app.models.GameMember",
                "app.models.course.Course",
                "str",
                "[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Room._users_are_ready": {
            "name": "_users_are_ready",
            "location": 63,
            "return": [
                "bool",
                "IO",
                "str",
                "Callable[[], str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "users_rated_count": [
                    "zerver.models.UserProfile",
                    "deeplearning.ml4pl.models.logger.Logger"
                ]
            }
        },
        "Room.get_or_create_results": {
            "name": "get_or_create_results",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "groovies-backend-master/backend/rooms/permissions.py": {
        "RoomPermissions.has_object_permission": {
            "name": "has_object_permission",
            "location": 5,
            "return": [
                "str",
                "Dict[str, Union[str, Set]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "rest_framework.requesRequest",
                    "typing.Callable[..., collections.abc.Awaitable[]]",
                    "dict",
                    "Callable[..., Awaitable]"
                ],
                "view": [
                    "dict",
                    "dict[, ]"
                ],
                "room": [
                    "dict[, ]",
                    "rest_framework.requesRequest",
                    "typing.Callable[..., collections.abc.Awaitable[]]",
                    "dict",
                    "Callable[..., Awaitable]"
                ]
            }
        }
    },
    "groovies-backend-master/backend/rooms/serializers.py": {
        "RoomSerializer.user": {
            "name": "user",
            "location": 17,
            "return": [
                "None",
                "str",
                "bool",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoomSerializer.get_users": {
            "name": "get_users",
            "location": 23,
            "return": [
                "list[]",
                "List[str]",
                "str",
                "List[Dict]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "room": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "RoomSerializer.get_unrated_movies": {
            "name": "get_unrated_movies",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "room": [
                    "str",
                    "bool"
                ]
            }
        },
        "RoomSerializer.update": {
            "name": "update",
            "location": 30,
            "return": [
                "dict[, ]",
                "dict",
                "List[str]",
                "Optional[str]",
                "Dict[str, Any]",
                "bool",
                "django.db.models.Model"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "bool",
                    "Mapping[str, Any]",
                    "dict"
                ],
                "validated_data": [
                    "dict",
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "RoomSerializer.create": {
            "name": "create",
            "location": 34,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "validated_data": [
                    "deeplearning.ml4pl.models.epoch.Results",
                    "aw_core.models.Event",
                    "dict"
                ]
            }
        },
        "RoomResultsSerializer.get_results": {
            "name": "get_results",
            "location": 46,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]",
                "Sequence",
                "Mapping"
            ],
            "arguments": {
                "self": [],
                "room": [
                    "bool",
                    "int"
                ]
            }
        }
    },
    "groovies-backend-master/backend/rooms/test.py": {
        "TestRoomModel.setUp": {
            "name": "setUp",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRoomModel.test_create_no_slug_fail": {
            "name": "test_create_no_slug_fail",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRoomModel.test_create_not_unique_slug_fail": {
            "name": "test_create_not_unique_slug_fail",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRoomModel.test_create_no_mood_fail": {
            "name": "test_create_no_mood_fail",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRoomModel.test_create_no_admin_fail": {
            "name": "test_create_no_admin_fail",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRoomModel.test_create_success": {
            "name": "test_create_success",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRoomModel.test_sync_users": {
            "name": "test_sync_users",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRoomManager.setUp": {
            "name": "setUp",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRoomManager.test_create_room_success": {
            "name": "test_create_room_success",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRoomManager.test_create_room_fail_no_movies": {
            "name": "test_create_room_fail_no_movies",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRoomManager.test_create_room_success_movies": {
            "name": "test_create_room_success_movies",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRoomManager.test_sync_user": {
            "name": "test_sync_user",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRoomManager.test_get_or_create_results": {
            "name": "test_get_or_create_results",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRoomsApi.setUp": {
            "name": "setUp",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRoomsApi.test_create_401": {
            "name": "test_create_401",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRoomsApi.test_create_201": {
            "name": "test_create_201",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRoomsApi.test_retrieve_401": {
            "name": "test_retrieve_401",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRoomsApi.test_retrieve_403": {
            "name": "test_retrieve_403",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRoomsApi.test_retrieve_200": {
            "name": "test_retrieve_200",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRoomsApi.test_join_401": {
            "name": "test_join_401",
            "location": 217,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRoomsApi.test_join_200": {
            "name": "test_join_200",
            "location": 222,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRoomsApi.test_results_401": {
            "name": "test_results_401",
            "location": 263,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRoomsApi.test_results_403": {
            "name": "test_results_403",
            "location": 268,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRoomsApi.test_results_400": {
            "name": "test_results_400",
            "location": 273,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRoomsApi.test_results_200": {
            "name": "test_results_200",
            "location": 281,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "groovies-backend-master/backend/rooms/urls.py": {},
    "groovies-backend-master/backend/rooms/views.py": {
        "RoomViewSet.join": {
            "name": "join",
            "location": 21,
            "return": [
                "dict[, ]",
                "bool",
                "Optional[zerver.models.Realm]",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict",
                    "list"
                ]
            }
        },
        "RoomViewSet.results": {
            "name": "results",
            "location": 25,
            "return": [
                "bool",
                "zerver.models.UserProfile",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict",
                    "list"
                ]
            }
        }
    },
    "groovies-backend-master/backend/rooms/__init__.py": {},
    "groovies-backend-master/backend/rooms/migrations/0001_initial.py": {},
    "groovies-backend-master/backend/rooms/migrations/0002_room_results.py": {},
    "groovies-backend-master/backend/rooms/migrations/__init__.py": {},
    "groovies-backend-master/backend/users/backends.py": {
        "EmailModelBackend.authenticate": {
            "name": "authenticate",
            "location": 8,
            "return": [
                "None",
                "bool",
                "set",
                "django.db.migrations.state.StateApps",
                "Mapping",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.requesHttpRequest",
                    "str",
                    "django.http.HttpRequest",
                    "Optional[django.http.HttpRequest]"
                ],
                "email": [
                    "None",
                    "str",
                    "Optional[str]",
                    "django.http.HttpRequest"
                ],
                "password": [
                    "None",
                    "str",
                    "Optional[str]",
                    "BinaryIO"
                ]
            }
        }
    },
    "groovies-backend-master/backend/users/managers.py": {
        "UserManager.create_user": {
            "name": "create_user",
            "location": 8,
            "return": [
                "zam_repondeur.models.Lecture",
                "core.models.UserPreferences",
                "set",
                "int",
                "bool",
                "django.db.models.QuerySet"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserManager.create_session_user": {
            "name": "create_session_user",
            "location": 18,
            "return": [
                "str",
                "Type"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "zerver.models.Realm"
                ]
            }
        },
        "UserManager.rated_count": {
            "name": "rated_count",
            "location": 24,
            "return": [
                "Optional[str]",
                "str",
                "Optional[guillotina.db.interfaces.ITransaction]"
            ],
            "arguments": {
                "self": [],
                "room": [
                    "str",
                    "bool",
                    "list[]",
                    "list",
                    "int"
                ]
            }
        }
    },
    "groovies-backend-master/backend/users/models.py": {
        "get_default_uuid": {
            "name": "get_default_uuid",
            "location": 10,
            "return": [
                "str",
                "Tuple[int, int]",
                "int"
            ],
            "arguments": {}
        },
        "User.create_jwt": {
            "name": "create_jwt",
            "location": 49,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "groovies-backend-master/backend/users/permissions.py": {},
    "groovies-backend-master/backend/users/serializers.py": {
        "SessionUserSerializer.get_token": {
            "name": "get_token",
            "location": 9,
            "return": [
                "int",
                "bool",
                "Dict[Optional[str], Set[abilian.services.security.models.Role]]",
                "abilian.core.models.subjects.Principal"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "models.User",
                    "int",
                    "str",
                    "lunch_buddies.models.polls.Poll"
                ]
            }
        },
        "SessionUserSerializer.create": {
            "name": "create",
            "location": 12,
            "return": [
                "str",
                "bool",
                "models.User",
                "int"
            ],
            "arguments": {
                "self": [],
                "validated_data": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Callable[[], Any]"
                ]
            }
        }
    },
    "groovies-backend-master/backend/users/test.py": {
        "TestUserBackend.setUp": {
            "name": "setUp",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserBackend.test_none_fail": {
            "name": "test_none_fail",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserBackend.test_no_user_fail": {
            "name": "test_no_user_fail",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserBackend.test_email_authentication_fail": {
            "name": "test_email_authentication_fail",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserBackend.test_email_authentication_success": {
            "name": "test_email_authentication_success",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserManager.test_create_user_success": {
            "name": "test_create_user_success",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserManager.test_create_user_success_no_name": {
            "name": "test_create_user_success_no_name",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserManager.test_create_session_user_success": {
            "name": "test_create_session_user_success",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserManager.test_room_ratings_count": {
            "name": "test_room_ratings_count",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserModel.test_create_jwt": {
            "name": "test_create_jwt",
            "location": 118,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUsersApi.test_create_user_201": {
            "name": "test_create_user_201",
            "location": 140,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "groovies-backend-master/backend/users/urls.py": {},
    "groovies-backend-master/backend/users/views.py": {},
    "groovies-backend-master/backend/users/__init__.py": {},
    "groovies-backend-master/backend/users/migrations/0001_initial.py": {},
    "groovies-backend-master/backend/users/migrations/__init__.py": {}
}
{
    "gt-powerup-master/app/auth.py": {
        "load_user": {
            "name": "load_user",
            "location": 15,
            "return": [
                "Optional[bool]",
                "None",
                "str",
                "bool",
                "Dict[str,str]",
                "Optional[float]",
                "List",
                "Optional[int]",
                "Dict[str,bool]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "user_id": [
                    "transfer.models.Channel.ID",
                    "uuid.UUID",
                    "transfer.models.Order.ID",
                    "transfer.models.TopicID",
                    "transfer.models.TicketID",
                    "transfer.models.SnippetID",
                    "transfer.models.Member.shipID",
                    "transfer.models.StorefronID",
                    "transfer.models.ArticleID"
                ]
            }
        },
        "create_login_token": {
            "name": "create_login_token",
            "location": 38,
            "return": [
                "Dict",
                "str",
                "Optional[Type]",
                "Dict[str,Any]",
                "Dict[str,Union[bool,str]]"
            ],
            "arguments": {
                "app": [
                    "Optional[type]",
                    "Type",
                    "bool",
                    "flask.Flask",
                    "None",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "str"
                ],
                "db": [
                    "str",
                    "None",
                    "grouper.models.base.session.Session",
                    "recidiviz.persistence.database.session.Session",
                    "deeplearning.ml4pl.models.log_database.Database",
                    "sqlalchemy.orm.session.Session",
                    "Optional[str]"
                ],
                "email": [
                    "str"
                ]
            }
        },
        "logout_user": {
            "name": "logout_user",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.session.Session",
                    "recidiviz.persistence.database.session.Session",
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "login_user": {
            "name": "login_user",
            "location": 72,
            "return": [
                "User",
                "None",
                "django.contrib.auth.models.AbstractBaseUser",
                "int",
                "Optional[services.user.transfer.models.User]",
                "Type[models.User]",
                "Optional[zerver.models.UserProfile]"
            ],
            "arguments": {
                "app": [
                    "salon.models.Stylist"
                ],
                "db": [
                    "str",
                    "routemaster.app.App",
                    "sqlalchemy.orm.session.Session"
                ],
                "payload": [
                    "int",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "gt-powerup-master/app/config.py": {},
    "gt-powerup-master/app/constants.py": {},
    "gt-powerup-master/app/design_system_fields.py": {
        "_GovukListInputWidget.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_type": [
                    "Text",
                    "str",
                    "Callable",
                    "bool"
                ],
                "prefix_label": [
                    "bool",
                    "bytes",
                    "str",
                    "Dict",
                    "int"
                ]
            }
        },
        "_GovukListInputWidget.__call__": {
            "name": "__call__",
            "location": 14,
            "return": [
                "HTMLString",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Dict",
                    "Dict[str,Any]",
                    "str",
                    "Type[DataclassT]"
                ]
            }
        }
    },
    "gt-powerup-master/app/errors.py": {
        "TrelloInvalidRequest.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Optional[str]",
                    "str",
                    "None",
                    "bool"
                ]
            }
        }
    },
    "gt-powerup-master/app/factory.py": {
        "create_app": {
            "name": "create_app",
            "location": 11,
            "return": [
                "flask.Flask",
                "Flask"
            ],
            "arguments": {}
        }
    },
    "gt-powerup-master/app/forms.py": {
        "ChooseGithubRepoForm.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repos": [
                    "Dict[str,Any]",
                    "None",
                    "Dict[str,Callable]",
                    "float",
                    "int",
                    "Iterable"
                ]
            }
        },
        "TransferGithubRepoForm.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repos": [
                    "Dict[str,Any]",
                    "None",
                    "Dict[str,Callable]",
                    "float",
                    "int",
                    "Iterable"
                ]
            }
        },
        "ChooseTrelloBoardForm.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "boards": [
                    "Optional[float]",
                    "None",
                    "str",
                    "float",
                    "Optional[int]",
                    "faustypes.app.TaskArg",
                    "int"
                ]
            }
        },
        "ChooseTrelloListForm.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lists": [
                    "Optional[Dict[str,Any]]",
                    "None",
                    "Dict",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "str"
                ]
            }
        }
    },
    "gt-powerup-master/app/github.py": {
        "GithubClient.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_id": [
                    "str"
                ],
                "client_secret": [
                    "str",
                    "bool",
                    "int"
                ],
                "user": [
                    "str",
                    "Dict",
                    "Optional[int]",
                    "int",
                    "Optional[Dict[str,dict]]",
                    "None",
                    "Dict[str,dict]"
                ]
            }
        },
        "GithubClient._default_params": {
            "name": "_default_params",
            "location": 21,
            "return": [
                "Dict[Text,int]",
                "Callable[[Mapping],T]",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubClient._default_headers": {
            "name": "_default_headers",
            "location": 24,
            "return": [
                "Dict[Text,Text]",
                "bool",
                "Dict",
                "Dict[str,int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "use_basic_auth": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "GithubClient._default_auth": {
            "name": "_default_auth",
            "location": 32,
            "return": [
                "Tuple",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "use_basic_auth": [
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "GithubClient._request": {
            "name": "_request",
            "location": 35,
            "return": [
                "dict",
                "Optional[str]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "None",
                    "Dict",
                    "bool",
                    "Optional[str]",
                    "Optional[Dict]"
                ],
                "path": [
                    "str",
                    "int",
                    "bool"
                ],
                "params": [
                    "Optional[str]",
                    "None",
                    "bool",
                    "str",
                    "Optional[Iterable[str]]",
                    "Dict",
                    "Iterable[str]"
                ],
                "json": [
                    "Optional[bool]",
                    "None",
                    "str",
                    "bool",
                    "Optional[dict]",
                    "Optional[Dict[str,str]]",
                    "Dict",
                    "Dict[str,str]"
                ],
                "use_basic_auth": [
                    "bool",
                    "Optional[bool]",
                    "str",
                    "Optional[dict]",
                    "Optional[Dict[str,str]]"
                ]
            }
        },
        "GithubClient._get": {
            "name": "_get",
            "location": 63,
            "return": [
                "bool",
                "Optional[Dict[str, Any]]",
                "Dict[str, Any]",
                "list",
                "core.models.User",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubClient._post": {
            "name": "_post",
            "location": 66,
            "return": [
                "dict",
                "Optional[Dict[str, Any]]",
                "Exception",
                "tartare.core.models.Job",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubClient._delete": {
            "name": "_delete",
            "location": 69,
            "return": [
                "Dict[str, str]",
                "Dict[str, Any]",
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubClient.get_repos": {
            "name": "get_repos",
            "location": 72,
            "return": [
                "List",
                "str",
                "Set",
                "Set[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubClient.get_repo": {
            "name": "get_repo",
            "location": 84,
            "return": [
                "str",
                "Dict",
                "Dict[str,Any]",
                "Pattern"
            ],
            "arguments": {
                "self": [],
                "repo_id": [
                    "str"
                ],
                "as_json": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "GithubClient.get_pull_request": {
            "name": "get_pull_request",
            "location": 92,
            "return": [
                "Dict[int,Any]",
                "List[str]",
                "Dict",
                "Dict[str,str]",
                "DefaultDict",
                "Optional[str]",
                "Dict[str,Any]",
                "List[int]",
                "List"
            ],
            "arguments": {
                "self": [],
                "repo_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "pull_request_id": [
                    "str",
                    "int"
                ],
                "as_json": [
                    "bool",
                    "str",
                    "int",
                    "Optional[bool]"
                ]
            }
        },
        "GithubClient.create_webhook": {
            "name": "create_webhook",
            "location": 102,
            "return": [
                "Dict[str,Union[int,str]]",
                "Dict[str,Any]",
                "List[list[float]]",
                "Pattern",
                "Optional[Dict[str,Any]]",
                "bool",
                "Dict[str,str]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "repo_id": [
                    "str",
                    "Dict",
                    "Set[int]",
                    "Awaitable",
                    "collections.abc.Awaitable",
                    "Optional[str]",
                    "None"
                ],
                "callback_url": [
                    "str",
                    "Dict",
                    "Set[int]",
                    "Awaitable",
                    "collections.abc.Awaitable",
                    "Optional[str]",
                    "None"
                ],
                "secret": [
                    "str",
                    "Dict",
                    "Set[int]",
                    "Awaitable",
                    "collections.abc.Awaitable",
                    "Optional[str]",
                    "None"
                ],
                "events": [
                    "List[Text]",
                    "str",
                    "Dict",
                    "Awaitable",
                    "Optional[str]",
                    "Set[int]"
                ],
                "active": [
                    "bool",
                    "str",
                    "Dict",
                    "Awaitable",
                    "Optional[str]",
                    "Set[int]"
                ]
            }
        },
        "GithubClient.delete_webhook": {
            "name": "delete_webhook",
            "location": 115,
            "return": [
                "str",
                "Dict[int,str]",
                "Dict[str,str]",
                "int",
                "Dict[Any,dict[str,int]]",
                "Exception",
                "KeysView",
                "tartare.core.models.Job",
                "Dict",
                "games.models.Game",
                "Set[str]",
                "Dict[str,Any]",
                "Tuple"
            ],
            "arguments": {
                "self": [],
                "repo_id": [
                    "int",
                    "str"
                ],
                "hook_id": [
                    "int",
                    "str"
                ]
            }
        },
        "GithubClient.set_pull_request_status": {
            "name": "set_pull_request_status",
            "location": 120,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "statuses_url": [
                    "str",
                    "List[annofabapi.models.SingleAnnotation]",
                    "Optional[str]",
                    "None"
                ],
                "status": [
                    "str",
                    "List[annofabapi.models.SingleAnnotation]",
                    "Optional[str]",
                    "None"
                ],
                "description": [
                    "str",
                    "List[annofabapi.models.SingleAnnotation]",
                    "Optional[str]",
                    "None"
                ],
                "context": [
                    "str",
                    "List[annofabapi.models.SingleAnnotation]",
                    "Optional[str]",
                    "None"
                ],
                "target_url": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "List[annofabapi.models.SingleAnnotation]"
                ]
            }
        },
        "GithubClient.is_token_valid": {
            "name": "is_token_valid",
            "location": 126,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubClient.revoke_integration": {
            "name": "revoke_integration",
            "location": 130,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gt-powerup-master/app/models.py": {
        "random_external_id": {
            "name": "random_external_id",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "User.find_or_create": {
            "name": "find_or_create",
            "location": 47,
            "return": [
                "int"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "email": [
                    "int",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "User.is_authenticated": {
            "name": "is_authenticated",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.is_active": {
            "name": "is_active",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.is_anonymous": {
            "name": "is_anonymous",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get_id": {
            "name": "get_id",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubRepo.__repr__": {
            "name": "__repr__",
            "location": 131,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubRepo.from_json": {
            "name": "from_json",
            "location": 135,
            "return": [
                "dict[, ]",
                "typing.Mapping",
                "str"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "data": [
                    "str"
                ]
            }
        },
        "GithubRepo.hydrate": {
            "name": "hydrate",
            "location": 143,
            "return": [
                "GithubRepo"
            ],
            "arguments": {
                "self": [],
                "github_client": [],
                "data": []
            }
        },
        "PullRequest.from_json": {
            "name": "from_json",
            "location": 178,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "str",
                    "dict[str, str]",
                    "None",
                    "typing.Sequence[]",
                    "bytes"
                ],
                "data": [
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "PullRequest.hydrate": {
            "name": "hydrate",
            "location": 187,
            "return": [
                "PullRequest"
            ],
            "arguments": {
                "self": [],
                "github_client": [],
                "data": [
                    "str"
                ]
            }
        },
        "TrelloBoard.from_json": {
            "name": "from_json",
            "location": 219,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "float",
                    "None",
                    "list[]",
                    "int"
                ],
                "data": [
                    "dict[, ]",
                    "str",
                    "bytes"
                ]
            }
        },
        "TrelloBoard.hydrate": {
            "name": "hydrate",
            "location": 225,
            "return": [
                "TrelloBoard"
            ],
            "arguments": {
                "self": [],
                "trello_client": [],
                "data": [
                    "str"
                ]
            }
        },
        "TrelloList.from_json": {
            "name": "from_json",
            "location": 257,
            "return": [],
            "arguments": {
                "cls": [
                    "list[str]",
                    "None",
                    "dict[, ]",
                    "list[]",
                    "int",
                    "list[list[str]]"
                ],
                "data": [
                    "dict[, ]",
                    "bool",
                    "bytes",
                    "typing.Mapping",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TrelloList.hydrate": {
            "name": "hydrate",
            "location": 262,
            "return": [
                "TrelloList"
            ],
            "arguments": {
                "self": [],
                "trello_client": [],
                "data": [
                    "bytes",
                    "str"
                ]
            }
        },
        "ProductSignoff.hydrate": {
            "name": "hydrate",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trello_client": [
                    "str"
                ],
                "trello_board_data": [
                    "None",
                    "bool",
                    "str",
                    "dict[str, str]"
                ],
                "trello_list_data": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "ProductSignoff.hydrate_from_board_json": {
            "name": "hydrate_from_board_json",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "board_json": []
            }
        },
        "TrelloCard.from_json": {
            "name": "from_json",
            "location": 364,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "data": [
                    "dict[, ]",
                    "dict[str, float]",
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "TrelloCard.hydrate": {
            "name": "hydrate",
            "location": 373,
            "return": [
                "TrelloCard"
            ],
            "arguments": {
                "self": [],
                "trello_client": [],
                "data": [
                    "str"
                ]
            }
        },
        "TrelloChecklist.from_json": {
            "name": "from_json",
            "location": 412,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "float",
                    "None",
                    "list[]",
                    "int"
                ],
                "data": [
                    "dict[, ]",
                    "str",
                    "bytes"
                ]
            }
        },
        "TrelloChecklist.hydrate": {
            "name": "hydrate",
            "location": 417,
            "return": [
                "TrelloChecklist"
            ],
            "arguments": {
                "self": [],
                "trello_client": [],
                "data": []
            }
        },
        "TrelloCheckitem.from_json": {
            "name": "from_json",
            "location": 462,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "float",
                    "None",
                    "list[]",
                    "int"
                ],
                "data": [
                    "dict[, ]",
                    "str",
                    "bytes"
                ]
            }
        },
        "TrelloCheckitem.hydrate": {
            "name": "hydrate",
            "location": 467,
            "return": [
                "TrelloCheckitem"
            ],
            "arguments": {
                "self": [],
                "trello_client": [],
                "data": [
                    "str"
                ]
            }
        }
    },
    "gt-powerup-master/app/trello.py": {
        "TrelloClient.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "None"
                ],
                "user": [
                    "Optional[List[str]]",
                    "List[str]",
                    "List[InlineContent]",
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "TrelloClient._default_params": {
            "name": "_default_params",
            "location": 25,
            "return": [
                "Dict[Text,]",
                "str",
                "bool",
                "Dict[str,str]",
                "zam_repondeur.models.Lecture",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrelloClient._request": {
            "name": "_request",
            "location": 28,
            "return": [
                "dict",
                "Optional[str]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "path": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "params": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Union[str,List[str]]",
                    "List[str]"
                ]
            }
        },
        "TrelloClient._get": {
            "name": "_get",
            "location": 55,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "None"
                ],
                "params": [
                    "str",
                    "None"
                ]
            }
        },
        "TrelloClient._put": {
            "name": "_put",
            "location": 58,
            "return": [
                "str",
                "Optional[Mapping]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "None"
                ],
                "params": [
                    "str",
                    "None"
                ]
            }
        },
        "TrelloClient._post": {
            "name": "_post",
            "location": 61,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "None"
                ],
                "params": [
                    "str",
                    "None"
                ]
            }
        },
        "TrelloClient._delete": {
            "name": "_delete",
            "location": 64,
            "return": [
                "str",
                "dict",
                "Optional[Mapping]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "None"
                ],
                "params": [
                    "str",
                    "None"
                ]
            }
        },
        "TrelloClient._me": {
            "name": "_me",
            "location": 67,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrelloClient.get_board": {
            "name": "get_board",
            "location": 70,
            "return": [
                "bytes",
                "str",
                "Dict[tuple[Union[str,str]],tuple[Union[str,str]]]",
                "Iterable[models.Entry]",
                "Dict[str,Union[int,str]]",
                "Dict[str,int]",
                "Dict[str,dict[str,Any]]",
                "Dict",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": [],
                "board_id": [
                    "str",
                    "int"
                ],
                "as_json": [
                    "bool",
                    "str",
                    "excars.models.user.User",
                    "esm.models.LastOperation",
                    "Callable[,None]",
                    "Dict"
                ]
            }
        },
        "TrelloClient.get_boards": {
            "name": "get_boards",
            "location": 78,
            "return": [
                "str",
                "Dict[str,str]",
                "Optional[int]",
                "Dict[str,list[str]]",
                "Callable",
                "Dict[tuple[Union[str,int]],str]",
                "List"
            ],
            "arguments": {
                "self": [],
                "with_lists": [
                    "bool",
                    "List",
                    "int"
                ],
                "as_json": [
                    "bool",
                    "int",
                    "List"
                ]
            }
        },
        "TrelloClient.get_list": {
            "name": "get_list",
            "location": 87,
            "return": [
                "str",
                "List[str]",
                "List",
                "Dict[str,Union[Any,int]]",
                "Set",
                "Dict[str,dict[str,Any]]",
                "DefaultDict",
                "Set[str]",
                "List[dict[str,Any]]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "list_id": [
                    "str"
                ],
                "as_json": [
                    "bool",
                    "str",
                    "int",
                    "List[dict]"
                ]
            }
        },
        "TrelloClient.get_card": {
            "name": "get_card",
            "location": 95,
            "return": [
                "bytes",
                "str",
                "Dict[str,Any]",
                "Iterable[models.Entry]",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "card_id": [
                    "str",
                    "Exception",
                    "int",
                    "bool"
                ],
                "as_json": [
                    "bool",
                    "str",
                    "excars.models.user.User",
                    "esm.models.LastOperation",
                    "Callable[,None]",
                    "Dict"
                ]
            }
        },
        "TrelloClient.get_lists": {
            "name": "get_lists",
            "location": 105,
            "return": [
                "List",
                "str",
                "Set",
                "List[str]",
                "int",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": [],
                "board_id": [
                    "str"
                ]
            }
        },
        "TrelloClient.get_webhook": {
            "name": "get_webhook",
            "location": 109,
            "return": [
                "str",
                "int",
                "bool",
                "Any"
            ],
            "arguments": {
                "self": [],
                "object_id": [
                    "str",
                    "int",
                    "Dict[str,Any]"
                ]
            }
        },
        "TrelloClient.create_webhook": {
            "name": "create_webhook",
            "location": 118,
            "return": [
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]",
                "bool",
                "Dict[str, str]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "object_id": [
                    "str",
                    "bool",
                    "int"
                ],
                "callback_url": [
                    "str",
                    "bool",
                    "int"
                ],
                "description": [
                    "Text",
                    "str",
                    "bool",
                    "int"
                ],
                "active": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "TrelloClient.delete_webhook": {
            "name": "delete_webhook",
            "location": 140,
            "return": [
                "str",
                "Dict[int,Any]",
                "Dict[str,str]",
                "int",
                "Dict",
                "Type",
                "Exception",
                "tartare.core.models.Job",
                "OrderedDict",
                "games.models.Game",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "hook_id": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "transfer.models.TicketBundleID"
                ]
            }
        },
        "TrelloClient.create_checklist": {
            "name": "create_checklist",
            "location": 145,
            "return": [
                "Mapping[str, Any]",
                "bool",
                "bytes",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "real_card_id": [
                    "str"
                ],
                "checklist_name": [
                    "str"
                ],
                "pos": [
                    "str",
                    "Text"
                ]
            }
        },
        "TrelloClient.get_checklist": {
            "name": "get_checklist",
            "location": 150,
            "return": [
                "bytes",
                "str",
                "Dict[tuple[Union[str,str]],tuple[Union[str,str]]]",
                "Iterable[models.Entry]",
                "Dict[str,Union[int,str]]",
                "Dict[str,int]",
                "Dict[str,dict[str,Any]]",
                "Dict",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": [],
                "checklist_id": [
                    "str",
                    "int"
                ],
                "as_json": [
                    "bool",
                    "str",
                    "excars.models.user.User",
                    "esm.models.LastOperation",
                    "Callable[,None]",
                    "Dict"
                ]
            }
        },
        "TrelloClient.delete_checklist": {
            "name": "delete_checklist",
            "location": 158,
            "return": [
                "str",
                "int",
                "Dict[str,Literal]",
                "Dict[str,str]",
                "Exception",
                "tartare.core.models.Job",
                "games.models.Game",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "checklist_id": [
                    "str",
                    "int",
                    "Tuple[Union[str,None,str]]",
                    "Union[int,str]",
                    "Tuple[Optional[str],str]"
                ]
            }
        },
        "TrelloClient.create_checkitem": {
            "name": "create_checkitem",
            "location": 163,
            "return": [
                "Mapping[str, Any]",
                "bool",
                "bytes",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "checklist_id": [
                    "str",
                    "Dict",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "checkitem_name": [
                    "str",
                    "Dict",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "pos": [
                    "Text",
                    "str",
                    "Dict",
                    "Optional[int]"
                ],
                "checked": [
                    "Text",
                    "str",
                    "Dict",
                    "Optional[int]"
                ]
            }
        },
        "TrelloClient.update_checkitem": {
            "name": "update_checkitem",
            "location": 170,
            "return": [
                "int",
                "Mapping[str, Any]",
                "bool",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "real_card_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "checkitem_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "state": [
                    "Text",
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "TrelloClient.get_checkitem": {
            "name": "get_checkitem",
            "location": 175,
            "return": [
                "bytes",
                "Dict[str,str]",
                "str",
                "Iterable[models.Entry]",
                "Dict[int,Any]",
                "List",
                "OrderedDict",
                "Dict[str,dict[Any,str]]"
            ],
            "arguments": {
                "self": [],
                "checklist_id": [
                    "str"
                ],
                "checkitem_id": [
                    "str"
                ],
                "as_json": [
                    "bool",
                    "str",
                    "Optional[UtilityFunction]"
                ]
            }
        },
        "TrelloClient.delete_checkitem": {
            "name": "delete_checkitem",
            "location": 183,
            "return": [
                "Dict[int,str]",
                "str",
                "Dict[str,str]",
                "int",
                "Tuple",
                "Dict[Any,dict[str,int]]",
                "Exception",
                "List[int]",
                "tartare.core.models.Job",
                "Dict[str,bool]",
                "games.models.Game",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "checklist_id": [
                    "int",
                    "str",
                    "transfer.models.ShopID",
                    "transfer.models.StorefronID",
                    "transfer.models.ArticleID"
                ],
                "checkitem_id": [
                    "int",
                    "str",
                    "transfer.models.ShopID",
                    "transfer.models.StorefronID",
                    "transfer.models.ArticleID"
                ]
            }
        },
        "TrelloClient.is_token_valid": {
            "name": "is_token_valid",
            "location": 188,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrelloClient.revoke_integration": {
            "name": "revoke_integration",
            "location": 195,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gt-powerup-master/app/updater.py": {
        "Updater.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "db": [],
                "user": []
            }
        },
        "Updater._set_pull_request_status": {
            "name": "_set_pull_request_status",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pull_request": [],
                "status": [],
                "required": [
                    "bool"
                ]
            }
        },
        "Updater._update_tracked_trello_cards": {
            "name": "_update_tracked_trello_cards",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pull_request": [],
                "new_trello_cards": []
            }
        },
        "Updater._update_trello_checklists": {
            "name": "_update_trello_checklists",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pull_request": []
            }
        },
        "Updater._update_pull_request_status": {
            "name": "_update_pull_request_status",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pull_request": [],
                "before_update_pr_card_count": []
            }
        },
        "Updater.sync_pull_request": {
            "name": "sync_pull_request",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Updater.sync_repositories": {
            "name": "sync_repositories",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chosen_repo_ids": []
            }
        },
        "Updater.transfer_repository": {
            "name": "transfer_repository",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chosen_repo_id": []
            }
        },
        "Updater.sync_trello_card": {
            "name": "sync_trello_card",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trello_card": []
            }
        }
    },
    "gt-powerup-master/app/utils.py": {
        "coerce_boolean_or_error": {
            "name": "coerce_boolean_or_error",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "value": [
                    "str",
                    "bool",
                    "Callable",
                    "List[str]",
                    "int"
                ]
            }
        },
        "coerce_int_or_error": {
            "name": "coerce_int_or_error",
            "location": 22,
            "return": [
                "float",
                "int",
                "bool",
                "List[str]",
                "Type[object]"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "value": [
                    "Optional[bool]",
                    "str",
                    "float",
                    "dict",
                    "Optional[dict]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "get_github_client": {
            "name": "get_github_client",
            "location": 33,
            "return": [
                "GithubClient",
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "app": [],
                "user": []
            }
        },
        "get_trello_client": {
            "name": "get_trello_client",
            "location": 39,
            "return": [
                "TrelloClient",
                "Dict[str,Any]",
                "str",
                "int",
                "Optional[str]",
                "Optional[type]"
            ],
            "arguments": {
                "app": [
                    "str"
                ],
                "user": [
                    "str"
                ]
            }
        },
        "get_trello_cards_from_text": {
            "name": "get_trello_cards_from_text",
            "location": 43,
            "return": [
                "List",
                "Tuple[int,int]",
                "str",
                "Type"
            ],
            "arguments": {
                "trello_client": [
                    "str",
                    "bool"
                ],
                "text": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Iterator[str]",
                    "Iterator"
                ]
            }
        },
        "get_github_token_status": {
            "name": "get_github_token_status",
            "location": 62,
            "return": [
                "Text",
                "bool",
                "None",
                "Optional[Dict]",
                "Callable",
                "int"
            ],
            "arguments": {
                "app": [
                    "flask.Flask",
                    "app.utils.models.ModelManager"
                ],
                "user": [
                    "Callable"
                ]
            }
        },
        "get_trello_token_status": {
            "name": "get_trello_token_status",
            "location": 70,
            "return": [
                "Text",
                "bool",
                "None",
                "Optional[Dict]",
                "Callable",
                "int"
            ],
            "arguments": {
                "app": [
                    "flask.Flask",
                    "app.utils.models.ModelManager"
                ],
                "user": [
                    "Callable"
                ]
            }
        }
    },
    "gt-powerup-master/app/views.py": {
        "trello_unauthorized_handler": {
            "name": "trello_unauthorized_handler",
            "location": 72,
            "return": [],
            "arguments": {
                "error": []
            }
        },
        "github_unauthorized_handler": {
            "name": "github_unauthorized_handler",
            "location": 79,
            "return": [],
            "arguments": {
                "error": []
            }
        },
        "require_missing_or_invalid_trello_token": {
            "name": "require_missing_or_invalid_trello_token",
            "location": 84,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "require_missing_or_invalid_github_token": {
            "name": "require_missing_or_invalid_github_token",
            "location": 96,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "redirect_authenticated_user_to_dashboard": {
            "name": "redirect_authenticated_user_to_dashboard",
            "location": 108,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "start_page": {
            "name": "start_page",
            "location": 120,
            "return": [],
            "arguments": {}
        },
        "login": {
            "name": "login",
            "location": 126,
            "return": [],
            "arguments": {}
        },
        "login_with_payload": {
            "name": "login_with_payload",
            "location": 172,
            "return": [],
            "arguments": {
                "payload": []
            }
        },
        "logout": {
            "name": "logout",
            "location": 184,
            "return": [],
            "arguments": {}
        },
        "dashboard": {
            "name": "dashboard",
            "location": 193,
            "return": [],
            "arguments": {}
        },
        "account": {
            "name": "account",
            "location": 224,
            "return": [],
            "arguments": {}
        },
        "delete_account": {
            "name": "delete_account",
            "location": 234,
            "return": [],
            "arguments": {}
        },
        "integrate_github": {
            "name": "integrate_github",
            "location": 272,
            "return": [],
            "arguments": {}
        },
        "github_callback": {
            "name": "github_callback",
            "location": 293,
            "return": [
                "tuple[int]"
            ],
            "arguments": {}
        },
        "authorize_github_complete": {
            "name": "authorize_github_complete",
            "location": 332,
            "return": [],
            "arguments": {}
        },
        "github_choose_repos": {
            "name": "github_choose_repos",
            "location": 366,
            "return": [],
            "arguments": {}
        },
        "github_transfer_existing_repos": {
            "name": "github_transfer_existing_repos",
            "location": 411,
            "return": [],
            "arguments": {}
        },
        "revoke_github": {
            "name": "revoke_github",
            "location": 438,
            "return": [],
            "arguments": {}
        },
        "integrate_trello_head": {
            "name": "integrate_trello_head",
            "location": 467,
            "return": [
                "tuple[int]"
            ],
            "arguments": {}
        },
        "trello_callback": {
            "name": "trello_callback",
            "location": 472,
            "return": [
                "tuple[int]"
            ],
            "arguments": {}
        },
        "integrate_trello": {
            "name": "integrate_trello",
            "location": 495,
            "return": [],
            "arguments": {}
        },
        "authorize_trello": {
            "name": "authorize_trello",
            "location": 503,
            "return": [],
            "arguments": {}
        },
        "authorize_trello_complete": {
            "name": "authorize_trello_complete",
            "location": 513,
            "return": [],
            "arguments": {}
        },
        "revoke_trello": {
            "name": "revoke_trello",
            "location": 536,
            "return": [],
            "arguments": {}
        },
        "trello_product_signoff": {
            "name": "trello_product_signoff",
            "location": 555,
            "return": [],
            "arguments": {}
        },
        "get_board_name": {
            "name": "get_board_name",
            "location": 574,
            "return": [
                "list[dict[typing.Text, ]]"
            ],
            "arguments": {}
        },
        "trello_manage_product_signoff": {
            "name": "trello_manage_product_signoff",
            "location": 587,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "signoff_id": []
            }
        },
        "trello_delete_signoff_check": {
            "name": "trello_delete_signoff_check",
            "location": 608,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "signoff_id": []
            }
        },
        "trello_choose_board": {
            "name": "trello_choose_board",
            "location": 654,
            "return": [],
            "arguments": {}
        },
        "trello_choose_list": {
            "name": "trello_choose_list",
            "location": 681,
            "return": [],
            "arguments": {}
        },
        "feature_checklists": {
            "name": "feature_checklists",
            "location": 726,
            "return": [],
            "arguments": {}
        },
        "require_missing_or_invalid_trello_token.wrapper": {
            "name": "wrapper",
            "location": 86,
            "return": [],
            "arguments": {}
        },
        "require_missing_or_invalid_github_token.wrapper": {
            "name": "wrapper",
            "location": 98,
            "return": [],
            "arguments": {}
        },
        "redirect_authenticated_user_to_dashboard.wrapper": {
            "name": "wrapper",
            "location": 110,
            "return": [],
            "arguments": {}
        }
    },
    "gt-powerup-master/app/__init__.py": {},
    "gt-powerup-master/migrations/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online.process_revision_directives": {
            "name": "process_revision_directives",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "revision": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "directives": [
                    "Callable[[Mapping], T]",
                    "list",
                    "List[List[str]]",
                    "int",
                    "str",
                    "tuple"
                ]
            }
        }
    },
    "gt-powerup-master/migrations/versions/1_initialisation.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "gt-powerup-master/tests/contract/test_misc.py": {},
    "gt-powerup-master/tests/functional/test_misc.py": {},
    "gt-powerup-master/tests/unit/test_dashboard.py": {},
    "gt-powerup-master/tests/unit/test_integrations.py": {},
    "gt-powerup-master/tests/unit/test_login.py": {},
    "gt-powerup-master/tests/unit/test_misc.py": {}
}
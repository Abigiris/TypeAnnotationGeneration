{
    "gustavgrad-master/noxfile.py": {
        "tests": {
            "name": "tests",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "str"
                ]
            }
        },
        "lint": {
            "name": "lint",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "dict",
                    "str"
                ]
            }
        },
        "mypy": {
            "name": "mypy",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "dict",
                    "str"
                ]
            }
        },
        "codecov": {
            "name": "codecov",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "session": []
            }
        }
    },
    "gustavgrad-master/examples/fizzbuzz.py": {
        "binary_encode": {
            "name": "binary_encode",
            "location": 29,
            "return": [
                "list"
            ],
            "arguments": {
                "x": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "fizz_buzz_encode": {
            "name": "fizz_buzz_encode",
            "location": 34,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "accuracy": {
            "name": "accuracy",
            "location": 59,
            "return": [
                "Optional[float]",
                "bool",
                "IO[bytes]",
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "pred": [
                    "str",
                    "bool",
                    "float",
                    "bytes",
                    "List[str]"
                ],
                "targets": [
                    "List[str]",
                    "int"
                ]
            }
        },
        "Model.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_hidden": [
                    "int"
                ]
            }
        },
        "Model.predict": {
            "name": "predict",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "numpy.ndarray",
                    "gustavgrad.Tensor",
                    "Union[numpy.ndarray, pandas.DataFrame]"
                ]
            }
        }
    },
    "gustavgrad-master/examples/linear_regression.py": {},
    "gustavgrad-master/examples/xor.py": {
        "MultilayerPerceptron.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "List[int]",
                    "int",
                    "bool"
                ],
                "output_size": [
                    "int",
                    "List[int]"
                ],
                "hidden_size": [
                    "int",
                    "List[int]",
                    "Optional[torch.nn.Module]",
                    "float"
                ]
            }
        },
        "MultilayerPerceptron.predict": {
            "name": "predict",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "gustavgrad.Tensor"
                ]
            }
        }
    },
    "gustavgrad-master/examples/xor_bce.py": {
        "MultilayerPerceptron.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "List[int]",
                    "int",
                    "bool"
                ],
                "output_size": [
                    "int",
                    "List[int]"
                ],
                "hidden_size": [
                    "int",
                    "List[int]",
                    "Optional[torch.nn.Module]",
                    "float"
                ]
            }
        },
        "MultilayerPerceptron.predict": {
            "name": "predict",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "gustavgrad.Tensor"
                ]
            }
        }
    },
    "gustavgrad-master/src/gustavgrad/function.py": {
        "_sigmoid": {
            "name": "_sigmoid",
            "location": 7,
            "return": [
                "List[int]",
                "numpy.ndarray",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "torch.tensor",
                    "torch.Tensor"
                ]
            }
        },
        "_sigmoid_prime": {
            "name": "_sigmoid_prime",
            "location": 16,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "x": [
                    "List[numpy.ndarray]",
                    "torch.Tensor",
                    "Union[numpy.ndarray,List[numpy.ndarray]]",
                    "Iterable[Iterable[float]]",
                    "numpy.ndarray"
                ]
            }
        },
        "sigmoid": {
            "name": "sigmoid",
            "location": 21,
            "return": [
                "gustavgrad.tensor.Tensor"
            ],
            "arguments": {
                "tensor": [
                    "int",
                    "str",
                    "numpy.random.RandomState",
                    "gustavgrad.tensor.Tensor",
                    "T"
                ]
            }
        },
        "tanh": {
            "name": "tanh",
            "location": 36,
            "return": [
                "gustavgrad.tensor.Tensor"
            ],
            "arguments": {
                "tensor": [
                    "int",
                    "str",
                    "numpy.random.RandomState",
                    "gustavgrad.tensor.Tensor",
                    "T"
                ]
            }
        },
        "sigmoid.grad_fn": {
            "name": "grad_fn",
            "location": 28,
            "return": [],
            "arguments": {
                "grad": []
            }
        },
        "tanh.grad_fn": {
            "name": "grad_fn",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "grad": [
                    "numpy.ndarray",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "gustavgrad-master/src/gustavgrad/loss.py": {
        "Loss.loss": {
            "name": "loss",
            "location": 12,
            "return": [
                "gustavgrad.tensor.Tensor",
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "pred": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "SquaredErrorLoss.loss": {
            "name": "loss",
            "location": 19,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "bytes",
                    "numpy.array"
                ],
                "pred": [
                    "bytes",
                    "numpy.array"
                ]
            }
        },
        "LogitBinaryCrossEntropy.loss": {
            "name": "loss",
            "location": 29,
            "return": [
                "gustavgrad.tensor.Tensor"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "logits": [
                    "int",
                    "str",
                    "numpy.random.RandomState",
                    "gustavgrad.tensor.Tensor",
                    "T"
                ]
            }
        },
        "LogitBinaryCrossEntropy.loss.grad_fn": {
            "name": "grad_fn",
            "location": 46,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "grad": [
                    "numpy.ndarray",
                    "bool",
                    "str",
                    "Tuple[int, int]",
                    "List[str]",
                    "int"
                ]
            }
        }
    },
    "gustavgrad-master/src/gustavgrad/module.py": {
        "Parameter.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Module.parameters": {
            "name": "parameters",
            "location": 21,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Module.zero_grad": {
            "name": "zero_grad",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Module.no_grad": {
            "name": "no_grad",
            "location": 33,
            "return": [
                "Iterator[None]",
                "Generator"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gustavgrad-master/src/gustavgrad/optim.py": {
        "SGD.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lr": [
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "SGD.step": {
            "name": "step",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "gustavgrad-master/src/gustavgrad/tensor.py": {
        "ensure_array": {
            "name": "ensure_array",
            "location": 37,
            "return": [
                "Union[(np.ndarray, _T0)]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "List[str]",
                    "bytes",
                    "Dict"
                ]
            }
        },
        "ensure_tensor": {
            "name": "ensure_tensor",
            "location": 48,
            "return": [
                "Union[(Tensor, _T0)]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Dict[str,Any]",
                    "str",
                    "Dict",
                    "numpy.ndarray",
                    "Callable[bytes,bytes]",
                    "Callable[[bytes],bytes]"
                ]
            }
        },
        "_add": {
            "name": "_add",
            "location": 184,
            "return": [
                "Tensor"
            ],
            "arguments": {
                "t1": [
                    "int",
                    "List[str]",
                    "Optional[Exception]",
                    "Exception",
                    "float",
                    "None",
                    "1"
                ],
                "t2": [
                    "List",
                    "Dict",
                    "int",
                    "numpy.random.RandomState"
                ]
            }
        },
        "_sub": {
            "name": "_sub",
            "location": 213,
            "return": [
                "Tensor"
            ],
            "arguments": {
                "t1": [
                    "int",
                    "List[int]",
                    "Optional[Exception]",
                    "Exception",
                    "None",
                    "numpy.ndarray"
                ],
                "t2": [
                    "List",
                    "Dict",
                    "int",
                    "Counter",
                    "numpy.random.RandomState"
                ]
            }
        },
        "_mul": {
            "name": "_mul",
            "location": 239,
            "return": [
                "Tensor"
            ],
            "arguments": {
                "t1": [
                    "int",
                    "List[int]",
                    "Optional[Exception]",
                    "Exception",
                    "None",
                    "numpy.ndarray"
                ],
                "t2": [
                    "List",
                    "Dict",
                    "int",
                    "Counter",
                    "numpy.random.RandomState"
                ]
            }
        },
        "_matmul": {
            "name": "_matmul",
            "location": 272,
            "return": [
                "Tensor"
            ],
            "arguments": {
                "t1": [
                    "int",
                    "List[int]",
                    "Optional[Exception]",
                    "Exception",
                    "None",
                    "numpy.ndarray"
                ],
                "t2": [
                    "List",
                    "Dict",
                    "int",
                    "Counter",
                    "numpy.random.RandomState"
                ]
            }
        },
        "_sum": {
            "name": "_sum",
            "location": 301,
            "return": [
                "Tensor"
            ],
            "arguments": {
                "tensor": [
                    "int",
                    "str",
                    "numpy.random.RandomState",
                    "T"
                ],
                "axis": [
                    "int",
                    "None",
                    "str",
                    "Iterable[Context]",
                    "Iterable[C]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "_slice": {
            "name": "_slice",
            "location": 324,
            "return": [
                "Tensor"
            ],
            "arguments": {
                "tensor": [
                    "int",
                    "str",
                    "numpy.random.RandomState",
                    "T"
                ],
                "idxs": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "sum_out_broadcasted_dims": {
            "name": "sum_out_broadcasted_dims",
            "location": 346,
            "return": [
                "str",
                "int",
                "List[int]",
                "Iterable[Any]",
                "Dict[str,bool]",
                "Dict",
                "float",
                "List",
                "List[cirq.Qid]"
            ],
            "arguments": {
                "grad": [
                    "List",
                    "List[cirq.Qid]"
                ],
                "tensor_shape": [
                    "int",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "Tensor.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict",
                    "bytes",
                    "Dict[str,str]",
                    "str"
                ],
                "requires_grad": [
                    "bool",
                    "List[str]",
                    "str"
                ],
                "depends_on": [
                    "Optional[bool]",
                    "None",
                    "bool",
                    "str",
                    "Optional[float]",
                    "float",
                    "Optional[List[int]]",
                    "List[int]",
                    "Optional[bytes]",
                    "bytes",
                    "Optional[Sequence[Any]]",
                    "Sequence[Any]"
                ]
            }
        },
        "Tensor.__repr__": {
            "name": "__repr__",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tensor.requires_grad": {
            "name": "requires_grad",
            "location": 95,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tensor.data": {
            "name": "data",
            "location": 103,
            "return": [
                "None",
                "int",
                "Final",
                "Dict",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "numpy.ndarray",
                    "Callable",
                    "Optional[Sequence[T]]",
                    "Optional[Union[Any, Any]]",
                    "Iterable[Any]",
                    "T"
                ]
            }
        },
        "Tensor.zero_grad": {
            "name": "zero_grad",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tensor.backward": {
            "name": "backward",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grad": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[int]",
                    "float",
                    "Optional[float]",
                    "bool"
                ]
            }
        },
        "Tensor.no_grad": {
            "name": "no_grad",
            "location": 131,
            "return": [
                "Iterator[None]",
                "Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tensor.__add__": {
            "name": "__add__",
            "location": 139,
            "return": [
                "bool",
                "Tuple[int, int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Tensor.__radd__": {
            "name": "__radd__",
            "location": 142,
            "return": [
                "bool",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Tensor.__iadd__": {
            "name": "__iadd__",
            "location": 145,
            "return": [
                "Tensor"
            ],
            "arguments": {
                "self": [
                    "_TTensor@@Tensor@@"
                ],
                "other": [
                    "Dict",
                    "bool",
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "Tensor.__sub__": {
            "name": "__sub__",
            "location": 149,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Tensor.__rsub__": {
            "name": "__rsub__",
            "location": 152,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Tensor.__isub__": {
            "name": "__isub__",
            "location": 155,
            "return": [
                "Tensor"
            ],
            "arguments": {
                "self": [
                    "_TTensor@@Tensor@@"
                ],
                "other": [
                    "Dict",
                    "bool",
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "Tensor.__mul__": {
            "name": "__mul__",
            "location": 159,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Tensor.__rmul__": {
            "name": "__rmul__",
            "location": 162,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Tensor.__imul__": {
            "name": "__imul__",
            "location": 165,
            "return": [
                "Tensor"
            ],
            "arguments": {
                "self": [
                    "_TTensor@@Tensor@@"
                ],
                "other": [
                    "Dict",
                    "bool",
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "Tensor.__matmul__": {
            "name": "__matmul__",
            "location": 169,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict",
                    "AbstractSet",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "Tensor.__getitem__": {
            "name": "__getitem__",
            "location": 172,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "idxs": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Tensor.sum": {
            "name": "sum",
            "location": 175,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "axis": [
                    "int",
                    "Callable",
                    "None",
                    "str"
                ]
            }
        },
        "_add.grad_fn1": {
            "name": "grad_fn1",
            "location": 198,
            "return": [],
            "arguments": {
                "grad": []
            }
        },
        "_add.grad_fn2": {
            "name": "grad_fn2",
            "location": 205,
            "return": [],
            "arguments": {
                "grad": []
            }
        },
        "_sub.grad_fn1": {
            "name": "grad_fn1",
            "location": 223,
            "return": [],
            "arguments": {
                "grad": []
            }
        },
        "_sub.grad_fn2": {
            "name": "grad_fn2",
            "location": 230,
            "return": [],
            "arguments": {
                "grad": []
            }
        },
        "_mul.grad_fn1": {
            "name": "grad_fn1",
            "location": 255,
            "return": [],
            "arguments": {
                "grad": []
            }
        },
        "_mul.grad_fn2": {
            "name": "grad_fn2",
            "location": 263,
            "return": [],
            "arguments": {
                "grad": []
            }
        },
        "_matmul.grad_fn1": {
            "name": "grad_fn1",
            "location": 286,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "grad": [
                    "numpy.ndarray",
                    "Tuple[int, int]",
                    "int"
                ]
            }
        },
        "_matmul.grad_fn2": {
            "name": "grad_fn2",
            "location": 293,
            "return": [
                "bool",
                "str",
                "List[Dict[str, Any]]",
                "Iterable['Notification']"
            ],
            "arguments": {
                "grad": [
                    "List[List]",
                    "Iterable",
                    "Iterable[Any]",
                    "int"
                ]
            }
        },
        "_sum.grad_fn": {
            "name": "grad_fn",
            "location": 313,
            "return": [],
            "arguments": {
                "grad": []
            }
        },
        "_slice.grad_fn": {
            "name": "grad_fn",
            "location": 331,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "numpy.ndarray",
                "str"
            ],
            "arguments": {
                "grad": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "gustavgrad-master/src/gustavgrad/__init__.py": {},
    "gustavgrad-master/tests/__init__.py": {},
    "gustavgrad-master/tests/function/test_activations.py": {
        "TestActivation.test_sigmoid": {
            "name": "test_sigmoid",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestActivation.test_sigmoid_grad": {
            "name": "test_sigmoid_grad",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestActivation.test_sigmoid_no_grad": {
            "name": "test_sigmoid_no_grad",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestActivation.test_tanh": {
            "name": "test_tanh",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestActivation.test_tanh_grad": {
            "name": "test_tanh_grad",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestActivation.test_tanh_no_grad": {
            "name": "test_tanh_no_grad",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gustavgrad-master/tests/function/__init__.py": {},
    "gustavgrad-master/tests/loss/test_loss.py": {
        "TestLogitBinaryCrossEntropy.targets_and_correct_logits": {
            "name": "targets_and_correct_logits",
            "location": 11,
            "return": [
                "Tuple[(np.ndarray, Any)]"
            ],
            "arguments": {
                "self": [],
                "requires_grad": [
                    "bool",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestLogitBinaryCrossEntropy.targets_and_correct_logits_requires_grad": {
            "name": "targets_and_correct_logits_requires_grad",
            "location": 22,
            "return": [
                "bytearray",
                "float",
                "str",
                "numpy.ndarray",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogitBinaryCrossEntropy.targets_and_correct_logits_requires_no_grad": {
            "name": "targets_and_correct_logits_requires_no_grad",
            "location": 28,
            "return": [
                "numpy.ndarray",
                "int",
                "list",
                "List[T]",
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogitBinaryCrossEntropy.test_binary_cross_entropy_with_logits_correct": {
            "name": "test_binary_cross_entropy_with_logits_correct",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "targets_and_correct_logits_requires_grad": [
                    "Tuple[List[float],gustavgrad.Tensor]",
                    "int",
                    "Tuple[Union[list[float],gustavgrad.Tensor]]",
                    "float"
                ]
            }
        },
        "TestLogitBinaryCrossEntropy.test_binary_cross_entropy_no_grad": {
            "name": "test_binary_cross_entropy_no_grad",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "targets_and_correct_logits_requires_no_grad": [
                    "Tuple[List[float],gustavgrad.Tensor]",
                    "int",
                    "Tuple[Union[list[float],gustavgrad.Tensor]]"
                ]
            }
        },
        "TestLogitBinaryCrossEntropy.test_binary_cross_entropy_with_logits_wrong": {
            "name": "test_binary_cross_entropy_with_logits_wrong",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSquaredErrorLoss.test_squared_error_loss_correct": {
            "name": "test_squared_error_loss_correct",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSquaredErrorLoss.test_squared_error_loss_wrong": {
            "name": "test_squared_error_loss_wrong",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gustavgrad-master/tests/loss/__init__.py": {},
    "gustavgrad-master/tests/module/test_module.py": {
        "TestModule.model": {
            "name": "model",
            "location": 32,
            "return": [
                "Model",
                "str",
                "bool",
                "List[str]",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModule.model_with_non_zero_grad": {
            "name": "model_with_non_zero_grad",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Set[int]",
                    "int",
                    "str"
                ]
            }
        },
        "TestModule.model_with_sub_model": {
            "name": "model_with_sub_model",
            "location": 47,
            "return": [
                "bool",
                "ModelWithSubModel"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModule.model_with_sub_model_and_non_zero_grad": {
            "name": "model_with_sub_model_and_non_zero_grad",
            "location": 51,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "model_with_sub_model": [
                    "int",
                    "torch.Tensor",
                    "Iterable[Parameter]"
                ]
            }
        },
        "TestModule.test_parameters_simple_module": {
            "name": "test_parameters_simple_module",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "TestModule.test_parameters_module_with_sub_module": {
            "name": "test_parameters_module_with_sub_module",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_with_sub_model": [
                    "bool"
                ]
            }
        },
        "TestModule.test_zero_grad_simple_module": {
            "name": "test_zero_grad_simple_module",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_with_non_zero_grad": []
            }
        },
        "TestModule.test_zero_grad_simple_module_with_sub_module": {
            "name": "test_zero_grad_simple_module_with_sub_module",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_with_sub_model_and_non_zero_grad": [
                    "int",
                    "bool"
                ]
            }
        },
        "TestModule.test_no_grad_updates_all_parameter": {
            "name": "test_no_grad_updates_all_parameter",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "TestModule.test_no_grad_resets_all_parameter": {
            "name": "test_no_grad_resets_all_parameter",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "TestModule.test_grad_intact": {
            "name": "test_grad_intact",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_with_non_zero_grad": [
                    "float",
                    "int"
                ]
            }
        },
        "TestModule.Model.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModule.Model.predict": {
            "name": "predict",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "numpy.ndarray"
                ]
            }
        },
        "TestModule.ModelWithSubModel.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModule.ModelWithSubModel.predict": {
            "name": "predict",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "numpy.ndarray",
                    "torch.Tensor",
                    "float",
                    "eagerpy.Tensor"
                ]
            }
        }
    },
    "gustavgrad-master/tests/module/__init__.py": {},
    "gustavgrad-master/tests/optim/test_optim.py": {
        "TestSGD.module_with_grad": {
            "name": "module_with_grad",
            "location": 24,
            "return": [
                "Model"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSGD.module_with_invalidated_grad": {
            "name": "module_with_invalidated_grad",
            "location": 35,
            "return": [
                "Model"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSGD.test_gradient_descent_step": {
            "name": "test_gradient_descent_step",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lr": [
                    "bool",
                    "numpy.dtype"
                ],
                "module_with_grad": [
                    "bool",
                    "numpy.dtype"
                ]
            }
        },
        "TestSGD.test_updates_all_parameters": {
            "name": "test_updates_all_parameters",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocked_function": [
                    "Callable",
                    "mock.Mock",
                    "mock.MagicMock"
                ],
                "module_with_grad": []
            }
        },
        "TestSGD.test_ignores_invalidated_grad": {
            "name": "test_ignores_invalidated_grad",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocked_function": [
                    "Callable",
                    "mock.Mock"
                ],
                "module_with_invalidated_grad": []
            }
        },
        "TestSGD.test_invaldates_gradients": {
            "name": "test_invaldates_gradients",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "module_with_grad": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "TestSGD.Model.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSGD.Model.predict": {
            "name": "predict",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "numpy.ndarray"
                ]
            }
        }
    },
    "gustavgrad-master/tests/optim/__init__.py": {},
    "gustavgrad-master/tests/tensor/test_tensor.py": {
        "TestTensorRepr.test_1d_with_grad": {
            "name": "test_1d_with_grad",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorRepr.test_1d_without_grad": {
            "name": "test_1d_without_grad",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorRepr.test_2d_with_grad": {
            "name": "test_2d_with_grad",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorBasics.test_init_scalar_data": {
            "name": "test_init_scalar_data",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorBasics.test_init_list_data": {
            "name": "test_init_list_data",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorBasics.test_init_ndarray_data": {
            "name": "test_init_ndarray_data",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorBasics.test_reassign_data": {
            "name": "test_reassign_data",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorBasics.test_reassign_data_wrong_shape": {
            "name": "test_reassign_data_wrong_shape",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorBasics.test_backward_without_grad": {
            "name": "test_backward_without_grad",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorBasics.test_backward_without_grad_zero_tensor": {
            "name": "test_backward_without_grad_zero_tensor",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorNoGrad.tensor_with_grad": {
            "name": "tensor_with_grad",
            "location": 72,
            "return": [
                "Tensor",
                "bool",
                "str",
                "Union[numbers.Real,numpy.ndarray]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorNoGrad.test_requires_grad_false_in_context_manager": {
            "name": "test_requires_grad_false_in_context_manager",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorNoGrad.test_requires_grad_resets": {
            "name": "test_requires_grad_resets",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorNoGrad.test_requires_grad_resets_after_exception": {
            "name": "test_requires_grad_resets_after_exception",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorNoGrad.test_dependencies": {
            "name": "test_dependencies",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorNoGrad.test_grad_intact": {
            "name": "test_grad_intact",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tensor_with_grad": [
                    "bool",
                    "Union[int, float]",
                    "float"
                ]
            }
        }
    },
    "gustavgrad-master/tests/tensor/__init__.py": {},
    "gustavgrad-master/tests/tensor/operation/test_add.py": {
        "TestTensorAdd.test_simple_add_result": {
            "name": "test_simple_add_result",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorAdd.test_simple_add_backward": {
            "name": "test_simple_add_backward",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorAdd.test_add_depends_on_requires_grad_true": {
            "name": "test_add_depends_on_requires_grad_true",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorAdd.test_add_depends_on_requires_grad_false": {
            "name": "test_add_depends_on_requires_grad_false",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorAdd.test_simple_add_no_grad": {
            "name": "test_simple_add_no_grad",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorAdd.test_scalar_add_result": {
            "name": "test_scalar_add_result",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorAdd.test_scalar_add_backward": {
            "name": "test_scalar_add_backward",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorAdd.test_array_add_result": {
            "name": "test_array_add_result",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorAdd.test_array_add_backward": {
            "name": "test_array_add_backward",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorAdd.test_scalar_radd_result": {
            "name": "test_scalar_radd_result",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorAdd.test_scalar_radd_backward": {
            "name": "test_scalar_radd_backward",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorAdd.test_broadcasted_add_extra_dimension": {
            "name": "test_broadcasted_add_extra_dimension",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorAdd.test_broadcasted_add_same_dimension": {
            "name": "test_broadcasted_add_same_dimension",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorAdd.test_broadcasted_add_inner_dimension": {
            "name": "test_broadcasted_add_inner_dimension",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorAdd.test_broadcasted_scalar_add": {
            "name": "test_broadcasted_scalar_add",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorAdd.test_inplace_add": {
            "name": "test_inplace_add",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorAdd.test_chained_add": {
            "name": "test_chained_add",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gustavgrad-master/tests/tensor/operation/test_matmul.py": {
        "TestTensorMatMul.test_simple_matmul": {
            "name": "test_simple_matmul",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorMatMul.test_simple_matmul_no_grad": {
            "name": "test_simple_matmul_no_grad",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorMatMul.test_chained_mul_shape": {
            "name": "test_chained_mul_shape",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gustavgrad-master/tests/tensor/operation/test_mul.py": {
        "TestTensorMul.test_simple_mul": {
            "name": "test_simple_mul",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorMul.test_simple_mul_no_grad": {
            "name": "test_simple_mul_no_grad",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorMul.test_scalar_mul": {
            "name": "test_scalar_mul",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorMul.test_array_mul": {
            "name": "test_array_mul",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorMul.test_scalar_rmul": {
            "name": "test_scalar_rmul",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorMul.test_broadcasted_mul1": {
            "name": "test_broadcasted_mul1",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorMul.test_broadcasted_mul2": {
            "name": "test_broadcasted_mul2",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorMul.test_broadcasted_mul3": {
            "name": "test_broadcasted_mul3",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorMul.test_broadcasted_scalar_mul": {
            "name": "test_broadcasted_scalar_mul",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorMul.test_inplace_mul": {
            "name": "test_inplace_mul",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorMul.test_chained_mul": {
            "name": "test_chained_mul",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gustavgrad-master/tests/tensor/operation/test_slice.py": {
        "TestTensorSlice.test_single_slice": {
            "name": "test_single_slice",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorSlice.test_single_slice_no_grad": {
            "name": "test_single_slice_no_grad",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorSlice.test_double_slice": {
            "name": "test_double_slice",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorSlice.test_boolean_slice": {
            "name": "test_boolean_slice",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gustavgrad-master/tests/tensor/operation/test_sub.py": {
        "TestTensorSub.test_simple_sub": {
            "name": "test_simple_sub",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorSub.test_simple_sub_no_grad": {
            "name": "test_simple_sub_no_grad",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorSub.test_scalar_sub": {
            "name": "test_scalar_sub",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorSub.test_array_sub": {
            "name": "test_array_sub",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorSub.test_scalar_rsub": {
            "name": "test_scalar_rsub",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorSub.test_broadcasted_sub1": {
            "name": "test_broadcasted_sub1",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorSub.test_broadcasted_sub2": {
            "name": "test_broadcasted_sub2",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorSub.test_broadcasted_sub3": {
            "name": "test_broadcasted_sub3",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorSub.test_broadcasted_scalar_sub": {
            "name": "test_broadcasted_scalar_sub",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorSub.test_inplace_sub": {
            "name": "test_inplace_sub",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorSub.test_chained_sub": {
            "name": "test_chained_sub",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gustavgrad-master/tests/tensor/operation/test_sum.py": {
        "TestTensorSum.test_simple_sum": {
            "name": "test_simple_sum",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorSum.test_simple_sum_no_grad": {
            "name": "test_simple_sum_no_grad",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorSum.test_axis_sum": {
            "name": "test_axis_sum",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gustavgrad-master/tests/tensor/operation/__init__.py": {}
}
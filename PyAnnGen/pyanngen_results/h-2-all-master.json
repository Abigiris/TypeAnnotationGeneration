{
    "h-2-all-master/h2_all_core/manage.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "h-2-all-master/h2_all_core/core/settings.py": {},
    "h-2-all-master/h2_all_core/core/urls.py": {},
    "h-2-all-master/h2_all_core/core/wsgi.py": {},
    "h-2-all-master/h2_all_core/core/__init__.py": {},
    "h-2-all-master/h2_all_core/core/handlers/mongodb_handler.py": {
        "MongoDbStorageHandler.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoDbStorageHandler.write": {
            "name": "write",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "collec": [
                    "str",
                    "bool",
                    "Optional[Dict]",
                    "dict[, ]",
                    "int",
                    "None"
                ],
                "data": [
                    "Dict[str, List[int]]",
                    "dict[str, list[int]]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "MongoDbStorageHandler.read": {
            "name": "read",
            "location": 31,
            "return": [
                "typing.List[typing.Dict]",
                "None"
            ],
            "arguments": {
                "self": [],
                "collec": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "MongoDbStorageHandler.find": {
            "name": "find",
            "location": 34,
            "return": [
                "int",
                "List[Tuple[str, str]]",
                "type",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "q": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Tuple[float, float]]",
                    "list[tuple[typing.Union[float,float]]]"
                ],
                "c": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Tuple[float, float]]",
                    "list[tuple[typing.Union[float,float]]]"
                ]
            }
        },
        "MongoDbStorageHandler.fetch_all": {
            "name": "fetch_all",
            "location": 37,
            "return": [
                "list[]",
                "list[dict[, ]]",
                "List[str]",
                "List[int]",
                "str",
                "Optional[dict]",
                "int"
            ],
            "arguments": {
                "self": [],
                "collec": [
                    "list",
                    "int",
                    "list[]",
                    "AsyncIterator[T]",
                    "collections.abc.AsyncIterator",
                    "Set[Optional[str]]",
                    "set[typing.Optional[str]]"
                ]
            }
        }
    },
    "h-2-all-master/h2_all_core/core/handlers/__init__.py": {},
    "h-2-all-master/h2_all_core/frontend/admin.py": {},
    "h-2-all-master/h2_all_core/frontend/apps.py": {},
    "h-2-all-master/h2_all_core/frontend/form.py": {},
    "h-2-all-master/h2_all_core/frontend/models.py": {},
    "h-2-all-master/h2_all_core/frontend/tests.py": {},
    "h-2-all-master/h2_all_core/frontend/urls.py": {},
    "h-2-all-master/h2_all_core/frontend/views.py": {
        "home": {
            "name": "home",
            "location": 10,
            "return": [
                "int",
                "str",
                "rotkehlchen.db.dbhandler.DBHandler"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "make_stats": {
            "name": "make_stats",
            "location": 16,
            "return": [
                "dict[typing.Text, bool]",
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "borehole": [
                    "Callable[[int], None]",
                    "typing.Callable[int, None]",
                    "float",
                    "Sequence[T]",
                    "str",
                    "typing.Sequence[T]"
                ]
            }
        },
        "borehole": {
            "name": "borehole",
            "location": 25,
            "return": [
                "int",
                "str",
                "rotkehlchen.db.dbhandler.DBHandler"
            ],
            "arguments": {
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest"
                ],
                "borehole_id": [
                    "int",
                    "str",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "price_list": {
            "name": "price_list",
            "location": 31,
            "return": [
                "Dict[str, List[str]]",
                "bool",
                "Dict[str, dict]",
                "List[str]"
            ],
            "arguments": {
                "request": [
                    "typing.Callable[, ]",
                    "django.http.HttpRequest",
                    "Callable"
                ]
            }
        },
        "create_price": {
            "name": "create_price",
            "location": 38,
            "return": [
                "dict",
                "str",
                "int",
                "zerver.models.UserProfile",
                "tracim.models.auth.User"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "create_borehole": {
            "name": "create_borehole",
            "location": 53,
            "return": [
                "dict",
                "str",
                "int",
                "zerver.models.UserProfile",
                "tracim.models.auth.User"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ],
                "borehole_id": [
                    "int",
                    "None",
                    "bool",
                    "list[str]",
                    "Exception",
                    "Optional[List[str]]",
                    "str",
                    "Union[Exception, str]",
                    "Optional[django.http.HttpRequest]",
                    "Union['HTMLSession', 'AsyncHTMLSession']",
                    "Optional[str]"
                ]
            }
        },
        "stat": {
            "name": "stat",
            "location": 74,
            "return": [
                "int",
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "request": [
                    "int",
                    "django.http.HttpRequest",
                    "str",
                    "list[str]",
                    "List[str]"
                ]
            }
        }
    },
    "h-2-all-master/h2_all_core/frontend/__init__.py": {},
    "h-2-all-master/h2_all_core/frontend/handlers/data_handlers.py": {
        "BoreHoleMongoHandler.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoreHoleMongoHandler.borehole_schema": {
            "name": "borehole_schema",
            "location": 9,
            "return": [
                "dict[typing.Text, typing.Union[None,list[]]]",
                "Union[str, Sequence[str]]",
                "int",
                "Mapping",
                "float",
                "List[Union[\"PipeChain\", str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoreHoleMongoHandler.stats_schema": {
            "name": "stats_schema",
            "location": 19,
            "return": [
                "dict[typing.Text, None]",
                "dict",
                "Dict[str, Any]",
                "Optional[int]",
                "Optional[bool]",
                "Dict[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoreHoleMongoHandler.fetch": {
            "name": "fetch",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "bool",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Mapping[str, T]",
                    "typing.Mapping",
                    "T",
                    "typing.Sequence[typing.Any]",
                    "Optional[Sequence[Any]]",
                    "tuple[typing.Union[list[str],typing.Any,None,typing.Any,None]]",
                    "Tuple[List[str], Optional[Any], Optional[Any]]",
                    "list[dict[str, typing.Any]]",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "BoreHoleMongoHandler.edit_price": {
            "name": "edit_price",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "phone_number": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "price": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "BoreHoleMongoHandler.create_new_borehole": {
            "name": "create_new_borehole",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "bh": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "BoreHoleMongoHandler.add_statistics": {
            "name": "add_statistics",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "phone_number": [
                    "int",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "stats": [
                    "int",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        }
    },
    "h-2-all-master/h2_all_core/frontend/handlers/__init__.py": {},
    "h-2-all-master/h2_all_core/utilities/urls.py": {},
    "h-2-all-master/h2_all_core/utilities/communication/urls.py": {},
    "h-2-all-master/h2_all_core/utilities/communication/views.py": {
        "CallbackHandler.post": {
            "name": "post",
            "location": 9,
            "return": [
                "JsonResponse",
                "List[Dict[str, Any]]",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Exception",
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "h-2-all-master/h2_all_core/utilities/communication/handlers/AbstractComunication.py": {
        "AbstractCommunication.store_message": {
            "name": "store_message",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractCommunication.receive_message": {
            "name": "receive_message",
            "location": 9,
            "return": [
                "dict[, ]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool"
                ]
            }
        }
    },
    "h-2-all-master/h2_all_core/utilities/communication/handlers/SMSCommunication.py": {
        "parse_store_message": {
            "name": "parse_store_message",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "text_data": [
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "dict",
                    "Tuple[int, int]",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, str]",
                    "int"
                ]
            }
        },
        "SMSCommunicationHandler.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SMSCommunicationHandler.send_message": {
            "name": "send_message",
            "location": 55,
            "return": [
                "bytes",
                "dict[, ]",
                "int",
                "dict[str, str]",
                "dict",
                "dict[int, str]",
                "Dict[str, str]",
                "dict[str, int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Dict[str, Any]",
                    "bytes",
                    "dict[str, typing.Any]",
                    "str",
                    "bool"
                ],
                "recipient": [
                    "Dict[str, Any]",
                    "bytes",
                    "dict[str, typing.Any]",
                    "str",
                    "bool"
                ]
            }
        },
        "SMSCommunicationHandler.receive_message": {
            "name": "receive_message",
            "location": 64,
            "return": [
                "dict[typing.Text, typing.Text]",
                "str",
                "List[Dict[str, Any]]",
                "django.db.models.query.QuerySet",
                "dict",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "h-2-all-master/h2_all_core/utilities/communication/handlers/__init__.py": {},
    "h-2-all-master/h2_all_wtp/manage.py": {
        "SimpleManager.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sim": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "SimpleManager.validate_sms": {
            "name": "validate_sms",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "sms": [
                    "Sequence[Hashable]",
                    "bytes",
                    "Sequence[str]"
                ]
            }
        },
        "SimpleManager.handle_sms": {
            "name": "handle_sms",
            "location": 19,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "h-2-all-master/h2_all_wtp/handlers/settings.py": {},
    "h-2-all-master/h2_all_wtp/handlers/sim800l_handler.py": {
        "convert_to_string": {
            "name": "convert_to_string",
            "location": 6,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "float"
            ],
            "arguments": {
                "buf": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "SIM800L.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SIM800L.callback_incoming": {
            "name": "callback_incoming",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "action": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "SIM800L.callback_no_carrier": {
            "name": "callback_no_carrier",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "action": [
                    "tuple",
                    "Tuple[str, str, str]"
                ]
            }
        },
        "SIM800L.callback_credit_action": {
            "name": "callback_credit_action",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "action": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "SIM800L.get_clip": {
            "name": "get_clip",
            "location": 41,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SIM800L.callback_msg": {
            "name": "callback_msg",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "action": [
                    "list",
                    "str"
                ]
            }
        },
        "SIM800L.get_msgid": {
            "name": "get_msgid",
            "location": 47,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SIM800L.command": {
            "name": "command",
            "location": 50,
            "return": [
                "Optional[str]",
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "cmdstr": [
                    "str",
                    "Sequence[Any]",
                    "dict"
                ],
                "lines": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "waitfor": [
                    "Sequence[str]",
                    "Tuple[str, str]",
                    "str",
                    "os.DirEntry",
                    "List[str]",
                    "bool"
                ],
                "msgtext": [
                    "str",
                    "Sequence[Any]",
                    "dict"
                ]
            }
        },
        "SIM800L.send_sms": {
            "name": "send_sms",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "destno": [
                    "str"
                ],
                "msgtext": [
                    "str"
                ]
            }
        },
        "SIM800L.read_and_delete_all": {
            "name": "read_and_delete_all",
            "location": 87,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SIM800L.read_sms": {
            "name": "read_sms",
            "location": 93,
            "return": [
                "int",
                "str",
                "Union[str, int]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ]
            }
        },
        "SIM800L.delete_sms": {
            "name": "delete_sms",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "SIM800L.check_incoming": {
            "name": "check_incoming",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SIM800L.setup": {
            "name": "setup",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "h-2-all-master/h2_all_wtp/handlers/simple_data_handler.py": {
        "SimpleDataHandler.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleDataHandler.validate_secret_key": {
            "name": "validate_secret_key",
            "location": 10,
            "return": [
                "bool",
                "dict",
                "Dict[str, Dict[str, str]]",
                "Dict[int, Dict[int, Any]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "secret_key": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "SimpleDataHandler.read_price": {
            "name": "read_price",
            "location": 13,
            "return": [
                "int",
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleDataHandler.edit_price": {
            "name": "edit_price",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "sms": [
                    "str"
                ]
            }
        }
    },
    "h-2-all-master/h2_all_wtp/handlers/utils.py": {
        "get_amount_and_name": {
            "name": "get_amount_and_name",
            "location": 2,
            "return": [
                "None",
                "dict",
                "Callable[[str], Any]",
                "str"
            ],
            "arguments": {
                "message": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "h-2-all-master/h2_all_wtp/handlers/water_handlers.py": {},
    "h-2-all-master/h2_all_wtp/handlers/__init__.py": {}
}
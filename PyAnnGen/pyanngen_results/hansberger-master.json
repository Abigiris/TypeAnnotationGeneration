{
    "hansberger-master/manage.py": {},
    "hansberger-master/config/urls.py": {},
    "hansberger-master/config/wsgi.py": {},
    "hansberger-master/config/__init__.py": {},
    "hansberger-master/config/settings/base.py": {},
    "hansberger-master/config/settings/local.py": {},
    "hansberger-master/config/settings/production.py": {},
    "hansberger-master/config/settings/test.py": {},
    "hansberger-master/config/settings/__init__.py": {},
    "hansberger-master/docs/conf.py": {},
    "hansberger-master/docs/__init__.py": {},
    "hansberger-master/hansberger/conftest.py": {
        "media_storage": {
            "name": "media_storage",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "settings": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "list[str]"
                ],
                "tmpdir": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "list[str]"
                ]
            }
        },
        "user": {
            "name": "user",
            "location": 14,
            "return": [
                "UserFactory",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "request_factory": {
            "name": "request_factory",
            "location": 19,
            "return": [
                "RequestFactory",
                "int",
                "List[Dict[str, Any]]",
                "bool",
                "list"
            ],
            "arguments": {}
        }
    },
    "hansberger-master/hansberger/routing.py": {},
    "hansberger-master/hansberger/__init__.py": {},
    "hansberger-master/hansberger/analysis/admin.py": {},
    "hansberger-master/hansberger/analysis/apps.py": {
        "AnalysisConfig.ready": {
            "name": "ready",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hansberger-master/hansberger/analysis/consumers.py": {
        "analysis_logger_decorator": {
            "name": "analysis_logger_decorator",
            "location": 14,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "bottleneck_logger_decorator": {
            "name": "bottleneck_logger_decorator",
            "location": 23,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Singleton.__call__": {
            "name": "__call__",
            "location": 8,
            "return": [],
            "arguments": {
                "cls": [
                    "Singleton"
                ]
            }
        },
        "analysis_logger_decorator.wrapper": {
            "name": "wrapper",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": []
            }
        },
        "bottleneck_logger_decorator.wrapper": {
            "name": "wrapper",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "instance": []
            }
        },
        "StatusHolder.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusHolder.set_status": {
            "name": "set_status",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "StatusHolder.set_limit": {
            "name": "set_limit",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "dict[str, typing.Any]",
                    "int",
                    "Dict[str, Any]",
                    "str",
                    "list[float]",
                    "List[float]",
                    "list[str]",
                    "List[str]",
                    "T"
                ]
            }
        },
        "StatusHolder.get_status": {
            "name": "get_status",
            "location": 47,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusHolder.get_limit": {
            "name": "get_limit",
            "location": 50,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusHolder.reset": {
            "name": "reset",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusHolder.set_kill": {
            "name": "set_kill",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusHolder.get_kill": {
            "name": "get_kill",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalysisConsumer.connect": {
            "name": "connect",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalysisConsumer.disconnect": {
            "name": "disconnect",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "close_code": [
                    "str",
                    "bool",
                    "typing.Callable[, ]",
                    "int",
                    "None",
                    "Callable",
                    "Optional[str]"
                ]
            }
        },
        "AnalysisConsumer.receive": {
            "name": "receive",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text_data": [
                    "str",
                    "bytes",
                    "float",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "hansberger-master/hansberger/analysis/forms.py": {
        "analysis_name_unique_check": {
            "name": "analysis_name_unique_check",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "tracim.models.User"
                ],
                "research": [
                    "str",
                    "tracim.models.User"
                ]
            }
        },
        "DatasetAnalysisCreationForm.window_overlap_checks": {
            "name": "window_overlap_checks",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "window_size": [
                    "bool",
                    "int",
                    "List[str]"
                ],
                "window_overlap": [
                    "int",
                    "slice"
                ],
                "dataset": [
                    "float",
                    "tuple",
                    "int",
                    "Optional[List[str]]"
                ]
            }
        },
        "FiltrationAnalysisCreationForm_Dataset.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "research": [
                    "bool",
                    "salon.models.Stylist",
                    "grpy.core.models.Grouping"
                ]
            }
        },
        "FiltrationAnalysisCreationForm_Dataset.clean": {
            "name": "clean",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FiltrationAnalysisCreationForm_Precomputed.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "research": [
                    "list[str]",
                    "List[str]",
                    "typing.Mapping",
                    "T",
                    "Mapping[str, Any]"
                ]
            }
        },
        "FiltrationAnalysisCreationForm_Precomputed.clean": {
            "name": "clean",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapperAnalysisCreationForm_Dataset.__init__": {
            "name": "__init__",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "research": [
                    "bool",
                    "salon.models.Stylist",
                    "grpy.core.models.Grouping"
                ]
            }
        },
        "MapperAnalysisCreationForm_Dataset.clean": {
            "name": "clean",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapperAnalysisCreationForm_Precomputed.__init__": {
            "name": "__init__",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "research": [
                    "list[str]",
                    "List[str]",
                    "typing.Mapping",
                    "T",
                    "Mapping[str, Any]"
                ]
            }
        },
        "MapperAnalysisCreationForm_Precomputed.clean": {
            "name": "clean",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalysisBottleneckCreationForm.__init__": {
            "name": "__init__",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_homology": [
                    "int"
                ]
            }
        },
        "WindowBottleneckCreationForm.__init__": {
            "name": "__init__",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_homology": [
                    "int"
                ]
            }
        }
    },
    "hansberger-master/hansberger/analysis/routing.py": {},
    "hansberger-master/hansberger/analysis/signals.py": {},
    "hansberger-master/hansberger/analysis/tests.py": {},
    "hansberger-master/hansberger/analysis/urls.py": {},
    "hansberger-master/hansberger/analysis/views.py": {
        "SourceChoice": {
            "name": "SourceChoice",
            "location": 52,
            "return": [
                "str",
                "Iterable[str]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ],
                "research_slug": [
                    "int",
                    "django.http.HttpRequest"
                ]
            }
        },
        "AnalysisBottleneckCreateView": {
            "name": "AnalysisBottleneckCreateView",
            "location": 505,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Mapping[str, Any]",
                "Callable"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ],
                "research_slug": [
                    "int",
                    "str",
                    "django.http.HttpRequest",
                    "zam_repondeur.models.Team",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "analysis_slug": [
                    "int",
                    "str",
                    "django.http.HttpRequest",
                    "zam_repondeur.models.Team",
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "WindowBottleneckCreateView": {
            "name": "WindowBottleneckCreateView",
            "location": 532,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[int, str]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "users.models.JustfixUser",
                    "zam_repondeur.models.Team",
                    "zerver.models.UserProfile"
                ],
                "research_slug": [
                    "int",
                    "list[dict[str, typing.Any]]",
                    "bool",
                    "zerver.models.UserProfile",
                    "List[Dict[str, Any]]"
                ],
                "analysis_slug": [
                    "int",
                    "bool",
                    "zerver.models.UserProfile"
                ],
                "window_slug": [
                    "int",
                    "dict[str, str]",
                    "django.http.HttpRequest",
                    "Dict[str, str]",
                    "bool",
                    "salon.models.Stylist"
                ]
            }
        },
        "AnalysisDetailView.get": {
            "name": "get",
            "location": 76,
            "return": [
                "int",
                "djmoney.contrib.exchange.models.Rate",
                "bytes",
                "Optional[Dict]",
                "bool",
                "Dict[str, tonga.models.structs.positioning.BasePositioning]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "django.http.HttpRequest"
                ]
            }
        },
        "AnalysisDeleteView.get_object": {
            "name": "get_object",
            "location": 98,
            "return": [
                "str",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalysisDeleteView.get_success_url": {
            "name": "get_success_url",
            "location": 109,
            "return": [
                "Callable",
                "str",
                "int",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalysisListView.get_context_data": {
            "name": "get_context_data",
            "location": 121,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalysisListView.get_queryset": {
            "name": "get_queryset",
            "location": 126,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "FiltrationAnalysisCreateView.get_template_names": {
            "name": "get_template_names",
            "location": 144,
            "return": [
                "typing.Text",
                "str",
                "Dict[str, Any]",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "FiltrationAnalysisCreateView.get_form_class": {
            "name": "get_form_class",
            "location": 151,
            "return": [
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FiltrationAnalysisCreateView.get_success_url": {
            "name": "get_success_url",
            "location": 154,
            "return": [
                "List[str]",
                "str",
                "salon.models.Stylist",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FiltrationAnalysisCreateView.get_context_data": {
            "name": "get_context_data",
            "location": 160,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FiltrationAnalysisCreateView.get_form_kwargs": {
            "name": "get_form_kwargs",
            "location": 165,
            "return": [
                "dict",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FiltrationAnalysisCreateView.form_valid": {
            "name": "form_valid",
            "location": 174,
            "return": [
                "int",
                "List[str]",
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "Dict[str, str]",
                    "tartare.core.contexContributorExportContext",
                    "cmk.utils.type_defs.ServiceName",
                    "cmk.utils.type_defs.HostName",
                    "blurr.core.record.Record"
                ]
            }
        },
        "FiltrationAnalysisCreateView.post": {
            "name": "post",
            "location": 179,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "List[str]",
                "Callable",
                "bytes",
                "Sequence[int]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "typing.Callable[, ]",
                    "django.http.HttpRequest",
                    "Callable"
                ]
            }
        },
        "MapperAnalysisCreateView.get_template_names": {
            "name": "get_template_names",
            "location": 198,
            "return": [
                "typing.Text",
                "str",
                "Dict[str, Any]",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapperAnalysisCreateView.get_form_class": {
            "name": "get_form_class",
            "location": 204,
            "return": [
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapperAnalysisCreateView.get_success_url": {
            "name": "get_success_url",
            "location": 207,
            "return": [
                "List[str]",
                "str",
                "salon.models.Stylist",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapperAnalysisCreateView.get_context_data": {
            "name": "get_context_data",
            "location": 213,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapperAnalysisCreateView.get_form_kwargs": {
            "name": "get_form_kwargs",
            "location": 218,
            "return": [
                "dict",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapperAnalysisCreateView.form_valid": {
            "name": "form_valid",
            "location": 227,
            "return": [
                "int",
                "List[str]",
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "Dict[str, str]",
                    "tartare.core.contexContributorExportContext",
                    "cmk.utils.type_defs.ServiceName",
                    "cmk.utils.type_defs.HostName",
                    "blurr.core.record.Record"
                ]
            }
        },
        "MapperAnalysisCreateView.post": {
            "name": "post",
            "location": 232,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "List[str]",
                "Callable",
                "bytes",
                "Sequence[int]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "typing.Callable[, ]",
                    "django.http.HttpRequest",
                    "Callable"
                ]
            }
        },
        "MapperAnalysisView.get": {
            "name": "get",
            "location": 248,
            "return": [
                "HttpResponse",
                "dict",
                "Dict[str, str]",
                "int",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, str]",
                    "django.http.HttpRequest",
                    "dict[, ]",
                    "django.http.requesHttpRequest",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "WindowDetailView.get": {
            "name": "get",
            "location": 263,
            "return": [
                "str",
                "Optional[Dict]",
                "tartare.core.models.Job",
                "dict",
                "djmoney.contrib.exchange.models.Rate",
                "Dict[str, str]",
                "Dict[int, Dict]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "django.http.HttpRequest"
                ]
            }
        },
        "WindowListView.get_context_data": {
            "name": "get_context_data",
            "location": 298,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowListView.get_queryset": {
            "name": "get_queryset",
            "location": 303,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowBottleneckView.get": {
            "name": "get",
            "location": 325,
            "return": [
                "str",
                "Optional[Dict]",
                "tartare.core.models.Job",
                "dict",
                "djmoney.contrib.exchange.models.Rate",
                "Dict[str, str]",
                "Dict[int, Dict]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, typing.Any]",
                    "django.http.HttpRequest",
                    "Dict[str, Any]",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "AnalysisConsecutiveBottleneckView.get": {
            "name": "get",
            "location": 352,
            "return": [
                "int",
                "djmoney.contrib.exchange.models.Rate",
                "bytes",
                "Optional[Dict]",
                "bool",
                "Dict[str, tonga.models.structs.positioning.BasePositioning]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, typing.Any]",
                    "django.http.HttpRequest",
                    "Dict[str, Any]",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "AnalysisAlltoallBottleneckView.get": {
            "name": "get",
            "location": 376,
            "return": [
                "int",
                "djmoney.contrib.exchange.models.Rate",
                "bytes",
                "Optional[Dict]",
                "bool",
                "Dict[str, tonga.models.structs.positioning.BasePositioning]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, typing.Any]",
                    "django.http.HttpRequest",
                    "Dict[str, Any]",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "RipserDownloadView.get_object": {
            "name": "get_object",
            "location": 402,
            "return": [
                "str",
                "Iterable[str]",
                "Union[str, bytes]",
                "simulation.core.common.Structure"
            ],
            "arguments": {
                "self": []
            }
        },
        "RipserDownloadView.get_file": {
            "name": "get_file",
            "location": 414,
            "return": [
                "ContentFile",
                "str",
                "Dict[str, str]",
                "List[List[str]]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntropyDownloadView.get_object": {
            "name": "get_object",
            "location": 422,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntropyDownloadView.get_file": {
            "name": "get_file",
            "location": 429,
            "return": [
                "str",
                "ContentFile"
            ],
            "arguments": {
                "self": []
            }
        },
        "BottleneckONEDownloadView.get_object": {
            "name": "get_object",
            "location": 436,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BottleneckONEDownloadView.get_file": {
            "name": "get_file",
            "location": 454,
            "return": [
                "str",
                "ContentFile"
            ],
            "arguments": {
                "self": []
            }
        },
        "BottleneckALLDownloadView.get_object": {
            "name": "get_object",
            "location": 464,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BottleneckALLDownloadView.get_file": {
            "name": "get_file",
            "location": 477,
            "return": [
                "str",
                "ContentFile"
            ],
            "arguments": {
                "self": []
            }
        },
        "BottleneckCONSDownloadView.get_object": {
            "name": "get_object",
            "location": 485,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BottleneckCONSDownloadView.get_file": {
            "name": "get_file",
            "location": 498,
            "return": [
                "str",
                "ContentFile"
            ],
            "arguments": {
                "self": []
            }
        },
        "ALLBottleneckDeleteView.get_object": {
            "name": "get_object",
            "location": 561,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ALLBottleneckDeleteView.get_success_url": {
            "name": "get_success_url",
            "location": 574,
            "return": [
                "List[str]",
                "str",
                "salon.models.Stylist",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CONSBottleneckDeleteView.get_object": {
            "name": "get_object",
            "location": 586,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CONSBottleneckDeleteView.get_success_url": {
            "name": "get_success_url",
            "location": 599,
            "return": [
                "List[str]",
                "str",
                "salon.models.Stylist",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ONEBottleneckDeleteView.get_object": {
            "name": "get_object",
            "location": 611,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ONEBottleneckDeleteView.get_success_url": {
            "name": "get_success_url",
            "location": 629,
            "return": [
                "rotkehlchen.db.dbhandler.DBHandler",
                "Dict[str, Any]",
                "Iterable[int]",
                "bytearray",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hansberger-master/hansberger/analysis/__init__.py": {},
    "hansberger-master/hansberger/analysis/migrations/0001_initial.py": {},
    "hansberger-master/hansberger/analysis/migrations/0002_auto_20190628_1222.py": {},
    "hansberger-master/hansberger/analysis/migrations/__init__.py": {},
    "hansberger-master/hansberger/analysis/models/analysis.py": {
        "single_run": {
            "name": "single_run",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": []
            }
        },
        "multiple_run": {
            "name": "multiple_run",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [],
                "window_generator": []
            }
        },
        "multiple_run_precomputed": {
            "name": "multiple_run_precomputed",
            "location": 425,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [],
                "precomputed_matrixes": []
            }
        },
        "run_analysis": {
            "name": "run_analysis",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": []
            }
        },
        "Analysis.precomputed_directory_path": {
            "name": "precomputed_directory_path",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "instance": [
                    "Analysis"
                ],
                "filename": []
            }
        },
        "Analysis.get_type": {
            "name": "get_type",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Analysis.get_expected_window_number": {
            "name": "get_expected_window_number",
            "location": 88,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Analysis.__str__": {
            "name": "__str__",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Analysis.save": {
            "name": "save",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapperAnalysis.save": {
            "name": "save",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapperAnalysis.execute": {
            "name": "execute",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "distance_matrix": [],
                "original_matrix": [],
                "number": [
                    "int"
                ]
            }
        },
        "MapperAnalysis.get_window_number": {
            "name": "get_window_number",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FiltrationAnalysis.save": {
            "name": "save",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FiltrationAnalysis.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 298,
            "return": [
                "tuple[typing.Union[typing.Text,tuple[],dict[typing.Text, ]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FiltrationAnalysis.execute": {
            "name": "execute",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_matrix": [],
                "number": [
                    "int"
                ]
            }
        },
        "FiltrationAnalysis.get_entropy_data": {
            "name": "get_entropy_data",
            "location": 309,
            "return": [
                "dict[typing.Text, list[]]"
            ],
            "arguments": {
                "self": [],
                "normalized": []
            }
        },
        "FiltrationAnalysis.plot_entropy": {
            "name": "plot_entropy",
            "location": 321,
            "return": [],
            "arguments": {
                "self": [],
                "normalized": []
            }
        },
        "FiltrationAnalysis.get_entropy_csv": {
            "name": "get_entropy_csv",
            "location": 332,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FiltrationAnalysis.bottleneck_calculation_consecutive": {
            "name": "bottleneck_calculation_consecutive",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "homology": []
            }
        },
        "FiltrationAnalysis.bottleneck_calculation_alltoall": {
            "name": "bottleneck_calculation_alltoall",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "homology": []
            }
        },
        "FiltrationAnalysis.get_bottleneck": {
            "name": "get_bottleneck",
            "location": 362,
            "return": [],
            "arguments": {
                "self": [],
                "kind": [],
                "homology": []
            }
        },
        "FiltrationAnalysis.get_window_number": {
            "name": "get_window_number",
            "location": 365,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "hansberger-master/hansberger/analysis/models/bottleneck.py": {
        "BottleneckManager.create_bottleneck": {
            "name": "create_bottleneck",
            "location": 17,
            "return": [
                "bool",
                "float",
                "str",
                "list[float]",
                "int",
                "bytes",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "str",
                    "dict[str, str]",
                    "int",
                    "jgikbase.idmapping.core.user.AuthsourceID",
                    "Dict[str, str]",
                    "accounts.models.Account"
                ],
                "kind": [
                    "str",
                    "bytes",
                    "float"
                ],
                "homology": [
                    "str",
                    "dict[str, str]",
                    "int",
                    "jgikbase.idmapping.core.user.AuthsourceID",
                    "Dict[str, str]",
                    "accounts.models.Account"
                ]
            }
        },
        "DiagramManager.create_diagram": {
            "name": "create_diagram",
            "location": 26,
            "return": [
                "Optional[str]",
                "str",
                "Union[None, str]",
                "Callable",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "bottleneck": [
                    "bool",
                    "int",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "Optional[dict]",
                    "None"
                ],
                "window1": [
                    "bool",
                    "int",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "Optional[dict]",
                    "None"
                ],
                "window2": [
                    "bool",
                    "int",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "Optional[dict]",
                    "None"
                ],
                "value": [
                    "bool",
                    "int",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "Optional[dict]",
                    "None"
                ],
                "image": [
                    "bool",
                    "int",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "Optional[dict]",
                    "None"
                ]
            }
        },
        "Bottleneck.manage_persim_crash": {
            "name": "manage_persim_crash",
            "location": 50,
            "return": [
                "Tuple[(int, str)]"
            ],
            "arguments": {
                "self": [],
                "window": [
                    "str",
                    "bool",
                    "list[str]",
                    "List[str]",
                    "zerver.models.Message"
                ],
                "other_window_name": [
                    "str"
                ]
            }
        },
        "Bottleneck.__bottleneck": {
            "name": "__bottleneck",
            "location": 65,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "reference_window": [
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "window": [
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Bottleneck.bottleneck_calculation_CONS": {
            "name": "bottleneck_calculation_CONS",
            "location": 79,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "windows": [
                    "dict[str, typing.Any]",
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "list[dict[, ]]",
                    "List[Dict]"
                ]
            }
        },
        "Bottleneck.bottleneck_calculation_ONE": {
            "name": "bottleneck_calculation_ONE",
            "location": 94,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "windows": [
                    "dict[str, typing.Any]",
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "list[dict[, ]]",
                    "List[Dict]"
                ]
            }
        },
        "Bottleneck.bottleneck_calculation_ALL": {
            "name": "bottleneck_calculation_ALL",
            "location": 105,
            "return": [
                "None",
                "app.models.Article",
                "int"
            ],
            "arguments": {
                "self": [],
                "batch_1": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "Optional[Dict]",
                    "dict",
                    "Dict[str, Any]",
                    "BaseException",
                    "bool"
                ],
                "batch_2": [
                    "str",
                    "set[]",
                    "int",
                    "numpy.ndarray",
                    "Sequence[str]",
                    "set",
                    "Iterable[str]"
                ]
            }
        },
        "Bottleneck.plot_bottleneck": {
            "name": "plot_bottleneck",
            "location": 120,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "window1": [
                    "bool",
                    "str",
                    "dict[str, str]",
                    "set[str]",
                    "numpy.ndarray",
                    "None",
                    "models.Submission",
                    "Dict[str, str]",
                    "Optional[Set[str]]",
                    "int"
                ],
                "window2": [
                    "bool",
                    "str",
                    "dict[str, str]",
                    "set[str]",
                    "numpy.ndarray",
                    "None",
                    "models.Submission",
                    "Dict[str, str]",
                    "Optional[Set[str]]",
                    "int"
                ],
                "matchidx": [
                    "bool",
                    "str",
                    "dict[str, str]",
                    "set[str]",
                    "numpy.ndarray",
                    "None",
                    "models.Submission",
                    "Dict[str, str]",
                    "Optional[Set[str]]",
                    "int"
                ],
                "D": [
                    "bool",
                    "str",
                    "dict[str, str]",
                    "set[str]",
                    "numpy.ndarray",
                    "None",
                    "models.Submission",
                    "Dict[str, str]",
                    "Optional[Set[str]]",
                    "int"
                ]
            }
        },
        "Bottleneck.run_bottleneck": {
            "name": "run_bottleneck",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bottleneck.get_bottleneck_matrix": {
            "name": "get_bottleneck_matrix",
            "location": 138,
            "return": [
                "float",
                "str",
                "Callable",
                "bool",
                "Dict[str, Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bottleneck.get_diagrams": {
            "name": "get_diagrams",
            "location": 189,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hansberger-master/hansberger/analysis/models/window.py": {
        "window_batch_generator": {
            "name": "window_batch_generator",
            "location": 16,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "analysis": [
                    "dict[typing.Hashable, typing.Any]",
                    "int",
                    "viewer.models.Gallery",
                    "typing.Mapping",
                    "Dict[Hashable, Any]",
                    "ddionrails.studies.models.Study",
                    "bool",
                    "Mapping[str, Any]"
                ]
            }
        },
        "WindowManager.create_window": {
            "name": "create_window",
            "location": 27,
            "return": [
                "str",
                "int",
                "tuple[typing.Union[typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any]]",
                "bool",
                "dict[str, str]",
                "set[str]",
                "tuple[typing.Union[str,str]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "analysis": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Window.save_window_info": {
            "name": "save_window_info",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.save": {
            "name": "save",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FiltrationWindow.save_data": {
            "name": "save_data",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "list[]",
                    "str",
                    "list",
                    "set"
                ]
            }
        },
        "FiltrationWindow.save_diagram": {
            "name": "save_diagram",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "diagrams": [
                    "str",
                    "dict[str, str]",
                    "bool",
                    "Dict[str, str]",
                    "io.TextIO",
                    "int"
                ]
            }
        },
        "FiltrationWindow.get_diagram": {
            "name": "get_diagram",
            "location": 82,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "homology": [
                    "int",
                    "list[numpy.array]",
                    "str",
                    "Union[numpy.ndarray, numpy.void]",
                    "List[numpy.array]",
                    "numpy.ndarray"
                ]
            }
        },
        "FiltrationWindow.save_matrix_json": {
            "name": "save_matrix_json",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "analysis_result_matrix": [
                    "bool",
                    "str",
                    "Dict[str, str]",
                    "Union[Sequence[str], str]",
                    "Optional[str]"
                ]
            }
        },
        "FiltrationWindow.save_entropy_json": {
            "name": "save_entropy_json",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "diagrams": [
                    "dict[, ]",
                    "bool",
                    "str",
                    "dict",
                    "tuple[tuple[typing.Union[str,...]]]",
                    "Tuple[Tuple[str, ...]]"
                ]
            }
        },
        "FiltrationWindow.calculate_entropy": {
            "name": "calculate_entropy",
            "location": 107,
            "return": [
                "int",
                "bool",
                "dict",
                "float",
                "numpy.ndarray",
                "str"
            ],
            "arguments": {
                "ripser_matrix": [
                    "int",
                    "list",
                    "float",
                    "List[int]"
                ],
                "normalize": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict"
                ]
            }
        },
        "FiltrationWindow.plot": {
            "name": "plot",
            "location": 122,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "diagrams": [
                    "int",
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "models.Question"
                ]
            }
        },
        "FiltrationWindow.bottleneck_calculation_onetoall": {
            "name": "bottleneck_calculation_onetoall",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "homology": [
                    "int"
                ]
            }
        },
        "FiltrationWindow.get_bottleneck": {
            "name": "get_bottleneck",
            "location": 141,
            "return": [
                "str",
                "List[Dict]",
                "int"
            ],
            "arguments": {
                "self": [],
                "homology": [
                    "str",
                    "typing.Callable[, ]",
                    "int",
                    "None",
                    "Callable",
                    "djmoney.contrib.exchange.models.Rate",
                    "zerver.models.Realm",
                    "Optional[str]",
                    "Callable[[str], T]"
                ]
            }
        },
        "FiltrationWindow.get_window_number": {
            "name": "get_window_number",
            "location": 144,
            "return": [
                "str",
                "Callable",
                "Mapping[str, Any]",
                "models.Payment"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapperWindow.save_data": {
            "name": "save_data",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_graph": [
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "hansberger-master/hansberger/analysis/models/__init__.py": {},
    "hansberger-master/hansberger/contrib/__init__.py": {},
    "hansberger-master/hansberger/contrib/sites/__init__.py": {},
    "hansberger-master/hansberger/contrib/sites/migrations/0001_initial.py": {},
    "hansberger-master/hansberger/contrib/sites/migrations/0002_alter_domain_unique.py": {},
    "hansberger-master/hansberger/contrib/sites/migrations/0003_set_site_domain_and_name.py": {
        "update_site_forward": {
            "name": "update_site_forward",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "update_site_backward": {
            "name": "update_site_backward",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        }
    },
    "hansberger-master/hansberger/contrib/sites/migrations/__init__.py": {},
    "hansberger-master/hansberger/datasets/admin.py": {},
    "hansberger-master/hansberger/datasets/apps.py": {
        "DatasetsConfig.ready": {
            "name": "ready",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hansberger-master/hansberger/datasets/forms.py": {
        "dataset_name_unique_check": {
            "name": "dataset_name_unique_check",
            "location": 5,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int"
                ],
                "research": [
                    "str",
                    "int"
                ]
            }
        },
        "DatasetCreationMixin.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetCreationMixin.clean": {
            "name": "clean",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hansberger-master/hansberger/datasets/signals.py": {
        "submission_delete": {
            "name": "submission_delete",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sender": [
                    "str",
                    "bool",
                    "list",
                    "list[]",
                    "IO[str]",
                    "typing.IO"
                ],
                "instance": [
                    "str",
                    "int",
                    "bytes",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Callable]",
                    "list[typing.Callable[, ]]",
                    "Dict[str, float]",
                    "dict[str, float]"
                ]
            }
        }
    },
    "hansberger-master/hansberger/datasets/urls.py": {},
    "hansberger-master/hansberger/datasets/views.py": {
        "DatasetCreateMixin.get_context_data": {
            "name": "get_context_data",
            "location": 15,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetCreateMixin.get_form_kwargs": {
            "name": "get_form_kwargs",
            "location": 23,
            "return": [
                "dict",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetCreateMixin.form_valid": {
            "name": "form_valid",
            "location": 32,
            "return": [
                "int",
                "List[str]",
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "str",
                    "IO",
                    "models.Pkg",
                    "dict"
                ]
            }
        },
        "TextDatasetCreateView.get_success_url": {
            "name": "get_success_url",
            "location": 41,
            "return": [
                "List[str]",
                "str",
                "salon.models.Stylist",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "EDFDatasetCreateView.get_success_url": {
            "name": "get_success_url",
            "location": 52,
            "return": [
                "List[str]",
                "str",
                "salon.models.Stylist",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetDetailView.get_object": {
            "name": "get_object",
            "location": 64,
            "return": [
                "str",
                "bool",
                "set[int]",
                "typing.Iterator",
                "typing.DefaultDict",
                "list[]",
                "dict[str, list[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetListView.get_context_data": {
            "name": "get_context_data",
            "location": 83,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetListView.get_queryset": {
            "name": "get_queryset",
            "location": 88,
            "return": [
                "str",
                "List[str]",
                "dict[str, str]",
                "bool",
                "list[tuple[typing.Union[str,str]]]",
                "dict[, ]",
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal]]",
                "dict[tuple[typing.Union[str,str,typing.Any]], list[typing.Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetDeleteView.get_object": {
            "name": "get_object",
            "location": 103,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetDeleteView.get_success_url": {
            "name": "get_success_url",
            "location": 110,
            "return": [
                "Callable",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hansberger-master/hansberger/datasets/__init__.py": {},
    "hansberger-master/hansberger/datasets/migrations/0001_initial.py": {},
    "hansberger-master/hansberger/datasets/migrations/0002_auto_20190628_2017.py": {},
    "hansberger-master/hansberger/datasets/migrations/0003_auto_20190628_2018.py": {},
    "hansberger-master/hansberger/datasets/migrations/__init__.py": {},
    "hansberger-master/hansberger/datasets/models/dataset.py": {
        "distance_matrix": {
            "name": "distance_matrix",
            "location": 79,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "matrix": [
                    "list[]",
                    "float",
                    "numpy.ndarray",
                    "list"
                ],
                "metric": [
                    "list[]",
                    "float",
                    "numpy.ndarray",
                    "list"
                ]
            }
        },
        "correlation_matrix": {
            "name": "correlation_matrix",
            "location": 86,
            "return": [
                "list[]",
                "str",
                "dict[, ]",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "matrix": [
                    "int",
                    "float",
                    "list[int]",
                    "models.characters.states.Stateful",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "Dataset.__str__": {
            "name": "__str__",
            "location": 41,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.save": {
            "name": "save",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 49,
            "return": [
                "str",
                "bool",
                "float",
                "db.models.Article",
                "List[db.models.Name]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.get_distance_matrix": {
            "name": "get_distance_matrix",
            "location": 58,
            "return": [
                "Optional[str]",
                "Callable",
                "Dict[str, Any]",
                "str",
                "djmoney.contrib.exchange.models.Rate",
                "dict"
            ],
            "arguments": {
                "self": [],
                "metric": [
                    "Mapping[str, Any]",
                    "int",
                    "typing.Mapping",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Dataset.get_correlation_matrix": {
            "name": "get_correlation_matrix",
            "location": 61,
            "return": [
                "Optional[str]",
                "Callable",
                "Dict[str, Any]",
                "str",
                "djmoney.contrib.exchange.models.Rate",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.split_matrix": {
            "name": "split_matrix",
            "location": 64,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "window": [
                    "Mapping",
                    "dict",
                    "Optional[Dict]"
                ],
                "overlap": [
                    "eth.abc.ComputationAPI"
                ]
            }
        },
        "Dataset.get_matrix_data": {
            "name": "get_matrix_data",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hansberger-master/hansberger/datasets/models/edf_dataset.py": {
        "stackplot": {
            "name": "stackplot",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "marray": [
                    "float",
                    "int"
                ],
                "seconds": [
                    "int",
                    "float",
                    "None",
                    "str"
                ],
                "start_time": [
                    "int",
                    "float",
                    "None",
                    "str"
                ],
                "ylabels": [
                    "int",
                    "float",
                    "None",
                    "str"
                ]
            }
        },
        "stackplot_t": {
            "name": "stackplot_t",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "tarray": [
                    "int",
                    "Sequence[Any]"
                ],
                "seconds": [
                    "int",
                    "float",
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "start_time": [
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "ylabels": [
                    "List[int]",
                    "None",
                    "str",
                    "int",
                    "float",
                    "list[int]"
                ]
            }
        },
        "EDFDataset.save": {
            "name": "save",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EDFDataset.edf_to_matrix": {
            "name": "edf_to_matrix",
            "location": 86,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "EDFDataset.plot_EDF": {
            "name": "plot_EDF",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EDFDataset.dataframe": {
            "name": "dataframe",
            "location": 111,
            "return": [
                "str",
                "bytes",
                "Optional[int]",
                "int",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EDFDataset.plot": {
            "name": "plot",
            "location": 115,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EDFDataset.get_matrix_data": {
            "name": "get_matrix_data",
            "location": 123,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hansberger-master/hansberger/datasets/models/text_dataset.py": {
        "TextDataset.save": {
            "name": "save",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextDataset.dataframe": {
            "name": "dataframe",
            "location": 29,
            "return": [
                "str",
                "Tuple[str, str]",
                "django.db.models.Model",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextDataset.plot": {
            "name": "plot",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextDataset.get_matrix_data": {
            "name": "get_matrix_data",
            "location": 45,
            "return": [
                "int",
                "Optional[int]",
                "float",
                "bool",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hansberger-master/hansberger/datasets/models/__init__.py": {},
    "hansberger-master/hansberger/research/admin.py": {},
    "hansberger-master/hansberger/research/apps.py": {
        "ResearchConfig.ready": {
            "name": "ready",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hansberger-master/hansberger/research/forms.py": {
        "research_name_unique_check": {
            "name": "research_name_unique_check",
            "location": 5,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "List[str]",
                    "list[str]",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "ResearchCreationForm.clean": {
            "name": "clean",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hansberger-master/hansberger/research/models.py": {
        "Research.__str__": {
            "name": "__str__",
            "location": 18,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Research.save": {
            "name": "save",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Research.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 26,
            "return": [
                "str",
                "bool",
                "float",
                "db.models.Article",
                "List[db.models.Name]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hansberger-master/hansberger/research/signals.py": {},
    "hansberger-master/hansberger/research/tests.py": {},
    "hansberger-master/hansberger/research/urls.py": {},
    "hansberger-master/hansberger/research/views.py": {},
    "hansberger-master/hansberger/research/__init__.py": {},
    "hansberger-master/hansberger/research/migrations/0001_initial.py": {},
    "hansberger-master/hansberger/research/migrations/__init__.py": {},
    "hansberger-master/hansberger/users/adapters.py": {
        "AccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 10,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "dict"
                ]
            }
        },
        "SocialAccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 15,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "dict"
                ],
                "sociallogin": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "dict"
                ]
            }
        }
    },
    "hansberger-master/hansberger/users/admin.py": {},
    "hansberger-master/hansberger/users/apps.py": {
        "UsersAppConfig.ready": {
            "name": "ready",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hansberger-master/hansberger/users/forms.py": {
        "UserCreationForm.clean_username": {
            "name": "clean_username",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hansberger-master/hansberger/users/models.py": {
        "User.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hansberger-master/hansberger/users/urls.py": {},
    "hansberger-master/hansberger/users/views.py": {
        "UserUpdateView.get_success_url": {
            "name": "get_success_url",
            "location": 34,
            "return": [
                "bool",
                "Dict[int, dict]",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateView.get_object": {
            "name": "get_object",
            "location": 37,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserRedirectView.get_redirect_url": {
            "name": "get_redirect_url",
            "location": 48,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hansberger-master/hansberger/users/__init__.py": {},
    "hansberger-master/hansberger/users/migrations/0001_initial.py": {},
    "hansberger-master/hansberger/users/migrations/__init__.py": {},
    "hansberger-master/hansberger/users/tests/factories.py": {
        "UserFactory.password": {
            "name": "password",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "create": [
                    "int",
                    "str",
                    "bool",
                    "typing.Callable[typing.Any, T]",
                    "Callable[[Any], T]"
                ],
                "extracted": [
                    "int",
                    "str",
                    "bool",
                    "typing.Callable[typing.Any, T]",
                    "Callable[[Any], T]"
                ]
            }
        }
    },
    "hansberger-master/hansberger/users/tests/test_forms.py": {
        "TestUserCreationForm.test_clean_username": {
            "name": "test_clean_username",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hansberger-master/hansberger/users/tests/test_models.py": {
        "test_user_get_absolute_url": {
            "name": "test_user_get_absolute_url",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        }
    },
    "hansberger-master/hansberger/users/tests/test_urls.py": {
        "test_detail": {
            "name": "test_detail",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "test_list": {
            "name": "test_list",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update": {
            "name": "test_update",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_redirect": {
            "name": "test_redirect",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "hansberger-master/hansberger/users/tests/test_views.py": {
        "TestUserUpdateView.test_get_success_url": {
            "name": "test_get_success_url",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        },
        "TestUserUpdateView.test_get_object": {
            "name": "test_get_object",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        },
        "TestUserRedirectView.test_get_redirect_url": {
            "name": "test_get_redirect_url",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "bool"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        }
    },
    "hansberger-master/hansberger/users/tests/__init__.py": {}
}
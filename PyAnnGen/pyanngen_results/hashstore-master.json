{
    "hashstore-master/scent.py": {
        "py_files": {
            "name": "py_files",
            "location": 8,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "os_system_in_env": {
            "name": "os_system_in_env",
            "location": 19,
            "return": [
                "int"
            ],
            "arguments": {
                "e": [
                    "str",
                    "bytes"
                ],
                "cmd": [
                    "str",
                    "bytes"
                ]
            }
        },
        "run_tests": {
            "name": "run_tests",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "case": [
                    "Dict",
                    "bool",
                    "List[str]",
                    "int"
                ],
                "envs": [
                    "int"
                ],
                "html": [
                    "bool",
                    "int"
                ]
            }
        },
        "execute_some_tests": {
            "name": "execute_some_tests",
            "location": 51,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {}
        }
    },
    "hashstore-master/setup.py": {
        "MySdistCommand.run": {
            "name": "run",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hashstore-master/hashstore/hs.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "hashstore-master/hashstore/hsd.py": {
        "DaemonApp.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "store_dir": [
                    "Text",
                    "str",
                    "bool"
                ],
                "debug": [
                    "bool",
                    "str",
                    "IO[str]"
                ]
            }
        },
        "DaemonApp.initdb": {
            "name": "initdb",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "external_ip": [
                    "str",
                    "None"
                ],
                "port": [
                    "str",
                    "int"
                ]
            }
        },
        "DaemonApp.add_user": {
            "name": "add_user",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "password": [
                    "int",
                    "str",
                    "None"
                ],
                "full_name": [
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "DaemonApp.remove_user": {
            "name": "remove_user",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "Iterable[str]"
                ]
            }
        },
        "DaemonApp.acl": {
            "name": "acl",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str"
                ],
                "acl": [
                    "None",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "Optional[Dict[str,Any]]",
                    "Dict",
                    "Optional[Page]",
                    "Optional[dict]"
                ]
            }
        },
        "DaemonApp.backup": {
            "name": "backup",
            "location": 88,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "dir": [
                    "str",
                    "bool"
                ]
            }
        },
        "DaemonApp.pull": {
            "name": "pull",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cake": [
                    "str",
                    "List[str]",
                    "bool",
                    "qutebrowser.utils.usertypes.KeyMode",
                    "int"
                ],
                "dir": [
                    "str",
                    "List[str]",
                    "bool",
                    "qutebrowser.utils.usertypes.KeyMode",
                    "int"
                ]
            }
        },
        "DaemonApp.start": {
            "name": "start",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DaemonApp.stop": {
            "name": "stop",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hashstore-master/hashstore/hsi.py": {
        "ClientApp.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "debug": [
                    "str",
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "ClientApp._check_cu_session": {
            "name": "_check_cu_session",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dir": [
                    "str",
                    "Dict",
                    "bool",
                    "BinaryIO"
                ]
            }
        },
        "ClientApp.remote": {
            "name": "remote",
            "location": 58,
            "return": [
                "Dict[str, bool]",
                "dict",
                "Dict[str, str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientApp.login": {
            "name": "login",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ],
                "email": [
                    "str",
                    "int",
                    "Dict",
                    "Optional[Union[str,Any]]",
                    "Any",
                    "None"
                ],
                "passwd": [
                    "str",
                    "None",
                    "List[logging.Handler]",
                    "Optional[str]",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "dir": [
                    "Text",
                    "str",
                    "Optional[str]"
                ],
                "default": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ClientApp.logout": {
            "name": "logout",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dir": [
                    "Text",
                    "str",
                    "List[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "ClientApp.ls": {
            "name": "ls",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dir": [
                    "Text",
                    "str",
                    "float",
                    "bool",
                    "int"
                ],
                "cake": [
                    "bool",
                    "str",
                    "int",
                    "List[Tuple[str,Any]]"
                ]
            }
        },
        "ClientApp.find": {
            "name": "find",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cake": [
                    "str",
                    "Dict[str,Any]",
                    "Dict",
                    "bool"
                ],
                "dir": [
                    "Text",
                    "str",
                    "Dict[str,Any]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "ClientApp.scan": {
            "name": "scan",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dir": [
                    "str",
                    "Text"
                ]
            }
        },
        "ClientApp.backup": {
            "name": "backup",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dir": [
                    "str",
                    "Text"
                ],
                "remote_path": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "portal_type": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "ClientApp.pull": {
            "name": "pull",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cake": [
                    "bool",
                    "str",
                    "Tuple[Union[Literal,Literal]]",
                    "Tuple[Literal,Literal]",
                    "Tuple[Any,Any]"
                ],
                "dir": [
                    "Text",
                    "str",
                    "Tuple[int,int]",
                    "bool"
                ]
            }
        },
        "ClientApp.sync": {
            "name": "sync",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dir": [
                    "Text",
                    "str",
                    "List[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "ClientApp.create_portal": {
            "name": "create_portal",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "portal_id": [
                    "str",
                    "None",
                    "int",
                    "float",
                    "Optional[str]"
                ],
                "portal_role": [
                    "Optional[str]",
                    "str",
                    "None",
                    "bool"
                ],
                "portal_type": [
                    "Optional[str]",
                    "str",
                    "None",
                    "bool"
                ],
                "cake": [
                    "str",
                    "int",
                    "None",
                    "IO[bytes]",
                    "IO"
                ],
                "dir": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "bool",
                    "Dict[str,list]"
                ]
            }
        },
        "ClientApp.update_vtree": {
            "name": "update_vtree",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cake_path": [
                    "str",
                    "BinaryIO",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "cake": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool",
                    "Optional[Tuple[str,str]]",
                    "Tuple[Union[str,str]]"
                ],
                "file": [
                    "str"
                ],
                "dir": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "ClientApp.delete_in_vtree": {
            "name": "delete_in_vtree",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cake_path": [
                    "str",
                    "Union[Literal,str]",
                    "List[str]"
                ],
                "dir": [
                    "Text",
                    "str",
                    "bool",
                    "Dict"
                ]
            }
        },
        "ClientApp.server": {
            "name": "server",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientApp.find.find_recursively": {
            "name": "find_recursively",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "Callable"
                ],
                "cake": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "hashstore-master/hashstore/__init__.py": {},
    "hashstore-master/hashstore/bakery/cake_client.py": {
        "CakeClient.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "home_dir": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Union[str,List[str]]",
                    "List[str]"
                ]
            }
        },
        "CakeClient.client_config_session": {
            "name": "client_config_session",
            "location": 27,
            "return": [
                "contextlib._GeneratorContextManager"
            ],
            "arguments": {
                "self": []
            }
        },
        "CakeClient.initdb": {
            "name": "initdb",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CakeClient.has_db": {
            "name": "has_db",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CakeClient.client_key": {
            "name": "client_key",
            "location": 40,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CakeClient.get_client_id": {
            "name": "get_client_id",
            "location": 44,
            "return": [
                "None",
                "str",
                "Optional[cmk.utils.type_defs.HostAddress]",
                "Dict",
                "bool",
                "cmk.utils.type_defs.HostName",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CakeClient.check_mount_session": {
            "name": "check_mount_session",
            "location": 47,
            "return": [
                "Optional[ClientUserSession]"
            ],
            "arguments": {
                "self": [],
                "dir": [
                    "str",
                    "Iterable[str]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "CakeClient.logout": {
            "name": "logout",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientUserSession.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "bool",
                    "str",
                    "List[int]",
                    "Dict",
                    "Dict[str,str]"
                ],
                "url": [
                    "bool",
                    "str",
                    "List[int]",
                    "Dict",
                    "Dict[str,str]"
                ],
                "session_id": [
                    "bool",
                    "None",
                    "str",
                    "List[int]",
                    "Dict",
                    "Dict[str,str]"
                ]
            }
        },
        "ClientUserSession.post_json": {
            "name": "post_json",
            "location": 116,
            "return": [
                "bool",
                "Mapping[str, Any]",
                "bytes",
                "cmk.utils.type_defs.EventRule"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict",
                    "str",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "Dict[str,Callable[[str],Any]]",
                    "None",
                    "Dict[str,Callable[str,Any]]"
                ],
                "endpoint": [
                    "Text",
                    "str",
                    "bytes",
                    "Dict",
                    "List[str]",
                    "T",
                    "Sequence[str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "ClientUserSession.get_response": {
            "name": "get_response",
            "location": 126,
            "return": [
                "requests.models.Response"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "str",
                    "Dict[str,Dict[str,str]]",
                    "Dict[str,Any]",
                    "Dict"
                ],
                "cake_or_path": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "do_stream": [
                    "bool",
                    "str",
                    "Dict"
                ]
            }
        },
        "ClientUserSession.get_stream": {
            "name": "get_stream",
            "location": 133,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "cake_or_path": [
                    "str",
                    "List[dict]",
                    "requests.cookies.RequestsCookieJar"
                ]
            }
        },
        "ClientUserSession.login": {
            "name": "login",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str",
                    "float",
                    "Callable[...,collections.abc.Awaitable[Any]]",
                    "None",
                    "mode.utils.imports.SymbolArg[Type[mode.SupervisorStrategyT]]",
                    "Callable[...,Awaitable[Any]]",
                    "Optional[str]",
                    "Callable"
                ],
                "passwd": [
                    "str",
                    "float",
                    "Callable[...,collections.abc.Awaitable[Any]]",
                    "Callable[...,Awaitable[Any]]",
                    "None",
                    "Optional[str]",
                    "mode.utils.imports.SymbolArg[Type[mode.SupervisorStrategyT]]"
                ]
            }
        },
        "ClientUserSession.init_headers": {
            "name": "init_headers",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientUserSession.create_mount_session": {
            "name": "create_mount_session",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mount_dir": [
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[bool]",
                    "None"
                ],
                "default": [
                    "bool",
                    "str",
                    "List[str]",
                    "Optional[bool]"
                ]
            }
        },
        "ClientUserSession.create_mount_session.print_header": {
            "name": "print_header",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "n": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "CakeClient.check_mount_session.client_session": {
            "name": "client_session",
            "location": 50,
            "return": [
                "Dict",
                "ClientUserSession"
            ],
            "arguments": {
                "mount_session": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "ClientUserSession.__init__.AccessProxy.write_content": {
            "name": "write_content",
            "location": 83,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "_": [
                    "bool",
                    "str",
                    "int",
                    "float"
                ],
                "fp": [
                    "str",
                    "dict",
                    "int",
                    "Optional[dict]",
                    "Optional[Mapping[str, str]]"
                ]
            }
        },
        "ClientUserSession.__init__.AccessProxy.get_content": {
            "name": "get_content",
            "location": 89,
            "return": [
                "Content",
                "Dict",
                "bool",
                "str",
                "Optional[List[str]]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "_": [
                    "str",
                    "Optional[Callable[[Any], None]]"
                ],
                "cake_or_path": [
                    "str",
                    "cmk.utils.type_defs.OptionalConfigSerial",
                    "IO[bytes]",
                    "TextIO"
                ],
                "skinny": [
                    "bool",
                    "str",
                    "Optional[Callable[[Any],None]]"
                ]
            }
        },
        "ClientUserSession.__init__.AccessProxy.__getattr__": {
            "name": "__getattr__",
            "location": 105,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "_": [
                    "int",
                    "T",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ],
                "item": [
                    "int",
                    "T",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "ClientUserSession.__init__.AccessProxy.__getattr__.proxy_call": {
            "name": "proxy_call",
            "location": 106,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Dict[str, List[Any]]",
                "Dict[str, Dict[str, Any]]",
                "Dict[int, str]"
            ],
            "arguments": {}
        }
    },
    "hashstore-master/hashstore/bakery/cake_scan.py": {
        "build_bundle": {
            "name": "build_bundle",
            "location": 149,
            "return": [
                "CakeRack"
            ],
            "arguments": {
                "entries": [
                    "list[]"
                ]
            }
        },
        "backup": {
            "name": "backup",
            "location": 257,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "scan_path": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "access": [
                    "bool",
                    "str"
                ]
            }
        },
        "pull": {
            "name": "pull",
            "location": 294,
            "return": [
                "Any"
            ],
            "arguments": {
                "store": [
                    "list[]",
                    "bool",
                    "str"
                ],
                "cakepath": [
                    "str",
                    "typing.Callable[, ]",
                    "list[]"
                ],
                "path": [
                    "str",
                    "typing.Callable[, ]",
                    "list[]"
                ]
            }
        },
        "ScanStats.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "force_rehash": [
                    "bool"
                ]
            }
        },
        "ScanStats.increment_count": {
            "name": "increment_count",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScanStats.count_bytes": {
            "name": "count_bytes",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "buffer": []
            }
        },
        "CakeEntries.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "typing.BinaryIO"
                ]
            }
        },
        "CakeEntries.dir_key": {
            "name": "dir_key",
            "location": 41,
            "return": [
                "str",
                "None",
                "tuple[typing.Union[str,str,str]]",
                "DirKey"
            ],
            "arguments": {
                "self": [],
                "force_change_fn": [
                    "None",
                    "typing.Any",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "CakeEntries.set_backup_path": {
            "name": "set_backup_path",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "backup_path": [
                    "typing.Iterable[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "CakeEntries.total": {
            "name": "total",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CakeEntries.directory_usage": {
            "name": "directory_usage",
            "location": 61,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "CakeEntries.bundle": {
            "name": "bundle",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "CakeEntries.store_entries": {
            "name": "store_entries",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entries": [
                    "str",
                    "list[bytes]"
                ]
            }
        },
        "ScanPath.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fs_path": [
                    "str",
                    "None"
                ],
                "addname": [
                    "None",
                    "str",
                    "typing.TextIO"
                ],
                "remote_path": [
                    "None",
                    "str",
                    "list[str]"
                ]
            }
        },
        "ScanPath.child": {
            "name": "child",
            "location": 101,
            "return": [
                "ScanPath"
            ],
            "arguments": {
                "self": [
                    "_TScanPath@@ScanPath@@"
                ],
                "f": [
                    "str",
                    "None",
                    "dict[str, str]"
                ]
            }
        },
        "ScanPath.set_remote_path": {
            "name": "set_remote_path",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "remote_path": [
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "ScanPath.cake_entries": {
            "name": "cake_entries",
            "location": 109,
            "return": [
                "int",
                "CakeEntries"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScanPath.store_remote_path": {
            "name": "store_remote_path",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scan.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "bool",
                    "list[str]",
                    "str"
                ],
                "file_type": [
                    "dict[, ]",
                    "str",
                    "None"
                ],
                "stats": [
                    "bool",
                    "str",
                    "typing.Type",
                    "typing.MutableMapping",
                    "dict[int, bool]"
                ]
            }
        },
        "Scan.__str__": {
            "name": "__str__",
            "location": 126,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileScan.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "dict[, ]"
                ],
                "from_db": [
                    "bool",
                    "str",
                    "typing.Any",
                    "None",
                    "dict[, ]",
                    "list[dict[, ]]"
                ],
                "stats": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "DirScan.__init__": {
            "name": "__init__",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool"
                ],
                "stats": [
                    "None",
                    "bool",
                    "typing.Callable[, ]",
                    "str",
                    "list[str]"
                ],
                "ignore_entries": [
                    "list[]"
                ],
                "on_each_dir": [
                    "None",
                    "bool",
                    "str",
                    "list[str]",
                    "typing.Callable[[], int]"
                ],
                "parent": [
                    "None",
                    "bool",
                    "set[str]",
                    "str"
                ]
            }
        },
        "Progress.__init__": {
            "name": "__init__",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Progress.just_processed": {
            "name": "just_processed",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "towards_total": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "directory": [
                    "list[list[int]]"
                ]
            }
        },
        "Progress.pct_value": {
            "name": "pct_value",
            "location": 250,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "backup.ensure_files_in_store": {
            "name": "ensure_files_in_store",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "dir_scan": []
            }
        },
        "pull.restore_inner": {
            "name": "restore_inner",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "cakepath": [],
                "path": []
            }
        },
        "CakeEntries.set_backup_path.update_path": {
            "name": "update_path",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "dir_key": []
            }
        }
    },
    "hashstore-master/hashstore/bakery/cake_server.py": {
        "stop_server": {
            "name": "stop_server",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "signum": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "frame": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "_string_handler": {
            "name": "_string_handler",
            "location": 151,
            "return": [
                "type"
            ],
            "arguments": {
                "s": [
                    "str",
                    "List[str]",
                    "bytes",
                    "int"
                ]
            }
        },
        "_StoreAccessMixin.initialize": {
            "name": "initialize",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "store": [
                    "Dict",
                    "str"
                ]
            }
        },
        "_StoreAccessMixin.ctx": {
            "name": "ctx",
            "location": 51,
            "return": [
                "StoreContext"
            ],
            "arguments": {
                "self": []
            }
        },
        "_StoreAccessMixin.close_ctx": {
            "name": "close_ctx",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_StoreAccessMixin.on_finish": {
            "name": "on_finish",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ContentHandler.get": {
            "name": "get",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Optional[Directory]",
                    "None"
                ]
            }
        },
        "_ContentHandler.on_file_end": {
            "name": "on_file_end",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "int",
                    "Dict",
                    "List[int]"
                ]
            }
        },
        "_ContentHandler.on_chunk": {
            "name": "on_chunk",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chunk": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "GetCakeHandler.content": {
            "name": "content",
            "location": 102,
            "return": [
                "Content",
                "bytes",
                "str",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "StreamHandler.post": {
            "name": "post",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamHandler.prepare": {
            "name": "prepare",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamHandler.data_received": {
            "name": "data_received",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chunk": [
                    "str",
                    "IO",
                    "TextIO"
                ]
            }
        },
        "PostHandler.post": {
            "name": "post",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CakeServer.__init__": {
            "name": "__init__",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "store": [
                    "str",
                    "IO[bytes]",
                    "IO",
                    "Optional[str]",
                    "None"
                ],
                "max_file_size": [
                    "bytes",
                    "str"
                ]
            }
        },
        "CakeServer.shutdown": {
            "name": "shutdown",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wait_until_down": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "CakeServer.run_server": {
            "name": "run_server",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_string_handler.StringHandler.content": {
            "name": "content",
            "location": 153,
            "return": [
                "Content",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "hashkernel.bakery.CakeRole",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "CakeServer.run_server.AppContentHandler.content": {
            "name": "content",
            "location": 188,
            "return": [
                "str",
                "int",
                "list",
                "Optional[Dict[str, Any]]",
                "bool",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "CakeServer.run_server.IndexHandler.content": {
            "name": "content",
            "location": 194,
            "return": [
                "str",
                "int",
                "list",
                "Optional[Dict[str, Any]]",
                "bool",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "hashkernel.bakery.CakeRole",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "CakeServer.run_server.FavIconHandler.content": {
            "name": "content",
            "location": 199,
            "return": [
                "str",
                "int",
                "list",
                "Optional[Dict[str, Any]]",
                "bool",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "hashkernel.bakery.CakeRole",
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "hashstore-master/hashstore/bakery/cake_tree.py": {
        "NodeState.end_state": {
            "name": "end_state",
            "location": 24,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "bool",
                    "str",
                    "Dict",
                    "Tuple[str]",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]"
                ],
                "state": [
                    "int",
                    "bool",
                    "str",
                    "Optional[str]",
                    "Sequence"
                ]
            }
        },
        "Node.__str__": {
            "name": "__str__",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__repr__": {
            "name": "__repr__",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.root": {
            "name": "root",
            "location": 44,
            "return": [
                "Node",
                "str",
                "List",
                "Tuple[str,str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.cake_path": {
            "name": "cake_path",
            "location": 50,
            "return": [
                "bool",
                "CakePath"
            ],
            "arguments": {
                "self": [],
                "relative": [
                    "str",
                    "bool",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ]
            }
        },
        "Node.ancestry": {
            "name": "ancestry",
            "location": 62,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "include_root": [
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "str"
                ]
            }
        },
        "Node.__iter__": {
            "name": "__iter__",
            "location": 73,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.role": {
            "name": "role",
            "location": 78,
            "return": [
                "dict",
                "bytes",
                "int",
                "Dict[str, str]",
                "Dict[str, Any]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "CakeNode.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "cake": [
                    "bool",
                    "str",
                    "Sequence",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "Mapping",
                    "int",
                    "Mapping[str,Any]"
                ],
                "state": [
                    "str"
                ]
            }
        },
        "CakeNode.cake": {
            "name": "cake",
            "location": 87,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neuron.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "state": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Neuron.prune": {
            "name": "prune",
            "location": 98,
            "return": [
                "CakeNode"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neuron.role": {
            "name": "role",
            "location": 102,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neuron.clean": {
            "name": "clean",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neuron.add_child": {
            "name": "add_child",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "str"
                ]
            }
        },
        "Neuron.__setitem__": {
            "name": "__setitem__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "bytes",
                    "Union[bytes,bytearray,str]",
                    "bytearray"
                ],
                "cake": [
                    "str",
                    "int"
                ]
            }
        },
        "Neuron.__delitem__": {
            "name": "__delitem__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "bytes",
                    "Union[bytes,bytearray,str]",
                    "bytearray"
                ]
            }
        },
        "Neuron.__getitem__": {
            "name": "__getitem__",
            "location": 141,
            "return": [
                "Neuron"
            ],
            "arguments": {
                "self": [
                    "_TNeuron@@Neuron@@"
                ],
                "k": [
                    "str",
                    "bytes",
                    "Union[bytes,bytearray,str]",
                    "bytearray"
                ]
            }
        },
        "Neuron.__len__": {
            "name": "__len__",
            "location": 152,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neuron.__contains__": {
            "name": "__contains__",
            "location": 155,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "bytes",
                    "Union[bytes,bytearray,str]",
                    "bytearray"
                ]
            }
        },
        "Neuron.__iter__": {
            "name": "__iter__",
            "location": 166,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neuron.visit_tree": {
            "name": "visit_tree",
            "location": 170,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "depth": [
                    "None"
                ]
            }
        },
        "Neuron.bundle": {
            "name": "bundle",
            "location": 184,
            "return": [
                "int",
                "Callable",
                "bytes",
                "str",
                "CakeRack"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neuron.cake": {
            "name": "cake",
            "location": 191,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CakeTree.__init__": {
            "name": "__init__",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "portal": [
                    "str",
                    "int",
                    "None"
                ],
                "path": [
                    "str",
                    "int",
                    "None",
                    "Iterable[str]"
                ]
            }
        },
        "CakeTree.relative": {
            "name": "relative",
            "location": 313,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CakeTree.__str__": {
            "name": "__str__",
            "location": 316,
            "return": [
                "Text",
                "str",
                "List[Union[int,Any]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hashstore-master/hashstore/bakery/__init__.py": {},
    "hashstore-master/hashstore/bakery/lite/dal.py": {
        "find_normal_user": {
            "name": "find_normal_user",
            "location": 9,
            "return": [
                "Any"
            ],
            "arguments": {
                "glue_sess": [
                    "str",
                    "Dict[str,str]",
                    "int",
                    "sqlalchemy.orm.Session"
                ],
                "user_or_email": [
                    "str",
                    "bytes",
                    "Optional[float]",
                    "int",
                    "Optional[str]",
                    "Optional[bytes]",
                    "Optional[int]"
                ]
            }
        },
        "find_permissions": {
            "name": "find_permissions",
            "location": 18,
            "return": [
                "str",
                "Mapping[str, Any]",
                "int"
            ],
            "arguments": {
                "glue_sess": [
                    "bool",
                    "tracim.models.auth.User"
                ],
                "user": [
                    "Callable"
                ]
            }
        },
        "resolve_cake_stack": {
            "name": "resolve_cake_stack",
            "location": 30,
            "return": [
                "List[_T1]"
            ],
            "arguments": {
                "session_factory": [
                    "str",
                    "bool",
                    "sqlalchemy.orm.Session",
                    "Tuple[Union[float,float]]",
                    "sqlalchemy.orm.scoped_session",
                    "Tuple[float,float]"
                ],
                "cake": [
                    "str",
                    "bool"
                ]
            }
        },
        "ensure_vtree_path": {
            "name": "ensure_vtree_path",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[str]",
                    "None"
                ],
                "cake_path": [
                    "str",
                    "IO",
                    "Optional[str]",
                    "Optional[Directory]",
                    "Union[str,IO]"
                ],
                "asof_dt": [
                    "List[Union[str,SqlFile]]",
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "user": [
                    "List[Union[str,SqlFile]]",
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "edit_portal": {
            "name": "edit_portal",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "glue_sess": [
                    "int",
                    "str"
                ],
                "portal": [
                    "int",
                    "Type",
                    "str"
                ],
                "by": [
                    "str",
                    "bool",
                    "Dict"
                ]
            }
        },
        "query_users_by_type": {
            "name": "query_users_by_type",
            "location": 82,
            "return": [
                "bool",
                "Dict[str, Iterable[Any]]",
                "Dict[str, Any]",
                "type",
                "dict"
            ],
            "arguments": {
                "glue_session": [
                    "str"
                ],
                "user_type": [
                    "str"
                ]
            }
        }
    },
    "hashstore-master/hashstore/bakery/lite/mixins.py": {
        "make_portal_pk_type": {
            "name": "make_portal_pk_type",
            "location": 32,
            "return": [
                "type"
            ],
            "arguments": {}
        },
        "new_singleton": {
            "name": "new_singleton",
            "location": 59,
            "return": [
                "type"
            ],
            "arguments": {}
        },
        "ReprIt.__repr__": {
            "name": "__repr__",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NameIt.__tablename__": {
            "name": "__tablename__",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "bool",
                    "Dict[str,Any]",
                    "Union[int,slice]"
                ]
            }
        }
    },
    "hashstore-master/hashstore/bakery/lite/__init__.py": {},
    "hashstore-master/hashstore/bakery/lite/client/__init__.py": {
        "FileType.__str__": {
            "name": "__str__",
            "location": 40,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hashstore-master/hashstore/bakery/lite/node/access.py": {
        "StoreContext.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "store": [
                    "str",
                    "float",
                    "dict[str, T]",
                    "None",
                    "int"
                ],
                "remote_host": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "StoreContext.glue_session": {
            "name": "glue_session",
            "location": 49,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoreContext.srvcfg_session": {
            "name": "srvcfg_session",
            "location": 52,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoreContext.cake_session": {
            "name": "cake_session",
            "location": 55,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "cake": [
                    "dict[, ]",
                    "None",
                    "str"
                ]
            }
        },
        "StoreContext.validate_session": {
            "name": "validate_session",
            "location": 61,
            "return": [
                "PrivilegedAccess"
            ],
            "arguments": {
                "self": [],
                "session_id": [
                    "str",
                    "int",
                    "list[str]"
                ],
                "client_id": [
                    "None",
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "GuestAccess.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "typing.Type"
                ],
                "user": [
                    "None",
                    "str",
                    "bytearray"
                ],
                "user_type": []
            }
        },
        "GuestAccess.ensure_user": {
            "name": "ensure_user",
            "location": 93,
            "return": [
                "User"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "GuestAccess.blob_store": {
            "name": "blob_store",
            "location": 99,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "GuestAccess.process_api_call": {
            "name": "process_api_call",
            "location": 102,
            "return": [
                "Dict[(str, nothing)]"
            ],
            "arguments": {
                "self": [],
                "method": [],
                "params": []
            }
        },
        "GuestAccess.info": {
            "name": "info",
            "location": 107,
            "return": [
                "dict[typing.Text, bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GuestAccess.login": {
            "name": "login",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "email": [
                    "str"
                ],
                "passwd": [
                    "str",
                    "bool",
                    "dict[, ]"
                ],
                "client_id": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "GuestAccess.authorize": {
            "name": "authorize",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cake": [
                    "bool",
                    "typing.IO",
                    "typing.Callable[, ]"
                ],
                "pts": [
                    "bool",
                    "typing.IO",
                    "typing.Callable[, ]"
                ]
            }
        },
        "GuestAccess.server_login": {
            "name": "server_login",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server_id": [
                    "bool",
                    "str",
                    "dict[, ]",
                    "None"
                ],
                "server_secret": [
                    "bool",
                    "str",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "GuestAccess.get_content": {
            "name": "get_content",
            "location": 142,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "cake_or_path": [
                    "str",
                    "bool"
                ]
            }
        },
        "GuestAccess.get_content_by_path": {
            "name": "get_content_by_path",
            "location": 182,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "cake_path": []
            }
        },
        "PrivilegedAccess.system_access": {
            "name": "system_access",
            "location": 222,
            "return": [
                "PrivilegedAccess"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "PrivilegedAccess.info": {
            "name": "info",
            "location": 226,
            "return": [
                "dict[typing.Text, bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrivilegedAccess.logout": {
            "name": "logout",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrivilegedAccess.authorize_all": {
            "name": "authorize_all",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cakes": [
                    "list[typing.Callable[, ]]"
                ],
                "pts": [
                    "int",
                    "str",
                    "set[str]"
                ]
            }
        },
        "PrivilegedAccess.writer": {
            "name": "writer",
            "location": 246,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrivilegedAccess.write_content": {
            "name": "write_content",
            "location": 253,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "fp": [],
                "chunk_size": [
                    "int"
                ]
            }
        },
        "PrivilegedAccess.store_directories": {
            "name": "store_directories",
            "location": 267,
            "return": [
                "tuple[typing.Union[int,list[]]]"
            ],
            "arguments": {
                "self": [],
                "directories": [
                    "bool",
                    "typing.Mapping",
                    "list[]",
                    "str"
                ]
            }
        },
        "PrivilegedAccess._collect_unseen": {
            "name": "_collect_unseen",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cake": [],
                "unseen_set": []
            }
        },
        "PrivilegedAccess.add_user": {
            "name": "add_user",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "bool",
                    "None",
                    "typing.Type",
                    "typing.Callable[, ]",
                    "str",
                    "tuple[typing.Type]",
                    "dict[str, typing.Any]"
                ],
                "ssha_pwd": [
                    "bool",
                    "None",
                    "typing.Type",
                    "typing.Callable[, ]",
                    "str",
                    "tuple[typing.Type]",
                    "dict[str, typing.Any]"
                ],
                "full_name": [
                    "None",
                    "bool",
                    "typing.Type",
                    "typing.Callable[, ]",
                    "str",
                    "tuple[typing.Type]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "PrivilegedAccess.remove_user": {
            "name": "remove_user",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_or_email": [
                    "str",
                    "bool"
                ]
            }
        },
        "PrivilegedAccess.add_acl": {
            "name": "add_acl",
            "location": 344,
            "return": [
                "Tuple[(Any, list)]"
            ],
            "arguments": {
                "self": [],
                "user_or_email": [
                    "str"
                ],
                "acl": [
                    "str",
                    "None"
                ]
            }
        },
        "PrivilegedAccess.remove_acl": {
            "name": "remove_acl",
            "location": 356,
            "return": [
                "Tuple[(Any, list)]"
            ],
            "arguments": {
                "self": [],
                "user_or_email": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "acl": [
                    "bool",
                    "set[str]"
                ]
            }
        },
        "PrivilegedAccess.list_acls": {
            "name": "list_acls",
            "location": 366,
            "return": [
                "list[dict[typing.Text, ]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrivilegedAccess.create_portal": {
            "name": "create_portal",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "portal_id": [
                    "int",
                    "tuple[str]"
                ],
                "cake": [
                    "int",
                    "str"
                ]
            }
        },
        "PrivilegedAccess.edit_portal": {
            "name": "edit_portal",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "portal_id": [
                    "int",
                    "str",
                    "None"
                ],
                "cake": [
                    "int",
                    "str"
                ]
            }
        },
        "PrivilegedAccess._assert_vtree_": {
            "name": "_assert_vtree_",
            "location": 432,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "cake_path": [
                    "str"
                ]
            }
        },
        "PrivilegedAccess._read_vtree": {
            "name": "_read_vtree",
            "location": 440,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "cake_path": [
                    "str",
                    "None"
                ],
                "asof_dt": [
                    "None",
                    "str"
                ]
            }
        },
        "PrivilegedAccess._make_bundle": {
            "name": "_make_bundle",
            "location": 456,
            "return": [
                "CakeRack"
            ],
            "arguments": {
                "vtree_rs": [
                    "list[]",
                    "str",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ]
            }
        },
        "PrivilegedAccess._query_vtree": {
            "name": "_query_vtree",
            "location": 465,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "portal_id": [
                    "str",
                    "bool"
                ],
                "asof_dt": [
                    "str",
                    "bool"
                ]
            }
        },
        "PrivilegedAccess._read_dmount": {
            "name": "_read_dmount",
            "location": 483,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "cake_path": [
                    "bool",
                    "typing.Iterable[typing.Any]"
                ],
                "asof_dt": [
                    "None",
                    "bool",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "PrivilegedAccess.edit_portal_tree": {
            "name": "edit_portal_tree",
            "location": 487,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "files": [
                    "str",
                    "bool",
                    "typing.IO",
                    "None",
                    "typing.Iterable[typing.Any]",
                    "typing.BinaryIO"
                ],
                "asof_dt": [
                    "None",
                    "str",
                    "bool",
                    "typing.IO",
                    "typing.Iterable[typing.Any]",
                    "typing.BinaryIO"
                ]
            }
        },
        "PrivilegedAccess.delete_in_portal_tree": {
            "name": "delete_in_portal_tree",
            "location": 556,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "cake_path": [
                    "str",
                    "bool",
                    "None"
                ],
                "asof_dt": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "PrivilegedAccess.get_portal_tree": {
            "name": "get_portal_tree",
            "location": 590,
            "return": [
                "CakeTree"
            ],
            "arguments": {
                "self": [],
                "portal_id": [
                    "str",
                    "dict[, ]",
                    "int",
                    "tuple[str]"
                ],
                "asof_dt": [
                    "None",
                    "str",
                    "int",
                    "list[typing.Optional[int]]",
                    "list[str]"
                ]
            }
        },
        "PrivilegedAccess.grant_portal": {
            "name": "grant_portal",
            "location": 612,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "portal_id": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "str",
                    "None"
                ],
                "grantee": [
                    "str",
                    "dict[, ]",
                    "dict[str, str]"
                ],
                "permission_type": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "PrivilegedAccess.delete_portal": {
            "name": "delete_portal",
            "location": 641,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "portal_id": [
                    "int",
                    "tuple[str]"
                ]
            }
        },
        "PrivilegedAccess.store_directories.store_bundle": {
            "name": "store_bundle",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "dir_cake": [],
                "dir_contents": []
            }
        },
        "PrivilegedAccess._query_vtree.query": {
            "name": "query",
            "location": 466,
            "return": [],
            "arguments": {
                "path_condition": []
            }
        },
        "PrivilegedAccess.edit_portal_tree.add_cake_to_vtree": {
            "name": "add_cake_to_vtree",
            "location": 508,
            "return": [
                "None"
            ],
            "arguments": {
                "action": [],
                "cake_path": [],
                "cake": []
            }
        }
    },
    "hashstore-master/hashstore/bakery/lite/node/blobs.py": {
        "Lookup.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "store": [
                    "str",
                    "Dict[str,T]",
                    "Optional[int]",
                    "int",
                    "Optional[Union[str,Any]]",
                    "None",
                    "Type[T]",
                    "Any",
                    "Type"
                ],
                "file_id": [
                    "int",
                    "str",
                    "List",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "Lookup.found": {
            "name": "found",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lookup._content": {
            "name": "_content",
            "location": 32,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "role": [
                    "int",
                    "str",
                    "hashkernel.bakery.CakeRole",
                    "bool"
                ]
            }
        },
        "Lookup.content": {
            "name": "content",
            "location": 35,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "role": [
                    "Dict[str,List[int]]",
                    "bool",
                    "Dict[str,list[int]]",
                    "str",
                    "Dict[str,str]",
                    "Optional[float]",
                    "float",
                    "IO[bytes]",
                    "None",
                    "IO"
                ]
            }
        },
        "ContentAddressLookup.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "store": [
                    "str",
                    "bool",
                    "bytes",
                    "Dict[str,str]",
                    "Optional[str]",
                    "None"
                ],
                "file_id": [
                    "str",
                    "bool",
                    "bytes",
                    "Dict[str,str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ContentAddressLookup.blob_db": {
            "name": "blob_db",
            "location": 50,
            "return": [
                "Dict[str, Any]",
                "Mapping[str, Any]",
                "Optional[int]",
                "Dict[str, Union[str, Set]]",
                "raiden.utils.Dict[str, raiden.utils.Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheLookup.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lookup": [
                    "bytes",
                    "hashkernel.mold.Mold"
                ],
                "data": [
                    "str",
                    "Dict[str,Any]",
                    "Dict",
                    "Mapping",
                    "cmk.utils.type_defs.AgentRawData",
                    "bytes",
                    "List",
                    "raiden.utils.List[raiden.utils.Tuple[str,int]]"
                ]
            }
        },
        "CacheLookup._content": {
            "name": "_content",
            "location": 62,
            "return": [
                "str",
                "Optional[Exception]",
                "Dict[str, Any]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "role": [
                    "bytes",
                    "str",
                    "bool"
                ]
            }
        },
        "DbLookup.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "store": [
                    "List[str]",
                    "django.db.models.QuerySet",
                    "bytes",
                    "List[bytes]",
                    "str"
                ],
                "file_id": [
                    "int",
                    "Dict",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "DbLookup.save_content": {
            "name": "save_content",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "DbLookup._content": {
            "name": "_content",
            "location": 95,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "role": [
                    "bytes",
                    "Sequence[int]",
                    "Optional[Union[Any,Any]]",
                    "Any",
                    "None"
                ]
            }
        },
        "FileLookup.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "store": [
                    "List[str]",
                    "django.db.models.QuerySet",
                    "bytes",
                    "List[bytes]",
                    "str"
                ],
                "file_id": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "FileLookup._content": {
            "name": "_content",
            "location": 116,
            "return": [
                "bytes",
                "Mapping[str, Any]",
                "Tuple[int, int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "role": [
                    "float",
                    "Dict[str,Any]",
                    "metrics_backend.utils.Address"
                ]
            }
        },
        "BlobStore.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "str",
                    "bool",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "cache_size": [
                    "int",
                    "bytes",
                    "bool",
                    "str"
                ],
                "cached_max_size": [
                    "int",
                    "str",
                    "bool",
                    "List[float]",
                    "List[str]",
                    "List[List[int]]"
                ]
            }
        },
        "BlobStore.blob_dbf": {
            "name": "blob_dbf",
            "location": 143,
            "return": [
                "hashstore.utils.db.Dbf"
            ],
            "arguments": {
                "self": [],
                "shard_name": [
                    "str"
                ]
            }
        },
        "BlobStore.cache_lookup_factory": {
            "name": "cache_lookup_factory",
            "location": 148,
            "return": [
                "Lookup",
                "int",
                "str",
                "Optional[str]",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "file_id": [
                    "int",
                    "str"
                ]
            }
        },
        "BlobStore.__iter__": {
            "name": "__iter__",
            "location": 154,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlobStore.get_content": {
            "name": "get_content",
            "location": 167,
            "return": [
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "Dict",
                    "int",
                    "bytes",
                    "Union[str,int]"
                ]
            }
        },
        "BlobStore.lookup": {
            "name": "lookup",
            "location": 171,
            "return": [
                "Lookup",
                "str",
                "Dict[str,Any]",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "cake_or_cadr": [
                    "str",
                    "int",
                    "Dict"
                ]
            }
        },
        "BlobStore.writer": {
            "name": "writer",
            "location": 180,
            "return": [
                "ContentWriter"
            ],
            "arguments": {
                "self": []
            }
        },
        "IncomingFile.__init__": {
            "name": "__init__",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "backend": [
                    "float",
                    "int",
                    "str",
                    "logging.Logger"
                ]
            }
        },
        "IncomingFile.write": {
            "name": "write",
            "location": 193,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "str",
                    "IO"
                ]
            }
        },
        "IncomingFile.close": {
            "name": "close",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lookup": [
                    "Callable",
                    "str"
                ]
            }
        },
        "ContentWriter.__init__": {
            "name": "__init__",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "backend": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ContentWriter.write": {
            "name": "write",
            "location": 221,
            "return": [
                "str",
                "List[List[str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "Optional[ambassador.utils.SecretInfo]",
                    "VT",
                    "str",
                    "List[str]"
                ],
                "done": [
                    "bool",
                    "str",
                    "float",
                    "Optional[str]",
                    "int",
                    "Type[GenericList]"
                ]
            }
        },
        "ContentWriter.done": {
            "name": "done",
            "location": 239,
            "return": [
                "str",
                "int",
                "List[str]",
                "Set[int]",
                "None",
                "List",
                "ContentAddress"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hashstore-master/hashstore/bakery/lite/node/session.py": {
        "LiteSession.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "bool",
                    "str",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "None"
                ]
            }
        },
        "LiteSession._resolve": {
            "name": "_resolve",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool"
                ]
            }
        },
        "LiteSession.get_info": {
            "name": "get_info",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cake_path": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "LiteSession.get_content": {
            "name": "get_content",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cake_path": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "hashstore-master/hashstore/bakery/lite/node/store.py": {
        "CakeStore.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "store_dir": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "CakeStore.cake_shard_db": {
            "name": "cake_shard_db",
            "location": 28,
            "return": [
                "str",
                "Optional[cmk.utils.type_defs.HostName]",
                "list",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "cake": [
                    "int",
                    "str",
                    "float",
                    "Union[int, float]"
                ]
            }
        },
        "CakeStore.blob_store": {
            "name": "blob_store",
            "location": 41,
            "return": [
                "str",
                "List[int]",
                "Dict[str,Any]",
                "Dict",
                "List",
                "BlobStore"
            ],
            "arguments": {
                "self": []
            }
        },
        "CakeStore.initdb": {
            "name": "initdb",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "external_ip": [
                    "Tuple[float,float,float,float]",
                    "float",
                    "Tuple[Union[float,float,float,float]]",
                    "bytes",
                    "Optional[List[Any]]",
                    "List[Any]",
                    "None"
                ],
                "port": [
                    "int",
                    "bool"
                ],
                "num_cake_shards": [
                    "int",
                    "Union[List[int],int]",
                    "str"
                ]
            }
        },
        "CakeStore.server_config": {
            "name": "server_config",
            "location": 99,
            "return": [
                "str",
                "Dict[str, Union[str, int]]",
                "Optional[List[str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hashstore-master/hashstore/bakery/lite/node/__init__.py": {
        "ContentAddress.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "h": [
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "bytes",
                    "str"
                ]
            }
        },
        "ContentAddress.__str__": {
            "name": "__str__",
            "location": 61,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentAddress.__repr__": {
            "name": "__repr__",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentAddress.match": {
            "name": "match",
            "location": 67,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "cake": []
            }
        },
        "ContentAddress.__eq__": {
            "name": "__eq__",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "typing.Callable[..., collections.abc.Awaitable[typing.Any]]",
                    "None"
                ]
            }
        },
        "ContentAddress.__ne__": {
            "name": "__ne__",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict[, ]",
                    "typing.AbstractSet"
                ]
            }
        },
        "ContentAddress.__hash__": {
            "name": "__hash__",
            "location": 77,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentAddress.hash_bytes": {
            "name": "hash_bytes",
            "location": 80,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "PermissionType.__init__": {
            "name": "__init__",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "int",
                    "str",
                    "float"
                ],
                "implies": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "PermissionType._expand": {
            "name": "_expand",
            "location": 243,
            "return": [
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "PermissionType.needs_cake": {
            "name": "needs_cake",
            "location": 252,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PermissionType.info": {
            "name": "info",
            "location": 255,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.acls": {
            "name": "acls",
            "location": 288,
            "return": [
                "set"
            ],
            "arguments": {
                "self": [],
                "force_refresh": [
                    "bool"
                ]
            }
        },
        "Permission.expanded_acls": {
            "name": "expanded_acls",
            "location": 305,
            "return": [
                "Generator[(Acl, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Acl.__init__": {
            "name": "__init__",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "None",
                    "list[typing.Any]",
                    "dict[, ]",
                    "Exception",
                    "tuple[typing.Union[int,int]]",
                    "bool",
                    "typing.Sequence[str]"
                ],
                "_pt": [
                    "None",
                    "str",
                    "dict[, ]",
                    "tuple[]"
                ],
                "_cake": [
                    "None",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "Acl.cake_acls": {
            "name": "cake_acls",
            "location": 351,
            "return": [
                "List[Acl]"
            ],
            "arguments": {
                "cake": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "list[str]"
                ],
                "permission_types": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]"
                ]
            }
        },
        "Acl.__str__": {
            "name": "__str__",
            "location": 354,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Acl.__hash__": {
            "name": "__hash__",
            "location": 358,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Acl.__eq__": {
            "name": "__eq__",
            "location": 361,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "tuple[typing.Union[float,float,float]]",
                    "int"
                ]
            }
        },
        "Acl.__ne__": {
            "name": "__ne__",
            "location": 364,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "tuple[typing.Union[float,float,float]]",
                    "int"
                ]
            }
        },
        "Acl.condition": {
            "name": "condition",
            "location": 367,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hashstore-master/hashstore/bakery/lite/tests/backend_tests.py": {
        "test_LiteBackend": {
            "name": "test_LiteBackend",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_LiteBackend.store": {
            "name": "store",
            "location": 27,
            "return": [
                "Tuple",
                "bool",
                "Optional[BaseException]",
                "int"
            ],
            "arguments": {}
        }
    },
    "hashstore-master/hashstore/bakery/lite/tests/models_tests.py": {
        "test_glue": {
            "name": "test_glue",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_models": {
            "name": "test_models",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "hashstore-master/hashstore/bakery/lite/tests/__init__.py": {},
    "hashstore-master/hashstore/bakery/tests/cake_tree_tests.py": {
        "test_docs": {
            "name": "test_docs",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tree": {
            "name": "test_tree",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "hashstore-master/hashstore/bakery/tests/cli_tests.py": {
        "test_hsi": {
            "name": "test_hsi",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_hsd": {
            "name": "test_hsd",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scan_ls": {
            "name": "test_scan_ls",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "hashstore-master/hashstore/bakery/tests/server_tests.py": {
        "http_GET": {
            "name": "http_GET",
            "location": 18,
            "return": [
                "str",
                "Dict[str, Any]",
                "Sequence[str]",
                "List[int]",
                "OrderedDict"
            ],
            "arguments": {
                "u": [
                    "int",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]",
                    "bool"
                ]
            }
        },
        "test_server": {
            "name": "test_server",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ServerSetup.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test": [
                    "str",
                    "Optional[str]",
                    "Callable[[str],str]",
                    "None",
                    "Optional[bool]",
                    "Callable[str,str]",
                    "bool",
                    "Optional[float]",
                    "float"
                ],
                "port": [
                    "None",
                    "Optional[str]",
                    "int",
                    "str",
                    "Optional[bool]",
                    "Callable[str,str]",
                    "Callable[[str],str]"
                ],
                "shutdown": [
                    "bool",
                    "str",
                    "datetime.date.time",
                    "float",
                    "int",
                    "List[str]"
                ]
            }
        },
        "ServerSetup.do_shutdown": {
            "name": "do_shutdown",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServerSetup.run_server_tests": {
            "name": "run_server_tests",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hashstore-master/hashstore/bakery/tests/__init__.py": {},
    "hashstore-master/hashstore/tests/db_tests.py": {
        "test_int_enum": {
            "name": "test_int_enum",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cake_type": {
            "name": "test_cake_type",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cake_type.run_scenario": {
            "name": "run_scenario",
            "location": 71,
            "return": [
                "Tuple[dict]",
                "str",
                "int",
                "bool",
                "List"
            ],
            "arguments": {
                "dbf": [
                    "str",
                    "int"
                ],
                "tbl": [
                    "type",
                    "bool",
                    "Type"
                ]
            }
        }
    },
    "hashstore-master/hashstore/tests/tests_tests.py": {
        "test_docs": {
            "name": "test_docs",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "hashstore-master/hashstore/tests/utils_fio_tests.py": {
        "test_docs": {
            "name": "test_docs",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_config_dir": {
            "name": "test_config_dir",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_config_dir.CD.build": {
            "name": "build",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hashstore-master/hashstore/tests/utils_tests.py": {
        "test_docs": {
            "name": "test_docs",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_api": {
            "name": "test_api",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_args": {
            "name": "test_args",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_api.A.returns_5": {
            "name": "returns_5",
            "location": 33,
            "return": [
                "int",
                "float",
                "Tuple[int,int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "bool",
                    "list"
                ],
                "b": [
                    "int",
                    "bool",
                    "List"
                ]
            }
        },
        "test_api.A.none": {
            "name": "none",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_api.A.error": {
            "name": "error",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "test_args.ClientApp.do": {
            "name": "do",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test1": [
                    "int",
                    "Optional[cmk.utils.diagnostics.DiagnosticsOptionalParameters]",
                    "List[Dict[str, Any]]",
                    "list",
                    "Tuple[List[str], Optional[str]]"
                ]
            }
        }
    },
    "hashstore-master/hashstore/tests/__init__.py": {
        "makedir": {
            "name": "makedir",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "dir": [],
                "path": [],
                "abs_path": []
            }
        },
        "make_recursive_link": {
            "name": "make_recursive_link",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "dir": [],
                "path": [],
                "abs_path": []
            }
        },
        "randint_repeat": {
            "name": "randint_repeat",
            "location": 102,
            "return": [
                "Generator[(int, Any, None)]"
            ],
            "arguments": {
                "start": [],
                "end": [],
                "repeat": []
            }
        },
        "random_bytes": {
            "name": "random_bytes",
            "location": 106,
            "return": [
                "bytes"
            ],
            "arguments": {
                "l": []
            }
        },
        "reseed_random": {
            "name": "reseed_random",
            "location": 110,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "seed": {
            "name": "seed",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "a": []
            }
        },
        "random_content_fn": {
            "name": "random_content_fn",
            "location": 120,
            "return": [
                "Callable[([Any, Any, Any], Any)]"
            ],
            "arguments": {
                "sz": [],
                "reset_random": []
            }
        },
        "move": {
            "name": "move",
            "location": 129,
            "return": [
                "Callable[([Any, Any, Any], Any)]"
            ],
            "arguments": {
                "src": []
            }
        },
        "delete": {
            "name": "delete",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "dir": [],
                "path": [],
                "abs_path": []
            }
        },
        "random_small_caps": {
            "name": "random_small_caps",
            "location": 139,
            "return": [
                "str"
            ],
            "arguments": {
                "l": []
            }
        },
        "text_fn": {
            "name": "text_fn",
            "location": 153,
            "return": [
                "Callable[([Any, Any, Any], Any)]"
            ],
            "arguments": {
                "content": []
            }
        },
        "prep_mount": {
            "name": "prep_mount",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "dir": [],
                "file_set": [],
                "keep_shamo": [
                    "bool"
                ]
            }
        },
        "update_mount": {
            "name": "update_mount",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "dir": [],
                "file_set": []
            }
        },
        "ensure_dir": {
            "name": "ensure_dir",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "d": []
            }
        },
        "ensure_no_dir": {
            "name": "ensure_no_dir",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "dir": []
            }
        },
        "run_bg": {
            "name": "run_bg",
            "location": 223,
            "return": [
                "subprocess.Popen[bytes]"
            ],
            "arguments": {
                "args": [
                    "list[]"
                ],
                "home": [
                    "None"
                ],
                "outfile": [],
                "script_mode": [
                    "bool"
                ]
            }
        },
        "sqlite_q": {
            "name": "sqlite_q",
            "location": 241,
            "return": [
                "list"
            ],
            "arguments": {
                "path": [],
                "select": []
            }
        },
        "TestSetup.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "log_name": [
                    "None"
                ],
                "root": [
                    "None"
                ],
                "ensure_empty": [
                    "bool"
                ],
                "script_mode": [
                    "bool"
                ]
            }
        },
        "TestSetup.ensure_empty": {
            "name": "ensure_empty",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSetup.run_script_and_wait": {
            "name": "run_script_and_wait",
            "location": 35,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "cmd": [],
                "log_file": [
                    "None"
                ],
                "expect_rc": [
                    "None"
                ],
                "expect_read": [
                    "None"
                ],
                "save_words": [
                    "None"
                ]
            }
        },
        "TestSetup.run_script_in_bg": {
            "name": "run_script_in_bg",
            "location": 45,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "cmd": [],
                "log_file": [
                    "None"
                ]
            }
        },
        "TestSetup.reset_all_process": {
            "name": "reset_all_process",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSetup.wait_all": {
            "name": "wait_all",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "print_all_logs": [
                    "bool"
                ]
            }
        },
        "TestSetup.wait_process": {
            "name": "wait_process",
            "location": 68,
            "return": [
                "Tuple[(int, str)]"
            ],
            "arguments": {
                "self": [],
                "p_id": [],
                "print_all_logs": [
                    "bool"
                ],
                "expect_rc": [
                    "None"
                ],
                "expect_read": [
                    "None"
                ],
                "save_words": [
                    "None"
                ]
            }
        },
        "TestSetup.file_path": {
            "name": "file_path",
            "location": 85,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "random_content_fn._": {
            "name": "_",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "dir": [],
                "path": [],
                "abs_path": []
            }
        },
        "move._": {
            "name": "_",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "dir": [],
                "path": [],
                "abs_path": []
            }
        },
        "text_fn.do_text_fn": {
            "name": "do_text_fn",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "dir": [],
                "path": [],
                "abs_path": []
            }
        }
    },
    "hashstore-master/hashstore/utils/api.py": {
        "_identity": {
            "name": "_identity",
            "location": 9,
            "return": [
                "str",
                "bool",
                "float",
                "Iterable[Iterable[float]]",
                "bytes"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "str",
                    "bytes",
                    "List",
                    "T"
                ]
            }
        },
        "_NamedMixin.register": {
            "name": "register",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "calls_dict": [
                    "bool",
                    "Dict",
                    "Type",
                    "str",
                    "Channel",
                    "T"
                ]
            }
        },
        "ApiCallParam.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "Dict"
                ],
                "doc": [
                    "int",
                    "Sequence",
                    "str",
                    "bool"
                ],
                "default": [
                    "int",
                    "Sequence",
                    "str",
                    "bool"
                ],
                "required": [
                    "int",
                    "Sequence",
                    "str",
                    "bool"
                ],
                "coerce_fn": [
                    "int",
                    "Sequence",
                    "str",
                    "bool"
                ]
            }
        },
        "ApiCall.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "Optional[Callable]",
                    "Callable",
                    "str",
                    "Type",
                    "bool",
                    "None"
                ],
                "call_type": [
                    "Tuple[Type]",
                    "str",
                    "Type",
                    "List[str]",
                    "Union[str,List[str]]",
                    "enum.Enum"
                ],
                "opt_names": [
                    "Sequence[Optional[str]]",
                    "List[str]",
                    "str",
                    "list",
                    "Optional[Type]",
                    "List[type]"
                ],
                "opt_defaults": [
                    "Sequence[Optional[str]]",
                    "List[Type]",
                    "str",
                    "list",
                    "List[str]",
                    "Optional[Type]"
                ],
                "params_metadata": [
                    "str",
                    "Optional[Any]",
                    "Dict[str,Any]",
                    "Any",
                    "Optional[str]",
                    "None"
                ],
                "coerce_return_fn": [
                    "Set[str]",
                    "str",
                    "Set",
                    "Type",
                    "List[str]"
                ],
                "coerce_error_fn": [
                    "bool",
                    "str"
                ]
            }
        },
        "ApiCallRegistry.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiCallRegistry.query": {
            "name": "query",
            "location": 62,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiCallRegistry.call": {
            "name": "call",
            "location": 65,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "coerce_return_fn": [
                    "bool",
                    "Sequence[int]",
                    "Union[bool, Iterable[str]]"
                ],
                "coerce_error_fn": [
                    "bool",
                    "Sequence[int]",
                    "Union[bool, Iterable[str]]"
                ],
                "call_type": [
                    "bool",
                    "Sequence[int]",
                    "Union[bool, Iterable[str]]"
                ]
            }
        },
        "ApiCallRegistry.run": {
            "name": "run",
            "location": 84,
            "return": [
                "Dict[(str, nothing)]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "call_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "params": [
                    "str",
                    "Sequence[str]",
                    "Set[str]",
                    "dict"
                ]
            }
        },
        "ApiCallRegistry.call.decorate": {
            "name": "decorate",
            "location": 68,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "Callable"
                ]
            }
        }
    },
    "hashstore-master/hashstore/utils/args.py": {
        "Opt.__new__": {
            "name": "__new__",
            "location": 14,
            "return": [
                "Opt"
            ],
            "arguments": {
                "cls": [
                    "Type[_TOpt]"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "bool",
                    "Type"
                ],
                "help": [
                    "bool",
                    "Optional[T]",
                    "T"
                ],
                "has_default": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "bool",
                    "Type"
                ],
                "default": [
                    "str",
                    "bool"
                ],
                "type": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "bool",
                    "Type"
                ],
                "choices": [
                    "Optional[str]",
                    "bool",
                    "Optional[Iterable[str]]",
                    "Optional[Dict[Hashable, Any]]",
                    "Optional[Any]"
                ]
            }
        },
        "Opt.add_itself": {
            "name": "add_itself",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "Switch.__new__": {
            "name": "__new__",
            "location": 31,
            "return": [
                "Switch"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSwitch]"
                ],
                "name": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Set[str]",
                    "dict"
                ],
                "help": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Set[str]",
                    "dict"
                ],
                "default": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Set[str]",
                    "dict"
                ]
            }
        },
        "Switch.add_itself": {
            "name": "add_itself",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "CommandArgs.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandArgs.app": {
            "name": "app",
            "location": 51,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "app_help": [
                    "str"
                ]
            }
        },
        "CommandArgs.command": {
            "name": "command",
            "location": 58,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "command_help": [
                    "Optional[str]",
                    "bool",
                    "List[str]",
                    "int"
                ]
            }
        },
        "CommandArgs.get_parser": {
            "name": "get_parser",
            "location": 94,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandArgs.parse_args": {
            "name": "parse_args",
            "location": 116,
            "return": [
                "Optional[str]",
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "namespace": [
                    "List[str]",
                    "str",
                    "Sequence[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "CommandArgs.main": {
            "name": "main",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandArgs.run": {
            "name": "run",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "CommandArgs.app.decorate": {
            "name": "decorate",
            "location": 53,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "CommandArgs.command.decorate": {
            "name": "decorate",
            "location": 59,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "IO",
                    "int"
                ]
            }
        },
        "CommandArgs.run.extract_values": {
            "name": "extract_values",
            "location": 123,
            "return": [
                "str",
                "bool",
                "List[str]",
                "int",
                "float"
            ],
            "arguments": {
                "opts": [
                    "float"
                ]
            }
        }
    },
    "hashstore-master/hashstore/utils/db.py": {
        "StringCast.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stringable_cls": [
                    "int",
                    "List"
                ]
            }
        },
        "StringCast.process_bind_param": {
            "name": "process_bind_param",
            "location": 16,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "str",
                    "bytes",
                    "Iterable[str]",
                    "None",
                    "Union[None,str,bytes]",
                    "T"
                ],
                "dialect": [
                    "int",
                    "complex",
                    "Tuple[str,int]",
                    "List",
                    "Tuple[Union[str,int]]"
                ]
            }
        },
        "StringCast.process_result_value": {
            "name": "process_result_value",
            "location": 22,
            "return": [
                "None",
                "bool",
                "Optional[str]",
                "int",
                "str",
                "Iterable[cirq.Qid]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Union[str,Sequence]",
                    "Sequence",
                    "Any",
                    "T",
                    "Optional[Any]",
                    "Optional[T]"
                ],
                "dialect": [
                    "str",
                    "Tuple[Union[Any,Any]]",
                    "Callable",
                    "sqlalchemy.engine.interfaces.Dialect",
                    "Dict",
                    "None",
                    "Optional[Tuple[Any,Any]]",
                    "Iterable[Any]"
                ]
            }
        },
        "IntCast.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "Dict",
                    "bool",
                    "Union[bytes,bytearray,memoryview]",
                    "bytes",
                    "str",
                    "List",
                    "bytearray",
                    "memoryview",
                    "T"
                ],
                "extract_key": [
                    "Dict",
                    "None",
                    "Union[bytes,bytearray,memoryview]",
                    "bool",
                    "str",
                    "List",
                    "bytes",
                    "T",
                    "bytearray",
                    "memoryview"
                ]
            }
        },
        "IntCast.process_bind_param": {
            "name": "process_bind_param",
            "location": 37,
            "return": [
                "bool",
                "str",
                "raiden.utils.Secret"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[bool,str]",
                    "Hashable",
                    "bool",
                    "List",
                    "Optional[utils.CWLOutputType]",
                    "None"
                ],
                "dialect": [
                    "int",
                    "complex",
                    "Tuple[str,int]",
                    "List",
                    "Tuple[Union[str,int]]"
                ]
            }
        },
        "IntCast.process_result_value": {
            "name": "process_result_value",
            "location": 40,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "int",
                    "Union[str,int,float]",
                    "Collection",
                    "Collection[str]",
                    "bool"
                ],
                "dialect": [
                    "str",
                    "Tuple[Union[Any,Any]]",
                    "Callable",
                    "sqlalchemy.engine.interfaces.Dialect",
                    "Dict",
                    "None",
                    "Optional[Tuple[Any,Any]]",
                    "Iterable[Any]"
                ]
            }
        },
        "Dbf.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "meta": [
                    "Dict",
                    "bool"
                ],
                "path": [
                    "str",
                    "int",
                    "Iterable[str]"
                ]
            }
        },
        "Dbf.engine": {
            "name": "engine",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str",
                "Dict",
                "Type",
                "float",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dbf.exists": {
            "name": "exists",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dbf.ensure_db": {
            "name": "ensure_db",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dbf.execute": {
            "name": "execute",
            "location": 65,
            "return": [
                "str",
                "Iterable[int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "statement": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "Dbf.connect": {
            "name": "connect",
            "location": 68,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dbf.session": {
            "name": "session",
            "location": 71,
            "return": [
                "dict",
                "Exception",
                "Dict[str, Any]",
                "str",
                "Dict[str, Union[str, Set]]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dbf.session_scope": {
            "name": "session_scope",
            "location": 78,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiSessionContextManager.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiSessionContextManager.get_session": {
            "name": "get_session",
            "location": 95,
            "return": [
                "str",
                "Callable",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "dbf_factory": [
                    "str",
                    "sqlalchemy.engine.Engine",
                    "float",
                    "bool"
                ]
            }
        },
        "MultiSessionContextManager.__enter__": {
            "name": "__enter__",
            "location": 103,
            "return": [
                "MultiSessionContextManager"
            ],
            "arguments": {
                "self": [
                    "_TMultiSessionContextManager@@MultiSessionContextManager@@"
                ]
            }
        },
        "MultiSessionContextManager.commit": {
            "name": "commit",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiSessionContextManager.__exit__": {
            "name": "__exit__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Optional[Type[BaseException]]"
                ],
                "value": [
                    "Optional[BaseException]"
                ],
                "tb": [
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ]
            }
        }
    },
    "hashstore-master/hashstore/utils/fio.py": {
        "ensure_path": {
            "name": "ensure_path",
            "location": 10,
            "return": [
                "Union[(pathlib.Path, _T0)]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[pathlib.Path]",
                    "None",
                    "Optional[str]",
                    "Union[str,pathlib.Path]"
                ]
            }
        },
        "ensure_directory": {
            "name": "ensure_directory",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "directory": [
                    "str"
                ]
            }
        },
        "read_in_chunks": {
            "name": "read_in_chunks",
            "location": 76,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "fp": [
                    "int"
                ],
                "chunk_size": [
                    "int"
                ]
            }
        },
        "is_file_in_directory": {
            "name": "is_file_in_directory",
            "location": 84,
            "return": [
                "bool",
                "str",
                "pathlib.Path",
                "Optional[str]",
                "Optional[pathlib.Path]"
            ],
            "arguments": {
                "file": [
                    "str"
                ],
                "dir": [
                    "str"
                ]
            }
        },
        "ConfigDir.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "pathlib.Path"
                ],
                "dir_name": [
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "ConfigDir.dir_path": {
            "name": "dir_path",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigDir.exists": {
            "name": "exists",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigDir.build": {
            "name": "build",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigDir.ensure": {
            "name": "ensure",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigDir.lookup_up": {
            "name": "lookup_up",
            "location": 59,
            "return": [
                "Optional[ConfigDir]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "path": [
                    "str",
                    "Union[str,pathlib.Path]",
                    "pathlib.Path"
                ],
                "dir_name": [
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        }
    },
    "hashstore-master/hashstore/utils/ignore_file.py": {
        "pick_ignore_specs": {
            "name": "pick_ignore_specs",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "ignore_files": {
            "name": "ignore_files",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "n": [
                    "str",
                    "Optional[IO[str]]",
                    "List[str]"
                ]
            }
        },
        "parse_ignore_specs": {
            "name": "parse_ignore_specs",
            "location": 61,
            "return": [
                "Union[(list, _T2)]"
            ],
            "arguments": {
                "cur_dir": [
                    "str",
                    "Dict",
                    "pathpy.core.path.Path.Collection",
                    "pathlib.Path"
                ],
                "files": [
                    "str",
                    "Optional[str]",
                    "List[int]",
                    "List[str]",
                    "None"
                ],
                "initial_ignore_entries": [
                    "List[int]",
                    "List[list[int]]",
                    "str",
                    "int",
                    "Dict[Union[str,str,str,str,str,str,str,str,str,str,str,str,str,str,str],]",
                    "List[List[int]]",
                    "Dict"
                ]
            }
        },
        "check_if_path_should_be_ignored": {
            "name": "check_if_path_should_be_ignored",
            "location": 77,
            "return": [
                "bool"
            ],
            "arguments": {
                "ignore_entries": [
                    "str",
                    "Union[str, pathlib.Path]",
                    "IO",
                    "Iterable[str]",
                    "TextIO"
                ],
                "path": [
                    "str",
                    "IO",
                    "Iterable[str]",
                    "TextIO",
                    "Union[str,pathlib.Path]"
                ],
                "isdir": [
                    "bool",
                    "List[str]",
                    "float",
                    "Sequence[str]"
                ]
            }
        },
        "IgnoreEntry.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cur_dir": [
                    "str"
                ],
                "entry": [
                    "bool",
                    "str",
                    "Dict",
                    "pathlib.Path"
                ]
            }
        },
        "IgnoreEntry.should_ignore_path": {
            "name": "should_ignore_path",
            "location": 52,
            "return": [
                "bool",
                "str",
                "Tuple",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "None",
                    "pathlib.Path",
                    "Optional[pathlib.Path]"
                ]
            }
        }
    },
    "hashstore-master/hashstore/utils/__init__.py": {
        "failback": {
            "name": "failback",
            "location": 4,
            "return": [
                "Callable"
            ],
            "arguments": {
                "fn": [
                    "bool",
                    "str",
                    "float",
                    "None",
                    "Callable[,T]",
                    "Optional",
                    "int",
                    "Optional[T]",
                    "T"
                ],
                "default": [
                    "bool",
                    "str",
                    "float",
                    "None",
                    "Callable[,T]",
                    "Optional",
                    "int",
                    "Optional[T]",
                    "T"
                ]
            }
        },
        "print_pad": {
            "name": "print_pad",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "Callable[[str, str], float]",
                    "List[int]",
                    "T",
                    "dict",
                    "bytes",
                    "int"
                ],
                "columns": [
                    "List[str]",
                    "Tuple[int]",
                    "bytes",
                    "List[list]",
                    "str",
                    "int"
                ],
                "get": [
                    "Dict[str,Any]",
                    "None",
                    "Dict",
                    "Mapping[str,str]",
                    "Union[Dict,None]",
                    "Mapping"
                ]
            }
        },
        "tuple_mapper": {
            "name": "tuple_mapper",
            "location": 99,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {}
        },
        "normalize_url": {
            "name": "normalize_url",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "failback.failback_fn": {
            "name": "failback_fn",
            "location": 18,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "KeyMapper.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "str",
                    "Dict",
                    "ks.Series"
                ],
                "extract_key": [
                    "Optional[bytes]",
                    "None",
                    "Union[float,None,int]",
                    "str",
                    "bytes",
                    "float",
                    "int"
                ]
            }
        },
        "KeyMapper.to_key": {
            "name": "to_key",
            "location": 83,
            "return": [
                "None",
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Tuple[str,str]]",
                    "Tuple[Union[str,str]]"
                ]
            }
        },
        "KeyMapper.to_value": {
            "name": "to_value",
            "location": 89,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "str",
                    "int",
                    "float",
                    "Optional[int]",
                    "None",
                    "Optional[List[Any]]",
                    "List[Any]"
                ]
            }
        },
        "KeyMapper.keys": {
            "name": "keys",
            "location": 95,
            "return": [
                "dict_keys"
            ],
            "arguments": {
                "self": []
            }
        },
        "tuple_mapper.map_fn": {
            "name": "map_fn",
            "location": 101,
            "return": [
                "Callable",
                "str",
                "List[int]"
            ],
            "arguments": {
                "i": [
                    "Optional[int]",
                    "int",
                    "List[int]",
                    "Optional[float]"
                ]
            }
        },
        "tuple_mapper._mapper": {
            "name": "_mapper",
            "location": 106,
            "return": [
                "Tuple",
                "bool",
                "str",
                "Exception",
                "int",
                "Optional[bool]"
            ],
            "arguments": {
                "in_tuple": [
                    "str",
                    "Match",
                    "Match[Any]",
                    "bool"
                ]
            }
        }
    }
}
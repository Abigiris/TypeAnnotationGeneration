{
    "hdd-recovery-master/Recovered data 06-29 15_47_08/Deleted files/$RECYCLE.BIN/rasto/school/github/PV056-AutoML-testing-framework/setup.py": {},
    "hdd-recovery-master/Recovered data 06-29 15_47_08/Deleted files/$RECYCLE.BIN/rasto/school/github/PV056-AutoML-testing-framework/pv056_2019/apply_od_methods.py": {
        "main": {
            "name": "main",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "hdd-recovery-master/Recovered data 06-29 15_47_08/Deleted files/$RECYCLE.BIN/rasto/school/github/PV056-AutoML-testing-framework/pv056_2019/classifiers.py": {
        "ClassifierManager.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "log_folder": [
                    "str",
                    "bytes",
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "weka_jar_path": [
                    "str",
                    "bytes",
                    "Union[bool, str]"
                ]
            }
        },
        "ClassifierManager._create_final_config_file": {
            "name": "_create_final_config_file",
            "location": 37,
            "return": [
                "str",
                "dict",
                "bool",
                "cmk.utils.type_defs.OptionalConfigSerial",
                "Dict[str, Any]"
            ],
            "arguments": {
                "dataset_conf_path": [
                    "str"
                ],
                "classifier": [
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "ClassifierManager._save_model_config": {
            "name": "_save_model_config",
            "location": 52,
            "return": [],
            "arguments": {
                "config_file_path": [
                    "str"
                ],
                "config_data": [
                    "str",
                    "Optional[Union[Dict, str, int, bytes]]",
                    "Set[str]"
                ]
            }
        },
        "ClassifierManager.fill_queue_and_create_configs": {
            "name": "fill_queue_and_create_configs",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "queue": [
                    "multiprocessing.Queue",
                    "str",
                    "int",
                    "List[str]",
                    "Dict[str, Dict]"
                ],
                "classifiers": [
                    "List[List[str]]",
                    "str"
                ],
                "dataset_tuples": [
                    "List[List[str]]",
                    "str"
                ]
            }
        }
    },
    "hdd-recovery-master/Recovered data 06-29 15_47_08/Deleted files/$RECYCLE.BIN/rasto/school/github/PV056-AutoML-testing-framework/pv056_2019/data_loader.py": {
        "DataFrameArff.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameArff.arff_data": {
            "name": "arff_data",
            "location": 37,
            "return": [
                "Dict[Text,]",
                "Dict[str,List[int]]",
                "Dict",
                "str",
                "Optional[float]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameArff.arff_dumps": {
            "name": "arff_dumps",
            "location": 42,
            "return": [
                "bool",
                "Dict[str, Any]",
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameArff.arff_dump": {
            "name": "arff_dump",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "DataFrameArff._binarize_categorical_values": {
            "name": "_binarize_categorical_values",
            "location": 51,
            "return": [
                "int",
                "str",
                "Tuple[int, int]",
                "numpy.ndarray",
                "Tuple[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameArff.add_index_column": {
            "name": "add_index_column",
            "location": 99,
            "return": [
                "DataFrameArff",
                "Optional[str]",
                "cmk.utils.type_defs.EventRule",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameArff.apply_outlier_detector": {
            "name": "apply_outlier_detector",
            "location": 105,
            "return": [
                "List[int]",
                "Iterable[str]",
                "int",
                "Callable",
                "numpy.ndarray",
                "str"
            ],
            "arguments": {
                "self": [],
                "detector_schema": [
                    "str",
                    "numpy.ndarray",
                    "Set[str]",
                    "int"
                ]
            }
        },
        "DataFrameArff.select_by_index": {
            "name": "select_by_index",
            "location": 131,
            "return": [
                "DataFrameArff",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "DataFrameArff.select_by_od_quantile": {
            "name": "select_by_od_quantile",
            "location": 138,
            "return": [
                "DataFrameArff",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "quantile": [
                    "str",
                    "Tuple"
                ]
            }
        },
        "DataLoader.__init__": {
            "name": "__init__",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_path": [
                    "str",
                    "Optional[str]"
                ],
                "regex": [
                    "str",
                    "Text"
                ]
            }
        },
        "DataLoader._load_data_file": {
            "name": "_load_data_file",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "file_path": [
                    "str",
                    "bool"
                ]
            }
        },
        "DataLoader._load_arff_file": {
            "name": "_load_arff_file",
            "location": 175,
            "return": [
                "DataFrameArff",
                "IO",
                "bytes",
                "bool"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        },
        "DataLoader.load_files": {
            "name": "load_files",
            "location": 180,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hdd-recovery-master/Recovered data 06-29 15_47_08/Deleted files/$RECYCLE.BIN/rasto/school/github/PV056-AutoML-testing-framework/pv056_2019/data_splitter.py": {
        "main": {
            "name": "main",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "hdd-recovery-master/Recovered data 06-29 15_47_08/Deleted files/$RECYCLE.BIN/rasto/school/github/PV056-AutoML-testing-framework/pv056_2019/main_clf.py": {
        "_valid_config_path": {
            "name": "_valid_config_path",
            "location": 13,
            "return": [
                "str",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "weka_worker": {
            "name": "weka_worker",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "queue": [
                    "tuple",
                    "List[str]",
                    "str",
                    "bool",
                    "Sequence[str]",
                    "Type"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "hdd-recovery-master/Recovered data 06-29 15_47_08/Deleted files/$RECYCLE.BIN/rasto/school/github/PV056-AutoML-testing-framework/pv056_2019/remove_outliers.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "hdd-recovery-master/Recovered data 06-29 15_47_08/Deleted files/$RECYCLE.BIN/rasto/school/github/PV056-AutoML-testing-framework/pv056_2019/schemas.py": {
        "OutlierDetectorSchema.detector_name": {
            "name": "detector_name",
            "location": 19,
            "return": [
                "str",
                "List",
                "List[str]",
                "T",
                "Container",
                "Type",
                "int",
                "None"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "value": [
                    "str",
                    "List[str]",
                    "Container[Taxon]",
                    "Container",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "RemoveOutliersConfigSchema.percentage_validator": {
            "name": "percentage_validator",
            "location": 43,
            "return": [
                "float",
                "str",
                "int",
                "Dict[str,Any]"
            ],
            "arguments": {
                "cls": [
                    "Dict",
                    "str",
                    "int",
                    "T",
                    "None",
                    "Optional[str]",
                    "bool"
                ],
                "value": [
                    "float",
                    "str",
                    "List"
                ]
            }
        },
        "ClassifierSchema.name": {
            "name": "name",
            "location": 61,
            "return": [
                "str",
                "Callable[..., T]",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "RunClassifiersCongfigSchema.n_jobs_validator": {
            "name": "n_jobs_validator",
            "location": 72,
            "return": [
                "int",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "cls": [
                    "Dict",
                    "str",
                    "int",
                    "T",
                    "List",
                    "None",
                    "Optional[str]"
                ],
                "value": [
                    "int",
                    "Dict",
                    "T",
                    "str",
                    "Optional[str]",
                    "List"
                ]
            }
        }
    },
    "hdd-recovery-master/Recovered data 06-29 15_47_08/Deleted files/$RECYCLE.BIN/rasto/school/github/PV056-AutoML-testing-framework/pv056_2019/statistics.py": {
        "compile_reg": {
            "name": "compile_reg",
            "location": 10,
            "return": [
                "str",
                "Callable[[KT], VT]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "hdd-recovery-master/Recovered data 06-29 15_47_08/Deleted files/$RECYCLE.BIN/rasto/school/github/PV056-AutoML-testing-framework/pv056_2019/utils.py": {},
    "hdd-recovery-master/Recovered data 06-29 15_47_08/Deleted files/$RECYCLE.BIN/rasto/school/github/PV056-AutoML-testing-framework/pv056_2019/__init__.py": {},
    "hdd-recovery-master/Recovered data 06-29 15_47_08/Deleted files/$RECYCLE.BIN/rasto/school/github/PV056-AutoML-testing-framework/pv056_2019/outlier_detection/CB.py": {
        "CBMetric.compute_values": {
            "name": "compute_values",
            "location": 6,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "classes": [
                    "list",
                    "str",
                    "List[int]",
                    "List[Union[int, float]]",
                    "bytes",
                    "bytearray"
                ]
            }
        }
    },
    "hdd-recovery-master/Recovered data 06-29 15_47_08/Deleted files/$RECYCLE.BIN/rasto/school/github/PV056-AutoML-testing-framework/pv056_2019/outlier_detection/CL.py": {
        "CLMetric.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "CLMetric.findLikelihood": {
            "name": "findLikelihood",
            "location": 9,
            "return": [
                "int",
                "Set",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "set",
                    "str",
                    "int",
                    "bool"
                ],
                "classes": [
                    "Type",
                    "Sequence[str]",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        }
    },
    "hdd-recovery-master/Recovered data 06-29 15_47_08/Deleted files/$RECYCLE.BIN/rasto/school/github/PV056-AutoML-testing-framework/pv056_2019/outlier_detection/CLD.py": {
        "CLDMetric.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "CLDMetric.findLikelihood": {
            "name": "findLikelihood",
            "location": 9,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "set",
                    "str",
                    "int",
                    "bool"
                ],
                "classes": []
            }
        }
    },
    "hdd-recovery-master/Recovered data 06-29 15_47_08/Deleted files/$RECYCLE.BIN/rasto/school/github/PV056-AutoML-testing-framework/pv056_2019/outlier_detection/DCP.py": {
        "DCPMetric.countDCP": {
            "name": "countDCP",
            "location": 7,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "bool",
                    "List[int]",
                    "Union[Callable, str]"
                ],
                "classes": [
                    "int",
                    "float",
                    "Optional[Iterable[int]]",
                    "Iterable[int]",
                    "None"
                ],
                "minimum_impurity_split": [
                    "bool",
                    "str",
                    "Optional[TreeNode]",
                    "Callable[...,T]",
                    "None"
                ]
            }
        }
    },
    "hdd-recovery-master/Recovered data 06-29 15_47_08/Deleted files/$RECYCLE.BIN/rasto/school/github/PV056-AutoML-testing-framework/pv056_2019/outlier_detection/DS.py": {
        "DSMetric.countDS": {
            "name": "countDS",
            "location": 9,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "classes": [
                    "Dict",
                    "bool",
                    "Sequence",
                    "Callable"
                ]
            }
        }
    },
    "hdd-recovery-master/Recovered data 06-29 15_47_08/Deleted files/$RECYCLE.BIN/rasto/school/github/PV056-AutoML-testing-framework/pv056_2019/outlier_detection/F2.py": {
        "F2Metric.compute_values": {
            "name": "compute_values",
            "location": 11,
            "return": [
                "bool",
                "List",
                "int",
                "pandas.Series",
                "Mapping",
                "List[tuple[Union[int,Any]]]",
                "Sequence[str]"
            ],
            "arguments": {
                "df": [
                    "bool"
                ],
                "classes": [
                    "int",
                    "List[DictDataLoader]",
                    "numpy.array",
                    "List[str]",
                    "None",
                    "pandas.DataFrame",
                    "Optional[List[str]]"
                ]
            }
        },
        "F2Metric._f2_step": {
            "name": "_f2_step",
            "location": 35,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "class_extremes": [
                    "str",
                    "Type",
                    "numpy.ndarray"
                ]
            }
        }
    },
    "hdd-recovery-master/Recovered data 06-29 15_47_08/Deleted files/$RECYCLE.BIN/rasto/school/github/PV056-AutoML-testing-framework/pv056_2019/outlier_detection/KDN.py": {
        "KDNMetric.countKDN": {
            "name": "countKDN",
            "location": 9,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "str",
                    "Callable"
                ],
                "classes": [
                    "int",
                    "Sequence[T]",
                    "str",
                    "bool",
                    "numpy.ndarray"
                ],
                "k": []
            }
        }
    },
    "hdd-recovery-master/Recovered data 06-29 15_47_08/Deleted files/$RECYCLE.BIN/rasto/school/github/PV056-AutoML-testing-framework/pv056_2019/outlier_detection/MV.py": {
        "MVMetric.compute_values": {
            "name": "compute_values",
            "location": 6,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "classes": [
                    "Dict",
                    "Set",
                    "numpy.array",
                    "Type"
                ]
            }
        }
    },
    "hdd-recovery-master/Recovered data 06-29 15_47_08/Deleted files/$RECYCLE.BIN/rasto/school/github/PV056-AutoML-testing-framework/pv056_2019/outlier_detection/N1.py": {
        "N1Metric.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "N1Metric.findFraction": {
            "name": "findFraction",
            "location": 10,
            "return": [
                "float",
                "int",
                "Set",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "str",
                    "List[Tuple[str, str]]",
                    "list",
                    "Iterable[Iterable[T]]"
                ],
                "classes": [
                    "List[int]",
                    "Atom",
                    "List[str]",
                    "bool",
                    "str",
                    "Type",
                    "Set[str]",
                    "Type[T]"
                ]
            }
        }
    },
    "hdd-recovery-master/Recovered data 06-29 15_47_08/Deleted files/$RECYCLE.BIN/rasto/school/github/PV056-AutoML-testing-framework/pv056_2019/outlier_detection/N2.py": {
        "N2Metric.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "N2Metric.findFraction": {
            "name": "findFraction",
            "location": 10,
            "return": [
                "str",
                "int",
                "Callable[..., T]"
            ],
            "arguments": {
                "self": [],
                "df": [],
                "classes": [
                    "Tuple[float,float]",
                    "float",
                    "Tuple[Union[float,float]]",
                    "bool",
                    "Optional[Iterable[int]]",
                    "None"
                ]
            }
        }
    },
    "hdd-recovery-master/Recovered data 06-29 15_47_08/Deleted files/$RECYCLE.BIN/rasto/school/github/PV056-AutoML-testing-framework/pv056_2019/outlier_detection/T1.py": {
        "T1Metric.compute_values": {
            "name": "compute_values",
            "location": 8,
            "return": [
                "float",
                "int",
                "bool"
            ],
            "arguments": {
                "df": [
                    "str",
                    "pandas.DataFrame",
                    "List[list[Any]]",
                    "List[List[Any]]",
                    "numpy.array"
                ]
            }
        }
    },
    "hdd-recovery-master/Recovered data 06-29 15_47_08/Deleted files/$RECYCLE.BIN/rasto/school/github/PV056-AutoML-testing-framework/pv056_2019/outlier_detection/TD.py": {
        "TDMetric.findLeafDepthWithoutPrunning": {
            "name": "findLeafDepthWithoutPrunning",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "List[str]",
                    "int"
                ],
                "classes": [
                    "Dict",
                    "Sequence",
                    "bool",
                    "Callable"
                ]
            }
        },
        "TDMetric.findLeafDepthWithPrunning": {
            "name": "findLeafDepthWithPrunning",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "str",
                    "int",
                    "bytes"
                ],
                "classes": [
                    "int",
                    "float",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "minimum_impurity_split": [
                    "List[int]",
                    "Optional[List[int]]",
                    "bool",
                    "None",
                    "Optional[numpy.ndarray]",
                    "int"
                ]
            }
        }
    },
    "hdd-recovery-master/Recovered data 06-29 15_47_08/Deleted files/$RECYCLE.BIN/rasto/school/github/PV056-AutoML-testing-framework/pv056_2019/outlier_detection/__init__.py": {
        "detector": {
            "name": "detector",
            "location": 38,
            "return": [
                "Dict[str,Any]",
                "str",
                "Callable[[str],T]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str,Any]"
                ]
            }
        },
        "AbstractDetector.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractDetector.compute_scores": {
            "name": "compute_scores",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "Type",
                    "numpy.array",
                    "pandas.DataFrame"
                ],
                "classes": [
                    "Type",
                    "numpy.array",
                    "pandas.DataFrame"
                ]
            }
        },
        "LOF.compute_scores": {
            "name": "compute_scores",
            "location": 48,
            "return": [
                "LOF",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "pandas.DataFrame"
                ],
                "classes": [
                    "Type",
                    "numpy.array",
                    "pandas.DataFrame"
                ]
            }
        },
        "NN.compute_scores": {
            "name": "compute_scores",
            "location": 62,
            "return": [
                "NN",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "pandas.DataFrame"
                ],
                "classes": [
                    "Type",
                    "numpy.array",
                    "pandas.DataFrame"
                ]
            }
        },
        "KDN.compute_scores": {
            "name": "compute_scores",
            "location": 82,
            "return": [
                "KDN",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "pandas.DataFrame"
                ],
                "classes": [
                    "str",
                    "Dict[str,Any]",
                    "Union[numbers.Real,numpy.ndarray]"
                ]
            }
        },
        "DS.compute_scores": {
            "name": "compute_scores",
            "location": 100,
            "return": [
                "DS",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "pandas.DataFrame"
                ],
                "classes": [
                    "str"
                ]
            }
        },
        "DCP.compute_scores": {
            "name": "compute_scores",
            "location": 116,
            "return": [
                "DCP",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "pandas.DataFrame"
                ],
                "classes": [
                    "str",
                    "Dict[str,Any]",
                    "Union[numbers.Real,numpy.ndarray]"
                ]
            }
        },
        "TD.compute_scores": {
            "name": "compute_scores",
            "location": 132,
            "return": [
                "TD",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "pandas.DataFrame"
                ],
                "classes": [
                    "str",
                    "bytes",
                    "bool",
                    "Type[Any]",
                    "Type"
                ]
            }
        },
        "TDWithPrunning.compute_scores": {
            "name": "compute_scores",
            "location": 146,
            "return": [
                "TDWithPrunning",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "pandas.DataFrame"
                ],
                "classes": [
                    "str",
                    "bytes",
                    "bool",
                    "Type[Any]",
                    "Type"
                ]
            }
        },
        "IsoForest.compute_scores": {
            "name": "compute_scores",
            "location": 196,
            "return": [
                "IsoForest",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "pandas.DataFrame"
                ],
                "classes": [
                    "Type",
                    "numpy.array",
                    "pandas.DataFrame"
                ]
            }
        },
        "F3.compute_scores": {
            "name": "compute_scores",
            "location": 210,
            "return": [
                "F3",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "pandas.DataFrame"
                ],
                "classes": [
                    "Set[T]",
                    "List[Type]",
                    "numpy.array",
                    "Set[VT]"
                ]
            }
        },
        "CL.compute_scores": {
            "name": "compute_scores",
            "location": 241,
            "return": [
                "CL",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "pandas.DataFrame"
                ],
                "classes": [
                    "str",
                    "bytes",
                    "bool",
                    "Type[Any]",
                    "Type"
                ]
            }
        },
        "CLD.compute_scores": {
            "name": "compute_scores",
            "location": 255,
            "return": [
                "CLD",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "pandas.DataFrame"
                ],
                "classes": [
                    "str",
                    "bytes",
                    "bool",
                    "Type[Any]",
                    "Type"
                ]
            }
        },
        "F2.compute_scores": {
            "name": "compute_scores",
            "location": 269,
            "return": [
                "F2",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "pandas.DataFrame"
                ],
                "classes": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "T1.compute_scores": {
            "name": "compute_scores",
            "location": 281,
            "return": [
                "T1",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "pandas.DataFrame"
                ],
                "classes": [
                    "Type",
                    "numpy.array",
                    "pandas.DataFrame"
                ]
            }
        },
        "F4.compute_scores": {
            "name": "compute_scores",
            "location": 293,
            "return": [
                "F4",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "pandas.DataFrame"
                ],
                "classes": [
                    "Set[T]",
                    "List[Type]",
                    "numpy.array",
                    "Set[VT]"
                ]
            }
        },
        "F4.find_best_F3_feature": {
            "name": "find_best_F3_feature",
            "location": 320,
            "return": [
                "Tuple[Union[None,int,str]]",
                "pandas.DataFrame",
                "str",
                "int"
            ],
            "arguments": {
                "bin_dataframe": [
                    "str",
                    "bytes",
                    "List[str]",
                    "numpy.ndarray",
                    "bool",
                    "int"
                ],
                "df1": [
                    "Tuple[Union[int,int,int]]",
                    "int",
                    "float",
                    "Tuple[int,int,int]"
                ],
                "df2": [
                    "Tuple[Union[int,int,int]]",
                    "int",
                    "float",
                    "Tuple[int,int,int]"
                ],
                "num_rows": [
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "T2.compute_scores": {
            "name": "compute_scores",
            "location": 350,
            "return": [
                "T2",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "pandas.DataFrame"
                ],
                "classes": [
                    "Type",
                    "numpy.array",
                    "pandas.DataFrame"
                ]
            }
        },
        "MV.compute_scores": {
            "name": "compute_scores",
            "location": 391,
            "return": [
                "MV",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "Type",
                    "numpy.array",
                    "pandas.DataFrame"
                ],
                "classes": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "CB.compute_scores": {
            "name": "compute_scores",
            "location": 403,
            "return": [
                "CB",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "Type",
                    "numpy.array",
                    "pandas.DataFrame"
                ],
                "classes": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "COR.compute_scores": {
            "name": "compute_scores",
            "location": 415,
            "return": [
                "COR",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "pandas.DataFrame",
                    "Optional[str]"
                ],
                "classes": [
                    "Type",
                    "numpy.array",
                    "pandas.DataFrame"
                ]
            }
        }
    },
    "hdd-recovery-master/Recovered data 06-29 15_47_08/Deleted files/$RECYCLE.BIN/rasto/school/github/PV056-AutoML-testing-framework/pv056_2019/rastostuff/COR.py": {
        "repaircsv": {
            "name": "repaircsv",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "findBestPercentage": {
            "name": "findBestPercentage",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "filterBestPercentage": {
            "name": "filterBestPercentage",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "percentage": [
                    "int",
                    "List[allennlp.data.tokenizers.token.Token]",
                    "str",
                    "bool",
                    "List"
                ]
            }
        },
        "CORMetric.getCOR": {
            "name": "getCOR",
            "location": 29,
            "return": [
                "str",
                "bool",
                "dict",
                "set",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "str",
                    "pandas._FileOrBuffer[AnyStr]"
                ]
            }
        }
    },
    "hdd-recovery-master/Recovered data 06-29 15_47_08/Deleted files/$RECYCLE.BIN/rasto/school/github/PV056-AutoML-testing-framework/pv056_2019/rastostuff/ensembles.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "hdd-recovery-master/Recovered data 06-29 15_47_08/Deleted files/$RECYCLE.BIN/rasto/school/github/PV056-AutoML-testing-framework/pv056_2019/rastostuff/F3F4.py": {
        "F3": {
            "name": "F3",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "bin_dataframe": [
                    "str",
                    "Transaction",
                    "int"
                ]
            }
        },
        "F4": {
            "name": "F4",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "bin_dataframe": [
                    "List[pandas.DataFrame]",
                    "Tuple[cirq.Qid]"
                ]
            }
        },
        "find_best_F3_feature": {
            "name": "find_best_F3_feature",
            "location": 51,
            "return": [
                "Tuple[Union[None,int,str]]",
                "pandas.DataFrame",
                "str",
                "int"
            ],
            "arguments": {
                "bin_dataframe": [
                    "str",
                    "bytes",
                    "List[str]",
                    "numpy.ndarray",
                    "bool",
                    "int"
                ],
                "df1": [
                    "Tuple[Union[int,int,int]]",
                    "int",
                    "float",
                    "Tuple[int,int,int]"
                ],
                "df2": [
                    "Tuple[Union[int,int,int]]",
                    "int",
                    "float",
                    "Tuple[int,int,int]"
                ],
                "num_rows": [
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        }
    },
    "hdd-recovery-master/Recovered data 06-29 15_47_08/Deleted files/$RECYCLE.BIN/rasto/school/github/PV056-AutoML-testing-framework/pv056_2019/rastostuff/__init__.py": {}
}
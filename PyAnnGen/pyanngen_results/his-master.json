{
    "his-master/services/shopping/conftest.py": {},
    "his-master/services/shopping/src/bootstrap.py": {},
    "his-master/services/shopping/src/__init__.py": {},
    "his-master/services/shopping/src/shopping/actions.py": {
        "_ensure_UUID": {
            "name": "_ensure_UUID",
            "location": 22,
            "return": [
                "int",
                "str",
                "Callable",
                "list[]",
                "typing.TextIO",
                "UUID"
            ],
            "arguments": {
                "uuid": [
                    "str",
                    "types.UUIDType",
                    "int",
                    "list[]",
                    "list",
                    "typing.TextIO",
                    "TextIO"
                ]
            }
        },
        "_item_repo": {
            "name": "_item_repo",
            "location": 28,
            "return": [
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "his-master/services/shopping/src/shopping/contracts.py": {},
    "his-master/services/shopping/src/shopping/domain.py": {},
    "his-master/services/shopping/src/shopping/exceptions.py": {},
    "his-master/services/shopping/src/shopping/repositories.py": {
        "MemoryListItemRepository.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "his-master/services/shopping/src/shopping/types.py": {},
    "his-master/services/shopping/src/shopping/__init__.py": {},
    "his-master/services/shopping/src/tests/__init__.py": {},
    "his-master/services/shopping/src/tests/integration/__init__.py": {},
    "his-master/services/shopping/src/tests/unit/test_domain.py": {
        "test_description_is_required_for_list_items": {
            "name": "test_description_is_required_for_list_items",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_dict_representation_of_list_items": {
            "name": "test_dict_representation_of_list_items",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "his-master/services/shopping/src/tests/unit/__init__.py": {},
    "his-master/services/shopping/src/wamp/conf.py": {
        "env.__new__": {
            "name": "__new__",
            "location": 7,
            "return": [
                "Optional[int]",
                "str",
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "Type",
                    "type"
                ]
            }
        },
        "env.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "getter": [
                    "dict",
                    "bool",
                    "dict[, ]",
                    "str"
                ],
                "key": [
                    "dict",
                    "None",
                    "str",
                    "Union[str, \"DatabaseURL\"]",
                    "bool",
                    "dict[, ]"
                ],
                "parser": [
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "env.__get__": {
            "name": "__get__",
            "location": 17,
            "return": [
                "env",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Optional[str]",
                    "None",
                    "Optional[Mapping[str, str]]",
                    "typing.Mapping"
                ],
                "parser": [
                    "str",
                    "int",
                    "None",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "Settings.DATABASE_DSN": {
            "name": "DATABASE_DSN",
            "location": 34,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.AUTOBAHN_ROUTER": {
            "name": "AUTOBAHN_ROUTER",
            "location": 38,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.AUTOBAHN_REALM": {
            "name": "AUTOBAHN_REALM",
            "location": 42,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.LOGGING": {
            "name": "LOGGING",
            "location": 46,
            "return": [
                "dict[typing.Text, typing.Union[int,dict[typing.Text, dict[typing.Text, typing.Union[list[typing.Text],typing.Text,bool]]]]]",
                "Dict[str, Any]",
                "Dict[str, Dict[str, Any]]",
                "Optional[Dict[str, str]]",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "his-master/services/shopping/src/wamp/service.py": {
        "Shopping._build_handler": {
            "name": "_build_handler",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "bool",
                    "list[]",
                    "list",
                    "Iterable[str]"
                ]
            }
        }
    },
    "his-master/shared/almanac/conftest.py": {},
    "his-master/shared/almanac/setup.py": {},
    "his-master/shared/almanac/almanac/exceptions.py": {
        "ServiceNotFoundError.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract_name": [
                    "str"
                ]
            }
        },
        "InvalidServiceType.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service_class": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "dict[str, typing.Any]",
                    "Hashable",
                    "typing.Hashable"
                ]
            }
        },
        "InvalidContract.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "str",
                    "Iterable[Any]",
                    "typing.Iterable[typing.Any]"
                ]
            }
        }
    },
    "his-master/shared/almanac/almanac/registry.py": {
        "Services.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Services._get_contract_name": {
            "name": "_get_contract_name",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "typing.Type",
                    "bool",
                    "type",
                    "bytes",
                    "str",
                    "set[str]",
                    "Set[str]",
                    "None",
                    "Type[object]",
                    "Optional[str]"
                ]
            }
        },
        "Services.register": {
            "name": "register",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[int]",
                    "str",
                    "int",
                    "Optional[dict]",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "Services.get": {
            "name": "get",
            "location": 26,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "type",
                    "typing.Type",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        }
    },
    "his-master/shared/almanac/almanac/__init__.py": {},
    "his-master/shared/almanac/tests/test_registry.py": {
        "test_registering_service_without_abc_raises_exception": {
            "name": "test_registering_service_without_abc_raises_exception",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_gets_correct_contract_name": {
            "name": "test_gets_correct_contract_name",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_retrieve_register_service_by_contract": {
            "name": "test_can_retrieve_register_service_by_contract",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_retrieving_unregistered_service_raises_an_exception": {
            "name": "test_retrieving_unregistered_service_raises_an_exception",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_retrieving_with_non_type_raises_exception": {
            "name": "test_retrieving_with_non_type_raises_exception",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_retrieving_with_non_contract_class_raises_exception": {
            "name": "test_retrieving_with_non_contract_class_raises_exception",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "MockContract.m": {
            "name": "m",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockService.m": {
            "name": "m",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "his-master/shared/almanac/tests/__init__.py": {}
}
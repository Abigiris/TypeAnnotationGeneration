{
    "histutils-main/ConvertDMC2h5.py": {
        "dmclooper": {
            "name": "dmclooper",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "str"
                ]
            }
        },
        "plots": {
            "name": "plots",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "rawImgData": [
                    "Hashable",
                    "Dict",
                    "DefaultDict",
                    "defaultdict",
                    "Dict[str,Any]",
                    "BinaryIO",
                    "bytes",
                    "None",
                    "Optional[Dict]",
                    "Union[pandas.DataFrame,numpy.ndarray]"
                ],
                "rawind": [
                    "Hashable",
                    "Dict",
                    "bytes",
                    "Optional[Dict]",
                    "int",
                    "None"
                ],
                "finf": [
                    "str",
                    "bytes",
                    "int",
                    "BinaryIO"
                ]
            }
        }
    },
    "histutils-main/HDDcost.py": {
        "Cam.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "npix": [
                    "int",
                    "float",
                    "bool"
                ],
                "fps": [
                    "int",
                    "float",
                    "bool"
                ],
                "hddTB": [
                    "int",
                    "float",
                    "bool"
                ],
                "cost": [
                    "int",
                    "float",
                    "bool"
                ],
                "nbit": [
                    "int",
                    "bool",
                    "float"
                ],
                "goodfrac": [
                    "float",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "histutils-main/Playh5.py": {
        "playh5movie": {
            "name": "playh5movie",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "h5fn": [
                    "str",
                    "Union[io.TextIO,pathlib.Path]",
                    "bool",
                    "IO",
                    "TextIO"
                ],
                "imgh5": [
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "bool"
                ],
                "outfn": [
                    "str",
                    "List[str]",
                    "bool",
                    "pathlib.Path",
                    "BinaryIO",
                    "Mapping",
                    "None",
                    "int",
                    "Optional[Mapping[str,Any]]"
                ],
                "clim": [
                    "Tuple[Union[int,int]]",
                    "bool",
                    "Tuple[int,int]",
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "hdf2video": {
            "name": "hdf2video",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "Dict",
                    "numpy.ndarray",
                    "int"
                ],
                "outfn": [
                    "Tuple[Union[int,int,bytearray]]",
                    "int",
                    "Tuple[int,int,bytearray]",
                    "Dict[str,Any]",
                    "bytes",
                    "str",
                    "Dict",
                    "Union[dict,list]",
                    "List",
                    "bool",
                    "Iterable[bytes]"
                ],
                "clim": [
                    "Tuple[int,int]",
                    "bytes",
                    "Tuple[Union[int,int]]",
                    "str"
                ]
            }
        },
        "gray2rgb": {
            "name": "gray2rgb",
            "location": 58,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "gray": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "histutils-main/RunSimulFrame.py": {
        "getmulticam": {
            "name": "getmulticam",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "flist": [
                    "str"
                ],
                "tstartstop": [
                    "int",
                    "Callable",
                    "str"
                ],
                "framereq": [
                    "int",
                    "Callable",
                    "str"
                ],
                "cpar": [
                    "List",
                    "Dict[str,str]",
                    "Callable",
                    "Sequence[cirq.Qid]",
                    "Iterable[T]",
                    "T"
                ],
                "odir": [
                    "bool",
                    "str",
                    "Path"
                ],
                "cals": [
                    "int",
                    "Union[List[str], List[int]]",
                    "bytes",
                    "str",
                    "bool"
                ],
                "cmdlog": [
                    "Text",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Sim.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dpath": [
                    "int",
                    "float",
                    "bool"
                ],
                "fn0": [
                    "str",
                    "pathlib.Path"
                ],
                "tstartstop": [
                    "str",
                    "pathlib.Path",
                    "Callable"
                ],
                "framereq": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "Union[str,int]",
                    "argparse.Namespace",
                    "bool"
                ]
            }
        }
    },
    "histutils-main/setup.py": {},
    "histutils-main/WhenEnd.py": {},
    "histutils-main/WienerAurora.py": {},
    "histutils-main/XMLparamPrint.py": {},
    "histutils-main/src/histutils/camclass.py": {
        "Cam.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sim": [],
                "cp": [],
                "name": [],
                "zmax": [],
                "xreq": [],
                "makeplot": [],
                "calfn": [],
                "verbose": []
            }
        },
        "Cam.arbanglemap": {
            "name": "arbanglemap",
            "location": 277,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cam.astrometrymap": {
            "name": "astrometrymap",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cam.toecef": {
            "name": "toecef",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ranges": []
            }
        },
        "Cam.doorientimage": {
            "name": "doorientimage",
            "location": 305,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "frame": []
            }
        },
        "Cam.doorient": {
            "name": "doorient",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cam.debias": {
            "name": "debias",
            "location": 389,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Cam.donoise": {
            "name": "donoise",
            "location": 399,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Cam.dosmooth": {
            "name": "dosmooth",
            "location": 422,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Cam.fixnegval": {
            "name": "fixnegval",
            "location": 433,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "_T0@@"
                ]
            }
        },
        "Cam.scaleintens": {
            "name": "scaleintens",
            "location": 445,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Cam.dolowerthres": {
            "name": "dolowerthres",
            "location": 459,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "_T0@@"
                ]
            }
        },
        "Cam.findLSQ": {
            "name": "findLSQ",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nearrow": [],
                "nearcol": [],
                "odir": []
            }
        },
        "Cam.sky2beam": {
            "name": "sky2beam",
            "location": 522,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "angledist_deg": []
            }
        },
        "Cam.findClosestAzel": {
            "name": "findClosestAzel",
            "location": 535,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "odir": []
            }
        }
    },
    "histutils-main/src/histutils/cp_parents.py": {
        "cp_parents": {
            "name": "cp_parents",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "files": [
                    "str",
                    "pathlib.Path",
                    "Union[str,pathlib.Path]",
                    "Sequence[str]"
                ],
                "target_dir": [
                    "str",
                    "pathlib.Path"
                ]
            }
        }
    },
    "histutils-main/src/histutils/findnearest.py": {
        "findClosestAzel": {
            "name": "findClosestAzel",
            "location": 7,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "az": [
                    "Callable"
                ],
                "el": [
                    "Callable",
                    "bool",
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]"
                ],
                "azpts": [
                    "float",
                    "bool",
                    "numpy.array"
                ],
                "elpts": [
                    "int",
                    "Set",
                    "str"
                ]
            }
        },
        "_findindex": {
            "name": "_findindex",
            "location": 44,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "az0": [
                    "str",
                    "bool",
                    "numpy.ndarray"
                ],
                "el0": [
                    "str",
                    "bool",
                    "numpy.ndarray",
                    "int"
                ],
                "az": [
                    "float",
                    "bool",
                    "numpy.ndarray",
                    "int"
                ],
                "el": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "histutils-main/src/histutils/get1Dcut.py": {
        "get1Dcut": {
            "name": "get1Dcut",
            "location": 12,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cam": [
                    "str",
                    "bool"
                ],
                "odir": [
                    "Type[numpy.number]",
                    "int",
                    "str"
                ],
                "verbose": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "histutils-main/src/histutils/hstxmlparse.py": {
        "xmlparam": {
            "name": "xmlparam",
            "location": 10,
            "return": [
                "Dict[(str, Union[(float, int)])]"
            ],
            "arguments": {
                "fn": [
                    "List[int]",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "histutils-main/src/histutils/index.py": {
        "getRawInd": {
            "name": "getRawInd",
            "location": 8,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "bytes",
                    "Iterable[int]",
                    "Optional[int]"
                ],
                "finf": [
                    "Dict[str, int]",
                    "int",
                    "str"
                ]
            }
        },
        "meta2rawInd": {
            "name": "meta2rawInd",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "f": [
                    "int"
                ],
                "Nmetadata": [
                    "int"
                ]
            }
        },
        "req2frame": {
            "name": "req2frame",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "req": [
                    "Sequence[int]",
                    "int",
                    "Optional[int]"
                ],
                "N": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        }
    },
    "histutils-main/src/histutils/io.py": {
        "dir2fn": {
            "name": "dir2fn",
            "location": 9,
            "return": [
                "Optional[pathlib.Path]"
            ],
            "arguments": {
                "ofn": [
                    "str",
                    "Union[pathlib.Path,str]",
                    "Path"
                ],
                "ifn": [
                    "str",
                    "Dict"
                ],
                "suffix": [
                    "Text",
                    "str",
                    "Dict",
                    "int"
                ]
            }
        },
        "imgwriteincr": {
            "name": "imgwriteincr",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "pathlib.Path"
                ],
                "imgs": [
                    "List[str]",
                    "float",
                    "Dict[str,Any]"
                ],
                "imgslice": [
                    "List[str]",
                    "Sequence[T]",
                    "Callable[,float]",
                    "float",
                    "List[int]"
                ]
            }
        },
        "vid2h5": {
            "name": "vid2h5",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "int",
                    "bytes",
                    "List[str]",
                    "None",
                    "Optional[bool]",
                    "float",
                    "datetime",
                    "Optional[float]",
                    "Callable",
                    "Optional[Callable]"
                ]
            }
        },
        "setupimgh5": {
            "name": "setupimgh5",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "str",
                    "Dict[str,Any]"
                ],
                "params": [
                    "bytes",
                    "Dict",
                    "Dict[str,float]"
                ]
            }
        }
    },
    "histutils-main/src/histutils/nans.py": {
        "nans": {
            "name": "nans",
            "location": 4,
            "return": [
                "int",
                "float",
                "numpy.ndarray",
                "str",
                "List[int]"
            ],
            "arguments": {
                "shape": [
                    "int",
                    "bool",
                    "str",
                    "float",
                    "Sequence[int]"
                ],
                "dtype": [
                    "float",
                    "bool",
                    "str",
                    "int",
                    "Sequence[int]"
                ],
                "order": [
                    "Text",
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "nans_like": {
            "name": "nans_like",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "arr": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "histutils-main/src/histutils/plots.py": {
        "doPlayMovie": {
            "name": "doPlayMovie",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Dict[str,Any]",
                    "Dict"
                ],
                "playMovie": [
                    "Iterable",
                    "Union[None,int,str]",
                    "None",
                    "bytes",
                    "Dict",
                    "int",
                    "str",
                    "Optional[dict]"
                ],
                "ut1_unix": [
                    "Dict",
                    "None",
                    "int",
                    "Optional[Dict]",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "rawFrameInd": [
                    "Mapping[str,object]",
                    "None",
                    "bytes",
                    "bool",
                    "Mapping",
                    "Dict",
                    "Type[object]",
                    "Type"
                ],
                "clim": [
                    "int",
                    "bool"
                ]
            }
        },
        "doplotsave": {
            "name": "doplotsave",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "bigfn": [
                    "Union[str,pathlib.Path]",
                    "str",
                    "Dict[Any,bool]",
                    "Optional[numpy.ndarray]",
                    "None",
                    "Optional[Any]",
                    "Any",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "data": [
                    "int"
                ],
                "rawind": [
                    "bool",
                    "str"
                ],
                "clim": [
                    "bool"
                ],
                "dohist": [
                    "bool",
                    "str"
                ],
                "meanImg": [
                    "bool",
                    "str"
                ]
            }
        },
        "animate": {
            "name": "animate",
            "location": 115,
            "return": [
                "Tuple[(_T2, _T3)]"
            ],
            "arguments": {
                "i": [
                    "Dict",
                    "Type",
                    "T"
                ],
                "data": [
                    "bytes",
                    "Dict",
                    "int",
                    "numpy.ndarray",
                    "Union[numpy.ndarray,pandas.DataFrame,None]"
                ],
                "himg": [
                    "Dict[str, List[float]]",
                    "Dict[str, Any]",
                    "Tuple[int, int, bytearray]"
                ],
                "ht": [
                    "dict",
                    "int"
                ]
            }
        },
        "plotLOSecef": {
            "name": "plotLOSecef",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "cam": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "odir": [
                    "int",
                    "float",
                    "Optional[Tuple[int,int]]",
                    "Optional[int]"
                ]
            }
        },
        "plotnear_rc": {
            "name": "plotnear_rc",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "R": [
                    "str",
                    "int"
                ],
                "C": [
                    "str",
                    "int"
                ],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "None"
                ],
                "shape": [
                    "str",
                    "Dict[str,str]",
                    "Union[int,float]"
                ],
                "odir": [
                    "str"
                ]
            }
        },
        "plotlsq_rc": {
            "name": "plotlsq_rc",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "nR": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "datetime.datetime"
                ],
                "nC": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "datetime.datetime"
                ],
                "R": [
                    "bool",
                    "Optional[Dict]",
                    "str",
                    "Dict",
                    "int",
                    "List[str]",
                    "None",
                    "List[List]",
                    "List[list]"
                ],
                "C": [
                    "bool",
                    "Optional[Dict]",
                    "str",
                    "Dict",
                    "int",
                    "List[str]",
                    "None",
                    "List[List]",
                    "List[list]"
                ],
                "ra": [
                    "bool",
                    "List",
                    "None",
                    "float",
                    "Optional[bool]",
                    "str",
                    "int"
                ],
                "dec": [
                    "bool",
                    "List",
                    "None",
                    "float",
                    "Optional[bool]",
                    "str",
                    "int"
                ],
                "angle": [
                    "bool",
                    "List",
                    "None",
                    "float",
                    "Optional[bool]",
                    "str",
                    "int"
                ],
                "name": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "float",
                    "bool",
                    "Optional[int]",
                    "datetime.datetime",
                    "Optional[float]"
                ],
                "odir": [
                    "str"
                ]
            }
        }
    },
    "histutils-main/src/histutils/plotsimul.py": {
        "plotPlainImg": {
            "name": "plotPlainImg",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "sim": [
                    "str",
                    "Dict[str,Any]",
                    "bool",
                    "float",
                    "Optional[float]",
                    "None"
                ],
                "cam": [
                    "int",
                    "Optional[Collection[int]]",
                    "Collection",
                    "None"
                ],
                "rawdata": [
                    "int",
                    "Optional[Collection[int]]",
                    "Collection",
                    "None"
                ],
                "t": [
                    "str",
                    "numpy.ndarray",
                    "int",
                    "Iterable[Any]"
                ],
                "odir": [
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "plotRealImg": {
            "name": "plotRealImg",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "sim": [
                    "int",
                    "numpy.ndarray"
                ],
                "cam": [
                    "numpy.ndarray",
                    "Collection[int]",
                    "Sequence[Sequence[float]]",
                    "list",
                    "Sequence[T]",
                    "str"
                ],
                "rawdata": [
                    "numpy.ndarray",
                    "int",
                    "Callable",
                    "Optional[int]",
                    "None"
                ],
                "t": [
                    "numpy.ndarray",
                    "int",
                    "Callable",
                    "Optional[int]",
                    "None"
                ],
                "odir": [
                    "int",
                    "float",
                    "None",
                    "Tuple"
                ],
                "fg": [
                    "Tuple[str,int]",
                    "None",
                    "Union[None,float,int]",
                    "Optional[List[int]]",
                    "Tuple[Union[str,int]]",
                    "float",
                    "int",
                    "List[int]"
                ]
            }
        },
        "updateframe": {
            "name": "updateframe",
            "location": 123,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "t": [
                    "int",
                    "Dict",
                    "datetime.datetime",
                    "datetime.date",
                    "Iterable[T]"
                ],
                "raw": [
                    "Optional[str]",
                    "Callable",
                    "str",
                    "numpy.ndarray",
                    "float"
                ],
                "wavelen": [
                    "int",
                    "Union[numbers.Real, numpy.ndarray]",
                    "Union[pandas.Series, numpy.ndarray]"
                ],
                "cam": [
                    "Callable",
                    "numpy.ndarray"
                ],
                "ax": [
                    "numpy.array",
                    "scipy.sparse.csr_matrix",
                    "float",
                    "int"
                ],
                "fg": [
                    "str",
                    "int",
                    "numpy.array",
                    "List[str]",
                    "Union[numbers.Real,numpy.ndarray]"
                ]
            }
        }
    },
    "histutils-main/src/histutils/rawDMCreader.py": {
        "goRead": {
            "name": "goRead",
            "location": 25,
            "return": [
                "Tuple[(Any, Any, dict)]"
            ],
            "arguments": {
                "infn": [
                    "str",
                    "Tuple[float]",
                    "pathlib.Path",
                    "bool",
                    "bytes"
                ],
                "params": [
                    "dict",
                    "Dict[str, Optional[str]]",
                    "Dict[str, str]"
                ]
            }
        },
        "getDMCparam": {
            "name": "getDMCparam",
            "location": 59,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "fn": [
                    "pathlib.Path",
                    "cmk.utils.type_defs.OptionalConfigSerial",
                    "Optional[str]",
                    "str",
                    "list"
                ],
                "params": [
                    "Dict[str, Dict[str, Any]]",
                    "dict",
                    "Dict[str, Any]",
                    "Mapping",
                    "Type['Declared']",
                    "str"
                ]
            }
        },
        "howbig": {
            "name": "howbig",
            "location": 88,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "params": [
                    "Dict[str, Any]",
                    "int",
                    "str",
                    "bool"
                ],
                "finf": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "whichframes": {
            "name": "whichframes",
            "location": 97,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "Optional[str]"
                ],
                "params": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, Optional[str]]",
                    "str"
                ],
                "finf": [
                    "Dict[str, Any]",
                    "str",
                    "Sequence[Dict[str, Any]]",
                    "BinaryIO"
                ]
            }
        },
        "getDMCframe": {
            "name": "getDMCframe",
            "location": 159,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "f": [
                    "str",
                    "pathlib.Path",
                    "BinaryIO",
                    "int"
                ],
                "iFrm": [
                    "Dict[str, int]",
                    "int",
                    "dict",
                    "Dict[str, Any]",
                    "List[float]"
                ],
                "finf": [
                    "str",
                    "bool",
                    "int",
                    "float",
                    "List[str]"
                ]
            }
        }
    },
    "histutils-main/src/histutils/simulFrame.py": {
        "getSimulData": {
            "name": "getSimulData",
            "location": 19,
            "return": [
                "Tuple[(_T1, list, _T0)]"
            ],
            "arguments": {
                "sim": [
                    "Dict[str,Any]",
                    "bool"
                ],
                "cam": [
                    "Dict[str,Any]",
                    "bool"
                ],
                "odir": [
                    "int",
                    "float",
                    "None"
                ],
                "verbose": [
                    "int",
                    "bool",
                    "Callable",
                    "Optional[str]"
                ]
            }
        },
        "HSTsync": {
            "name": "HSTsync",
            "location": 27,
            "return": [
                "Tuple[(_T1, _T0)]"
            ],
            "arguments": {
                "sim": [
                    "int",
                    "str",
                    "float",
                    "Optional[str]",
                    "None",
                    "datetime.timedelta"
                ],
                "cam": [
                    "str",
                    "Optional[bytes]",
                    "bytes"
                ],
                "verbose": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "HSTframeHandler": {
            "name": "HSTframeHandler",
            "location": 108,
            "return": [
                "Tuple[(_T1, list)]"
            ],
            "arguments": {
                "sim": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "cam": [
                    "List[str]",
                    "float",
                    "Union[str,int]",
                    "str",
                    "int",
                    "Optional[bool]",
                    "None"
                ],
                "odir": [
                    "str",
                    "int",
                    "None",
                    "List"
                ],
                "verbose": [
                    "int",
                    "str",
                    "List"
                ]
            }
        }
    },
    "histutils-main/src/histutils/solis.py": {
        "getNeoParam": {
            "name": "getNeoParam",
            "location": 19,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "int"
                ],
                "FrameIndReq": [
                    "Optional[float]",
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "ut1req": [
                    "bool",
                    "str"
                ],
                "kineticsec": [
                    "int",
                    "bool"
                ],
                "startUTC": [
                    "Tuple[int, int]",
                    "str",
                    "Tuple[Literal, Literal, Literal]"
                ],
                "cmosinit": [
                    "dict",
                    "str",
                    "int",
                    "Sequence[str]"
                ],
                "verbose": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "histutils-main/src/histutils/timedmc.py": {
        "frame2ut1": {
            "name": "frame2ut1",
            "location": 19,
            "return": [
                "None",
                "str",
                "datetime.datetime",
                "datetime.date",
                "Tuple[str,str]"
            ],
            "arguments": {
                "tstart": [
                    "int",
                    "Callable",
                    "str"
                ],
                "kineticsec": [
                    "int",
                    "str",
                    "Callable"
                ],
                "rawind": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ut12frame": {
            "name": "ut12frame",
            "location": 35,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "treq": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "ind": [
                    "int",
                    "Callable",
                    "str"
                ],
                "ut1_unix": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "datetime2unix": {
            "name": "datetime2unix",
            "location": 65,
            "return": [
                "Union[int, float]",
                "Tuple[float, float]",
                "str",
                "Union[List[str], List[Any]]",
                "Union[type, numpy.dtype]"
            ],
            "arguments": {
                "T": [
                    "Callable",
                    "str",
                    "float",
                    "Optional[str]",
                    "None",
                    "numpy.ndarray"
                ]
            }
        },
        "firetime": {
            "name": "firetime",
            "location": 92,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "tstart": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "Tfire": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "histutils-main/src/histutils/utils.py": {
        "write_quota": {
            "name": "write_quota",
            "location": 8,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "outbytes": [
                    "int"
                ],
                "outfn": [
                    "str",
                    "int",
                    "Path"
                ],
                "limitGB": [
                    "float",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "sixteen2eight": {
            "name": "sixteen2eight",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "img": [
                    "int",
                    "Callable",
                    "str"
                ],
                "Clim": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "normframe": {
            "name": "normframe",
            "location": 47,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "img": [
                    "float",
                    "int",
                    "numpy.ndarray"
                ],
                "Clim": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "splitconf": {
            "name": "splitconf",
            "location": 61,
            "return": [
                "List[int]",
                "str",
                "None",
                "Dict[str,Any]",
                "int",
                "List"
            ],
            "arguments": {
                "conf": [
                    "Dict",
                    "bytes",
                    "Optional[Container[str]]",
                    "Container",
                    "Optional[str]",
                    "None",
                    "str"
                ],
                "key": [
                    "str",
                    "Match",
                    "Tuple[List[int], List[str]]",
                    "List[str]",
                    "Dict[str, Set[str]]",
                    "dict",
                    "Dict[str, str]"
                ],
                "i": [
                    "None",
                    "int",
                    "Dict",
                    "str"
                ],
                "dtype": [
                    "float",
                    "str",
                    "Dict[str,Any]",
                    "int"
                ],
                "fallback": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "int",
                    "bool"
                ],
                "sep": [
                    "Text",
                    "str",
                    "Dict[str,Any]",
                    "int"
                ]
            }
        },
        "get_camera_serial_number": {
            "name": "get_camera_serial_number",
            "location": 101,
            "return": [
                "Dict[(Any, int)]"
            ],
            "arguments": {
                "files": [
                    "Iterable[pathlib.Path]",
                    "list",
                    "Sequence[pathlib.Path]",
                    "IO[str]",
                    "List[pathlib.Path]"
                ]
            }
        }
    },
    "histutils-main/src/histutils/__init__.py": {},
    "histutils-main/src/histutils/tests/test_all.py": {
        "test_rawread": {
            "name": "test_rawread",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "histutils-main/src/histutils/tests/test_scale.py": {
        "test_nearazel": {
            "name": "test_nearazel",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "histutils-main/src/histutils/tests/test_utils.py": {
        "test_xmlparse": {
            "name": "test_xmlparse",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_quota_too_small": {
            "name": "test_quota_too_small",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path",
                    "path.Path",
                    "str"
                ]
            }
        },
        "test_quota_ok": {
            "name": "test_quota_ok",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path",
                    "path.Path",
                    "str"
                ]
            }
        }
    }
}
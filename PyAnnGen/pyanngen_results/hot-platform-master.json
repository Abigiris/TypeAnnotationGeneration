{
    "hot-platform-master/debug.py": {},
    "hot-platform-master/token_platform/conf.py": {},
    "hot-platform-master/token_platform/conftest.py": {
        "cli": {
            "name": "cli",
            "location": 5,
            "return": [
                "bool",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "loop": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "aiohttp_client": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "hot-platform-master/token_platform/controller.py": {},
    "hot-platform-master/token_platform/router.py": {
        "generate_routes": {
            "name": "generate_routes",
            "location": 76,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "reverse": {
            "name": "reverse",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "object_at_end_of_path": {
            "name": "object_at_end_of_path",
            "location": 98,
            "return": [
                "bytes",
                "List[str]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "hot-platform-master/token_platform/sentry.py": {
        "capture_exception": {
            "name": "capture_exception",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "hot-platform-master/token_platform/server.py": {},
    "hot-platform-master/token_platform/escrow/generate_pre_signed_tx_xdr.py": {},
    "hot-platform-master/token_platform/escrow/get_escrow_wallet.py": {
        "get_escrow_wallet_detail._format_balance": {
            "name": "_format_balance",
            "location": 27,
            "return": [
                "dict[typing.Text, ]",
                "str",
                "dict[, ]",
                "Iterable[str]",
                "bool",
                "IO[str]"
            ],
            "arguments": {
                "balance": [
                    "str",
                    "dict",
                    "bytes",
                    "int"
                ]
            }
        },
        "get_escrow_wallet_detail._merge_balance": {
            "name": "_merge_balance",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "balances": [
                    "int"
                ]
            }
        },
        "get_escrow_wallet_detail._format_data": {
            "name": "_format_data",
            "location": 39,
            "return": [
                "dict[, ]",
                "str",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "data": [
                    "Dict[str, str]",
                    "dict",
                    "bytes",
                    "Dict[str, Any]",
                    "List[int]"
                ]
            }
        }
    },
    "hot-platform-master/token_platform/escrow/post_close_escrow_wallet.py": {},
    "hot-platform-master/token_platform/escrow/post_generate_escrow_wallet.py": {
        "calculate_initial_xlm": {
            "name": "calculate_initial_xlm",
            "location": 116,
            "return": [
                "decimal.Decimal"
            ],
            "arguments": {
                "number_of_entries": [
                    "decimal.Decimal"
                ],
                "number_of_transaction": [
                    "decimal.Decimal"
                ]
            }
        }
    },
    "hot-platform-master/token_platform/escrow/__init__.py": {},
    "hot-platform-master/token_platform/escrow/tests/test_get_escrow_wallet.py": {},
    "hot-platform-master/token_platform/escrow/tests/test_get_presigned_tx.py": {},
    "hot-platform-master/token_platform/escrow/tests/test_post_close_escrow_wallet.py": {},
    "hot-platform-master/token_platform/escrow/tests/test_post_generate_escrow_wallet.py": {
        "TestBuildCreateEscrowWalletTransaction.test_build_generate_escrow_wallet_cannot_optain_trust_op._raiseDecodeError": {
            "name": "_raiseDecodeError",
            "location": 430,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "source": [
                    "Callable",
                    "str",
                    "bool",
                    "Iterable[str]",
                    "list"
                ],
                "destination": [
                    "Callable",
                    "str",
                    "bool",
                    "Iterable[str]",
                    "list"
                ],
                "code": [
                    "Callable",
                    "str",
                    "bool",
                    "Iterable[str]",
                    "list"
                ],
                "limit": [
                    "Callable",
                    "str",
                    "bool",
                    "Iterable[str]",
                    "list"
                ]
            }
        },
        "TestBuildCreateEscrowWalletTransaction.test_build_generate_escrow_wallet_cannot_optain_trust_op._raiseError": {
            "name": "_raiseError",
            "location": 433,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "source": [
                    "bool",
                    "Callable",
                    "str",
                    "Iterable[str]"
                ],
                "destination": [
                    "bool",
                    "Callable",
                    "str",
                    "Iterable[str]"
                ],
                "code": [
                    "bool",
                    "Callable",
                    "str",
                    "Iterable[str]"
                ]
            }
        }
    },
    "hot-platform-master/token_platform/joint_wallet/generate_joint_wallet.py": {
        "build_joint_wallet._add_signer": {
            "name": "_add_signer",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "deal_address": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "party": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "amount": [
                    "List[str]",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "hot-platform-master/token_platform/joint_wallet/post_close_joint_wallet.py": {},
    "hot-platform-master/token_platform/joint_wallet/tests/test_generate_joint_wallet.py": {},
    "hot-platform-master/token_platform/joint_wallet/tests/test_post_close_joint_wallet.py": {},
    "hot-platform-master/token_platform/log/log.py": {
        "write_access_log": {
            "name": "write_access_log",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "bool",
                    "str"
                ],
                "response": [
                    "dict[str, str]",
                    "Dict[str, str]",
                    "dict[, ]",
                    "str",
                    "aiohttp.web.Request",
                    "dict",
                    "None",
                    "Optional[str]"
                ],
                "time": [
                    "datetime.datetime",
                    "typing.Callable[, ]",
                    "Optional[Callable]",
                    "None",
                    "Optional[float]",
                    "float",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "write_error_log": {
            "name": "write_error_log",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "error_message": [
                    "str",
                    "Exception",
                    "logging.Logger"
                ],
                "traceback_stack": [
                    "str",
                    "Exception",
                    "logging.Logger"
                ]
            }
        },
        "format_error": {
            "name": "format_error",
            "location": 46,
            "return": [
                "Dict[(str, Union[(str, List[str])])]"
            ],
            "arguments": {
                "e": [
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "write_audit_log": {
            "name": "write_audit_log",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "aiohttp.web.Response"
                ],
                "response": [
                    "faustypes.web.Request",
                    "aiohttp.web.Request"
                ],
                "operation": [],
                "message": []
            }
        }
    },
    "hot-platform-master/token_platform/log/log_conf.py": {},
    "hot-platform-master/token_platform/middlewares/exception.py": {
        "format_error": {
            "name": "format_error",
            "location": 37,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "e": [
                    "str",
                    "int"
                ]
            }
        },
        "format_error_5xx": {
            "name": "format_error_5xx",
            "location": 49,
            "return": [
                "Dict[(str, Union[(str, List[str])])]"
            ],
            "arguments": {
                "e": [
                    "str",
                    "bool",
                    "Callable",
                    "Callable[[str], None]",
                    "List[dict]",
                    "raiden.utils.Address"
                ]
            }
        }
    },
    "hot-platform-master/token_platform/request_tracking/metrics.py": {},
    "hot-platform-master/token_platform/request_tracking/test_metrics.py": {
        "TestMetricsName.test_metrics_name": {
            "name": "test_metrics_name",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hot-platform-master/token_platform/stellar/wallet.py": {
        "submit_transaction._get_reason_transaction": {
            "name": "_get_reason_transaction",
            "location": 188,
            "return": [
                "typing.Text",
                "str",
                "dict",
                "set",
                "List[str]"
            ],
            "arguments": {
                "response": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        }
    },
    "hot-platform-master/token_platform/stellar/tests/test_stellar_wallet.py": {
        "TestHorizonApi.SuccessResponse.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content_type": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "TestHorizonApi.GetOperationsOfTransactionSuccess.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content_type": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "TestHorizonApi.GetTransactionBywalletSuccess.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content_type": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "TestHorizonApi.NotFoundResponse.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content_type": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "TestHorizonApi.BadRequestResponse.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content_type": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        }
    },
    "hot-platform-master/token_platform/tests/test_utils.py": {},
    "hot-platform-master/token_platform/tests/__init__.py": {},
    "hot-platform-master/token_platform/transaction/generate_merge_transaction.py": {},
    "hot-platform-master/token_platform/transaction/generate_payment.py": {},
    "hot-platform-master/token_platform/transaction/get_transaction.py": {},
    "hot-platform-master/token_platform/transaction/get_unsigned_change_trust.py": {
        "build_unsigned_change_trust": {
            "name": "build_unsigned_change_trust",
            "location": 135,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "source_address": [
                    "str"
                ],
                "transaction_source_address": [
                    "str"
                ],
                "sequence": [
                    "str"
                ]
            }
        }
    },
    "hot-platform-master/token_platform/transaction/put_transaction.py": {},
    "hot-platform-master/token_platform/transaction/transaction.py": {
        "get_transaction._format_transaction": {
            "name": "_format_transaction",
            "location": 53,
            "return": [
                "dict[typing.Text, ]",
                "str",
                "Optional[str]",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "tx_detail": [
                    "Mapping[str, Any]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_threshold_weight._get_threshould_level": {
            "name": "_get_threshould_level",
            "location": 95,
            "return": [
                "typing.Text",
                "str",
                "bool"
            ],
            "arguments": {
                "operation_type": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "hot-platform-master/token_platform/transaction/__init__.py": {},
    "hot-platform-master/token_platform/transaction/tests/test_generate_merge_transaction.py": {},
    "hot-platform-master/token_platform/transaction/tests/test_generate_payment.py": {},
    "hot-platform-master/token_platform/transaction/tests/test_get_transaction.py": {},
    "hot-platform-master/token_platform/transaction/tests/test_get_transaction_detail.py": {},
    "hot-platform-master/token_platform/transaction/tests/test_get_unsigned_change_trust.py": {},
    "hot-platform-master/token_platform/transaction/tests/test_put_transaction.py": {},
    "hot-platform-master/token_platform/transaction/tests/test_transaction.py": {},
    "hot-platform-master/token_platform/wallet/get_current_tx_sequence.py": {},
    "hot-platform-master/token_platform/wallet/get_wallet.py": {
        "get_wallet_detail._format_balance": {
            "name": "_format_balance",
            "location": 31,
            "return": [
                "dict[typing.Text, ]",
                "bool",
                "dict[, ]",
                "int",
                "type"
            ],
            "arguments": {
                "balance": [
                    "str",
                    "int"
                ]
            }
        },
        "get_wallet_detail._merge_balance": {
            "name": "_merge_balance",
            "location": 39,
            "return": [
                "dict[, ]",
                "str",
                "bool"
            ],
            "arguments": {
                "balances": [
                    "bool",
                    "float",
                    "Callable[[Any], int]",
                    "int"
                ]
            }
        },
        "get_wallet_detail._trusted_hot": {
            "name": "_trusted_hot",
            "location": 46,
            "return": [
                "dict[typing.Text, typing.Text]",
                "str",
                "dict[, ]",
                "int",
                "dict"
            ],
            "arguments": {
                "balances": [
                    "List[Dict[str, Any]]",
                    "Optional[str]",
                    "int",
                    "Optional[List[str]]"
                ]
            }
        },
        "get_wallet_detail._format_data": {
            "name": "_format_data",
            "location": 63,
            "return": [
                "dict[, ]",
                "str",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "data": [
                    "Dict[str, str]",
                    "dict",
                    "bytes",
                    "Dict[str, Any]",
                    "List[int]"
                ]
            }
        }
    },
    "hot-platform-master/token_platform/wallet/get_wallet_history.py": {
        "datetime_is_valid": {
            "name": "datetime_is_valid",
            "location": 42,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "format_history._format_record": {
            "name": "_format_record",
            "location": 65,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]",
                "float"
            ],
            "arguments": {
                "record": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "hot-platform-master/token_platform/wallet/post_generate_trust_wallet.py": {},
    "hot-platform-master/token_platform/wallet/post_generate_wallet.py": {},
    "hot-platform-master/token_platform/wallet/wallet.py": {
        "build_generate_trust_wallet_transaction": {
            "name": "build_generate_trust_wallet_transaction",
            "location": 33,
            "return": [
                "tuple[str]",
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "transaction_source_address": [
                    "str",
                    "Optional[int]",
                    "int",
                    "Callable[[str], str]",
                    "None",
                    "List[str]",
                    "typing.Callable[str, str]",
                    "bool",
                    "list[str]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "source_address": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None",
                    "bool",
                    "typing.Sequence[str]",
                    "Sequence[str]"
                ],
                "destination_address": [
                    "str",
                    "None",
                    "bool",
                    "decimal.Decimal",
                    "Optional[str]",
                    "int"
                ],
                "xlm_amount": [
                    "str",
                    "decimal.Decimal",
                    "None",
                    "Optional[str]"
                ],
                "hot_amount": [
                    "Decimal",
                    "decimal.Decimal",
                    "str",
                    "int",
                    "float",
                    "Optional[str]"
                ],
                "sequence": [
                    "str",
                    "None",
                    "Optional[int]",
                    "Callable[[str], str]",
                    "int",
                    "List[str]",
                    "typing.Callable[str, str]",
                    "bool",
                    "list[str]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "build_generate_wallet_transaction": {
            "name": "build_generate_wallet_transaction",
            "location": 91,
            "return": [
                "tuple[str]",
                "str",
                "Iterable[int]",
                "bool"
            ],
            "arguments": {
                "transaction_source_address": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "int",
                    "list",
                    "list[]"
                ],
                "source_address": [
                    "str",
                    "decimal.Decimal"
                ],
                "destination_address": [
                    "str",
                    "decimal.Decimal"
                ],
                "amount": [
                    "str",
                    "decimal.Decimal"
                ],
                "sequence": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "list",
                    "list[]"
                ]
            }
        }
    },
    "hot-platform-master/token_platform/wallet/__init__.py": {},
    "hot-platform-master/token_platform/wallet/tests/test_get_current_tx_sequnce.py": {},
    "hot-platform-master/token_platform/wallet/tests/test_get_wallet.py": {},
    "hot-platform-master/token_platform/wallet/tests/test_get_wallet_history.py": {},
    "hot-platform-master/token_platform/wallet/tests/test_post_generate_trust_wallet.py": {},
    "hot-platform-master/token_platform/wallet/tests/test_post_generate_wallet.py": {},
    "hot-platform-master/token_platform/wallet/tests/test_wallet.py": {
        "TestBuildCreateTrustWalletTx.TeMock.hash_meta": {
            "name": "hash_meta",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuildCreateTrustWalletTx.BuilderMock.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "te": []
            }
        },
        "TestBuildCreateTrustWalletTx.BuilderMock.append_create_account_op": {
            "name": "append_create_account_op",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [],
                "destination": [],
                "starting_balance": []
            }
        },
        "TestBuildCreateTrustWalletTx.BuilderMock.append_trust_op": {
            "name": "append_trust_op",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "float",
                    "int"
                ],
                "destination": [
                    "str",
                    "float",
                    "int"
                ],
                "code": [
                    "int",
                    "Sequence[str]",
                    "Callable",
                    "bool",
                    "Iterable[str]"
                ],
                "limit": [
                    "int",
                    "Sequence[str]",
                    "Callable",
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "TestBuildCreateTrustWalletTx.BuilderMock.gen_xdr": {
            "name": "gen_xdr",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuildCreateWalletTx.TeMock.hash_meta": {
            "name": "hash_meta",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuildCreateWalletTx.BuilderMock.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "te": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "TestBuildCreateWalletTx.BuilderMock.append_create_account_op": {
            "name": "append_create_account_op",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "destination": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "starting_balance": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "TestBuildCreateWalletTx.BuilderMock.gen_xdr": {
            "name": "gen_xdr",
            "location": 117,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hot-platform-master/token_platform/wallet/tests/factory/wallet.py": {
        "StellarWallet.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "balances": [
                    "int"
                ]
            }
        },
        "StellarWallet.get": {
            "name": "get",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
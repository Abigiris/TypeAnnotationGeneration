{
    "hs_deckgen-master/setup.py": {},
    "hs_deckgen-master/src/hearthstone/api.py": {
        "ReplayAPI.deck_from_url": {
            "name": "deck_from_url",
            "location": 19,
            "return": [
                "Deck",
                "Type",
                "str",
                "Dict[str,object]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List",
                    "List[str]",
                    "Tuple[str]"
                ],
                "url": [
                    "str",
                    "requests.Session"
                ]
            }
        },
        "HearthpwnAPI.deck_from_url": {
            "name": "deck_from_url",
            "location": 39,
            "return": [
                "Deck",
                "Type",
                "str",
                "Dict[str,object]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List",
                    "List[str]",
                    "Tuple[str]"
                ],
                "url": [
                    "str",
                    "requests.Session"
                ]
            }
        },
        "HearthstoneAPI._get_cards": {
            "name": "_get_cards",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Dict[str,Any]",
                    "int",
                    "str"
                ]
            }
        },
        "HearthstoneAPI.lazy_cards": {
            "name": "lazy_cards",
            "location": 80,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": [
                    "HearthstoneAPI"
                ]
            }
        },
        "HearthstoneAPI.card_from_id": {
            "name": "card_from_id",
            "location": 89,
            "return": [
                "str",
                "bool",
                "Optional[List[str]]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "None",
                    "Union[str,int]",
                    "Optional[str]"
                ],
                "card_id": [
                    "int",
                    "str",
                    "None",
                    "Union[str,int]",
                    "Optional[str]"
                ]
            }
        },
        "HearthstoneAPI.all_cards": {
            "name": "all_cards",
            "location": 94,
            "return": [
                "bool",
                "float",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable",
                    "bool",
                    "List[str]",
                    "Exception",
                    "Match",
                    "Type[object]",
                    "Type"
                ]
            }
        },
        "HearthstoneAPI.lazy_cards.decorated": {
            "name": "decorated",
            "location": 81,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {}
        }
    },
    "hs_deckgen-master/src/hearthstone/card.py": {
        "Card.from_id": {
            "name": "from_id",
            "location": 15,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "Dict[str,object]",
                    "bool"
                ],
                "db_id": [
                    "int",
                    "str",
                    "Dict[str,_]",
                    "bool",
                    "Dict[str,object]"
                ]
            }
        },
        "Card.from_json": {
            "name": "from_json",
            "location": 19,
            "return": [
                "Card",
                "int",
                "Dict"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Dict[str,Any]",
                    "bool"
                ],
                "json": [
                    "Dict[str, Any]"
                ]
            }
        },
        "Card.to_json": {
            "name": "to_json",
            "location": 27,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hs_deckgen-master/src/hearthstone/deck.py": {
        "to_varint": {
            "name": "to_varint",
            "location": 49,
            "return": [
                "bytes"
            ],
            "arguments": {
                "i": [
                    "int",
                    "bytes"
                ]
            }
        },
        "Deck.from_cards": {
            "name": "from_cards",
            "location": 64,
            "return": [
                "Dict[str,Any]",
                "Deck"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[Mapping[str,Any]]",
                    "Mapping",
                    "Optional[Iterable[Any]]",
                    "None",
                    "Type[Any]",
                    "Iterable[Any]",
                    "List[Type]",
                    "Type"
                ],
                "cards": [
                    "Optional[Set[str]]",
                    "str",
                    "Set[str]",
                    "bool",
                    "None"
                ],
                "hs_class": [
                    "Optional[bool]",
                    "None",
                    "bool",
                    "List[Block]",
                    "List[_]",
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        },
        "Deck.from_deck_code": {
            "name": "from_deck_code",
            "location": 81,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "code": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        },
        "Deck.from_json": {
            "name": "from_json",
            "location": 86,
            "return": [
                "Deck",
                "str",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {
                "json": [
                    "Type[Deck]"
                ]
            }
        },
        "Deck.load": {
            "name": "load",
            "location": 93,
            "return": [
                "bool",
                "Mapping[int, str]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "IO[str]",
                    "str",
                    "IO",
                    "Callable"
                ],
                "stream": [
                    "IO[str]",
                    "str",
                    "IO",
                    "Callable"
                ]
            }
        },
        "Deck.save": {
            "name": "save",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "Dict",
                    "str"
                ],
                "mode": [
                    "int",
                    "str"
                ]
            }
        },
        "Deck.unique": {
            "name": "unique",
            "location": 103,
            "return": [
                "Set",
                "Set[str]",
                "str",
                "Sequence[Dict[str,str]]",
                "MutableMapping[str,Any]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deck.doubles": {
            "name": "doubles",
            "location": 107,
            "return": [
                "Set",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deck.to_deck_code": {
            "name": "to_deck_code",
            "location": 117,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deck.__iter__": {
            "name": "__iter__",
            "location": 142,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hs_deckgen-master/src/hearthstone/hsdata.py": {},
    "hs_deckgen-master/src/hearthstone/__init__.py": {},
    "hs_deckgen-master/src/hs_deckgen/cli.py": {
        "io_or_std": {
            "name": "io_or_std",
            "location": 15,
            "return": [
                "IO",
                "Generator[IO]",
                "Generator"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[str]",
                    "Tuple[str]"
                ],
                "mode": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "Tuple[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "deck": {
            "name": "deck",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "str",
                    "List[Dict[str,Any]]",
                    "int"
                ],
                "hsclass": [
                    "Dict[str,str]",
                    "str",
                    "List[str]",
                    "Dict",
                    "Dict[str,Any]"
                ],
                "partial": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "output": [
                    "str",
                    "bool"
                ]
            }
        },
        "model": {
            "name": "model",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "outfile": [
                    "Callable",
                    "Type",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "training": [
                    "Callable",
                    "Type",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "train": [
                    "Type",
                    "bool",
                    "List[Tuple[int,int,str]]",
                    "List[tuple[Union[int,int,str]]]"
                ]
            }
        }
    },
    "hs_deckgen-master/src/hs_deckgen/model.py": {
        "BijectiveMap.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tuples": [
                    "Dict[str,Any]",
                    "int",
                    "str",
                    "Union[str,int]",
                    "bool"
                ]
            }
        },
        "BijectiveMap.__setitem__": {
            "name": "__setitem__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "left": [
                    "int",
                    "Callable",
                    "str"
                ],
                "right": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BijectiveMap.__len__": {
            "name": "__len__",
            "location": 31,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BijectiveMap.left": {
            "name": "left",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BijectiveMap.right": {
            "name": "right",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HSModel.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HSModel._deck_to_rows": {
            "name": "_deck_to_rows",
            "location": 62,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "deck": [
                    "List",
                    "List[tuple[Union[Any,Any]]]",
                    "List[numpy.array]",
                    "Iterable[int]",
                    "List[Tuple[Any,Any]]",
                    "List[tuple]"
                ]
            }
        },
        "HSModel.train": {
            "name": "train",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "deck": [
                    "int",
                    "float"
                ]
            }
        },
        "HSModel.generate_deck": {
            "name": "generate_deck",
            "location": 76,
            "return": [
                "Dict[str, Any]",
                "str",
                "bool",
                "Tuple[int, int, str]"
            ],
            "arguments": {
                "self": [],
                "partial": [
                    "List[hearthstone.card.Card]",
                    "List[int]",
                    "bytes",
                    "float",
                    "Dict[int,str]",
                    "Dict[str,int]",
                    "numpy.ndarray"
                ],
                "hs_class": [
                    "str",
                    "bool",
                    "hearthstone.hsdata.HSClass",
                    "Hashable",
                    "int"
                ],
                "deck_size": [
                    "int",
                    "Optional[bool]",
                    "Union[int,Tuple[int,int]]",
                    "str"
                ]
            }
        },
        "HSModel.from_decks": {
            "name": "from_decks",
            "location": 117,
            "return": [
                "HSModel"
            ],
            "arguments": {
                "cls": [
                    "Type[_THSModel]"
                ],
                "decks": [
                    "Dict[str,Any]",
                    "int",
                    "bool"
                ]
            }
        },
        "HSModel.load": {
            "name": "load",
            "location": 125,
            "return": [
                "Union[str, IO]",
                "Dict[str, Any]",
                "Callable[[str], T]",
                "Callable",
                "dict",
                "IO[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Type[object]",
                    "Type"
                ],
                "stream": [
                    "IO[bytes]",
                    "str",
                    "IO",
                    "Dict[str,Any]",
                    "List"
                ]
            }
        },
        "HSModel.save": {
            "name": "save",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "List[dict]",
                    "Dict",
                    "str",
                    "T",
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        }
    },
    "hs_deckgen-master/src/hs_deckgen/__init__.py": {},
    "hs_deckgen-master/src/trainer/cli.py": {
        "io_or_std": {
            "name": "io_or_std",
            "location": 12,
            "return": [
                "IO",
                "Generator[IO]",
                "Generator"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[str]",
                    "Tuple[str]"
                ],
                "mode": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "Tuple[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "replay": {
            "name": "replay",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "outfile": [
                    "int",
                    "Callable",
                    "str"
                ],
                "input_cards": [
                    "str",
                    "Optional[str]",
                    "float"
                ],
                "pages": [
                    "float"
                ]
            }
        }
    },
    "hs_deckgen-master/src/trainer/hearthpwn_trainer.py": {},
    "hs_deckgen-master/src/trainer/replay_trainer.py": {
        "ReplayTrainer._setup_browser": {
            "name": "_setup_browser",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Callable",
                    "int",
                    "List[dict]"
                ]
            }
        },
        "ReplayTrainer.lazy_browser": {
            "name": "lazy_browser",
            "location": 23,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": [
                    "ReplayTrainer"
                ]
            }
        },
        "ReplayTrainer.pull_decks": {
            "name": "pull_decks",
            "location": 32,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Dict[str,T]",
                    "str",
                    "None",
                    "T",
                    "Type",
                    "Optional[str]",
                    "Type[T]"
                ],
                "start": [
                    "str",
                    "int",
                    "Exception"
                ],
                "max_page": [
                    "Optional[int]",
                    "int",
                    "None",
                    "Union[float,int]",
                    "float"
                ]
            }
        },
        "ReplayTrainer.model_from_cards": {
            "name": "model_from_cards",
            "location": 54,
            "return": [
                "model.HSModel"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "bool",
                    "Optional[str]"
                ],
                "required": [
                    "str",
                    "Optional[bool]",
                    "Sequence[Any]",
                    "int",
                    "bool"
                ]
            }
        },
        "ReplayTrainer.new_model": {
            "name": "new_model",
            "location": 66,
            "return": [
                "model.HSModel"
            ],
            "arguments": {
                "cls": [
                    "Optional[int]",
                    "bool",
                    "Optional[Type]",
                    "Dict[str, Iterable[Any]]",
                    "float",
                    "Type"
                ],
                "max_page": [
                    "None",
                    "Optional[int]",
                    "int",
                    "Type",
                    "Dict[str,Iterable[Any]]",
                    "bool",
                    "float",
                    "Optional[Type]"
                ]
            }
        },
        "ReplayTrainer.lazy_browser.decorated": {
            "name": "decorated",
            "location": 24,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {}
        }
    },
    "hs_deckgen-master/tests/test_basic.py": {
        "test_nothing": {
            "name": "test_nothing",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "hs_deckgen-master/tests/test_cli.py": {
        "test_main": {
            "name": "test_main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "hs_deckgen-master/tests/test_hearthstone.py": {
        "test_deck": {
            "name": "test_deck",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "hs_deckgen-master/tests/test_model.py": {
        "deck_one": {
            "name": "deck_one",
            "location": 83,
            "return": [
                "Dict[str, str]",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "deck_two": {
            "name": "deck_two",
            "location": 107,
            "return": [
                "Dict[str, str]",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "test_model": {
            "name": "test_model",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "deck_one": [],
                "deck_two": []
            }
        },
        "MockHearthstoneAPI.card_from_id": {
            "name": "card_from_id",
            "location": 74,
            "return": [
                "str",
                "bool",
                "Optional[List[str]]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "None",
                    "Union[str,int]",
                    "Optional[str]"
                ],
                "card_id": [
                    "int",
                    "str",
                    "None",
                    "Union[str,int]",
                    "Optional[str]"
                ]
            }
        },
        "MockHearthstoneAPI.all_cards": {
            "name": "all_cards",
            "location": 78,
            "return": [
                "dict_values"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable",
                    "bool",
                    "List[str]",
                    "Exception",
                    "Match",
                    "Type[object]",
                    "Type"
                ]
            }
        }
    },
    "hs_deckgen-master/tests/__init__.py": {}
}
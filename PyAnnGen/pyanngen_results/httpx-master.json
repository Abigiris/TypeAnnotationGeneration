{
    "httpx-master/setup.py": {
        "get_version": {
            "name": "get_version",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "package": [
                    "str",
                    "List[str]",
                    "pathlib.Path"
                ]
            }
        },
        "get_long_description": {
            "name": "get_long_description",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_packages": {
            "name": "get_packages",
            "location": 31,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "package": [
                    "str",
                    "List[pathlib.Path]",
                    "pathlib.Path"
                ]
            }
        }
    },
    "httpx-master/httpx/_api.py": {
        "request": {
            "name": "request",
            "location": 23,
            "return": [
                "List[Callable]",
                "bytes",
                "dict",
                "str",
                "Client"
            ],
            "arguments": {
                "method": [
                    "str",
                    "bool",
                    "_types.QueryParamTypes",
                    "_types.HeaderTypes",
                    "_types.RequestContent",
                    "_types.AuthTypes",
                    "_types.CookieTypes",
                    "_types.RequestData",
                    "_types.RequestFiles",
                    "_types.URLTypes"
                ],
                "url": [
                    "str",
                    "bool",
                    "_types.QueryParamTypes",
                    "_types.HeaderTypes",
                    "_types.RequestContent",
                    "_types.AuthTypes",
                    "_types.CookieTypes",
                    "_types.RequestData",
                    "_types.RequestFiles",
                    "_types.URLTypes"
                ]
            }
        },
        "stream": {
            "name": "stream",
            "location": 115,
            "return": [
                "Iterator[_models.Response]",
                "Generator"
            ],
            "arguments": {
                "method": [
                    "Dict[str,Any]"
                ],
                "url": [
                    "Dict[str,Any]"
                ]
            }
        },
        "get": {
            "name": "get",
            "location": 167,
            "return": [
                "Dict[str, Any]",
                "bool",
                "str",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "url": [
                    "bool",
                    "_types.QueryParamTypes",
                    "_types.ProxiesTypes",
                    "_types.CookieTypes",
                    "_types.TimeoutTypes",
                    "_types.URLTypes",
                    "_types.HeaderTypes",
                    "_types.AuthTypes",
                    "_types.CertTypes",
                    "_types.VerifyTypes"
                ]
            }
        },
        "options": {
            "name": "options",
            "location": 205,
            "return": [
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "url": [
                    "bool",
                    "_types.AuthTypes",
                    "_types.CertTypes",
                    "_types.QueryParamTypes",
                    "_types.CookieTypes",
                    "_types.TimeoutTypes",
                    "_types.URLTypes",
                    "_types.HeaderTypes",
                    "_types.VerifyTypes",
                    "_types.ProxiesTypes"
                ]
            }
        },
        "head": {
            "name": "head",
            "location": 243,
            "return": [
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "url": [
                    "bool",
                    "_types.QueryParamTypes",
                    "_types.ProxiesTypes",
                    "_types.CookieTypes",
                    "_types.TimeoutTypes",
                    "_types.URLTypes",
                    "_types.HeaderTypes",
                    "_types.AuthTypes",
                    "_types.CertTypes",
                    "_types.VerifyTypes"
                ]
            }
        },
        "post": {
            "name": "post",
            "location": 281,
            "return": [
                "Dict[str, Any]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "url": [
                    "bool",
                    "_types.VerifyTypes",
                    "_types.CookieTypes",
                    "_types.RequestContent",
                    "_types.RequestData",
                    "_types.AuthTypes",
                    "_types.CertTypes",
                    "_types.HeaderTypes",
                    "_types.RequestFiles",
                    "_types.ProxiesTypes"
                ]
            }
        },
        "put": {
            "name": "put",
            "location": 324,
            "return": [
                "str",
                "int",
                "Response",
                "Dict[str, Any]",
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                "flask.wrappers.Response"
            ],
            "arguments": {
                "url": [
                    "bool",
                    "_types.ProxiesTypes",
                    "_types.CookieTypes",
                    "_types.CertTypes",
                    "_types.VerifyTypes",
                    "_types.RequestData",
                    "_types.RequestFiles",
                    "_types.URLTypes",
                    "_types.QueryParamTypes"
                ]
            }
        },
        "patch": {
            "name": "patch",
            "location": 367,
            "return": [
                "Set[str]",
                "str",
                "Dict[str, Any]",
                "bool",
                "Response"
            ],
            "arguments": {
                "url": [
                    "bool",
                    "_types.RequestContent",
                    "_types.RequestData",
                    "_types.CookieTypes",
                    "_types.HeaderTypes",
                    "_types.TimeoutTypes",
                    "_types.ProxiesTypes",
                    "_types.URLTypes",
                    "_types.VerifyTypes",
                    "_types.RequestFiles"
                ]
            }
        },
        "delete": {
            "name": "delete",
            "location": 410,
            "return": [
                "Dict[str, str]",
                "str",
                "dict"
            ],
            "arguments": {
                "url": [
                    "bool",
                    "_types.TimeoutTypes",
                    "_types.CertTypes",
                    "_types.HeaderTypes",
                    "_types.ProxiesTypes",
                    "_types.CookieTypes",
                    "_types.URLTypes",
                    "_types.AuthTypes",
                    "_types.VerifyTypes"
                ]
            }
        }
    },
    "httpx-master/httpx/_auth.py": {
        "Auth.auth_flow": {
            "name": "auth_flow",
            "location": 30,
            "return": [
                "Generator[(_T0, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "_models.Request",
                    "aiohttp.web.Request",
                    "Exception",
                    "starlette.requests.Request",
                    "flask.Request",
                    "dict",
                    "str"
                ]
            }
        },
        "Auth.sync_auth_flow": {
            "name": "sync_auth_flow",
            "location": 54,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request"
                ]
            }
        },
        "FunctionAuth.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "int",
                    "float",
                    "List[List[T]]"
                ]
            }
        },
        "FunctionAuth.auth_flow": {
            "name": "auth_flow",
            "location": 114,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "starlette.requests.Request",
                    "fastapi.Request",
                    "Request"
                ]
            }
        },
        "BasicAuth.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "Set[str]"
                ],
                "password": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "BasicAuth.auth_flow": {
            "name": "auth_flow",
            "location": 129,
            "return": [
                "Generator[(_T0, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "scrapy.http.Request",
                    "str"
                ]
            }
        },
        "BasicAuth._build_auth_header": {
            "name": "_build_auth_header",
            "location": 133,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "bytes"
                ],
                "password": [
                    "str",
                    "bytes"
                ]
            }
        },
        "DigestAuth.__init__": {
            "name": "__init__",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "password": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "DigestAuth.auth_flow": {
            "name": "auth_flow",
            "location": 159,
            "return": [
                "Generator[(_T0, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "_models.Request"
                ]
            }
        },
        "DigestAuth._parse_challenge": {
            "name": "_parse_challenge",
            "location": 179,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "_models.Request",
                    "Optional[str]",
                    "scrapy.http.Response",
                    "aiohttp.web.Response"
                ],
                "response": [
                    "_models.Response",
                    "Dict[str, Any]",
                    "aiohttp.web.Request",
                    "float",
                    "responses.Response",
                    "requests.Request",
                    "Dict[str, str]"
                ],
                "auth_header": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "Dict[str, str]",
                    "Set[str]",
                    "List[str]"
                ]
            }
        },
        "DigestAuth._build_auth_header": {
            "name": "_build_auth_header",
            "location": 210,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "flask.Request"
                ],
                "challenge": [
                    "int",
                    "aiohttp.web.Request",
                    "Optional[str]",
                    "FrozenSet[bytes]"
                ]
            }
        },
        "DigestAuth._get_client_nonce": {
            "name": "_get_client_nonce",
            "location": 257,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "nonce_count": [
                    "str",
                    "bool",
                    "int"
                ],
                "nonce": [
                    "bytes",
                    "str",
                    "int",
                    "Sequence[str]",
                    "List[str]"
                ]
            }
        },
        "DigestAuth._get_header_value": {
            "name": "_get_header_value",
            "location": 265,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "header_fields": [
                    "Dict[str, bytes]",
                    "Dict[str, Any]",
                    "List[\"libkol.types.ItemQuantity\"]",
                    "Dict[str, str]",
                    "dict",
                    "Dict[int, Dict[str, Any]]"
                ]
            }
        },
        "DigestAuth._resolve_qop": {
            "name": "_resolve_qop",
            "location": 283,
            "return": [
                "Optional[bytes]"
            ],
            "arguments": {
                "self": [],
                "qop": [
                    "Optional[flask.Response]",
                    "aiohttp.web.Request",
                    "Optional[Mapping]",
                    "List[int]"
                ],
                "request": [
                    "_models.Request",
                    "aiohttp.web.Request",
                    "Mapping",
                    "scrapy.http.Request"
                ]
            }
        },
        "DigestAuth._build_auth_header.digest": {
            "name": "digest",
            "location": 215,
            "return": [
                "int",
                "Dict[str, int]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        }
    },
    "httpx-master/httpx/_client.py": {
        "BoundSyncStream.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "int",
                    "str",
                    "float",
                    "List[str]",
                    "bytes",
                    "pyatv.suppormdns.Response",
                    "scrapy.http.Response"
                ],
                "response": [
                    "int",
                    "str",
                    "float",
                    "List[str]",
                    "bytes",
                    "pyatv.suppormdns.Response",
                    "scrapy.http.Response"
                ],
                "timer": [
                    "int",
                    "str",
                    "float",
                    "List[str]",
                    "bytes",
                    "pyatv.suppormdns.Response",
                    "scrapy.http.Response"
                ]
            }
        },
        "BoundSyncStream.__iter__": {
            "name": "__iter__",
            "location": 122,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoundSyncStream.close": {
            "name": "close",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoundAsyncStream.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "int",
                    "str",
                    "float",
                    "List[str]",
                    "bytes",
                    "pyatv.suppormdns.Response",
                    "scrapy.http.Response"
                ],
                "response": [
                    "int",
                    "str",
                    "float",
                    "List[str]",
                    "bytes",
                    "pyatv.suppormdns.Response",
                    "scrapy.http.Response"
                ],
                "timer": [
                    "int",
                    "str",
                    "float",
                    "List[str]",
                    "bytes",
                    "pyatv.suppormdns.Response",
                    "scrapy.http.Response"
                ]
            }
        },
        "BaseClient.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseClient.is_closed": {
            "name": "is_closed",
            "location": 194,
            "return": [
                "Dict[str,Any]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseClient.trust_env": {
            "name": "trust_env",
            "location": 201,
            "return": [
                "Mapping[str, str]",
                "\"jinja2.Environment\"",
                "rouver.types.WSGIEnvironment",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseClient._enforce_trailing_slash": {
            "name": "_enforce_trailing_slash",
            "location": 204,
            "return": [
                "str",
                "Optional[str]",
                "IO[str]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "BaseClient._get_proxy_map": {
            "name": "_get_proxy_map",
            "location": 209,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "proxies": [
                    "Any",
                    "Optional[Any]",
                    "Dict",
                    "None",
                    "str",
                    "Union[str,None]",
                    "Optional[str]"
                ],
                "allow_env_proxies": [
                    "bool",
                    "Sequence[str]",
                    "str"
                ]
            }
        },
        "BaseClient.timeout": {
            "name": "timeout",
            "location": 234,
            "return": [
                "None",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "int",
                    "float",
                    "Callable",
                    "Optional[bool]"
                ]
            }
        },
        "BaseClient.event_hooks": {
            "name": "event_hooks",
            "location": 242,
            "return": [
                "None",
                "List[tuple[Union[str,int]]]",
                "Dict[str,Union[float,None]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "event_hooks": [
                    "BasicAuth",
                    "Dict[str, List[bytes]]",
                    "Dict[str, Any]",
                    "apistar.types.WSGIEnviron"
                ]
            }
        },
        "BaseClient.auth": {
            "name": "auth",
            "location": 262,
            "return": [
                "None",
                "MutableMapping",
                "Dict[str,str]",
                "List[str]",
                "Set[str]",
                "Tuple[Union[str,Any]]",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "Dict[str, Any]",
                    "List[str]",
                    "float",
                    "List[Dict]",
                    "dict"
                ]
            }
        },
        "BaseClient.base_url": {
            "name": "base_url",
            "location": 273,
            "return": [
                "None",
                "str"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "IO[bytes]",
                    "List[str]"
                ]
            }
        },
        "BaseClient.headers": {
            "name": "headers",
            "location": 284,
            "return": [
                "None",
                "str",
                "List[str]",
                "Dict[str,str]",
                "int",
                "Tuple[Union[str,str,str]]",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "_types.HeaderTypes",
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "submicontrollers.ui.util.Response"
                ]
            }
        },
        "BaseClient.cookies": {
            "name": "cookies",
            "location": 304,
            "return": [
                "None",
                "str",
                "Dict[str,Any]",
                "Dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "cookies": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BaseClient.params": {
            "name": "params",
            "location": 315,
            "return": [
                "None",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BaseClient.build_request": {
            "name": "build_request",
            "location": 318,
            "return": [
                "Request",
                "str",
                "Dict[str,Any]",
                "bool",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "bool",
                    "str",
                    "Dict",
                    "_types.URLTypes",
                    "_types.RequestFiles",
                    "_types.QueryParamTypes",
                    "_types.RequestData",
                    "Union[_types.TimeoutTypes,_config.UnsetType]",
                    "_types.CookieTypes"
                ],
                "url": [
                    "str",
                    "Dict[str,str]",
                    "bool",
                    "Dict",
                    "int"
                ]
            }
        },
        "BaseClient._merge_url": {
            "name": "_merge_url",
            "location": 369,
            "return": [
                "httpx._urls.URL"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "_types.URLTypes"
                ]
            }
        },
        "BaseClient._merge_cookies": {
            "name": "_merge_cookies",
            "location": 391,
            "return": [
                "Union[(httpx._models.Cookies, _T0)]"
            ],
            "arguments": {
                "self": [],
                "cookies": [
                    "Dict[str,Any]",
                    "Dict",
                    "str",
                    "bool"
                ]
            }
        },
        "BaseClient._merge_headers": {
            "name": "_merge_headers",
            "location": 404,
            "return": [
                "httpx._models.Headers"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "Dict",
                    "collector_utilities.type.Response",
                    "Union[dict,list]",
                    "_types.HeaderTypes",
                    "str",
                    "fausweb.base.Response"
                ]
            }
        },
        "BaseClient._merge_queryparams": {
            "name": "_merge_queryparams",
            "location": 415,
            "return": [
                "Union[(httpx._urls.QueryParams, _T0)]"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "Dict[str,Any]",
                    "None",
                    "str",
                    "List",
                    "List[int]",
                    "List[Tuple[str,Any]]",
                    "List[tuple[Union[str,Any]]]"
                ]
            }
        },
        "BaseClient._build_auth": {
            "name": "_build_auth",
            "location": 427,
            "return": [
                "Optional[Union[(httpx._auth.BasicAuth, httpx._auth.FunctionAuth, _T0)]]"
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "str",
                    "_types.AuthTypes",
                    "bytes",
                    "None",
                    "int",
                    "Optional[str]",
                    "Callable",
                    "httpcore.AsyncHTTPTransport"
                ]
            }
        },
        "BaseClient._build_request_auth": {
            "name": "_build_request_auth",
            "location": 439,
            "return": [
                "int",
                "str",
                "Dict",
                "List[str]",
                "BasicAuth",
                "lightbus.transports.base.RpcMessage",
                "Auth",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "Request"
                ],
                "auth": [
                    "UseClientDefault",
                    "Optional[Dict[str,Any]]",
                    "bool",
                    "Tuple[str,str,str]"
                ]
            }
        },
        "BaseClient._build_redirect_request": {
            "name": "_build_redirect_request",
            "location": 462,
            "return": [
                "httpx._models.Request"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str,Any]",
                    "_types.HeaderTypes",
                    "httpx.Request"
                ],
                "response": [
                    "collector_utilities.type.Response"
                ]
            }
        },
        "BaseClient._redirect_method": {
            "name": "_redirect_method",
            "location": 481,
            "return": [
                "Text",
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Callable[...,collections.abc.Awaitable[dict]]",
                    "_models.Request",
                    "List[R]",
                    "collector_utilities.type.Response",
                    "Callable[...,Awaitable[dict]]",
                    "List[_models.Response]"
                ],
                "response": [
                    "Dict[str,Any]",
                    "Dict",
                    "_models.Response",
                    "None",
                    "bool",
                    "requests.Response",
                    "Optional[requests.Response]",
                    "requests.models.Response"
                ]
            }
        },
        "BaseClient._redirect_url": {
            "name": "_redirect_url",
            "location": 504,
            "return": [
                "str",
                "URL",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "_models.Request",
                    "requests.Response",
                    "_types.HeaderTypes"
                ],
                "response": [
                    "flask.Response",
                    "aiohttp.web.Response",
                    "Response"
                ]
            }
        },
        "BaseClient._redirect_headers": {
            "name": "_redirect_headers",
            "location": 533,
            "return": [
                "httpx._models.Headers"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "Dict[str,Any]",
                    "_models.Request",
                    "aiohttp.web.Request"
                ],
                "url": [
                    "str",
                    "Dict",
                    "None",
                    "_models.URL",
                    "Optional[dict]",
                    "Literal"
                ],
                "method": [
                    "str",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "BaseClient._redirect_stream": {
            "name": "_redirect_stream",
            "location": 560,
            "return": [
                "None",
                "Optional[str]",
                "Optional[bool]",
                "Optional[dict]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "aiohttp.web.Request",
                    "_models.Request",
                    "jj.requests.Request"
                ],
                "method": [
                    "str",
                    "jj.requests.Request",
                    "_models.Request"
                ]
            }
        },
        "Client.__init__": {
            "name": "__init__",
            "location": 621,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client._init_transport": {
            "name": "_init_transport",
            "location": 704,
            "return": [
                "Union[(httpx._transports.default.HTTPTransport, httpx._transports.wsgi.WSGITransport, _T5)]"
            ],
            "arguments": {
                "self": [],
                "verify": [
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "float"
                ],
                "cert": [
                    "bool",
                    "None",
                    "float",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "http1": [
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "float"
                ],
                "http2": [
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "float"
                ],
                "limits": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "float"
                ],
                "transport": [
                    "None",
                    "httpcore.AsyncHTTPTransport",
                    "bool",
                    "List[tuple[Union[int,int]]]",
                    "List[Tuple[int,int]]",
                    "str",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "app": [
                    "Callable",
                    "None",
                    "Optional[str]",
                    "Optional[bool]",
                    "str",
                    "Optional[float]",
                    "bool",
                    "Optional[int]",
                    "float"
                ],
                "trust_env": [
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "float"
                ]
            }
        },
        "Client._init_proxy_transport": {
            "name": "_init_proxy_transport",
            "location": 730,
            "return": [
                "httpx._transports.default.HTTPTransport"
            ],
            "arguments": {
                "self": [],
                "proxy": [
                    "bool",
                    "float"
                ],
                "verify": [
                    "bool",
                    "float"
                ],
                "cert": [
                    "bool",
                    "float",
                    "None"
                ],
                "http1": [
                    "bool",
                    "float"
                ],
                "http2": [
                    "bool",
                    "float"
                ],
                "limits": [
                    "bool",
                    "float"
                ],
                "trust_env": [
                    "bool",
                    "float"
                ]
            }
        },
        "Client._transport_for_url": {
            "name": "_transport_for_url",
            "location": 750,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "_models.URL"
                ]
            }
        },
        "Client.request": {
            "name": "request",
            "location": 761,
            "return": [
                "str",
                "Dict[str, bool]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "bool",
                    "_types.QueryParamTypes",
                    "_types.HeaderTypes",
                    "_types.RequestContent",
                    "_types.AuthTypes",
                    "_types.CookieTypes",
                    "_types.RequestData",
                    "_types.RequestFiles",
                    "_types.URLTypes"
                ],
                "url": [
                    "str",
                    "bool",
                    "_types.QueryParamTypes",
                    "_types.HeaderTypes",
                    "_types.RequestContent",
                    "_types.AuthTypes",
                    "_types.CookieTypes",
                    "_types.RequestData",
                    "_types.RequestFiles",
                    "_types.URLTypes"
                ]
            }
        },
        "Client.stream": {
            "name": "stream",
            "location": 818,
            "return": [
                "Iterator[_models.Response]",
                "Generator"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "_types.HeaderTypes",
                    "_types.URLTypes",
                    "_types.RequestContent",
                    "_types.RequestData",
                    "_types.CookieTypes",
                    "_types.RequestFiles",
                    "_types.QueryParamTypes"
                ],
                "url": [
                    "str",
                    "_types.HeaderTypes",
                    "_types.URLTypes",
                    "_types.RequestContent",
                    "_types.RequestData",
                    "_types.CookieTypes",
                    "_types.RequestFiles",
                    "_types.QueryParamTypes"
                ]
            }
        },
        "Client.send": {
            "name": "send",
            "location": 869,
            "return": [
                "bytes",
                "dict",
                "flask.Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "requests.Request"
                ]
            }
        },
        "Client._send_handling_auth": {
            "name": "_send_handling_auth",
            "location": 918,
            "return": [
                "dict",
                "Dict[str, Union[int, str]]",
                "Optional[str]",
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "auth": [
                    "Dict",
                    "bytes",
                    "_auth.Auth",
                    "werkzeug.Request"
                ],
                "follow_redirects": [
                    "str",
                    "Tuple[int]"
                ],
                "history": [
                    "commercetools.types._api_clienApiClient",
                    "werkzeug.Request"
                ]
            }
        },
        "Client._send_handling_redirects": {
            "name": "_send_handling_redirects",
            "location": 952,
            "return": [
                "Optional[str]",
                "float",
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "_models.Request",
                    "aiohttp.web.Request"
                ],
                "follow_redirects": [
                    "bool",
                    "aiohttp.web.Request"
                ],
                "history": [
                    "aiohttp.web.Request"
                ]
            }
        },
        "Client._send_single_request": {
            "name": "_send_single_request",
            "location": 989,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "requests.Request"
                ]
            }
        },
        "Client.get": {
            "name": "get",
            "location": 1022,
            "return": [
                "Dict[str, Any]",
                "bool",
                "str",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "bool",
                    "_types.AuthTypes",
                    "_types.VerifyTypes",
                    "_types.TimeoutTypes",
                    "_types.QueryParamTypes",
                    "_types.CertTypes",
                    "_types.URLTypes",
                    "_types.CookieTypes",
                    "_types.HeaderTypes"
                ]
            }
        },
        "Client.options": {
            "name": "options",
            "location": 1051,
            "return": [
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "bool",
                    "_types.QueryParamTypes",
                    "_types.ProxiesTypes",
                    "_types.CookieTypes",
                    "_types.TimeoutTypes",
                    "_types.URLTypes",
                    "_types.HeaderTypes",
                    "_types.AuthTypes",
                    "_types.CertTypes",
                    "_types.VerifyTypes"
                ]
            }
        },
        "Client.head": {
            "name": "head",
            "location": 1080,
            "return": [
                "int",
                "Dict[str, Any]",
                "pyppeteer.network_manager.Request"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "bool",
                    "_types.QueryParamTypes",
                    "_types.ProxiesTypes",
                    "_types.CookieTypes",
                    "_types.TimeoutTypes",
                    "_types.URLTypes",
                    "_types.HeaderTypes",
                    "_types.AuthTypes",
                    "_types.CertTypes",
                    "_types.VerifyTypes"
                ]
            }
        },
        "Client.post": {
            "name": "post",
            "location": 1109,
            "return": [
                "Dict[str, Any]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "bool",
                    "_types.VerifyTypes",
                    "_types.CookieTypes",
                    "_types.RequestContent",
                    "_types.RequestData",
                    "_types.AuthTypes",
                    "_types.CertTypes",
                    "_types.HeaderTypes",
                    "_types.RequestFiles",
                    "_types.ProxiesTypes"
                ]
            }
        },
        "Client.put": {
            "name": "put",
            "location": 1146,
            "return": [
                "str",
                "int",
                "Response",
                "Dict[str, Any]",
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                "flask.wrappers.Response"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "bool",
                    "_types.ProxiesTypes",
                    "_types.CookieTypes",
                    "_types.CertTypes",
                    "_types.VerifyTypes",
                    "_types.RequestData",
                    "_types.RequestFiles",
                    "_types.URLTypes",
                    "_types.QueryParamTypes"
                ]
            }
        },
        "Client.patch": {
            "name": "patch",
            "location": 1183,
            "return": [
                "Set[str]",
                "str",
                "Dict[str, Any]",
                "bool",
                "Response"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "bool",
                    "_types.RequestContent",
                    "_types.RequestData",
                    "_types.CookieTypes",
                    "_types.HeaderTypes",
                    "_types.TimeoutTypes",
                    "_types.ProxiesTypes",
                    "_types.URLTypes",
                    "_types.VerifyTypes",
                    "_types.RequestFiles"
                ]
            }
        },
        "Client.delete": {
            "name": "delete",
            "location": 1220,
            "return": [
                "Dict[str, str]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "bool",
                    "_types.TimeoutTypes",
                    "_types.CertTypes",
                    "_types.HeaderTypes",
                    "_types.ProxiesTypes",
                    "_types.CookieTypes",
                    "_types.URLTypes",
                    "_types.AuthTypes",
                    "_types.VerifyTypes"
                ]
            }
        },
        "Client.close": {
            "name": "close",
            "location": 1249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.__enter__": {
            "name": "__enter__",
            "location": 1261,
            "return": [
                "Client"
            ],
            "arguments": {
                "self": [
                    "_TClient@@Client@@"
                ]
            }
        },
        "Client.__exit__": {
            "name": "__exit__",
            "location": 1277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_value": [
                    "Optional[BaseException]"
                ],
                "traceback": [
                    "Type[BaseException]",
                    "None",
                    "BaseException",
                    "Type",
                    "types.TracebackType"
                ]
            }
        },
        "AsyncClient.__init__": {
            "name": "__init__",
            "location": 1342,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncClient._init_transport": {
            "name": "_init_transport",
            "location": 1425,
            "return": [
                "Union[(httpx._transports.asgi.ASGITransport, httpx._transports.default.AsyncHTTPTransport, _T5)]"
            ],
            "arguments": {
                "self": [],
                "verify": [
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "float"
                ],
                "cert": [
                    "bool",
                    "None",
                    "float",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "http1": [
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "float"
                ],
                "http2": [
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "float"
                ],
                "limits": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "float"
                ],
                "transport": [
                    "None",
                    "httpcore.AsyncHTTPTransport",
                    "bool",
                    "List[tuple[Union[int,int]]]",
                    "List[Tuple[int,int]]",
                    "str",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "app": [
                    "Callable",
                    "None",
                    "Optional[str]",
                    "Optional[bool]",
                    "str",
                    "Optional[float]",
                    "bool",
                    "Optional[int]",
                    "float"
                ],
                "trust_env": [
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "float"
                ]
            }
        },
        "AsyncClient._init_proxy_transport": {
            "name": "_init_proxy_transport",
            "location": 1451,
            "return": [
                "httpx._transports.default.AsyncHTTPTransport"
            ],
            "arguments": {
                "self": [],
                "proxy": [
                    "bool",
                    "float"
                ],
                "verify": [
                    "bool",
                    "float"
                ],
                "cert": [
                    "bool",
                    "float",
                    "None"
                ],
                "http1": [
                    "bool",
                    "int",
                    "Mapping[str,Any]"
                ],
                "http2": [
                    "bool",
                    "float"
                ],
                "limits": [
                    "bool",
                    "float"
                ],
                "trust_env": [
                    "bool",
                    "float"
                ]
            }
        },
        "AsyncClient._transport_for_url": {
            "name": "_transport_for_url",
            "location": 1470,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "_models.URL"
                ]
            }
        }
    },
    "httpx-master/httpx/_compat.py": {
        "iscoroutine": {
            "name": "iscoroutine",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "coro": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "set_minimum_tls_version_1_2": {
            "name": "set_minimum_tls_version_1_2",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "Dict",
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        }
    },
    "httpx-master/httpx/_config.py": {
        "create_ssl_context": {
            "name": "create_ssl_context",
            "location": 43,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "cert": [
                    "bool",
                    "None",
                    "Exception",
                    "_types.CertTypes",
                    "_types.VerifyTypes"
                ],
                "verify": [
                    "bool",
                    "_types.CertTypes",
                    "_types.VerifyTypes",
                    "Exception"
                ],
                "trust_env": [
                    "bool",
                    "_types.CertTypes",
                    "_types.VerifyTypes",
                    "Exception"
                ],
                "http2": [
                    "bool",
                    "_types.CertTypes",
                    "_types.VerifyTypes",
                    "Exception"
                ]
            }
        },
        "SSLConfig.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSLConfig.load_ssl_context": {
            "name": "load_ssl_context",
            "location": 75,
            "return": [
                "bool",
                "dict",
                "Union[int, float, complex]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSLConfig.load_ssl_context_no_verify": {
            "name": "load_ssl_context_no_verify",
            "location": 88,
            "return": [
                "str",
                "bytes",
                "Callable[[T],bool]",
                "Dict",
                "List[Tuple]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSLConfig.load_ssl_context_verify": {
            "name": "load_ssl_context_verify",
            "location": 98,
            "return": [
                "ssl_@_SSLContext",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSLConfig._create_default_ssl_context": {
            "name": "_create_default_ssl_context",
            "location": 151,
            "return": [
                "ssl.SSLContext"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSLConfig._load_client_certs": {
            "name": "_load_client_certs",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ssl_context": [
                    "ssl.SSLContext",
                    "Callable"
                ]
            }
        },
        "Timeout.__init__": {
            "name": "__init__",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "UnsetType",
                    "bool",
                    "int",
                    "str",
                    "bytes",
                    "float"
                ]
            }
        },
        "Timeout.as_dict": {
            "name": "as_dict",
            "location": 249,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timeout.__eq__": {
            "name": "__eq__",
            "location": 257,
            "return": [
                "bool",
                "str",
                "Dict[str,Any]",
                "Callable[...,None]",
                "Tuple[type]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "bool",
                    "pathlib.Path"
                ]
            }
        },
        "Timeout.__repr__": {
            "name": "__repr__",
            "location": 266,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Limits.__init__": {
            "name": "__init__",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Limits.__eq__": {
            "name": "__eq__",
            "location": 301,
            "return": [
                "bool",
                "Dict[str,Any]",
                "Tuple[str,str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int"
                ]
            }
        },
        "Limits.__repr__": {
            "name": "__repr__",
            "location": 309,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Proxy.__init__": {
            "name": "__init__",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "Proxy.raw_auth": {
            "name": "raw_auth",
            "location": 342,
            "return": [
                "None",
                "Tuple",
                "Optional[str]",
                "Optional[bool]",
                "bool",
                "Optional[Dict[str,Any]]",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Proxy.__repr__": {
            "name": "__repr__",
            "location": 350,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "httpx-master/httpx/_content.py": {
        "encode_content": {
            "name": "encode_content",
            "location": 110,
            "return": [
                "Tuple[(Dict[(str, str)], Union[(AsyncIteratorByteStream, ByteStream, IteratorByteStream)])]"
            ],
            "arguments": {
                "content": [
                    "bytes",
                    "Union[Callable, None]",
                    "Callable",
                    "bool"
                ]
            }
        },
        "encode_urlencoded_data": {
            "name": "encode_urlencoded_data",
            "location": 136,
            "return": [
                "Tuple[(Dict[(str, str)], ByteStream)]"
            ],
            "arguments": {
                "data": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "encode_multipart_data": {
            "name": "encode_multipart_data",
            "location": 152,
            "return": [
                "Tuple[(Dict[(str, str)], httpx._multipart.MultipartStream)]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "dict"
                ],
                "files": [
                    "str",
                    "dict"
                ],
                "boundary": [
                    "str",
                    "dict"
                ]
            }
        },
        "encode_text": {
            "name": "encode_text",
            "location": 160,
            "return": [
                "Tuple[(Dict[(str, str)], ByteStream)]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "bool"
                ]
            }
        },
        "encode_html": {
            "name": "encode_html",
            "location": 168,
            "return": [
                "Tuple[(Dict[(str, str)], ByteStream)]"
            ],
            "arguments": {
                "html": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "encode_json": {
            "name": "encode_json",
            "location": 176,
            "return": [
                "Tuple[(Dict[(str, str)], ByteStream)]"
            ],
            "arguments": {
                "json": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Dict[str, int]",
                    "dict"
                ]
            }
        },
        "encode_request": {
            "name": "encode_request",
            "location": 184,
            "return": [
                "Tuple[(Dict[(str, str)], Union[(AsyncIteratorByteStream, ByteStream, IteratorByteStream, httpx._multipart.MultipartStream)])]"
            ],
            "arguments": {
                "content": [
                    "Optional[str]",
                    "bytes",
                    "bool",
                    "Optional[dict]"
                ],
                "data": [
                    "dict",
                    "str",
                    "bytes",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "files": [
                    "str",
                    "_types.URLTypes",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "bytes"
                ],
                "json": [
                    "Optional[Set[int]]",
                    "Optional[List[str]]"
                ],
                "boundary": [
                    "str",
                    "_types.URLTypes",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "bytes"
                ]
            }
        },
        "encode_response": {
            "name": "encode_response",
            "location": 219,
            "return": [
                "Tuple[(Dict[(str, str)], Union[(AsyncIteratorByteStream, ByteStream, IteratorByteStream)])]"
            ],
            "arguments": {
                "content": [
                    "str",
                    "Optional[str]",
                    "Optional[Union[Any, Any]]"
                ],
                "text": [
                    "str",
                    "Union[str, None]"
                ],
                "html": [
                    "Optional[str]",
                    "Optional[List[str]]",
                    "str",
                    "bool",
                    "Optional[Union[Any, Any]]"
                ],
                "json": [
                    "Optional[str]",
                    "Optional[List[str]]",
                    "str",
                    "bool",
                    "Optional[Union[Any, Any]]"
                ]
            }
        },
        "ByteStream.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ByteStream.__iter__": {
            "name": "__iter__",
            "location": 34,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorByteStream.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "str",
                    "Callable",
                    "IO[Any]",
                    "IO[str]"
                ]
            }
        },
        "IteratorByteStream.__iter__": {
            "name": "__iter__",
            "location": 49,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncIteratorByteStream.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "str",
                    "Callable",
                    "IO[Any]",
                    "IO[str]"
                ]
            }
        },
        "UnattachedStream.__iter__": {
            "name": "__iter__",
            "location": 102,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "httpx-master/httpx/_decoders.py": {
        "ContentDecoder.decode": {
            "name": "decode",
            "location": 16,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "Dict",
                    "bool"
                ]
            }
        },
        "ContentDecoder.flush": {
            "name": "flush",
            "location": 19,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "IdentityDecoder.decode": {
            "name": "decode",
            "location": 28,
            "return": [
                "int",
                "str",
                "bytes",
                "Dict",
                "Optional[float]",
                "List[Dict[str,Any]]",
                "Dict[str,str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "Dict",
                    "bool"
                ]
            }
        },
        "IdentityDecoder.flush": {
            "name": "flush",
            "location": 31,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeflateDecoder.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeflateDecoder.decode": {
            "name": "decode",
            "location": 46,
            "return": [
                "int",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bool",
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        },
        "DeflateDecoder.flush": {
            "name": "flush",
            "location": 57,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "GZipDecoder.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GZipDecoder.decode": {
            "name": "decode",
            "location": 74,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict",
                    "str",
                    "bytes"
                ]
            }
        },
        "GZipDecoder.flush": {
            "name": "flush",
            "location": 80,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "BrotliDecoder.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BrotliDecoder.decode": {
            "name": "decode",
            "location": 114,
            "return": [
                "bytes",
                "str",
                "Union[bytes,bytearray]",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict",
                    "bytes",
                    "Union[bytes,bytearray,memoryview]",
                    "bytearray",
                    "memoryview"
                ]
            }
        },
        "BrotliDecoder.flush": {
            "name": "flush",
            "location": 123,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiDecoder.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "children": [
                    "bool",
                    "str",
                    "List[tuple]",
                    "List[str]",
                    "int",
                    "List[Tuple]",
                    "Iterable[T]",
                    "Union[List[str],str]"
                ]
            }
        },
        "MultiDecoder.decode": {
            "name": "decode",
            "location": 152,
            "return": [
                "str",
                "Dict",
                "bytes",
                "Dict[str,str]",
                "Optional[float]",
                "int",
                "List[Dict[str,Any]]",
                "None",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict",
                    "bytes",
                    "str",
                    "Dict[str,str]",
                    "None",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]"
                ]
            }
        },
        "MultiDecoder.flush": {
            "name": "flush",
            "location": 157,
            "return": [
                "bytes",
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str,Any]]",
                "Dict[str,str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ByteChunker.__init__": {
            "name": "__init__",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chunk_size": [
                    "int",
                    "None",
                    "bool"
                ]
            }
        },
        "ByteChunker.decode": {
            "name": "decode",
            "location": 173,
            "return": [
                "List[Union[(bytes, _T0)]]"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ByteChunker.flush": {
            "name": "flush",
            "location": 196,
            "return": [
                "List[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextChunker.__init__": {
            "name": "__init__",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chunk_size": [
                    "int",
                    "None",
                    "bool"
                ]
            }
        },
        "TextChunker.decode": {
            "name": "decode",
            "location": 212,
            "return": [
                "List[Union[(str, _T0)]]"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TextChunker.flush": {
            "name": "flush",
            "location": 235,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextDecoder.__init__": {
            "name": "__init__",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "encoding": [
                    "Text",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TextDecoder.decode": {
            "name": "decode",
            "location": 250,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "Optional[Union[str,bytes]]",
                    "Dict",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "List[int]",
                    "Dict[str,Any]",
                    "T",
                    "Dict[str,set[str]]",
                    "Dict[str,Set[str]]"
                ]
            }
        },
        "TextDecoder.flush": {
            "name": "flush",
            "location": 253,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineDecoder.__init__": {
            "name": "__init__",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineDecoder.decode": {
            "name": "decode",
            "location": 268,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "LineDecoder.flush": {
            "name": "flush",
            "location": 311,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "httpx-master/httpx/_exceptions.py": {
        "request_context": {
            "name": "request_context",
            "location": 331,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "request": [
                    "None"
                ]
            }
        },
        "HTTPError.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "HTTPError.request": {
            "name": "request",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "RequestError.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "HTTPStatusError.__init__": {
            "name": "__init__",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "InvalidURL.__init__": {
            "name": "__init__",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "CookieConflict.__init__": {
            "name": "__init__",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "StreamError.__init__": {
            "name": "__init__",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "StreamConsumed.__init__": {
            "name": "__init__",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamClosed.__init__": {
            "name": "__init__",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseNotRead.__init__": {
            "name": "__init__",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestNotRead.__init__": {
            "name": "__init__",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "httpx-master/httpx/_main.py": {
        "print_help": {
            "name": "print_help",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_lexer_for_response": {
            "name": "get_lexer_for_response",
            "location": 98,
            "return": [
                "Text",
                "bool",
                "str"
            ],
            "arguments": {
                "response": [
                    "Dict[str,Any]",
                    "Dict",
                    "flask.Response",
                    "requests.models.Response",
                    "requests.Response",
                    "Response"
                ]
            }
        },
        "format_request_headers": {
            "name": "format_request_headers",
            "location": 109,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [
                    "Dict[str,Any]",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "None"
                ],
                "http2": [
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        },
        "format_response_headers": {
            "name": "format_response_headers",
            "location": 122,
            "return": [
                "str"
            ],
            "arguments": {
                "http_version": [
                    "int",
                    "bool"
                ],
                "status": [
                    "str",
                    "Dict[int,dict]",
                    "Optional[Dict[str,str]]",
                    "int",
                    "Dict[str,str]",
                    "Optional[str]",
                    "None",
                    "List[Tuple[str,str]]",
                    "List[tuple[Union[str,str]]]",
                    "Optional[bytes]",
                    "bytes"
                ],
                "reason_phrase": [
                    "str",
                    "int",
                    "Optional[float]",
                    "Dict[int,dict]",
                    "float",
                    "None"
                ],
                "headers": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "int"
                ]
            }
        },
        "print_request_headers": {
            "name": "print_request_headers",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "Dict"
                ],
                "http2": [
                    "Dict",
                    "bool"
                ]
            }
        },
        "print_response_headers": {
            "name": "print_response_headers",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "http_version": [
                    "int",
                    "str",
                    "bytes",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "status": [
                    "int",
                    "str",
                    "bytes",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "reason_phrase": [
                    "int",
                    "str",
                    "bytes",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "headers": [
                    "int",
                    "str",
                    "bytes",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "print_response": {
            "name": "print_response",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "scrapy.http.Response",
                    "aiohttp.web.Response"
                ]
            }
        },
        "format_certificate": {
            "name": "format_certificate",
            "location": 182,
            "return": [
                "str"
            ],
            "arguments": {
                "cert": [
                    "Dict[str,int]",
                    "Dict[str,float]",
                    "Mapping"
                ]
            }
        },
        "trace": {
            "name": "trace",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "bool",
                    "str"
                ],
                "info": [
                    "str",
                    "bool"
                ],
                "verbose": [
                    "bool",
                    "str"
                ]
            }
        },
        "download_response": {
            "name": "download_response",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "flask.Response",
                    "requests.models.Response",
                    "dict",
                    "aiohttp.web.Response"
                ],
                "download": [
                    "Dict[str,Any]",
                    "Dict",
                    "bytes",
                    "Mapping[str,object]",
                    "Mapping"
                ]
            }
        },
        "validate_json": {
            "name": "validate_json",
            "location": 259,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "Tuple[str]",
                    "click.Parameter",
                    "click.Context"
                ],
                "param": [
                    "str",
                    "Tuple[str]",
                    "click.Parameter",
                    "click.Context"
                ],
                "value": [
                    "str",
                    "bool",
                    "bytes",
                    "click.Context",
                    "Exception",
                    "Optional[Exception]",
                    "None"
                ]
            }
        },
        "validate_auth": {
            "name": "validate_auth",
            "location": 273,
            "return": [
                "Optional[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "Tuple[str]",
                    "click.Parameter",
                    "str",
                    "Union[click.Option,click.Parameter]",
                    "click.Context"
                ],
                "param": [
                    "bool",
                    "Tuple[str]",
                    "click.Parameter",
                    "str",
                    "Union[click.Option,click.Parameter]",
                    "click.Context"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Type[T]",
                    "Type",
                    "click.Context"
                ]
            }
        },
        "handle_help": {
            "name": "handle_help",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "click.Context"
                ],
                "param": [
                    "str",
                    "Tuple[str]",
                    "click.Parameter",
                    "click.Context"
                ],
                "value": [
                    "Dict[str,Any]",
                    "click.Context"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "apistar.Response",
                    "Dict",
                    "Dict[str,str]",
                    "bool",
                    "None",
                    "Optional[Dict]"
                ],
                "method": [
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Dict"
                ],
                "params": [
                    "str",
                    "Dict",
                    "apistar.Response",
                    "Dict[str,str]",
                    "Optional[Dict]",
                    "bool"
                ],
                "content": [
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Dict"
                ],
                "data": [
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Dict"
                ],
                "files": [
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Dict"
                ],
                "json": [
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Dict"
                ],
                "headers": [
                    "str",
                    "apistar.Response",
                    "Dict",
                    "Dict[str,str]",
                    "bool",
                    "None",
                    "Optional[Dict]"
                ],
                "cookies": [
                    "str",
                    "apistar.Response",
                    "Dict",
                    "Dict[str,str]",
                    "bool",
                    "None",
                    "Optional[Dict]"
                ],
                "auth": [
                    "str",
                    "apistar.Response",
                    "Dict",
                    "Dict[str,str]",
                    "bool",
                    "None",
                    "Optional[Dict]"
                ],
                "proxies": [
                    "bool"
                ],
                "timeout": [
                    "bool"
                ],
                "follow_redirects": [
                    "str",
                    "apistar.Response",
                    "Dict",
                    "Dict[str,str]",
                    "bool",
                    "None",
                    "Optional[Dict]"
                ],
                "verify": [
                    "bool"
                ],
                "http2": [
                    "bool"
                ],
                "download": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[bool]",
                    "None",
                    "Tuple[Any,Optional[str]]",
                    "Tuple[Union[Any,str,None]]"
                ],
                "verbose": [
                    "str",
                    "apistar.Response",
                    "Dict",
                    "Dict[str,str]",
                    "bool",
                    "None",
                    "Optional[Dict]"
                ]
            }
        }
    },
    "httpx-master/httpx/_models.py": {
        "Headers.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "Dict[str, Any]",
                    "Mapping[str, str]",
                    "dict",
                    "str",
                    "List[Dict[str, Any]]"
                ],
                "encoding": [
                    "str",
                    "bytes",
                    "Tuple[str, Dict]",
                    "Dict[str, Union[str, Any]]"
                ]
            }
        },
        "Headers.encoding": {
            "name": "encoding",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "Headers.raw": {
            "name": "raw",
            "location": 118,
            "return": [
                "list",
                "str",
                "Dict[str, Set[str]]",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Headers.keys": {
            "name": "keys",
            "location": 124,
            "return": [
                "dict_keys"
            ],
            "arguments": {
                "self": []
            }
        },
        "Headers.values": {
            "name": "values",
            "location": 127,
            "return": [
                "dict_values"
            ],
            "arguments": {
                "self": []
            }
        },
        "Headers.items": {
            "name": "items",
            "location": 138,
            "return": [
                "dict_items"
            ],
            "arguments": {
                "self": []
            }
        },
        "Headers.multi_items": {
            "name": "multi_items",
            "location": 153,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Headers.get": {
            "name": "get",
            "location": 164,
            "return": [
                "Union[(str, _T1)]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "int",
                    "List[Tuple[int, int]]",
                    "Optional[str]"
                ],
                "default": [
                    "str",
                    "Optional[Any]"
                ]
            }
        },
        "Headers.get_list": {
            "name": "get_list",
            "location": 174,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Callable[[bytes], Any]",
                    "bool"
                ],
                "split_commas": [
                    "bool",
                    "str",
                    "Callable",
                    "Callable[[], object]",
                    "tuple"
                ]
            }
        },
        "Headers.update": {
            "name": "update",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "django.http.HttpRequest",
                    "Dict[str, str]",
                    "bytes"
                ]
            }
        },
        "Headers.copy": {
            "name": "copy",
            "location": 203,
            "return": [
                "Headers"
            ],
            "arguments": {
                "self": [
                    "_THeaders@@Headers@@"
                ]
            }
        },
        "Headers.__getitem__": {
            "name": "__getitem__",
            "location": 206,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Headers.__setitem__": {
            "name": "__setitem__",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "Union[str, int]"
                ],
                "value": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "Headers.__delitem__": {
            "name": "__delitem__",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Headers.__contains__": {
            "name": "__contains__",
            "location": 268,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[str, int]"
                ]
            }
        },
        "Headers.__iter__": {
            "name": "__iter__",
            "location": 272,
            "return": [
                "List[int]",
                "bytearray",
                "Iterator[str]",
                "Iterable",
                "Iterator[T]",
                "Iterator[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Headers.__len__": {
            "name": "__len__",
            "location": 275,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Headers.__eq__": {
            "name": "__eq__",
            "location": 278,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict[str, Any]",
                    "Mapping",
                    "T",
                    "float",
                    "str",
                    "List[Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "Headers.__repr__": {
            "name": "__repr__",
            "location": 288,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.__init__": {
            "name": "__init__",
            "location": 305,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "bytes",
                    "dict",
                    "Tuple[str, Dict]"
                ],
                "url": [
                    "Dict[str, Any]",
                    "bytes",
                    "dict",
                    "str"
                ]
            }
        },
        "Request._prepare": {
            "name": "_prepare",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default_headers": [
                    "Dict[str, Dict[str, str]]",
                    "str",
                    "Mapping[str, Dict[str, Any]]",
                    "T",
                    "Dict[str, str]",
                    "Dict[str, int]",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "Request.content": {
            "name": "content",
            "location": 379,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.read": {
            "name": "read",
            "location": 384,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.__repr__": {
            "name": "__repr__",
            "location": 412,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.__getstate__": {
            "name": "__getstate__",
            "location": 417,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.__setstate__": {
            "name": "__setstate__",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Response.__init__": {
            "name": "__init__",
            "location": 432,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "status_code": [
                    "int"
                ]
            }
        },
        "Response._prepare": {
            "name": "_prepare",
            "location": 487,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default_headers": [
                    "Dict[str, Dict[str, str]]",
                    "str",
                    "Mapping[str, Dict[str, Any]]",
                    "T",
                    "Dict[str, str]",
                    "Dict[str, int]",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "Response.elapsed": {
            "name": "elapsed",
            "location": 508,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "elapsed": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Response.request": {
            "name": "request",
            "location": 523,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "int",
                    "List[str]",
                    "Callable[[object], Any]"
                ]
            }
        },
        "Response.http_version": {
            "name": "http_version",
            "location": 527,
            "return": [
                "bool",
                "str",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.reason_phrase": {
            "name": "reason_phrase",
            "location": 534,
            "return": [
                "int",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.url": {
            "name": "url",
            "location": 541,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.content": {
            "name": "content",
            "location": 548,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.text": {
            "name": "text",
            "location": 554,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.encoding": {
            "name": "encoding",
            "location": 587,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "Response.charset_encoding": {
            "name": "charset_encoding",
            "location": 591,
            "return": [
                "Optional[str]",
                "type",
                "Optional[List[Any]]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response._get_content_decoder": {
            "name": "_get_content_decoder",
            "location": 605,
            "return": [
                "bool",
                "Callable[[bytes], None]",
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.is_informational": {
            "name": "is_informational",
            "location": 631,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.is_success": {
            "name": "is_success",
            "location": 638,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.is_redirect": {
            "name": "is_redirect",
            "location": 645,
            "return": [
                "str",
                "dict",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.is_client_error": {
            "name": "is_client_error",
            "location": 657,
            "return": [
                "Exception",
                "str",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.is_server_error": {
            "name": "is_server_error",
            "location": 664,
            "return": [
                "List[Callable]",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.is_error": {
            "name": "is_error",
            "location": 671,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.has_redirect_location": {
            "name": "has_redirect_location",
            "location": 678,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.raise_for_status": {
            "name": "raise_for_status",
            "location": 700,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.json": {
            "name": "json",
            "location": 737,
            "return": [
                "bool",
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.cookies": {
            "name": "cookies",
            "location": 745,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.links": {
            "name": "links",
            "location": 752,
            "return": [
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.num_bytes_downloaded": {
            "name": "num_bytes_downloaded",
            "location": 766,
            "return": [
                "bool",
                "List[str]",
                "Dict[str, str]",
                "Optional[Set[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.__repr__": {
            "name": "__repr__",
            "location": 769,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.__getstate__": {
            "name": "__getstate__",
            "location": 772,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.__setstate__": {
            "name": "__setstate__",
            "location": 779,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Response.read": {
            "name": "read",
            "location": 786,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.iter_bytes": {
            "name": "iter_bytes",
            "location": 794,
            "return": [
                "Generator[(bytes, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "chunk_size": [
                    "Tuple[int, int]",
                    "int",
                    "list",
                    "bool"
                ]
            }
        },
        "Response.iter_text": {
            "name": "iter_text",
            "location": 819,
            "return": [
                "Generator[(str, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "chunk_size": [
                    "int",
                    "float"
                ]
            }
        },
        "Response.iter_lines": {
            "name": "iter_lines",
            "location": 840,
            "return": [
                "Generator[(str, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.iter_raw": {
            "name": "iter_raw",
            "location": 849,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "chunk_size": [
                    "int",
                    "Tuple[float, float]"
                ]
            }
        },
        "Response.close": {
            "name": "close",
            "location": 877,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cookies.__init__": {
            "name": "__init__",
            "location": 1000,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cookies": [
                    "_types.CookieTypes",
                    "List[str]",
                    "Optional[bool]",
                    "Dict[str, str]"
                ]
            }
        },
        "Cookies.extract_cookies": {
            "name": "extract_cookies",
            "location": 1017,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "scrapy.http.Response",
                    "scrapy.http.TextResponse"
                ]
            }
        },
        "Cookies.set_cookie_header": {
            "name": "set_cookie_header",
            "location": 1026,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "Cookies.set": {
            "name": "set",
            "location": 1033,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "Sequence[Sequence[Any]]"
                ],
                "value": [
                    "str",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "Sequence[Sequence[Any]]"
                ],
                "domain": [
                    "str",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "Sequence[Sequence[Any]]"
                ],
                "path": [
                    "str",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "Sequence[Sequence[Any]]"
                ]
            }
        },
        "Cookies.get": {
            "name": "get",
            "location": 1059,
            "return": [
                "int",
                "float",
                "list",
                "str",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]"
                ],
                "default": [
                    "str",
                    "bool",
                    "list"
                ],
                "domain": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "path": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "Cookies.delete": {
            "name": "delete",
            "location": 1084,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "domain": [
                    "str",
                    "Optional[str]"
                ],
                "path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Cookies.clear": {
            "name": "clear",
            "location": 1108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "str",
                    "Dict[str, Dict[str, Any]]"
                ],
                "path": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "dict"
                ]
            }
        },
        "Cookies.update": {
            "name": "update",
            "location": 1123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cookies": [
                    "float",
                    "str",
                    "datetime.timedelta",
                    "int",
                    "bool"
                ]
            }
        },
        "Cookies.__setitem__": {
            "name": "__setitem__",
            "location": 1128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "Cookies.__getitem__": {
            "name": "__getitem__",
            "location": 1131,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "Cookies.__delitem__": {
            "name": "__delitem__",
            "location": 1137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Cookies.__len__": {
            "name": "__len__",
            "location": 1140,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cookies.__iter__": {
            "name": "__iter__",
            "location": 1143,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cookies.__bool__": {
            "name": "__bool__",
            "location": 1146,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cookies.__repr__": {
            "name": "__repr__",
            "location": 1151,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cookies._CookieCompatRequest.__init__": {
            "name": "__init__",
            "location": 1167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Union[dict, list]"
                ]
            }
        },
        "Cookies._CookieCompatRequest.add_unredirected_header": {
            "name": "add_unredirected_header",
            "location": 1175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "apistar.http.Method"
                ],
                "value": [
                    "str",
                    "apistar.http.Method"
                ]
            }
        },
        "Cookies._CookieCompatResponse.__init__": {
            "name": "__init__",
            "location": 1185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "List[dict]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Cookies._CookieCompatResponse.info": {
            "name": "info",
            "location": 1188,
            "return": [
                "email.message.Message"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "httpx-master/httpx/_multipart.py": {
        "DataField.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "int",
                    "None"
                ]
            }
        },
        "DataField.render_headers": {
            "name": "render_headers",
            "location": 44,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataField.render_data": {
            "name": "render_data",
            "location": 53,
            "return": [
                "Dict[str, List[int]]",
                "dict",
                "str",
                "pathlib.Path",
                "Optional[float]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataField.get_length": {
            "name": "get_length",
            "location": 59,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataField.render": {
            "name": "render",
            "location": 64,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileField.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "Dict",
                    "Set[str]",
                    "Dict[str,LabwareDefinition]",
                    "Dict[str,D]"
                ],
                "value": [
                    "str",
                    "Dict",
                    "int",
                    "List",
                    "Dict[str,int]"
                ]
            }
        },
        "FileField.get_length": {
            "name": "get_length",
            "location": 117,
            "return": [
                "int",
                "str",
                "Optional[bytes]",
                "List[Dict[str,Any]]",
                "Tuple[int,int]",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileField.render_headers": {
            "name": "render_headers",
            "location": 133,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileField.render_data": {
            "name": "render_data",
            "location": 150,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileField.render": {
            "name": "render",
            "location": 168,
            "return": [
                "Generator[(bytes, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipartStream.__init__": {
            "name": "__init__",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "Dict"
                ],
                "files": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "Dict"
                ],
                "boundary": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Optional[int]",
                    "int",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "MultipartStream._iter_fields": {
            "name": "_iter_fields",
            "location": 190,
            "return": [
                "Generator[(Union[(DataField, FileField)], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict",
                    "Dict[str,Any]",
                    "Mapping",
                    "Callable[[Any],None]",
                    "List[List[str]]"
                ],
                "files": [
                    "str",
                    "None",
                    "pathlib.Path",
                    "Optional[pathlib.Path]"
                ]
            }
        },
        "MultipartStream.iter_chunks": {
            "name": "iter_chunks",
            "location": 204,
            "return": [
                "Generator[(bytes, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipartStream.iter_chunks_lengths": {
            "name": "iter_chunks_lengths",
            "location": 211,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipartStream.get_content_length": {
            "name": "get_content_length",
            "location": 220,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipartStream.get_headers": {
            "name": "get_headers",
            "location": 225,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipartStream.__iter__": {
            "name": "__iter__",
            "location": 230,
            "return": [
                "Generator[(bytes, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "httpx-master/httpx/_status_codes.py": {
        "codes.__new__": {
            "name": "__new__",
            "location": 24,
            "return": [
                "str",
                "int",
                "Dict[int,Any]",
                "DefaultDict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[int]",
                    "int",
                    "List[str]",
                    "None",
                    "bool"
                ],
                "value": [
                    "str"
                ],
                "phrase": [
                    "Text",
                    "str",
                    "int"
                ]
            }
        },
        "codes.__str__": {
            "name": "__str__",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "codes.get_reason_phrase": {
            "name": "get_reason_phrase",
            "location": 35,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "List[Union[Any,Any]]"
                ],
                "value": [
                    "int",
                    "str",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        },
        "codes.is_informational": {
            "name": "is_informational",
            "location": 42,
            "return": [
                "bool",
                "str",
                "List",
                "Dict[str,Any]",
                "Union[str,int]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[Union[Any,Any]]",
                    "int",
                    "Dict[str,Any]",
                    "Pattern",
                    "Pattern[str]",
                    "List"
                ],
                "value": [
                    "int",
                    "str",
                    "List[Union[Any,Any]]",
                    "Pattern[str]",
                    "Dict[str,Any]",
                    "List"
                ]
            }
        },
        "codes.is_success": {
            "name": "is_success",
            "location": 49,
            "return": [
                "bool",
                "str",
                "List",
                "Dict[str,Any]",
                "Union[str,int]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[Union[Any,Any]]",
                    "int",
                    "Dict[str,Any]",
                    "Pattern",
                    "Pattern[str]",
                    "List"
                ],
                "value": [
                    "int",
                    "str",
                    "List[Union[Any,Any]]",
                    "Pattern[str]",
                    "Dict[str,Any]",
                    "List"
                ]
            }
        },
        "codes.is_redirect": {
            "name": "is_redirect",
            "location": 56,
            "return": [
                "bool",
                "str",
                "List",
                "Type"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[Union[Any,Any]]",
                    "int",
                    "Dict[str,Any]",
                    "Pattern",
                    "Pattern[str]",
                    "List"
                ],
                "value": [
                    "int",
                    "str",
                    "List[Union[Any,Any]]",
                    "Pattern[str]",
                    "List",
                    "Dict[str,Any]"
                ]
            }
        },
        "codes.is_client_error": {
            "name": "is_client_error",
            "location": 63,
            "return": [
                "bool",
                "str",
                "Union[str,int]",
                "Type"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Dict",
                    "str",
                    "List",
                    "T",
                    "None",
                    "Optional[str]"
                ],
                "value": [
                    "int",
                    "Dict",
                    "T",
                    "str",
                    "Optional[str]",
                    "List"
                ]
            }
        },
        "codes.is_server_error": {
            "name": "is_server_error",
            "location": 70,
            "return": [
                "bool",
                "int",
                "Dict",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "Dict[str,Any]",
                    "List",
                    "Pattern[str]",
                    "Pattern"
                ],
                "value": [
                    "int",
                    "str",
                    "Dict[str,Any]",
                    "List",
                    "Pattern[str]"
                ]
            }
        },
        "codes.is_error": {
            "name": "is_error",
            "location": 77,
            "return": [
                "bool",
                "str",
                "Dict[str,Any]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "List",
                    "Pattern[str]",
                    "Pattern",
                    "Union[Set[str],List[str]]",
                    "Set[str]",
                    "List[str]"
                ],
                "value": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "List",
                    "Pattern[str]",
                    "Union[Set[str],List[str]]"
                ]
            }
        }
    },
    "httpx-master/httpx/_types.py": {
        "SyncByteStream.__iter__": {
            "name": "__iter__",
            "location": 96,
            "return": [
                "Generator[(nothing, Any, nothing)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyncByteStream.close": {
            "name": "close",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyncByteStream.read": {
            "name": "read",
            "location": 119,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "httpx-master/httpx/_urls.py": {
        "URL.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "typing.Text"
                ]
            }
        },
        "URL.scheme": {
            "name": "scheme",
            "location": 115,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "URL.raw_scheme": {
            "name": "raw_scheme",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URL.userinfo": {
            "name": "userinfo",
            "location": 131,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "URL.username": {
            "name": "username",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URL.password": {
            "name": "password",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URL.host": {
            "name": "host",
            "location": 158,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "URL.raw_host": {
            "name": "raw_host",
            "location": 189,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "URL.port": {
            "name": "port",
            "location": 217,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "URL.netloc": {
            "name": "netloc",
            "location": 234,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "URL.path": {
            "name": "path",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URL.query": {
            "name": "query",
            "location": 263,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "URL.params": {
            "name": "params",
            "location": 280,
            "return": [
                "QueryParams"
            ],
            "arguments": {
                "self": []
            }
        },
        "URL.raw_path": {
            "name": "raw_path",
            "location": 288,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "URL.fragment": {
            "name": "fragment",
            "location": 305,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URL.is_absolute_url": {
            "name": "is_absolute_url",
            "location": 313,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "URL.is_relative_url": {
            "name": "is_relative_url",
            "location": 325,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "URL.copy_with": {
            "name": "copy_with",
            "location": 332,
            "return": [
                "URL"
            ],
            "arguments": {
                "self": [
                    "_TURL@@URL@@"
                ]
            }
        },
        "URL.copy_set_param": {
            "name": "copy_set_param",
            "location": 465,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": [
                    "None"
                ]
            }
        },
        "URL.copy_add_param": {
            "name": "copy_add_param",
            "location": 468,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": [
                    "None"
                ]
            }
        },
        "URL.copy_remove_param": {
            "name": "copy_remove_param",
            "location": 471,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "URL.copy_merge_params": {
            "name": "copy_merge_params",
            "location": 474,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "params": []
            }
        },
        "URL.join": {
            "name": "join",
            "location": 477,
            "return": [
                "URL"
            ],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "URL.__hash__": {
            "name": "__hash__",
            "location": 503,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "URL.__eq__": {
            "name": "__eq__",
            "location": 506,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "URL.__str__": {
            "name": "__str__",
            "location": 509,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "URL.__repr__": {
            "name": "__repr__",
            "location": 512,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryParams.__init__": {
            "name": "__init__",
            "location": 532,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryParams.keys": {
            "name": "keys",
            "location": 573,
            "return": [
                "dict_keys"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryParams.values": {
            "name": "values",
            "location": 584,
            "return": [
                "dict_values"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryParams.items": {
            "name": "items",
            "location": 596,
            "return": [
                "dict_items"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryParams.multi_items": {
            "name": "multi_items",
            "location": 608,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryParams.get": {
            "name": "get",
            "location": 622,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "default": [
                    "None"
                ]
            }
        },
        "QueryParams.get_list": {
            "name": "get_list",
            "location": 636,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "QueryParams.set": {
            "name": "set",
            "location": 647,
            "return": [
                "QueryParams"
            ],
            "arguments": {
                "self": [
                    "_TQueryParams@@QueryParams@@"
                ],
                "key": [],
                "value": [
                    "None"
                ]
            }
        },
        "QueryParams.add": {
            "name": "add",
            "location": 662,
            "return": [
                "QueryParams"
            ],
            "arguments": {
                "self": [
                    "_TQueryParams@@QueryParams@@"
                ],
                "key": [],
                "value": [
                    "None"
                ]
            }
        },
        "QueryParams.remove": {
            "name": "remove",
            "location": 677,
            "return": [
                "QueryParams"
            ],
            "arguments": {
                "self": [
                    "_TQueryParams@@QueryParams@@"
                ],
                "key": []
            }
        },
        "QueryParams.merge": {
            "name": "merge",
            "location": 692,
            "return": [
                "QueryParams"
            ],
            "arguments": {
                "self": [
                    "_TQueryParams@@QueryParams@@"
                ],
                "params": [
                    "None"
                ]
            }
        },
        "QueryParams.__getitem__": {
            "name": "__getitem__",
            "location": 710,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "QueryParams.__contains__": {
            "name": "__contains__",
            "location": 713,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "QueryParams.__iter__": {
            "name": "__iter__",
            "location": 716,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryParams.__len__": {
            "name": "__len__",
            "location": 719,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryParams.__bool__": {
            "name": "__bool__",
            "location": 722,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryParams.__hash__": {
            "name": "__hash__",
            "location": 725,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryParams.__eq__": {
            "name": "__eq__",
            "location": 728,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "QueryParams.__str__": {
            "name": "__str__",
            "location": 733,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryParams.__repr__": {
            "name": "__repr__",
            "location": 736,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryParams.update": {
            "name": "update",
            "location": 741,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "None"
                ]
            }
        },
        "QueryParams.__setitem__": {
            "name": "__setitem__",
            "location": 747,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        }
    },
    "httpx-master/httpx/_utils.py": {
        "normalize_header_key": {
            "name": "normalize_header_key",
            "location": 30,
            "return": [
                "bytes",
                "str",
                "Union[str,bytes]"
            ],
            "arguments": {
                "value": [
                    "bytes",
                    "str",
                    "Union[str,bytes]",
                    "Union[bytes,str]"
                ],
                "lower": [
                    "str",
                    "bytes",
                    "int",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "encoding": [
                    "str",
                    "None"
                ]
            }
        },
        "normalize_header_value": {
            "name": "normalize_header_value",
            "location": 46,
            "return": [
                "bytes",
                "str",
                "int",
                "float",
                "Dict[str,Any]",
                "bool"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Union[str,bytes]",
                    "bytes",
                    "Union[bytes,str]"
                ],
                "encoding": [
                    "str",
                    "int",
                    "None",
                    "bytes"
                ]
            }
        },
        "primitive_value_to_str": {
            "name": "primitive_value_to_str",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Optional[str]",
                    "None",
                    "T"
                ]
            }
        },
        "is_known_encoding": {
            "name": "is_known_encoding",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "encoding": [
                    "str",
                    "int"
                ]
            }
        },
        "format_form_param": {
            "name": "format_form_param",
            "location": 83,
            "return": [
                "bytes"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Union[int,str]",
                    "int"
                ],
                "value": [
                    "str",
                    "Union[str,bytes]",
                    "Dict[str,Any]",
                    "bool",
                    "bytes",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "guess_json_utf": {
            "name": "guess_json_utf",
            "location": 103,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Dict",
                    "bytearray",
                    "Union[bytes,bytearray,memoryview]"
                ]
            }
        },
        "get_ca_bundle_from_env": {
            "name": "get_ca_bundle_from_env",
            "location": 163,
            "return": [
                "Optional[str]"
            ],
            "arguments": {}
        },
        "parse_header_links": {
            "name": "parse_header_links",
            "location": 175,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "float"
                ]
            }
        },
        "obfuscate_sensitive_headers": {
            "name": "obfuscate_sensitive_headers",
            "location": 215,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "items": [
                    "str",
                    "List"
                ]
            }
        },
        "get_logger": {
            "name": "get_logger",
            "location": 234,
            "return": [
                "Logger"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int",
                    "Iterable[str]"
                ]
            }
        },
        "port_or_default": {
            "name": "port_or_default",
            "location": 268,
            "return": [
                "int",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "URL",
                    "Dict",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "same_origin": {
            "name": "same_origin",
            "location": 274,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "URL",
                    "bytes",
                    "None",
                    "Optional[str]"
                ],
                "other": [
                    "str",
                    "URL",
                    "bytes",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "is_https_redirect": {
            "name": "is_https_redirect",
            "location": 285,
            "return": [
                "bool"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None"
                ],
                "location": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "get_environment_proxies": {
            "name": "get_environment_proxies",
            "location": 300,
            "return": [
                "Dict[(str, Optional[str])]"
            ],
            "arguments": {}
        },
        "to_bytes": {
            "name": "to_bytes",
            "location": 338,
            "return": [
                "Dict[str,int]",
                "bytes",
                "str",
                "Dict"
            ],
            "arguments": {
                "value": [
                    "str",
                    "bytes",
                    "Dict",
                    "Union[str,bytes]"
                ],
                "encoding": [
                    "Text",
                    "str",
                    "Union[str,bytes]",
                    "Dict",
                    "bytes"
                ]
            }
        },
        "to_str": {
            "name": "to_str",
            "location": 342,
            "return": [
                "str",
                "Optional[str]",
                "Dict",
                "int"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Union[str,bytes]",
                    "bytes",
                    "Optional[int]",
                    "List",
                    "int",
                    "Union[bool,str]",
                    "None",
                    "Optional[dict]",
                    "Dict",
                    "Union[int,float]",
                    "float"
                ],
                "encoding": [
                    "Text",
                    "Union[str,bytes]",
                    "str",
                    "Optional[int]",
                    "Union[bool,str]",
                    "Optional[dict]",
                    "List",
                    "Union[int,float]"
                ]
            }
        },
        "to_bytes_or_str": {
            "name": "to_bytes_or_str",
            "location": 346,
            "return": [
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "value": [
                    "str",
                    "AnyStr",
                    "Iterable[Hashable]",
                    "Type",
                    "Hashable"
                ],
                "match_type_of": [
                    "str",
                    "AnyStr",
                    "Iterable[Hashable]",
                    "Type",
                    "Hashable"
                ]
            }
        },
        "unquote": {
            "name": "unquote",
            "location": 350,
            "return": [
                "str",
                "Union[int,Tuple[int,...]]",
                "Optional[int]",
                "bool",
                "int"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "guess_content_type": {
            "name": "guess_content_type",
            "location": 354,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "peek_filelike_length": {
            "name": "peek_filelike_length",
            "location": 360,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "stream": [
                    "int",
                    "BinaryIO"
                ]
            }
        },
        "format_form_param.replacer": {
            "name": "replacer",
            "location": 90,
            "return": [
                "str",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "match": [
                    "Match[str]",
                    "Match",
                    "Match[bytes]"
                ]
            }
        },
        "NetRCInfo.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "files": [
                    "List[Union[str,SqlFile]]",
                    "None",
                    "str",
                    "bool",
                    "Optional[pathlib.Path]",
                    "Optional[bool]",
                    "Optional[int]",
                    "Optional[str]",
                    "Union[pathlib.Path,str,None]"
                ]
            }
        },
        "NetRCInfo.netrc_info": {
            "name": "netrc_info",
            "location": 139,
            "return": [
                "None",
                "str",
                "Dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetRCInfo.get_credentials": {
            "name": "get_credentials",
            "location": 153,
            "return": [
                "Optional[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "bool",
                    "List[str]",
                    "Dict[str,Any]",
                    "int",
                    "Tuple[Union[str,str,str]]",
                    "Tuple[str,str,str]"
                ]
            }
        },
        "Logger.trace": {
            "name": "trace",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "get_logger.trace": {
            "name": "trace",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "str",
                    "int",
                    "Iterable[Context]"
                ]
            }
        },
        "Timer.sync_start": {
            "name": "sync_start",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.sync_elapsed": {
            "name": "sync_elapsed",
            "location": 407,
            "return": [
                "float",
                "Tuple[Tuple[int, Any]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "URLPattern.__init__": {
            "name": "__init__",
            "location": 458,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "str",
                    "bytes"
                ]
            }
        },
        "URLPattern.matches": {
            "name": "matches",
            "location": 488,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "int",
                    "Optional[str]",
                    "IO",
                    "None"
                ]
            }
        },
        "URLPattern.priority": {
            "name": "priority",
            "location": 502,
            "return": [
                "Tuple[int]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "URLPattern.__hash__": {
            "name": "__hash__",
            "location": 515,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "URLPattern.__lt__": {
            "name": "__lt__",
            "location": 518,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str,Date]",
                    "str",
                    "Type",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        },
        "URLPattern.__eq__": {
            "name": "__eq__",
            "location": 521,
            "return": [
                "bool",
                "str",
                "Union[str,Dict]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float",
                    "SupportsInt"
                ]
            }
        }
    },
    "httpx-master/httpx/__init__.py": {
        "main": {
            "name": "main",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "httpx-master/httpx/__version__.py": {},
    "httpx-master/httpx/_transports/asgi.py": {
        "create_event": {
            "name": "create_event",
            "location": 17,
            "return": [
                "int",
                "Event"
            ],
            "arguments": {}
        },
        "ASGIResponseStream.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "int",
                    "float"
                ]
            }
        },
        "ASGITransport.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "Callable",
                    "bool"
                ],
                "raise_app_exceptions": [
                    "bool",
                    "Callable",
                    "Optional[str]"
                ],
                "root_path": [
                    "Text",
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "client": [
                    "Tuple[Union[Text,int]]",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "httpx-master/httpx/_transports/base.py": {
        "BaseTransport.__enter__": {
            "name": "__enter__",
            "location": 11,
            "return": [
                "BaseTransport"
            ],
            "arguments": {
                "self": [
                    "_TBaseTransport@@BaseTransport@@"
                ]
            }
        },
        "BaseTransport.__exit__": {
            "name": "__exit__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_value": [
                    "Optional[BaseException]"
                ],
                "traceback": [
                    "None",
                    "Type",
                    "Optional[Type[BaseException]]",
                    "BaseException",
                    "Optional[types.TracebackType]",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        },
        "BaseTransport.handle_request": {
            "name": "handle_request",
            "location": 22,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "flask.Request",
                    "Request"
                ]
            }
        },
        "BaseTransport.close": {
            "name": "close",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "httpx-master/httpx/_transports/default.py": {
        "map_httpcore_exceptions": {
            "name": "map_httpcore_exceptions",
            "location": 58,
            "return": [
                "Iterator[None]",
                "Generator"
            ],
            "arguments": {}
        },
        "ResponseStream.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpcore_stream": [
                    "int",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ]
            }
        },
        "ResponseStream.__iter__": {
            "name": "__iter__",
            "location": 102,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseStream.close": {
            "name": "close",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPTransport.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verify": [
                    "bool",
                    "_types.VerifyTypes",
                    "_types.CertTypes"
                ],
                "cert": [
                    "None",
                    "bool",
                    "_types.VerifyTypes",
                    "_types.CertTypes"
                ],
                "http1": [
                    "bool",
                    "int",
                    "float",
                    "_config.Limits"
                ],
                "http2": [
                    "bool",
                    "int",
                    "float",
                    "_config.Limits"
                ],
                "limits": [
                    "bool",
                    "int",
                    "float",
                    "_config.Limits"
                ],
                "trust_env": [
                    "bool",
                    "_types.VerifyTypes",
                    "_types.CertTypes"
                ],
                "proxy": [
                    "Optional[str]",
                    "None",
                    "List[dict]",
                    "Optional[dict]",
                    "str",
                    "Dict"
                ],
                "uds": [
                    "bool",
                    "None",
                    "float",
                    "int",
                    "_config.Limits"
                ],
                "local_address": [
                    "bool",
                    "None",
                    "float",
                    "int",
                    "_config.Limits"
                ],
                "retries": [
                    "int",
                    "bool",
                    "float",
                    "_config.Limits"
                ]
            }
        },
        "HTTPTransport.__enter__": {
            "name": "__enter__",
            "location": 186,
            "return": [
                "HTTPTransport"
            ],
            "arguments": {
                "self": [
                    "_THTTPTransport@@HTTPTransport@@"
                ]
            }
        },
        "HTTPTransport.__exit__": {
            "name": "__exit__",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_value": [
                    "Optional[BaseException]"
                ],
                "traceback": [
                    "None",
                    "Type[BaseException]",
                    "Type",
                    "BaseException",
                    "Optional[BaseException]",
                    "Optional[types.TracebackType]",
                    "mypy.types.Type",
                    "types.TracebackType"
                ]
            }
        },
        "HTTPTransport.handle_request": {
            "name": "handle_request",
            "location": 199,
            "return": [
                "httpx._models.Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "Dict[str,Any]",
                    "aiohttp.web.Request",
                    "flask.Request",
                    "requests.Request"
                ]
            }
        },
        "HTTPTransport.close": {
            "name": "close",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncResponseStream.__init__": {
            "name": "__init__",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "httpcore_stream": [
                    "int",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ]
            }
        },
        "AsyncHTTPTransport.__init__": {
            "name": "__init__",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verify": [
                    "bool",
                    "_types.VerifyTypes",
                    "_types.CertTypes"
                ],
                "cert": [
                    "None",
                    "bool",
                    "_types.VerifyTypes",
                    "_types.CertTypes"
                ],
                "http1": [
                    "bool",
                    "_config.Limits",
                    "float",
                    "int"
                ],
                "http2": [
                    "bool",
                    "_config.Limits",
                    "float",
                    "int"
                ],
                "limits": [
                    "bool",
                    "_config.Limits",
                    "float",
                    "int"
                ],
                "trust_env": [
                    "bool",
                    "_types.VerifyTypes",
                    "_types.CertTypes"
                ],
                "proxy": [
                    "None",
                    "str",
                    "Optional[str]",
                    "bool",
                    "Dict",
                    "List[dict]",
                    "Optional[bool]"
                ],
                "uds": [
                    "bool",
                    "None",
                    "float",
                    "_config.Limits",
                    "int"
                ],
                "local_address": [
                    "bool",
                    "None",
                    "float",
                    "_config.Limits",
                    "int"
                ],
                "retries": [
                    "int",
                    "bool",
                    "_config.Limits",
                    "float"
                ]
            }
        }
    },
    "httpx-master/httpx/_transports/mock.py": {
        "MockTransport.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "MockTransport.handle_request": {
            "name": "handle_request",
            "location": 12,
            "return": [
                "bytes",
                "Optional[str]",
                "Optional[Dict[str, Any]]",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "aiohttp.web.Response"
                ]
            }
        }
    },
    "httpx-master/httpx/_transports/wsgi.py": {
        "_skip_leading_empty_chunks": {
            "name": "_skip_leading_empty_chunks",
            "location": 11,
            "return": [
                "Union[(itertools.chain, List[nothing])]"
            ],
            "arguments": {
                "body": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "WSGIByteStream.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "str",
                    "Union[str,Iterable[str]]",
                    "int",
                    "Iterable[str]",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "WSGIByteStream.__iter__": {
            "name": "__iter__",
            "location": 24,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WSGIByteStream.close": {
            "name": "close",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WSGITransport.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "bool"
                ],
                "raise_app_exceptions": [
                    "bool",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "script_name": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "bool",
                    "Sequence[str]"
                ],
                "remote_addr": [
                    "Text",
                    "bool",
                    "Optional[str]",
                    "float",
                    "Optional[Dict[str,Any]]",
                    "Container[str]",
                    "str",
                    "int"
                ],
                "wsgi_errors": [
                    "bool",
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "WSGITransport.handle_request": {
            "name": "handle_request",
            "location": 80,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "flask.Request",
                    "dict",
                    "Request"
                ]
            }
        },
        "WSGITransport.handle_request.start_response": {
            "name": "start_response",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "status": [
                    "int",
                    "List[Dict[str, Any]]",
                    "str"
                ],
                "response_headers": [
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Dict[str, int]",
                    "List[Tuple[str, str]]",
                    "bool",
                    "Dict[str, Dict[str, Any]]"
                ],
                "exc_info": [
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[Any]",
                    "bool",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "httpx-master/httpx/_transports/__init__.py": {},
    "httpx-master/tests/common.py": {},
    "httpx-master/tests/concurrency.py": {},
    "httpx-master/tests/conftest.py": {
        "async_environment": {
            "name": "async_environment",
            "location": 40,
            "return": [
                "int",
                "list"
            ],
            "arguments": {
                "request": [
                    "Callable",
                    "asyncio.Lock"
                ]
            }
        },
        "clean_environ": {
            "name": "clean_environ",
            "location": 59,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "cert_authority": {
            "name": "cert_authority",
            "location": 202,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "ca_cert_pem_file": {
            "name": "ca_cert_pem_file",
            "location": 207,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "cert_authority": [
                    "str",
                    "int",
                    "Tuple[str,int]",
                    "Tuple[Union[str,int]]"
                ]
            }
        },
        "localhost_cert": {
            "name": "localhost_cert",
            "location": 213,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cert_authority": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "cert_pem_file": {
            "name": "cert_pem_file",
            "location": 218,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "localhost_cert": [
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "int"
                ]
            }
        },
        "cert_private_key_file": {
            "name": "cert_private_key_file",
            "location": 224,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "localhost_cert": [
                    "str",
                    "bool",
                    "List[int]",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ]
            }
        },
        "cert_encrypted_private_key_file": {
            "name": "cert_encrypted_private_key_file",
            "location": 230,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "localhost_cert": [
                    "bytes",
                    "Dict"
                ]
            }
        },
        "serve_in_thread": {
            "name": "serve_in_thread",
            "location": 293,
            "return": [
                "Generator[(_T0, Any, None)]"
            ],
            "arguments": {
                "server": [
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "server": {
            "name": "server",
            "location": 306,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "https_server": {
            "name": "https_server",
            "location": 313,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "cert_pem_file": [],
                "cert_private_key_file": []
            }
        },
        "TestServer.url": {
            "name": "url",
            "location": 248,
            "return": [
                "URL",
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServer.install_signal_handlers": {
            "name": "install_signal_handlers",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "httpx-master/tests/test_api.py": {
        "test_get": {
            "name": "test_get",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        },
        "test_post": {
            "name": "test_post",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [
                    "List[str]"
                ]
            }
        },
        "test_post_byte_iterator": {
            "name": "test_post_byte_iterator",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "server": []
            }
        },
        "test_post_byte_stream": {
            "name": "test_post_byte_stream",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "server": []
            }
        },
        "test_options": {
            "name": "test_options",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [
                    "Callable"
                ]
            }
        },
        "test_head": {
            "name": "test_head",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [
                    "int",
                    "str"
                ]
            }
        },
        "test_put": {
            "name": "test_put",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [
                    "int",
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "test_patch": {
            "name": "test_patch",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [
                    "str"
                ]
            }
        },
        "test_delete": {
            "name": "test_delete",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [
                    "int",
                    "str"
                ]
            }
        },
        "test_stream": {
            "name": "test_stream",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [
                    "str"
                ]
            }
        },
        "test_get_invalid_url": {
            "name": "test_get_invalid_url",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_post_byte_iterator.data": {
            "name": "data",
            "location": 21,
            "return": [
                "typing.Generator[bytes]"
            ],
            "arguments": {}
        },
        "test_post_byte_stream.Data.__iter__": {
            "name": "__iter__",
            "location": 33,
            "return": [
                "typing.Generator[bytes]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "httpx-master/tests/test_asgi.py": {},
    "httpx-master/tests/test_auth.py": {
        "test_basic_auth": {
            "name": "test_basic_auth",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_digest_auth_with_200": {
            "name": "test_digest_auth_with_200",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_digest_auth_with_401": {
            "name": "test_digest_auth_with_401",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "httpx-master/tests/test_config.py": {
        "test_load_ssl_config": {
            "name": "test_load_ssl_config",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_ssl_config_verify_non_existing_path": {
            "name": "test_load_ssl_config_verify_non_existing_path",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_ssl_config_verify_existing_file": {
            "name": "test_load_ssl_config_verify_existing_file",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_ssl_config_verify_env_file": {
            "name": "test_load_ssl_config_verify_env_file",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "https_server": [
                    "Callable"
                ],
                "ca_cert_pem_file": [
                    "Dict",
                    "path.Path"
                ],
                "config": [
                    "dict",
                    "path.Path"
                ],
                "cert_authority": [
                    "pathlib.Path"
                ]
            }
        },
        "test_load_ssl_config_verify_directory": {
            "name": "test_load_ssl_config_verify_directory",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_ssl_config_cert_and_key": {
            "name": "test_load_ssl_config_cert_and_key",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "cert_pem_file": [
                    "str",
                    "pathlib.Path",
                    "path.Path"
                ],
                "cert_private_key_file": [
                    "str",
                    "pathlib.Path",
                    "path.Path"
                ]
            }
        },
        "test_load_ssl_config_cert_and_encrypted_key": {
            "name": "test_load_ssl_config_cert_and_encrypted_key",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "cert_pem_file": [
                    "str",
                    "bool",
                    "pathlib.Path"
                ],
                "cert_encrypted_private_key_file": [
                    "str",
                    "bool",
                    "pathlib.Path"
                ],
                "password": [
                    "str",
                    "bool",
                    "pathlib.Path"
                ]
            }
        },
        "test_load_ssl_config_cert_and_key_invalid_password": {
            "name": "test_load_ssl_config_cert_and_key_invalid_password",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "cert_pem_file": [
                    "str",
                    "pathlib.Path",
                    "IO",
                    "IO[bytes]"
                ],
                "cert_encrypted_private_key_file": [
                    "str",
                    "pathlib.Path",
                    "IO",
                    "IO[bytes]"
                ]
            }
        },
        "test_load_ssl_config_cert_without_key_raises": {
            "name": "test_load_ssl_config_cert_without_key_raises",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "cert_pem_file": [
                    "pathlib.Path"
                ]
            }
        },
        "test_load_ssl_config_no_verify": {
            "name": "test_load_ssl_config_no_verify",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_ssl_context": {
            "name": "test_load_ssl_context",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_ssl_context_with_get_request": {
            "name": "test_create_ssl_context_with_get_request",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [
                    "Dict[str,Any]",
                    "Dict",
                    "str",
                    "Optional[Dict]",
                    "None"
                ],
                "cert_pem_file": [
                    "str",
                    "bool",
                    "bytes",
                    "path.Path"
                ]
            }
        },
        "test_limits_repr": {
            "name": "test_limits_repr",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_limits_eq": {
            "name": "test_limits_eq",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_timeout_eq": {
            "name": "test_timeout_eq",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_timeout_all_parameters_set": {
            "name": "test_timeout_all_parameters_set",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_timeout_from_nothing": {
            "name": "test_timeout_from_nothing",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_timeout_from_none": {
            "name": "test_timeout_from_none",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_timeout_from_one_none_value": {
            "name": "test_timeout_from_one_none_value",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_timeout_from_one_value": {
            "name": "test_timeout_from_one_value",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_timeout_from_one_value_and_default": {
            "name": "test_timeout_from_one_value_and_default",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_timeout_missing_default": {
            "name": "test_timeout_missing_default",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_timeout_from_tuple": {
            "name": "test_timeout_from_tuple",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_timeout_from_config_instance": {
            "name": "test_timeout_from_config_instance",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_timeout_repr": {
            "name": "test_timeout_repr",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ssl_config_support_for_keylog_file": {
            "name": "test_ssl_config_support_for_keylog_file",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "bytes",
                    "path.Path",
                    "pathlib.Path"
                ],
                "monkeypatch": [
                    "pathlib.Path"
                ]
            }
        },
        "test_proxy_from_url": {
            "name": "test_proxy_from_url",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_proxy_with_auth_from_url": {
            "name": "test_proxy_with_auth_from_url",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_proxy_scheme": {
            "name": "test_invalid_proxy_scheme",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "httpx-master/tests/test_content.py": {
        "test_invalid_argument": {
            "name": "test_invalid_argument",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_response_invalid_argument": {
            "name": "test_response_invalid_argument",
            "location": 448,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iterator_content.hello_world": {
            "name": "hello_world",
            "location": 90,
            "return": [
                "typing.Generator[bytes]"
            ],
            "arguments": {}
        },
        "test_response_iterator_content.hello_world": {
            "name": "hello_world",
            "location": 412,
            "return": [
                "typing.Generator[bytes]"
            ],
            "arguments": {}
        },
        "test_async_bytesio_content.AsyncBytesIO.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "dict",
                    "bytes",
                    "List[Callable]"
                ]
            }
        }
    },
    "httpx-master/tests/test_decoders.py": {
        "test_deflate": {
            "name": "test_deflate",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_zlib": {
            "name": "test_zlib",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_gzip": {
            "name": "test_gzip",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_brotli": {
            "name": "test_brotli",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_multi": {
            "name": "test_multi",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_multi_with_identity": {
            "name": "test_multi_with_identity",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_empty_content": {
            "name": "test_empty_content",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "header_value": []
            }
        },
        "test_decoders_empty_cases": {
            "name": "test_decoders_empty_cases",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "decoder": []
            }
        },
        "test_decoding_errors": {
            "name": "test_decoding_errors",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "header_value": []
            }
        },
        "test_text_decoder_empty_cases": {
            "name": "test_text_decoder_empty_cases",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_line_decoder_nl": {
            "name": "test_line_decoder_nl",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_line_decoder_cr": {
            "name": "test_line_decoder_cr",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_line_decoder_crnl": {
            "name": "test_line_decoder_crnl",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_byte_chunker": {
            "name": "test_byte_chunker",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_text_chunker": {
            "name": "test_text_chunker",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_content_encoding_header": {
            "name": "test_invalid_content_encoding_header",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_text_decoder_with_autodetect.autodetect": {
            "name": "autodetect",
            "location": 194,
            "return": [],
            "arguments": {
                "content": []
            }
        }
    },
    "httpx-master/tests/test_exceptions.py": {
        "test_httpcore_all_exceptions_mapped": {
            "name": "test_httpcore_all_exceptions_mapped",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_httpcore_exception_mapping": {
            "name": "test_httpcore_exception_mapping",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "server": []
            }
        },
        "test_httpx_exceptions_exposed": {
            "name": "test_httpx_exceptions_exposed",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_request_attribute": {
            "name": "test_request_attribute",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_httpcore_exception_mapping.connect_failed": {
            "name": "connect_failed",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_httpcore_exception_mapping.TimeoutStream.__iter__": {
            "name": "__iter__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_httpcore_exception_mapping.TimeoutStream.close": {
            "name": "close",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "httpx-master/tests/test_exported_members.py": {
        "test_all_imports_are_exported": {
            "name": "test_all_imports_are_exported",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "httpx-master/tests/test_main.py": {
        "splitlines": {
            "name": "splitlines",
            "location": 8,
            "return": [
                "list"
            ],
            "arguments": {
                "output": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "remove_date_header": {
            "name": "remove_date_header",
            "location": 12,
            "return": [
                "list"
            ],
            "arguments": {
                "lines": [
                    "str",
                    "List[str]",
                    "Sequence[str]",
                    "int"
                ]
            }
        },
        "test_help": {
            "name": "test_help",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get": {
            "name": "test_get",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "server": []
            }
        },
        "test_json": {
            "name": "test_json",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_binary": {
            "name": "test_binary",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_redirects": {
            "name": "test_redirects",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_follow_redirects": {
            "name": "test_follow_redirects",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_post": {
            "name": "test_post",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "server": []
            }
        },
        "test_verbose": {
            "name": "test_verbose",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [
                    "str"
                ]
            }
        },
        "test_auth": {
            "name": "test_auth",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [
                    "str"
                ]
            }
        },
        "test_download": {
            "name": "test_download",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [
                    "str"
                ]
            }
        },
        "test_errors": {
            "name": "test_errors",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "httpx-master/tests/test_multipart.py": {
        "echo_request_content": {
            "name": "echo_request_content",
            "location": 15,
            "return": [
                "httpx._models.Response"
            ],
            "arguments": {
                "request": [
                    "Dict[str,Any]",
                    "httpx.Request"
                ]
            }
        },
        "test_multipart": {
            "name": "test_multipart",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Pattern"
                ],
                "output": [
                    "str",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ]
            }
        },
        "test_multipart_invalid_key": {
            "name": "test_multipart_invalid_key",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_multipart_invalid_value": {
            "name": "test_multipart_invalid_value",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_multipart_file_tuple": {
            "name": "test_multipart_file_tuple",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_multipart_file_tuple_headers": {
            "name": "test_multipart_file_tuple_headers",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "content_type": [
                    "io.BytesIO"
                ]
            }
        },
        "test_multipart_headers_include_content_type": {
            "name": "test_multipart_headers_include_content_type",
            "location": 124,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_multipart_encode": {
            "name": "test_multipart_encode",
            "location": 150,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_multipart_encode_unicode_file_contents": {
            "name": "test_multipart_encode_unicode_file_contents",
            "location": 194,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_multipart_encode_files_allows_filenames_as_none": {
            "name": "test_multipart_encode_files_allows_filenames_as_none",
            "location": 217,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_multipart_encode_files_guesses_correct_content_type": {
            "name": "test_multipart_encode_files_guesses_correct_content_type",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "file_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "expected_content_type": [
                    "str"
                ]
            }
        },
        "test_multipart_encode_files_allows_bytes_content": {
            "name": "test_multipart_encode_files_allows_bytes_content",
            "location": 268,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_multipart_encode_files_raises_exception_with_str_content": {
            "name": "test_multipart_encode_files_raises_exception_with_str_content",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_multipart_encode_files_raises_exception_with_StringIO_content": {
            "name": "test_multipart_encode_files_raises_exception_with_StringIO_content",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_multipart_encode_non_seekable_filelike": {
            "name": "test_multipart_encode_non_seekable_filelike",
            "location": 306,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_multipart_rewinds_files": {
            "name": "test_multipart_rewinds_files",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_multipart_encode_non_seekable_filelike.data": {
            "name": "data",
            "location": 319,
            "return": [
                "Iterator[bytes]",
                "Generator[bytes]"
            ],
            "arguments": {}
        },
        "TestHeaderParamHTML5Formatting.test_unicode": {
            "name": "test_unicode",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHeaderParamHTML5Formatting.test_ascii": {
            "name": "test_ascii",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHeaderParamHTML5Formatting.test_unicode_escape": {
            "name": "test_unicode_escape",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHeaderParamHTML5Formatting.test_unicode_with_control_character": {
            "name": "test_unicode_with_control_character",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_multipart_encode_non_seekable_filelike.IteratorIO.__init__": {
            "name": "__init__",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iterator": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "test_multipart_encode_non_seekable_filelike.IteratorIO.read": {
            "name": "read",
            "location": 316,
            "return": [
                "bytes",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "httpx-master/tests/test_status_codes.py": {
        "test_status_code_as_int": {
            "name": "test_status_code_as_int",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_status_code_value_lookup": {
            "name": "test_status_code_value_lookup",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_status_code_phrase_lookup": {
            "name": "test_status_code_phrase_lookup",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_lowercase_status_code": {
            "name": "test_lowercase_status_code",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_reason_phrase_for_status_code": {
            "name": "test_reason_phrase_for_status_code",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_reason_phrase_for_unknown_status_code": {
            "name": "test_reason_phrase_for_unknown_status_code",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "httpx-master/tests/test_timeouts.py": {},
    "httpx-master/tests/test_utils.py": {
        "test_encoded": {
            "name": "test_encoded",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "encoding": [
                    "str",
                    "tests.e2e.Helper"
                ]
            }
        },
        "test_bad_utf_like_encoding": {
            "name": "test_bad_utf_like_encoding",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_guess_by_bom": {
            "name": "test_guess_by_bom",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "encoding": [
                    "str"
                ],
                "expected": [
                    "str",
                    "bytes",
                    "bool",
                    "List[utils.CWLObjectType]",
                    "List[C]"
                ]
            }
        },
        "test_bad_get_netrc_login": {
            "name": "test_bad_get_netrc_login",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_netrc_login": {
            "name": "test_get_netrc_login",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_netrc_unknown": {
            "name": "test_get_netrc_unknown",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_header_links": {
            "name": "test_parse_header_links",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int"
                ],
                "expected": [
                    "str",
                    "int"
                ]
            }
        },
        "test_get_ssl_cert_file": {
            "name": "test_get_ssl_cert_file",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_environment_proxies": {
            "name": "test_get_environment_proxies",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "environment": [],
                "proxies": [
                    "bool",
                    "str",
                    "Dict[str,float]"
                ]
            }
        },
        "test_obfuscate_sensitive_headers": {
            "name": "test_obfuscate_sensitive_headers",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "headers": [
                    "str",
                    "bytes"
                ],
                "output": [
                    "str",
                    "Dict[str,Any]",
                    "int"
                ]
            }
        },
        "test_same_origin": {
            "name": "test_same_origin",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_not_same_origin": {
            "name": "test_not_same_origin",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_https_redirect": {
            "name": "test_is_https_redirect",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_not_https_redirect": {
            "name": "test_is_not_https_redirect",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_not_https_redirect_if_not_default_ports": {
            "name": "test_is_not_https_redirect_if_not_default_ports",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_matches": {
            "name": "test_url_matches",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "pattern": [
                    "str",
                    "int"
                ],
                "url": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "test_pattern_priority": {
            "name": "test_pattern_priority",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "httpx-master/tests/test_wsgi.py": {
        "application_factory": {
            "name": "application_factory",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "output": [
                    "bytes",
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "echo_body": {
            "name": "echo_body",
            "location": 27,
            "return": [
                "List[Union[list,str,list[dict],list[dict[str,Any]],dict,set]]",
                "bytes",
                "int",
                "str",
                "Dict[str,str]"
            ],
            "arguments": {
                "environ": [
                    "List[str]",
                    "Dict",
                    "Dict[str,Optional[Any]]",
                    "Dict[str,Any]",
                    "Dict[str,str]"
                ],
                "start_response": []
            }
        },
        "echo_body_with_response_stream": {
            "name": "echo_body_with_response_stream",
            "location": 40,
            "return": [
                "bytes",
                "Tuple[str, 'LabelAligner']",
                "dict"
            ],
            "arguments": {
                "environ": [
                    "OrderedDict",
                    "Mapping[Any, Any]"
                ],
                "start_response": []
            }
        },
        "raise_exc": {
            "name": "raise_exc",
            "location": 57,
            "return": [
                "List[bytes]",
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "environ": [],
                "start_response": [],
                "exc": [
                    "ValueError"
                ]
            }
        },
        "log_to_wsgi_log_buffer": {
            "name": "log_to_wsgi_log_buffer",
            "location": 74,
            "return": [
                "str",
                "List[Callable]",
                "int"
            ],
            "arguments": {
                "environ": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "start_response": [
                    "bytes",
                    "Dict"
                ]
            }
        },
        "test_wsgi": {
            "name": "test_wsgi",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_wsgi_upload": {
            "name": "test_wsgi_upload",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_wsgi_upload_with_response_stream": {
            "name": "test_wsgi_upload_with_response_stream",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_wsgi_exc": {
            "name": "test_wsgi_exc",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_wsgi_http_error": {
            "name": "test_wsgi_http_error",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_wsgi_generator": {
            "name": "test_wsgi_generator",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_wsgi_generator_empty": {
            "name": "test_wsgi_generator_empty",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_logging": {
            "name": "test_logging",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_wsgi_server_port": {
            "name": "test_wsgi_server_port",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "expected_server_port": [
                    "bool",
                    "str",
                    "List",
                    "bytes"
                ]
            }
        },
        "application_factory.application": {
            "name": "application",
            "location": 12,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "environ": [],
                "start_response": []
            }
        },
        "echo_body_with_response_stream.output_generator": {
            "name": "output_generator",
            "location": 47,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "f": [
                    "str",
                    "Callable[[T], bool]",
                    "Iterable[bytes]",
                    "\"Job\"",
                    "io.IOBase",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_wsgi_server_port.app": {
            "name": "app",
            "location": 154,
            "return": [
                "dict"
            ],
            "arguments": {
                "environ": [
                    "str",
                    "dict"
                ],
                "start_response": [
                    "str"
                ]
            }
        }
    },
    "httpx-master/tests/utils.py": {
        "override_log_level": {
            "name": "override_log_level",
            "location": 9,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "log_level": [
                    "str",
                    "bool",
                    "None",
                    "Dict",
                    "Optional[str]",
                    "Union[str,DatabaseURL]"
                ]
            }
        }
    },
    "httpx-master/tests/__init__.py": {},
    "httpx-master/tests/client/test_async_client.py": {
        "hello_world": {
            "name": "hello_world",
            "location": 253,
            "return": [
                "httpx._models.Response"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "unmounted": {
            "name": "unmounted",
            "location": 289,
            "return": [
                "httpx._models.Response"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "mounted": {
            "name": "mounted",
            "location": 294,
            "return": [
                "httpx._models.Response"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "test_cannot_stream_sync_request.hello_world": {
            "name": "hello_world",
            "location": 103,
            "return": [
                "httpx._models.Response"
            ],
            "arguments": {}
        },
        "test_cancellation_during_stream.response_with_cancel_during_stream": {
            "name": "response_with_cancel_during_stream",
            "location": 344,
            "return": [
                "Response",
                "Dict",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "test_context_managed_transport.Transport.__init__": {
            "name": "__init__",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_context_managed_transport_and_mount.Transport.__init__": {
            "name": "__init__",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        }
    },
    "httpx-master/tests/client/test_auth.py": {
        "test_auth_hidden_url": {
            "name": "test_auth_hidden_url",
            "location": 294,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_digest_auth_returns_no_auth_if_alternate_auth_scheme": {
            "name": "test_digest_auth_returns_no_auth_if_alternate_auth_scheme",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sync_digest_auth_raises_protocol_error_on_malformed_header": {
            "name": "test_sync_digest_auth_raises_protocol_error_on_malformed_header",
            "location": 557,
            "return": [
                "None"
            ],
            "arguments": {
                "auth_header": []
            }
        },
        "test_sync_auth_history": {
            "name": "test_sync_auth_history",
            "location": 596,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sync_auth_reads_response_body": {
            "name": "test_sync_auth_reads_response_body",
            "location": 660,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sync_auth": {
            "name": "test_sync_auth",
            "location": 694,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "App.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "auth_header": [
                    "Text",
                    "str",
                    "Dict",
                    "Optional[str]",
                    "List[str]"
                ],
                "status_code": [
                    "int",
                    "bool",
                    "Union[str,Iterable[str]]",
                    "Optional[int]"
                ]
            }
        },
        "App.__call__": {
            "name": "__call__",
            "location": 25,
            "return": [
                "httpx._models.Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "jj.requests.Request"
                ]
            }
        },
        "DigestApp.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithm": [
                    "Text",
                    "str",
                    "int",
                    "float",
                    "bytes",
                    "allennlp.common.util.JsonDict"
                ],
                "send_response_after_attempt": [
                    "flask.Response",
                    "int"
                ],
                "qop": [
                    "Text",
                    "str",
                    "int",
                    "float",
                    "bytes",
                    "allennlp.common.util.JsonDict"
                ],
                "regenerate_nonce": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "bytes",
                    "allennlp.common.util.JsonDict"
                ]
            }
        },
        "DigestApp.__call__": {
            "name": "__call__",
            "location": 45,
            "return": [
                "httpx._models.Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "fastapi.Request",
                    "httpx.Request"
                ]
            }
        },
        "DigestApp.challenge_send": {
            "name": "challenge_send",
            "location": 52,
            "return": [
                "httpx._models.Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "aiohttp.web.Request"
                ]
            }
        },
        "RepeatAuth.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repeat": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "RepeatAuth.auth_flow": {
            "name": "auth_flow",
            "location": 93,
            "return": [
                "Generator[(_T0, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "Dict[str,Any]",
                    "aiohttp.web.Request",
                    "flask.Request"
                ]
            }
        },
        "ResponseBodyAuth.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "ResponseBodyAuth.auth_flow": {
            "name": "auth_flow",
            "location": 118,
            "return": [
                "Generator[(_T0, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "aiohttp.web.Request",
                    "httpx.Request"
                ]
            }
        },
        "SyncOrAsyncAuth.__init__": {
            "name": "__init__",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyncOrAsyncAuth.sync_auth_flow": {
            "name": "sync_auth_flow",
            "location": 136,
            "return": [
                "Generator[(_T0, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "httpx.Request",
                    "asyncio.StreamWriter",
                    "aiohttp.web.Request"
                ]
            }
        },
        "test_custom_auth.auth": {
            "name": "auth",
            "location": 215,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "request": [
                    "httpx.Request",
                    "aiohttp.web.Request",
                    "asyncio.StreamWriter"
                ]
            }
        }
    },
    "httpx-master/tests/client/test_client.py": {
        "autodetect": {
            "name": "autodetect",
            "location": 10,
            "return": [
                "Any"
            ],
            "arguments": {
                "content": []
            }
        },
        "test_get": {
            "name": "test_get",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "server": []
            }
        },
        "test_get_invalid_url": {
            "name": "test_get_invalid_url",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [],
                "url": []
            }
        },
        "test_build_request": {
            "name": "test_build_request",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "server": []
            }
        },
        "test_build_post_request": {
            "name": "test_build_post_request",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "server": []
            }
        },
        "test_post": {
            "name": "test_post",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "server": []
            }
        },
        "test_post_json": {
            "name": "test_post_json",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "server": []
            }
        },
        "test_stream_response": {
            "name": "test_stream_response",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "server": []
            }
        },
        "test_stream_iterator": {
            "name": "test_stream_iterator",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "server": []
            }
        },
        "test_raw_iterator": {
            "name": "test_raw_iterator",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "server": []
            }
        },
        "test_cannot_stream_async_request": {
            "name": "test_cannot_stream_async_request",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "server": []
            }
        },
        "test_raise_for_status": {
            "name": "test_raise_for_status",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "server": []
            }
        },
        "test_options": {
            "name": "test_options",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "server": []
            }
        },
        "test_head": {
            "name": "test_head",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "server": []
            }
        },
        "test_put": {
            "name": "test_put",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "server": []
            }
        },
        "test_patch": {
            "name": "test_patch",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "server": []
            }
        },
        "test_delete": {
            "name": "test_delete",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "server": []
            }
        },
        "test_base_url": {
            "name": "test_base_url",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "server": []
            }
        },
        "test_merge_absolute_url": {
            "name": "test_merge_absolute_url",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_merge_relative_url": {
            "name": "test_merge_relative_url",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_merge_relative_url_with_path": {
            "name": "test_merge_relative_url_with_path",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_merge_relative_url_with_dotted_path": {
            "name": "test_merge_relative_url_with_dotted_path",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_merge_relative_url_with_path_including_colon": {
            "name": "test_merge_relative_url_with_path_including_colon",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_merge_relative_url_with_encoded_slashes": {
            "name": "test_merge_relative_url_with_encoded_slashes",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_context_managed_transport": {
            "name": "test_context_managed_transport",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_context_managed_transport_and_mount": {
            "name": "test_context_managed_transport_and_mount",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "hello_world": {
            "name": "hello_world",
            "location": 299,
            "return": [
                "httpx._models.Response"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_client_closed_state_using_implicit_open": {
            "name": "test_client_closed_state_using_implicit_open",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_client_closed_state_using_with_block": {
            "name": "test_client_closed_state_using_with_block",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "echo_raw_headers": {
            "name": "echo_raw_headers",
            "location": 334,
            "return": [
                "httpx._models.Response"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_raw_client_header": {
            "name": "test_raw_client_header",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "unmounted": {
            "name": "unmounted",
            "location": 365,
            "return": [
                "httpx._models.Response"
            ],
            "arguments": {
                "request": []
            }
        },
        "mounted": {
            "name": "mounted",
            "location": 370,
            "return": [
                "httpx._models.Response"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_mounted_transport": {
            "name": "test_mounted_transport",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_all_mounted_transport": {
            "name": "test_all_mounted_transport",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_server_extensions": {
            "name": "test_server_extensions",
            "location": 400,
            "return": [
                "None"
            ],
            "arguments": {
                "server": []
            }
        },
        "test_client_decode_text_using_autodetect": {
            "name": "test_client_decode_text_using_autodetect",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_client_decode_text_using_explicit_encoding": {
            "name": "test_client_decode_text_using_explicit_encoding",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_client_decode_text_using_autodetect.cp1252_but_no_content_type": {
            "name": "cp1252_but_no_content_type",
            "location": 422,
            "return": [
                "Response"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_client_decode_text_using_explicit_encoding.cp1252_but_no_content_type": {
            "name": "cp1252_but_no_content_type",
            "location": 449,
            "return": [
                "Response"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_context_managed_transport.Transport.__init__": {
            "name": "__init__",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_context_managed_transport.Transport.close": {
            "name": "close",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_context_managed_transport.Transport.__enter__": {
            "name": "__enter__",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_context_managed_transport.Transport.__exit__": {
            "name": "__exit__",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_context_managed_transport_and_mount.Transport.__init__": {
            "name": "__init__",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "test_context_managed_transport_and_mount.Transport.close": {
            "name": "close",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_context_managed_transport_and_mount.Transport.__enter__": {
            "name": "__enter__",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_context_managed_transport_and_mount.Transport.__exit__": {
            "name": "__exit__",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "httpx-master/tests/client/test_cookies.py": {
        "get_and_set_cookies": {
            "name": "get_and_set_cookies",
            "location": 8,
            "return": [
                "httpx._models.Response"
            ],
            "arguments": {
                "request": [
                    "Dict[str,Any]",
                    "django.http.requesHttpRequest",
                    "django.http.HttpRequest"
                ]
            }
        },
        "test_set_cookie": {
            "name": "test_set_cookie",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_per_request_cookie_is_deprecated": {
            "name": "test_set_per_request_cookie_is_deprecated",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_cookie_with_cookiejar": {
            "name": "test_set_cookie_with_cookiejar",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_setting_client_cookies_to_cookiejar": {
            "name": "test_setting_client_cookies_to_cookiejar",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_cookie_with_cookies_model": {
            "name": "test_set_cookie_with_cookies_model",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_cookie": {
            "name": "test_get_cookie",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cookie_persistence": {
            "name": "test_cookie_persistence",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "httpx-master/tests/client/test_event_hooks.py": {
        "app": {
            "name": "app",
            "location": 6,
            "return": [
                "httpx._models.Response"
            ],
            "arguments": {
                "request": [
                    "Exception",
                    "httpx.Request",
                    "Dict",
                    "Optional[dict]",
                    "None"
                ]
            }
        },
        "test_event_hooks": {
            "name": "test_event_hooks",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_event_hooks_raising_exception": {
            "name": "test_event_hooks_raising_exception",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [
                    "str"
                ]
            }
        },
        "test_event_hooks_with_redirect": {
            "name": "test_event_hooks_with_redirect",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_event_hooks.on_request": {
            "name": "on_request",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_event_hooks.on_response": {
            "name": "on_response",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "response": []
            }
        },
        "test_event_hooks_raising_exception.raise_on_4xx_5xx": {
            "name": "raise_on_4xx_5xx",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "response": []
            }
        },
        "test_event_hooks_with_redirect.on_request": {
            "name": "on_request",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_event_hooks_with_redirect.on_response": {
            "name": "on_response",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "response": []
            }
        }
    },
    "httpx-master/tests/client/test_headers.py": {
        "echo_headers": {
            "name": "echo_headers",
            "location": 8,
            "return": [
                "httpx._models.Response"
            ],
            "arguments": {
                "request": [
                    "Union[dict,list]",
                    "Dict",
                    "List"
                ]
            }
        },
        "echo_repeated_headers_multi_items": {
            "name": "echo_repeated_headers_multi_items",
            "location": 13,
            "return": [
                "httpx._models.Response"
            ],
            "arguments": {
                "request": [
                    "Dict",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "None"
                ]
            }
        },
        "echo_repeated_headers_items": {
            "name": "echo_repeated_headers_items",
            "location": 18,
            "return": [
                "httpx._models.Response"
            ],
            "arguments": {
                "request": [
                    "Dict",
                    "Iterator"
                ]
            }
        },
        "test_client_header": {
            "name": "test_client_header",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_header_merge": {
            "name": "test_header_merge",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_header_merge_conflicting_headers": {
            "name": "test_header_merge_conflicting_headers",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_header_update": {
            "name": "test_header_update",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_header_repeated_items": {
            "name": "test_header_repeated_items",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_header_repeated_multi_items": {
            "name": "test_header_repeated_multi_items",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_default_header": {
            "name": "test_remove_default_header",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_header_does_not_exist": {
            "name": "test_header_does_not_exist",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_host_with_auth_and_port_in_url": {
            "name": "test_host_with_auth_and_port_in_url",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_host_with_non_default_port_in_url": {
            "name": "test_host_with_non_default_port_in_url",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_request_auto_headers": {
            "name": "test_request_auto_headers",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "httpx-master/tests/client/test_properties.py": {
        "test_client_base_url": {
            "name": "test_client_base_url",
            "location": 4,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_client_base_url_without_trailing_slash": {
            "name": "test_client_base_url_without_trailing_slash",
            "location": 11,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_client_base_url_with_trailing_slash": {
            "name": "test_client_base_url_with_trailing_slash",
            "location": 18,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_client_headers": {
            "name": "test_client_headers",
            "location": 25,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_client_cookies": {
            "name": "test_client_cookies",
            "location": 32,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_client_timeout": {
            "name": "test_client_timeout",
            "location": 41,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_client_event_hooks": {
            "name": "test_client_event_hooks",
            "location": 54,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_client_event_hooks.on_request": {
            "name": "on_request",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "dict"
                ]
            }
        }
    },
    "httpx-master/tests/client/test_proxies.py": {
        "url_to_origin": {
            "name": "url_to_origin",
            "location": 8,
            "return": [
                "URL",
                "str",
                "Dict",
                "Dict[str,Any]",
                "bool"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "test_proxies_parameter": {
            "name": "test_proxies_parameter",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "proxies": [
                    "str"
                ],
                "expected_proxies": [
                    "str",
                    "int",
                    "Collection"
                ]
            }
        },
        "test_socks_proxy": {
            "name": "test_socks_proxy",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_transport_for_request": {
            "name": "test_transport_for_request",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "IO[bytes]",
                    "IO"
                ],
                "proxies": [
                    "str",
                    "bool"
                ],
                "expected": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_sync_proxy_close": {
            "name": "test_sync_proxy_close",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unsupported_proxy_scheme": {
            "name": "test_unsupported_proxy_scheme",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_proxies_environ": {
            "name": "test_proxies_environ",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "List[str]",
                    "bool",
                    "Dict[str, Any]",
                    "dict"
                ],
                "client_class": [
                    "str",
                    "bool",
                    "Callable",
                    "Dict",
                    "Optional[str]",
                    "None"
                ],
                "url": [
                    "bool",
                    "str"
                ],
                "env": [
                    "Dict[str,Any]",
                    "Dict",
                    "Optional[Dict[str,Any]]",
                    "str",
                    "bool"
                ],
                "expected": [
                    "str",
                    "Optional[str]",
                    "Dict",
                    "None",
                    "Optional[Type[Exception]]",
                    "bool",
                    "Type",
                    "float",
                    "Optional[int]",
                    "Optional[float]"
                ]
            }
        },
        "test_for_deprecated_proxy_params": {
            "name": "test_for_deprecated_proxy_params",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "proxies": [],
                "is_valid": [
                    "bool",
                    "int"
                ]
            }
        }
    },
    "httpx-master/tests/client/test_queryparams.py": {
        "hello_world": {
            "name": "hello_world",
            "location": 4,
            "return": [
                "httpx._models.Response"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "test_client_queryparams": {
            "name": "test_client_queryparams",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_client_queryparams_string": {
            "name": "test_client_queryparams_string",
            "location": 14,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_client_queryparams_echo": {
            "name": "test_client_queryparams_echo",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "httpx-master/tests/client/test_redirects.py": {
        "redirects": {
            "name": "redirects",
            "location": 6,
            "return": [
                "httpx._models.Response"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_redirect_301": {
            "name": "test_redirect_301",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_redirect_302": {
            "name": "test_redirect_302",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_redirect_303": {
            "name": "test_redirect_303",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_next_request": {
            "name": "test_next_request",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_head_redirect": {
            "name": "test_head_redirect",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_relative_redirect": {
            "name": "test_relative_redirect",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_malformed_redirect": {
            "name": "test_malformed_redirect",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_redirect": {
            "name": "test_invalid_redirect",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_no_scheme_redirect": {
            "name": "test_no_scheme_redirect",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fragment_redirect": {
            "name": "test_fragment_redirect",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_multiple_redirects": {
            "name": "test_multiple_redirects",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sync_too_many_redirects": {
            "name": "test_sync_too_many_redirects",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_redirect_loop": {
            "name": "test_redirect_loop",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cross_domain_redirect_with_auth_header": {
            "name": "test_cross_domain_redirect_with_auth_header",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cross_domain_https_redirect_with_auth_header": {
            "name": "test_cross_domain_https_redirect_with_auth_header",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cross_domain_redirect_with_auth": {
            "name": "test_cross_domain_redirect_with_auth",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_same_domain_redirect": {
            "name": "test_same_domain_redirect",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_same_domain_https_redirect_with_auth_header": {
            "name": "test_same_domain_https_redirect_with_auth_header",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_body_redirect": {
            "name": "test_body_redirect",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_no_body_redirect": {
            "name": "test_no_body_redirect",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_stream_if_no_redirect": {
            "name": "test_can_stream_if_no_redirect",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cannot_redirect_streaming_body": {
            "name": "test_cannot_redirect_streaming_body",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cross_subdomain_redirect": {
            "name": "test_cross_subdomain_redirect",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "cookie_sessions": {
            "name": "cookie_sessions",
            "location": 368,
            "return": [
                "httpx._models.Response"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_redirect_cookie_behavior": {
            "name": "test_redirect_cookie_behavior",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_redirect_custom_scheme": {
            "name": "test_redirect_custom_scheme",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ConsumeBodyTransport.handle_request": {
            "name": "handle_request",
            "location": 344,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "test_cannot_redirect_streaming_body.streaming_body": {
            "name": "streaming_body",
            "location": 354,
            "return": [
                "typing.Generator[bytes]"
            ],
            "arguments": {}
        }
    },
    "httpx-master/tests/client/__init__.py": {},
    "httpx-master/tests/models/test_cookies.py": {
        "test_cookies": {
            "name": "test_cookies",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cookies_update": {
            "name": "test_cookies_update",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cookies_with_domain": {
            "name": "test_cookies_with_domain",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cookies_with_domain_and_path": {
            "name": "test_cookies_with_domain_and_path",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_multiple_set_cookie": {
            "name": "test_multiple_set_cookie",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cookies_can_be_a_list_of_tuples": {
            "name": "test_cookies_can_be_a_list_of_tuples",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cookies_repr": {
            "name": "test_cookies_repr",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "httpx-master/tests/models/test_headers.py": {
        "test_headers": {
            "name": "test_headers",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_header_mutations": {
            "name": "test_header_mutations",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_copy_headers_method": {
            "name": "test_copy_headers_method",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_copy_headers_init": {
            "name": "test_copy_headers_init",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_headers_insert_retains_ordering": {
            "name": "test_headers_insert_retains_ordering",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_headers_insert_appends_if_new": {
            "name": "test_headers_insert_appends_if_new",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_headers_insert_removes_all_existing": {
            "name": "test_headers_insert_removes_all_existing",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_headers_delete_removes_all_existing": {
            "name": "test_headers_delete_removes_all_existing",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_headers_dict_repr": {
            "name": "test_headers_dict_repr",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_headers_encoding_in_repr": {
            "name": "test_headers_encoding_in_repr",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_headers_list_repr": {
            "name": "test_headers_list_repr",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_headers_decode_ascii": {
            "name": "test_headers_decode_ascii",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_headers_decode_utf_8": {
            "name": "test_headers_decode_utf_8",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_headers_decode_iso_8859_1": {
            "name": "test_headers_decode_iso_8859_1",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_headers_decode_explicit_encoding": {
            "name": "test_headers_decode_explicit_encoding",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_multiple_headers": {
            "name": "test_multiple_headers",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sensitive_headers": {
            "name": "test_sensitive_headers",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "header": []
            }
        }
    },
    "httpx-master/tests/models/test_queryparams.py": {
        "test_queryparams": {
            "name": "test_queryparams",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [
                    "Dict",
                    "str"
                ]
            }
        },
        "test_queryparam_types": {
            "name": "test_queryparam_types",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_queryparam_update_is_hard_deprecated": {
            "name": "test_queryparam_update_is_hard_deprecated",
            "location": 79,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_queryparam_setter_is_hard_deprecated": {
            "name": "test_queryparam_setter_is_hard_deprecated",
            "location": 85,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_queryparam_set": {
            "name": "test_queryparam_set",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_queryparam_add": {
            "name": "test_queryparam_add",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_queryparam_remove": {
            "name": "test_queryparam_remove",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_queryparam_merge": {
            "name": "test_queryparam_merge",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_queryparams_are_hashable": {
            "name": "test_queryparams_are_hashable",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "httpx-master/tests/models/test_requests.py": {
        "test_request_repr": {
            "name": "test_request_repr",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_no_content": {
            "name": "test_no_content",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_content_length_header": {
            "name": "test_content_length_header",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iterable_content": {
            "name": "test_iterable_content",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_generator_with_transfer_encoding_header": {
            "name": "test_generator_with_transfer_encoding_header",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_generator_with_content_length_header": {
            "name": "test_generator_with_content_length_header",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_encoded_data": {
            "name": "test_url_encoded_data",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_json_encoded_data": {
            "name": "test_json_encoded_data",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_headers": {
            "name": "test_headers",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_read_and_stream_data": {
            "name": "test_read_and_stream_data",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cannot_access_streaming_content_without_read": {
            "name": "test_cannot_access_streaming_content_without_read",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_transfer_encoding_header": {
            "name": "test_transfer_encoding_header",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ignore_transfer_encoding_header_if_content_length_exists": {
            "name": "test_ignore_transfer_encoding_header_if_content_length_exists",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_override_host_header": {
            "name": "test_override_host_header",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_override_accept_encoding_header": {
            "name": "test_override_accept_encoding_header",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_override_content_length_header": {
            "name": "test_override_content_length_header",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url": {
            "name": "test_url",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_request_picklable": {
            "name": "test_request_picklable",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_request_generator_content_picklable": {
            "name": "test_request_generator_content_picklable",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_generator_with_transfer_encoding_header.content": {
            "name": "content",
            "location": 34,
            "return": [
                "typing.Generator[bytes]"
            ],
            "arguments": {}
        },
        "test_generator_with_content_length_header.content": {
            "name": "content",
            "location": 42,
            "return": [
                "typing.Generator[bytes]"
            ],
            "arguments": {}
        },
        "test_cannot_access_streaming_content_without_read.streaming_body": {
            "name": "streaming_body",
            "location": 103,
            "return": [
                "typing.Generator[typing.Text]"
            ],
            "arguments": {}
        },
        "test_ignore_transfer_encoding_header_if_content_length_exists.streaming_body": {
            "name": "streaming_body",
            "location": 128,
            "return": [
                "typing.Generator[typing.Text]"
            ],
            "arguments": {
                "data": []
            }
        },
        "test_request_generator_content_picklable.content": {
            "name": "content",
            "location": 215,
            "return": [
                "typing.Generator[bytes]"
            ],
            "arguments": {}
        },
        "test_iterable_content.Content.__iter__": {
            "name": "__iter__",
            "location": 26,
            "return": [
                "typing.Generator[bytes]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "httpx-master/tests/models/test_responses.py": {
        "streaming_body": {
            "name": "streaming_body",
            "location": 17,
            "return": [
                "Generator[(bytes, Any, None)]"
            ],
            "arguments": {}
        },
        "autodetect": {
            "name": "autodetect",
            "location": 27,
            "return": [
                "Any"
            ],
            "arguments": {
                "content": []
            }
        },
        "test_response": {
            "name": "test_response",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_response_content": {
            "name": "test_response_content",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_response_text": {
            "name": "test_response_text",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_response_html": {
            "name": "test_response_html",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_response_json": {
            "name": "test_response_json",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_raise_for_status": {
            "name": "test_raise_for_status",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_response_repr": {
            "name": "test_response_repr",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_response_content_type_encoding": {
            "name": "test_response_content_type_encoding",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_response_default_to_utf8_encoding": {
            "name": "test_response_default_to_utf8_encoding",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_response_fallback_to_utf8_encoding": {
            "name": "test_response_fallback_to_utf8_encoding",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_response_no_charset_with_ascii_content": {
            "name": "test_response_no_charset_with_ascii_content",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_response_no_charset_with_utf8_content": {
            "name": "test_response_no_charset_with_utf8_content",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_response_no_charset_with_iso_8859_1_content": {
            "name": "test_response_no_charset_with_iso_8859_1_content",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_response_no_charset_with_cp_1252_content": {
            "name": "test_response_no_charset_with_cp_1252_content",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_response_non_text_encoding": {
            "name": "test_response_non_text_encoding",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_response_set_explicit_encoding": {
            "name": "test_response_set_explicit_encoding",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_response_force_encoding": {
            "name": "test_response_force_encoding",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_read": {
            "name": "test_read",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_empty_read": {
            "name": "test_empty_read",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iter_raw": {
            "name": "test_iter_raw",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iter_raw_with_chunksize": {
            "name": "test_iter_raw_with_chunksize",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iter_raw_doesnt_return_empty_chunks": {
            "name": "test_iter_raw_doesnt_return_empty_chunks",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iter_raw_on_iterable": {
            "name": "test_iter_raw_on_iterable",
            "location": 411,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iter_raw_on_async": {
            "name": "test_iter_raw_on_async",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_close_on_async": {
            "name": "test_close_on_async",
            "location": 433,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iter_raw_increments_updates_counter": {
            "name": "test_iter_raw_increments_updates_counter",
            "location": 443,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iter_bytes": {
            "name": "test_iter_bytes",
            "location": 512,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iter_bytes_with_chunk_size": {
            "name": "test_iter_bytes_with_chunk_size",
            "location": 521,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iter_bytes_with_empty_response": {
            "name": "test_iter_bytes_with_empty_response",
            "location": 535,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iter_bytes_doesnt_return_empty_chunks": {
            "name": "test_iter_bytes_doesnt_return_empty_chunks",
            "location": 541,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iter_text": {
            "name": "test_iter_text",
            "location": 582,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iter_text_with_chunk_size": {
            "name": "test_iter_text_with_chunk_size",
            "location": 594,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iter_lines": {
            "name": "test_iter_lines",
            "location": 636,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sync_streaming_response": {
            "name": "test_sync_streaming_response",
            "location": 658,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cannot_read_after_stream_consumed": {
            "name": "test_cannot_read_after_stream_consumed",
            "location": 691,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cannot_read_after_response_closed": {
            "name": "test_cannot_read_after_response_closed",
            "location": 720,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unknown_status_code": {
            "name": "test_unknown_status_code",
            "location": 754,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_json_with_specified_encoding": {
            "name": "test_json_with_specified_encoding",
            "location": 763,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_json_with_options": {
            "name": "test_json_with_options",
            "location": 775,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_json_without_specified_charset": {
            "name": "test_json_without_specified_charset",
            "location": 800,
            "return": [
                "None"
            ],
            "arguments": {
                "encoding": []
            }
        },
        "test_json_with_specified_charset": {
            "name": "test_json_with_specified_charset",
            "location": 825,
            "return": [
                "None"
            ],
            "arguments": {
                "encoding": []
            }
        },
        "test_link_headers": {
            "name": "test_link_headers",
            "location": 853,
            "return": [
                "None"
            ],
            "arguments": {
                "headers": [],
                "expected": []
            }
        },
        "test_decode_error_with_request": {
            "name": "test_decode_error_with_request",
            "location": 863,
            "return": [
                "None"
            ],
            "arguments": {
                "header_value": []
            }
        },
        "test_value_error_without_request": {
            "name": "test_value_error_without_request",
            "location": 884,
            "return": [
                "None"
            ],
            "arguments": {
                "header_value": []
            }
        },
        "test_response_with_unset_request": {
            "name": "test_response_with_unset_request",
            "location": 892,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_request_after_init": {
            "name": "test_set_request_after_init",
            "location": 901,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cannot_access_unset_request": {
            "name": "test_cannot_access_unset_request",
            "location": 910,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_generator_with_transfer_encoding_header": {
            "name": "test_generator_with_transfer_encoding_header",
            "location": 917,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_generator_with_content_length_header": {
            "name": "test_generator_with_content_length_header",
            "location": 925,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_response_picklable": {
            "name": "test_response_picklable",
            "location": 934,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_response_decode_text_using_autodetect": {
            "name": "test_response_decode_text_using_autodetect",
            "location": 972,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_response_decode_text_using_explicit_encoding": {
            "name": "test_response_decode_text_using_explicit_encoding",
            "location": 994,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "StreamingBody.__iter__": {
            "name": "__iter__",
            "location": 12,
            "return": [
                "Generator[(bytes, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_iter_raw_doesnt_return_empty_chunks.streaming_body_with_empty_chunks": {
            "name": "streaming_body_with_empty_chunks",
            "location": 399,
            "return": [
                "typing.Generator[bytes]"
            ],
            "arguments": {}
        },
        "test_iter_bytes_doesnt_return_empty_chunks.streaming_body_with_empty_chunks": {
            "name": "streaming_body_with_empty_chunks",
            "location": 542,
            "return": [
                "typing.Generator[bytes]"
            ],
            "arguments": {}
        },
        "test_generator_with_transfer_encoding_header.content": {
            "name": "content",
            "location": 918,
            "return": [
                "typing.Generator[bytes]"
            ],
            "arguments": {}
        },
        "test_generator_with_content_length_header.content": {
            "name": "content",
            "location": 926,
            "return": [
                "typing.Generator[bytes]"
            ],
            "arguments": {}
        }
    },
    "httpx-master/tests/models/test_url.py": {
        "test_idna_url": {
            "name": "test_idna_url",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "given": [],
                "idna": [],
                "host": [],
                "raw_host": [],
                "scheme": [],
                "port": []
            }
        },
        "test_url": {
            "name": "test_url",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_eq_str": {
            "name": "test_url_eq_str",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_params": {
            "name": "test_url_params",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_join": {
            "name": "test_url_join",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_set_param_manipulation": {
            "name": "test_url_set_param_manipulation",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_add_param_manipulation": {
            "name": "test_url_add_param_manipulation",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_remove_param_manipulation": {
            "name": "test_url_remove_param_manipulation",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_merge_params_manipulation": {
            "name": "test_url_merge_params_manipulation",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_relative_url_join": {
            "name": "test_relative_url_join",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_join_rfc3986": {
            "name": "test_url_join_rfc3986",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_set": {
            "name": "test_url_set",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_copywith_authority_subcomponents": {
            "name": "test_url_copywith_authority_subcomponents",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_copywith_netloc": {
            "name": "test_url_copywith_netloc",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_copywith_userinfo_subcomponents": {
            "name": "test_url_copywith_userinfo_subcomponents",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_copywith_invalid_component": {
            "name": "test_url_copywith_invalid_component",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_copywith_urlencoded_path": {
            "name": "test_url_copywith_urlencoded_path",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_copywith_query": {
            "name": "test_url_copywith_query",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_copywith_raw_path": {
            "name": "test_url_copywith_raw_path",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_copywith_security": {
            "name": "test_url_copywith_security",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_invalid": {
            "name": "test_url_invalid",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_invalid_type": {
            "name": "test_url_invalid_type",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_with_empty_query": {
            "name": "test_url_with_empty_query",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_with_url_encoded_path": {
            "name": "test_url_with_url_encoded_path",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ipv6_url": {
            "name": "test_ipv6_url",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ipv6_url_copy_with_host": {
            "name": "test_ipv6_url_copy_with_host",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "url_str": [],
                "new_host": []
            }
        },
        "test_ipv6_url_from_raw_url": {
            "name": "test_ipv6_url_from_raw_url",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "host": []
            }
        }
    },
    "httpx-master/tests/models/__init__.py": {}
}
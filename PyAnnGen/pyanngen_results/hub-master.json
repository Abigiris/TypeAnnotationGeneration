{
    "hub-master/clients/python/test/test_accounts_api.py": {
        "TestAccountsApi.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountsApi.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountsApi.test_accounts_broker_list": {
            "name": "test_accounts_broker_list",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountsApi.test_accounts_create": {
            "name": "test_accounts_create",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountsApi.test_accounts_list": {
            "name": "test_accounts_list",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountsApi.test_accounts_partial_update": {
            "name": "test_accounts_partial_update",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountsApi.test_accounts_queues_list": {
            "name": "test_accounts_queues_list",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountsApi.test_accounts_queues_read": {
            "name": "test_accounts_queues_read",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountsApi.test_accounts_read": {
            "name": "test_accounts_read",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountsApi.test_accounts_teams_create": {
            "name": "test_accounts_teams_create",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountsApi.test_accounts_teams_delete": {
            "name": "test_accounts_teams_delete",
            "location": 87,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountsApi.test_accounts_teams_list": {
            "name": "test_accounts_teams_list",
            "location": 94,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountsApi.test_accounts_teams_members_create": {
            "name": "test_accounts_teams_members_create",
            "location": 101,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountsApi.test_accounts_teams_members_delete": {
            "name": "test_accounts_teams_members_delete",
            "location": 107,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountsApi.test_accounts_teams_partial_update": {
            "name": "test_accounts_teams_partial_update",
            "location": 113,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountsApi.test_accounts_teams_read": {
            "name": "test_accounts_teams_read",
            "location": 120,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountsApi.test_accounts_update_plan": {
            "name": "test_accounts_update_plan",
            "location": 127,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountsApi.test_accounts_users_create": {
            "name": "test_accounts_users_create",
            "location": 133,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountsApi.test_accounts_users_delete": {
            "name": "test_accounts_users_delete",
            "location": 140,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountsApi.test_accounts_users_list": {
            "name": "test_accounts_users_list",
            "location": 147,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountsApi.test_accounts_users_partial_update": {
            "name": "test_accounts_users_partial_update",
            "location": 154,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountsApi.test_accounts_users_read": {
            "name": "test_accounts_users_read",
            "location": 161,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountsApi.test_accounts_workers_heartbeats_list": {
            "name": "test_accounts_workers_heartbeats_list",
            "location": 168,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountsApi.test_accounts_workers_list": {
            "name": "test_accounts_workers_list",
            "location": 175,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountsApi.test_accounts_workers_read": {
            "name": "test_accounts_workers_read",
            "location": 182,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountsApi.test_accounts_zones_create": {
            "name": "test_accounts_zones_create",
            "location": 189,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountsApi.test_accounts_zones_delete": {
            "name": "test_accounts_zones_delete",
            "location": 196,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountsApi.test_accounts_zones_list": {
            "name": "test_accounts_zones_list",
            "location": 203,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountsApi.test_accounts_zones_read": {
            "name": "test_accounts_zones_read",
            "location": 210,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_account_create.py": {
        "TestAccountCreate.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountCreate.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountCreate.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "AccountCreate",
                "str",
                "bool",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestAccountCreate.testAccountCreate": {
            "name": "testAccountCreate",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_account_list.py": {
        "TestAccountList.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountList.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountList.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "AccountList",
                "int",
                "Optional[Any]",
                "bool",
                "Type[T]",
                "Union[type, Tuple[type, ...]]"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestAccountList.testAccountList": {
            "name": "testAccountList",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_account_retrieve.py": {
        "TestAccountRetrieve.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountRetrieve.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountRetrieve.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "AccountRetrieve",
                "int",
                "Optional[Any]",
                "bool",
                "Union[type, Tuple[type, ...]]",
                "Type[T]"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestAccountRetrieve.testAccountRetrieve": {
            "name": "testAccountRetrieve",
            "location": 86,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_account_team.py": {
        "TestAccountTeam.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountTeam.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountTeam.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "AccountTeam",
                "bool",
                "int",
                "Optional[Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestAccountTeam.testAccountTeam": {
            "name": "testAccountTeam",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_account_update.py": {
        "TestAccountUpdate.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountUpdate.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountUpdate.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "AccountUpdate",
                "bool",
                "Type",
                "int",
                "dict",
                "Union[type, Tuple[type, ...]]",
                "Type[T]"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestAccountUpdate.testAccountUpdate": {
            "name": "testAccountUpdate",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_account_user.py": {
        "TestAccountUser.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountUser.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountUser.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "AccountUser",
                "bool",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestAccountUser.testAccountUser": {
            "name": "testAccountUser",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_file.py": {
        "TestFile.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFile.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFile.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "File",
                "str",
                "List[str]",
                "zerver.models.Message"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestFile.testFile": {
            "name": "testFile",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_file_list.py": {
        "TestFileList.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileList.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileList.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "FileList",
                "List[Dict[str, str]]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestFileList.testFileList": {
            "name": "testFileList",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_inline_object.py": {
        "TestInlineObject.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineObject.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineObject.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "InlineObject",
                "int",
                "Callable",
                "str",
                "Tuple[type]"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestInlineObject.testInlineObject": {
            "name": "testInlineObject",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_inline_object1.py": {
        "TestInlineObject1.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineObject1.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineObject1.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "InlineObject1",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestInlineObject1.testInlineObject1": {
            "name": "testInlineObject1",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_inline_object2.py": {
        "TestInlineObject2.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineObject2.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineObject2.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "InlineObject2",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestInlineObject2.testInlineObject2": {
            "name": "testInlineObject2",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_inline_object3.py": {
        "TestInlineObject3.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineObject3.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineObject3.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "InlineObject3",
                "str",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestInlineObject3.testInlineObject3": {
            "name": "testInlineObject3",
            "location": 83,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_inline_object4.py": {
        "TestInlineObject4.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineObject4.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineObject4.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "InlineObject4",
                "str",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestInlineObject4.testInlineObject4": {
            "name": "testInlineObject4",
            "location": 83,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_inline_object5.py": {
        "TestInlineObject5.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineObject5.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineObject5.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "InlineObject5",
                "Type",
                "dict",
                "salon.models.Stylist",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestInlineObject5.testInlineObject5": {
            "name": "testInlineObject5",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_inline_response200.py": {
        "TestInlineResponse200.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineResponse200.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineResponse200.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "InlineResponse200",
                "str",
                "Dict[str, Any]",
                "List[str]",
                "Dict[str, dict]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestInlineResponse200.testInlineResponse200": {
            "name": "testInlineResponse200",
            "location": 86,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_inline_response2001.py": {
        "TestInlineResponse2001.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineResponse2001.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineResponse2001.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "InlineResponse2001",
                "str",
                "Dict[str, Any]",
                "List[str]",
                "Dict[str, dict]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestInlineResponse2001.testInlineResponse2001": {
            "name": "testInlineResponse2001",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_inline_response20010.py": {
        "TestInlineResponse20010.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineResponse20010.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineResponse20010.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "InlineResponse20010",
                "str",
                "Dict[str, Any]",
                "List[str]",
                "Dict[str, dict]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestInlineResponse20010.testInlineResponse20010": {
            "name": "testInlineResponse20010",
            "location": 92,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_inline_response20011.py": {
        "TestInlineResponse20011.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineResponse20011.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineResponse20011.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "InlineResponse20011",
                "str",
                "Dict[str, Any]",
                "List[str]",
                "Dict[str, dict]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestInlineResponse20011.testInlineResponse20011": {
            "name": "testInlineResponse20011",
            "location": 124,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_inline_response20011_results.py": {
        "TestInlineResponse20011Results.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineResponse20011Results.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineResponse20011Results.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "int",
                "InlineResponse20011Results"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestInlineResponse20011Results.testInlineResponse20011Results": {
            "name": "testInlineResponse20011Results",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_inline_response20012.py": {
        "TestInlineResponse20012.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineResponse20012.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineResponse20012.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "InlineResponse20012",
                "str",
                "Dict[str, Any]",
                "List[str]",
                "Dict[str, dict]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestInlineResponse20012.testInlineResponse20012": {
            "name": "testInlineResponse20012",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_inline_response20013.py": {
        "TestInlineResponse20013.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineResponse20013.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineResponse20013.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "InlineResponse20013",
                "str",
                "Dict[str, Any]",
                "List[str]",
                "Dict[str, dict]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestInlineResponse20013.testInlineResponse20013": {
            "name": "testInlineResponse20013",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_inline_response20014.py": {
        "TestInlineResponse20014.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineResponse20014.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineResponse20014.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "InlineResponse20014",
                "str",
                "Dict[str, Any]",
                "List[str]",
                "Dict[str, dict]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestInlineResponse20014.testInlineResponse20014": {
            "name": "testInlineResponse20014",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_inline_response20015.py": {
        "TestInlineResponse20015.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineResponse20015.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineResponse20015.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "InlineResponse20015",
                "str",
                "Dict[str, Any]",
                "List[str]",
                "Dict[str, dict]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestInlineResponse20015.testInlineResponse20015": {
            "name": "testInlineResponse20015",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_inline_response2002.py": {
        "TestInlineResponse2002.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineResponse2002.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineResponse2002.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "InlineResponse2002",
                "str",
                "Dict[str, Any]",
                "List[str]",
                "Dict[str, dict]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestInlineResponse2002.testInlineResponse2002": {
            "name": "testInlineResponse2002",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_inline_response2003.py": {
        "TestInlineResponse2003.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineResponse2003.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineResponse2003.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "InlineResponse2003",
                "str",
                "Dict[str, Any]",
                "List[str]",
                "Dict[str, dict]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestInlineResponse2003.testInlineResponse2003": {
            "name": "testInlineResponse2003",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_inline_response2004.py": {
        "TestInlineResponse2004.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineResponse2004.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineResponse2004.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "InlineResponse2004",
                "str",
                "Dict[str, Any]",
                "List[str]",
                "Dict[str, dict]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestInlineResponse2004.testInlineResponse2004": {
            "name": "testInlineResponse2004",
            "location": 88,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_inline_response2005.py": {
        "TestInlineResponse2005.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineResponse2005.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineResponse2005.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "InlineResponse2005",
                "str",
                "Dict[str, Any]",
                "List[str]",
                "Dict[str, dict]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestInlineResponse2005.testInlineResponse2005": {
            "name": "testInlineResponse2005",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_inline_response2006.py": {
        "TestInlineResponse2006.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineResponse2006.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineResponse2006.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "InlineResponse2006",
                "str",
                "Dict[str, Any]",
                "List[str]",
                "Dict[str, dict]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestInlineResponse2006.testInlineResponse2006": {
            "name": "testInlineResponse2006",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_inline_response2007.py": {
        "TestInlineResponse2007.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineResponse2007.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineResponse2007.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "InlineResponse2007",
                "str",
                "Dict[str, Any]",
                "List[str]",
                "Dict[str, dict]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestInlineResponse2007.testInlineResponse2007": {
            "name": "testInlineResponse2007",
            "location": 82,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_inline_response2008.py": {
        "TestInlineResponse2008.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineResponse2008.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineResponse2008.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "InlineResponse2008",
                "str",
                "Dict[str, Any]",
                "List[str]",
                "Dict[str, dict]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestInlineResponse2008.testInlineResponse2008": {
            "name": "testInlineResponse2008",
            "location": 122,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_inline_response2009.py": {
        "TestInlineResponse2009.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineResponse2009.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineResponse2009.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "InlineResponse2009",
                "str",
                "Dict[str, Any]",
                "List[str]",
                "Dict[str, dict]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestInlineResponse2009.testInlineResponse2009": {
            "name": "testInlineResponse2009",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_inline_response201.py": {
        "TestInlineResponse201.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineResponse201.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInlineResponse201.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "InlineResponse201",
                "int",
                "zerver.models.UserProfile",
                "zerver.models.Realm",
                "bool"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestInlineResponse201.testInlineResponse201": {
            "name": "testInlineResponse201",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_invite.py": {
        "TestInvite.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInvite.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInvite.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "Invite",
                "bool",
                "str",
                "Union[str, Dict]"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestInvite.testInvite": {
            "name": "testInvite",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_invites_api.py": {
        "TestInvitesApi.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInvitesApi.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInvitesApi.test_invites_create": {
            "name": "test_invites_create",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInvitesApi.test_invites_delete": {
            "name": "test_invites_delete",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInvitesApi.test_invites_list": {
            "name": "test_invites_list",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_job.py": {
        "TestJob.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJob.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJob.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "Job",
                "bool",
                "dict",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestJob.testJob": {
            "name": "testJob",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_jobs_api.py": {
        "TestJobsApi.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJobsApi.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJobsApi.test_jobs_partial_update": {
            "name": "test_jobs_partial_update",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJobsApi.test_jobs_update": {
            "name": "test_jobs_update",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_me.py": {
        "TestMe.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMe.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMe.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "Me",
                "Type",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestMe.testMe": {
            "name": "testMe",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_project.py": {
        "TestProject.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProject.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProject.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "bool",
                "Project"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestProject.testProject": {
            "name": "testProject",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_projects_api.py": {
        "TestProjectsApi.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectsApi.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectsApi.test_projects_agents_create": {
            "name": "test_projects_agents_create",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectsApi.test_projects_agents_delete": {
            "name": "test_projects_agents_delete",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectsApi.test_projects_agents_list": {
            "name": "test_projects_agents_list",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectsApi.test_projects_agents_partial_update": {
            "name": "test_projects_agents_partial_update",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectsApi.test_projects_agents_read": {
            "name": "test_projects_agents_read",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectsApi.test_projects_convert": {
            "name": "test_projects_convert",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectsApi.test_projects_create": {
            "name": "test_projects_create",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectsApi.test_projects_delete": {
            "name": "test_projects_delete",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectsApi.test_projects_files_delete": {
            "name": "test_projects_files_delete",
            "location": 87,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectsApi.test_projects_files_list": {
            "name": "test_projects_files_list",
            "location": 94,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectsApi.test_projects_files_read": {
            "name": "test_projects_files_read",
            "location": 101,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectsApi.test_projects_history": {
            "name": "test_projects_history",
            "location": 108,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectsApi.test_projects_jobs_cancel": {
            "name": "test_projects_jobs_cancel",
            "location": 115,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectsApi.test_projects_jobs_connect_create": {
            "name": "test_projects_jobs_connect_create",
            "location": 122,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectsApi.test_projects_jobs_connect_read": {
            "name": "test_projects_jobs_connect_read",
            "location": 129,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectsApi.test_projects_jobs_create": {
            "name": "test_projects_jobs_create",
            "location": 136,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectsApi.test_projects_jobs_execute": {
            "name": "test_projects_jobs_execute",
            "location": 143,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectsApi.test_projects_jobs_list": {
            "name": "test_projects_jobs_list",
            "location": 150,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectsApi.test_projects_jobs_partial_update": {
            "name": "test_projects_jobs_partial_update",
            "location": 157,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectsApi.test_projects_jobs_read": {
            "name": "test_projects_jobs_read",
            "location": 164,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectsApi.test_projects_list": {
            "name": "test_projects_list",
            "location": 171,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectsApi.test_projects_partial_update": {
            "name": "test_projects_partial_update",
            "location": 178,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectsApi.test_projects_pull": {
            "name": "test_projects_pull",
            "location": 185,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectsApi.test_projects_read": {
            "name": "test_projects_read",
            "location": 192,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectsApi.test_projects_snapshots_archive": {
            "name": "test_projects_snapshots_archive",
            "location": 199,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectsApi.test_projects_snapshots_create": {
            "name": "test_projects_snapshots_create",
            "location": 206,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectsApi.test_projects_snapshots_delete": {
            "name": "test_projects_snapshots_delete",
            "location": 213,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectsApi.test_projects_snapshots_files": {
            "name": "test_projects_snapshots_files",
            "location": 220,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectsApi.test_projects_snapshots_list": {
            "name": "test_projects_snapshots_list",
            "location": 227,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectsApi.test_projects_snapshots_read": {
            "name": "test_projects_snapshots_read",
            "location": 234,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectsApi.test_projects_snapshots_session": {
            "name": "test_projects_snapshots_session",
            "location": 241,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectsApi.test_projects_sources_create": {
            "name": "test_projects_sources_create",
            "location": 248,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectsApi.test_projects_sources_delete": {
            "name": "test_projects_sources_delete",
            "location": 255,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectsApi.test_projects_sources_list": {
            "name": "test_projects_sources_list",
            "location": 262,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectsApi.test_projects_sources_open": {
            "name": "test_projects_sources_open",
            "location": 269,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectsApi.test_projects_sources_partial_update": {
            "name": "test_projects_sources_partial_update",
            "location": 276,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectsApi.test_projects_sources_pull": {
            "name": "test_projects_sources_pull",
            "location": 283,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectsApi.test_projects_sources_read": {
            "name": "test_projects_sources_read",
            "location": 290,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_project_agent.py": {
        "TestProjectAgent.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectAgent.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectAgent.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "ProjectAgent",
                "str",
                "int",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestProjectAgent.testProjectAgent": {
            "name": "testProjectAgent",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_project_agent_update.py": {
        "TestProjectAgentUpdate.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectAgentUpdate.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectAgentUpdate.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "ProjectAgentUpdate",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestProjectAgentUpdate.testProjectAgentUpdate": {
            "name": "testProjectAgentUpdate",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_project_create.py": {
        "TestProjectCreate.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectCreate.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectCreate.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "ProjectCreate",
                "dict",
                "Type",
                "bool"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestProjectCreate.testProjectCreate": {
            "name": "testProjectCreate",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_project_list.py": {
        "TestProjectList.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectList.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectList.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "ProjectList",
                "str",
                "int",
                "Optional[T]",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestProjectList.testProjectList": {
            "name": "testProjectList",
            "location": 96,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_project_update.py": {
        "TestProjectUpdate.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectUpdate.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectUpdate.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "ProjectUpdate",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestProjectUpdate.testProjectUpdate": {
            "name": "testProjectUpdate",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_queue.py": {
        "TestQueue.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueue.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueue.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "Queue",
                "Type",
                "zam_repondeur.models.Lecture",
                "Callable[..., None]",
                "str"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestQueue.testQueue": {
            "name": "testQueue",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_snapshot.py": {
        "TestSnapshot.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSnapshot.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSnapshot.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "Snapshot",
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestSnapshot.testSnapshot": {
            "name": "testSnapshot",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_source.py": {
        "TestSource.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSource.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSource.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "Source",
                "videoarchiver.tvasahi.models.Episode",
                "Optional[str]",
                "Optional[Source]"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestSource.testSource": {
            "name": "testSource",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_status_api.py": {
        "TestStatusApi.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatusApi.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatusApi.test_status_read": {
            "name": "test_status_read",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_status_response.py": {
        "TestStatusResponse.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatusResponse.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatusResponse.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "StatusResponse",
                "int",
                "Dict[str, Any]",
                "List[str]",
                "asgard.models.user.User"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestStatusResponse.testStatusResponse": {
            "name": "testStatusResponse",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_token.py": {
        "TestToken.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToken.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToken.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "Token",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestToken.testToken": {
            "name": "testToken",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_tokens_api.py": {
        "TestTokensApi.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokensApi.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokensApi.test_tokens_create": {
            "name": "test_tokens_create",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokensApi.test_tokens_delete": {
            "name": "test_tokens_delete",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokensApi.test_tokens_list": {
            "name": "test_tokens_list",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokensApi.test_tokens_read": {
            "name": "test_tokens_read",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_user.py": {
        "TestUser.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUser.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUser.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "User",
                "str",
                "zerver.models.Realm",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestUser.testUser": {
            "name": "testUser",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_users_api.py": {
        "TestUsersApi.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUsersApi.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUsersApi.test_users_list": {
            "name": "test_users_list",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUsersApi.test_users_me": {
            "name": "test_users_me",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUsersApi.test_users_read": {
            "name": "test_users_read",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_worker.py": {
        "TestWorker.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWorker.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWorker.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "Worker",
                "bool",
                "Tuple[float, float]",
                "Optional[Set[str]]"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestWorker.testWorker": {
            "name": "testWorker",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_workers_api.py": {
        "TestWorkersApi.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWorkersApi.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWorkersApi.test_workers_heartbeat": {
            "name": "test_workers_heartbeat",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWorkersApi.test_workers_offline": {
            "name": "test_workers_offline",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWorkersApi.test_workers_online": {
            "name": "test_workers_online",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWorkersApi.test_workers_partial_update": {
            "name": "test_workers_partial_update",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_worker_heartbeat.py": {
        "TestWorkerHeartbeat.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWorkerHeartbeat.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWorkerHeartbeat.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "WorkerHeartbeat",
                "datetime.datetime",
                "float",
                "employees.models.Report",
                "Optional[datetime.timedelta]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestWorkerHeartbeat.testWorkerHeartbeat": {
            "name": "testWorkerHeartbeat",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/test_zone.py": {
        "TestZone.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestZone.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestZone.make_instance": {
            "name": "make_instance",
            "location": 31,
            "return": [
                "Zone",
                "str",
                "List[str]",
                "Union[type, Tuple[type, ...]]",
                "Optional[int]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "include_optional": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestZone.testZone": {
            "name": "testZone",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/clients/python/test/__init__.py": {},
    "hub-master/manager/manage.py": {},
    "hub-master/manager/accounts/admin.py": {
        "AccountAdmin.is_personal": {
            "name": "is_personal",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "int"
                ]
            }
        },
        "AccountAdmin.set_image_from_socialaccounts": {
            "name": "set_image_from_socialaccounts",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ],
                "queryset": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "AccountAdmin.downgrade_to_tier1": {
            "name": "downgrade_to_tier1",
            "location": 33,
            "return": [
                "dict",
                "HttpResponseRedirect"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "http.MITMRequest",
                    "models.Workspace"
                ],
                "queryset": [
                    "django.http.HttpRequest",
                    "http.MITMRequest"
                ]
            }
        }
    },
    "hub-master/manager/accounts/apps.py": {},
    "hub-master/manager/accounts/models.py": {
        "make_account_creator_an_owner": {
            "name": "make_account_creator_an_owner",
            "location": 430,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [],
                "instance": [],
                "created": []
            }
        },
        "create_personal_account_for_user": {
            "name": "create_personal_account_for_user",
            "location": 447,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [],
                "instance": [],
                "created": []
            }
        },
        "Account.__str__": {
            "name": "__str__",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Account.is_personal": {
            "name": "is_personal",
            "location": 179,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Account.is_organization": {
            "name": "is_organization",
            "location": 184,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Account.get_url": {
            "name": "get_url",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Account.get_meta": {
            "name": "get_meta",
            "location": 192,
            "return": [
                "Meta"
            ],
            "arguments": {
                "self": []
            }
        },
        "Account.save": {
            "name": "save",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Account.is_customer": {
            "name": "is_customer",
            "location": 237,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Account.get_customer": {
            "name": "get_customer",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Account.update_customer": {
            "name": "update_customer",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Account.get_customer_portal_session": {
            "name": "get_customer_portal_session",
            "location": 290,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Account.get_stencila_account": {
            "name": "get_stencila_account",
            "location": 324,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Account.get_temp_account": {
            "name": "get_temp_account",
            "location": 333,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Account.image_is_identicon": {
            "name": "image_is_identicon",
            "location": 348,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Account.set_image_from_name": {
            "name": "set_image_from_name",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "should_save": [
                    "bool"
                ]
            }
        },
        "Account.set_image_from_url": {
            "name": "set_image_from_url",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "Account.set_image_from_socialaccount": {
            "name": "set_image_from_socialaccount",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "socialaccount": []
            }
        },
        "Account.set_image_from_socialaccounts": {
            "name": "set_image_from_socialaccounts",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountTier.__str__": {
            "name": "__str__",
            "location": 589,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountTier.active_tiers": {
            "name": "active_tiers",
            "location": 593,
            "return": [],
            "arguments": {}
        },
        "AccountTier.free_tier": {
            "name": "free_tier",
            "location": 604,
            "return": [],
            "arguments": {}
        },
        "AccountTier.fields": {
            "name": "fields",
            "location": 611,
            "return": [],
            "arguments": {}
        },
        "AccountTier.title": {
            "name": "title",
            "location": 622,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AccountTier.price": {
            "name": "price",
            "location": 631,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountRole.get_description": {
            "name": "get_description",
            "location": 656,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "cls": [],
                "role": []
            }
        },
        "AccountTeam.save": {
            "name": "save",
            "location": 731,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/manager/accounts/paths.py": {
        "AccountPaths.has": {
            "name": "has",
            "location": 23,
            "return": [
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        }
    },
    "hub-master/manager/accounts/quotas.py": {
        "bytes_to_gigabytes": {
            "name": "bytes_to_gigabytes",
            "location": 68,
            "return": [
                "float",
                "str",
                "int",
                "Type[T]",
                "hashkernel.files.buffer.FileBytes"
            ],
            "arguments": {
                "value": [
                    "float",
                    "bytes",
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "AccountQuota.limit": {
            "name": "limit",
            "location": 29,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "models.characters.character_base.Character",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "AccountQuota.usage": {
            "name": "usage",
            "location": 46,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "Dict[str, bool]",
                "int"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "List[str]",
                    "str",
                    "int",
                    "Sized",
                    "Optional[str]"
                ]
            }
        },
        "AccountQuota.reached": {
            "name": "reached",
            "location": 56,
            "return": [
                "bool",
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "List[str]",
                    "str",
                    "int",
                    "Sized",
                    "Optional[str]"
                ]
            }
        },
        "AccountQuota.check": {
            "name": "check",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "List[str]",
                    "str",
                    "int",
                    "Sized",
                    "Optional[str]"
                ]
            }
        },
        "AccountQuotas.usage": {
            "name": "usage",
            "location": 182,
            "return": [
                "int",
                "dict",
                "Dict[str, Type[Any]]",
                "bool",
                "Dict[str, str]",
                "Dict[str, Set[str]]"
            ],
            "arguments": {
                "account": [
                    "accounts.models.Account",
                    "Exception",
                    "Type[T]",
                    "django.http.HttpRequest",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "hub-master/manager/accounts/tasks.py": {
        "set_image_from_url": {
            "name": "set_image_from_url",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "account_id": [
                    "int"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "set_image_from_socialaccount": {
            "name": "set_image_from_socialaccount",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "account_id": [
                    "int"
                ],
                "provider": [
                    "str",
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "set_image_from_socialaccounts": {
            "name": "set_image_from_socialaccounts",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "account_id": [
                    "int"
                ]
            }
        }
    },
    "hub-master/manager/accounts/webhooks.py": {
        "customer_updated": {
            "name": "customer_updated",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "tuple"
                ]
            }
        },
        "subscription_updated": {
            "name": "subscription_updated",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "str",
                    "Dict[int, str]",
                    "Dict[str, Dict[str, Any]]",
                    "models.User"
                ]
            }
        },
        "subscription_deleted": {
            "name": "subscription_deleted",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        }
    },
    "hub-master/manager/accounts/__init__.py": {},
    "hub-master/manager/accounts/api/serializers.py": {
        "get_user_field": {
            "name": "get_user_field",
            "location": 464,
            "return": [],
            "arguments": {
                "field_name": []
            }
        },
        "AccountUserCreateSerializer.validate_role": {
            "name": "validate_role",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "role": []
            }
        },
        "AccountUserCreateSerializer.validate": {
            "name": "validate",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "AccountUserCreateSerializer.create": {
            "name": "create",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "validated_data": []
            }
        },
        "AccountUserPatchSerializer.validate_role": {
            "name": "validate_role",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "role": []
            }
        },
        "AccountUserDestroySerializer.validate": {
            "name": "validate",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "AccountTeamSerializer.validate": {
            "name": "validate",
            "location": 162,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "AccountTeamDestroySerializer.validate_name": {
            "name": "validate_name",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "AccountSerializer.validate_name": {
            "name": "validate_name",
            "location": 304,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "AccountSerializer.validate_extra_head": {
            "name": "validate_extra_head",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "AccountSerializer.validate_extra_top": {
            "name": "validate_extra_top",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "AccountSerializer.validate_extra_bottom": {
            "name": "validate_extra_bottom",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "AccountCreateSerializer.validate": {
            "name": "validate",
            "location": 373,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "AccountListSerializer.get_image": {
            "name": "get_image",
            "location": 413,
            "return": [],
            "arguments": {
                "self": [],
                "account": []
            }
        },
        "AccountRetrieveSerializer.to_representation": {
            "name": "to_representation",
            "location": 439,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "get_user_field.getter": {
            "name": "getter",
            "location": 467,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "context": []
            }
        },
        "AccountUpdateSerializer.save": {
            "name": "save",
            "location": 507,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/manager/accounts/api/serializers_account_image.py": {
        "AccountImageSerializer.create": {
            "name": "create",
            "location": 19,
            "return": [
                "Dict[str, Any]",
                "str",
                "bool",
                "Dict[str, str]",
                "bytes"
            ],
            "arguments": {
                "request": [
                    "rest_framework.requesRequest",
                    "int"
                ],
                "account": [
                    "rest_framework.requesRequest",
                    "int"
                ]
            }
        }
    },
    "hub-master/manager/accounts/api/urls.py": {},
    "hub-master/manager/accounts/api/views.py": {
        "get_account": {
            "name": "get_account",
            "location": 41,
            "return": [],
            "arguments": {
                "identifier": [],
                "user": [],
                "roles": []
            }
        },
        "AccountsViewSet.get_permissions": {
            "name": "get_permissions",
            "location": 74,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountsViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AccountsViewSet.get_object": {
            "name": "get_object",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AccountsViewSet.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AccountsViewSet.get_success_url": {
            "name": "get_success_url",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serializer": []
            }
        },
        "AccountsViewSet.list": {
            "name": "list",
            "location": 245,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "AccountsViewSet.create": {
            "name": "create",
            "location": 263,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "AccountsViewSet.retrieve": {
            "name": "retrieve",
            "location": 272,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "AccountsViewSet.partial_update": {
            "name": "partial_update",
            "location": 280,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "AccountsUsersViewSet.get_account": {
            "name": "get_account",
            "location": 310,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AccountsUsersViewSet.get_account_role": {
            "name": "get_account_role",
            "location": 337,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountsUsersViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 345,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "None"
                ]
            }
        },
        "AccountsUsersViewSet.get_object": {
            "name": "get_object",
            "location": 359,
            "return": [],
            "arguments": {
                "self": [],
                "account": [
                    "None"
                ]
            }
        },
        "AccountsUsersViewSet.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 375,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AccountsUsersViewSet.get_serializer_context": {
            "name": "get_serializer_context",
            "location": 388,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountsUsersViewSet.get_response_context": {
            "name": "get_response_context",
            "location": 404,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AccountsTeamsViewSet.get_permissions": {
            "name": "get_permissions",
            "location": 431,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountsTeamsViewSet.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 439,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AccountsTeamsViewSet.get_account": {
            "name": "get_account",
            "location": 470,
            "return": [],
            "arguments": {
                "self": [],
                "filters": [
                    "dict"
                ]
            }
        },
        "AccountsTeamsViewSet.get_account_role": {
            "name": "get_account_role",
            "location": 480,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountsTeamsViewSet.get_account_role_team": {
            "name": "get_account_role_team",
            "location": 485,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountsTeamsViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 490,
            "return": [],
            "arguments": {
                "self": [],
                "account": [
                    "None"
                ]
            }
        },
        "AccountsTeamsViewSet.get_object": {
            "name": "get_object",
            "location": 504,
            "return": [],
            "arguments": {
                "self": [],
                "account": [
                    "None"
                ]
            }
        },
        "AccountsTeamsViewSet.list": {
            "name": "list",
            "location": 531,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "AccountsTeamsViewSet.create": {
            "name": "create",
            "location": 539,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "AccountsTeamsViewSet.retrieve": {
            "name": "retrieve",
            "location": 571,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "AccountsTeamsViewSet.partial_update": {
            "name": "partial_update",
            "location": 579,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "AccountsTeamsViewSet.destroy": {
            "name": "destroy",
            "location": 612,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "AccountsTeamsMembersViewSet.get_team": {
            "name": "get_team",
            "location": 648,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AccountsTeamsMembersViewSet.get_role": {
            "name": "get_role",
            "location": 668,
            "return": [],
            "arguments": {
                "self": [],
                "team": []
            }
        },
        "AccountsTeamsMembersViewSet.get_response": {
            "name": "get_response",
            "location": 673,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "team": []
            }
        },
        "AccountsTeamsMembersViewSet.create": {
            "name": "create",
            "location": 686,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "AccountsTeamsMembersViewSet.destroy": {
            "name": "destroy",
            "location": 697,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "hub-master/manager/accounts/migrations/0001_initial.py": {},
    "hub-master/manager/accounts/migrations/0002_models.py": {
        "initial_models": {
            "name": "initial_models",
            "location": 4,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "apps": [
                    "int"
                ]
            }
        }
    },
    "hub-master/manager/accounts/migrations/0003_auto_20200720_2208.py": {},
    "hub-master/manager/accounts/migrations/0004_auto_20200721_0252.py": {},
    "hub-master/manager/accounts/migrations/0005_accounttier_file_downloads_month.py": {},
    "hub-master/manager/accounts/migrations/0006_auto_20200827_2212.py": {},
    "hub-master/manager/accounts/migrations/0007_accounttier_dois_created_month.py": {},
    "hub-master/manager/accounts/migrations/0008_auto_20201202_0349.py": {},
    "hub-master/manager/accounts/migrations/0009_auto_20210131_2250.py": {},
    "hub-master/manager/accounts/migrations/0010_auto_20210203_2054.py": {},
    "hub-master/manager/accounts/migrations/0011_auto_20210210_2340.py": {},
    "hub-master/manager/accounts/migrations/0012_auto_20210329_0606.py": {},
    "hub-master/manager/accounts/migrations/__init__.py": {},
    "hub-master/manager/accounts/ui/forms.py": {},
    "hub-master/manager/accounts/ui/urls.py": {},
    "hub-master/manager/accounts/ui/views/accounts.py": {
        "redirect": {
            "name": "redirect",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "list_orgs": {
            "name": "list_orgs",
            "location": 27,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "list_users": {
            "name": "list_users",
            "location": 38,
            "return": [
                "dict",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "create": {
            "name": "create",
            "location": 50,
            "return": [
                "Dict[str, Any]",
                "bool",
                "dict"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "retrieve": {
            "name": "retrieve",
            "location": 57,
            "return": [
                "str",
                "Dict[str, str]",
                "int",
                "bool",
                "Optional[str]",
                "List[str]",
                "Mapping[str, Any]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request": []
            }
        },
        "profile": {
            "name": "profile",
            "location": 86,
            "return": [
                "dict",
                "List[str]",
                "Dict[str, Any]",
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "http.MITMRequest"
                ]
            }
        },
        "profile_image": {
            "name": "profile_image",
            "location": 105,
            "return": [
                "viewer.models.Archive",
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "publishing": {
            "name": "publishing",
            "location": 133,
            "return": [
                "dict",
                "List[str]",
                "Dict[str, Any]",
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "plan": {
            "name": "plan",
            "location": 146,
            "return": [
                "dict",
                "List[str]",
                "Dict[str, Any]",
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "billing": {
            "name": "billing",
            "location": 174,
            "return": [
                "dict",
                "bytes",
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "http.MITMRequest",
                    "app.models.dto.RenewRequest"
                ]
            }
        }
    },
    "hub-master/manager/accounts/ui/views/content.py": {
        "content": {
            "name": "content",
            "location": 21,
            "return": [],
            "arguments": {
                "request": [],
                "project_name": [
                    "None"
                ],
                "version": [
                    "None"
                ],
                "key": [
                    "None"
                ],
                "file_path": [
                    "None"
                ]
            }
        },
        "working_index_html": {
            "name": "working_index_html",
            "location": 222,
            "return": [],
            "arguments": {
                "html": [],
                "request": [],
                "account": [],
                "project": []
            }
        },
        "snapshot_index_html": {
            "name": "snapshot_index_html",
            "location": 243,
            "return": [],
            "arguments": {
                "html": [],
                "request": [],
                "account": [],
                "project": [],
                "snapshot": []
            }
        },
        "index_html": {
            "name": "index_html",
            "location": 272,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "account": [],
                "project": [],
                "html": [],
                "source_url": [],
                "session_provider_url": []
            }
        },
        "index_html_links": {
            "name": "index_html_links",
            "location": 374,
            "return": [],
            "arguments": {
                "html": []
            }
        },
        "primary_domain_url": {
            "name": "primary_domain_url",
            "location": 387,
            "return": [],
            "arguments": {
                "request": [],
                "name": [],
                "kwargs": []
            }
        },
        "content.render_404": {
            "name": "render_404",
            "location": 68,
            "return": [],
            "arguments": {
                "template": []
            }
        },
        "content.invalid_account": {
            "name": "invalid_account",
            "location": 80,
            "return": [],
            "arguments": {}
        },
        "content.unavailable_project": {
            "name": "unavailable_project",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "content.no_snapshots": {
            "name": "no_snapshots",
            "location": 86,
            "return": [],
            "arguments": {}
        },
        "content.invalid_snapshot": {
            "name": "invalid_snapshot",
            "location": 89,
            "return": [],
            "arguments": {}
        },
        "content.invalid_file": {
            "name": "invalid_file",
            "location": 92,
            "return": [],
            "arguments": {}
        }
    },
    "hub-master/manager/accounts/ui/views/content_tests.py": {
        "test_index_html_links": {
            "name": "test_index_html_links",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "hub-master/manager/accounts/ui/views/teams.py": {
        "redirect": {
            "name": "redirect",
            "location": 9,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "list": {
            "name": "list",
            "location": 26,
            "return": [
                "Dict[str, Any]",
                "str",
                "dict",
                "bool",
                "Iterable"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "create": {
            "name": "create",
            "location": 39,
            "return": [
                "Dict[str, Any]",
                "bool",
                "Dict[str, str]",
                "int",
                "List[str]",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "retrieve": {
            "name": "retrieve",
            "location": 52,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "Dict[str, str]",
                "List[str]",
                "bool",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "http.MITMRequest"
                ]
            }
        },
        "update": {
            "name": "update",
            "location": 64,
            "return": [
                "Dict[str, Any]",
                "bool",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "hub-master/manager/accounts/ui/views/users.py": {
        "update": {
            "name": "update",
            "location": 9,
            "return": [
                "django.http.HttpResponse",
                "bool",
                "Dict[str, str]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "hub-master/manager/dois/admin.py": {
        "ProjectAdmin.register": {
            "name": "register",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ],
                "queryset": [
                    "str"
                ]
            }
        }
    },
    "hub-master/manager/dois/apps.py": {},
    "hub-master/manager/dois/models.py": {
        "receive_registration_email": {
            "name": "receive_registration_email",
            "location": 194,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sender": [
                    "List[str]",
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "List[cmk.utils.type_defs.ParsedSectionName]"
                ],
                "email": [
                    "str",
                    "dict",
                    "Dict[str, type]",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "Doi.save": {
            "name": "save",
            "location": 112,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Doi.get_progress": {
            "name": "get_progress",
            "location": 123,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Doi.register": {
            "name": "register",
            "location": 143,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "None",
                    "str",
                    "Dict[str, object]"
                ]
            }
        },
        "Doi.register_callback": {
            "name": "register_callback",
            "location": 167,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Doi.register_callback.get_date": {
            "name": "get_date",
            "location": 174,
            "return": [
                "None",
                "Optional[str]",
                "zerver.models.Realm",
                "Optional[datetime.datetime]",
                "bool",
                "Optional[Any]",
                "Optional[bool]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "zerver.models.Realm"
                ]
            }
        }
    },
    "hub-master/manager/dois/models_tests.py": {
        "test_success": {
            "name": "test_success",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "db": [
                    "bool"
                ]
            }
        },
        "test_failure": {
            "name": "test_failure",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "db": [
                    "bool"
                ],
                "caplog": [
                    "str",
                    "Callable",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "hub-master/manager/dois/urls.py": {
        "doi_redirect": {
            "name": "doi_redirect",
            "location": 7,
            "return": [
                "str",
                "Optional[Dict]",
                "Optional[str]",
                "Optional",
                "models.Dashboard"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ],
                "doi": [
                    "int",
                    "Dict[str, Any]",
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "hub-master/manager/dois/__init__.py": {},
    "hub-master/manager/dois/api/serializers.py": {
        "DoiSerializer.validate": {
            "name": "validate",
            "location": 28,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "Callable[[bytes], bytes]",
                    "Dict[str, Any]",
                    "List[utils.models.Base]",
                    "List[str]",
                    "dict",
                    "int"
                ]
            }
        },
        "DoiSerializer.create": {
            "name": "create",
            "location": 61,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "validated_data": [
                    "dict",
                    "Dict[str, float]",
                    "bytes",
                    "Dict[str, Any]",
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "hub-master/manager/dois/api/urls.py": {},
    "hub-master/manager/dois/api/views.py": {
        "DoisViewSet.get_permissions": {
            "name": "get_permissions",
            "location": 37,
            "return": [
                "list",
                "str",
                "Dict[str, type]",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DoisViewSet.get_throttles": {
            "name": "get_throttles",
            "location": 46,
            "return": [
                "list[DoiCreateThrottle]",
                "bool",
                "float",
                "models.Country.Country"
            ],
            "arguments": {
                "self": []
            }
        },
        "DoisViewSet.list": {
            "name": "list",
            "location": 59,
            "return": [
                "str",
                "bool",
                "flask.Response",
                "Dict[int, Optional[int]]",
                "models.User"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict",
                    "requests.Request"
                ]
            }
        },
        "DoisViewSet.create": {
            "name": "create",
            "location": 67,
            "return": [
                "Dict[str, Any]",
                "asgard.clients.chronos.models.job.ChronosJob",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "requests.Request",
                    "dict",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "DoisViewSet.retrieve": {
            "name": "retrieve",
            "location": 77,
            "return": [
                "str",
                "core_lib.core.models.Event",
                "dict",
                "Optional[core.models.User]",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict",
                    "list",
                    "rest_framework.requesRequest"
                ]
            }
        }
    },
    "hub-master/manager/dois/api/views_tests.py": {
        "DoisViewsTest.test_create": {
            "name": "test_create",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DoisViewsTest.test_list": {
            "name": "test_list",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DoisViewsTest.test_retrieve": {
            "name": "test_retrieve",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/manager/dois/api/__init__.py": {},
    "hub-master/manager/dois/migrations/0001_initial.py": {},
    "hub-master/manager/dois/migrations/__init__.py": {},
    "hub-master/manager/jobs/admin.py": {
        "JobCreatorUsernameFilter.queryset": {
            "name": "queryset",
            "location": 25,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "AsyncGenerator"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ],
                "queryset": [
                    "django.db.models.query.QuerySet",
                    "str"
                ]
            }
        },
        "JobAdmin.cancel": {
            "name": "cancel",
            "location": 76,
            "return": [
                "HttpResponseRedirect",
                "str",
                "dict",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ],
                "queryset": [
                    "django.http.HttpRequest",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "hub-master/manager/jobs/apps.py": {},
    "hub-master/manager/jobs/jobs.py": {
        "dispatch_job": {
            "name": "dispatch_job",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "job": [
                    "jobs.models.Job",
                    "float",
                    "str",
                    "Hashable"
                ]
            }
        },
        "update_job": {
            "name": "update_job",
            "location": 145,
            "return": [
                "float",
                "zam_repondeur.models.Amendement",
                "str",
                "datetime.timedelta",
                "int",
                "bool"
            ],
            "arguments": {
                "job": [
                    "Dict[str, Any]",
                    "dict",
                    "Type['Declared']"
                ],
                "data": [
                    "dict",
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "List[str]",
                    "List[Dict]"
                ],
                "force": [
                    "bool",
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "List[str]",
                    "List[Dict]"
                ]
            }
        },
        "cancel_job": {
            "name": "cancel_job",
            "location": 268,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "job": [
                    "jobs.models.Job",
                    "dict",
                    "Dict[str, str]",
                    "List[str]",
                    "Optional[Union[Any, Any]]",
                    "Union[Mapping[starfish.core.types.Coordinates, Any], Mapping[str, Any]]"
                ]
            }
        },
        "update_job.async_result": {
            "name": "async_result",
            "location": 208,
            "return": [
                "AsyncResult",
                "Callable",
                "IO[str]",
                "Iterable[int]",
                "int"
            ],
            "arguments": {}
        }
    },
    "hub-master/manager/jobs/jobs_tests.py": {
        "test_dispatch_parallel": {
            "name": "test_dispatch_parallel",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_dispatch_series": {
            "name": "test_dispatch_series",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "hub-master/manager/jobs/models.py": {
        "generate_job_id": {
            "name": "generate_job_id",
            "location": 566,
            "return": [],
            "arguments": {}
        },
        "generate_job_key": {
            "name": "generate_job_key",
            "location": 579,
            "return": [],
            "arguments": {}
        },
        "Zone.__str__": {
            "name": "__str__",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.__str__": {
            "name": "__str__",
            "location": 123,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.get_or_create": {
            "name": "get_or_create",
            "location": 127,
            "return": [],
            "arguments": {
                "cls": [],
                "account_name": [],
                "queue_name": []
            }
        },
        "Worker.get_or_create": {
            "name": "get_or_create",
            "location": 249,
            "return": [],
            "arguments": {
                "cls": [],
                "event": []
            }
        },
        "Worker.active": {
            "name": "active",
            "location": 300,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobMethod.is_compound": {
            "name": "is_compound",
            "location": 380,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "method": []
            }
        },
        "JobStatus.categories": {
            "name": "categories",
            "location": 426,
            "return": [
                "dict[typing.Text, list]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "JobStatus.category": {
            "name": "category",
            "location": 449,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "cls": [],
                "status": []
            }
        },
        "JobStatus.has_ended": {
            "name": "has_ended",
            "location": 476,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "status": []
            }
        },
        "JobStatus.rank": {
            "name": "rank",
            "location": 490,
            "return": [
                "int"
            ],
            "arguments": {
                "cls": [],
                "status": []
            }
        },
        "JobStatus.highest": {
            "name": "highest",
            "location": 515,
            "return": [],
            "arguments": {
                "cls": [],
                "statuses": []
            }
        },
        "JobStatus.icon": {
            "name": "icon",
            "location": 525,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "cls": [],
                "status": []
            }
        },
        "JobStatus.colour": {
            "name": "colour",
            "location": 546,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "cls": [],
                "status": []
            }
        },
        "Job.status_category": {
            "name": "status_category",
            "location": 786,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.status_message": {
            "name": "status_message",
            "location": 793,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.summary_string": {
            "name": "summary_string",
            "location": 833,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Job.position": {
            "name": "position",
            "location": 855,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Job.runtime_seconds": {
            "name": "runtime_seconds",
            "location": 872,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.runtime_formatted": {
            "name": "runtime_formatted",
            "location": 886,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.icon": {
            "name": "icon",
            "location": 909,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Job.colour": {
            "name": "colour",
            "location": 914,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.status_label": {
            "name": "status_label",
            "location": 919,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.has_ended": {
            "name": "has_ended",
            "location": 931,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Job.result_prettified": {
            "name": "result_prettified",
            "location": 935,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.get_children": {
            "name": "get_children",
            "location": 939,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Job.dispatch": {
            "name": "dispatch",
            "location": 946,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Job.update": {
            "name": "update",
            "location": 952,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Job.cancel": {
            "name": "cancel",
            "location": 958,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Job.create_callback": {
            "name": "create_callback",
            "location": 967,
            "return": [],
            "arguments": {
                "model": [],
                "method": []
            }
        },
        "Job.run_callback": {
            "name": "run_callback",
            "location": 979,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.add_user": {
            "name": "add_user",
            "location": 990,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Pipeline.save": {
            "name": "save",
            "location": 1050,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/manager/jobs/models_tests.py": {
        "test_queue_get_or_create": {
            "name": "test_queue_get_or_create",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "hub-master/manager/jobs/__init__.py": {},
    "hub-master/manager/jobs/api/helpers.py": {
        "redirect_to_job": {
            "name": "redirect_to_job",
            "location": 8,
            "return": [
                "Response",
                "str",
                "django.http.HttpResponse",
                "Tuple[int, str]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "job": [
                    "Mapping",
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "bool"
                ],
                "accepts_html": [
                    "bool",
                    "str",
                    "Dict[str, int]"
                ]
            }
        }
    },
    "hub-master/manager/jobs/api/serializers.py": {
        "JobListSerializer.get_urls": {
            "name": "get_urls",
            "location": 44,
            "return": [
                "dict",
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "str"
                ]
            }
        },
        "JobListSerializer.get_url": {
            "name": "get_url",
            "location": 85,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "str",
                    "Sequence[int]"
                ]
            }
        },
        "JobRetrieveSerializer.get_params": {
            "name": "get_params",
            "location": 116,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "dict",
                    "jumeaux.models.Res2DictAddOnPayload"
                ]
            }
        },
        "JobCreateSerializer.create": {
            "name": "create",
            "location": 173,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "validated_data": [
                    "dict",
                    "Dict[str, float]",
                    "bytes",
                    "vimiv.api.modes.Mode",
                    "Dict[str, Any]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "ZoneCreateSerializer.validate": {
            "name": "validate",
            "location": 230,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "Union[Dict, None]",
                    "bytes"
                ]
            }
        }
    },
    "hub-master/manager/jobs/api/urls.py": {},
    "hub-master/manager/jobs/api/views.py": {
        "AccountsBrokerView.get": {
            "name": "get",
            "location": 56,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "AccountsZonesViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "roles": [
                    "None"
                ]
            }
        },
        "AccountsZonesViewSet.get_object": {
            "name": "get_object",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AccountsZonesViewSet.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AccountsQueuesViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AccountsQueuesViewSet.get_object": {
            "name": "get_object",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AccountsWorkersViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AccountsWorkersViewSet.get_object": {
            "name": "get_object",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AccountsWorkersHeartbeatsViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JobsViewSet.partial_update": {
            "name": "partial_update",
            "location": 270,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "pk": []
            }
        },
        "WorkersViewSet.online": {
            "name": "online",
            "location": 301,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "WorkersViewSet.partial_update": {
            "name": "partial_update",
            "location": 316,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "hostname": []
            }
        },
        "WorkersViewSet.heartbeat": {
            "name": "heartbeat",
            "location": 358,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "WorkersViewSet.offline": {
            "name": "offline",
            "location": 385,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ProjectsJobsViewSet.get_permissions": {
            "name": "get_permissions",
            "location": 441,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsJobsViewSet.get_throttles": {
            "name": "get_throttles",
            "location": 449,
            "return": [
                "list[typing.Union[ProjectsJobsGetAnonThrottle,ProjectsJobsGetUserThrottle]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsJobsViewSet.get_project": {
            "name": "get_project",
            "location": 461,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProjectsJobsViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 476,
            "return": [],
            "arguments": {
                "self": [],
                "project": [
                    "None"
                ]
            }
        },
        "ProjectsJobsViewSet.get_object": {
            "name": "get_object",
            "location": 515,
            "return": [],
            "arguments": {
                "self": [],
                "project": [
                    "None"
                ]
            }
        },
        "ProjectsJobsViewSet.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 547,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProjectsJobsViewSet.get_response_context": {
            "name": "get_response_context",
            "location": 566,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProjectsJobsViewSet.execute": {
            "name": "execute",
            "location": 581,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ProjectsJobsViewSet.connect": {
            "name": "connect",
            "location": 599,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ProjectsJobsViewSet.cancel": {
            "name": "cancel",
            "location": 654,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "hub-master/manager/jobs/api/views_tests.py": {
        "ProjectsJobsViewsTest.create_job": {
            "name": "create_job",
            "location": 11,
            "return": [
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "List[dict]",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "Callable",
                    "Sequence"
                ],
                "project": [
                    "List[dict]",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "Callable",
                    "Sequence"
                ],
                "data": [
                    "List[dict]",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "Callable",
                    "Sequence"
                ]
            }
        },
        "ProjectsJobsViewsTest.retrieve_job": {
            "name": "retrieve_job",
            "location": 16,
            "return": [
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "Optional[\"TrackingData\"]",
                    "bytes",
                    "Dict[str, str]",
                    "dict",
                    "bool",
                    "Union[Dict[str, Any], List[Any]]",
                    "str"
                ],
                "project": [
                    "Optional[\"TrackingData\"]",
                    "bytes",
                    "Dict[str, str]",
                    "dict",
                    "bool",
                    "Union[Dict[str, Any], List[Any]]",
                    "str"
                ],
                "job_id": [
                    "Optional[\"TrackingData\"]",
                    "bytes",
                    "Dict[str, str]",
                    "dict",
                    "bool",
                    "Union[Dict[str, Any], List[Any]]",
                    "str"
                ],
                "job_key": [
                    "None",
                    "Optional[\"TrackingData\"]",
                    "bytes",
                    "Dict[str, str]",
                    "dict",
                    "bool",
                    "Union[Dict[str, Any], List[Any]]",
                    "str"
                ]
            }
        },
        "ProjectsJobsViewsTest.test_access_with_and_without_keys": {
            "name": "test_access_with_and_without_keys",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/manager/jobs/api/__init__.py": {},
    "hub-master/manager/jobs/migrations/0001_initial.py": {},
    "hub-master/manager/jobs/migrations/0002_auto_20200708_2203.py": {},
    "hub-master/manager/jobs/migrations/0003_auto_20200723_0219.py": {},
    "hub-master/manager/jobs/migrations/0004_job_key.py": {},
    "hub-master/manager/jobs/migrations/0005_auto_20200804_0354.py": {},
    "hub-master/manager/jobs/migrations/0006_auto_20200806_0605.py": {},
    "hub-master/manager/jobs/migrations/0007_auto_20200903_0611.py": {},
    "hub-master/manager/jobs/migrations/0008_auto_20201007_0337.py": {},
    "hub-master/manager/jobs/migrations/0009_auto_20201030_0132.py": {},
    "hub-master/manager/jobs/migrations/0010_auto_20201112_2256.py": {},
    "hub-master/manager/jobs/migrations/0011_auto_20201127_0625.py": {},
    "hub-master/manager/jobs/migrations/0012_auto_20210209_2225.py": {},
    "hub-master/manager/jobs/migrations/0013_auto_20210214_2131.py": {},
    "hub-master/manager/jobs/migrations/0014_job_secrets.py": {},
    "hub-master/manager/jobs/migrations/__init__.py": {},
    "hub-master/manager/manager/admin.py": {
        "InputFilter.lookups": {
            "name": "lookups",
            "location": 18,
            "return": [
                "tuple[tuple]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.contrib.admin.ModelAdmin",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ],
                "model_admin": [
                    "django.contrib.admin.ModelAdmin",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "InputFilter.choices": {
            "name": "choices",
            "location": 27,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "self": [],
                "changelist": [
                    "Callable[[None], bool]",
                    "django.template.Context"
                ]
            }
        },
        "UserUsernameFilter.queryset": {
            "name": "queryset",
            "location": 55,
            "return": [
                "float",
                "bool",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ],
                "queryset": [
                    "int",
                    "dict",
                    "str"
                ]
            }
        },
        "AccountNameFilter.queryset": {
            "name": "queryset",
            "location": 72,
            "return": [
                "bool",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ],
                "queryset": [
                    "django.db.models.query.QuerySet",
                    "str"
                ]
            }
        },
        "ProjectNameFilter.queryset": {
            "name": "queryset",
            "location": 89,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ],
                "queryset": [
                    "str",
                    "Optional[str]",
                    "django.contrib.auth.models.AbstractUser",
                    "Union[int, float]"
                ]
            }
        },
        "CreatorUsernameFilter.queryset": {
            "name": "queryset",
            "location": 106,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "AsyncGenerator"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ],
                "queryset": [
                    "django.db.models.query.QuerySet",
                    "str"
                ]
            }
        }
    },
    "hub-master/manager/manager/asgi.py": {},
    "hub-master/manager/manager/assistant.py": {},
    "hub-master/manager/manager/components.py": {},
    "hub-master/manager/manager/context_processors.py": {
        "versions": {
            "name": "versions",
            "location": 18,
            "return": [
                "dict[typing.Text, ]",
                "str",
                "bool"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "settings": {
            "name": "settings",
            "location": 23,
            "return": [
                "dict[typing.Text, ]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        }
    },
    "hub-master/manager/manager/helpers.py": {
        "slug_strip": {
            "name": "slug_strip",
            "location": 32,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "float",
                    "bool",
                    "int"
                ],
                "separator": [
                    "typing.Text",
                    "float",
                    "int",
                    "str",
                    "Optional[str]",
                    "tuple",
                    "bytes"
                ]
            }
        },
        "slug_start_dedigit": {
            "name": "slug_start_dedigit",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "unique_slugify": {
            "name": "unique_slugify",
            "location": 85,
            "return": [
                "typing.Text",
                "List[str]",
                "str",
                "int"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Callable",
                    "Optional[str]"
                ],
                "instance": [
                    "None",
                    "django.db.models.Model",
                    "str",
                    "Optional[str]",
                    "zerver.models.UserProfile",
                    "salon.models.Stylist"
                ],
                "queryset": [
                    "None",
                    "Optional[List[str]]",
                    "Dict[str, Any]",
                    "bool",
                    "List[str]"
                ],
                "slug_field_name": [
                    "typing.Text",
                    "str",
                    "django.db.models.Model",
                    "Optional[str]"
                ],
                "slug_len": [
                    "None",
                    "bool",
                    "Callable[[], None]",
                    "str",
                    "Optional[int]",
                    "List[int]"
                ],
                "slug_separator": [
                    "typing.Text",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "should_send_message": {
            "name": "should_send_message",
            "location": 146,
            "return": [
                "bool"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "Dict[str, str]",
                    "Optional[str]",
                    "bytes"
                ],
                "key": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ],
                "within": [
                    "str",
                    "dict",
                    "int",
                    "TextIO"
                ]
            }
        },
        "EnumChoice.as_choices": {
            "name": "as_choices",
            "location": 22,
            "return": [
                "list[tuple]",
                "List[str]",
                "Set[str]",
                "Set[int]",
                "List[List[str]]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type",
                    "django.template.RequestContext",
                    "Exception",
                    "Type[object]"
                ]
            }
        },
        "EnumChoice.is_member": {
            "name": "is_member",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Dict[str, str]"
                ],
                "value": [
                    "str",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "hub-master/manager/manager/middleware.py": {
        "basic_auth": {
            "name": "basic_auth",
            "location": 11,
            "return": [
                "Optional[zerver.models.Realm]",
                "bytes",
                "str"
            ],
            "arguments": {
                "get_response": [
                    "Optional[dict]",
                    "str",
                    "dict"
                ]
            }
        },
        "session_storage": {
            "name": "session_storage",
            "location": 32,
            "return": [
                "bool",
                "List[Dict]",
                "Mapping[str, Any]",
                "str",
                "django.http.HttpRequest",
                "Dict[int, Dict[str, Any]]"
            ],
            "arguments": {
                "get_response": [
                    "bool",
                    "str",
                    "Callable",
                    "Dict[str, Any]"
                ]
            }
        },
        "method_override": {
            "name": "method_override",
            "location": 67,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "get_response": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "basic_auth.middleware": {
            "name": "middleware",
            "location": 20,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "session_storage.middleware": {
            "name": "middleware",
            "location": 43,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "method_override.middleware": {
            "name": "middleware",
            "location": 77,
            "return": [
                "bytes",
                "dict",
                "str",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "request": [
                    "Dict[str, Any]",
                    "django.http.requesHttpRequest",
                    "django.http.HttpRequest"
                ]
            }
        },
        "CustomExceptionsMiddleware.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "get_response": [
                    "dict",
                    "str"
                ]
            }
        },
        "CustomExceptionsMiddleware.__call__": {
            "name": "__call__",
            "location": 97,
            "return": [
                "str",
                "float",
                "bool",
                "List[float]",
                "Sequence",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "CustomExceptionsMiddleware.process_exception": {
            "name": "process_exception",
            "location": 101,
            "return": [
                "Dict[str, Any]",
                "Optional[str]",
                "List[str]",
                "Tuple[Dict, int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ],
                "exception": [
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        }
    },
    "hub-master/manager/manager/nodes.py": {
        "node_text_content": {
            "name": "node_text_content",
            "location": 6,
            "return": [
                "int",
                "str",
                "typing.Text"
            ],
            "arguments": {
                "node": [
                    "Mapping[str, Any]",
                    "Optional[Collection[Any]]",
                    "Optional[str]"
                ]
            }
        }
    },
    "hub-master/manager/manager/paths.py": {
        "RootPaths.has": {
            "name": "has",
            "location": 28,
            "return": [
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        }
    },
    "hub-master/manager/manager/settings.py": {
        "Prod.post_setup": {
            "name": "post_setup",
            "location": 539,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        }
    },
    "hub-master/manager/manager/settings_tests.py": {
        "test_CORS_ALLOWED_ORIGIN_REGEXES": {
            "name": "test_CORS_ALLOWED_ORIGIN_REGEXES",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "hub-master/manager/manager/signals.py": {},
    "hub-master/manager/manager/storage.py": {
        "media_storage": {
            "name": "media_storage",
            "location": 122,
            "return": [
                "FileSystemStorage",
                "str",
                "MediaStorage",
                "Optional[str]",
                "IO"
            ],
            "arguments": {}
        },
        "uploads_storage": {
            "name": "uploads_storage",
            "location": 136,
            "return": [
                "FileSystemStorage",
                "str",
                "GoogleCloudStorage",
                "Optional[str]",
                "IO"
            ],
            "arguments": {}
        },
        "working_storage": {
            "name": "working_storage",
            "location": 147,
            "return": [
                "FileSystemStorage",
                "str",
                "GoogleCloudStorage",
                "Optional[str]",
                "IO"
            ],
            "arguments": {}
        },
        "snapshots_storage": {
            "name": "snapshots_storage",
            "location": 158,
            "return": [
                "FileSystemStorage",
                "str",
                "GoogleCloudStorage",
                "Optional[str]",
                "IO"
            ],
            "arguments": {}
        },
        "serve_local": {
            "name": "serve_local",
            "location": 171,
            "return": [
                "str",
                "list"
            ],
            "arguments": {}
        },
        "FileSystemStorage.response": {
            "name": "response",
            "location": 37,
            "return": [
                "FileResponse",
                "bool",
                "str",
                "Optional[int]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "FileSystemStorage.read": {
            "name": "read",
            "location": 44,
            "return": [
                "str",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "FileSystemStorage.generate_post_policy": {
            "name": "generate_post_policy",
            "location": 51,
            "return": [
                "None",
                "Optional[int]",
                "Optional[bool]",
                "Optional[Type[Exception]]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Sequence",
                    "bool"
                ]
            }
        },
        "GoogleCloudStorage.response": {
            "name": "response",
            "location": 65,
            "return": [
                "HttpResponse",
                "dict",
                "Optional[str]",
                "List[str]",
                "int",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "limit_rate": [
                    "typing.Text",
                    "Dict[str, Any]",
                    "bool",
                    "str",
                    "Set[str]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "GoogleCloudStorage.read": {
            "name": "read",
            "location": 78,
            "return": [
                "bytes",
                "Union[str, List[str]]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "GoogleCloudStorage.generate_post_policy": {
            "name": "generate_post_policy",
            "location": 89,
            "return": [
                "django.http.HttpResponse"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "tracim.lib.core.workspace.WorkspaceApi"
                ]
            }
        },
        "MediaStorage.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MediaStorage.url": {
            "name": "url",
            "location": 117,
            "return": [
                "Optional[int]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Union[str, int]"
                ]
            }
        },
        "StorageUsageMixin.file_location": {
            "name": "file_location",
            "location": 198,
            "return": [
                "str",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "IO[str]",
                    "IO[Any]",
                    "List[str]",
                    "parsl.data_provider.files.File"
                ]
            }
        },
        "StorageUsageMixin.file_url": {
            "name": "file_url",
            "location": 204,
            "return": [
                "bool",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str"
                ]
            }
        },
        "StorageUsageMixin.file_response": {
            "name": "file_response",
            "location": 210,
            "return": [
                "str",
                "bool",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "waterbutler.core.path.WaterButlerPath"
                ]
            }
        },
        "StorageUsageMixin.file_content": {
            "name": "file_content",
            "location": 216,
            "return": [
                "str",
                "tuple",
                "IO",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "BinaryIO"
                ]
            }
        }
    },
    "hub-master/manager/manager/testing.py": {
        "DatabaseTestCase.setUpClass": {
            "name": "setUpClass",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type[Exception]",
                    "Exception"
                ]
            }
        },
        "DatabaseTestCase.authenticate": {
            "name": "authenticate",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "Optional[str]",
                    "Optional[dict]",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "DatabaseTestCase.reverse": {
            "name": "reverse",
            "location": 88,
            "return": [
                "str",
                "Iterable[int]",
                "dict"
            ],
            "arguments": {
                "viewname_or_url": [
                    "str",
                    "dict",
                    "List[str]",
                    "Optional[Dict[str, Any]]",
                    "bytes"
                ],
                "list_or_detail": [
                    "str",
                    "Exception",
                    "bool",
                    "Dict[int, Dict[int, Any]]",
                    "List[str]",
                    "dict",
                    "Optional[Tuple[str, str]]"
                ],
                "kwargs": [
                    "dict"
                ]
            }
        },
        "DatabaseTestCase.list": {
            "name": "list",
            "location": 99,
            "return": [
                "dict",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "List[asgard.backends.mesos.models.agenMesosAgent]",
                    "django.http.HttpResponse"
                ],
                "viewname": [
                    "bool",
                    "dict",
                    "Dict[str, str]"
                ],
                "data": [
                    "dict",
                    "bool",
                    "Dict[str, str]"
                ],
                "kwargs": [
                    "dict"
                ],
                "headers": [
                    "dict",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "DatabaseTestCase.create": {
            "name": "create",
            "location": 106,
            "return": [
                "Dict[str, Any]",
                "requests.Response"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "asgard.models.job.ScheduledJob",
                    "Optional[str]",
                    "dict",
                    "bool",
                    "zerver.models.Message",
                    "tracim.models.data.Content"
                ],
                "viewname": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Union[str, int]]",
                    "users.models.JustfixUser",
                    "Dict[str, Any]",
                    "Dict[str, bytes]"
                ],
                "data": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Union[str, int]]",
                    "users.models.JustfixUser",
                    "Dict[str, Any]",
                    "Dict[str, bytes]"
                ],
                "kwargs": [
                    "dict"
                ],
                "headers": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Union[str, int]]",
                    "users.models.JustfixUser",
                    "Dict[str, Any]",
                    "Dict[str, bytes]"
                ]
            }
        },
        "DatabaseTestCase.retrieve": {
            "name": "retrieve",
            "location": 113,
            "return": [
                "str",
                "dict",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "tracim.models.data.Workspace",
                    "User",
                    "zerver.models.Message",
                    "bool",
                    "str",
                    "django.http.HttpRequest"
                ],
                "viewname": [
                    "dict",
                    "bool",
                    "str"
                ],
                "data": [
                    "dict",
                    "bool",
                    "str"
                ],
                "kwargs": [
                    "dict"
                ],
                "headers": [
                    "dict",
                    "bool",
                    "str"
                ]
            }
        },
        "DatabaseTestCase.update": {
            "name": "update",
            "location": 122,
            "return": [
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "tracim.models.data.Workspace",
                    "User",
                    "zerver.models.Message",
                    "bool"
                ],
                "viewname": [
                    "Dict[str, Any]",
                    "dict",
                    "tracim.models.auth.User"
                ],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "tracim.models.auth.User"
                ],
                "kwargs": [
                    "dict"
                ],
                "headers": [
                    "dict",
                    "Dict[str, Any]",
                    "tracim.models.auth.User"
                ]
            }
        }
    },
    "hub-master/manager/manager/themes.py": {},
    "hub-master/manager/manager/urls.py": {},
    "hub-master/manager/manager/urls_tests.py": {
        "title": {
            "name": "title",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "t": [
                    "int",
                    "float"
                ]
            }
        },
        "link": {
            "name": "link",
            "location": 22,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "href": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "skip": {
            "name": "skip",
            "location": 52,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "UrlsMixin.test_urls": {
            "name": "test_urls",
            "location": 230,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrlsAda.setUp": {
            "name": "setUp",
            "location": 264,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrlsBob.setUp": {
            "name": "setUp",
            "location": 271,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/manager/manager/version.py": {},
    "hub-master/manager/manager/wsgi.py": {},
    "hub-master/manager/manager/__init__.py": {},
    "hub-master/manager/manager/api/authentication.py": {
        "BasicAuthentication.authenticate": {
            "name": "authenticate",
            "location": 38,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "rest_framework.requesRequest",
                    "int"
                ]
            }
        },
        "RefreshOAuthTokenAuthentication.authenticate": {
            "name": "authenticate",
            "location": 112,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]",
                "list",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "CsrfExemptSessionAuthentication.enforce_csrf": {
            "name": "enforce_csrf",
            "location": 155,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "rest_framework.requesRequest",
                    "bool"
                ]
            }
        }
    },
    "hub-master/manager/manager/api/exceptions.py": {},
    "hub-master/manager/manager/api/handlers.py": {
        "custom_exception_handler": {
            "name": "custom_exception_handler",
            "location": 11,
            "return": [
                "Response",
                "bool",
                "Dict[str, str]",
                "dict",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "exc": [
                    "Union[object, type]",
                    "dict"
                ],
                "context": [
                    "Exception",
                    "dict"
                ]
            }
        }
    },
    "hub-master/manager/manager/api/helpers.py": {
        "filter_from_ident": {
            "name": "filter_from_ident",
            "location": 241,
            "return": [
                "dict[typing.Text, int]",
                "Optional[str]",
                "Optional[Dict[str, str]]",
                "Optional[Dict]",
                "Optional[List[str]]",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "List[str]",
                    "KT",
                    "int"
                ],
                "prefix": [
                    "None",
                    "Optional[str]",
                    "Optional[float]",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "int_key": [
                    "typing.Text",
                    "str",
                    "Optional[str]",
                    "bool",
                    "List[List[str]]"
                ],
                "str_key": [
                    "typing.Text",
                    "str",
                    "Optional[str]",
                    "bool",
                    "List[List[str]]"
                ]
            }
        },
        "get_object_from_ident": {
            "name": "get_object_from_ident",
            "location": 260,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "list"
                ],
                "value": [
                    "str",
                    "list"
                ]
            }
        },
        "get_help_text": {
            "name": "get_help_text",
            "location": 265,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "field": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "HtmxMixin.init": {
            "name": "init",
            "location": 29,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]",
                "list",
                "List[Tuple[str, str]]",
                "bool",
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]"
                ],
                "action": [
                    "str",
                    "bytes",
                    "Mapping[str, Any]",
                    "bool",
                    "list",
                    "int"
                ],
                "request": [
                    "rest_framework.requesRequest",
                    "werkzeug.Request",
                    "FrozenSet[bytes]",
                    "Request",
                    "apistar.http.Request"
                ],
                "args": [],
                "kwargs": []
            }
        },
        "HtmxMixin.accepts_html": {
            "name": "accepts_html",
            "location": 51,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HtmxMixin.get_template_names": {
            "name": "get_template_names",
            "location": 54,
            "return": [
                "str",
                "list",
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HtmxMixin.get_response_context": {
            "name": "get_response_context",
            "location": 60,
            "return": [
                "dict",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "queryset": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[float]",
                    "Optional[IO[bytes]]",
                    "int"
                ],
                "instance": [
                    "None",
                    "Optional[Type[Exception]]",
                    "dict",
                    "Dict[str, Any]",
                    "Optional[float]",
                    "Optional[IO[bytes]]",
                    "Optional[str]"
                ],
                "serializer": [
                    "None",
                    "Optional[str]",
                    "Optional[Type[Exception]]",
                    "Optional[bool]",
                    "bool",
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "HtmxMixin.get_success_url": {
            "name": "get_success_url",
            "location": 78,
            "return": [
                "None",
                "Optional[int]",
                "bool",
                "str",
                "dict",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]"
            ],
            "arguments": {
                "self": [],
                "serializer": [
                    "Type[T]",
                    "str",
                    "Literal",
                    "List[str]"
                ]
            }
        },
        "HtmxMixin.get_success_headers": {
            "name": "get_success_headers",
            "location": 88,
            "return": [
                "dict[typing.Text, ]",
                "Dict[str, Union[str, int]]",
                "int",
                "dict",
                "Dict[str, Dict[str, str]]",
                "Dict[str, Type]",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "serializer": [
                    "str",
                    "Tuple[int, int]",
                    "Optional[str]",
                    "Optional[Dict]"
                ]
            }
        },
        "HtmxListMixin.list": {
            "name": "list",
            "location": 98,
            "return": [
                "Response",
                "bool",
                "dict",
                "Collection[Any]",
                "list",
                "str",
                "Dict[str, object]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "django.http.HttpRequest",
                    "Dict[str, Any]",
                    "_models.Request"
                ]
            }
        },
        "HtmxCreateMixin.create": {
            "name": "create",
            "location": 124,
            "return": [
                "Response",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "rest_framework.requesRequest",
                    "fausweb.Request",
                    "dict"
                ]
            }
        },
        "HtmxRetrieveMixin.retrieve": {
            "name": "retrieve",
            "location": 155,
            "return": [
                "Response",
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "HtmxUpdateMixin.partial_update": {
            "name": "partial_update",
            "location": 174,
            "return": [
                "Response",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "aiohttp.web.Request",
                    "starlette.requests.Request"
                ]
            }
        },
        "HtmxDestroyMixin.destroy": {
            "name": "destroy",
            "location": 204,
            "return": [
                "Response",
                "bool",
                "Optional[str]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "django.http.HttpRequest",
                    "httpx.Request"
                ]
            }
        }
    },
    "hub-master/manager/manager/api/negotiation.py": {
        "IgnoreClientContentNegotiation.select_renderer": {
            "name": "select_renderer",
            "location": 16,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "List[Tuple[str, int]]",
                    "int",
                    "Callable[[], str]",
                    "str"
                ],
                "renderers": [
                    "bool",
                    "str",
                    "list",
                    "List[str]"
                ],
                "format_suffix": [
                    "bool",
                    "List[Tuple[str, int]]",
                    "int",
                    "Callable[[], str]",
                    "str"
                ]
            }
        }
    },
    "hub-master/manager/manager/api/routers.py": {
        "OptionalSlashRouter.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/manager/manager/api/urls.py": {},
    "hub-master/manager/manager/api/validators.py": {
        "FromContextDefault.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value_fn": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "FromContextDefault.set_context": {
            "name": "set_context",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "serializer_field": [
                    "str",
                    "Union[str, int]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "FromContextDefault.__call__": {
            "name": "__call__",
            "location": 18,
            "return": [
                "Dict[str, Any]",
                "float",
                "list",
                "dict",
                "Iterable[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/manager/manager/api/views/docs.py": {
        "CustomOpenAPISchemaGenerator.get_schema": {
            "name": "get_schema",
            "location": 13,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/manager/manager/api/views/emails.py": {
        "EmailsView.post": {
            "name": "post",
            "location": 54,
            "return": [
                "Response",
                "dict",
                "List[str]",
                "int",
                "Optional[Dict[str, Any]]",
                "bool",
                "str",
                "Dict[str, str]",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "jj.requests.Request",
                    "rest_framework.requesRequest"
                ]
            }
        }
    },
    "hub-master/manager/manager/api/views/status.py": {
        "migrations_pending": {
            "name": "migrations_pending",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "StatusView.get": {
            "name": "get",
            "location": 39,
            "return": [
                "Response",
                "bool",
                "int",
                "str",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "rest_framework.requesRequest",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        }
    },
    "hub-master/manager/manager/api/views/status_tests.py": {
        "migrations_pending_true": {
            "name": "migrations_pending_true",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "migrations_pending_operational_error": {
            "name": "migrations_pending_operational_error",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "migrations_pending_other_error": {
            "name": "migrations_pending_other_error",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "StatusAPIViewTests.test_ok": {
            "name": "test_ok",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusAPIViewTests.test_pending": {
            "name": "test_pending",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusAPIViewTests.test_db_error": {
            "name": "test_db_error",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusAPIViewTests.test_other_error": {
            "name": "test_other_error",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/manager/manager/templatetags/stencila.py": {
        "primary_domain_url": {
            "name": "primary_domain_url",
            "location": 26,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "query_params": {
            "name": "query_params",
            "location": 35,
            "return": [],
            "arguments": {
                "context": [],
                "exclude": [
                    "list[typing.Text]"
                ]
            }
        },
        "is_active": {
            "name": "is_active",
            "location": 48,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "context": [],
                "name": []
            }
        },
        "is_an_account_settings_page": {
            "name": "is_an_account_settings_page",
            "location": 71,
            "return": [],
            "arguments": {
                "context": [],
                "account": []
            }
        },
        "is_users_personal_account": {
            "name": "is_users_personal_account",
            "location": 86,
            "return": [],
            "arguments": {
                "context": [],
                "account": []
            }
        },
        "is_selected": {
            "name": "is_selected",
            "location": 101,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "context": [],
                "name": [],
                "value": []
            }
        },
        "field_element": {
            "name": "field_element",
            "location": 113,
            "return": [],
            "arguments": {
                "field": [],
                "default": [
                    "None"
                ]
            }
        },
        "input_type": {
            "name": "input_type",
            "location": 124,
            "return": [],
            "arguments": {
                "field": []
            }
        },
        "uuid": {
            "name": "uuid",
            "location": 135,
            "return": [],
            "arguments": {}
        },
        "format_bytes": {
            "name": "format_bytes",
            "location": 145,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "num": [],
                "suffix": [
                    "typing.Text"
                ]
            }
        },
        "remove_prefix": {
            "name": "remove_prefix",
            "location": 159,
            "return": [],
            "arguments": {
                "text": [],
                "prefix": []
            }
        },
        "project_content_url": {
            "name": "project_content_url",
            "location": 173,
            "return": [],
            "arguments": {
                "project": []
            }
        },
        "file_format_convert_to_options": {
            "name": "file_format_convert_to_options",
            "location": 185,
            "return": [],
            "arguments": {
                "format_id": [
                    "None"
                ],
                "mimetype": [
                    "None"
                ]
            }
        },
        "file_format_icon": {
            "name": "file_format_icon",
            "location": 196,
            "return": [],
            "arguments": {
                "format_id": [
                    "None"
                ],
                "mimetype": [
                    "None"
                ]
            }
        },
        "split_text": {
            "name": "split_text",
            "location": 207,
            "return": [
                "list"
            ],
            "arguments": {
                "text": [],
                "length": [
                    "int"
                ]
            }
        },
        "tier_count": {
            "name": "tier_count",
            "location": 215,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "count": []
            }
        },
        "get_name": {
            "name": "get_name",
            "location": 226,
            "return": [],
            "arguments": {
                "user": []
            }
        },
        "render_node": {
            "name": "render_node",
            "location": 234,
            "return": [
                "RenderNode"
            ],
            "arguments": {
                "parser": [],
                "token": []
            }
        },
        "RenderNode.__init__": {
            "name": "__init__",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "RenderNode.render": {
            "name": "render",
            "location": 261,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "RenderNode.render_template": {
            "name": "render_template",
            "location": 292,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "template_name": [],
                "node": []
            }
        }
    },
    "hub-master/manager/manager/templatetags/__init__.py": {},
    "hub-master/manager/manager/ui/views.py": {
        "home": {
            "name": "home",
            "location": 16,
            "return": [
                "HttpResponse",
                "str",
                "Optional[str]",
                "Dict[str, Any]",
                "Tuple[str, Optional[int]]",
                "dict"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "http.MITMRequest",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "pricing": {
            "name": "pricing",
            "location": 41,
            "return": [
                "str",
                "Optional[str]",
                "List[str]",
                "Dict[str, Any]",
                "int",
                "bytes",
                "dict",
                "\"MutableRangeSet[T]\""
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "models.WalletRequest",
                    "str"
                ]
            }
        },
        "favicon": {
            "name": "favicon",
            "location": 54,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "robots": {
            "name": "robots",
            "location": 66,
            "return": [
                "HttpResponse",
                "int",
                "zerver.models.Realm",
                "asgard.models.user.User",
                "Dict[str, Any]",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "render_template": {
            "name": "render_template",
            "location": 82,
            "return": [
                "List[List[int]]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "Dict[str, Any]",
                    "http.MITMRequest"
                ]
            }
        },
        "test_account_quota_exceeded": {
            "name": "test_account_quota_exceeded",
            "location": 101,
            "return": [
                "django.http.HttpResponse",
                "None"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "int"
                ]
            }
        },
        "test_messages": {
            "name": "test_messages",
            "location": 112,
            "return": [],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "test403": {
            "name": "test403",
            "location": 132,
            "return": [
                "django.http.HttpResponse",
                "None"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "test404": {
            "name": "test404",
            "location": 147,
            "return": [
                "django.http.HttpResponse",
                "None"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "handle500": {
            "name": "handle500",
            "location": 157,
            "return": [
                "Dict[str, Any]",
                "Optional[str]",
                "str",
                "int",
                "Dict[str, dict]",
                "dict"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "test500": {
            "name": "test500",
            "location": 180,
            "return": [
                "django.http.HttpResponse",
                "None"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "hub-master/manager/projects/admin.py": {
        "ProjectAdmin.update_image": {
            "name": "update_image",
            "location": 63,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "Dict[str, str]",
                    "dict"
                ],
                "queryset": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "ProjectAdmin.toggle_featured": {
            "name": "toggle_featured",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ],
                "queryset": [
                    "Optional[Dict[str, Any]]",
                    "django.db.models.query.QuerySet",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "FilePathFilter.queryset": {
            "name": "queryset",
            "location": 213,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ],
                "queryset": [
                    "int",
                    "django.http.HttpRequest",
                    "rnode.Node"
                ]
            }
        },
        "FileMimeTypeFilter.queryset": {
            "name": "queryset",
            "location": 230,
            "return": [
                "bool",
                "Optional[int]",
                "Optional[bool]",
                "int",
                "str",
                "mypy.nodes.Context"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ],
                "queryset": [
                    "int",
                    "django.http.HttpRequest"
                ]
            }
        },
        "FileAdmin.project_full_name": {
            "name": "project_full_name",
            "location": 265,
            "return": [
                "typing.Text",
                "str",
                "dict",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str"
                ]
            }
        },
        "SnapshotAdmin.project_full_name": {
            "name": "project_full_name",
            "location": 292,
            "return": [
                "typing.Text",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "snapshot": [
                    "models.Form700Filing",
                    "Callable"
                ]
            }
        },
        "SnapshotAdmin.job_status": {
            "name": "job_status",
            "location": 299,
            "return": [
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "snapshot": [
                    "bool",
                    "str"
                ]
            }
        },
        "ReviewAdmin.project_full_name": {
            "name": "project_full_name",
            "location": 313,
            "return": [
                "typing.Text",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "reviews": [
                    "models.Form700Filing",
                    "Callable"
                ]
            }
        },
        "NodeAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 329,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "GithubRepoFullnameFilter.queryset": {
            "name": "queryset",
            "location": 343,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ],
                "queryset": [
                    "django.http.HttpRequest",
                    "django.db.models.query.QuerySet",
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        }
    },
    "hub-master/manager/projects/apps.py": {},
    "hub-master/manager/projects/paths.py": {
        "ProjectPaths.has": {
            "name": "has",
            "location": 25,
            "return": [
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        }
    },
    "hub-master/manager/projects/tasks.py": {
        "delete_temporary_projects": {
            "name": "delete_temporary_projects",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "update_image_all_projects": {
            "name": "update_image_all_projects",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "update_image_for_project": {
            "name": "update_image_for_project",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "project_id": [
                    "str",
                    "cmk.utils.type_defs.UserId",
                    "List[str]",
                    "int"
                ]
            }
        },
        "refresh_github_repos_all_users": {
            "name": "refresh_github_repos_all_users",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "refresh_github_repos_for_user": {
            "name": "refresh_github_repos_for_user",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "Sequence[int]"
                ]
            }
        }
    },
    "hub-master/manager/projects/__init__.py": {},
    "hub-master/manager/projects/api/serializers.py": {
        "ProjectFromContextField.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectAgentSerializer.get_type": {
            "name": "get_type",
            "location": 75,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "instance": []
            }
        },
        "ProjectAgentSerializer.get_agent": {
            "name": "get_agent",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "instance": []
            }
        },
        "ProjectAgentCreateSerializer.validate": {
            "name": "validate",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ProjectAgentCreateSerializer.create": {
            "name": "create",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "validated_data": []
            }
        },
        "ProjectAccountField.get_queryset": {
            "name": "get_queryset",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProjectSerializer.validate_ownership_by_account": {
            "name": "validate_ownership_by_account",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "public": [],
                "account": []
            }
        },
        "ProjectSerializer.validate_name_for_account": {
            "name": "validate_name_for_account",
            "location": 254,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "account": []
            }
        },
        "ProjectSerializer.validate_extra_head": {
            "name": "validate_extra_head",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "ProjectSerializer.validate_extra_top": {
            "name": "validate_extra_top",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "ProjectSerializer.validate_extra_bottom": {
            "name": "validate_extra_bottom",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "ProjectCreateSerializer.validate": {
            "name": "validate",
            "location": 343,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ProjectUpdateSerializer.__init__": {
            "name": "__init__",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "None"
                ]
            }
        },
        "ProjectUpdateSerializer.validate_session_memory": {
            "name": "validate_session_memory",
            "location": 430,
            "return": [
                "None",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ProjectUpdateSerializer.validate_session_timeout": {
            "name": "validate_session_timeout",
            "location": 440,
            "return": [
                "None",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ProjectUpdateSerializer.validate_session_timelimit": {
            "name": "validate_session_timelimit",
            "location": 450,
            "return": [
                "None",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ProjectUpdateSerializer.validate": {
            "name": "validate",
            "location": 460,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ProjectUpdateSerializer.update": {
            "name": "update",
            "location": 524,
            "return": [],
            "arguments": {
                "self": [],
                "project": [],
                "validated_data": []
            }
        },
        "ProjectDestroySerializer.validate_name": {
            "name": "validate_name",
            "location": 549,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "FileListSerializer.get_name": {
            "name": "get_name",
            "location": 585,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "FileListSerializer.get_is_directory": {
            "name": "get_is_directory",
            "location": 589,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "FileListSerializer.get_count": {
            "name": "get_count",
            "location": 593,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "FileListSerializer.get_source": {
            "name": "get_source",
            "location": 597,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "SnapshotSerializer.create": {
            "name": "create",
            "location": 629,
            "return": [],
            "arguments": {
                "self": [],
                "validated_data": []
            }
        },
        "SourceSerializer.get_type": {
            "name": "get_type",
            "location": 668,
            "return": [],
            "arguments": {
                "self": [],
                "source": []
            }
        },
        "SourceSerializer.validate_path": {
            "name": "validate_path",
            "location": 677,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "SourceSerializer.validate": {
            "name": "validate",
            "location": 695,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "SourceSerializer.create": {
            "name": "create",
            "location": 735,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GithubSourceSerializer.validate": {
            "name": "validate",
            "location": 784,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "GoogleDocsSourceSerializer.validate_doc_id": {
            "name": "validate_doc_id",
            "location": 830,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "GoogleDocsSourceSerializer.create": {
            "name": "create",
            "location": 836,
            "return": [],
            "arguments": {
                "self": [],
                "validated_data": []
            }
        },
        "GoogleSheetsSourceSerializer.validate_doc_id": {
            "name": "validate_doc_id",
            "location": 880,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "GoogleDriveSourceSerializer.validate_url": {
            "name": "validate_url",
            "location": 916,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "GoogleDriveSourceSerializer.validate_google_id": {
            "name": "validate_google_id",
            "location": 926,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "GoogleDriveSourceSerializer.validate": {
            "name": "validate",
            "location": 936,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "NodeCreateRequest.validate_source": {
            "name": "validate_source",
            "location": 1042,
            "return": [],
            "arguments": {
                "self": [],
                "id_or_address": []
            }
        },
        "NodeCreateResponse.get_url": {
            "name": "get_url",
            "location": 1069,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "ReviewSourceField.get_queryset": {
            "name": "get_queryset",
            "location": 1106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReviewCreateSerializer.validate": {
            "name": "validate",
            "location": 1138,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ReviewCreateSerializer.create": {
            "name": "create",
            "location": 1186,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ReviewCreateSerializer.to_representation": {
            "name": "to_representation",
            "location": 1194,
            "return": [],
            "arguments": {
                "self": [],
                "instance": []
            }
        },
        "ReviewUpdateSerializer.validate": {
            "name": "validate",
            "location": 1238,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ReviewUpdateSerializer.update": {
            "name": "update",
            "location": 1255,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "data": []
            }
        }
    },
    "hub-master/manager/projects/api/urls.py": {},
    "hub-master/manager/projects/api/views/files.py": {
        "ProjectsFilesViewSet.get_permissions": {
            "name": "get_permissions",
            "location": 28,
            "return": [
                "list",
                "dict",
                "Optional[Iterable[str]]",
                "Optional[str]",
                "Optional[List[str]]",
                "str",
                "List[Union[\"PipeChain\", str]]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsFilesViewSet.get_project": {
            "name": "get_project",
            "location": 39,
            "return": [
                "Project",
                "django.db.models.QuerySet",
                "bool",
                "config.Project",
                "List[annofabapi.models.ProjectMember]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsFilesViewSet.get_prefix": {
            "name": "get_prefix",
            "location": 49,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsFilesViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 60,
            "return": [
                "str",
                "bool",
                "List[object]"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "None",
                    "str",
                    "deeplearning.deepsmith.db.session_t",
                    "Tuple[str, str]",
                    "Dict[str, float]"
                ],
                "source": [
                    "None",
                    "dict",
                    "Optional[Container[str]]",
                    "Dict[str, Any]",
                    "str",
                    "bytes",
                    "list"
                ],
                "snapshot": [
                    "None",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "ProjectsFilesViewSet.get_object": {
            "name": "get_object",
            "location": 159,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "None",
                    "projects.project_models.Project",
                    "dbconfig.Project",
                    "Optional[projects.models.projects.Project]",
                    "projects.source_item_models.DirectoryListEntry",
                    "projects.source_models.LinkedSourceAuthentication"
                ]
            }
        },
        "ProjectsFilesViewSet.get_pipeline": {
            "name": "get_pipeline",
            "location": 176,
            "return": [
                "tuple[list]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "None",
                    "Sequence[str]",
                    "str",
                    "IO",
                    "IO[str]",
                    "dict"
                ],
                "upstream_limit": [
                    "int",
                    "str",
                    "TextIO",
                    "bool"
                ],
                "downstream_limit": [
                    "int",
                    "str",
                    "TextIO",
                    "bool"
                ]
            }
        },
        "ProjectsFilesViewSet.get_history": {
            "name": "get_history",
            "location": 216,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "None",
                    "projects.project_models.Project",
                    "str",
                    "bool",
                    "Optional[projects.models.projects.Project]",
                    "config.Project"
                ]
            }
        },
        "ProjectsFilesViewSet.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 233,
            "return": [
                "None",
                "str",
                "games.models.Game"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsFilesViewSet.get_response_context": {
            "name": "get_response_context",
            "location": 243,
            "return": [
                "dict",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsFilesViewSet.history": {
            "name": "history",
            "location": 277,
            "return": [
                "str",
                "Optional[zerver.models.Realm]",
                "Union[str, Dict]",
                "asyncworker.http.wrapper.RequestWrapper",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "rest_framework.requesRequest",
                    "bool"
                ]
            }
        },
        "ProjectsFilesViewSet.convert": {
            "name": "convert",
            "location": 288,
            "return": [
                "Response",
                "dict",
                "Request"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str, Any]",
                    "dict",
                    "django.http.HttpRequest",
                    "Request",
                    "starlette.requests.Request",
                    "rest_framework.requesRequest"
                ]
            }
        }
    },
    "hub-master/manager/projects/api/views/nodes.py": {
        "NodesViewSet.get_permissions": {
            "name": "get_permissions",
            "location": 50,
            "return": [
                "list",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodesViewSet.create": {
            "name": "create",
            "location": 69,
            "return": [
                "Response",
                "Dict[str, Any]",
                "app.models.dto.LoginResponse",
                "bool",
                "metaswitch_tinder.database.Request"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest",
                    "Dict[str, Any]"
                ]
            }
        },
        "NodesViewSet.retrieve": {
            "name": "retrieve",
            "location": 139,
            "return": [
                "Response",
                "Dict[str, Any]",
                "List[Dict[str, Any]]",
                "str",
                "medtagger.database.models.Slice",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Optional[str]",
                    "models.Tag",
                    "int",
                    "str"
                ],
                "key": [
                    "str",
                    "bytes",
                    "Optional[Mapping[str, str]]",
                    "Optional[Container[str]]"
                ],
                "format": [
                    "None",
                    "Optional[str]",
                    "django.http.HttpRequest",
                    "str"
                ]
            }
        }
    },
    "hub-master/manager/projects/api/views/nodes_tests.py": {
        "NodeViewsTest.create_node": {
            "name": "create_node",
            "location": 11,
            "return": [
                "Type",
                "Optional[str]",
                "Type[T]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "None",
                    "dict",
                    "Optional[str]"
                ],
                "project": [
                    "None",
                    "dict",
                    "Optional[str]"
                ],
                "node": [
                    "None",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "NodeViewsTest.retrieve_json": {
            "name": "retrieve_json",
            "location": 19,
            "return": [
                "str",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "List[str]",
                    "list",
                    "Callable",
                    "List[List[object]]"
                ],
                "key": [
                    "List[str]",
                    "list",
                    "Callable",
                    "List[List[object]]"
                ]
            }
        },
        "NodeViewsTest.retrieve_html": {
            "name": "retrieve_html",
            "location": 27,
            "return": [
                "str",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "List[str]",
                    "list",
                    "Callable",
                    "List[List[object]]"
                ],
                "key": [
                    "List[str]",
                    "list",
                    "Callable",
                    "List[List[object]]"
                ]
            }
        },
        "NodeViewsTest.test_create_ok": {
            "name": "test_create_ok",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeViewsTest.test_create_must_be_authenticated": {
            "name": "test_create_must_be_authenticated",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeViewsTest.test_create_must_have_project_edit_permission": {
            "name": "test_create_must_have_project_edit_permission",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeViewsTest.test_create_must_have_required_fields": {
            "name": "test_create_must_have_required_fields",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeViewsTest.test_create_host_must_be_url": {
            "name": "test_create_host_must_be_url",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeViewsTest.test_retrieve_json_ok": {
            "name": "test_retrieve_json_ok",
            "location": 93,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeViewsTest.test_retrieve_json_is_unmodified": {
            "name": "test_retrieve_json_is_unmodified",
            "location": 103,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeViewsTest.test_retrieve_json": {
            "name": "test_retrieve_json",
            "location": 110,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeViewsTest.test_retrieve_json_when_no_project": {
            "name": "test_retrieve_json_when_no_project",
            "location": 115,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeViewsTest.test_retrieve_html_ok": {
            "name": "test_retrieve_html_ok",
            "location": 122,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeViewsTest.test_retrieve_anything": {
            "name": "test_retrieve_anything",
            "location": 130,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeViewsTest.test_retrieve_html_when_no_project": {
            "name": "test_retrieve_html_when_no_project",
            "location": 144,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/manager/projects/api/views/projects.py": {
        "get_project": {
            "name": "get_project",
            "location": 40,
            "return": [],
            "arguments": {
                "identifiers": [],
                "user": [],
                "roles": []
            }
        },
        "ProjectsViewSet.get_permissions": {
            "name": "get_permissions",
            "location": 93,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsViewSet.get_throttles": {
            "name": "get_throttles",
            "location": 104,
            "return": [
                "list[ProjectsCreateAnonThrottle]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProjectsViewSet.get_object": {
            "name": "get_object",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProjectsViewSet.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProjectsViewSet.get_response_context": {
            "name": "get_response_context",
            "location": 287,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProjectsViewSet.get_success_url": {
            "name": "get_success_url",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serializer": []
            }
        },
        "ProjectsViewSet.list": {
            "name": "list",
            "location": 355,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ProjectsViewSet.create": {
            "name": "create",
            "location": 376,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ProjectsViewSet.retrieve": {
            "name": "retrieve",
            "location": 385,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ProjectsViewSet.partial_update": {
            "name": "partial_update",
            "location": 393,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ProjectsViewSet.destroy": {
            "name": "destroy",
            "location": 402,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ProjectsViewSet.pull": {
            "name": "pull",
            "location": 412,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ProjectsViewSet.session": {
            "name": "session",
            "location": 425,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ProjectsAgentsViewSet.get_project": {
            "name": "get_project",
            "location": 473,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProjectsAgentsViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 487,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProjectsAgentsViewSet.get_object": {
            "name": "get_object",
            "location": 492,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProjectsAgentsViewSet.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 499,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsAgentsViewSet.get_response_context": {
            "name": "get_response_context",
            "location": 515,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/manager/projects/api/views/projects_tests.py": {
        "ProjectsViewsTest.test_create": {
            "name": "test_create",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsViewsTest.test_list": {
            "name": "test_list",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/manager/projects/api/views/providers.py": {
        "GithubReposViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 32,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubReposViewSet.get_throttles": {
            "name": "get_throttles",
            "location": 44,
            "return": [
                "list[GithubReposRefreshThrottle]",
                "Optional[bool]",
                "Optional[int]",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubReposViewSet.list": {
            "name": "list",
            "location": 62,
            "return": [
                "str",
                "bool",
                "flask.Response",
                "Dict[int, Optional[int]]",
                "models.User"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict",
                    "requests.Request"
                ]
            }
        },
        "GithubReposViewSet.refresh": {
            "name": "refresh",
            "location": 74,
            "return": [
                "Response",
                "bytes",
                "dict",
                "flask.Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request"
                ]
            }
        }
    },
    "hub-master/manager/projects/api/views/reviews.py": {
        "ProjectsReviewsViewSet.get_permissions": {
            "name": "get_permissions",
            "location": 34,
            "return": [
                "list",
                "dict",
                "Optional[Iterable[str]]",
                "Optional[str]",
                "Optional[List[str]]",
                "str",
                "List[Union[\"PipeChain\", str]]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsReviewsViewSet.get_project": {
            "name": "get_project",
            "location": 45,
            "return": [
                "Project",
                "django.db.models.QuerySet",
                "bool",
                "config.Project",
                "List[annofabapi.models.ProjectMember]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsReviewsViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 62,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsReviewsViewSet.get_object": {
            "name": "get_object",
            "location": 83,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsReviewsViewSet.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 96,
            "return": [
                "str",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsReviewsViewSet.get_success_url": {
            "name": "get_success_url",
            "location": 110,
            "return": [
                "str",
                "int",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "serializer": [
                    "str",
                    "float",
                    "Optional[str]"
                ]
            }
        },
        "ProjectsReviewsViewSet.get_response_context": {
            "name": "get_response_context",
            "location": 124,
            "return": [
                "Dict[str, Union[int, str]]",
                "Dict[int, List[str]]",
                "Dict[str, Dict]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/manager/projects/api/views/snapshots.py": {
        "ProjectsSnapshotsViewSet.get_permissions": {
            "name": "get_permissions",
            "location": 48,
            "return": [
                "list",
                "dict",
                "Optional[Iterable[str]]",
                "Optional[str]",
                "Optional[List[str]]",
                "str",
                "List[Union[\"PipeChain\", str]]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsSnapshotsViewSet.get_project": {
            "name": "get_project",
            "location": 60,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsSnapshotsViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 79,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "None",
                    "bob_emploi.frontend.api.project_pb2.Project",
                    "bob_emploi.frontend.api.user_pb2.User"
                ]
            }
        },
        "ProjectsSnapshotsViewSet.get_object": {
            "name": "get_object",
            "location": 95,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "models.User",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "str",
                    "None"
                ]
            }
        },
        "ProjectsSnapshotsViewSet.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 102,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsSnapshotsViewSet.get_success_url": {
            "name": "get_success_url",
            "location": 106,
            "return": [
                "str",
                "zerver.models.UserProfile",
                "socialhome.activities.models.Activity",
                "zerver.models.Realm",
                "bool"
            ],
            "arguments": {
                "self": [],
                "serializer": [
                    "str",
                    "float",
                    "Optional[str]"
                ]
            }
        },
        "ProjectsSnapshotsViewSet.files": {
            "name": "files",
            "location": 122,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "rest_framework.requesRequest",
                    "django.http.HttpRequest",
                    "aiohttp.web.Request"
                ]
            }
        },
        "ProjectsSnapshotsViewSet.archive": {
            "name": "archive",
            "location": 156,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "rest_framework.requesRequest",
                    "bool"
                ]
            }
        },
        "ProjectsSnapshotsViewSet.session": {
            "name": "session",
            "location": 166,
            "return": [
                "Dict[str, Any]",
                "dict",
                "metaswitch_tinder.database.Request"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        }
    },
    "hub-master/manager/projects/api/views/sources.py": {
        "ProjectsSourcesViewSet.get_permissions": {
            "name": "get_permissions",
            "location": 43,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsSourcesViewSet.get_project": {
            "name": "get_project",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProjectsSourcesViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "project": [
                    "None"
                ]
            }
        },
        "ProjectsSourcesViewSet.get_object": {
            "name": "get_object",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "project": [
                    "None"
                ]
            }
        },
        "ProjectsSourcesViewSet.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "None"
                ],
                "source_class": [
                    "None"
                ]
            }
        },
        "ProjectsSourcesViewSet.get_response_context": {
            "name": "get_response_context",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProjectsSourcesViewSet.get_success_url": {
            "name": "get_success_url",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serializer": []
            }
        },
        "ProjectsSourcesViewSet.list": {
            "name": "list",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ProjectsSourcesViewSet.create": {
            "name": "create",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ProjectsSourcesViewSet.retrieve": {
            "name": "retrieve",
            "location": 255,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ProjectsSourcesViewSet.partial_update": {
            "name": "partial_update",
            "location": 263,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ProjectsSourcesViewSet.destroy": {
            "name": "destroy",
            "location": 272,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ProjectsSourcesViewSet.open": {
            "name": "open",
            "location": 282,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ProjectsSourcesViewSet.pull": {
            "name": "pull",
            "location": 292,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ProjectsSourcesViewSet.watch": {
            "name": "watch",
            "location": 304,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ProjectsSourcesViewSet.unwatch": {
            "name": "unwatch",
            "location": 325,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ProjectsSourcesViewSet.event": {
            "name": "event",
            "location": 341,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "hub-master/manager/projects/api/views/__init__.py": {},
    "hub-master/manager/projects/migrations/0001_initial.py": {},
    "hub-master/manager/projects/migrations/0002_auto_20200710_0310.py": {},
    "hub-master/manager/projects/migrations/0003_auto_20200712_2322.py": {},
    "hub-master/manager/projects/migrations/0004_add_project_temporary.py": {
        "temp_account": {
            "name": "temp_account",
            "location": 5,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "apps": [
                    "int",
                    "List[str]"
                ]
            }
        }
    },
    "hub-master/manager/projects/migrations/0005_auto_20200720_0116.py": {},
    "hub-master/manager/projects/migrations/0006_auto_20200722_0510.py": {},
    "hub-master/manager/projects/migrations/0007_auto_20200722_2249.py": {},
    "hub-master/manager/projects/migrations/0008_auto_20200727_0732.py": {},
    "hub-master/manager/projects/migrations/0009_auto_20200727_2346.py": {},
    "hub-master/manager/projects/migrations/0010_auto_20200804_0354.py": {},
    "hub-master/manager/projects/migrations/0011_auto_20200806_0605.py": {},
    "hub-master/manager/projects/migrations/0012_auto_20200807_1934.py": {},
    "hub-master/manager/projects/migrations/0013_auto_20200827_2212.py": {},
    "hub-master/manager/projects/migrations/0014_node.py": {},
    "hub-master/manager/projects/migrations/0015_auto_20201007_0337.py": {},
    "hub-master/manager/projects/migrations/0016_auto_20201016_0326.py": {},
    "hub-master/manager/projects/migrations/0017_auto_20201019_2343.py": {},
    "hub-master/manager/projects/migrations/0018_auto_20201023_0530.py": {},
    "hub-master/manager/projects/migrations/0019_googlesheetssource.py": {},
    "hub-master/manager/projects/migrations/0020_auto_20201116_1450.py": {},
    "hub-master/manager/projects/migrations/0021_auto_20201119_0526.py": {},
    "hub-master/manager/projects/migrations/0022_review.py": {},
    "hub-master/manager/projects/migrations/0023_auto_20201202_0349.py": {},
    "hub-master/manager/projects/migrations/0024_auto_20201206_0819.py": {},
    "hub-master/manager/projects/migrations/0025_auto_20201211_2319.py": {},
    "hub-master/manager/projects/migrations/0026_project_featured.py": {},
    "hub-master/manager/projects/migrations/0027_auto_20210203_2054.py": {},
    "hub-master/manager/projects/migrations/0028_auto_20210210_0230.py": {},
    "hub-master/manager/projects/migrations/0029_auto_20210210_2340.py": {},
    "hub-master/manager/projects/migrations/0030_auto_20210315_2230.py": {},
    "hub-master/manager/projects/migrations/0031_auto_20210328_2341.py": {},
    "hub-master/manager/projects/migrations/__init__.py": {},
    "hub-master/manager/projects/models/files.py": {
        "file_format": {
            "name": "file_format",
            "location": 85,
            "return": [
                "FileFormat"
            ],
            "arguments": {
                "format_id": [],
                "label": [
                    "None"
                ],
                "kind": [
                    "None"
                ],
                "mimetype": [
                    "None"
                ],
                "extensions": [
                    "None"
                ],
                "lexer": [
                    "None"
                ],
                "icon_class": [
                    "None"
                ],
                "minor": [
                    "bool"
                ]
            }
        },
        "get_modified": {
            "name": "get_modified",
            "location": 670,
            "return": [
                "None"
            ],
            "arguments": {
                "info": []
            }
        },
        "FileFormat.default_extension": {
            "name": "default_extension",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileFormat.default_icon_class": {
            "name": "default_icon_class",
            "location": 49,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "FileFormat.is_image": {
            "name": "is_image",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileFormat.is_binary": {
            "name": "is_binary",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileFormat.convert_to_options": {
            "name": "convert_to_options",
            "location": 64,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileFormat.default_convert_to_options": {
            "name": "default_convert_to_options",
            "location": 80,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "FileFormats.from_id": {
            "name": "from_id",
            "location": 207,
            "return": [],
            "arguments": {
                "cls": [],
                "format_id": []
            }
        },
        "FileFormats.from_mimetype": {
            "name": "from_mimetype",
            "location": 218,
            "return": [],
            "arguments": {
                "cls": [],
                "mimetype": []
            }
        },
        "FileFormats.from_id_or_mimetype": {
            "name": "from_id_or_mimetype",
            "location": 229,
            "return": [],
            "arguments": {
                "cls": [],
                "format_id": [
                    "None"
                ],
                "mimetype": [
                    "None"
                ]
            }
        },
        "FileFormats.from_url_or_mimetype": {
            "name": "from_url_or_mimetype",
            "location": 243,
            "return": [],
            "arguments": {
                "cls": [],
                "url": [
                    "None"
                ],
                "mimetype": [
                    "None"
                ]
            }
        },
        "File.create": {
            "name": "create",
            "location": 366,
            "return": [],
            "arguments": {
                "project": [],
                "path": [],
                "info": [],
                "job": [
                    "None"
                ],
                "source": [
                    "None"
                ],
                "upstreams": [
                    "list"
                ],
                "downstreams": [
                    "list"
                ],
                "snapshot": [
                    "None"
                ]
            }
        },
        "File.get_latest": {
            "name": "get_latest",
            "location": 418,
            "return": [],
            "arguments": {}
        },
        "File.remove": {
            "name": "remove",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.get_format": {
            "name": "get_format",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.get_upstreams": {
            "name": "get_upstreams",
            "location": 449,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "current": [
                    "bool"
                ]
            }
        },
        "File.get_downstreams": {
            "name": "get_downstreams",
            "location": 455,
            "return": [],
            "arguments": {
                "self": [],
                "current": [
                    "bool"
                ]
            }
        },
        "File.open_url": {
            "name": "open_url",
            "location": 461,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.get_lexer": {
            "name": "get_lexer",
            "location": 484,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.highlight_content": {
            "name": "highlight_content",
            "location": 504,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.highlight_url": {
            "name": "highlight_url",
            "location": 520,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.download_url": {
            "name": "download_url",
            "location": 539,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "File.get_response": {
            "name": "get_response",
            "location": 551,
            "return": [],
            "arguments": {
                "self": [],
                "limit_rate": [
                    "typing.Text"
                ]
            }
        },
        "File.get_content": {
            "name": "get_content",
            "location": 561,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "File.convert": {
            "name": "convert",
            "location": 571,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "output": [],
                "options": [
                    "dict"
                ],
                "snapshot": [
                    "bool"
                ]
            }
        },
        "File.convert_callback": {
            "name": "convert_callback",
            "location": 604,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": []
            }
        }
    },
    "hub-master/manager/projects/models/nodes.py": {
        "generate_node_key": {
            "name": "generate_node_key",
            "location": 12,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "Node.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 123,
            "return": [
                "str",
                "dict",
                "List[str]",
                "aaLogbook.models.logbookTranslationModel.Logbook"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.get_app": {
            "name": "get_app",
            "location": 127,
            "return": [
                "tuple[typing.Text]",
                "str",
                "List[Dict[str, Any]]",
                "Optional[bool]",
                "Optional[List[str]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.get_meta": {
            "name": "get_meta",
            "location": 131,
            "return": [
                "Meta",
                "str",
                "Type",
                "viewer.models.Archive"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/manager/projects/models/projects.py": {
        "generate_project_key": {
            "name": "generate_project_key",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "make_project_creator_an_owner": {
            "name": "make_project_creator_an_owner",
            "location": 591,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [],
                "instance": [],
                "created": []
            }
        },
        "ProjectLiveness.as_choices": {
            "name": "as_choices",
            "location": 39,
            "return": [
                "tuple[tuple[typing.Text]]"
            ],
            "arguments": {}
        },
        "Project.__str__": {
            "name": "__str__",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Project.get_meta": {
            "name": "get_meta",
            "location": 234,
            "return": [
                "Meta"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.set_image_from_file": {
            "name": "set_image_from_file",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "Project.update_image": {
            "name": "update_image",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.update_image_all_projects": {
            "name": "update_image_all_projects",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.scheduled_deletion_time": {
            "name": "scheduled_deletion_time",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.scheduled_deletion_warning": {
            "name": "scheduled_deletion_warning",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.get_main": {
            "name": "get_main",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.get_theme": {
            "name": "get_theme",
            "location": 349,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Project.content_url": {
            "name": "content_url",
            "location": 353,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "snapshot": [
                    "None"
                ],
                "path": [],
                "live": [
                    "bool"
                ]
            }
        },
        "Project.file_location": {
            "name": "file_location",
            "location": 393,
            "return": [],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "Project.event": {
            "name": "event",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "source": [
                    "None"
                ]
            }
        },
        "Project.cleanup": {
            "name": "cleanup",
            "location": 411,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "Project.cleanup_callback": {
            "name": "cleanup_callback",
            "location": 431,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "Project.pull": {
            "name": "pull",
            "location": 442,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "Project.reflow": {
            "name": "reflow",
            "location": 488,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "Project.pin": {
            "name": "pin",
            "location": 537,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "Project.archive": {
            "name": "archive",
            "location": 554,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "snapshot": [],
                "path": []
            }
        },
        "Project.session": {
            "name": "session",
            "location": 576,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ProjectRole.get_description": {
            "name": "get_description",
            "location": 626,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "cls": [],
                "role": []
            }
        },
        "ProjectRole.from_string": {
            "name": "from_string",
            "location": 638,
            "return": [],
            "arguments": {
                "cls": [],
                "role": []
            }
        },
        "ProjectRole.and_above": {
            "name": "and_above",
            "location": 647,
            "return": [
                "list"
            ],
            "arguments": {
                "cls": [],
                "role": []
            }
        }
    },
    "hub-master/manager/projects/models/projects_tests.py": {
        "test_project_role_from_string": {
            "name": "test_project_role_from_string",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_project_role_and_above": {
            "name": "test_project_role_and_above",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "hub-master/manager/projects/models/providers.py": {
        "GithubRepo.refresh_for_all_users": {
            "name": "refresh_for_all_users",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "GithubRepo.refresh_for_user": {
            "name": "refresh_for_user",
            "location": 92,
            "return": [
                "None",
                "List[django.db.models.Model]",
                "Iterator[Dict[str, str]]",
                "str",
                "app.models.move.Coordinate"
            ],
            "arguments": {
                "user": [
                    "str",
                    "Optional[str]",
                    "excars.models.locations.Location",
                    "excars.models.user.User",
                    "server.models.User",
                    "accounts.models.Account",
                    "zerver.models.UserProfile"
                ],
                "token": [
                    "None",
                    "zerver.models.UserProfile",
                    "bool",
                    "raiden.utils.Address",
                    "cnaas_nms.db.device.Device",
                    "str"
                ]
            }
        }
    },
    "hub-master/manager/projects/models/reviews.py": {
        "generate_review_key": {
            "name": "generate_review_key",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "ReviewStatus.as_choices": {
            "name": "as_choices",
            "location": 35,
            "return": [
                "list[tuple[typing.Text]]"
            ],
            "arguments": {}
        },
        "ReviewStatus.get_description": {
            "name": "get_description",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "status": []
            }
        },
        "Review.get_status": {
            "name": "get_status",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Review.get_date": {
            "name": "get_date",
            "location": 219,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Review.get_reviewer_name": {
            "name": "get_reviewer_name",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Review.get_reviewer_image": {
            "name": "get_reviewer_image",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Review.get_doi": {
            "name": "get_doi",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Review.get_comments": {
            "name": "get_comments",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Review.request": {
            "name": "request",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Review.update": {
            "name": "update",
            "location": 291,
            "return": [],
            "arguments": {
                "self": [],
                "status": [],
                "response_message": [
                    "None"
                ],
                "cancel_message": [
                    "None"
                ],
                "user": [
                    "None"
                ],
                "filters": [
                    "dict"
                ]
            }
        },
        "Review.extract": {
            "name": "extract",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [],
                "filters": [
                    "dict"
                ]
            }
        },
        "Review.extract_callback": {
            "name": "extract_callback",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "Review.register": {
            "name": "register",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        }
    },
    "hub-master/manager/projects/models/snapshots.py": {
        "generate_snapshot_id": {
            "name": "generate_snapshot_id",
            "location": 16,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "Snapshot.__str__": {
            "name": "__str__",
            "location": 106,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Snapshot.save": {
            "name": "save",
            "location": 112,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Snapshot.create": {
            "name": "create",
            "location": 138,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "project": [
                    "bob_emploi.frontend.api.user_pb2.User"
                ],
                "user": [
                    "bob_emploi.frontend.api.user_pb2.User"
                ]
            }
        },
        "Snapshot.pin_callback": {
            "name": "pin_callback",
            "location": 204,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "tuple",
                    "dict",
                    "Tuple[str, str]",
                    "List[str]"
                ]
            }
        },
        "Snapshot.archive_callback": {
            "name": "archive_callback",
            "location": 213,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "jobs.models.Job",
                    "str"
                ]
            }
        },
        "Snapshot.session": {
            "name": "session",
            "location": 244,
            "return": [
                "bool",
                "List[Dict]",
                "Mapping[str, Any]",
                "str",
                "django.http.HttpRequest",
                "Dict[int, Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "app.models.dto.RenewRequest"
                ]
            }
        },
        "Snapshot.is_active": {
            "name": "is_active",
            "location": 269,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Snapshot.has_index": {
            "name": "has_index",
            "location": 276,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Snapshot.content_url": {
            "name": "content_url",
            "location": 286,
            "return": [
                "str",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "None"
                ]
            }
        },
        "Snapshot.file_location": {
            "name": "file_location",
            "location": 292,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str"
                ]
            }
        }
    },
    "hub-master/manager/projects/models/sources.py": {
        "NON_POLYMORPHIC_CASCADE": {
            "name": "NON_POLYMORPHIC_CASCADE",
            "location": 62,
            "return": [],
            "arguments": {
                "collector": [],
                "field": [],
                "sub_objs": [],
                "using": []
            }
        },
        "upload_source_path": {
            "name": "upload_source_path",
            "location": 1114,
            "return": [
                "str"
            ],
            "arguments": {
                "instance": [],
                "filename": []
            }
        },
        "SourceAddress.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_name": []
            }
        },
        "SourceAddress.__getattr__": {
            "name": "__getattr__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "attr": []
            }
        },
        "Source.__str__": {
            "name": "__str__",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Source.type_class": {
            "name": "type_class",
            "location": 155,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Source.type_name": {
            "name": "type_name",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Source.class_from_type_name": {
            "name": "class_from_type_name",
            "location": 185,
            "return": [],
            "arguments": {
                "type_name": []
            }
        },
        "Source.make_address": {
            "name": "make_address",
            "location": 193,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Source.coerce_address": {
            "name": "coerce_address",
            "location": 206,
            "return": [
                "SourceAddress"
            ],
            "arguments": {
                "address": []
            }
        },
        "Source.parse_address": {
            "name": "parse_address",
            "location": 226,
            "return": [
                "SourceAddress",
                "None"
            ],
            "arguments": {
                "cls": [],
                "address": [],
                "naked": [
                    "bool"
                ],
                "strict": [
                    "bool"
                ]
            }
        },
        "Source.query_from_address": {
            "name": "query_from_address",
            "location": 247,
            "return": [],
            "arguments": {
                "address_or_string": [],
                "prefix": [
                    "None"
                ]
            }
        },
        "Source.from_address": {
            "name": "from_address",
            "location": 281,
            "return": [],
            "arguments": {
                "address_or_string": []
            }
        },
        "Source.to_address": {
            "name": "to_address",
            "location": 292,
            "return": [
                "SourceAddress"
            ],
            "arguments": {
                "self": []
            }
        },
        "Source.get_secrets": {
            "name": "get_secrets",
            "location": 314,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "Source.get_url": {
            "name": "get_url",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "None"
                ]
            }
        },
        "Source.get_event_url": {
            "name": "get_event_url",
            "location": 333,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Source.pull": {
            "name": "pull",
            "location": 349,
            "return": [],
            "arguments": {
                "self": [],
                "user": [
                    "None"
                ]
            }
        },
        "Source.pull_callback": {
            "name": "pull_callback",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "Source.extract": {
            "name": "extract",
            "location": 416,
            "return": [],
            "arguments": {
                "self": [],
                "review": [],
                "user": [
                    "None"
                ],
                "filters": [
                    "None"
                ]
            }
        },
        "Source.push": {
            "name": "push",
            "location": 443,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Source.watch": {
            "name": "watch",
            "location": 454,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "Source.unwatch": {
            "name": "unwatch",
            "location": 462,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "Source.event": {
            "name": "event",
            "location": 470,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "headers": [
                    "dict"
                ]
            }
        },
        "Source.preview": {
            "name": "preview",
            "location": 479,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "Source.is_active": {
            "name": "is_active",
            "location": 498,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Source.get_downstreams": {
            "name": "get_downstreams",
            "location": 514,
            "return": [],
            "arguments": {
                "self": [],
                "current": [
                    "bool"
                ]
            }
        },
        "Source.get_jobs": {
            "name": "get_jobs",
            "location": 522,
            "return": [],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "Source.save": {
            "name": "save",
            "location": 528,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Source.delete": {
            "name": "delete",
            "location": 539,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElifeSource.make_address": {
            "name": "make_address",
            "location": 573,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElifeSource.get_url": {
            "name": "get_url",
            "location": 577,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "None"
                ]
            }
        },
        "ElifeSource.parse_address": {
            "name": "parse_address",
            "location": 584,
            "return": [
                "SourceAddress",
                "None"
            ],
            "arguments": {
                "cls": [],
                "address": [],
                "naked": [
                    "bool"
                ],
                "strict": [
                    "bool"
                ]
            }
        },
        "GithubSource.make_address": {
            "name": "make_address",
            "location": 623,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GithubSource.parse_address": {
            "name": "parse_address",
            "location": 632,
            "return": [
                "SourceAddress",
                "None"
            ],
            "arguments": {
                "cls": [],
                "address": [],
                "naked": [
                    "bool"
                ],
                "strict": [
                    "bool"
                ]
            }
        },
        "GithubSource.get_url": {
            "name": "get_url",
            "location": 657,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "None"
                ]
            }
        },
        "GithubSource.get_secrets": {
            "name": "get_secrets",
            "location": 664,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "GithubSource.watch": {
            "name": "watch",
            "location": 681,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "GithubSource.unwatch": {
            "name": "unwatch",
            "location": 724,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "GoogleSourceMixin.get_secrets": {
            "name": "get_secrets",
            "location": 762,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "GoogleSourceMixin.create_credentials": {
            "name": "create_credentials",
            "location": 792,
            "return": [
                "GoogleCredentials"
            ],
            "arguments": {
                "self": [],
                "secrets": []
            }
        },
        "GoogleSourceMixin.watch": {
            "name": "watch",
            "location": 806,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "GoogleSourceMixin.unwatch": {
            "name": "unwatch",
            "location": 850,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "GoogleSourceMixin.event": {
            "name": "event",
            "location": 880,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "headers": [
                    "dict"
                ]
            }
        },
        "GoogleDocsSource.make_address": {
            "name": "make_address",
            "location": 940,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleDocsSource.to_address": {
            "name": "to_address",
            "location": 944,
            "return": [
                "SourceAddress"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleDocsSource.parse_address": {
            "name": "parse_address",
            "location": 954,
            "return": [
                "SourceAddress",
                "None"
            ],
            "arguments": {
                "cls": [],
                "address": [],
                "naked": [
                    "bool"
                ],
                "strict": [
                    "bool"
                ]
            }
        },
        "GoogleDocsSource.get_url": {
            "name": "get_url",
            "location": 991,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "None"
                ]
            }
        },
        "GoogleDriveSource.make_address": {
            "name": "make_address",
            "location": 1025,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleDriveSource.parse_address": {
            "name": "parse_address",
            "location": 1030,
            "return": [
                "SourceAddress",
                "None"
            ],
            "arguments": {
                "cls": [],
                "address": [],
                "naked": [
                    "bool"
                ],
                "strict": [
                    "bool"
                ]
            }
        },
        "GoogleDriveSource.get_url": {
            "name": "get_url",
            "location": 1065,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "None"
                ]
            }
        },
        "PlosSource.make_address": {
            "name": "make_address",
            "location": 1079,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlosSource.get_url": {
            "name": "get_url",
            "location": 1083,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "None"
                ]
            }
        },
        "PlosSource.parse_address": {
            "name": "parse_address",
            "location": 1089,
            "return": [
                "SourceAddress",
                "None"
            ],
            "arguments": {
                "cls": [],
                "address": [],
                "naked": [
                    "bool"
                ],
                "strict": [
                    "bool"
                ]
            }
        },
        "UploadSource.make_address": {
            "name": "make_address",
            "location": 1163,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UploadSource.get_url": {
            "name": "get_url",
            "location": 1167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "None"
                ]
            }
        },
        "UploadSource.to_address": {
            "name": "to_address",
            "location": 1183,
            "return": [
                "SourceAddress"
            ],
            "arguments": {
                "self": []
            }
        },
        "UploadSource.parse_address": {
            "name": "parse_address",
            "location": 1197,
            "return": [
                "SourceAddress",
                "None"
            ],
            "arguments": {
                "cls": [],
                "address": [],
                "naked": [
                    "bool"
                ],
                "strict": [
                    "bool"
                ]
            }
        },
        "UploadSource.create_or_update_from_uploaded_file": {
            "name": "create_or_update_from_uploaded_file",
            "location": 1213,
            "return": [
                "UploadSource"
            ],
            "arguments": {
                "user": [],
                "project": [],
                "path": [],
                "file": []
            }
        },
        "UrlSource.make_address": {
            "name": "make_address",
            "location": 1247,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UrlSource.get_url": {
            "name": "get_url",
            "location": 1251,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "None"
                ]
            }
        },
        "UrlSource.parse_address": {
            "name": "parse_address",
            "location": 1256,
            "return": [
                "SourceAddress",
                "None"
            ],
            "arguments": {
                "cls": [],
                "address": [],
                "naked": [
                    "bool"
                ],
                "strict": [
                    "bool"
                ]
            }
        }
    },
    "hub-master/manager/projects/models/sources_tests.py": {
        "test_source_address": {
            "name": "test_source_address",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_coerce_address": {
            "name": "test_coerce_address",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_default_make_address": {
            "name": "test_default_make_address",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_default_parse_address": {
            "name": "test_default_parse_address",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_query_from_address": {
            "name": "test_query_from_address",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_from_address": {
            "name": "test_from_address",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_to_address": {
            "name": "test_to_address",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_elife_parse_address": {
            "name": "test_elife_parse_address",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_githubsource_make_address": {
            "name": "test_githubsource_make_address",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_githubsource_url": {
            "name": "test_githubsource_url",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_githubsource_parse_address": {
            "name": "test_githubsource_parse_address",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_googledocssource_make_address": {
            "name": "test_googledocssource_make_address",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_googledocssource_to_address": {
            "name": "test_googledocssource_to_address",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_googledocssource_url": {
            "name": "test_googledocssource_url",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_googledocssource_parse_address": {
            "name": "test_googledocssource_parse_address",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_googlesheetssource_make_address": {
            "name": "test_googlesheetssource_make_address",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_googlesheetssource_to_address": {
            "name": "test_googlesheetssource_to_address",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_googlesheetssource_url": {
            "name": "test_googlesheetssource_url",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_googlesheetssource_parse_address": {
            "name": "test_googlesheetssource_parse_address",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_googledrivesource_make_address": {
            "name": "test_googledrivesource_make_address",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_googledrivesource_url": {
            "name": "test_googledrivesource_url",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_googledrivesource_parse_address": {
            "name": "test_googledrivesource_parse_address",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_plos_parse_address": {
            "name": "test_plos_parse_address",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_upload_source_pull": {
            "name": "test_upload_source_pull",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_urlsource_make_address": {
            "name": "test_urlsource_make_address",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_urlsource_url": {
            "name": "test_urlsource_url",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_urlsource_parse_address": {
            "name": "test_urlsource_parse_address",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "SourcesTests.test_delete_project_with_source": {
            "name": "test_delete_project_with_source",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/manager/projects/ui/urls.py": {},
    "hub-master/manager/projects/ui/views/files.py": {
        "list": {
            "name": "list",
            "location": 13,
            "return": [
                "str",
                "dict",
                "pathlib.Path",
                "Optional[Dict[str, Any]]",
                "bool",
                "int"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "retrieve": {
            "name": "retrieve",
            "location": 39,
            "return": [
                "str",
                "pathlib.Path",
                "salon.models.Stylist",
                "IO",
                "Dict[str, str]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "highlight": {
            "name": "highlight",
            "location": 64,
            "return": [
                "HttpResponse",
                "bytes",
                "dict"
            ],
            "arguments": {
                "request": [
                    "Exception"
                ]
            }
        },
        "upload": {
            "name": "upload",
            "location": 93,
            "return": [
                "str",
                "pathlib.Path",
                "salon.models.Stylist",
                "Optional[List[str]]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "Exception"
                ]
            }
        },
        "convert": {
            "name": "convert",
            "location": 124,
            "return": [
                "int",
                "IO[bytes]",
                "Dict[str, str]",
                "str",
                "dict",
                "django.http.HttpRequest"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "Optional[str]"
                ]
            }
        },
        "destroy": {
            "name": "destroy",
            "location": 153,
            "return": [
                "bool",
                "dict",
                "IO[bytes]",
                "int",
                "Dict[str, Any]",
                "db.models.taxon.FillDataLevel"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "hub-master/manager/projects/ui/views/jobs.py": {
        "list": {
            "name": "list",
            "location": 11,
            "return": [
                "bool",
                "str",
                "dict",
                "bytes",
                "Dict[str, object]",
                "neuromation.api.Cluster",
                "Dict[str, Dict[str, Any]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "http.MITMRequest"
                ]
            }
        },
        "retrieve": {
            "name": "retrieve",
            "location": 45,
            "return": [
                "dict",
                "int",
                "bool",
                "List[str]",
                "Dict[str, str]",
                "str",
                "Dict[str, Union[int, str]]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "Dict[str, Any]",
                    "dict",
                    "http.MITMRequest"
                ]
            }
        }
    },
    "hub-master/manager/projects/ui/views/messages.py": {
        "all_messages": {
            "name": "all_messages",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "projects.models.projects.Project",
                    "zerver.models.UserProfile",
                    "bytes"
                ],
                "project": [
                    "django.http.HttpRequest",
                    "projects.models.projects.Project",
                    "zerver.models.UserProfile",
                    "bytes"
                ],
                "exclude": [
                    "list",
                    "List[str]",
                    "bool",
                    "int",
                    "Optional[Dict]",
                    "List[int]",
                    "str"
                ]
            }
        },
        "temporary_project": {
            "name": "temporary_project",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "projects.models.projects.Project"
                ],
                "project": [
                    "django.http.HttpRequest",
                    "projects.models.projects.Project"
                ]
            }
        }
    },
    "hub-master/manager/projects/ui/views/projects.py": {
        "redirect": {
            "name": "redirect",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "Exception"
                ]
            }
        },
        "list": {
            "name": "list",
            "location": 27,
            "return": [
                "bool",
                "str",
                "neuromation.api.Cluster",
                "Dict[str, object]",
                "int",
                "dict"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "Dict[str, Any]"
                ]
            }
        },
        "create": {
            "name": "create",
            "location": 35,
            "return": [
                "bool",
                "dict",
                "Dict[str, Any]",
                "Dict[int, dict]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "open": {
            "name": "open",
            "location": 48,
            "return": [
                "int",
                "Optional[Exception]",
                "str",
                "dict"
            ],
            "arguments": {
                "request": [
                    "str",
                    "django.http.HttpRequest"
                ]
            }
        },
        "save": {
            "name": "save",
            "location": 88,
            "return": [
                "str",
                "dict",
                "models.Name"
            ],
            "arguments": {
                "request": [
                    "Dict[str, Any]",
                    "django.http.HttpRequest",
                    "django.db.models.query.QuerySet",
                    "Dict[str, src.api.HoldingInfo]"
                ]
            }
        },
        "retrieve": {
            "name": "retrieve",
            "location": 108,
            "return": [
                "bool",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "update": {
            "name": "update",
            "location": 121,
            "return": [
                "dict",
                "int",
                "List[str]",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "http.MITMRequest",
                    "dict"
                ]
            }
        },
        "image": {
            "name": "image",
            "location": 138,
            "return": [
                "bool",
                "Optional[float]",
                "dict",
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "Dict[str, Any]"
                ]
            }
        },
        "sharing": {
            "name": "sharing",
            "location": 156,
            "return": [
                "int",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "dict"
                ]
            }
        }
    },
    "hub-master/manager/projects/ui/views/reviews.py": {
        "list": {
            "name": "list",
            "location": 8,
            "return": [
                "bool",
                "str",
                "dict",
                "bytes",
                "Dict[str, object]",
                "neuromation.api.Cluster",
                "Dict[str, Dict[str, Any]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "create": {
            "name": "create",
            "location": 19,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, str]",
                "Exception"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "retrieve": {
            "name": "retrieve",
            "location": 30,
            "return": [
                "dict",
                "int",
                "bool",
                "List[str]",
                "Dict[str, str]",
                "str",
                "Dict[str, Union[int, str]]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "http.MITMRequest"
                ]
            }
        }
    },
    "hub-master/manager/projects/ui/views/snapshots.py": {
        "list": {
            "name": "list",
            "location": 8,
            "return": [
                "bool",
                "str",
                "dict",
                "bytes",
                "Dict[str, object]",
                "neuromation.api.Cluster",
                "Dict[str, Dict[str, Any]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "Dict[str, Any]"
                ]
            }
        },
        "retrieve": {
            "name": "retrieve",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [
                    "dict",
                    "str"
                ]
            }
        }
    },
    "hub-master/manager/projects/ui/views/sources.py": {
        "list": {
            "name": "list",
            "location": 12,
            "return": [
                "str",
                "dict",
                "bool",
                "\"TransactionModel\"",
                "Dict[str, int]",
                "taskiapplication.models.task.Task"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "Exception"
                ]
            }
        },
        "create": {
            "name": "create",
            "location": 28,
            "return": [
                "int",
                "bool",
                "Optional[bytes]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "upload": {
            "name": "upload",
            "location": 78,
            "return": [
                "str",
                "Optional[int]",
                "zerver.models.UserProfile",
                "bool",
                "Optional[Exception]",
                "Sequence[int]"
            ],
            "arguments": {
                "request": [
                    "Exception",
                    "django.http.HttpRequest"
                ]
            }
        },
        "retrieve": {
            "name": "retrieve",
            "location": 116,
            "return": [
                "jumeaux.models.Res2DictAddOnPayload",
                "Optional[int]",
                "bool",
                "bytes"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "update": {
            "name": "update",
            "location": 134,
            "return": [
                "bool",
                "List[Dict[str, Any]]",
                "bytes",
                "float",
                "dict"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "dict",
                    "http.MITMRequest"
                ]
            }
        },
        "rename": {
            "name": "rename",
            "location": 148,
            "return": [
                "jumeaux.models.Res2DictAddOnPayload",
                "models.characters.mods_base.SlotTypes",
                "models.characters.chassis.Chassis",
                "List[str]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "dict"
                ]
            }
        },
        "destroy": {
            "name": "destroy",
            "location": 167,
            "return": [
                "jumeaux.models.Res2DictAddOnPayload",
                "models.characters.mods_base.SlotTypes",
                "models.characters.chassis.Chassis",
                "List[str]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "dict"
                ]
            }
        }
    },
    "hub-master/manager/scripts/create_dev_db.py": {
        "run": {
            "name": "run",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "random_users": {
            "name": "random_users",
            "location": 425,
            "return": [],
            "arguments": {
                "num": [
                    "None"
                ]
            }
        },
        "random_user": {
            "name": "random_user",
            "location": 433,
            "return": [],
            "arguments": {}
        },
        "random_account_tier": {
            "name": "random_account_tier",
            "location": 438,
            "return": [],
            "arguments": {}
        },
        "random_account_user": {
            "name": "random_account_user",
            "location": 443,
            "return": [
                "None"
            ],
            "arguments": {
                "account": []
            }
        },
        "random_account_role": {
            "name": "random_account_role",
            "location": 449,
            "return": [],
            "arguments": {}
        },
        "random_team_name": {
            "name": "random_team_name",
            "location": 454,
            "return": [],
            "arguments": {}
        },
        "random_project_user": {
            "name": "random_project_user",
            "location": 461,
            "return": [],
            "arguments": {
                "project": []
            }
        },
        "random_project_source": {
            "name": "random_project_source",
            "location": 471,
            "return": [],
            "arguments": {
                "project": []
            }
        },
        "random_enum_value": {
            "name": "random_enum_value",
            "location": 476,
            "return": [],
            "arguments": {
                "enum": []
            }
        },
        "create_main_file_for_project": {
            "name": "create_main_file_for_project",
            "location": 485,
            "return": [
                "None"
            ],
            "arguments": {
                "project": []
            }
        },
        "create_files_for_source": {
            "name": "create_files_for_source",
            "location": 516,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [],
                "paths": []
            }
        },
        "create_nodes_for_project": {
            "name": "create_nodes_for_project",
            "location": 531,
            "return": [
                "None"
            ],
            "arguments": {
                "project": []
            }
        },
        "create_reviews_for_project": {
            "name": "create_reviews_for_project",
            "location": 560,
            "return": [
                "None"
            ],
            "arguments": {
                "project": []
            }
        }
    },
    "hub-master/manager/scripts/create_page_snaps.py": {
        "elem": {
            "name": "elem",
            "location": 111,
            "return": [],
            "arguments": {
                "name": [],
                "selector": [],
                "parent": [
                    "None"
                ],
                "padding": [
                    "int"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "showPath": {
            "name": "showPath",
            "location": 498,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "path": []
            }
        },
        "report": {
            "name": "report",
            "location": 546,
            "return": [
                "None"
            ],
            "arguments": {
                "results": []
            }
        },
        "extract_views_from_urlpatterns": {
            "name": "extract_views_from_urlpatterns",
            "location": 639,
            "return": [
                "list[tuple[typing.Text]]"
            ],
            "arguments": {
                "urlpatterns": [],
                "base": [
                    "typing.Text"
                ],
                "namespace": [
                    "None"
                ]
            }
        },
        "addShadow": {
            "name": "addShadow",
            "location": 707,
            "return": [],
            "arguments": {
                "image": [],
                "iterations": [
                    "int"
                ],
                "border": [
                    "int"
                ],
                "offset": [
                    "list[int]"
                ],
                "backgroundColour": [
                    "typing.Text"
                ],
                "shadowColour": [
                    "typing.Text"
                ]
            }
        }
    },
    "hub-master/manager/scripts/get_api_schema.py": {
        "run": {
            "name": "run",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "to": [
                    "List[float]",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "hub-master/manager/users/admin.py": {
        "CustomUserAdmin.get_form": {
            "name": "get_form",
            "location": 34,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ],
                "obj": [
                    "None",
                    "django.http.HttpRequest",
                    "dict"
                ]
            }
        },
        "CustomUserAdmin.save_related": {
            "name": "save_related",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "list",
                    "django.forms.Form",
                    "django.http.requesHttpRequest",
                    "bool"
                ],
                "form": [
                    "django.http.HttpRequest",
                    "str",
                    "Set[str]",
                    "Tuple[int, int]"
                ],
                "formsets": [
                    "list",
                    "django.forms.Form",
                    "django.http.requesHttpRequest",
                    "bool"
                ],
                "change": [
                    "list",
                    "django.forms.Form",
                    "django.http.requesHttpRequest",
                    "bool"
                ]
            }
        },
        "CustomUserAdmin.refresh_github_repos": {
            "name": "refresh_github_repos",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ],
                "queryset": [
                    "str"
                ]
            }
        }
    },
    "hub-master/manager/users/apps.py": {},
    "hub-master/manager/users/auth_backends.py": {
        "UsernameOrEmailBackend.authenticate": {
            "name": "authenticate",
            "location": 12,
            "return": [
                "None",
                "Optional[int]",
                "Optional[str]",
                "Optional[float]",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Optional[django.http.HttpRequest]",
                    "str",
                    "django.http.requesHttpRequest",
                    "bool"
                ],
                "username": [
                    "None",
                    "str",
                    "Union[Literal, str]",
                    "int",
                    "List[str]"
                ],
                "password": [
                    "str",
                    "None"
                ]
            }
        }
    },
    "hub-master/manager/users/models.py": {
        "get_email": {
            "name": "get_email",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "user": []
            }
        },
        "get_name": {
            "name": "get_name",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "user": []
            }
        },
        "get_attributes": {
            "name": "get_attributes",
            "location": 83,
            "return": [
                "dict"
            ],
            "arguments": {
                "user": []
            }
        },
        "get_orgs": {
            "name": "get_orgs",
            "location": 107,
            "return": [],
            "arguments": {
                "user": []
            }
        },
        "get_orgs_summary": {
            "name": "get_orgs_summary",
            "location": 118,
            "return": [
                "dict[typing.Union[typing.Text,None], bool]"
            ],
            "arguments": {
                "user": []
            }
        },
        "get_projects": {
            "name": "get_projects",
            "location": 136,
            "return": [],
            "arguments": {
                "user": [],
                "include_public": [
                    "bool"
                ]
            }
        },
        "get_projects_summary": {
            "name": "get_projects_summary",
            "location": 178,
            "return": [
                "dict[typing.Union[typing.Text,bool], ]"
            ],
            "arguments": {
                "user": []
            }
        },
        "get_feature_flags": {
            "name": "get_feature_flags",
            "location": 199,
            "return": [
                "dict[, typing.Text]"
            ],
            "arguments": {
                "user": []
            }
        },
        "generate_anonuser_id": {
            "name": "generate_anonuser_id",
            "location": 230,
            "return": [],
            "arguments": {}
        },
        "generate_invite_key": {
            "name": "generate_invite_key",
            "location": 326,
            "return": [],
            "arguments": {}
        },
        "AnonUser.get_id": {
            "name": "get_id",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "request": []
            }
        },
        "AnonUser.get_or_create": {
            "name": "get_or_create",
            "location": 267,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "Flag.is_active_for_user": {
            "name": "is_active_for_user",
            "location": 315,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "InviteAction.as_choices": {
            "name": "as_choices",
            "location": 347,
            "return": [
                "list[tuple[typing.Text]]"
            ],
            "arguments": {}
        },
        "Invite.send_invitation": {
            "name": "send_invitation",
            "location": 453,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Invite.__str__": {
            "name": "__str__",
            "location": 471,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Invite.redirect_url": {
            "name": "redirect_url",
            "location": 476,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Invite.create_request": {
            "name": "create_request",
            "location": 497,
            "return": [
                "HttpRequest"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Invite.perform_action": {
            "name": "perform_action",
            "location": 506,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "user": [
                    "None"
                ]
            }
        },
        "Invite.join_account": {
            "name": "join_account",
            "location": 524,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "invitee": []
            }
        },
        "Invite.join_project": {
            "name": "join_project",
            "location": 538,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "invitee": []
            }
        },
        "Invite.take_tour": {
            "name": "take_tour",
            "location": 560,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "invitee": []
            }
        }
    },
    "hub-master/manager/users/signals.py": {
        "clear_user_session_data": {
            "name": "clear_user_session_data",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sender": [
                    "bool",
                    "Optional[str]",
                    "excars.models.user.User"
                ],
                "request": [
                    "dict",
                    "jumeaux.models.Request"
                ],
                "user": [
                    "bool",
                    "Optional[str]",
                    "excars.models.user.User"
                ]
            }
        },
        "set_last_provider": {
            "name": "set_last_provider",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sender": [
                    "bool",
                    "Optional[str]",
                    "zerver.models.UserProfile",
                    "Dict[str, Any]"
                ],
                "request": [
                    "bool",
                    "Optional[str]",
                    "zerver.models.UserProfile",
                    "Dict[str, Any]"
                ],
                "response": [
                    "str",
                    "bool",
                    "zerver.models.UserProfile"
                ],
                "user": [
                    "bool",
                    "Optional[str]",
                    "zerver.models.UserProfile",
                    "Dict[str, Any]"
                ]
            }
        },
        "add_new_emails": {
            "name": "add_new_emails",
            "location": 41,
            "return": [
                "None",
                "Set[str]",
                "List[str]",
                "dict",
                "Tuple[int, str]",
                "List[T]",
                "Callable[..., None]"
            ],
            "arguments": {
                "sender": [
                    "bool",
                    "Optional[str]",
                    "List[str]"
                ],
                "request": [
                    "bool",
                    "Optional[str]",
                    "List[str]"
                ],
                "response": [
                    "bool",
                    "Optional[str]",
                    "List[str]"
                ],
                "user": [
                    "django.contrib.auth.models.AbstractUser",
                    "users.models.JustfixUser",
                    "str",
                    "asgard.models.user.User"
                ]
            }
        },
        "update_data_from_provider": {
            "name": "update_data_from_provider",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sender": [
                    "List[str]",
                    "Dict[str, Union[str, int]]",
                    "dict",
                    "str",
                    "list",
                    "Tuple[bytes]"
                ],
                "request": [
                    "List[str]",
                    "Dict[str, Union[str, int]]",
                    "dict",
                    "str",
                    "list",
                    "Tuple[bytes]"
                ],
                "sociallogin": [
                    "List[Dict[str, Any]]",
                    "float",
                    "dict",
                    "str"
                ]
            }
        }
    },
    "hub-master/manager/users/tasks.py": {
        "update_services_all_users": {
            "name": "update_services_all_users",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "services": [
                    "list[typing.Text]",
                    "int",
                    "str",
                    "zerver.models.Realm"
                ]
            }
        },
        "update_services_for_user": {
            "name": "update_services_for_user",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "user": [
                    "zerver.models.UserProfile",
                    "Optional[Dict[str, Any]]",
                    "bob_emploi.frontend.api.user_pb2.User",
                    "int",
                    "bytes",
                    "models.order.Order"
                ],
                "services": [
                    "list[typing.Text]",
                    "List[Optional[str]]",
                    "bool",
                    "daylighdb.models.User",
                    "Dict[str, Any]"
                ]
            }
        },
        "update_userflow": {
            "name": "update_userflow",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "user": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "data": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        }
    },
    "hub-master/manager/users/tasks_tests.py": {
        "UserTasksTests.test_update_services_all_users": {
            "name": "test_update_services_all_users",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "httpx_post": [
                    "mock.MagicMock",
                    "str"
                ]
            }
        },
        "UserTasksTests.test_update_userflow": {
            "name": "test_update_userflow",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "httpx_post": []
            }
        }
    },
    "hub-master/manager/users/__init__.py": {},
    "hub-master/manager/users/api/serializers.py": {
        "UserSerializer.get_personal_account_attr": {
            "name": "get_personal_account_attr",
            "location": 36,
            "return": [
                "None",
                "str",
                "Optional[dict]",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "User",
                    "app.models.User",
                    "passzero.models.user.User",
                    "zerver.models.UserProfile",
                    "models.user.UserModel",
                    "users.models.User"
                ],
                "attr": [
                    "User",
                    "app.models.User",
                    "passzero.models.user.User",
                    "zerver.models.UserProfile",
                    "models.user.UserModel",
                    "users.models.User"
                ]
            }
        },
        "UserSerializer.get_display_name": {
            "name": "get_display_name",
            "location": 43,
            "return": [
                "str",
                "Optional[str]",
                "topicdb.core.models.language.Language"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "zerver.models.UserProfile",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "UserSerializer.get_location": {
            "name": "get_location",
            "location": 47,
            "return": [
                "Optional[str]",
                "str",
                "tuple",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "zerver.models.UserProfile",
                    "dict",
                    "str",
                    "django.contrib.auth.models.AbstractUser"
                ]
            }
        },
        "UserSerializer.get_image": {
            "name": "get_image",
            "location": 52,
            "return": [
                "None",
                "str",
                "zilencer.models.RemoteZulipServer",
                "User",
                "users.models.JustfixUser",
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "tracim.models.auth.User",
                    "flask_appbuilder.security.sqla.models.User",
                    "bob_emploi.frontend.api.user_pb2.User",
                    "zerver.models.UserProfile",
                    "users.models.JustfixUser",
                    "asgard.models.agenAgent",
                    "models.User",
                    "str",
                    "Optional[cmk.utils.type_defs.UserId]"
                ]
            }
        },
        "UserSerializer.get_website": {
            "name": "get_website",
            "location": 61,
            "return": [
                "Optional[str]",
                "Optional[Dict[str, Any]]",
                "int",
                "Sequence[str]",
                "bool",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "zerver.models.UserProfile",
                    "str",
                    "django.contrib.auth.models.AbstractUser",
                    "dict",
                    "Optional[Dict[str, str]]",
                    "Dict[str, str]"
                ]
            }
        },
        "UserSerializer.get_public_email": {
            "name": "get_public_email",
            "location": 65,
            "return": [
                "Optional[str]",
                "tuple",
                "Sequence[str]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "zerver.models.UserProfile",
                    "str",
                    "django.contrib.auth.models.AbstractUser",
                    "dict",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "MeLinkedAccountSerializer.get_email": {
            "name": "get_email",
            "location": 101,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[Dict[str, Any]]",
                "Callable[[], T]",
                "bytes",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "salon.models.Stylist",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "MeSerializer.get_orgs_summary": {
            "name": "get_orgs_summary",
            "location": 173,
            "return": [
                "bool",
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "User",
                    "int",
                    "server.models.User",
                    "lms.lmsdb.models.User",
                    "bool",
                    "tracim.models.data.Workspace"
                ]
            }
        },
        "MeSerializer.get_projects_summary": {
            "name": "get_projects_summary",
            "location": 177,
            "return": [
                "str",
                "Dict[str, Any]",
                "tracim.models.data.Content",
                "bool",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "app.models.Game",
                    "str",
                    "authark.application.domain.common.User"
                ]
            }
        },
        "MeSerializer.get_feature_flags": {
            "name": "get_feature_flags",
            "location": 181,
            "return": [
                "str",
                "Optional[str]",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "int",
                    "str",
                    "List[domain.models.User]",
                    "Optional[str]",
                    "Optional[int]",
                    "User",
                    "bool",
                    "Dict[str, int]"
                ]
            }
        },
        "UserIdentifierSerializer.validate": {
            "name": "validate",
            "location": 199,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "InviteSerializer.get_url": {
            "name": "get_url",
            "location": 297,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Callable",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "InviteSerializer.create": {
            "name": "create",
            "location": 304,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "OrderedDict",
                    "raiden.utils.ABI",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        }
    },
    "hub-master/manager/users/api/serializers_test.py": {
        "test_user_serializer_no_personal_account": {
            "name": "test_user_serializer_no_personal_account",
            "location": 5,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "hub-master/manager/users/api/urls.py": {},
    "hub-master/manager/users/api/views/features.py": {
        "FeaturesView.get": {
            "name": "get",
            "location": 22,
            "return": [
                "Response",
                "int",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "FeaturesView.patch": {
            "name": "patch",
            "location": 29,
            "return": [
                "Response",
                "str",
                "Dict[str, Any]",
                "dict",
                "float"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request"
                ]
            }
        }
    },
    "hub-master/manager/users/api/views/features_tests.py": {
        "FeaturesTestCase.setUpClass": {
            "name": "setUpClass",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type[Any]",
                    "List[str]",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "bool"
                ]
            }
        },
        "FeaturesTestCase.test_ok": {
            "name": "test_ok",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FeaturesTestCase.test_errors": {
            "name": "test_errors",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/manager/users/api/views/invites.py": {
        "InvitesViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 27,
            "return": [
                "Tuple[float, float]",
                "str",
                "bool",
                "allennlp.models.archival.Archive"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvitesViewSet.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 39,
            "return": [
                "None",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvitesViewSet.get_serializer": {
            "name": "get_serializer",
            "location": 45,
            "return": [
                "str",
                "Dict[str, Any]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvitesViewSet.get_response_context": {
            "name": "get_response_context",
            "location": 105,
            "return": [
                "Dict[str, Union[int, str]]",
                "Dict[int, List[str]]",
                "Dict[str, Dict]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/manager/users/api/views/tokens.py": {
        "authenticate_openid": {
            "name": "authenticate_openid",
            "location": 197,
            "return": [],
            "arguments": {
                "request": [],
                "token": []
            }
        },
        "generate_username": {
            "name": "generate_username",
            "location": 284,
            "return": [
                "None",
                "str"
            ],
            "arguments": {
                "email": [],
                "given_name": [],
                "family_name": []
            }
        },
        "TokensViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokensViewSet.get_object": {
            "name": "get_object",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "token": [
                    "None"
                ]
            }
        },
        "TokensViewSet.get_permissions": {
            "name": "get_permissions",
            "location": 102,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokensViewSet.list": {
            "name": "list",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "TokensViewSet.create": {
            "name": "create",
            "location": 131,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "TokensViewSet.retrieve": {
            "name": "retrieve",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "token": [
                    "None"
                ]
            }
        },
        "TokensViewSet.destroy": {
            "name": "destroy",
            "location": 188,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "token": [
                    "None"
                ]
            }
        },
        "generate_username.check_name": {
            "name": "check_name",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "name": []
            }
        }
    },
    "hub-master/manager/users/api/views/tokens_tests.py": {
        "parse_date": {
            "name": "parse_date",
            "location": 18,
            "return": [],
            "arguments": {
                "date_string": []
            }
        },
        "mock_verify_token": {
            "name": "mock_verify_token",
            "location": 118,
            "return": [],
            "arguments": {
                "token": []
            }
        },
        "mock_verify_token_fail": {
            "name": "mock_verify_token_fail",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TokenTestCase.authenticate": {
            "name": "authenticate",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [],
                "prefix": []
            }
        },
        "TokenTestCase.unauthenticate": {
            "name": "unauthenticate",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenTestCase.list": {
            "name": "list",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "TokenTestCase.create": {
            "name": "create",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "dict"
                ]
            }
        },
        "TokenTestCase.retrieve": {
            "name": "retrieve",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "TokenTestCase.destroy": {
            "name": "destroy",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "TokenFlowTests.test_success": {
            "name": "test_success",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenFlowTests.test_failure": {
            "name": "test_failure",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenCreateOpenIdTests.create": {
            "name": "create",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "claims": []
            }
        },
        "TokenCreateOpenIdTests.test_no_token": {
            "name": "test_no_token",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenCreateOpenIdTests.test_bad_token": {
            "name": "test_bad_token",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenCreateOpenIdTests.test_token_expired": {
            "name": "test_token_expired",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenCreateOpenIdTests.test_missing_issuer": {
            "name": "test_missing_issuer",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenCreateOpenIdTests.test_invalid_issuer": {
            "name": "test_invalid_issuer",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenCreateOpenIdTests.test_invalid_audience": {
            "name": "test_invalid_audience",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenCreateOpenIdTests.test_verify_token_failure": {
            "name": "test_verify_token_failure",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenCreateOpenIdTests.test_unverified_email": {
            "name": "test_unverified_email",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenCreateOpenIdTests.test_existing_verified_email": {
            "name": "test_existing_verified_email",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenCreateOpenIdTests.test_existing_unverified_email": {
            "name": "test_existing_unverified_email",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "send_mock": []
            }
        },
        "TokenCreateOpenIdTests.test_new_email": {
            "name": "test_new_email",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenCreateOpenIdTests.test_generate_username": {
            "name": "test_generate_username",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenAuthenticationTests.me": {
            "name": "me",
            "location": 267,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenAuthenticationTests.test_success": {
            "name": "test_success",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenAuthenticationTests.test_failure": {
            "name": "test_failure",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/manager/users/api/views/users.py": {
        "UsersViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 31,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersViewSet.get_object": {
            "name": "get_object",
            "location": 60,
            "return": [
                "str",
                "Optional[str]",
                "dict",
                "List[str]",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersViewSet.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 75,
            "return": [
                "str",
                "Optional[str]",
                "\"VersionedAnalyzer\""
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersViewSet.list": {
            "name": "list",
            "location": 93,
            "return": [
                "Response",
                "dict",
                "Dict[str, str]",
                "bool",
                "int",
                "Collection[Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "django.http.HttpRequest",
                    "base.Request",
                    "rest_framework.requesRequest",
                    "Dict[str, str]",
                    "django.http.requesHttpRequest",
                    "dict"
                ]
            }
        },
        "UsersViewSet.retrieve": {
            "name": "retrieve",
            "location": 119,
            "return": [
                "str",
                "core_lib.core.models.Event",
                "dict",
                "Optional[core.models.User]",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict",
                    "django.http.HttpRequest",
                    "list",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "UsersViewSet.me": {
            "name": "me",
            "location": 133,
            "return": [
                "Response",
                "Optional[str]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "aiohttp.web.Request"
                ]
            }
        }
    },
    "hub-master/manager/users/api/views/users_tests.py": {
        "UserAPIViewsTests.list_users": {
            "name": "list_users",
            "location": 12,
            "return": [
                "List[str]",
                "str",
                "dict",
                "Optional[bool]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "dict",
                    "Union[str, Dict[str, Any]]"
                ],
                "data": [
                    "dict",
                    "Union[str, Dict[str, Any]]"
                ]
            }
        },
        "UserAPIViewsTests.retrieve_user": {
            "name": "retrieve_user",
            "location": 15,
            "return": [
                "models.User",
                "Optional[str]",
                "arxiv.users.domain.User",
                "Dict[UserID, services.user.transfer.models.User]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "Dict[Hashable, Any]",
                    "mediaarchiver.models.Account",
                    "Union[server.models.User, int]",
                    "models.User",
                    "zerver.models.UserProfile"
                ],
                "user_": [
                    "str",
                    "Dict[Hashable, Any]",
                    "mediaarchiver.models.Account",
                    "Union[server.models.User, int]",
                    "models.User",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "UserAPIViewsTests.retrieve_me": {
            "name": "retrieve_me",
            "location": 18,
            "return": [
                "dict",
                "arxiv.users.domain.User",
                "bool",
                "Sequence[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "models.User",
                    "Optional[str]",
                    "bool",
                    "zerver.models.UserProfile",
                    "server.models.User",
                    "bob_emploi.frontend.api.user_pb2.User",
                    "tracim.models.auth.User",
                    "User"
                ]
            }
        },
        "UserAPIViewsTests.test_list": {
            "name": "test_list",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserAPIViewsTests.test_retrieve_user": {
            "name": "test_retrieve_user",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserAPIViewsTests.test_retrieve_me": {
            "name": "test_retrieve_me",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/manager/users/management/commands/merge_users.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 46,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/manager/users/migrations/0001_initial.py": {},
    "hub-master/manager/users/migrations/0002_anonuser.py": {},
    "hub-master/manager/users/migrations/0003_auto_20201005_1924.py": {},
    "hub-master/manager/users/migrations/0004_features.py": {
        "create_flags": {
            "name": "create_flags",
            "location": 4,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "Sequence[services.seating.models.seaSeat]",
                    "str",
                    "gardnr.models.Grow"
                ],
                "schema_editor": [
                    "int",
                    "bool",
                    "purplship.core.models.ShipmentRequest",
                    "Tuple[int, int]",
                    "django.db.backends.postgresql.schema.DatabaseSchemaEditor",
                    "List[str]"
                ]
            }
        }
    },
    "hub-master/manager/users/migrations/__init__.py": {},
    "hub-master/manager/users/socialaccount/adapter.py": {
        "SocialAccountAdapter.pre_social_login": {
            "name": "pre_social_login",
            "location": 13,
            "return": [
                "None",
                "app.models.Article",
                "core.models.Resource",
                "Iterator"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "sociallogin": [
                    "dict",
                    "Dict[str, Any]",
                    "django.db.models.query.QuerySet",
                    "bytes",
                    "Dict[str, str]"
                ]
            }
        },
        "SocialAccountAdapter.pre_social_login.primary_first": {
            "name": "primary_first",
            "location": 59,
            "return": [
                "int",
                "bool",
                "str",
                "type",
                "dict",
                "float"
            ],
            "arguments": {
                "email": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, Dict[str, Any]]",
                    "str"
                ]
            }
        }
    },
    "hub-master/manager/users/socialaccount/adapter_tests.py": {
        "mocked_requests_get": {
            "name": "mocked_requests_get",
            "location": 28,
            "return": [
                "dict",
                "MockedResponse"
            ],
            "arguments": {}
        },
        "SocialAccountAdapterTests.setUp": {
            "name": "setUp",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocialAccountAdapterTests._create_user": {
            "name": "_create_user",
            "location": 77,
            "return": [
                "zam_repondeur.models.Lecture",
                "core.models.UserPreferences",
                "set",
                "int",
                "user_models.User",
                "bool",
                "django.db.models.QuerySet"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "typing.Text",
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "dict"
                ],
                "verified": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "models.User",
                    "django.contrib.contenttypes.models.ContentType"
                ]
            }
        },
        "SocialAccountAdapterTests._create_social_user": {
            "name": "_create_social_user",
            "location": 87,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "emails": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "provider": [
                    "str",
                    "bytes",
                    "List[Dict[str, Any]]",
                    "bool"
                ],
                "uid": [
                    "str",
                    "Sequence[str]"
                ],
                "token": [
                    "None",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "Optional[Type[Any]]",
                    "List[int]"
                ]
            }
        },
        "SocialAccountAdapterTests.test_different_email": {
            "name": "test_different_email",
            "location": 114,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocialAccountAdapterTests.test_same_email_verified": {
            "name": "test_same_email_verified",
            "location": 124,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocialAccountAdapterTests.test_same_email_unverified_1": {
            "name": "test_same_email_unverified_1",
            "location": 134,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocialAccountAdapterTests.test_same_email_unverified_2": {
            "name": "test_same_email_unverified_2",
            "location": 143,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocialAccountAdapterTests.test_github_auto_verified": {
            "name": "test_github_auto_verified",
            "location": 153,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get": [
                    "mock.Mock",
                    "mock.MagicMock",
                    "Callable"
                ]
            }
        },
        "SocialAccountAdapterTests.test_github_unverified_match": {
            "name": "test_github_unverified_match",
            "location": 162,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get": [
                    "mock.Mock",
                    "Callable",
                    "mock.MagicMock"
                ]
            }
        },
        "SocialAccountAdapterTests.test_github_secondary_email": {
            "name": "test_github_secondary_email",
            "location": 173,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get": [
                    "mock.Mock",
                    "Callable",
                    "mock.MagicMock"
                ]
            }
        },
        "mocked_requests_get.MockedResponse.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "json_data": [
                    "Optional[\"TrackingData\"]",
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ],
                "status_code": [
                    "int",
                    "str",
                    "List[Dict[str, Any]]",
                    "shop.transfer.models.ShopID"
                ]
            }
        },
        "mocked_requests_get.MockedResponse.json": {
            "name": "json",
            "location": 34,
            "return": [
                "str",
                "Optional[float]",
                "bool",
                "django.http.HttpRequest"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/manager/users/socialaccount/tokens.py": {
        "get_user_social_token": {
            "name": "get_user_social_token",
            "location": 40,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "int",
                "zerver.models.Realm",
                "Optional[List[str]]"
            ],
            "arguments": {
                "user": [
                    "zerver.models.UserProfile",
                    "bool",
                    "users.models.JustfixUser",
                    "str",
                    "musictaxonomy.spotify.models.SpotifyUser",
                    "asgard.models.user.User",
                    "kippo.accounts.models.KippoUser"
                ],
                "provider": [
                    "src.domain.entity.user.User",
                    "str",
                    "http_quesuser.model.User",
                    "int",
                    "medtagger.database.models.Scan"
                ],
                "raise_exception": [
                    "bool",
                    "models.characters.character_base.Character",
                    "zerver.models.UserProfile",
                    "str"
                ]
            }
        },
        "get_user_google_token": {
            "name": "get_user_google_token",
            "location": 73,
            "return": [
                "tuple[None]",
                "Optional[dict]",
                "str",
                "Optional[str]",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "user": [
                    "zerver.models.UserProfile",
                    "django.contrib.auth.models.User",
                    "users.models.JustfixUser",
                    "str",
                    "zam_repondeur.models.Dossier"
                ]
            }
        },
        "get_user_social_tokens": {
            "name": "get_user_social_tokens",
            "location": 131,
            "return": [
                "dict",
                "str",
                "int",
                "float",
                "List[List[str]]"
            ],
            "arguments": {
                "user": [
                    "zerver.models.UserProfile",
                    "django.contrib.auth.models.User",
                    "users.models.JustfixUser",
                    "str",
                    "zam_repondeur.models.Dossier"
                ]
            }
        },
        "refresh_user_access_token": {
            "name": "refresh_user_access_token",
            "location": 143,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "user": [
                    "passzero.models.user.User",
                    "users.models.JustfixUser",
                    "zerver.models.UserProfile",
                    "users.models.User"
                ],
                "provider": [
                    "passzero.models.user.User",
                    "users.models.JustfixUser",
                    "legistar.models.EventItem",
                    "abilian.core.models.subjects.User"
                ],
                "token": [
                    "services.shop.order.models.order_evenOrderEvent",
                    "Union[zerver.models.UserProfile, zilencer.models.RemoteZulipServer]",
                    "utils.clienClient",
                    "users.models.JustfixUser",
                    "zerver.models.Client"
                ]
            }
        },
        "Provider.has": {
            "name": "has",
            "location": 27,
            "return": [
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "Provider.from_app": {
            "name": "from_app",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Sequence[int]"
                ],
                "app": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "hub-master/manager/users/socialaccount/tokens_tests.py": {
        "TokensTestCase.test_no_existing_token": {
            "name": "test_no_existing_token",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokensTestCase.test_an_existing_refresh_token": {
            "name": "test_an_existing_refresh_token",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/manager/users/socialaccount/__init__.py": {},
    "hub-master/manager/users/socialaccount/providers/__init__.py": {},
    "hub-master/manager/users/socialaccount/providers/gas/provider.py": {},
    "hub-master/manager/users/socialaccount/providers/gas/__init__.py": {},
    "hub-master/manager/users/ui/urls.py": {},
    "hub-master/manager/users/ui/views.py": {
        "invites_create": {
            "name": "invites_create",
            "location": 86,
            "return": [
                "int",
                "Dict[str, Any]",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "invites_list": {
            "name": "invites_list",
            "location": 127,
            "return": [
                "bool",
                "int",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "accept_invite_after_signup": {
            "name": "accept_invite_after_signup",
            "location": 185,
            "return": [
                "None",
                "app.models.Article",
                "core.models.Resource",
                "Iterator"
            ],
            "arguments": {
                "sender": [
                    "django.http.HttpRequest",
                    "Union[zerver.models.UserProfile, django.contrib.auth.models.AnonymousUser]"
                ],
                "request": [
                    "django.http.HttpRequest",
                    "dict",
                    "zerver.models.UserProfile",
                    "bob_emploi.frontend.api.auth_pb2.AuthRequest",
                    "Tuple[int]"
                ],
                "user": [
                    "django.http.HttpRequest",
                    "str",
                    "bool"
                ]
            }
        },
        "features": {
            "name": "features",
            "location": 210,
            "return": [
                "int",
                "Dict[str, Any]",
                "dict",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "redirect": {
            "name": "redirect",
            "location": 223,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "dict",
                    "str"
                ]
            }
        },
        "AuthenticationMixin.get_context_data": {
            "name": "get_context_data",
            "location": 24,
            "return": [
                "dict",
                "str",
                "Callable",
                "bytes",
                "Dict[str, float]",
                "Dict[str, Union[str, bool]]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountRoleMixin.get_context_data": {
            "name": "get_context_data",
            "location": 61,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AcceptInviteView.get_object": {
            "name": "get_object",
            "location": 146,
            "return": [
                "None",
                "Optional[str]",
                "bool",
                "str",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AcceptInviteView.post": {
            "name": "post",
            "location": 155,
            "return": [
                "dict",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "hub-master/manager/users/ui/views_tests.py": {
        "SignInTestCase.test_redirect_after_sign_in": {
            "name": "test_redirect_after_sign_in",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/manager/users/ui/__init__.py": {},
    "hub-master/overseer/overseer.py": {
        "request": {
            "name": "request",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "method": [],
                "url": []
            }
        },
        "get_event_time": {
            "name": "get_event_time",
            "location": 89,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "update_job": {
            "name": "update_job",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "id": [],
                "data": []
            }
        },
        "task_sent": {
            "name": "task_sent",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "task_received": {
            "name": "task_received",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "task_started": {
            "name": "task_started",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "task_succeeded": {
            "name": "task_succeeded",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "task_updated": {
            "name": "task_updated",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "task_failed": {
            "name": "task_failed",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "task_rejected": {
            "name": "task_rejected",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "task_revoked": {
            "name": "task_revoked",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "task_retried": {
            "name": "task_retried",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "worker_online": {
            "name": "worker_online",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "worker_heartbeat": {
            "name": "worker_heartbeat",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "worker_offline": {
            "name": "worker_offline",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "Sender.run": {
            "name": "run",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Receiver.__init__": {
            "name": "__init__",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": []
            }
        },
        "Receiver.process": {
            "name": "process",
            "location": 285,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "event": []
            }
        },
        "Collector.__init__": {
            "name": "__init__",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "Collector.add_worker": {
            "name": "add_worker",
            "location": 348,
            "return": [
                "tuple[typing.Optional[list]]"
            ],
            "arguments": {
                "self": [],
                "hostname": []
            }
        },
        "Collector.remove_worker": {
            "name": "remove_worker",
            "location": 394,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hostname": []
            }
        },
        "Collector.run": {
            "name": "run",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/scheduler/scheduler.py": {},
    "hub-master/scheduler/settings.py": {},
    "hub-master/worker/config.py": {
        "get_working_dir": {
            "name": "get_working_dir",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "project": [
                    "str"
                ]
            }
        },
        "get_snapshots_root": {
            "name": "get_snapshots_root",
            "location": 29,
            "return": [
                "dict"
            ],
            "arguments": {}
        },
        "get_snapshot_dir": {
            "name": "get_snapshot_dir",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "project": [
                    "str",
                    "int",
                    "Dict[str, Sequence[str]]"
                ],
                "snapshot": [
                    "str",
                    "int",
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "get_content_root": {
            "name": "get_content_root",
            "location": 46,
            "return": [
                "dict",
                "Sequence[int]"
            ],
            "arguments": {}
        },
        "get_node_modules_bin": {
            "name": "get_node_modules_bin",
            "location": 53,
            "return": [
                "str",
                "Optional[\"LocalizedString\"]",
                "Optional[str]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "get_node_modules_path": {
            "name": "get_node_modules_path",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "subpath": [
                    "str"
                ]
            }
        }
    },
    "hub-master/worker/conftest.py": {
        "tempdir": {
            "name": "tempdir",
            "location": 8,
            "return": [
                "typing.Generator[TempDirectory]"
            ],
            "arguments": {}
        }
    },
    "hub-master/worker/worker.py": {
        "register": {
            "name": "register",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "register.run": {
            "name": "run",
            "location": 85,
            "return": [
                "str",
                "list",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/worker/jobs/archive.py": {
        "Archive.do": {
            "name": "do",
            "location": 27,
            "return": [
                "str",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "str"
                ],
                "snapshot": [
                    "Union[str, Iterable[str]]"
                ],
                "path": [
                    "str",
                    "Callable[[str], None]"
                ],
                "url": [
                    "str"
                ],
                "secrets": [
                    "str"
                ]
            }
        }
    },
    "hub-master/worker/jobs/clean.py": {
        "Clean.do": {
            "name": "do",
            "location": 22,
            "return": [
                "list",
                "os.PathLike",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/worker/jobs/clean_test.py": {
        "test_clean": {
            "name": "test_clean",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tempdir": [
                    "str"
                ]
            }
        }
    },
    "hub-master/worker/jobs/convert.py": {
        "encoda_args": {
            "name": "encoda_args",
            "location": 113,
            "return": [
                "List[str]",
                "Iterable[str]",
                "Optional[Iterable[str]]",
                "Callable[[None], None]",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "input": [
                    "bytes"
                ],
                "outputs": [
                    "bytes",
                    "str"
                ],
                "options": [
                    "str",
                    "List[Dict]",
                    "Tuple[str]",
                    "dict",
                    "Dict[int, Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "create_gdoc_source": {
            "name": "create_gdoc_source",
            "location": 157,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "output": [
                    "str",
                    "bytes",
                    "bool",
                    "int"
                ],
                "secrets": [
                    "str",
                    "fs.base.FS",
                    "int",
                    "bool"
                ]
            }
        },
        "Convert.do": {
            "name": "do",
            "location": 28,
            "return": [
                "str",
                "os.PathLike"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "str",
                    "Optional[str]"
                ],
                "output": [
                    "str",
                    "Dict[str, Any]"
                ],
                "options": [
                    "dict",
                    "bool",
                    "int",
                    "Set[str]",
                    "Optional[str]",
                    "BaseException"
                ],
                "src": [
                    "typing.Text",
                    "bool",
                    "int"
                ],
                "dest": [
                    "str",
                    "typing.Text"
                ],
                "secrets": [
                    "dict",
                    "bool",
                    "List[Dict]",
                    "str",
                    "BinaryIO"
                ]
            }
        }
    },
    "hub-master/worker/jobs/convert_test.py": {
        "test_bad_args": {
            "name": "test_bad_args",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_simple": {
            "name": "test_simple",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tempdir": [
                    "dict"
                ]
            }
        },
        "test_multiple_outputs": {
            "name": "test_multiple_outputs",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tempdir": [
                    "bool"
                ]
            }
        },
        "test_to_gdoc": {
            "name": "test_to_gdoc",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tempdir": []
            }
        }
    },
    "hub-master/worker/jobs/pin.py": {
        "Pin.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "credentials": [
                    "dict",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Pin.do": {
            "name": "do",
            "location": 41,
            "return": [
                "Optional[int]",
                "bool",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "container_image": [
                    "None",
                    "int",
                    "list",
                    "bytes",
                    "str"
                ]
            }
        },
        "Pin.parse": {
            "name": "parse",
            "location": 70,
            "return": [
                "tuple[None]",
                "bool",
                "Optional[bool]",
                "Optional[str]",
                "Optional[float]"
            ],
            "arguments": {
                "container_image": [
                    "bool",
                    "Dict[str, List[bytes]]",
                    "Iterable[str]",
                    "dict"
                ]
            }
        },
        "Pin.deparse": {
            "name": "deparse",
            "location": 96,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "host": [
                    "bool",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "str"
                ],
                "repo": [
                    "bool",
                    "str"
                ],
                "digest": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "Pin.authenticate": {
            "name": "authenticate",
            "location": 103,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "dxf": [
                    "str",
                    "int",
                    "dict",
                    "Optional[Dict]",
                    "Dict[str, Any]"
                ],
                "response": [
                    "golem_messages.message.base.Message",
                    "int"
                ]
            }
        }
    },
    "hub-master/worker/jobs/pin_test.py": {
        "test_parse": {
            "name": "test_parse",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_run": {
            "name": "test_run",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "hub-master/worker/jobs/register.py": {
        "Register.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "server": [
                    "None",
                    "int",
                    "bool",
                    "float"
                ],
                "credentials": [
                    "None",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Register.do": {
            "name": "do",
            "location": 36,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, float]",
                "Dict[str, Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Dict[str, Any]",
                    "List[str]",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "doi": [
                    "str"
                ],
                "url": [
                    "str"
                ],
                "batch": [
                    "Tuple[str, str]",
                    "int"
                ]
            }
        }
    },
    "hub-master/worker/jobs/register_test.py": {
        "is_isodate": {
            "name": "is_isodate",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": []
            }
        },
        "test_register_article": {
            "name": "test_register_article",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_register_review": {
            "name": "test_register_review",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_register_utf8": {
            "name": "test_register_utf8",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bad_credentials": {
            "name": "test_bad_credentials",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_no_credentials": {
            "name": "test_no_credentials",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "hub-master/worker/jobs/sleep.py": {
        "Sleep.do": {
            "name": "do",
            "location": 16,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "seconds": [
                    "int"
                ],
                "repeat": [
                    "int"
                ],
                "fail": [
                    "int",
                    "float",
                    "str"
                ]
            }
        }
    },
    "hub-master/worker/jobs/sleep_test.py": {
        "test_sleep": {
            "name": "test_sleep",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_sleep.send_event": {
            "name": "send_event",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "bool",
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "hub-master/worker/jobs/__init__.py": {},
    "hub-master/worker/jobs/base/job.py": {
        "Job.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.begin": {
            "name": "begin",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "task_id": [
                    "None",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Job.notify": {
            "name": "notify",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "typing.Text",
                    "us.states",
                    "List[int]",
                    "int",
                    "Hashable"
                ]
            }
        },
        "Job.flush": {
            "name": "flush",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.log": {
            "name": "log",
            "location": 88,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "Sequence",
                    "str"
                ],
                "message": [
                    "dict",
                    "str"
                ]
            }
        },
        "Job.error": {
            "name": "error",
            "location": 117,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str"
                ]
            }
        },
        "Job.warn": {
            "name": "warn",
            "location": 121,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "Tuple[Tuple[str, ...]]"
                ]
            }
        },
        "Job.info": {
            "name": "info",
            "location": 125,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int",
                    "float",
                    "Exception"
                ]
            }
        },
        "Job.debug": {
            "name": "debug",
            "location": 129,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "Job.success": {
            "name": "success",
            "location": 133,
            "return": [
                "str",
                "dict",
                "int",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "str",
                    "Mapping",
                    "int"
                ]
            }
        },
        "Job.terminated": {
            "name": "terminated",
            "location": 142,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.failure": {
            "name": "failure",
            "location": 158,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "int",
                    "Exception",
                    "bool"
                ]
            }
        },
        "Job.run": {
            "name": "run",
            "location": 171,
            "return": [
                "List[Dict]",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.do": {
            "name": "do",
            "location": 208,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/worker/jobs/base/job_test.py": {
        "test_logging": {
            "name": "test_logging",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_success": {
            "name": "test_success",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_terminated": {
            "name": "test_terminated",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_do_unimplemented": {
            "name": "test_do_unimplemented",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_logging.send_event": {
            "name": "send_event",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "List[Tuple[str, Callable]]",
                    "int"
                ]
            }
        }
    },
    "hub-master/worker/jobs/base/subprocess_job.py": {
        "SubprocessJob.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubprocessJob.do": {
            "name": "do",
            "location": 39,
            "return": [
                "None",
                "int",
                "bool",
                "List[Dict[str, Any]]",
                "Dict[str, Any]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "input": [
                    "bool",
                    "None"
                ]
            }
        },
        "SubprocessJob.terminated": {
            "name": "terminated",
            "location": 101,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubprocessJob.do.handle_stderr": {
            "name": "handle_stderr",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "stderr": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]",
                    "List[str]",
                    "Optional[Dict[str, str]]"
                ]
            }
        }
    },
    "hub-master/worker/jobs/base/subprocess_job_test.py": {
        "test_success": {
            "name": "test_success",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_input": {
            "name": "test_input",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_failure": {
            "name": "test_failure",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_logging_json": {
            "name": "test_logging_json",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_logging_ongoing": {
            "name": "test_logging_ongoing",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_failure.send_event": {
            "name": "send_event",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [],
                "task_id": [],
                "state": []
            }
        },
        "test_logging_json.send_event": {
            "name": "send_event",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [],
                "task_id": [],
                "state": []
            }
        },
        "test_logging_ongoing.send_event": {
            "name": "send_event",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str",
                    "int",
                    "bool"
                ],
                "task_id": [
                    "str",
                    "int",
                    "bool"
                ],
                "state": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "hub-master/worker/jobs/base/__init__.py": {},
    "hub-master/worker/jobs/extract/gdrive.py": {
        "extract_gdrive": {
            "name": "extract_gdrive",
            "location": 12,
            "return": [
                "str",
                "bytes",
                "apistar.types.WSGIEnviron",
                "dict"
            ],
            "arguments": {
                "source": [
                    "str",
                    "dict",
                    "Union[str, Dict[str, Any]]",
                    "Optional[str]"
                ],
                "filters": [
                    "dict",
                    "Optional[str]",
                    "str",
                    "float",
                    "Optional[float]"
                ],
                "secrets": [
                    "dict",
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "get_comments": {
            "name": "get_comments",
            "location": 25,
            "return": [
                "list",
                "str",
                "bool"
            ],
            "arguments": {
                "file_id": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "secrets": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "filter_comments": {
            "name": "filter_comments",
            "location": 39,
            "return": [
                "list",
                "float",
                "bool"
            ],
            "arguments": {
                "comments": [
                    "str",
                    "float",
                    "int",
                    "bool",
                    "Optional[Any]"
                ],
                "filters": [
                    "dict",
                    "Optional[bool]",
                    "Optional[str]",
                    "Optional[Union[float, str]]",
                    "str"
                ]
            }
        },
        "create_review": {
            "name": "create_review",
            "location": 59,
            "return": [
                "None",
                "bool",
                "Review",
                "Optional[str]",
                "Optional[float]"
            ],
            "arguments": {
                "comments": [
                    "Callable[[T], bool]",
                    "Optional[Exception]"
                ]
            }
        },
        "is_main": {
            "name": "is_main",
            "location": 97,
            "return": [
                "bool",
                "str",
                "Optional[List[str]]",
                "dict",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "parse_comment": {
            "name": "parse_comment",
            "location": 104,
            "return": [
                "None",
                "Optional[str]",
                "Comment",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Optional[dict]",
                    "Dict[str, Any]"
                ],
                "parse_markdown": [
                    "bool",
                    "int",
                    "bytes",
                    "dict"
                ]
            }
        }
    },
    "hub-master/worker/jobs/extract/gdrive_test.py": {
        "test_filter_comments": {
            "name": "test_filter_comments",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_no_comments": {
            "name": "test_no_comments",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_only_empty_comments": {
            "name": "test_only_empty_comments",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_no_comment_that_matches_main": {
            "name": "test_no_comment_that_matches_main",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_missing_id": {
            "name": "test_missing_id",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_missing_token": {
            "name": "test_missing_token",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_is_main": {
            "name": "test_is_main",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_fixture_2": {
            "name": "test_fixture_2",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "hub-master/worker/jobs/extract/github.py": {
        "extract_github": {
            "name": "extract_github",
            "location": 11,
            "return": [
                "Review",
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "source": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "type",
                    "Optional[str]"
                ],
                "filters": [
                    "dict",
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "secrets": [
                    "dict",
                    "str",
                    "bool"
                ]
            }
        },
        "parse_comment": {
            "name": "parse_comment",
            "location": 60,
            "return": [
                "Comment",
                "str",
                "int"
            ],
            "arguments": {
                "comment": [
                    "List[str]",
                    "int",
                    "Person"
                ]
            }
        },
        "parse_markdown": {
            "name": "parse_markdown",
            "location": 81,
            "return": [
                "Article",
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "content": [
                    "str",
                    "Optional[str]",
                    "List[bytes]"
                ]
            }
        }
    },
    "hub-master/worker/jobs/extract/github_test.py": {
        "test_get_review": {
            "name": "test_get_review",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "hub-master/worker/jobs/extract/__init__.py": {
        "Extract.do": {
            "name": "do",
            "location": 31,
            "return": [
                "List[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "list",
                    "str",
                    "Sequence[str]",
                    "Union[str, Dict[str, Any]]",
                    "Union[Type, Tuple[Type, ...]]"
                ],
                "filters": [
                    "str",
                    "dict"
                ],
                "secrets": [
                    "dict",
                    "str",
                    "Optional[str]",
                    "Callable"
                ]
            }
        }
    },
    "hub-master/worker/jobs/extract/__init__test.py": {
        "test_missing_source_type": {
            "name": "test_missing_source_type",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_unknown_source_type": {
            "name": "test_unknown_source_type",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_bad_arg_types": {
            "name": "test_bad_arg_types",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "hub-master/worker/jobs/pull/elife.py": {
        "pull_elife": {
            "name": "pull_elife",
            "location": 15,
            "return": [
                "dict[typing.Union[None,typing.Text], ]",
                "str",
                "pathlib.Path",
                "TextIO",
                "BinaryIO",
                "tuple"
            ],
            "arguments": {
                "source": [
                    "Dict[str, Any]",
                    "xml.etree.ElementTree.Element",
                    "dict",
                    "Optional[Container[str]]",
                    "Union[str, int]"
                ],
                "path": [
                    "str"
                ]
            }
        }
    },
    "hub-master/worker/jobs/pull/elife_test.py": {
        "test_ok": {
            "name": "test_ok",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tempdir": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "test_missing_article": {
            "name": "test_missing_article",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tempdir": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "hub-master/worker/jobs/pull/gdoc.py": {
        "pull_gdoc": {
            "name": "pull_gdoc",
            "location": 13,
            "return": [
                "dict[typing.Union[None,typing.Text], ]",
                "str",
                "pathlib.Path",
                "List[str]"
            ],
            "arguments": {
                "source": [
                    "str"
                ],
                "path": [
                    "pathlib.Path",
                    "str"
                ],
                "secrets": [
                    "dict",
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Callable[[str], None]"
                ]
            }
        }
    },
    "hub-master/worker/jobs/pull/gdoc_test.py": {
        "test_missing_token": {
            "name": "test_missing_token",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tempdir": [
                    "Dict[str, Sequence[str]]",
                    "str"
                ]
            }
        },
        "test_ok": {
            "name": "test_ok",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tempdir": [
                    "str"
                ]
            }
        }
    },
    "hub-master/worker/jobs/pull/gdrive.py": {
        "pull_gdrive": {
            "name": "pull_gdrive",
            "location": 13,
            "return": [
                "Dict[str, Any]",
                "str",
                "bytes"
            ],
            "arguments": {
                "source": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Optional[str]"
                ],
                "path": [
                    "None",
                    "str",
                    "Optional[str]",
                    "Tuple[str]",
                    "Dict[str, Any]"
                ],
                "secrets": [
                    "dict",
                    "mkdocs2.types.Files"
                ]
            }
        },
        "pull_file": {
            "name": "pull_file",
            "location": 35,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "files_resource": [
                    "str"
                ],
                "file_id": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "pull_folder": {
            "name": "pull_folder",
            "location": 52,
            "return": [
                "dict",
                "str",
                "TextIO",
                "BinaryIO",
                "tuple"
            ],
            "arguments": {
                "files_resource": [
                    "str",
                    "bytes",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "folder_id": [
                    "str",
                    "Union[str, bytes]",
                    "Optional[str]",
                    "BinaryIO"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "list_folder": {
            "name": "list_folder",
            "location": 75,
            "return": [
                "list",
                "str",
                "Tuple[float, float]"
            ],
            "arguments": {
                "files_resource": [
                    "Set[str]",
                    "str",
                    "list",
                    "List[str]"
                ],
                "folder_id": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "hub-master/worker/jobs/pull/gdrive_test.py": {
        "test_folder": {
            "name": "test_folder",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tempdir": [
                    "str",
                    "Dict[str, float]"
                ]
            }
        }
    },
    "hub-master/worker/jobs/pull/github.py": {
        "pull_github": {
            "name": "pull_github",
            "location": 21,
            "return": [
                "str",
                "Callable[[Mapping], Awaitable]",
                "Callable[[], Awaitable[Mapping]]",
                "Optional[BaseException]",
                "Optional[str]"
            ],
            "arguments": {
                "source": [
                    "pathlib.Path",
                    "Dict[str, str]",
                    "dict"
                ],
                "path": [
                    "pathlib.Path",
                    "None"
                ],
                "secrets": [
                    "dict",
                    "str",
                    "pathlib.Path",
                    "path.Path"
                ]
            }
        },
        "pull_zip": {
            "name": "pull_zip",
            "location": 55,
            "return": [
                "dict[None, ]",
                "str",
                "Tuple[str, str]",
                "Union[str, pathlib.Path]",
                "pathlib.Path",
                "tuple"
            ],
            "arguments": {
                "zip_file": [
                    "pathlib.Path",
                    "zipfile.ZipFile",
                    "str"
                ],
                "subpath": [
                    "typing.Text",
                    "str",
                    "pathlib.Path",
                    "path.Path",
                    "BinaryIO"
                ],
                "path": [
                    "typing.Text",
                    "str",
                    "Union[str, pathlib.Path]",
                    "bytes"
                ],
                "strip": [
                    "int",
                    "str",
                    "Union[str, pathlib.Path]",
                    "pathlib.Path"
                ]
            }
        }
    },
    "hub-master/worker/jobs/pull/github_test.py": {
        "test_public_repo": {
            "name": "test_public_repo",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tempdir": [
                    "str",
                    "dict"
                ]
            }
        },
        "test_subdirectory": {
            "name": "test_subdirectory",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tempdir": [
                    "str"
                ]
            }
        },
        "test_single_file": {
            "name": "test_single_file",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tempdir": [
                    "str",
                    "int"
                ]
            }
        },
        "test_large_zip": {
            "name": "test_large_zip",
            "location": 88,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tempdir": []
            }
        },
        "test_huge_zip": {
            "name": "test_huge_zip",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "tempdir": []
            }
        },
        "MockedHttpxStreamResponse.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "int",
                    "bool",
                    "bytes",
                    "List[str]",
                    "str"
                ],
                "url": [
                    "str",
                    "Set[str]",
                    "Optional[bool]"
                ]
            }
        },
        "MockedHttpxStreamResponse.__enter__": {
            "name": "__enter__",
            "location": 23,
            "return": [
                "MockedHttpxStreamResponse",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockedHttpxStreamResponse.__exit__": {
            "name": "__exit__",
            "location": 26,
            "return": [
                "MockedHttpxStreamResponse",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockedHttpxStreamResponse.iter_bytes": {
            "name": "iter_bytes",
            "location": 29,
            "return": [
                "typing.IO",
                "str",
                "Tuple[str]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/worker/jobs/pull/gsheet.py": {
        "pull_gsheet": {
            "name": "pull_gsheet",
            "location": 13,
            "return": [
                "dict[typing.Union[None,typing.Text], ]",
                "str",
                "pathlib.Path",
                "List[str]"
            ],
            "arguments": {
                "source": [
                    "str"
                ],
                "path": [
                    "pathlib.Path",
                    "str"
                ],
                "secrets": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "hub-master/worker/jobs/pull/gsheet_test.py": {
        "test_missing_token": {
            "name": "test_missing_token",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tempdir": [
                    "Dict[str, Sequence[str]]",
                    "str"
                ]
            }
        },
        "test_ok": {
            "name": "test_ok",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tempdir": [
                    "str"
                ]
            }
        }
    },
    "hub-master/worker/jobs/pull/http.py": {
        "pull_http": {
            "name": "pull_http",
            "location": 14,
            "return": [
                "str",
                "dict[typing.Union[None,str], ]",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "source": [
                    "dict",
                    "Callable[[str], None]",
                    "str"
                ],
                "path": [
                    "str"
                ],
                "secrets": [
                    "dict",
                    "List[str]",
                    "bool",
                    "List[Tuple[int, int]]",
                    "Iterable[str]",
                    "Optional[bool]"
                ]
            }
        }
    },
    "hub-master/worker/jobs/pull/http_test.py": {
        "test_extension_from_mimetype": {
            "name": "test_extension_from_mimetype",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tempdir": []
            }
        },
        "test_status_codes": {
            "name": "test_status_codes",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tempdir": [
                    "str",
                    "int"
                ]
            }
        },
        "MockedHttpxStreamResponse.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "int",
                    "bool",
                    "bytes",
                    "List[str]",
                    "str"
                ],
                "url": [
                    "Dict[str, Any]",
                    "dict",
                    "Optional[str]",
                    "Dict[str, str]",
                    "str",
                    "Optional[django.http.HttpRequest]"
                ]
            }
        },
        "MockedHttpxStreamResponse.__getattr__": {
            "name": "__getattr__",
            "location": 20,
            "return": [
                "Optional[str]",
                "str",
                "List[str]",
                "int",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "dict",
                    "List[str]",
                    "MutableMapping"
                ]
            }
        },
        "MockedHttpxStreamResponse.__enter__": {
            "name": "__enter__",
            "location": 23,
            "return": [
                "MockedHttpxStreamResponse",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockedHttpxStreamResponse.__exit__": {
            "name": "__exit__",
            "location": 26,
            "return": [
                "MockedHttpxStreamResponse",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/worker/jobs/pull/plos.py": {
        "pull_plos": {
            "name": "pull_plos",
            "location": 14,
            "return": [
                "dict[typing.Union[None,typing.Text], ]",
                "str",
                "pathlib.Path",
                "TextIO",
                "BinaryIO",
                "tuple"
            ],
            "arguments": {
                "source": [
                    "Dict[str, Any]",
                    "xml.etree.ElementTree.Element",
                    "dict",
                    "Optional[Container[str]]",
                    "Union[str, int]"
                ],
                "path": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "hub-master/worker/jobs/pull/plos_test.py": {
        "test_ok": {
            "name": "test_ok",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tempdir": []
            }
        }
    },
    "hub-master/worker/jobs/pull/upload.py": {
        "pull_upload": {
            "name": "pull_upload",
            "location": 9,
            "return": [
                "str",
                "tuple"
            ],
            "arguments": {
                "source": [
                    "dict",
                    "FrozenSet[str]"
                ],
                "path": [
                    "str",
                    "None"
                ]
            }
        }
    },
    "hub-master/worker/jobs/pull/upload_test.py": {
        "test_one": {
            "name": "test_one",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tempdir": []
            }
        },
        "test_overwrite": {
            "name": "test_overwrite",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tempdir": []
            }
        },
        "test_mergedirs": {
            "name": "test_mergedirs",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tempdir": []
            }
        }
    },
    "hub-master/worker/jobs/pull/__init__.py": {
        "Pull.do": {
            "name": "do",
            "location": 44,
            "return": [
                "OrderedDict",
                "int",
                "str",
                "django.http.HttpRequest"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Dict[str, float]",
                    "dict"
                ],
                "path": [
                    "Optional[str]",
                    "str"
                ],
                "secrets": [
                    "dict",
                    "bytes"
                ]
            }
        }
    },
    "hub-master/worker/jobs/pull/__init__test.py": {
        "test_missing_type": {
            "name": "test_missing_type",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_unknown_type": {
            "name": "test_unknown_type",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "hub-master/worker/jobs/pull/fixtures/make.py": {},
    "hub-master/worker/jobs/push/gdoc.py": {
        "push_gdoc": {
            "name": "push_gdoc",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "paths": [
                    "str",
                    "List[str]"
                ],
                "project": [
                    "str",
                    "bool"
                ],
                "source": [
                    "Optional[str]",
                    "Dict[str, float]",
                    "str",
                    "Optional[Sequence[str]]"
                ]
            }
        }
    },
    "hub-master/worker/jobs/push/gdoc_test.py": {
        "test_missing_token": {
            "name": "test_missing_token",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tempdir": [
                    "str"
                ]
            }
        },
        "test_ok": {
            "name": "test_ok",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tempdir": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "hub-master/worker/jobs/push/__init__.py": {
        "Push.do": {
            "name": "do",
            "location": 22,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "paths": [
                    "List[str]",
                    "str",
                    "Union[str, List]",
                    "Sequence[str]",
                    "TextIO"
                ],
                "project": [
                    "int",
                    "str",
                    "bytes",
                    "List[str]"
                ],
                "source": [
                    "str",
                    "dict",
                    "Optional[str]"
                ]
            }
        }
    },
    "hub-master/worker/jobs/session/kubernetes_session.py": {
        "KubernetesSession.do": {
            "name": "do",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KubernetesSession.attach": {
            "name": "attach",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KubernetesSession.poll": {
            "name": "poll",
            "location": 419,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KubernetesSession.terminated": {
            "name": "terminated",
            "location": 431,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KubernetesSession.completed": {
            "name": "completed",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/worker/jobs/session/kubernetes_session_test.py": {
        "test_k8s_session": {
            "name": "test_k8s_session",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_k8s_session.send_event": {
            "name": "send_event",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "str",
                    "int",
                    "bool"
                ],
                "task_id": [
                    "str",
                    "int",
                    "bool"
                ],
                "state": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "hub-master/worker/jobs/session/session.py": {},
    "hub-master/worker/jobs/session/subprocess_session.py": {
        "SubprocessSession.do": {
            "name": "do",
            "location": 15,
            "return": [
                "str",
                "type",
                "Optional[str]",
                "List[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hub-master/worker/jobs/session/__init__.py": {},
    "hub-master/worker/util/cache.py": {
        "expiring_lru_cache": {
            "name": "expiring_lru_cache",
            "location": 5,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "seconds": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "maxsize": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "expiring_lru_cache.wrapper_cache": {
            "name": "wrapper_cache",
            "location": 12,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "expiring_lru_cache.wrapper_cache.wrapped_func": {
            "name": "wrapped_func",
            "location": 18,
            "return": [
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "hub-master/worker/util/files.py": {
        "list_files": {
            "name": "list_files",
            "location": 31,
            "return": [
                "dict",
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "directory": [
                    "typing.Text",
                    "pathlib.Path",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "file_info": {
            "name": "file_info",
            "location": 46,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,None]]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path"
                ],
                "mimetype": [
                    "None",
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "file_ext": {
            "name": "file_ext",
            "location": 64,
            "return": [
                "pathlib.Path",
                "str"
            ],
            "arguments": {
                "path": [
                    "Union[str, pathlib.Path]",
                    "pathlib.Path",
                    "pathlib2.Path",
                    "bool",
                    "pathlib.PurePath"
                ]
            }
        },
        "file_mimetype": {
            "name": "file_mimetype",
            "location": 71,
            "return": [
                "tuple",
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.PosixPath",
                    "pathlib.Path"
                ]
            }
        },
        "file_fingerprint": {
            "name": "file_fingerprint",
            "location": 83,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "bytes_fingerprint": {
            "name": "bytes_fingerprint",
            "location": 96,
            "return": [
                "bool",
                "Dict[str, List[str]]",
                "float"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "str",
                    "List[Dict[str, Any]]",
                    "bytes"
                ]
            }
        },
        "is_within": {
            "name": "is_within",
            "location": 111,
            "return": [
                "bool",
                "List[str]",
                "str",
                "int",
                "Optional[int]",
                "pathlib.Path",
                "bytes",
                "Union[str, pathlib.Path]"
            ],
            "arguments": {
                "parent": [
                    "pathlib.Path",
                    "Union[str, bytes]",
                    "str",
                    "Optional[str]"
                ],
                "child": [
                    "pathlib.Path",
                    "Union[str, bytes]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "assert_within": {
            "name": "assert_within",
            "location": 118,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "parent": [
                    "bool",
                    "Dict[str, Any]",
                    "str"
                ],
                "child": [
                    "bool",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "ensure_dir": {
            "name": "ensure_dir",
            "location": 125,
            "return": [
                "Path",
                "str",
                "pathlib.Path",
                "List[int]"
            ],
            "arguments": {}
        },
        "ensure_parent": {
            "name": "ensure_parent",
            "location": 134,
            "return": [
                "Path",
                "str",
                "pathlib.Path"
            ],
            "arguments": {}
        },
        "temp_dir": {
            "name": "temp_dir",
            "location": 143,
            "return": [
                "pathlib.PosixPath",
                "str",
                "pathlib.Path",
                "Type[Any]",
                "List[str]"
            ],
            "arguments": {}
        },
        "remove_dir": {
            "name": "remove_dir",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "os.PathLike",
                    "paradigm.catalog.Path"
                ]
            }
        },
        "remove_if_dir": {
            "name": "remove_if_dir",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "move_files": {
            "name": "move_files",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [
                    "Optional[str]",
                    "str",
                    "Union[pathlib.Path, str]"
                ],
                "dest": [
                    "typing.Text",
                    "str",
                    "int"
                ],
                "cleanup": [
                    "bool",
                    "str",
                    "pathlib.Path",
                    "dict"
                ]
            }
        }
    },
    "hub-master/worker/util/files_test.py": {
        "test_is_within": {
            "name": "test_is_within",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_assert_within": {
            "name": "test_assert_within",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "hub-master/worker/util/gapis.py": {
        "google_credentials": {
            "name": "google_credentials",
            "location": 9,
            "return": [
                "GoogleCredentials",
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "secrets": [
                    "str",
                    "Optional[MutableMapping]",
                    "bool",
                    "Sequence[str]",
                    "dict"
                ]
            }
        },
        "gdocs_service": {
            "name": "gdocs_service",
            "location": 29,
            "return": [
                "str",
                "float",
                "bytes",
                "Set[str]"
            ],
            "arguments": {
                "secrets": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "gdrive_service": {
            "name": "gdrive_service",
            "location": 38,
            "return": [
                "str",
                "float",
                "bytes",
                "Set[str]"
            ],
            "arguments": {
                "secrets": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "gsheets_service": {
            "name": "gsheets_service",
            "location": 47,
            "return": [
                "str",
                "float",
                "bytes",
                "Set[str]"
            ],
            "arguments": {
                "secrets": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        }
    },
    "hub-master/worker/util/github_api.py": {
        "github_client": {
            "name": "github_client",
            "location": 17,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "token": [
                    "str",
                    "None"
                ]
            }
        },
        "github_user_as_person": {
            "name": "github_user_as_person",
            "location": 35,
            "return": [
                "Person",
                "str",
                "bool"
            ],
            "arguments": {
                "user": [
                    "bool",
                    "str",
                    "int",
                    "bug_buddy.schema.TesResult"
                ]
            }
        }
    },
    "hub-master/worker/util/http.py": {
        "HttpSession.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpSession.get_redirect_target": {
            "name": "get_redirect_target",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "resp": [
                    "bool",
                    "type"
                ]
            }
        },
        "HttpSession.check_host": {
            "name": "check_host",
            "location": 28,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "HttpSession.fetch_url": {
            "name": "fetch_url",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "stream": [
                    "str",
                    "bool"
                ]
            }
        },
        "HttpSession.pull": {
            "name": "pull",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "sink": [
                    "str",
                    "bool",
                    "urllib.parse.ParseResult"
                ]
            }
        },
        "HttpSession.is_malicious_host": {
            "name": "is_malicious_host",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "str",
                    "Callable",
                    "T",
                    "Type[Any]"
                ],
                "hostname": [
                    "Optional[Dict]",
                    "int"
                ]
            }
        }
    },
    "hub-master/worker/util/http_test.py": {
        "test_malicious_host": {
            "name": "test_malicious_host",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tempdir": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "hub-master/worker/util/network.py": {
        "get_local_ip": {
            "name": "get_local_ip",
            "location": 7,
            "return": [
                "typing.Text",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "get_random_port": {
            "name": "get_random_port",
            "location": 25,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "hub-master/worker/util/serialize.py": {
        "serialize": {
            "name": "serialize",
            "location": 4,
            "return": [
                "dict[typing.Text, ]",
                "bool",
                "list",
                "str",
                "int",
                "tuple"
            ],
            "arguments": {
                "node": [
                    "str"
                ]
            }
        }
    },
    "hub-master/worker/util/serialize_test.py": {
        "test_serialize": {
            "name": "test_serialize",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "hub-master/worker/util/working_directory.py": {
        "working_directory": {
            "name": "working_directory",
            "location": 6,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "hub-master/worker/util/__init__.py": {}
}
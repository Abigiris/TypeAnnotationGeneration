{
    "hueber-dev/setup.py": {},
    "hueber-dev/hueber/__init__.py": {},
    "hueber-dev/hueber/api/config.py": {
        "Config.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]"
                ],
                "ip": [
                    "str",
                    "Dict[str,Any]"
                ],
                "lazy": [
                    "Optional[Texte]",
                    "float",
                    "None",
                    "str"
                ]
            }
        },
        "Config.get_data": {
            "name": "get_data",
            "location": 24,
            "return": [
                "int",
                "Dict[str,str]",
                "bool",
                "str",
                "Dict[str,Any]",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.get_state": {
            "name": "get_state",
            "location": 28,
            "return": [
                "int",
                "Dict[str,str]",
                "str",
                "bool",
                "float",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hueber-dev/hueber/api/groups.py": {
        "Group.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "None",
                    "T",
                    "Dict[str,Any]"
                ],
                "url": [
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "None",
                    "T",
                    "Dict[str,Any]"
                ]
            }
        },
        "Group.sync": {
            "name": "sync",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.push": {
            "name": "push",
            "location": 26,
            "return": [
                "int",
                "List",
                "str",
                "Dict[int,str]",
                "Final",
                "float"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Group.push_attrs": {
            "name": "push_attrs",
            "location": 35,
            "return": [
                "int",
                "List",
                "str",
                "Dict[int,str]",
                "Final",
                "float"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Group.__repr__": {
            "name": "__repr__",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Groups.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "int",
                    "Dict[str,Any]",
                    "T"
                ]
            }
        },
        "Groups.sync": {
            "name": "sync",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Groups._add_hidden_group": {
            "name": "_add_hidden_group",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hueber-dev/hueber/api/lights.py": {
        "Light.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "Optional[str]",
                    "str",
                    "bool",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "url": [
                    "int",
                    "Optional[str]",
                    "str",
                    "bool",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        },
        "Light.sync": {
            "name": "sync",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Light.push": {
            "name": "push",
            "location": 24,
            "return": [
                "int",
                "List",
                "str",
                "Dict[int,str]",
                "Final",
                "float"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Light.push_attrs": {
            "name": "push_attrs",
            "location": 28,
            "return": [
                "int",
                "List",
                "str",
                "Dict[int,str]",
                "Final",
                "float"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Light.__repr__": {
            "name": "__repr__",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lights.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Dict[str,Any]",
                    "int"
                ]
            }
        },
        "Lights.sync": {
            "name": "sync",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hueber-dev/hueber/api/_common.py": {
        "Request.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Dict[str,str]"
                ],
                "host": [
                    "str",
                    "int",
                    "bool"
                ],
                "route": [
                    "str",
                    "int",
                    "bool"
                ],
                "body": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "Dict",
                    "datetime.datetime",
                    "Optional[List[str]]"
                ]
            }
        },
        "Request._request": {
            "name": "_request",
            "location": 41,
            "return": [
                "str",
                "int",
                "datetime.date"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Dict",
                    "Optional[dict]",
                    "None"
                ],
                "data": [
                    "str",
                    "Dict",
                    "Optional[dict]",
                    "None"
                ],
                "method": [
                    "str",
                    "Dict",
                    "Optional[dict]",
                    "None"
                ]
            }
        },
        "Request.data": {
            "name": "data",
            "location": 52,
            "return": [
                "Dict[str, List[int]]",
                "str",
                "Optional[float]",
                "dict",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Resource.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "str"
                ],
                "name": [
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[Sequence[Any]]",
                    "Sequence[Any]",
                    "None"
                ],
                "url": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "List",
                    "None",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]",
                    "Optional[str]"
                ]
            }
        },
        "Resource._get": {
            "name": "_get",
            "location": 68,
            "return": [
                "int",
                "dict",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "route": [
                    "str"
                ]
            }
        },
        "Resource._put": {
            "name": "_put",
            "location": 72,
            "return": [
                "str",
                "IO[bytes]",
                "bytes",
                "dict",
                "Sequence"
            ],
            "arguments": {
                "self": [],
                "route": [
                    "str"
                ],
                "body": [
                    "str"
                ]
            }
        },
        "Resource._post": {
            "name": "_post",
            "location": 77,
            "return": [
                "bool",
                "dict",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "bool"
                ],
                "route": [
                    "str"
                ],
                "body": [
                    "str"
                ]
            }
        },
        "Resource.last_updated": {
            "name": "last_updated",
            "location": 87,
            "return": [
                "str",
                "int",
                "Dict[int, dict]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Resource._update_time": {
            "name": "_update_time",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Resource.__len__": {
            "name": "__len__",
            "location": 93,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceComposite.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "url": [
                    "str"
                ],
                "node": [
                    "int",
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "Callable",
                    "None",
                    "Sequence",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "ResourceComposite._get_all": {
            "name": "_get_all",
            "location": 110,
            "return": [
                "Dict[(int, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceComposite.sync": {
            "name": "sync",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceComposite.push_attrs": {
            "name": "push_attrs",
            "location": 120,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "update": [
                    "str",
                    "Dict",
                    "List",
                    "bool",
                    "List[List[T]]",
                    "List[list[T]]"
                ]
            }
        }
    },
    "hueber-dev/hueber/api/__init__.py": {
        "Bridge.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ip_address": [
                    "str"
                ],
                "user": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "lazy": [
                    "bool",
                    "neuromation.api.Config",
                    "Optional[dict]",
                    "int",
                    "Dict",
                    "Dict[str,str]",
                    "str"
                ]
            }
        },
        "Bridge.__repr__": {
            "name": "__repr__",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
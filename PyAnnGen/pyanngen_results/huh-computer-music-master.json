{
    "huh-computer-music-master/setup.py": {},
    "huh-computer-music-master/test_environment.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "huh-computer-music-master/cookbook/rx.py": {
        "read_config_file": {
            "name": "read_config_file",
            "location": 27,
            "return": [
                "str",
                "pathlib.Path",
                "int",
                "dict"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "List[str]",
                    "pathlib.Path",
                    "pathlib.PosixPath",
                    "Type[Any]"
                ]
            }
        },
        "demo_control": {
            "name": "demo_control",
            "location": 32,
            "return": [
                "int",
                "str",
                "Type",
                "List[int]"
            ],
            "arguments": {
                "ts": [
                    "str",
                    "Union[numpy.ndarray,pandas.DataFrame]",
                    "numpy.ndarray"
                ],
                "func": [
                    "str",
                    "Union[numpy.ndarray,pandas.DataFrame]",
                    "numpy.ndarray"
                ]
            }
        },
        "wavvy_control": {
            "name": "wavvy_control",
            "location": 56,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "osc_func": [
                    "Callable",
                    "bool",
                    "Callable[...,Dict]"
                ]
            }
        },
        "wavvy_control.func": {
            "name": "func",
            "location": 58,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "t": [
                    "Tuple[float, float]",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "huh-computer-music-master/docs/conf.py": {},
    "huh-computer-music-master/hcm/dynamical.py": {
        "lorenz": {
            "name": "lorenz",
            "location": 6,
            "return": [
                "Tuple[(nothing, nothing, nothing)]"
            ],
            "arguments": {
                "t": [
                    "int",
                    "float"
                ],
                "X0": [
                    "float",
                    "numpy.ndarray"
                ],
                "time_scale": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "dlorenz": {
            "name": "dlorenz",
            "location": 35,
            "return": [
                "Tuple[(nothing, nothing, nothing)]"
            ],
            "arguments": {
                "t": [
                    "bool",
                    "numpy.ndarray",
                    "List[int]",
                    "Union[int, float]",
                    "int",
                    "list"
                ],
                "x": [
                    "int",
                    "numpy.ndarray",
                    "Union[numpy.ndarray, pandas.DataFrame]"
                ],
                "y": [
                    "int",
                    "numpy.ndarray"
                ],
                "z": [
                    "int",
                    "numpy.ndarray",
                    "Union[numpy.ndarray, pandas.DataFrame]"
                ]
            }
        }
    },
    "huh-computer-music-master/hcm/io.py": {
        "add_channels": {
            "name": "add_channels",
            "location": 14,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "signals": [
                    "str",
                    "int",
                    "List[Optional[float]]",
                    "[]"
                ]
            }
        },
        "append": {
            "name": "append",
            "location": 18,
            "return": [
                "np.ndarray"
            ],
            "arguments": {}
        },
        "wav_read": {
            "name": "wav_read",
            "location": 22,
            "return": [
                "Optional[Iterable[Any]]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "wav_write": {
            "name": "wav_write",
            "location": 27,
            "return": [
                "Optional[Iterable[Any]]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "sample_rate": [
                    "str"
                ],
                "file": [
                    "str"
                ]
            }
        },
        "sample_reader": {
            "name": "sample_reader",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "AudioOutput.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channels": [
                    "int",
                    "float",
                    "str"
                ],
                "sample_rate": [
                    "int",
                    "str"
                ],
                "period_length_sec": [
                    "int",
                    "float"
                ]
            }
        },
        "AudioOutput.on_next": {
            "name": "on_next",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "str",
                    "IO"
                ]
            }
        },
        "AudioOutput.on_error": {
            "name": "on_error",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "err": [
                    "List[str]",
                    "bool",
                    "Exception"
                ]
            }
        },
        "AudioOutput.on_completed": {
            "name": "on_completed",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioOutput._close_stream": {
            "name": "_close_stream",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioOutput.start": {
            "name": "start",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioOutput.stop": {
            "name": "stop",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WavFileOutput.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "sample_rate": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "WavFileOutput.on_next": {
            "name": "on_next",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "numpy.ndarray",
                    "Sequence[Any]",
                    "None",
                    "Optional[str]",
                    "Callable",
                    "Iterator",
                    "Iterator[Any]",
                    "T",
                    "Iterable"
                ]
            }
        },
        "WavFileOutput.on_completed": {
            "name": "on_completed",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WavFileOutput.write_wav": {
            "name": "write_wav",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WavFileOutput.on_error": {
            "name": "on_error",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "str",
                    "bool",
                    "IO[str]",
                    "IO"
                ]
            }
        }
    },
    "huh-computer-music-master/hcm/noise.py": {
        "white_noise": {
            "name": "white_noise",
            "location": 4,
            "return": [
                "str",
                "int",
                "Tuple[Union[Literal,Literal,Literal]]",
                "float"
            ],
            "arguments": {
                "t": [
                    "Sequence[int]",
                    "int",
                    "list",
                    "numpy.ndarray",
                    "Sequence[T]"
                ]
            }
        },
        "brownian_noise": {
            "name": "brownian_noise",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "t": [
                    "int",
                    "tuple",
                    "Sequence"
                ]
            }
        }
    },
    "huh-computer-music-master/hcm/osc.py": {
        "sine": {
            "name": "sine",
            "location": 4,
            "return": [
                "Dict[str, int]",
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "t": [
                    "Callable",
                    "int"
                ],
                "f": [
                    "Callable",
                    "int"
                ]
            }
        },
        "square": {
            "name": "square",
            "location": 9,
            "return": [
                "numpy.ndarray",
                "str",
                "bytearray",
                "float",
                "Dict[str, int]",
                "List[int]"
            ],
            "arguments": {
                "t": [
                    "int"
                ],
                "f": [
                    "int"
                ]
            }
        },
        "triangle": {
            "name": "triangle",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "t": [
                    "int",
                    "float"
                ],
                "f": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "huh-computer-music-master/hcm/ts.py": {
        "normalize": {
            "name": "normalize",
            "location": 4,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "signal": [
                    "float",
                    "Union[numpy.ndarray,astropy.units.quantity.Quantity]",
                    "numpy.ndarray"
                ]
            }
        },
        "sample_and_hold": {
            "name": "sample_and_hold",
            "location": 11,
            "return": [
                "str",
                "int",
                "List[str]",
                "numpy.ndarray",
                "OrderedDict"
            ],
            "arguments": {
                "signal": [
                    "int",
                    "Callable",
                    "str"
                ],
                "sample_rate": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ],
                "hold": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "time": {
            "name": "time",
            "location": 21,
            "return": [
                "Union[int, float]",
                "Tuple[float, float]",
                "str",
                "Union[List[str], List[Any]]"
            ],
            "arguments": {
                "t0": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "Dict[str,Any]"
                ],
                "T": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "Dict[str,Any]"
                ],
                "sample_rate": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "huh-computer-music-master/hcm/types.py": {
        "processor": {
            "name": "processor",
            "location": 7,
            "return": [
                "Callable"
            ],
            "arguments": {
                "f": [
                    "str",
                    "Optional[Any]",
                    "Any",
                    "None"
                ]
            }
        },
        "rx_generator": {
            "name": "rx_generator",
            "location": 17,
            "return": [
                "Callable"
            ],
            "arguments": {
                "f": [
                    "str",
                    "Optional[Any]",
                    "Any",
                    "None"
                ]
            }
        },
        "generator": {
            "name": "generator",
            "location": 24,
            "return": [
                "Callable"
            ],
            "arguments": {
                "f": [
                    "str",
                    "Optional[Any]",
                    "Any",
                    "None"
                ]
            }
        },
        "processor.new_func": {
            "name": "new_func",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "rx_generator.new_func": {
            "name": "new_func",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "generator.new_func": {
            "name": "new_func",
            "location": 30,
            "return": [],
            "arguments": {
                "stream": [
                    "int",
                    "str",
                    "List[List[Any]]",
                    "List[\"Block\"]"
                ]
            }
        },
        "MutuallyExclusiveOption.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MutuallyExclusiveOption.handle_parse_result": {
            "name": "handle_parse_result",
            "location": 50,
            "return": [
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "ctx": [],
                "opts": [
                    "click.Context"
                ],
                "args": []
            }
        },
        "AliasedGroup.has_match": {
            "name": "has_match",
            "location": 69,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "candidate": [
                    "str",
                    "Sequence[str]",
                    "Union[str,int]"
                ],
                "target": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "AliasedGroup.get_command": {
            "name": "get_command",
            "location": 84,
            "return": [
                "bool",
                "Optional[str]",
                "str",
                "Optional[Literal[only_clustered,include_clustered]]",
                "List[str]",
                "Optional[Dict[str,Any]]",
                "Tuple",
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "str",
                    "bytes",
                    "Set[str]",
                    "Optional[str]"
                ],
                "cmd_name": [
                    "str",
                    "Set[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "processor.new_func.processor": {
            "name": "processor",
            "location": 10,
            "return": [
                "Callable"
            ],
            "arguments": {
                "stream": []
            }
        }
    },
    "huh-computer-music-master/hcm/vc.py": {
        "VCO": {
            "name": "VCO",
            "location": 9,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "t": [
                    "int",
                    "Sequence[T]",
                    "List[int]"
                ],
                "f": [
                    "int",
                    "numpy.ndarray"
                ],
                "osc": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "VCA": {
            "name": "VCA",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "signal": [
                    "int",
                    "Callable",
                    "str"
                ],
                "modulation": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ADSR": {
            "name": "ADSR",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "A": [
                    "str",
                    "List[int]"
                ],
                "D": [
                    "int",
                    "float",
                    "Union[int,float]",
                    "List[int]"
                ],
                "S": [
                    "int",
                    "Union[int,float]",
                    "float",
                    "numpy.array",
                    "str"
                ],
                "R": [
                    "int",
                    "numpy.ndarray",
                    "str"
                ],
                "duration": [
                    "str",
                    "Optional[int]"
                ],
                "sample_rate": [
                    "Union[int,float]",
                    "int",
                    "str",
                    "numpy.array",
                    "float"
                ]
            }
        }
    },
    "huh-computer-music-master/hcm/__init__.py": {},
    "huh-computer-music-master/hcm/music/const.py": {},
    "huh-computer-music-master/hcm/music/music.py": {
        "scale_constructor": {
            "name": "scale_constructor",
            "location": 6,
            "return": [
                "bool",
                "float",
                "numpy.ndarray"
            ],
            "arguments": {
                "f0": [
                    "int",
                    "str",
                    "Hashable",
                    "Tuple",
                    "List[str]"
                ],
                "key": [
                    "List[str]",
                    "int",
                    "List[int]",
                    "str",
                    "Union[int, str]",
                    "Union[int, slice]"
                ],
                "num_octaves": [
                    "int",
                    "str"
                ]
            }
        },
        "frequency_map": {
            "name": "frequency_map",
            "location": 17,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "signal": [
                    "int",
                    "Callable",
                    "str"
                ],
                "scale": [
                    "int",
                    "numpy.ndarray",
                    "float"
                ]
            }
        },
        "tempo_to_frequency": {
            "name": "tempo_to_frequency",
            "location": 51,
            "return": [
                "float",
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "tempo": [
                    "int",
                    "bytes",
                    "IO",
                    "List[str]",
                    "str"
                ],
                "note_duration": [
                    "Text",
                    "bytes",
                    "Sequence[int]",
                    "int",
                    "Dict"
                ]
            }
        }
    },
    "huh-computer-music-master/hcm/music/sample.py": {
        "comparator": {
            "name": "comparator",
            "location": 4,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "int",
                    "float"
                ],
                "threshold": [
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "trigger": {
            "name": "trigger",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "int",
                    "Union[numpy.ndarray, pandas.DataFrame]"
                ],
                "threshold": [
                    "float",
                    "int",
                    "numpy.ndarray",
                    "numpy.array"
                ]
            }
        },
        "sampler": {
            "name": "sampler",
            "location": 25,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "sample": [
                    "Sequence[T]",
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "List[int]",
                    "list"
                ],
                "trig": [
                    "numpy.ndarray",
                    "List[int]",
                    "str",
                    "List[str]",
                    "list",
                    "int"
                ]
            }
        }
    },
    "huh-computer-music-master/hcm/music/__init__.py": {}
}
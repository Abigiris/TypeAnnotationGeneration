{
    "ig-python-api-master/setup.py": {},
    "ig-python-api-master/ig/api.py": {
        "IGAPI.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "apikey": [
                    "int",
                    "float",
                    "bool"
                ],
                "environment": [
                    "Text",
                    "str",
                    "Iterable[str]",
                    "Union[str,bytes]"
                ]
            }
        },
        "IGAPI.__make_request": {
            "name": "__make_request",
            "location": 33,
            "return": [
                "None",
                "Dict",
                "Dict[str,Union[int,str]]",
                "Optional[Dict[str,Any]]",
                "Optional[Dict[str,str]]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Dict[str,Any]",
                    "bool",
                    "Dict",
                    "requests.Response",
                    "None",
                    "Optional[dict]"
                ],
                "method": [
                    "str",
                    "int",
                    "Type[T]",
                    "Type"
                ],
                "query_params": [
                    "Dict",
                    "None",
                    "Dict[str,Any]",
                    "str",
                    "bytes",
                    "Optional[bool]",
                    "bool"
                ],
                "data_params": [
                    "str",
                    "None",
                    "Dict",
                    "Optional[dict]"
                ],
                "headers": [
                    "Dict[str,Any]",
                    "None",
                    "Dict",
                    "requests.Response"
                ]
            }
        },
        "IGAPI.request": {
            "name": "request",
            "location": 66,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "Dict[str,list[str]]",
                    "int",
                    "Dict[str,List[str]]",
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None",
                    "bool"
                ]
            }
        }
    },
    "ig-python-api-master/ig/exceptions.py": {
        "BadEnvironment.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bool",
                    "Dict",
                    "Union[str,dict]",
                    "Mapping",
                    "Mapping[str,str]",
                    "int"
                ]
            }
        }
    },
    "ig-python-api-master/ig/lightstreamer.py": {
        "_url_encode": {
            "name": "_url_encode",
            "location": 31,
            "return": [
                "bytes"
            ],
            "arguments": {
                "params": [
                    "str",
                    "Dict[str,str]"
                ]
            }
        },
        "_iteritems": {
            "name": "_iteritems",
            "location": 35,
            "return": [
                "Callable",
                "List[T]"
            ],
            "arguments": {
                "d": [
                    "bool",
                    "str",
                    "List[str]",
                    "T",
                    "\"CategoricalDtype\""
                ]
            }
        },
        "Subscription.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str",
                    "int",
                    "float"
                ],
                "items": [
                    "Tuple",
                    "List",
                    "Mapping[str,Any]",
                    "str",
                    "Mapping",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ],
                "fields": [
                    "str",
                    "Iterable[str]",
                    "collections.abc.AsyncIterator",
                    "List[str]",
                    "AsyncIterator[T]"
                ],
                "adapter": [
                    "Text",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "Subscription._decode": {
            "name": "_decode",
            "location": 71,
            "return": [
                "Sequence[Callable]",
                "Text",
                "int",
                "None",
                "Optional[str]",
                "Optional[bool]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "int",
                    "Callable[[None],bool]",
                    "bool"
                ],
                "last": [
                    "int",
                    "List[str]",
                    "str",
                    "bool",
                    "KT"
                ]
            }
        },
        "Subscription.addlistener": {
            "name": "addlistener",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "listener": [
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "Subscription.notifyupdate": {
            "name": "notifyupdate",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item_line": [
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "LSClient.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_url": [
                    "str"
                ],
                "adapter_set": [
                    "Text",
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "Dict[str,Dict]",
                    "Optional[str]",
                    "Optional[Dict[str,Any]]",
                    "bool"
                ],
                "user": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ],
                "password": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ]
            }
        },
        "LSClient._encode_params": {
            "name": "_encode_params",
            "location": 136,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "List",
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "LSClient._call": {
            "name": "_call",
            "location": 141,
            "return": [
                "List[str]",
                "\"Flow\"",
                "str"
            ],
            "arguments": {
                "self": [],
                "base_url": [
                    "str",
                    "Optional[str]"
                ],
                "url": [
                    "Dict",
                    "str",
                    "bytes",
                    "Dict[str,Any]",
                    "List[str]",
                    "bool"
                ],
                "body": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Dict[str,int]",
                    "None"
                ]
            }
        },
        "LSClient._set_control_link_url": {
            "name": "_set_control_link_url",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "custom_address": [
                    "str",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ]
            }
        },
        "LSClient._control": {
            "name": "_control",
            "location": 160,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "str",
                    "Dict[str,str]",
                    "Tuple[Union[str,int]]",
                    "int",
                    "Tuple[str,int]",
                    "Dict[str,Any]"
                ]
            }
        },
        "LSClient._read_from_stream": {
            "name": "_read_from_stream",
            "location": 168,
            "return": [
                "str",
                "Sequence[str]",
                "bool",
                "Set[str]",
                "int",
                "bytes",
                "Dict[str,Union[int,None]]",
                "Tuple[Union[Literal,Literal,Literal,Literal,Literal,Literal]]",
                "None",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LSClient.connect": {
            "name": "connect",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LSClient.bind": {
            "name": "bind",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LSClient._handle_stream": {
            "name": "_handle_stream",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream_line": [
                    "int",
                    "Sequence[str]",
                    "str",
                    "float"
                ]
            }
        },
        "LSClient._join": {
            "name": "_join",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LSClient.disconnect": {
            "name": "disconnect",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LSClient.destroy": {
            "name": "destroy",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LSClient.subscribe": {
            "name": "subscribe",
            "location": 271,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "subscription": [
                    "Dict",
                    "str",
                    "Dict[str,Any]",
                    "MutableMapping",
                    "bool",
                    "MutableMapping[str,Any]"
                ]
            }
        },
        "LSClient.unsubscribe": {
            "name": "unsubscribe",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subcription_key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "LSClient._forward_update_message": {
            "name": "_forward_update_message",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "update_message": [
                    "str",
                    "Optional[dict]"
                ]
            }
        },
        "LSClient._receive": {
            "name": "_receive",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "on_item_update": {
            "name": "on_item_update",
            "location": 425,
            "return": [
                "None"
            ],
            "arguments": {
                "item_update": [
                    "bytes",
                    "int",
                    "float"
                ]
            }
        },
        "handler": {
            "name": "handler",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ig-python-api-master/ig/stream.py": {
        "IGStream.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cst": [
                    "Sequence",
                    "int",
                    "str",
                    "List[str]",
                    "bool"
                ],
                "x_security_token": [
                    "Sequence",
                    "int",
                    "str",
                    "List[str]",
                    "bool"
                ],
                "lightstreamer_endpoint": [
                    "Sequence",
                    "int",
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "IGStream.connect": {
            "name": "connect",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "account_id": [
                    "str",
                    "int"
                ]
            }
        },
        "IGStream.unsubscribe_all": {
            "name": "unsubscribe_all",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IGStream.disconnect": {
            "name": "disconnect",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ig-python-api-master/ig/__init__.py": {},
    "ig-python-api-master/ig/definitions/markets.py": {},
    "ig-python-api-master/ig/definitions/positions.py": {},
    "ig-python-api-master/ig/definitions/__init__.py": {},
    "ig-python-api-master/ig/endpoints/accounts.py": {
        "Accounts.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountPreferences.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountPreferencesUpdate.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str,Any]",
                    "bytes",
                    "Dict[str,str]",
                    "List",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "None"
                ]
            }
        }
    },
    "ig-python-api-master/ig/endpoints/apirequest.py": {
        "APIRequest.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "str",
                    "bool",
                    "bytes",
                    "int"
                ],
                "method": [
                    "Text",
                    "str",
                    "bool",
                    "bytes",
                    "int"
                ],
                "header": [
                    "Dict",
                    "None",
                    "Optional[Mapping[str,Any]]",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "Mapping",
                    "str",
                    "Optional[dict]"
                ]
            }
        },
        "APIRequest.header": {
            "name": "header",
            "location": 26,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int",
                "dict[str, list[str]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "str",
                    "List[str]",
                    "T",
                    "List[float]"
                ]
            }
        },
        "APIRequest.response": {
            "name": "response",
            "location": 34,
            "return": [
                "dict[str, typing.Any]",
                "str",
                "dict[str, typing.Union[str,typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "List[str]",
                    "Optional[bool]",
                    "Union[bool, str, None]"
                ]
            }
        },
        "APIRequest.status_code": {
            "name": "status_code",
            "location": 42,
            "return": [
                "int",
                "typing.Type"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Optional[Sequence[T]]",
                    "Union[int, bool]",
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "APIRequest.__str__": {
            "name": "__str__",
            "location": 45,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ig-python-api-master/ig/endpoints/clientsentiment.py": {
        "ClientMarketSentiment.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "market_ids": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "ig-python-api-master/ig/endpoints/markets.py": {
        "SearchMarkets.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "search_term": [
                    "int",
                    "List[str]",
                    "str",
                    "Union[str,float]",
                    "float"
                ]
            }
        },
        "Markets.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "epics": [
                    "str",
                    "bool"
                ],
                "filter": [
                    "str",
                    "bool"
                ]
            }
        },
        "MarketEpicDetails.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "epic": [
                    "str",
                    "Tuple[cirq.Qid]",
                    "float"
                ]
            }
        },
        "MarketPrices.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "epic": [
                    "str",
                    "Optional[Any]",
                    "Any",
                    "None"
                ],
                "resolution": [
                    "str",
                    "Optional[str]"
                ],
                "from_date": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "to_date": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "max_data_points": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "page_size": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "page_number": [
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "ig-python-api-master/ig/endpoints/positions.py": {
        "Positions.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreatePosition.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str,Any]",
                    "bytes",
                    "Dict[str,str]",
                    "List",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "None"
                ]
            }
        }
    },
    "ig-python-api-master/ig/endpoints/session.py": {
        "Encryption.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Session.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Any",
                    "None",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,dict[str,Any]]"
                ],
                "password": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "encryption_key": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "int"
                ],
                "encryption_timestamp": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "ig-python-api-master/ig/endpoints/__init__.py": {},
    "ig-python-api-master/ig/endpoints/payloads/basepayload.py": {
        "BasePayload.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePayload.__repr__": {
            "name": "__repr__",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePayload.data": {
            "name": "data",
            "location": 12,
            "return": [
                "Dict[str, List[int]]",
                "str",
                "Optional[float]",
                "dict",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ig-python-api-master/ig/endpoints/payloads/orders.py": {
        "MarketOrder.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "Sequence[str]",
                    "Optional[str]",
                    "None",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]"
                ],
                "instrument": [
                    "str",
                    "Sequence[str]",
                    "Optional[str]",
                    "None",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]"
                ],
                "side": [
                    "str",
                    "int",
                    "Callable",
                    "Optional[List[Any]]",
                    "List[Any]",
                    "None"
                ],
                "quantity": [
                    "str",
                    "Sequence[str]",
                    "Optional[str]",
                    "None",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]"
                ],
                "duration": [
                    "str",
                    "Optional[bytes]",
                    "bytes",
                    "Optional[float]",
                    "None",
                    "float"
                ]
            }
        },
        "MarketOrder.data": {
            "name": "data",
            "location": 43,
            "return": [
                "bool",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ig-python-api-master/ig/endpoints/payloads/positions.py": {
        "Position.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "epic": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "bool",
                    "None"
                ],
                "direction": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "bool",
                    "None"
                ],
                "size": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "bool",
                    "None"
                ],
                "order_type": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Optional[Any]",
                    "Any"
                ],
                "currency_code": [
                    "str",
                    "Dict",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "expiry": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "bool"
                ],
                "time_in_force": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "bool"
                ],
                "level": [
                    "str",
                    "None",
                    "Dict[str,str]",
                    "bool",
                    "Dict",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "guaranteed_stop": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "bool"
                ],
                "stop_level": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "bool"
                ],
                "stop_distance": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "bool"
                ],
                "trailing_stop": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "bool"
                ],
                "trailing_stop_increment": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "bool"
                ],
                "force_open": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "bool"
                ],
                "limit_level": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "bool"
                ],
                "limit_distance": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "bool"
                ],
                "quoted_id": [
                    "str",
                    "None",
                    "int",
                    "Dict",
                    "List[str]",
                    "Optional[str]"
                ],
                "deal_reference": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "Position.data": {
            "name": "data",
            "location": 68,
            "return": [
                "bool",
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ig-python-api-master/ig/tests/conftest.py": {
        "identifier": {
            "name": "identifier",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "password": {
            "name": "password",
            "location": 33,
            "return": [
                "str",
                "Optional[Dict]"
            ],
            "arguments": {}
        },
        "ig_api_demo_client": {
            "name": "ig_api_demo_client",
            "location": 39,
            "return": [
                "IGAPI",
                "Callable",
                "Callable[...,neuromation.api.Client]"
            ],
            "arguments": {}
        },
        "market_position": {
            "name": "market_position",
            "location": 68,
            "return": [
                "Position",
                "logging.LogRecord",
                "int",
                "bool"
            ],
            "arguments": {}
        }
    },
    "ig-python-api-master/ig/tests/__init__.py": {},
    "ig-python-api-master/ig/tests/integration/test_api.py": {
        "TestSaxoOpenAPI.setup": {
            "name": "setup",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ig_api_demo_client": [
                    "bool"
                ]
            }
        },
        "TestSaxoOpenAPI.generate_cassette_name": {
            "name": "generate_cassette_name",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "method_name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestSaxoOpenAPI.test__session_headers": {
            "name": "test__session_headers",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSaxoOpenAPI.test__accounts": {
            "name": "test__accounts",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSaxoOpenAPI.test__account_preferences": {
            "name": "test__account_preferences",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSaxoOpenAPI.test__update_account_preferences": {
            "name": "test__update_account_preferences",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSaxoOpenAPI.test__positions": {
            "name": "test__positions",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSaxoOpenAPI.test__create_otc_market_position": {
            "name": "test__create_otc_market_position",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "market_position": [
                    "str"
                ]
            }
        },
        "TestSaxoOpenAPI.test__search_market": {
            "name": "test__search_market",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSaxoOpenAPI.test__markets_details": {
            "name": "test__markets_details",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSaxoOpenAPI.test__market_epic_details": {
            "name": "test__market_epic_details",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSaxoOpenAPI.test__market_price": {
            "name": "test__market_price",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSaxoOpenAPI.test_client_sentiment": {
            "name": "test_client_sentiment",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ig-python-api-master/ig/tests/integration/__init__.py": {},
    "ig-python-api-master/ig/tests/integration/cassettes/__init__.py": {},
    "ig-python-api-master/ig/tests/unit/test_api.py": {
        "test_bad_api_environment_exception": {
            "name": "test_bad_api_environment_exception",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_apikey": {
            "name": "test_apikey",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_position_payload_wrong_order_type": {
            "name": "test_position_payload_wrong_order_type",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_position_payload_order_type_limit": {
            "name": "test_position_payload_order_type_limit",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_position_payload_order_type_quote": {
            "name": "test_position_payload_order_type_quote",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ig-python-api-master/ig/tests/unit/__init__.py": {}
}
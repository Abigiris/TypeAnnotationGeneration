{
    "imagevalidate-master/conanfile.py": {
        "ImageValidate.imports": {
            "name": "imports",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "imagevalidate-master/setup.py": {
        "get_so_handler": {
            "name": "get_so_handler",
            "location": 1204,
            "return": [
                "Union[(AudidWheelsHandlerStrategy, DllHandlerStrategy, MacholibStrategy, NullHandlerStrategy)]"
            ],
            "arguments": {
                "shared_library": [
                    "bool",
                    "int",
                    "str"
                ],
                "context": [
                    "bool",
                    "int",
                    "str"
                ],
                "system_name": [
                    "str",
                    "denite.util.UserContext",
                    "denite.util.Candidates",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "PackageClib.initialize_options": {
            "name": "initialize_options",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackageClib.finalize_options": {
            "name": "finalize_options",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackageClib.run": {
            "name": "run",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackageClib._locate_shared_libraries": {
            "name": "_locate_shared_libraries",
            "location": 78,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "str",
                    "BinaryIO",
                    "Iterable[TextIO]"
                ]
            }
        },
        "AbsCMakeToolchain.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "builder": [
                    "Optional[List[int]]",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "AbsCMakeToolchain.create_toolchain": {
            "name": "create_toolchain",
            "location": 99,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "output_cmake_file": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "str",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "AbsCMakeToolchain.compiler_spawn": {
            "name": "compiler_spawn",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "Hashable",
                    "str",
                    "Callable"
                ]
            }
        },
        "AbsCMakeToolchain.run_cmake_configure": {
            "name": "run_cmake_configure",
            "location": 106,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "ext": [
                    "str",
                    "Callable[[], None]",
                    "Optional[IO]",
                    "List[str]",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "AbsCMakeToolchain.run_cmake_build": {
            "name": "run_cmake_build",
            "location": 110,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "ext": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "AbsCMakeToolchain.run_cmake_install": {
            "name": "run_cmake_install",
            "location": 114,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "ext": [
                    "str",
                    "Callable[[], None]",
                    "Optional[IO]",
                    "List[str]",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "AbsCMakeToolchain.get_linking_library_extension": {
            "name": "get_linking_library_extension",
            "location": 118,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsCMakeToolchain.get_shared_library_filename": {
            "name": "get_shared_library_filename",
            "location": 122,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "library_name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "AbsCMakeToolchain.runtime_file_deps": {
            "name": "runtime_file_deps",
            "location": 125,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsCMakeToolchain.get_compiler": {
            "name": "get_compiler",
            "location": 135,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MSVCToolChain.get_compiler": {
            "name": "get_compiler",
            "location": 142,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MSVCToolChain.create_toolchain": {
            "name": "create_toolchain",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_cmake_file": [
                    "str"
                ]
            }
        },
        "MSVCToolChain.compiler_spawn": {
            "name": "compiler_spawn",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "Hashable",
                    "str",
                    "Callable"
                ]
            }
        },
        "MSVCToolChain.run_cmake_configure": {
            "name": "run_cmake_configure",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ext": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "MSVCToolChain.get_shared_library_filename": {
            "name": "get_shared_library_filename",
            "location": 263,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "library_name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "MSVCToolChain.runtime_file_deps": {
            "name": "runtime_file_deps",
            "location": 266,
            "return": [
                "Generator[(Tuple[(str, str)], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MSVCToolChain.run_cmake_install": {
            "name": "run_cmake_install",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ext": [
                    "str",
                    "Sequence[str]",
                    "Union[str, List[str], None]",
                    "bool"
                ]
            }
        },
        "MSVCToolChain.run_cmake_build": {
            "name": "run_cmake_build",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ext": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "MSVCToolChain.get_linking_library_extension": {
            "name": "get_linking_library_extension",
            "location": 291,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CMakeToolchainWriter.__init__": {
            "name": "__init__",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CMakeToolchainWriter._generate_text": {
            "name": "_generate_text",
            "location": 301,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CMakeToolchainWriter.write": {
            "name": "write",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "List[str]",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "CMakeToolchainWriter.add_path": {
            "name": "add_path",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "static_frame.core.util.GetItemKeyType",
                    "type",
                    "dict"
                ],
                "value": [
                    "str",
                    "static_frame.core.util.GetItemKeyType",
                    "type",
                    "dict"
                ]
            }
        },
        "CMakeToolchainWriter.add_string": {
            "name": "add_string",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "ClangToolChain.create_toolchain": {
            "name": "create_toolchain",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_cmake_file": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "ClangToolChain.run_cmake_configure": {
            "name": "run_cmake_configure",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ext": [
                    "str",
                    "Callable[[], None]",
                    "Optional[IO]",
                    "List[str]",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "ClangToolChain.run_cmake_build": {
            "name": "run_cmake_build",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ext": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "ClangToolChain.run_cmake_install": {
            "name": "run_cmake_install",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ext": [
                    "str",
                    "Callable[[], None]",
                    "Optional[IO]",
                    "List[str]",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "ClangToolChain.get_linking_library_extension": {
            "name": "get_linking_library_extension",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClangToolChain.get_shared_library_filename": {
            "name": "get_shared_library_filename",
            "location": 336,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "library_name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "BuildCMakeClib.find_dep_libs_from_cmake": {
            "name": "find_dep_libs_from_cmake",
            "location": 351,
            "return": [
                "Optional[List[nothing]]"
            ],
            "arguments": {
                "self": [],
                "target_json": [
                    "Optional[bool]",
                    "Optional[str]",
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "remove_prefix": [
                    "List[str]",
                    "int",
                    "bool",
                    "List[List[str]]"
                ]
            }
        },
        "BuildCMakeClib.find_target": {
            "name": "find_target",
            "location": 381,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "target_name": [
                    "str"
                ],
                "build_type": [
                    "str"
                ]
            }
        },
        "BuildCMakeClib.__init__": {
            "name": "__init__",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dist": [
                    "denite.util.Nvim",
                    "bool",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "BuildCMakeClib.initialize_options": {
            "name": "initialize_options",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildCMakeClib.finalize_options": {
            "name": "finalize_options",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildCMakeClib.finalize_library_options": {
            "name": "finalize_library_options",
            "location": 459,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "libraries": [
                    "bool",
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "BuildCMakeClib.write_toolchain_file": {
            "name": "write_toolchain_file",
            "location": 463,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "toolchain_file": [
                    "List[str]"
                ]
            }
        },
        "BuildCMakeClib.run": {
            "name": "run",
            "location": 469,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildCMakeClib.download_source_archive": {
            "name": "download_source_archive",
            "location": 503,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[Dict, str, int, bytes]]"
                ],
                "lib_name": [
                    "str"
                ]
            }
        },
        "BuildCMakeClib.download_file": {
            "name": "download_file",
            "location": 523,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "bytearray",
                    "bytes"
                ],
                "save_as": [
                    "str",
                    "bool"
                ]
            }
        },
        "BuildCMakeClib.get_deps_source": {
            "name": "get_deps_source",
            "location": 532,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "libraries": [
                    "str",
                    "Dict[str, BinaryIO]"
                ]
            }
        },
        "BuildCMakeClib._find_root_cmake": {
            "name": "_find_root_cmake",
            "location": 550,
            "return": [
                "str",
                "Dict[str, str]",
                "Pattern"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "BuildCMakeClib._extract_source": {
            "name": "_extract_source",
            "location": 559,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_archive": [
                    "str"
                ],
                "dst": [
                    "str"
                ]
            }
        },
        "BuildCMakeClib._check_install_manifest": {
            "name": "_check_install_manifest",
            "location": 578,
            "return": [
                "Generator[(str, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "BuildCMakeClib._get_file_extension": {
            "name": "_get_file_extension",
            "location": 585,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "BuildCMakeClib._needs_to_build": {
            "name": "_needs_to_build",
            "location": 592,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "library": [
                    "Mapping[str, Any]",
                    "Dict[str, Dict[str, Any]]",
                    "dict",
                    "bytes",
                    "IO"
                ]
            }
        },
        "BuildCMakeClib.build_libraries": {
            "name": "build_libraries",
            "location": 607,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "libraries": [
                    "bool",
                    "list",
                    "Iterable[str]",
                    "setuptools.Extension"
                ]
            }
        },
        "BuildCMakeClib.build_library": {
            "name": "build_library",
            "location": 669,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lib": [
                    "str",
                    "Optional[str]"
                ],
                "build_path": [
                    "str"
                ],
                "runtime_output_path": [
                    "str",
                    "bool",
                    "Optional[Tuple[str, ...]]",
                    "Optional[str]"
                ]
            }
        },
        "BuildCMakeClib.initalize_cmake_toolchain": {
            "name": "initalize_cmake_toolchain",
            "location": 698,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildCMakeClib._resolve_cmake_args": {
            "name": "_resolve_cmake_args",
            "location": 711,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "library": [
                    "Dict[str, Any]",
                    "dict",
                    "Union[Dict, str]",
                    "int",
                    "str",
                    "Callable"
                ]
            }
        },
        "BuildOpenJpegClib.__init__": {
            "name": "__init__",
            "location": 731,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dist": [
                    "denite.util.Nvim",
                    "bool",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "BuildPybind11Extension.parse_dumpbin_deps": {
            "name": "parse_dumpbin_deps",
            "location": 747,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "Optional[str]",
                    "List[str]"
                ],
                "dump_file": [
                    "str",
                    "IO",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "BuildPybind11Extension.initialize_options": {
            "name": "initialize_options",
            "location": 761,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildPybind11Extension.finalize_options": {
            "name": "finalize_options",
            "location": 764,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildPybind11Extension.remove_system_dlls": {
            "name": "remove_system_dlls",
            "location": 768,
            "return": [
                "list"
            ],
            "arguments": {
                "dlls": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "BuildPybind11Extension.find_openjpeg_lib_path": {
            "name": "find_openjpeg_lib_path",
            "location": 782,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "starting_path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "BuildPybind11Extension.find_openjpeg_header_path": {
            "name": "find_openjpeg_header_path",
            "location": 793,
            "return": [
                "Optional[str]",
                "str",
                "Optional[BinaryIO]",
                "Optional[bool]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "starting_path": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "BuildPybind11Extension.run": {
            "name": "run",
            "location": 800,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildPybind11Extension.resolve_shared_library": {
            "name": "resolve_shared_library",
            "location": 813,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dll_name": [
                    "str",
                    "setup.Settings",
                    "Union[str, List[str], Tuple[str, ...]]",
                    "Optional[str]"
                ],
                "search_paths": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "BuildPybind11Extension.get_library_paths": {
            "name": "get_library_paths",
            "location": 825,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildPybind11Extension.find_deps": {
            "name": "find_deps",
            "location": 843,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "lib": [
                    "str",
                    "List[str]",
                    "Set[str]"
                ],
                "search_paths": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "BuildPybind11Extension.find_header_file_path": {
            "name": "find_header_file_path",
            "location": 855,
            "return": [
                "Optional[str]",
                "dict",
                "Pattern",
                "str"
            ],
            "arguments": {
                "self": [],
                "include_dirs": [
                    "List[str]",
                    "str",
                    "bool"
                ],
                "headers": [
                    "List[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "BuildPybind11Extension.find_missing_libraries": {
            "name": "find_missing_libraries",
            "location": 865,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "ext": [
                    "str",
                    "int"
                ]
            }
        },
        "BuildPybind11Extension.build_extension": {
            "name": "build_extension",
            "location": 882,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ext": [
                    "List[str]",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "BuildPybind11Extension._get_path_dirs": {
            "name": "_get_path_dirs",
            "location": 903,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsSoHandler.__init__": {
            "name": "__init__",
            "location": 1093,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "library_file": [
                    "str",
                    "IO",
                    "TextIO",
                    "AsyncGenerator",
                    "Coroutine",
                    "List[str]"
                ],
                "context": [
                    "str",
                    "TextIO",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "AbsSoHandler.set_compiler": {
            "name": "set_compiler",
            "location": 1098,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "compiler": [
                    "bool",
                    "float"
                ]
            }
        },
        "AbsSoHandler.is_system_file": {
            "name": "is_system_file",
            "location": 1102,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "int",
                    "list"
                ],
                "filename": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "int",
                    "list"
                ]
            }
        },
        "AbsSoHandler.get_deps": {
            "name": "get_deps",
            "location": 1106,
            "return": [
                "typing.List[builtins.str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsSoHandler.resolve": {
            "name": "resolve",
            "location": 1109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "search_paths": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "DllHandlerStrategy.__init__": {
            "name": "__init__",
            "location": 982,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "library_file": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "context": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "DllHandlerStrategy.resolve": {
            "name": "resolve",
            "location": 986,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "search_paths": [
                    "str",
                    "dict",
                    "Optional[Dict]"
                ]
            }
        },
        "DllHandlerStrategy.find_lib": {
            "name": "find_lib",
            "location": 1003,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "lib": [
                    "str",
                    "List[str]",
                    "Set[str]"
                ],
                "search_paths": [
                    "Optional[str]",
                    "str",
                    "Optional[IO[bytes]]"
                ]
            }
        },
        "DllHandlerStrategy.is_system_file": {
            "name": "is_system_file",
            "location": 1016,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "int",
                    "list"
                ],
                "filename": [
                    "str",
                    "Dict[str, str]",
                    "Set[str]",
                    "Callable[[str], str]"
                ]
            }
        },
        "DllHandlerStrategy.get_deps": {
            "name": "get_deps",
            "location": 1033,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConanBuildInfoParser.__init__": {
            "name": "__init__",
            "location": 1055,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fp": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ConanBuildInfoParser.parse": {
            "name": "parse",
            "location": 1058,
            "return": [
                "Dict[(Any, list)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConanBuildInfoParser.iter_subject_chunk": {
            "name": "iter_subject_chunk",
            "location": 1066,
            "return": [
                "Generator[(list, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConanImportManifestParser.__init__": {
            "name": "__init__",
            "location": 1081,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fp": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ConanImportManifestParser.parse": {
            "name": "parse",
            "location": 1084,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullHandlerStrategy.get_deps": {
            "name": "get_deps",
            "location": 1134,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MacholibStrategy.get_system_files": {
            "name": "get_system_files",
            "location": 1142,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "MacholibStrategy.get_deps": {
            "name": "get_deps",
            "location": 1147,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "MacholibStrategy.is_system_file": {
            "name": "is_system_file",
            "location": 1156,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "bytes",
                    "IO"
                ],
                "filename": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "bytes",
                    "IO"
                ]
            }
        },
        "MacholibStrategy.resolve": {
            "name": "resolve",
            "location": 1168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "search_path": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "AudidWheelsHandlerStrategy.get_deps": {
            "name": "get_deps",
            "location": 1201,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildConan.get_from_txt": {
            "name": "get_from_txt",
            "location": 1225,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "conanbuildinfo_file": [
                    "str"
                ]
            }
        },
        "BuildConan.initialize_options": {
            "name": "initialize_options",
            "location": 1249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildConan.finalize_options": {
            "name": "finalize_options",
            "location": 1253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildConan.getConanBuildInfo": {
            "name": "getConanBuildInfo",
            "location": 1268,
            "return": [
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "root_dir": [
                    "Tuple[int, int]",
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "BuildConan.run": {
            "name": "run",
            "location": 1275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildConan.find_conan_paths_cmake": {
            "name": "find_conan_paths_cmake",
            "location": 1384,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildConan.get_import_paths_from_import_manifest": {
            "name": "get_import_paths_from_import_manifest",
            "location": 1395,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "manifest_file": [
                    "List[str]",
                    "str",
                    "bool",
                    "TextIO"
                ]
            }
        },
        "BuildConan.get_libraries_from_import_manifest": {
            "name": "get_libraries_from_import_manifest",
            "location": 1403,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "manifest_file": [
                    "str"
                ]
            }
        },
        "BuildConan.get_from_json": {
            "name": "get_from_json",
            "location": 1408,
            "return": [
                "Dict[(str, list)]"
            ],
            "arguments": {
                "self": [],
                "conanbuildinfo_file": [
                    "List[Dict[str, Any]]",
                    "Sequence[str]",
                    "List[str]"
                ]
            }
        },
        "PackageClib._locate_shared_libraries.filter_library_files": {
            "name": "filter_library_files",
            "location": 80,
            "return": [
                "bool"
            ],
            "arguments": {
                "item": [
                    "os.DirEntry",
                    "List[str]",
                    "IO",
                    "denite.util.UserContext",
                    "bytes",
                    "Union[str, IO[str]]",
                    "str",
                    "Optional[Container[str]]"
                ]
            }
        },
        "BuildConan.get_from_json.reduce_dups": {
            "name": "reduce_dups",
            "location": 1417,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "a": [
                    "str",
                    "int",
                    "T",
                    "Hashable"
                ],
                "b": [
                    "str",
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "List[int]"
                ],
                "key": [
                    "str",
                    "Union[Callable[[Dict], Hashable], str]",
                    "Hashable",
                    "Callable",
                    "T",
                    "bytes"
                ]
            }
        }
    },
    "imagevalidate-master/docs/source/conf.py": {
        "get_project_metadata": {
            "name": "get_project_metadata",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "imagevalidate-master/tests/conftest.py": {
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "dict"
                ]
            }
        },
        "pytest_collection_modifyitems": {
            "name": "pytest_collection_modifyitems",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]"
                ],
                "items": [
                    "List",
                    "Dict",
                    "str"
                ]
            }
        }
    },
    "imagevalidate-master/tests/test_extension.py": {
        "test_dummy": {
            "name": "test_dummy",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_colorspace_exists": {
            "name": "test_get_colorspace_exists",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_get_bitdeph_throws_exception": {
            "name": "test_invalid_get_bitdeph_throws_exception",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "imagevalidate-master/tests/test_image.py": {
        "test_loaded": {
            "name": "test_loaded",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_profile": {
            "name": "test_load_profile",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_missing_file": {
            "name": "test_missing_file",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "imagevalidate-master/tests/test_integration.py": {
        "download_images": {
            "name": "download_images",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "destination": [
                    "str"
                ]
            }
        },
        "sample_data": {
            "name": "sample_data",
            "location": 36,
            "return": [
                "typing.Generator[str]"
            ],
            "arguments": {}
        },
        "test_bitdepth": {
            "name": "test_bitdepth",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_data": [
                    "str",
                    "List[str]"
                ],
                "test_file": [
                    "str",
                    "List[str]"
                ],
                "profile_name": [
                    "str",
                    "Tuple[str]",
                    "List[str]"
                ]
            }
        },
        "test_invalid_colorspace": {
            "name": "test_invalid_colorspace",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_data": [
                    "str",
                    "List[str]"
                ],
                "test_file": [
                    "str",
                    "List[str]"
                ],
                "profile_name": [
                    "str",
                    "Tuple[str]",
                    "List[str]"
                ]
            }
        },
        "test_valid_colorspace": {
            "name": "test_valid_colorspace",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_data": [
                    "str"
                ],
                "test_file": [
                    "str"
                ],
                "profile_name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_correct": {
            "name": "test_correct",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_data": [
                    "str",
                    "List[str]"
                ],
                "test_file": [
                    "str",
                    "List[str]"
                ],
                "profile_name": [
                    "str",
                    "Tuple[str]",
                    "List[str]"
                ]
            }
        },
        "test_empty_address": {
            "name": "test_empty_address",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_data": [
                    "str",
                    "List[str]"
                ],
                "test_file": [
                    "str",
                    "List[str]"
                ],
                "profile_name": [
                    "str",
                    "Tuple[str]",
                    "List[str]"
                ]
            }
        },
        "test_empty_city": {
            "name": "test_empty_city",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_data": [
                    "str",
                    "List[str]"
                ],
                "test_file": [
                    "str",
                    "List[str]"
                ],
                "profile_name": [
                    "str",
                    "Tuple[str]",
                    "List[str]"
                ]
            }
        },
        "test_empty_country": {
            "name": "test_empty_country",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_data": [
                    "str",
                    "List[str]"
                ],
                "test_file": [
                    "str",
                    "List[str]"
                ],
                "profile_name": [
                    "str",
                    "Tuple[str]",
                    "List[str]"
                ]
            }
        },
        "test_missing_creator": {
            "name": "test_missing_creator",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_data": [
                    "str",
                    "List[str]"
                ],
                "test_file": [
                    "str",
                    "List[str]"
                ],
                "profile_name": [
                    "str",
                    "Tuple[str]",
                    "List[str]"
                ]
            }
        },
        "test_empty_state": {
            "name": "test_empty_state",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_data": [
                    "str"
                ],
                "test_file": [
                    "str"
                ],
                "profile_name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_empty_zip": {
            "name": "test_empty_zip",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_data": [
                    "str"
                ],
                "test_file": [
                    "str"
                ],
                "profile_name": [
                    "str",
                    "List[str]",
                    "Dict",
                    "Iterable[str]"
                ]
            }
        },
        "test_empty_phonenumber": {
            "name": "test_empty_phonenumber",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_data": [
                    "str",
                    "List[str]"
                ],
                "test_file": [
                    "str",
                    "List[str]"
                ],
                "profile_name": [
                    "str",
                    "Tuple[str]",
                    "List[str]"
                ]
            }
        },
        "test_pixelarray": {
            "name": "test_pixelarray",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_data": [
                    "str",
                    "List[str]"
                ],
                "test_file": [
                    "str",
                    "List[str]"
                ],
                "profile_name": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "imagevalidate-master/tests/test_message_generation.py": {
        "test_invalid_data": {
            "name": "test_invalid_data",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_empty_data": {
            "name": "test_empty_data",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_missing_field": {
            "name": "test_missing_field",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "imagevalidate-master/tests/test_profile_loader.py": {
        "test_get_all_profiles": {
            "name": "test_get_all_profiles",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_hathi_tiff_profile": {
            "name": "test_get_hathi_tiff_profile",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "imagevalidate-master/uiucprescon/imagevalidate/common.py": {
        "AbsColorSpaceExtractor.check": {
            "name": "check",
            "location": 18,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "str",
                    "int",
                    "Tuple[int,int,int]",
                    "Tuple[Union[int,int,int]]"
                ]
            }
        },
        "ExtractColorSpace.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "strategy": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ExtractColorSpace.check": {
            "name": "check",
            "location": 43,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "ColorSpaceIccDeviceModelCheck.check": {
            "name": "check",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "int",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "ColorSpaceIccPrefCcmCheck.check": {
            "name": "check",
            "location": 90,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "int",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "ColorSpaceOJPCheck.check": {
            "name": "check",
            "location": 117,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "str",
                    "Iterable[str]",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "imagevalidate-master/uiucprescon/imagevalidate/issues.py": {},
    "imagevalidate-master/uiucprescon/imagevalidate/messages.py": {
        "AbsMessage.generate_message": {
            "name": "generate_message",
            "location": 12,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "uiucprescon.imagevalidate.reporResult"
                ],
                "data": [
                    "str",
                    "uiucprescon.imagevalidate.reporResult"
                ]
            }
        },
        "InvalidData.generate_message": {
            "name": "generate_message",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "bool",
                    "uiucprescon.imagevalidate.reporResult",
                    "None",
                    "Dict",
                    "int",
                    "Optional[Union[str,int]]",
                    "Optional[Dict]"
                ],
                "data": [
                    "str",
                    "bool",
                    "uiucprescon.imagevalidate.reporResult",
                    "None",
                    "Dict",
                    "int",
                    "Optional[Union[str,int]]",
                    "Optional[Dict]"
                ]
            }
        },
        "EmptyData.generate_message": {
            "name": "generate_message",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "uiucprescon.imagevalidate.reporResult"
                ],
                "data": [
                    "str",
                    "uiucprescon.imagevalidate.reporResult"
                ]
            }
        },
        "MissingField.generate_message": {
            "name": "generate_message",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "uiucprescon.imagevalidate.reporResult"
                ],
                "data": [
                    "str",
                    "uiucprescon.imagevalidate.reporResult"
                ]
            }
        },
        "MessageGenerator.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "strategy": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "MessageGenerator.generate_message": {
            "name": "generate_message",
            "location": 54,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Type",
                    "bool",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "data": [
                    "Type",
                    "bool",
                    "str",
                    "Optional[int]",
                    "None"
                ]
            }
        }
    },
    "imagevalidate-master/uiucprescon/imagevalidate/profile.py": {
        "available_profiles": {
            "name": "available_profiles",
            "location": 38,
            "return": [
                "set"
            ],
            "arguments": {}
        },
        "get_profile": {
            "name": "get_profile",
            "location": 48,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Profile.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "validation_profile": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Profile.validate": {
            "name": "validate",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str"
                ]
            }
        }
    },
    "imagevalidate-master/uiucprescon/imagevalidate/report.py": {
        "Report.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Report.valid": {
            "name": "valid",
            "location": 29,
            "return": [
                "bool",
                "str",
                "int",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Report.issues": {
            "name": "issues",
            "location": 38,
            "return": [
                "List",
                "str",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "issue_type": [
                    "str",
                    "int",
                    "None",
                    "bytes"
                ]
            }
        },
        "Report.__str__": {
            "name": "__str__",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "imagevalidate-master/uiucprescon/imagevalidate/__init__.py": {},
    "imagevalidate-master/uiucprescon/imagevalidate/profiles/absProfile.py": {
        "AbsProfile.profile_name": {
            "name": "profile_name",
            "location": 23,
            "return": [
                "str",
                "None"
            ],
            "arguments": {}
        },
        "AbsProfile.validate": {
            "name": "validate",
            "location": 27,
            "return": [
                "uiucprescon.imagevalidate.Report",
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "List[str]",
                    "IO[str]",
                    "BinaryIO",
                    "IO",
                    "bool",
                    "List"
                ]
            }
        },
        "AbsProfile._get_metadata_static_values": {
            "name": "_get_metadata_static_values",
            "location": 38,
            "return": [
                "Dict",
                "str",
                "Sequence",
                "Union[Dict,Tuple]",
                "Callable",
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List",
                    "T"
                ],
                "image": [
                    "str",
                    "py3exiv2bind.Image",
                    "None",
                    "Dict[str,Any]",
                    "bool",
                    "Any",
                    "Optional[str]",
                    "Optional[Union[Any,str]]"
                ]
            }
        },
        "AbsProfile._get_metadata_has_values": {
            "name": "_get_metadata_has_values",
            "location": 50,
            "return": [
                "Dict",
                "str",
                "Sequence",
                "Union[Dict,Tuple]",
                "Callable",
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List",
                    "bool"
                ],
                "image": [
                    "str",
                    "py3exiv2bind.Image",
                    "Dict",
                    "None",
                    "Any",
                    "Optional[str]",
                    "Optional[Union[Any,str]]"
                ]
            }
        },
        "AbsProfile.generate_error_msg": {
            "name": "generate_error_msg",
            "location": 62,
            "return": [
                "str",
                "bytes",
                "List[dict]"
            ],
            "arguments": {
                "category": [
                    "Optional[Type]",
                    "str",
                    "Type"
                ],
                "field": [
                    "str",
                    "int"
                ],
                "report_data": [
                    "Set[str]",
                    "uiucprescon.imagevalidate.reporResult",
                    "List",
                    "Dict",
                    "Dict[str,list[str]]",
                    "Dict[str,List[str]]"
                ]
            }
        },
        "AbsProfile.analyze_data_for_issues": {
            "name": "analyze_data_for_issues",
            "location": 81,
            "return": [
                "None",
                "str",
                "List[str]",
                "bytes"
            ],
            "arguments": {
                "result": [
                    "uiucprescon.imagevalidate.reporResult",
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "List[Dict]",
                    "List[dict]"
                ]
            }
        },
        "AbsProfile.get_data_from_image": {
            "name": "get_data_from_image",
            "location": 97,
            "return": [
                "Dict",
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str,Any]"
                ],
                "filename": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "imagevalidate-master/uiucprescon/imagevalidate/profiles/hathi_jp2000.py": {
        "HathiJP2000.profile_name": {
            "name": "profile_name",
            "location": 47,
            "return": [
                "Text",
                "str",
                "int",
                "Dict[str,Any]",
                "Container[str]",
                "bool",
                "Union[List,Dict]"
            ],
            "arguments": {}
        },
        "HathiJP2000.validate": {
            "name": "validate",
            "location": 51,
            "return": [
                "Report",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "BinaryIO",
                    "bytes",
                    "Dict",
                    "py3exiv2bind.Image"
                ]
            }
        },
        "HathiJP2000.get_data_from_image": {
            "name": "get_data_from_image",
            "location": 81,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "filename": [
                    "str",
                    "Union[str,BinaryIO]",
                    "BinaryIO"
                ]
            }
        },
        "HathiJP2000.determine_color_space": {
            "name": "determine_color_space",
            "location": 111,
            "return": [
                "None",
                "str",
                "int",
                "Optional[Union[str,Any]]"
            ],
            "arguments": {
                "image": [
                    "str",
                    "int",
                    "float"
                ]
            }
        }
    },
    "imagevalidate-master/uiucprescon/imagevalidate/profiles/hathi_tiff.py": {
        "HathiTiff.profile_name": {
            "name": "profile_name",
            "location": 47,
            "return": [
                "Text",
                "str",
                "int",
                "Dict[str,Any]",
                "Container[str]",
                "bool",
                "Union[List,Dict]"
            ],
            "arguments": {}
        },
        "HathiTiff.validate": {
            "name": "validate",
            "location": 51,
            "return": [
                "Report",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "BinaryIO",
                    "bytes",
                    "Dict",
                    "py3exiv2bind.Image"
                ]
            }
        },
        "HathiTiff.get_data_from_image": {
            "name": "get_data_from_image",
            "location": 81,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "filename": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "HathiTiff.determine_color_space": {
            "name": "determine_color_space",
            "location": 99,
            "return": [
                "None",
                "str",
                "Optional[str]",
                "List",
                "Optional[BaseException]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        }
    },
    "imagevalidate-master/uiucprescon/imagevalidate/profiles/__init__.py": {
        "_load": {
            "name": "_load",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_load.is_profile": {
            "name": "is_profile",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "i": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "imagevalidate-master/utils/upload_docs.py": {
        "locate_documentation_files": {
            "name": "locate_documentation_files",
            "location": 7,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "root_path": [
                    "str"
                ]
            }
        },
        "get_arg_parser": {
            "name": "get_arg_parser",
            "location": 15,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "remove_files_from_directory": {
            "name": "remove_files_from_directory",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "bool",
                    "List[Dict[str, Any]]"
                ],
                "root": [
                    "str",
                    "bool",
                    "Mapping[str,str]",
                    "Mapping"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
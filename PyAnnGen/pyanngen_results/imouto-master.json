{
    "imouto-master/setup.py": {},
    "imouto-master/demos/api.py": {},
    "imouto-master/demos/cookie.py": {},
    "imouto-master/demos/default_handler.py": {},
    "imouto-master/demos/header.py": {},
    "imouto-master/demos/hello_world.py": {
        "HelloWorldHandler.initialize": {
            "name": "initialize",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "imouto-master/demos/magic_route.py": {},
    "imouto-master/demos/redirect.py": {},
    "imouto-master/imouto/autoload.py": {
        "autoload": {
            "name": "autoload",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "interval": [
                    "int"
                ]
            }
        },
        "FileCheckerThread.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lockfile": [],
                "interval": []
            }
        },
        "FileCheckerThread.run": {
            "name": "run",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileCheckerThread.run.mtime": {
            "name": "mtime",
            "location": 99,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "autoload.interrupt_handler": {
            "name": "interrupt_handler",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "signal": [],
                "frame": []
            }
        }
    },
    "imouto-master/imouto/config.py": {
        "ConfigAttribute.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "Dict"
                ],
                "get_converter": [
                    "str",
                    "None",
                    "bool",
                    "int"
                ]
            }
        },
        "ConfigAttribute.__get__": {
            "name": "__get__",
            "location": 17,
            "return": [
                "ConfigAttribute",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "bool",
                    "None",
                    "List[str]",
                    "Optional[str]",
                    "int"
                ],
                "type": [
                    "str",
                    "None",
                    "Type",
                    "Optional[type]"
                ]
            }
        },
        "ConfigAttribute.__set__": {
            "name": "__set__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Dict[str,Any]",
                    "List",
                    "bool",
                    "apistar.types.ParamName"
                ],
                "value": [
                    "str",
                    "Dict[str,Any]",
                    "List",
                    "bool",
                    "apistar.types.ParamName"
                ]
            }
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root_path": [
                    "str",
                    "None"
                ],
                "defaults": [
                    "Dict",
                    "None",
                    "str",
                    "Dict[int,Dict[int,Any]]",
                    "Exception",
                    "Dict[int,dict[int,Any]]",
                    "Union[Dict,List]",
                    "List",
                    "dothebackup.types.CONFIGTYPE",
                    "Optional[str]",
                    "List[str]",
                    "Union[str,List[str]]"
                ]
            }
        },
        "Config.root_path": {
            "name": "root_path",
            "location": 36,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.set_root_path": {
            "name": "set_root_path",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "List[int]",
                    "str",
                    "List"
                ]
            }
        },
        "Config.from_object": {
            "name": "from_object",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Dict",
                    "Dict[str,Any]",
                    "str",
                    "List"
                ]
            }
        },
        "Config.from_envvar": {
            "name": "from_envvar",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "variable_name": [
                    "str"
                ]
            }
        },
        "Config.from_pyfile": {
            "name": "from_pyfile",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "Config.from_yaml": {
            "name": "from_yaml",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "Config.from_toml": {
            "name": "from_toml",
            "location": 100,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "Config.from_json": {
            "name": "from_json",
            "location": 117,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "Config.from_mapping": {
            "name": "from_mapping",
            "location": 134,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.get_namespace": {
            "name": "get_namespace",
            "location": 156,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "str",
                    "bool"
                ],
                "lowercase": [
                    "bool",
                    "str",
                    "T",
                    "Dict"
                ],
                "trim_namespace": [
                    "bool",
                    "str",
                    "List[str]",
                    "int",
                    "IO[str]",
                    "List[List[str]]"
                ]
            }
        },
        "Config.__repr__": {
            "name": "__repr__",
            "location": 168,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "imouto-master/imouto/datastructures.py": {
        "ImmutableDict.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ImmutableDict.__hash__": {
            "name": "__hash__",
            "location": 30,
            "return": [
                "int",
                "Tuple[int,int]",
                "Tuple[int]",
                "bool",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableDict.__repr__": {
            "name": "__repr__",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableDict.copy": {
            "name": "copy",
            "location": 43,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableDict.__copy__": {
            "name": "__copy__",
            "location": 50,
            "return": [
                "ImmutableDict"
            ],
            "arguments": {
                "self": [
                    "_TImmutableDict@@ImmutableDict@@"
                ]
            }
        },
        "ImmutableDict.fromkeys": {
            "name": "fromkeys",
            "location": 54,
            "return": [
                "ImmutableDict"
            ],
            "arguments": {
                "cls": [
                    "Type[_TImmutableDict]"
                ],
                "iterable": [
                    "str",
                    "Dict[str,Any]",
                    "List",
                    "int",
                    "Pattern[str]",
                    "List[Union[Any,Any]]"
                ],
                "value": [
                    "str",
                    "None",
                    "VT",
                    "KT"
                ]
            }
        },
        "ImmutableDict.complain": {
            "name": "complain",
            "location": 60,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConstantsObject.__getattr__": {
            "name": "__getattr__",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict"
                ]
            }
        },
        "ConstantsObject.__dir__": {
            "name": "__dir__",
            "location": 77,
            "return": [
                "str",
                "dict",
                "TextIO",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiDict.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiDict.__getitem__": {
            "name": "__getitem__",
            "location": 108,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ]
            }
        },
        "MultiDict.__setitem__": {
            "name": "__setitem__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ],
                "value": [
                    "str",
                    "bytes"
                ]
            }
        },
        "MultiDict.__eq__": {
            "name": "__eq__",
            "location": 114,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "SupportsFloat",
                    "int",
                    "Union[int,float]",
                    "float",
                    "AbstractSet[T]",
                    "AbstractSet"
                ]
            }
        },
        "MultiDict.values": {
            "name": "values",
            "location": 118,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiDict.items": {
            "name": "items",
            "location": 121,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiDict.allitems": {
            "name": "allitems",
            "location": 124,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiDict.get": {
            "name": "get",
            "location": 127,
            "return": [
                "str",
                "bool",
                "None",
                "bytes",
                "int",
                "List[tuple[Union[int,int]]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "bytes",
                    "Callable[[None],Any]",
                    "Callable[None,Any]"
                ],
                "default": [
                    "str",
                    "None",
                    "bytes",
                    "int",
                    "List[Tuple[int,int]]",
                    "Optional[str]",
                    "List[tuple[Union[int,int]]]"
                ],
                "index": [
                    "int",
                    "str",
                    "bytes",
                    "Callable[[None],Any]"
                ]
            }
        },
        "MultiDict.get_all": {
            "name": "get_all",
            "location": 134,
            "return": [
                "List",
                "Optional[str]",
                "bool",
                "Optional[Dict[str,Any]]",
                "Optional[Literal[only_clustered,include_clustered]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "KT"
                ]
            }
        },
        "MultiDict.update": {
            "name": "update",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iterable": [
                    "str",
                    "int"
                ]
            }
        },
        "HeaderDict.__init__": {
            "name": "__init__",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeaderDict.__contains__": {
            "name": "__contains__",
            "location": 158,
            "return": [
                "float",
                "int",
                "outcome.Outcome[str, utils.typeshed.pathlike]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bool",
                    "KT"
                ]
            }
        },
        "HeaderDict.__delitem__": {
            "name": "__delitem__",
            "location": 161,
            "return": [
                "float",
                "int",
                "outcome.Outcome[str, utils.typeshed.pathlike]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bool",
                    "KT"
                ]
            }
        },
        "HeaderDict.__getitem__": {
            "name": "__getitem__",
            "location": 164,
            "return": [
                "float",
                "int",
                "outcome.Outcome[str, utils.typeshed.pathlike]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bool",
                    "KT"
                ]
            }
        },
        "HeaderDict.__setitem__": {
            "name": "__setitem__",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Sequence[str]",
                    "Dict",
                    "int"
                ],
                "value": [
                    "str",
                    "Sequence[str]",
                    "Dict",
                    "int"
                ]
            }
        },
        "HeaderDict.get": {
            "name": "get",
            "location": 170,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[str,int,float]",
                    "int",
                    "Optional[str]",
                    "float",
                    "None"
                ],
                "default": [
                    "str",
                    "None",
                    "Union[str,int,float]",
                    "Optional[str]",
                    "int",
                    "float"
                ],
                "index": [
                    "int",
                    "str",
                    "Union[str,int,float]",
                    "Optional[str]"
                ]
            }
        },
        "HeaderDict.get_all": {
            "name": "get_all",
            "location": 173,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Type",
                    "bytes"
                ]
            }
        }
    },
    "imouto-master/imouto/errors.py": {
        "HTTPError.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status_code": [
                    "int",
                    "str",
                    "None"
                ],
                "log_message": [
                    "Text",
                    "str",
                    "int"
                ]
            }
        },
        "HTTPError.status_code": {
            "name": "status_code",
            "location": 26,
            "return": [
                "int",
                "bytes",
                "dict",
                "str",
                "Dict[str, str]",
                "Dict[str, Tuple[Any, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPError.phrase": {
            "name": "phrase",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "imouto-master/imouto/log.py": {
        "ColorizingStreamHandler.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ColorizingStreamHandler.is_tty": {
            "name": "is_tty",
            "location": 34,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ColorizingStreamHandler.emit": {
            "name": "emit",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "float",
                    "bytes"
                ]
            }
        },
        "ColorizingStreamHandler.colorize": {
            "name": "colorize",
            "location": 50,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "BinaryIO",
                    "bytes"
                ],
                "record": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ColorizingStreamHandler.format": {
            "name": "format",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "ColorHandler.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "imouto-master/imouto/magicroute.py": {
        "Route.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "bool",
                    "Dict"
                ],
                "path": [
                    "str",
                    "int"
                ]
            }
        },
        "Route.__gt__": {
            "name": "__gt__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "HTTPMethod.__truediv__": {
            "name": "__truediv__",
            "location": 32,
            "return": [
                "Route"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        }
    },
    "imouto-master/imouto/request.py": {
        "FileStorage.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field_storage": [
                    "str",
                    "int",
                    "float",
                    "bytes",
                    "Dict[str,Any]",
                    "None",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "Request.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "bool",
                    "None",
                    "Type",
                    "Dict[int,bool]",
                    "Optional[str]",
                    "int",
                    "str"
                ],
                "path": [
                    "str",
                    "None",
                    "List[str]",
                    "Dict[cmk.utils.type_defs.HostName,str]",
                    "bool",
                    "Dict[H,str]"
                ],
                "query_string": [
                    "Text",
                    "str",
                    "IO[str]",
                    "Type[T]",
                    "bool",
                    "Dict[str,str]",
                    "Optional[Mapping[str,str]]"
                ],
                "args": [
                    "None"
                ],
                "headers": [
                    "str",
                    "bytes",
                    "None",
                    "Dict[str,Any]"
                ],
                "form": [
                    "bool",
                    "None",
                    "Type",
                    "Dict[int,bool]",
                    "Optional[str]",
                    "int",
                    "str"
                ],
                "cookies": [
                    "Dict",
                    "None",
                    "utils.MinMaxStats"
                ]
            }
        },
        "Request._parse_cookie": {
            "name": "_parse_cookie",
            "location": 47,
            "return": [
                "MultiDict",
                "Dict[str,Any]",
                "Dict",
                "raiden.utils.Dict[str,raiden.utils.Any]",
                "Dict[str,Dict[str,str]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "Request._parse_form": {
            "name": "_parse_form",
            "location": 52,
            "return": [
                "MultiDict",
                "Dict[str,Any]",
                "Dict",
                "Dict[str,Dict[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "body_stream": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "Request._parse_body": {
            "name": "_parse_body",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "body_stream": [
                    "int"
                ]
            }
        },
        "Request.on_url": {
            "name": "on_url",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "Request.on_header": {
            "name": "on_header",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Callable[[str], str]",
                    "List[Tuple[str, int]]"
                ],
                "value": [
                    "str",
                    "Callable[[str], str]",
                    "List[Tuple[str, int]]"
                ]
            }
        },
        "Request.on_headers_complete": {
            "name": "on_headers_complete",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.on_body": {
            "name": "on_body",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "str"
                ]
            }
        },
        "Request.on_message_complete": {
            "name": "on_message_complete",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.finished": {
            "name": "finished",
            "location": 101,
            "return": [
                "bool",
                "int",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.needs_write_continue": {
            "name": "needs_write_continue",
            "location": 105,
            "return": [
                "bool",
                "int",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.reset_state": {
            "name": "reset_state",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "imouto-master/imouto/response.py": {
        "Response.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "typing.Text"
                ],
                "status_code": [
                    "int"
                ]
            }
        },
        "Response.clear": {
            "name": "clear",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.write": {
            "name": "write",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "str_": []
            }
        },
        "Response.write_bytes": {
            "name": "write_bytes",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bytes_": []
            }
        },
        "Response.write_json": {
            "name": "write_json",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Response.set_cookie": {
            "name": "set_cookie",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "value": []
            }
        },
        "Response.clear_cookie": {
            "name": "clear_cookie",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Response.output": {
            "name": "output",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "imouto-master/imouto/route.py": {
        "URLSpec.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "str",
                    "Optional[str]"
                ],
                "handler": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "List[str]",
                    "None"
                ],
                "kwargs": [
                    "None"
                ],
                "name": [
                    "str",
                    "List[str]",
                    "None"
                ]
            }
        },
        "URLSpec.__repr__": {
            "name": "__repr__",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "URLSpec._find_groups": {
            "name": "_find_groups",
            "location": 21,
            "return": [
                "Tuple[(Optional[str], Optional[int])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "URLSpec.reverse": {
            "name": "reverse",
            "location": 53,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "imouto-master/imouto/secure.py": {
        "create_secure_value": {
            "name": "create_secure_value",
            "location": 11,
            "return": [
                "bytes"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int"
                ],
                "value": [
                    "int",
                    "float",
                    "Dict[str,str]",
                    "bool"
                ]
            }
        },
        "_generate_signature": {
            "name": "_generate_signature",
            "location": 22,
            "return": [
                "str",
                "object",
                "list"
            ],
            "arguments": {
                "secret": [
                    "str",
                    "bytes",
                    "bool",
                    "Dict[Tuple[cmk.utils.type_defs.UserId,DashboardName],DashboardConfig]",
                    "Dict[tuple[Union[cmk.utils.type_defs.UserId,DashboardName]],DashboardConfig]"
                ]
            }
        },
        "verify_secure_value": {
            "name": "verify_secure_value",
            "location": 32,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Dict[str,str]"
                ],
                "value": [
                    "str",
                    "Optional[List[str]]",
                    "bool",
                    "List[str]",
                    "Optional[Callable[[Any,Any],None]]",
                    "None",
                    "Callable[Any,Any,None]"
                ]
            }
        }
    },
    "imouto-master/imouto/utils.py": {
        "url_encode": {
            "name": "url_encode",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Union[str,bytes]",
                    "bytes",
                    "int",
                    "float"
                ],
                "plus": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Dict[str,List[str]]"
                ]
            }
        },
        "re_unescape": {
            "name": "re_unescape",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes"
                ]
            }
        },
        "trim_keys": {
            "name": "trim_keys",
            "location": 36,
            "return": [
                "dict"
            ],
            "arguments": {
                "dict_": [
                    "str"
                ]
            }
        },
        "tob": {
            "name": "tob",
            "location": 45,
            "return": [
                "bytes",
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "enc": [
                    "Text",
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "touni": {
            "name": "touni",
            "location": 51,
            "return": [
                "str",
                "Text",
                "List[int]",
                "Iterable[str]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "Union[str,bytes]"
                ],
                "enc": [
                    "Text",
                    "bytes",
                    "str"
                ],
                "err": [
                    "Text",
                    "bytes",
                    "str"
                ]
            }
        },
        "hkey": {
            "name": "hkey",
            "location": 57,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Iterable[Hashable]",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "hval": {
            "name": "hval",
            "location": 68,
            "return": [
                "str",
                "int",
                "Dict[str,Any]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "List",
                    "int"
                ]
            }
        },
        "re_unescape._re_unescape_replacement": {
            "name": "_re_unescape_replacement",
            "location": 27,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "match": [
                    "str",
                    "bytes",
                    "Optional[int]"
                ]
            }
        },
        "Singleton.__call__": {
            "name": "__call__",
            "location": 80,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [
                    "Singleton"
                ]
            }
        },
        "LRUCache.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capacity": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "LRUCache.get": {
            "name": "get",
            "location": 120,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "LRUCache.set": {
            "name": "set",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Union[Any,str]]",
                    "Any"
                ],
                "value": [
                    "str",
                    "Dict",
                    "T"
                ]
            }
        },
        "LRUCache._append_tail": {
            "name": "_append_tail",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "LRUCache.__repr__": {
            "name": "__repr__",
            "location": 157,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LRUCache.Node.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "Optional[Union[Any, str]]",
                    "Union[str, int]"
                ],
                "value": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "imouto-master/imouto/web.py": {
        "log": {
            "name": "log",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "status_code": [
                    "str",
                    "int",
                    "List[Mapping[str, str]]",
                    "Optional[Mapping[str, str]]",
                    "Dict[str, Any]"
                ],
                "method": [
                    "str",
                    "int",
                    "List[Mapping[str, str]]",
                    "Optional[Mapping[str, str]]",
                    "Dict[str, Any]"
                ],
                "path": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "query_string": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "RequestHandler.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "dict"
                ],
                "request": [
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "bool"
                ],
                "response": [
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "bool"
                ]
            }
        },
        "RequestHandler.initialize": {
            "name": "initialize",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestHandler.write": {
            "name": "write",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chunk": [
                    "str",
                    "int"
                ]
            }
        },
        "RequestHandler.write_json": {
            "name": "write_json",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "bytes"
                ]
            }
        },
        "RequestHandler.redirect": {
            "name": "redirect",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "permanent": [
                    "bool",
                    "str",
                    "Dict[str, Union[str, int]]"
                ]
            }
        },
        "RequestHandler.get_query_argument": {
            "name": "get_query_argument",
            "location": 98,
            "return": [
                "Optional[str]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, str]"
                ],
                "default": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "RequestHandler.get_body_argument": {
            "name": "get_body_argument",
            "location": 102,
            "return": [
                "Optional[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict",
                    "Optional[Mapping[str, Any]]"
                ],
                "default": [
                    "str",
                    "dict",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        },
        "RequestHandler.headers": {
            "name": "headers",
            "location": 107,
            "return": [
                "int",
                "bytes",
                "dict",
                "Dict[str, Union[str, int]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestHandler.get_header": {
            "name": "get_header",
            "location": 111,
            "return": [
                "dict",
                "str",
                "Config"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "default": [
                    "str"
                ]
            }
        },
        "RequestHandler.set_header": {
            "name": "set_header",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "cmk.utils.type_defs.SectionName"
                ],
                "value": [
                    "str",
                    "cmk.utils.type_defs.SectionName"
                ]
            }
        },
        "RequestHandler.cookies": {
            "name": "cookies",
            "location": 120,
            "return": [
                "int",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestHandler.get_cookie": {
            "name": "get_cookie",
            "location": 124,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]",
                "bool",
                "Union[str, Pattern]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "default": [
                    "str"
                ]
            }
        },
        "RequestHandler.set_cookie": {
            "name": "set_cookie",
            "location": 128,
            "return": [
                "str",
                "Optional[str]",
                "Optional[int]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "RequestHandler.clear_cookie": {
            "name": "clear_cookie",
            "location": 131,
            "return": [
                "Dict[str, Any]",
                "Optional[str]",
                "Dict[str, dict]",
                "List[str]",
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Mapping[str, str]",
                    "T"
                ]
            }
        },
        "RedirectHandler.initialize": {
            "name": "initialize",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.__init__": {
            "name": "__init__",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handlers": [
                    "Dict[str, Any]",
                    "cmk.base.config.HostConfig"
                ],
                "config": [
                    "dict",
                    "config.Config",
                    "types.Config"
                ],
                "default_handler": [
                    "Dict[str, Any]",
                    "cmk.base.config.HostConfig"
                ]
            }
        },
        "Application.add_handlers": {
            "name": "add_handlers",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handlers": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "Application._find_handler": {
            "name": "_find_handler",
            "location": 178,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Pattern[str]"
                ]
            }
        },
        "Application._handle_error": {
            "name": "_handle_error",
            "location": 256,
            "return": [
                "str",
                "bool",
                "List[Dict[str, str]]",
                "list"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "Exception",
                    "Sequence[float]",
                    "int",
                    "Iterable[T]"
                ]
            }
        },
        "Application._write_response": {
            "name": "_write_response",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "res": [
                    "bytes",
                    "bool",
                    "Union[str, Any]",
                    "Optional[str]",
                    "List[str]",
                    "IO[bytes]",
                    "list"
                ],
                "writer": [
                    "asyncio.StreamWriter",
                    "bool",
                    "Dict[str, str]",
                    "dict",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Application._prepare": {
            "name": "_prepare",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.test_server": {
            "name": "test_server",
            "location": 282,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "loop": [
                    "Dict[str, Any]"
                ]
            }
        },
        "Application.run": {
            "name": "run",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "imouto-master/imouto/__init__.py": {},
    "imouto-master/tests/conftest.py": {
        "client": {
            "name": "client",
            "location": 80,
            "return": [
                "typing.Generator[Client]"
            ],
            "arguments": {}
        },
        "Client.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.tearDown": {
            "name": "tearDown",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client._generate_request": {
            "name": "_generate_request",
            "location": 25,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "bytes",
                    "str",
                    "List[str]"
                ],
                "path": [
                    "bytes",
                    "str",
                    "List[str]"
                ],
                "version": [
                    "bytes",
                    "str",
                    "List[str]"
                ],
                "accept": [
                    "bytes",
                    "str",
                    "List[str]"
                ],
                "accept_encoding": [
                    "bytes",
                    "str",
                    "List[str]"
                ],
                "connection": [
                    "bytes",
                    "str",
                    "List[str]"
                ],
                "data": [
                    "bytes",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Client.feed": {
            "name": "feed",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "Client._get_response": {
            "name": "_get_response",
            "location": 47,
            "return": [
                "Dict[str,str]",
                "Dict[str,Union[int,str]]",
                "Dict",
                "bytes",
                "Optional[Dict[str,str]]",
                "Optional[TrackingData]"
            ],
            "arguments": {
                "self": [],
                "request_data": [
                    "Dict[str,Any]",
                    "bytes",
                    "Dict",
                    "raiden.utils.Address"
                ]
            }
        },
        "Client.get": {
            "name": "get",
            "location": 66,
            "return": [
                "Dict",
                "int",
                "List[str]",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Client.post": {
            "name": "post",
            "location": 72,
            "return": [
                "Dict",
                "List[str]",
                "int",
                "Optional[Dict[str,Any]]",
                "bool",
                "str",
                "Dict[str,str]",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Dict[cmk.utils.type_defs.HostName,str]",
                    "Dict"
                ]
            }
        }
    },
    "imouto-master/tests/test_config.py": {
        "test_config_from_class": {
            "name": "test_config_from_class",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_config_attribute": {
            "name": "test_config_attribute",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "imouto-master/tests/test_datastructures.py": {
        "TestImmutableDict.test_pickle": {
            "name": "test_pickle",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableDict.test_follows_dict_interface": {
            "name": "test_follows_dict_interface",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableDict.test_dict_is_hashable": {
            "name": "test_dict_is_hashable",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImmutableDict.test_immutable": {
            "name": "test_immutable",
            "location": 55,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConstantsObject.test": {
            "name": "test",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMultiDict.test": {
            "name": "test",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHeaderDict.test": {
            "name": "test",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "imouto-master/tests/test_errors.py": {
        "test_httperror": {
            "name": "test_httperror",
            "location": 8,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        }
    },
    "imouto-master/tests/test_imouto.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_redirect": {
            "name": "test_redirect",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_magic_route": {
            "name": "test_magic_route",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_http_method": {
            "name": "test_http_method",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_dynamic_route": {
            "name": "test_dynamic_route",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_get_query_string": {
            "name": "test_get_query_string",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_post_data": {
            "name": "test_post_data",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "dict"
                ]
            }
        }
    },
    "imouto-master/tests/test_utils.py": {
        "test_url_encode": {
            "name": "test_url_encode",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_re_unescape": {
            "name": "test_re_unescape",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_trim_keys": {
            "name": "test_trim_keys",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tob": {
            "name": "test_tob",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_touni": {
            "name": "test_touni",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_hkey": {
            "name": "test_hkey",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_hval": {
            "name": "test_hval",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_singleton": {
            "name": "test_singleton",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "imouto-master/tests/__init__.py": {}
}